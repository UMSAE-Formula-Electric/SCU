
SCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08011bd0  08011bd0  00021bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122d8  080122d8  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080122d8  080122d8  000222d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122e0  080122e0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122e0  080122e0  000222e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122e4  080122e4  000222e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080122e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ec14  20000208  080124f0  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ee1c  080124f0  0003ee1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022d46  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065f0  00000000  00000000  00052fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  000595b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000173b  00000000  00000000  0005b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cccb  00000000  00000000  0005cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cc6a  00000000  00000000  00089846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f04  00000000  00000000  000b64b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009140  00000000  00000000  001ab3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001b44f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011bb8 	.word	0x08011bb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08011bb8 	.word	0x08011bb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <queueAccelerationPacket>:
	angular_rate_buffer.buf_wrap		= false;
}


int queueAccelerationPacket(uint8_t data[])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f8e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <queueAccelerationPacket+0x22>
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f98:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f9e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30f      	bcc.n	8000fc6 <queueAccelerationPacket+0x42>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fa8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d035      	beq.n	8001022 <queueAccelerationPacket+0x9e>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fb8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fbe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d32d      	bcc.n	8001022 <queueAccelerationPacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		acceleration_buffer.queue[acceleration_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fc8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4401      	add	r1, r0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		acceleration_buffer.buf_end_pos++;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fe0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(acceleration_buffer.buf_end_pos % BUFFER_SIZE < acceleration_buffer.buf_end_pos)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ff0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ffc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001000:	429a      	cmp	r2, r3
 8001002:	d20c      	bcs.n	800101e <queueAccelerationPacket+0x9a>
		{
			acceleration_buffer.buf_end_pos = acceleration_buffer.buf_end_pos % BUFFER_SIZE;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001006:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001012:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			acceleration_buffer.buf_wrap = true;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <queueAccelerationPacket+0xa2>
	}

	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000228 	.word	0x20000228

08001038 <queueAngularRatePacket>:

int queueAngularRatePacket(uint8_t data[])
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001042:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <queueAngularRatePacket+0x22>
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800104c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001052:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001056:	429a      	cmp	r2, r3
 8001058:	d30f      	bcc.n	800107a <queueAngularRatePacket+0x42>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800105c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d035      	beq.n	80010d6 <queueAngularRatePacket+0x9e>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800106c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001072:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001076:	429a      	cmp	r2, r3
 8001078:	d32d      	bcc.n	80010d6 <queueAngularRatePacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		angular_rate_buffer.queue[angular_rate_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800107c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001080:	4619      	mov	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800108a:	00c9      	lsls	r1, r1, #3
 800108c:	4401      	add	r1, r0
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		angular_rate_buffer.buf_end_pos++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001094:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800109e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(angular_rate_buffer.buf_end_pos % BUFFER_SIZE < angular_rate_buffer.buf_end_pos)
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010a4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010b0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20c      	bcs.n	80010d2 <queueAngularRatePacket+0x9a>
		{
			angular_rate_buffer.buf_end_pos = angular_rate_buffer.buf_end_pos % BUFFER_SIZE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010ba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010c6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			angular_rate_buffer.buf_wrap = true;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <queueAngularRatePacket+0xa2>
	}

	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000630 	.word	0x20000630

080010ec <dequeueAccelerationPacket>:

uint64_t dequeueAccelerationPacket()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!acceleration_buffer.buf_wrap && acceleration_buffer.buf_start_pos == acceleration_buffer.buf_end_pos)
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <dequeueAccelerationPacket+0x98>)
 80010f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <dequeueAccelerationPacket+0x30>
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001104:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800110a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800110e:	429a      	cmp	r2, r3
 8001110:	d104      	bne.n	800111c <dequeueAccelerationPacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e02b      	b.n	8001174 <dequeueAccelerationPacket+0x88>
	}

	// get data value
	temp = acceleration_buffer.queue[acceleration_buffer.buf_start_pos];
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800111e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]

	acceleration_buffer.buf_start_pos++;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001132:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800113c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (acceleration_buffer.buf_start_pos % BUFFER_SIZE < acceleration_buffer.buf_start_pos)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800114e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <dequeueAccelerationPacket+0x84>
	{
		acceleration_buffer.buf_start_pos = acceleration_buffer.buf_start_pos % BUFFER_SIZE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001158:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001164:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		acceleration_buffer.buf_wrap = false;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000228 	.word	0x20000228

08001188 <dequeueAngularRatePacket>:

uint64_t dequeueAngularRatePacket()
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_start_pos == angular_rate_buffer.buf_end_pos)
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001190:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <dequeueAngularRatePacket+0x30>
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <dequeueAngularRatePacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e02b      	b.n	8001210 <dequeueAngularRatePacket+0x88>
	}

	// get data value
	temp = angular_rate_buffer.queue[angular_rate_buffer.buf_start_pos];
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]

	angular_rate_buffer.buf_start_pos++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ce:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (angular_rate_buffer.buf_start_pos % BUFFER_SIZE < angular_rate_buffer.buf_start_pos)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011de:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <dequeueAngularRatePacket+0x84>
	{
		angular_rate_buffer.buf_start_pos = angular_rate_buffer.buf_start_pos % BUFFER_SIZE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011f4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001200:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		angular_rate_buffer.buf_wrap = false;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000630 	.word	0x20000630

08001224 <processAccelerationPacket>:

void processAccelerationPacket(uint64_t packet)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	float x_acceleration;
	float y_acceleration;
	float z_acceleration;

	data = (uint16_t*) &packet;
 8001232:	463b      	mov	r3, r7
 8001234:	617b      	str	r3, [r7, #20]

	y_acceleration = ((float)data[0] / 100) - 320;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012b4 <processAccelerationPacket+0x90>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012b8 <processAccelerationPacket+0x94>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	x_acceleration = ((float)data[1] / 100) - 320;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012b4 <processAccelerationPacket+0x90>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012b8 <processAccelerationPacket+0x94>
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	z_acceleration = ((float)data[2] / 100) - 320;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012b4 <processAccelerationPacket+0x90>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <processAccelerationPacket+0x94>
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Acceleration", x_acceleration, y_acceleration, z_acceleration);
 800129a:	ed97 1a02 	vldr	s2, [r7, #8]
 800129e:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <processAccelerationPacket+0x98>)
 80012a8:	f000 f858 	bl	800135c <printPacket>
	/* Logging Ends */
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	43a00000 	.word	0x43a00000
 80012bc:	08011bd0 	.word	0x08011bd0

080012c0 <processAngularRatePacket>:

void processAngularRatePacket(uint64_t packet)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	float x_angular_rate;
	float y_angular_rate;
	float z_angular_rate;

	data = (uint16_t*) &packet;
 80012ce:	463b      	mov	r3, r7
 80012d0:	617b      	str	r3, [r7, #20]

	y_angular_rate = ((float)data[0] / 128) - 250;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001350 <processAngularRatePacket+0x90>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001354 <processAngularRatePacket+0x94>
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
	x_angular_rate = ((float)data[1] / 128) - 250;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001350 <processAngularRatePacket+0x90>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001354 <processAngularRatePacket+0x94>
 800130c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	z_angular_rate = ((float)data[2] / 128) - 250;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3304      	adds	r3, #4
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001322:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001350 <processAngularRatePacket+0x90>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001354 <processAngularRatePacket+0x94>
 800132e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001332:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Angular Rate", x_angular_rate, y_angular_rate, z_angular_rate);
 8001336:	ed97 1a02 	vldr	s2, [r7, #8]
 800133a:	edd7 0a04 	vldr	s1, [r7, #16]
 800133e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <processAngularRatePacket+0x98>)
 8001344:	f000 f80a 	bl	800135c <printPacket>
	/* Logging Ends */
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43000000 	.word	0x43000000
 8001354:	437a0000 	.word	0x437a0000
 8001358:	08011be0 	.word	0x08011be0

0800135c <printPacket>:

void printPacket(char *data_name, float x, float y, float z)
{
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001364:	af0a      	add	r7, sp, #40	; 0x28
 8001366:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001378:	ed83 0a00 	vstr	s0, [r3]
 800137c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001384:	edc3 0a00 	vstr	s1, [r3]
 8001388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001390:	ed83 1a00 	vstr	s2, [r3]
	char tempMsg[512];

	sprintf(tempMsg, "%s X: %f\r\n%s Y: %f\r\n%s Z: %f\r\n", data_name, x, data_name, y, data_name, z);
 8001394:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001398:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013ce:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 80013d2:	f107 0010 	add.w	r0, r7, #16
 80013d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	680a      	ldr	r2, [r1, #0]
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <printPacket+0xcc>)
 80013fe:	f00d f8c9 	bl	800e594 <siprintf>

	HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 20);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	2314      	movs	r3, #20
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <printPacket+0xd0>)
 8001418:	f006 faa7 	bl	800796a <HAL_USART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	08011bf0 	.word	0x08011bf0
 800142c:	2000aeac 	.word	0x2000aeac

08001430 <StartIMUPacketProcessTask>:

void StartIMUPacketProcessTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint64_t packet;
	for (;;)
	{
		// should probably check to make sure queues are in valid state
		packet = dequeueAccelerationPacket();
 8001438:	f7ff fe58 	bl	80010ec <dequeueAccelerationPacket>
 800143c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAccelerationPacket(packet);
 8001440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001444:	f7ff feee 	bl	8001224 <processAccelerationPacket>

		packet = dequeueAngularRatePacket();
 8001448:	f7ff fe9e 	bl	8001188 <dequeueAngularRatePacket>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAngularRatePacket(packet);
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff ff34 	bl	80012c0 <processAngularRatePacket>

		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f009 feb6 	bl	800b1cc <osDelay>
		packet = dequeueAccelerationPacket();
 8001460:	e7ea      	b.n	8001438 <StartIMUPacketProcessTask+0x8>
	...

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001478:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_ADC1_Init+0x240>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <MX_ADC1_Init+0x244>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4876      	ldr	r0, [pc, #472]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c6:	f001 fffb 	bl	80034c0 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fcb2 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014dc:	2303      	movs	r3, #3
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	486e      	ldr	r0, [pc, #440]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014e6:	f002 f953 	bl	8003790 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fca2 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001502:	f002 f945 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fc94 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001510:	2302      	movs	r3, #2
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800151e:	f002 f937 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fc86 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800152c:	2303      	movs	r3, #3
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800153a:	f002 f929 	bl	8003790 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fc78 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001548:	2304      	movs	r3, #4
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4852      	ldr	r0, [pc, #328]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001556:	f002 f91b 	bl	8003790 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fc6a 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001564:	2305      	movs	r3, #5
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001572:	f002 f90d 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fc5c 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800158e:	f002 f8ff 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001598:	f000 fc4e 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800159c:	2307      	movs	r3, #7
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	483d      	ldr	r0, [pc, #244]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015aa:	f002 f8f1 	bl	8003790 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015b4:	f000 fc40 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015bc:	2309      	movs	r3, #9
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015c6:	f002 f8e3 	bl	8003790 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d0:	f000 fc32 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d4:	2309      	movs	r3, #9
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015e2:	f002 f8d5 	bl	8003790 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015ec:	f000 fc24 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015f4:	230b      	movs	r3, #11
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015fe:	f002 f8c7 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 fc16 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001610:	230c      	movs	r3, #12
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800161a:	f002 f8b9 	bl	8003790 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001624:	f000 fc08 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800162c:	230d      	movs	r3, #13
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001636:	f002 f8ab 	bl	8003790 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001640:	f000 fbfa 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001644:	230d      	movs	r3, #13
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001648:	230e      	movs	r3, #14
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001652:	f002 f89d 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800165c:	f000 fbec 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001660:	230e      	movs	r3, #14
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800166e:	f002 f88f 	bl	8003790 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001678:	f000 fbde 	bl	8001e38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001680:	2310      	movs	r3, #16
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800168a:	f002 f881 	bl	8003790 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001694:	f000 fbd0 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a80 	.word	0x20000a80
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001754:	f003 f858 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_ADC_MspInit+0x150>)
 800176c:	f003 f84c 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x154>)
 8001784:	f003 f840 	bl	8004808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_ADC_MspInit+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017cc:	f002 fcac 	bl	8004128 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80017d6:	f000 fb2f 	bl	8001e38 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	20000ac8 	.word	0x20000ac8
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	newData_thermistor = 1;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_ADC_ConvCpltCallback+0x20>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	newData_shock_pot = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_ADC_ConvCpltCallback+0x24>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000a7c 	.word	0x20000a7c
 8001830:	20000a78 	.word	0x20000a78

08001834 <StartAdcDma>:

void StartAdcDma(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	const int DELAY = 500;
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <StartAdcDma+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <StartAdcDma+0x28>)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <StartAdcDma+0x2c>)
 800184c:	f001 fe7c 	bl	8003548 <HAL_ADC_Start_DMA>

	osDelay(DELAY);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f009 fcbb 	bl	800b1cc <osDelay>
  {
 8001856:	e7f4      	b.n	8001842 <StartAdcDma+0xe>
 8001858:	20000000 	.word	0x20000000
 800185c:	20000a38 	.word	0x20000a38
 8001860:	20000a80 	.word	0x20000a80

08001864 <CAN_Polling>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Polling(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	int a = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800186a:	2100      	movs	r1, #0
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <CAN_Polling+0x3c>)
 800186e:	f002 fb51 	bl	8003f14 <HAL_CAN_GetRxFifoFillLevel>
 8001872:	4603      	mov	r3, r0
 8001874:	607b      	str	r3, [r7, #4]
	if (a < 1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dc01      	bgt.n	8001880 <CAN_Polling+0x1c>
	{
		return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00b      	b.n	8001898 <CAN_Polling+0x34>
	}

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CAN_Polling+0x40>)
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <CAN_Polling+0x44>)
 8001884:	2100      	movs	r1, #0
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <CAN_Polling+0x3c>)
 8001888:	f002 fa32 	bl	8003cf0 <HAL_CAN_GetRxMessage>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <CAN_Polling+0x32>
	{
		return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <CAN_Polling+0x34>
	}

	return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000b4c 	.word	0x20000b4c
 80018a4:	20000b44 	.word	0x20000b44
 80018a8:	20000b28 	.word	0x20000b28

080018ac <StartCanTask>:

void StartCanTask(void const * argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
//	imuState state;
//	char canMsg[40];
	for (;;)
	{
		if (CAN_Polling() == HAL_OK)
 80018b4:	f7ff ffd6 	bl	8001864 <CAN_Polling>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <StartCanTask+0x3c>
		{
			if (RxHeader.IDE == CAN_ID_EXT)
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <StartCanTask+0x48>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d110      	bne.n	80018e8 <StartCanTask+0x3c>
			{
				switch (RxHeader.ExtId)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <StartCanTask+0x48>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <StartCanTask+0x4c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <StartCanTask+0x2c>
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <StartCanTask+0x50>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <StartCanTask+0x34>
 80018d6:	e007      	b.n	80018e8 <StartCanTask+0x3c>
				{
					case IMU_ACCELERATION_CAN_EXT_ID:
						queueAccelerationPacket(RxData);
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <StartCanTask+0x54>)
 80018da:	f7ff fb53 	bl	8000f84 <queueAccelerationPacket>
//						imuProcessAccelerationPacket(&state, RxData);
//						sprintf(canMsg, "IMU Acceleration Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018de:	e003      	b.n	80018e8 <StartCanTask+0x3c>
					case IMU_ANGULAR_RATE_CAN_EXT_ID:
						queueAngularRatePacket(RxData);
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <StartCanTask+0x54>)
 80018e2:	f7ff fba9 	bl	8001038 <queueAngularRatePacket>
//						imuProcessAngularRatePacket(&state, RxData);
//						sprintf(canMsg, "IMU Angular Rate Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018e6:	bf00      	nop
				/* Logging Starts */

				/* Logging Ends */
			}
		}
		osDelay(500);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f009 fc6e 	bl	800b1cc <osDelay>
		if (CAN_Polling() == HAL_OK)
 80018f0:	e7e0      	b.n	80018b4 <StartCanTask+0x8>
 80018f2:	bf00      	nop
 80018f4:	20000b28 	.word	0x20000b28
 80018f8:	08f02d80 	.word	0x08f02d80
 80018fc:	0cf02a80 	.word	0x0cf02a80
 8001900:	20000b44 	.word	0x20000b44

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2038      	movs	r0, #56	; 0x38
 800192c:	f002 fbd2 	bl	80040d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f002 fbeb 	bl	800410c <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00000000 	.word	0x00000000

08001948 <calculateFlowrate>:
const int DELAY = 500;													// time in ms
static const double conversionFactor = (1000/DELAY)*(1.0/1000.0);		// convert L/s to m^3/s
extern volatile int flowmeter_pulse_count;

// gets flowrate as m^3/s
double calculateFlowrate(){
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	volatile double flowrate;

	flowrate = flowmeter_pulse_count*conversionFactor/PPL;	// calculate flowrate
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <calculateFlowrate+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe06 	bl	8000564 <__aeabi_i2d>
 8001958:	a313      	add	r3, pc, #76	; (adr r3, 80019a8 <calculateFlowrate+0x60>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe6b 	bl	8000638 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	f640 0398 	movw	r3, #2200	; 0x898
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdf8 	bl	8000564 <__aeabi_i2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe ff86 	bl	800088c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2300 	strd	r2, r3, [r7]
	flowmeter_pulse_count = 0;								// reset pulse_count
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <calculateFlowrate+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

	return flowrate;
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	ec43 2b17 	vmov	d7, r2, r3
}
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f60624d 	.word	0x3f60624d
 80019b0:	2000ad80 	.word	0x2000ad80

080019b4 <StartGetFlowrateTask>:

// calculates flowrate every DELAY ms
void StartGetFlowrateTask(void const * argument){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	volatile double flowrate;
	char tempMsg[50];
	char* time;

	for (;;){
		flowrate = calculateFlowrate();		// calculates flowrate
 80019bc:	f7ff ffc4 	bl	8001948 <calculateFlowrate>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

		/* TODO SCU#35 */
		/* Logging Starts */
		time = get_time();
 80019cc:	f000 fa8a 	bl	8001ee4 <get_time>
 80019d0:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80019d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019d4:	f7fe fc6c 	bl	80002b0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	230a      	movs	r3, #10
 80019de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019e0:	480e      	ldr	r0, [pc, #56]	; (8001a1c <StartGetFlowrateTask+0x68>)
 80019e2:	f005 ffc2 	bl	800796a <HAL_USART_Transmit>

		sprintf(tempMsg, ",%f,,,,\r\n", flowrate);
 80019e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <StartGetFlowrateTask+0x6c>)
 80019f0:	f00c fdd0 	bl	800e594 <siprintf>
		HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc59 	bl	80002b0 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 010c 	add.w	r1, r7, #12
 8001a06:	230a      	movs	r3, #10
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <StartGetFlowrateTask+0x68>)
 8001a0a:	f005 ffae 	bl	800796a <HAL_USART_Transmit>

		/* Logging Ends */

		osDelay(DELAY);
 8001a0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 fbda 	bl	800b1cc <osDelay>
		flowrate = calculateFlowrate();		// calculates flowrate
 8001a18:	e7d0      	b.n	80019bc <StartGetFlowrateTask+0x8>
 8001a1a:	bf00      	nop
 8001a1c:	2000aeac 	.word	0x2000aeac
 8001a20:	08011c10 	.word	0x08011c10

08001a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <vApplicationGetIdleTaskMemory+0x30>)
 8001a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20001434 	.word	0x20001434
 8001a54:	200014d4 	.word	0x200014d4

08001a58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b0c0      	sub	sp, #256	; 0x100
 8001a5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a5e:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <MX_FREERTOS_Init+0x164>)
 8001a60:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001a64:	461d      	mov	r5, r3
 8001a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f009 fb5b 	bl	800b134 <osThreadCreate>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a4f      	ldr	r2, [pc, #316]	; (8001bc0 <MX_FREERTOS_Init+0x168>)
 8001a82:	6013      	str	r3, [r2, #0]

  /* definition and creation of readAdcTask */
  osThreadStaticDef(readAdcTask, StartAdcDma, osPriorityNormal, 0, 512, readAdcTaskBuffer, &readAdcTaskControlBlock);
 8001a84:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <MX_FREERTOS_Init+0x16c>)
 8001a86:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAdcTaskHandle = osThreadCreate(osThread(readAdcTask), NULL);
 8001a98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f009 fb48 	bl	800b134 <osThreadCreate>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <MX_FREERTOS_Init+0x170>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardLog */
  osThreadDef(SDCardLog, StartSDCardTask, osPriorityNormal, 0, 512);
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <MX_FREERTOS_Init+0x174>)
 8001aac:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardLogHandle = osThreadCreate(osThread(SDCardLog), NULL);
 8001abe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f009 fb35 	bl	800b134 <osThreadCreate>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a40      	ldr	r2, [pc, #256]	; (8001bd0 <MX_FREERTOS_Init+0x178>)
 8001ace:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 512);
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <MX_FREERTOS_Init+0x17c>)
 8001ad2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8001ae4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f009 fb22 	bl	800b134 <osThreadCreate>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <MX_FREERTOS_Init+0x180>)
 8001af4:	6013      	str	r3, [r2, #0]

  // Shock Pot Reading Thread
  osThreadDef(readDistTask, StartReadDistTask, osPriorityNormal, 0, 512);
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <MX_FREERTOS_Init+0x184>)
 8001af8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001afc:	461d      	mov	r5, r3
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readDistTask), NULL);
 8001b0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 fb0f 	bl	800b134 <osThreadCreate>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <MX_FREERTOS_Init+0x180>)
 8001b1a:	6013      	str	r3, [r2, #0]

  // Flow Meter Reading Thread
  osThreadDef(readFlowmeterTask, StartGetFlowrateTask, osPriorityNormal, 0, 512);
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <MX_FREERTOS_Init+0x188>)
 8001b1e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b22:	461d      	mov	r5, r3
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readFlowmeterTaskHandle = osThreadCreate(osThread(readFlowmeterTask), NULL);
 8001b30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 fafc 	bl	800b134 <osThreadCreate>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <MX_FREERTOS_Init+0x18c>)
 8001b40:	6013      	str	r3, [r2, #0]

  // CAN Receiver Thread
  osThreadDef(canReceiverTask, StartCanTask, osPriorityNormal, 0, 512);
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <MX_FREERTOS_Init+0x190>)
 8001b44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001b56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 fae9 	bl	800b134 <osThreadCreate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <MX_FREERTOS_Init+0x194>)
 8001b66:	6013      	str	r3, [r2, #0]

  // IMU Packet Processing Thread
  osThreadDef(imuPacketProcessTask, StartIMUPacketProcessTask, osPriorityNormal, 0, 512);
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_FREERTOS_Init+0x198>)
 8001b6a:	f107 0420 	add.w	r4, r7, #32
 8001b6e:	461d      	mov	r5, r3
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuPacketProcessHandle = osThreadCreate(osThread(imuPacketProcessTask), NULL);
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f009 fad6 	bl	800b134 <osThreadCreate>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	; (8001bf4 <MX_FREERTOS_Init+0x19c>)
 8001b8c:	6013      	str	r3, [r2, #0]

  // Wheel Speed Reading Thread
  osThreadDef(readWheelSpeedsTask, StartGetWheelSpeedTask, osPriorityNormal, 0, 512);
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_FREERTOS_Init+0x1a0>)
 8001b90:	1d3c      	adds	r4, r7, #4
 8001b92:	461d      	mov	r5, r3
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readWheelSpeedsHandle = osThreadCreate(osThread(readWheelSpeedsTask), NULL);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f009 fac5 	bl	800b134 <osThreadCreate>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <MX_FREERTOS_Init+0x1a4>)
 8001bae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001bb0:	bf00      	nop
 8001bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08011c28 	.word	0x08011c28
 8001bc0:	20000b88 	.word	0x20000b88
 8001bc4:	08011c50 	.word	0x08011c50
 8001bc8:	20000b8c 	.word	0x20000b8c
 8001bcc:	08011c78 	.word	0x08011c78
 8001bd0:	20001430 	.word	0x20001430
 8001bd4:	08011ca4 	.word	0x08011ca4
 8001bd8:	20000b74 	.word	0x20000b74
 8001bdc:	08011cd0 	.word	0x08011cd0
 8001be0:	08011d00 	.word	0x08011d00
 8001be4:	20000b78 	.word	0x20000b78
 8001be8:	08011d2c 	.word	0x08011d2c
 8001bec:	20000b7c 	.word	0x20000b7c
 8001bf0:	08011d60 	.word	0x08011d60
 8001bf4:	20000b80 	.word	0x20000b80
 8001bf8:	08011d90 	.word	0x08011d90
 8001bfc:	20000b84 	.word	0x20000b84

08001c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f009 fadf 	bl	800b1cc <osDelay>
 8001c0e:	e7fb      	b.n	8001c08 <StartDefaultTask+0x8>

08001c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c82:	f002 ff55 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c86:	2304      	movs	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c9a:	f002 fdb5 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001cb8:	f002 fda6 	bl	8004808 <HAL_GPIO_Init>

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020400 	.word	0x40020400

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f001 fbb4 	bl	800343c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f83a 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f7ff ff9a 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cdc:	f7ff fe12 	bl	8001904 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ce0:	f7ff fbc0 	bl	8001464 <MX_ADC1_Init>
  MX_USART1_Init();
 8001ce4:	f001 faa6 	bl	8003234 <MX_USART1_Init>
  MX_TIM12_Init();
 8001ce8:	f001 f8d4 	bl	8002e94 <MX_TIM12_Init>
//  MX_CAN1_Init();
  MX_TIM3_Init();
 8001cec:	f000 ff8a 	bl	8002c04 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cf0:	f001 f808 	bl	8002d04 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001cf4:	f006 f9b8 	bl	8008068 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cf8:	f000 fb94 	bl	8002424 <MX_SPI1_Init>
  MX_RTC_Init();
 8001cfc:	f000 f8a2 	bl	8001e44 <MX_RTC_Init>
  MX_TIM11_Init();
 8001d00:	f001 f880 	bl	8002e04 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); 		// Start input capture
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <main+0x70>)
 8001d08:	f004 feee 	bl	8006ae8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <main+0x74>)
 8001d10:	f004 feea 	bl	8006ae8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); 		// Start input capture
 8001d14:	2100      	movs	r1, #0
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <main+0x78>)
 8001d18:	f004 fee6 	bl	8006ae8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1); 		// Start input capture
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <main+0x7c>)
 8001d20:	f004 fee2 	bl	8006ae8 <HAL_TIM_IC_Start_IT>
  SD_Init();
 8001d24:	f000 fa06 	bl	8002134 <SD_Init>

	//log_error(BATTERY_VOLTAGE_LOW, NONE, NULL);
  };
  */

  SDCardBenchmark(1000);
 8001d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d2c:	f000 f926 	bl	8001f7c <SDCardBenchmark>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d30:	f7ff fe92 	bl	8001a58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d34:	f009 f9f7 	bl	800b126 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <main+0x6c>
 8001d3a:	bf00      	nop
 8001d3c:	2000ae1c 	.word	0x2000ae1c
 8001d40:	2000ad8c 	.word	0x2000ad8c
 8001d44:	2000add4 	.word	0x2000add4
 8001d48:	2000ae64 	.word	0x2000ae64

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	2234      	movs	r2, #52	; 0x34
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00c fc7d 	bl	800e65a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <SystemClock_Config+0xc0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <SystemClock_Config+0xc0>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <SystemClock_Config+0xc0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <SystemClock_Config+0xc4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <SystemClock_Config+0xc4>)
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <SystemClock_Config+0xc4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001dac:	230a      	movs	r3, #10
 8001dae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db8:	2310      	movs	r3, #16
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fceb 	bl	80057a4 <HAL_RCC_OscConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dd4:	f000 f830 	bl	8001e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd8:	230f      	movs	r3, #15
 8001dda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 feb6 	bl	8004b64 <HAL_RCC_ClockConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001dfe:	f000 f81b 	bl	8001e38 <Error_Handler>
  }
}
 8001e02:	bf00      	nop
 8001e04:	3750      	adds	r7, #80	; 0x50
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e26:	f001 fb2b 	bl	8003480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40014400 	.word	0x40014400

08001e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>
	...

08001e44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <MX_RTC_Init+0x48>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e56:	227f      	movs	r2, #127	; 0x7f
 8001e58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e5c:	22ff      	movs	r2, #255	; 0xff
 8001e5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_RTC_Init+0x44>)
 8001e74:	f003 ff34 	bl	8005ce0 <HAL_RTC_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e7e:	f7ff ffdb 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200016d4 	.word	0x200016d4
 8001e8c:	40002800 	.word	0x40002800

08001e90 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09a      	sub	sp, #104	; 0x68
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	225c      	movs	r2, #92	; 0x5c
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00c fbda 	bl	800e65a <memset>
  if(rtcHandle->Instance==RTC)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_RTC_MspInit+0x4c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d111      	bne.n	8001ed4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 ff9c 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001eca:	f7ff ffb5 	bl	8001e38 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <HAL_RTC_MspInit+0x50>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3768      	adds	r7, #104	; 0x68
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40002800 	.word	0x40002800
 8001ee0:	42470e3c 	.word	0x42470e3c

08001ee4 <get_time>:
//	time[0] = 'a';
//	time[1] = '\0';
//	return time;
//}
char* get_time(void)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	 static char time[20];

	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <get_time+0x5c>)
 8001ef2:	f003 ff6b 	bl	8005dcc <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4810      	ldr	r0, [pc, #64]	; (8001f40 <get_time+0x5c>)
 8001f00:	f003 ffc2 	bl	8005e88 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss.SS */
	 sprintf(time, "%02u:%02u:%02u.%02lu", gTime.Hours, gTime.Minutes, gTime.Seconds, (uint32_t) (gTime.SecondFraction - gTime.SubSeconds) * 100 / (gTime.SecondFraction + 1));
 8001f04:	783b      	ldrb	r3, [r7, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	78bb      	ldrb	r3, [r7, #2]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2264      	movs	r2, #100	; 0x64
 8001f18:	fb03 f202 	mul.w	r2, r3, r2
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	9100      	str	r1, [sp, #0]
 8001f28:	4623      	mov	r3, r4
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4905      	ldr	r1, [pc, #20]	; (8001f44 <get_time+0x60>)
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <get_time+0x64>)
 8001f30:	f00c fb30 	bl	800e594 <siprintf>

	 return time;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <get_time+0x64>)
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200016d4 	.word	0x200016d4
 8001f44:	08011dac 	.word	0x08011dac
 8001f48:	200016f4 	.word	0x200016f4

08001f4c <SDCardIsFilenameFree>:
FIL logFile; 	//File handle

uint32_t write_count = 0; // how many writes have occured since we've synced them
uint32_t log_index = 0;

uint32_t SDCardIsFilenameFree(char *filename) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	FILINFO info;
	FRESULT fres = f_stat(filename, &info);
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f008 ffd2 	bl	800af04 <f_stat>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return fres == FR_NO_FILE;
 8001f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <SDCardBenchmark>:



// Write n chars 1 at at time
void SDCardBenchmark(int n) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0c8      	sub	sp, #288	; 0x120
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f8a:	6018      	str	r0, [r3, #0]

	SDCardSync(); // Sync first so we start with a clean slate
 8001f8c:	f000 f960 	bl	8002250 <SDCardSync>

	int start = HAL_GetTick();
 8001f90:	f001 fa8a 	bl	80034a8 <HAL_GetTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	for(int i = 0; i < n; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fa0:	e008      	b.n	8001fb4 <SDCardBenchmark+0x38>

		SDCardWrite("This is a test", 15);
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	481c      	ldr	r0, [pc, #112]	; (8002018 <SDCardBenchmark+0x9c>)
 8001fa6:	f000 f927 	bl	80021f8 <SDCardWrite>
	for(int i = 0; i < n; i++) {
 8001faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001fb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fbc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbed      	blt.n	8001fa2 <SDCardBenchmark+0x26>

	}

	SDCardSync(); // Sync at and end to force all writes, we're done counting time now
 8001fc6:	f000 f943 	bl	8002250 <SDCardSync>

	int end = HAL_GetTick();
 8001fca:	f001 fa6d 	bl	80034a8 <HAL_GetTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int total_ticks = end - start;
 8001fd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fd8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	char total_message[256];

	int length = snprintf(total_message, 256, "\nTotal Ticks: %d\n", total_ticks) + 1;
 8001fe2:	f107 000c 	add.w	r0, r7, #12
 8001fe6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <SDCardBenchmark+0xa0>)
 8001fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff0:	f00c fa9c 	bl	800e52c <sniprintf>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	SDCardWrite(total_message, 256);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f8f7 	bl	80021f8 <SDCardWrite>

	SDCardSync(); // Force last message to be written
 800200a:	f000 f921 	bl	8002250 <SDCardSync>

}
 800200e:	bf00      	nop
 8002010:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	08011dd4 	.word	0x08011dd4
 800201c:	08011de4 	.word	0x08011de4

08002020 <DoSDCardMount>:

// "Do" functions are functions that handle internal stuff of the sd card

FRESULT DoSDCardMount(void) {
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	return f_mount(&FatFs, "", 1);
 8002024:	2201      	movs	r2, #1
 8002026:	4903      	ldr	r1, [pc, #12]	; (8002034 <DoSDCardMount+0x14>)
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <DoSDCardMount+0x18>)
 800202a:	f008 fb15 	bl	800a658 <f_mount>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	08011df8 	.word	0x08011df8
 8002038:	2000a754 	.word	0x2000a754

0800203c <DoSDCardOpenFile>:

FRESULT DoSDCardOpenFile(void) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b092      	sub	sp, #72	; 0x48
 8002040:	af00      	add	r7, sp, #0
	FRESULT fres = FR_NOT_READY;
 8002042:	2303      	movs	r3, #3
 8002044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	char LOG_BUFFER[64] = {0};
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	223c      	movs	r2, #60	; 0x3c
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f00c fb00 	bl	800e65a <memset>

	do {
		LOG_BUFFER[0] = '\0';
 800205a:	2300      	movs	r3, #0
 800205c:	713b      	strb	r3, [r7, #4]
		snprintf(LOG_BUFFER, 64, LOG_FILE, log_index++);
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <DoSDCardOpenFile+0x64>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <DoSDCardOpenFile+0x64>)
 8002066:	600a      	str	r2, [r1, #0]
 8002068:	1d38      	adds	r0, r7, #4
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <DoSDCardOpenFile+0x68>)
 800206c:	2140      	movs	r1, #64	; 0x40
 800206e:	f00c fa5d 	bl	800e52c <sniprintf>
	}while(!SDCardIsFilenameFree(LOG_BUFFER));
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff69 	bl	8001f4c <SDCardIsFilenameFree>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ec      	beq.n	800205a <DoSDCardOpenFile+0x1e>

	fres = f_open(&logFile, LOG_BUFFER, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	221a      	movs	r2, #26
 8002084:	4619      	mov	r1, r3
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <DoSDCardOpenFile+0x6c>)
 8002088:	f008 fb4a 	bl	800a720 <f_open>
 800208c:	4603      	mov	r3, r0
 800208e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	return fres;
 8002092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002096:	4618      	mov	r0, r3
 8002098:	3748      	adds	r7, #72	; 0x48
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000abbc 	.word	0x2000abbc
 80020a4:	08011dfc 	.word	0x08011dfc
 80020a8:	2000a988 	.word	0x2000a988

080020ac <DoSDCardWrite>:

FRESULT DoSDCardWrite(char *buff, UINT n) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	UINT bytesWritten;
	FRESULT fres = f_write(&logFile, buff, n, &bytesWritten);
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4812      	ldr	r0, [pc, #72]	; (8002108 <DoSDCardWrite+0x5c>)
 80020c0:	f008 fcf3 	bl	800aaaa <f_write>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]

	if(fres == FR_OK) {
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <DoSDCardWrite+0x50>
		write_count++;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <DoSDCardWrite+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <DoSDCardWrite+0x60>)
 80020d6:	6013      	str	r3, [r2, #0]
		if(write_count % WRITES_UNTIL_SYNC == 0) { // check if time to sync
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <DoSDCardWrite+0x60>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <DoSDCardWrite+0x64>)
 80020de:	fba3 1302 	umull	r1, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2164      	movs	r1, #100	; 0x64
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <DoSDCardWrite+0x50>
			f_sync(&logFile); // sync, if we didn't do this file write wouldn't be pushed to the sd card and we've have to close the file to write them
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <DoSDCardWrite+0x5c>)
 80020f2:	f008 fe7e 	bl	800adf2 <f_sync>
			write_count = 0;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <DoSDCardWrite+0x60>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
		}
	}

	return fres;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000a988 	.word	0x2000a988
 800210c:	2000abb8 	.word	0x2000abb8
 8002110:	51eb851f 	.word	0x51eb851f

08002114 <DoSDSync>:

// forces sd to sync, aka write uncommited changes to sd card
FRESULT DoSDSync(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
	FRESULT fres = f_sync(&logFile);
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <DoSDSync+0x1c>)
 800211c:	f008 fe69 	bl	800adf2 <f_sync>
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
	return fres;
 8002124:	79fb      	ldrb	r3, [r7, #7]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000a988 	.word	0x2000a988

08002134 <SD_Init>:
	}

	return fres;
}

void SD_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af02      	add	r7, sp, #8
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LENGTH,
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <SD_Init+0x5c>)
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <SD_Init+0x60>)
 8002142:	2148      	movs	r1, #72	; 0x48
 8002144:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002148:	f009 fa3a 	bl	800b5c0 <xQueueGenericCreateStatic>
 800214c:	4603      	mov	r3, r0
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <SD_Init+0x64>)
 8002150:	6013      	str	r3, [r2, #0]
										SD_QUEUE_SIZE,
										xSD_Card_Queue_Storage,
										&xSD_Card_Queue_Static);

	configASSERT(xSD_Card_Queue);
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <SD_Init+0x64>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <SD_Init+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <SD_Init+0x3a>

	FRESULT fres = DoSDCardMount();
 8002170:	f7ff ff56 	bl	8002020 <DoSDCardMount>
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]

	if(fres == FR_OK) {
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <SD_Init+0x52>
		fres = DoSDCardOpenFile(); // if mounted, open log file
 800217e:	f7ff ff5d 	bl	800203c <DoSDCardOpenFile>
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
	}

	//return fres;

}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20001708 	.word	0x20001708
 8002194:	20001754 	.word	0x20001754
 8002198:	20001750 	.word	0x20001750

0800219c <StartSDCardTask>:

void StartSDCardTask(void const *argument) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b096      	sub	sp, #88	; 0x58
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

	FRESULT fres = FR_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	for(;;) {
		SDRequest sd_req;
		BaseType_t status = xQueueReceive(xSD_Card_Queue, &sd_req, portMAX_DELAY);
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <StartSDCardTask+0x58>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f107 0108 	add.w	r1, r7, #8
 80021b2:	f04f 32ff 	mov.w	r2, #4294967295
 80021b6:	4618      	mov	r0, r3
 80021b8:	f009 fc60 	bl	800ba7c <xQueueReceive>
 80021bc:	6538      	str	r0, [r7, #80]	; 0x50

		if(status == pdPASS) {
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d1f2      	bne.n	80021aa <StartSDCardTask+0xe>

			switch(sd_req.type) {
 80021c4:	7a3b      	ldrb	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <StartSDCardTask+0x34>
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00b      	beq.n	80021e6 <StartSDCardTask+0x4a>
			case SDREQUEST_WRITE:
				fres = DoSDCardWrite(sd_req.message, sd_req.length);
			case SDREQUEST_SYNC:
				fres = DoSDSync();
			default:
				break; // maybe some sort of error checking here
 80021ce:	e00f      	b.n	80021f0 <StartSDCardTask+0x54>
				fres = DoSDCardWrite(sd_req.message, sd_req.length);
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	3308      	adds	r3, #8
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff66 	bl	80020ac <DoSDCardWrite>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				fres = DoSDSync();
 80021e6:	f7ff ff95 	bl	8002114 <DoSDSync>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break; // maybe some sort of error checking here
 80021f0:	bf00      	nop
	for(;;) {
 80021f2:	e7da      	b.n	80021aa <StartSDCardTask+0xe>
 80021f4:	20001750 	.word	0x20001750

080021f8 <SDCardWrite>:
}

// These functions queue up tasks that call their underlying implementations

// Queue up a write
_Bool SDCardWrite(char *message, uint32_t length) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b096      	sub	sp, #88	; 0x58
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	SDRequest req;

	req.type = SDREQUEST_WRITE;
 8002202:	2300      	movs	r3, #0
 8002204:	733b      	strb	r3, [r7, #12]

	length = length > SD_REQUEST_MAX_MESSAGE_LENGTH ?
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	bf28      	it	cs
 800220c:	2340      	movcs	r3, #64	; 0x40
 800220e:	603b      	str	r3, [r7, #0]
			SD_REQUEST_MAX_MESSAGE_LENGTH : length;

	strncpy(req.message, message, length);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	3308      	adds	r3, #8
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f00c fa34 	bl	800e688 <strncpy>
	req.length = length;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	613b      	str	r3, [r7, #16]

	BaseType_t status = xQueueSendToBack(xSD_Card_Queue, &req, 0);
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <SDCardWrite+0x54>)
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	f107 010c 	add.w	r1, r7, #12
 800222c:	2300      	movs	r3, #0
 800222e:	2200      	movs	r2, #0
 8002230:	f009 fa98 	bl	800b764 <xQueueGenericSend>
 8002234:	6578      	str	r0, [r7, #84]	; 0x54

	return status == pdPASS;
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002238:	2b01      	cmp	r3, #1
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
}
 8002242:	4618      	mov	r0, r3
 8002244:	3758      	adds	r7, #88	; 0x58
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20001750 	.word	0x20001750

08002250 <SDCardSync>:

// Queues up a sync
_Bool SDCardSync(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b094      	sub	sp, #80	; 0x50
 8002254:	af00      	add	r7, sp, #0
	SDRequest req;

	req.type = SDREQUEST_SYNC;
 8002256:	2301      	movs	r3, #1
 8002258:	713b      	strb	r3, [r7, #4]
	req.length = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]

	BaseType_t status = xQueueSendToBack(xSD_Card_Queue, &req, 0);
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <SDCardSync+0x34>)
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	1d39      	adds	r1, r7, #4
 8002264:	2300      	movs	r3, #0
 8002266:	2200      	movs	r2, #0
 8002268:	f009 fa7c 	bl	800b764 <xQueueGenericSend>
 800226c:	64f8      	str	r0, [r7, #76]	; 0x4c

	return status == pdPASS;
 800226e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002270:	2b01      	cmp	r3, #1
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	3750      	adds	r7, #80	; 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20001750 	.word	0x20001750

08002288 <getDistance>:
// INPUT PARAMTERS:
//			voltage - voltage measured across the shock pot
//
// RETURN:	distance in mm of type double
//*********************************************************************
double getDistance(double voltage){
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	ed87 0b00 	vstr	d0, [r7]
	double dist = MAX_DIST * voltage / vDD;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <getDistance+0x58>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f977 	bl	8000588 <__aeabi_f2d>
 800229a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800229e:	f7fe f9cb 	bl	8000638 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4614      	mov	r4, r2
 80022a8:	461d      	mov	r5, r3
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <getDistance+0x5c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f96a 	bl	8000588 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe fae6 	bl	800088c <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return dist;
 80022c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80022d0:	eeb0 0a47 	vmov.f32	s0, s14
 80022d4:	eef0 0a67 	vmov.f32	s1, s15
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bdb0      	pop	{r4, r5, r7, pc}
 80022de:	bf00      	nop
 80022e0:	42480000 	.word	0x42480000
 80022e4:	08011ea8 	.word	0x08011ea8

080022e8 <StartReadDistTask>:
// readDist_task
//
// PURPOSE: Main loop for freeRTOS thread. Waits for ADC conversion and
//			translates voltages into distance
//*********************************************************************
void StartReadDistTask(void const * argument){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80022f4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80022f8:	6018      	str	r0, [r3, #0]
	char msgDist[20];
	float voltages[16];
	char distMsg[50];

	for (;;){
		if (newData_shock_pot == 1){
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <StartReadDistTask+0x120>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d17d      	bne.n	80023fe <StartReadDistTask+0x116>
			// calculate distances for each ADC channel
			for(int i = 0; i < 16; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002308:	e05d      	b.n	80023c6 <StartReadDistTask+0xde>
				  voltages[i] = ADC_TO_Voltage * ADC_Readings[i];
 800230a:	4a40      	ldr	r2, [pc, #256]	; (800240c <StartReadDistTask+0x124>)
 800230c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f915 	bl	8000544 <__aeabi_ui2d>
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <StartReadDistTask+0x128>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f98a 	bl	8000638 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f7fe fc5c 	bl	8000be8 <__aeabi_d2f>
 8002330:	4601      	mov	r1, r0
 8002332:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002336:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800233a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	6019      	str	r1, [r3, #0]
				  dist[i] = getDistance(voltages[i]);
 8002344:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002348:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800234c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f916 	bl	8000588 <__aeabi_f2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b10 	vmov	d0, r2, r3
 8002364:	f7ff ff90 	bl	8002288 <getDistance>
 8002368:	eeb0 7a40 	vmov.f32	s14, s0
 800236c:	eef0 7a60 	vmov.f32	s15, s1
 8002370:	4a28      	ldr	r2, [pc, #160]	; (8002414 <StartReadDistTask+0x12c>)
 8002372:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	ed83 7b00 	vstr	d7, [r3]
				  sprintf(msgDist, "ADC %d %.5f \n", i, voltages[i]);
 800237e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002382:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002386:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f9 	bl	8000588 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800239e:	e9cd 2300 	strd	r2, r3, [sp]
 80023a2:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80023a6:	491c      	ldr	r1, [pc, #112]	; (8002418 <StartReadDistTask+0x130>)
 80023a8:	f00c f8f4 	bl	800e594 <siprintf>
				  strcat(msg,msgDist);
 80023ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00c f957 	bl	800e66a <strcat>
			for(int i = 0; i < 16; i++) {
 80023bc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80023c0:	3301      	adds	r3, #1
 80023c2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80023c6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	dd9d      	ble.n	800230a <StartReadDistTask+0x22>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			// add ADC channel 0 to message
			sprintf(distMsg, "Distance: %f\r\n", dist[0]);
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <StartReadDistTask+0x12c>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f107 000c 	add.w	r0, r7, #12
 80023d8:	4910      	ldr	r1, [pc, #64]	; (800241c <StartReadDistTask+0x134>)
 80023da:	f00c f8db 	bl	800e594 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) distMsg, strlen(distMsg), 10);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fd ff64 	bl	80002b0 <strlen>
 80023e8:	4603      	mov	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	f107 010c 	add.w	r1, r7, #12
 80023f0:	230a      	movs	r3, #10
 80023f2:	480b      	ldr	r0, [pc, #44]	; (8002420 <StartReadDistTask+0x138>)
 80023f4:	f005 fab9 	bl	800796a <HAL_USART_Transmit>
			/* Logging Ends */

			newData_shock_pot = 0;					// reset ADC conversion flag
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <StartReadDistTask+0x120>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
		}

		// wait 500ms
		osDelay(500);
 80023fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002402:	f008 fee3 	bl	800b1cc <osDelay>
		if (newData_shock_pot == 1){
 8002406:	e778      	b.n	80022fa <StartReadDistTask+0x12>
 8002408:	20000a78 	.word	0x20000a78
 800240c:	20000a38 	.word	0x20000a38
 8002410:	08011ea0 	.word	0x08011ea0
 8002414:	2000abc0 	.word	0x2000abc0
 8002418:	08011e08 	.word	0x08011e08
 800241c:	08011e18 	.word	0x08011e18
 8002420:	2000aeac 	.word	0x2000aeac

08002424 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <MX_SPI1_Init+0x64>)
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <MX_SPI1_Init+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_SPI1_Init+0x64>)
 8002430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_SPI1_Init+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MX_SPI1_Init+0x64>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_SPI1_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MX_SPI1_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_SPI1_Init+0x64>)
 8002450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002454:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_SPI1_Init+0x64>)
 8002458:	2230      	movs	r2, #48	; 0x30
 800245a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <MX_SPI1_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_SPI1_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <MX_SPI1_Init+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_SPI1_Init+0x64>)
 8002470:	220a      	movs	r2, #10
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <MX_SPI1_Init+0x64>)
 8002476:	f003 fdf6 	bl	8006066 <HAL_SPI_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002480:	f7ff fcda 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000ac40 	.word	0x2000ac40
 800248c:	40013000 	.word	0x40013000

08002490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_SPI_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_SPI_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024ea:	2338      	movs	r3, #56	; 0x38
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024fa:	2305      	movs	r3, #5
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_SPI_MspInit+0x8c>)
 8002506:	f002 f97f 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40013000 	.word	0x40013000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400

08002520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_MspInit+0x54>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_MspInit+0x54>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_MspInit+0x54>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_MspInit+0x54>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_MspInit+0x54>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_MspInit+0x54>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	f06f 0001 	mvn.w	r0, #1
 8002566:	f001 fdb5 	bl	80040d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_InitTick+0xd0>)
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	4a2d      	ldr	r2, [pc, #180]	; (8002648 <HAL_InitTick+0xd0>)
 8002592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002596:	6453      	str	r3, [r2, #68]	; 0x44
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_InitTick+0xd0>)
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a4:	f107 020c 	add.w	r2, r7, #12
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 fbf2 	bl	8004d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025b4:	f002 fbdc 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 80025b8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_InitTick+0xd4>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	3b01      	subs	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_InitTick+0xd8>)
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_InitTick+0xdc>)
 80025cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_InitTick+0xd8>)
 80025d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_InitTick+0xd8>)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_InitTick+0xd8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_InitTick+0xd8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_InitTick+0xd8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80025ee:	4818      	ldr	r0, [pc, #96]	; (8002650 <HAL_InitTick+0xd8>)
 80025f0:	f004 f96a 	bl	80068c8 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11b      	bne.n	800263a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002602:	4813      	ldr	r0, [pc, #76]	; (8002650 <HAL_InitTick+0xd8>)
 8002604:	f004 f9b0 	bl	8006968 <HAL_TIM_Base_Start_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800260e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002612:	2b00      	cmp	r3, #0
 8002614:	d111      	bne.n	800263a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002616:	2019      	movs	r0, #25
 8002618:	f001 fd78 	bl	800410c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b0f      	cmp	r3, #15
 8002620:	d808      	bhi.n	8002634 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002622:	2200      	movs	r2, #0
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	2019      	movs	r0, #25
 8002628:	f001 fd54 	bl	80040d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_InitTick+0xe0>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e002      	b.n	800263a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800263a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800263e:	4618      	mov	r0, r3
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	431bde83 	.word	0x431bde83
 8002650:	2000ac98 	.word	0x2000ac98
 8002654:	40014400 	.word	0x40014400
 8002658:	20000008 	.word	0x20000008

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <NMI_Handler+0x4>

08002662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler+0x4>

0800266e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler+0x4>

0800267a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800268e:	f004 fb53 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000ac98 	.word	0x2000ac98

0800269c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80026a2:	f004 fb49 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000ae1c 	.word	0x2000ae1c

080026b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <TIM3_IRQHandler+0x10>)
 80026b6:	f004 fb3f 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	2000ad8c 	.word	0x2000ad8c

080026c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <TIM4_IRQHandler+0x10>)
 80026ca:	f004 fb35 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000add4 	.word	0x2000add4

080026d8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80026de:	f004 fb2b 	bl	8006d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000ae64 	.word	0x2000ae64

080026ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <DMA2_Stream0_IRQHandler+0x10>)
 80026f2:	f001 fe1f 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000ac8 	.word	0x20000ac8

08002700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_kill>:

int _kill(int pid, int sig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800271a:	f00c f869 	bl	800e7f0 <__errno>
 800271e:	4603      	mov	r3, r0
 8002720:	2216      	movs	r2, #22
 8002722:	601a      	str	r2, [r3, #0]
	return -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_exit>:

void _exit (int status)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffe7 	bl	8002710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002742:	e7fe      	b.n	8002742 <_exit+0x12>

08002744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
	}

return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e009      	b.n	80027a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf1      	blt.n	8002790 <_write+0x12>
	}
	return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_close>:

int _close(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027de:	605a      	str	r2, [r3, #4]
	return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_isatty>:

int _isatty(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return 1;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
	return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f00b ffce 	bl	800e7f0 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20020000 	.word	0x20020000
 8002880:	00000400 	.word	0x00000400
 8002884:	2000ace0 	.word	0x2000ace0
 8002888:	2000ee20 	.word	0x2000ee20

0800288c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;

// takes the input voltage and returns the resistance
void get_NTC_Resistance(double voltageReading){
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	ed87 0b00 	vstr	d0, [r7]
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <get_NTC_Resistance+0xb0>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe63 	bl	8000588 <__aeabi_f2d>
 80028c2:	a325      	add	r3, pc, #148	; (adr r3, 8002958 <get_NTC_Resistance+0xa8>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fcfe 	bl	80002c8 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d4:	f7fe f936 	bl	8000b44 <__aeabi_dcmpge>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <get_NTC_Resistance+0x44>
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028ea:	f7fe f921 	bl	8000b30 <__aeabi_dcmple>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <get_NTC_Resistance+0x54>
 80028f4:	491b      	ldr	r1, [pc, #108]	; (8002964 <get_NTC_Resistance+0xb4>)
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9c1 2300 	strd	r2, r3, [r1]
 8002902:	e025      	b.n	8002950 <get_NTC_Resistance+0xa0>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <get_NTC_Resistance+0xb0>)
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe3e 	bl	8000588 <__aeabi_f2d>
 800290c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002910:	f7fd ffbc 	bl	800088c <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <get_NTC_Resistance+0xb8>)
 8002922:	f7fd fcd1 	bl	80002c8 <__aeabi_dsub>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4614      	mov	r4, r2
 800292c:	461d      	mov	r5, r3
 800292e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe06 	bl	8000544 <__aeabi_ui2d>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4620      	mov	r0, r4
 800293e:	4629      	mov	r1, r5
 8002940:	f7fd fe7a 	bl	8000638 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4906      	ldr	r1, [pc, #24]	; (8002964 <get_NTC_Resistance+0xb4>)
 800294a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bdb0      	pop	{r4, r5, r7, pc}
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fb99999 	.word	0x3fb99999
 8002960:	40533333 	.word	0x40533333
 8002964:	2000ad78 	.word	0x2000ad78
 8002968:	3ff00000 	.word	0x3ff00000
 800296c:	00000000 	.word	0x00000000

08002970 <getTemperature>:

// takes the input voltage and returns the temperature
double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 8002970:	b5b0      	push	{r4, r5, r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	ed87 0b00 	vstr	d0, [r7]
	get_NTC_Resistance(voltageReading);
 800297a:	ed97 0b00 	vldr	d0, [r7]
 800297e:	f7ff ff97 	bl	80028b0 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 8002982:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <getTemperature+0x120>)
 8002984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <getTemperature+0x124>)
 800298e:	f7fe f8c5 	bl	8000b1c <__aeabi_dcmplt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <getTemperature+0x36>
 8002998:	493f      	ldr	r1, [pc, #252]	; (8002a98 <getTemperature+0x128>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <getTemperature+0x12c>)
 80029a0:	e9c1 2300 	strd	r2, r3, [r1]
 80029a4:	e051      	b.n	8002a4a <getTemperature+0xda>
	else{
		naturalLogR = log(R_NTC);
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <getTemperature+0x120>)
 80029a8:	ed93 7b00 	vldr	d7, [r3]
 80029ac:	eeb0 0a47 	vmov.f32	s0, s14
 80029b0:	eef0 0a67 	vmov.f32	s1, s15
 80029b4:	f00d ffc4 	bl	8010940 <log>
 80029b8:	eeb0 7a40 	vmov.f32	s14, s0
 80029bc:	eef0 7a60 	vmov.f32	s15, s1
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <getTemperature+0x130>)
 80029c2:	ed83 7b00 	vstr	d7, [r3]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 80029c6:	a128      	add	r1, pc, #160	; (adr r1, 8002a68 <getTemperature+0xf8>)
 80029c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <getTemperature+0x130>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fe31 	bl	8000638 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	a324      	add	r3, pc, #144	; (adr r3, 8002a70 <getTemperature+0x100>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fc72 	bl	80002cc <__adddf3>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <getTemperature+0x130>)
 80029f2:	ed93 7b00 	vldr	d7, [r3]
 80029f6:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8002a78 <getTemperature+0x108>
 80029fa:	eeb0 0a47 	vmov.f32	s0, s14
 80029fe:	eef0 0a67 	vmov.f32	s1, s15
 8002a02:	f00d ffdb 	bl	80109bc <pow>
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	a31d      	add	r3, pc, #116	; (adr r3, 8002a80 <getTemperature+0x110>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fd fe12 	bl	8000638 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fd fc56 	bl	80002cc <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	491a      	ldr	r1, [pc, #104]	; (8002a94 <getTemperature+0x124>)
 8002a2a:	f7fd ff2f 	bl	800088c <__aeabi_ddiv>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	a314      	add	r3, pc, #80	; (adr r3, 8002a88 <getTemperature+0x118>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fc44 	bl	80002c8 <__aeabi_dsub>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4914      	ldr	r1, [pc, #80]	; (8002a98 <getTemperature+0x128>)
 8002a46:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return temperature;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <getTemperature+0x128>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a54:	eeb0 0a47 	vmov.f32	s0, s14
 8002a58:	eef0 0a67 	vmov.f32	s1, s15
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bdb0      	pop	{r4, r5, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	f3af 8000 	nop.w
 8002a68:	ac3ea183 	.word	0xac3ea183
 8002a6c:	3f314eaa 	.word	0x3f314eaa
 8002a70:	f0bcee5a 	.word	0xf0bcee5a
 8002a74:	3f54f675 	.word	0x3f54f675
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	40080000 	.word	0x40080000
 8002a80:	61e3fc4e 	.word	0x61e3fc4e
 8002a84:	3e825c55 	.word	0x3e825c55
 8002a88:	66666666 	.word	0x66666666
 8002a8c:	40711266 	.word	0x40711266
 8002a90:	2000ad78 	.word	0x2000ad78
 8002a94:	3ff00000 	.word	0x3ff00000
 8002a98:	2000ad70 	.word	0x2000ad70
 8002a9c:	bff00000 	.word	0xbff00000
 8002aa0:	2000ad68 	.word	0x2000ad68
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <StartReadTempTask>:

void StartReadTempTask(void const * argument){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b092      	sub	sp, #72	; 0x48
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	char tempMsg[50];
	char* time;

	for (;;){
		if (newData_thermistor == 1) {
 8002ab0:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <StartReadTempTask+0x140>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	f040 808a 	bne.w	8002bce <StartReadTempTask+0x126>
			for(int i = 0; i < 16; i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
 8002abe:	e022      	b.n	8002b06 <StartReadTempTask+0x5e>
				  temperatures[i] = getTemperature(ADC_TO_Voltage * ADC_Readings[i]);
 8002ac0:	4a4a      	ldr	r2, [pc, #296]	; (8002bec <StartReadTempTask+0x144>)
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd3b 	bl	8000544 <__aeabi_ui2d>
 8002ace:	a344      	add	r3, pc, #272	; (adr r3, 8002be0 <StartReadTempTask+0x138>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fdb0 	bl	8000638 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	ec43 2b17 	vmov	d7, r2, r3
 8002ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae4:	eef0 0a67 	vmov.f32	s1, s15
 8002ae8:	f7ff ff42 	bl	8002970 <getTemperature>
 8002aec:	eeb0 7a40 	vmov.f32	s14, s0
 8002af0:	eef0 7a60 	vmov.f32	s15, s1
 8002af4:	4a3e      	ldr	r2, [pc, #248]	; (8002bf0 <StartReadTempTask+0x148>)
 8002af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	ed83 7b00 	vstr	d7, [r3]
			for(int i = 0; i < 16; i++) {
 8002b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b02:	3301      	adds	r3, #1
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
 8002b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	ddd9      	ble.n	8002ac0 <StartReadTempTask+0x18>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			time = get_time();
 8002b0c:	f7ff f9ea 	bl	8001ee4 <get_time>
 8002b10:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 8002b12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b14:	f7fd fbcc 	bl	80002b0 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b20:	4834      	ldr	r0, [pc, #208]	; (8002bf4 <StartReadTempTask+0x14c>)
 8002b22:	f004 ff22 	bl	800796a <HAL_USART_Transmit>

			sprintf(tempMsg, ",,%f,", temperatures[0]);
 8002b26:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <StartReadTempTask+0x148>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f107 000c 	add.w	r0, r7, #12
 8002b30:	4931      	ldr	r1, [pc, #196]	; (8002bf8 <StartReadTempTask+0x150>)
 8002b32:	f00b fd2f 	bl	800e594 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fbb8 	bl	80002b0 <strlen>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	f107 010c 	add.w	r1, r7, #12
 8002b48:	230a      	movs	r3, #10
 8002b4a:	482a      	ldr	r0, [pc, #168]	; (8002bf4 <StartReadTempTask+0x14c>)
 8002b4c:	f004 ff0d 	bl	800796a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[1]);
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <StartReadTempTask+0x148>)
 8002b52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b56:	f107 000c 	add.w	r0, r7, #12
 8002b5a:	4928      	ldr	r1, [pc, #160]	; (8002bfc <StartReadTempTask+0x154>)
 8002b5c:	f00b fd1a 	bl	800e594 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fba3 	bl	80002b0 <strlen>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	f107 010c 	add.w	r1, r7, #12
 8002b72:	230a      	movs	r3, #10
 8002b74:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <StartReadTempTask+0x14c>)
 8002b76:	f004 fef8 	bl	800796a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[2]);
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <StartReadTempTask+0x148>)
 8002b7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b80:	f107 000c 	add.w	r0, r7, #12
 8002b84:	491d      	ldr	r1, [pc, #116]	; (8002bfc <StartReadTempTask+0x154>)
 8002b86:	f00b fd05 	bl	800e594 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fb8e 	bl	80002b0 <strlen>
 8002b94:	4603      	mov	r3, r0
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	f107 010c 	add.w	r1, r7, #12
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	4815      	ldr	r0, [pc, #84]	; (8002bf4 <StartReadTempTask+0x14c>)
 8002ba0:	f004 fee3 	bl	800796a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f\r\n", temperatures[3]);
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <StartReadTempTask+0x148>)
 8002ba6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002baa:	f107 000c 	add.w	r0, r7, #12
 8002bae:	4914      	ldr	r1, [pc, #80]	; (8002c00 <StartReadTempTask+0x158>)
 8002bb0:	f00b fcf0 	bl	800e594 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fb79 	bl	80002b0 <strlen>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	f107 010c 	add.w	r1, r7, #12
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <StartReadTempTask+0x14c>)
 8002bca:	f004 fece 	bl	800796a <HAL_USART_Transmit>


			/* Logging Ends */
		}

		newData_thermistor = 0;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <StartReadTempTask+0x140>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
		osDelay(500);
 8002bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bd8:	f008 faf8 	bl	800b1cc <osDelay>
		if (newData_thermistor == 1) {
 8002bdc:	e768      	b.n	8002ab0 <StartReadTempTask+0x8>
 8002bde:	bf00      	nop
 8002be0:	e734d9b4 	.word	0xe734d9b4
 8002be4:	3f4a680c 	.word	0x3f4a680c
 8002be8:	20000a7c 	.word	0x20000a7c
 8002bec:	20000a38 	.word	0x20000a38
 8002bf0:	2000ace8 	.word	0x2000ace8
 8002bf4:	2000aeac 	.word	0x2000aeac
 8002bf8:	08011e28 	.word	0x08011e28
 8002bfc:	08011e30 	.word	0x08011e30
 8002c00:	08011e34 	.word	0x08011e34

08002c04 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c30:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c32:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <MX_TIM3_Init+0xfc>)
 8002c34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c50:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002c56:	4829      	ldr	r0, [pc, #164]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c58:	f003 fef6 	bl	8006a48 <HAL_TIM_IC_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002c62:	f7ff f8e9 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002c66:	2304      	movs	r3, #4
 8002c68:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002c6a:	2350      	movs	r3, #80	; 0x50
 8002c6c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	481e      	ldr	r0, [pc, #120]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002c82:	f004 f9fd 	bl	8007080 <HAL_TIM_SlaveConfigSynchro>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c8c:	f7ff f8d4 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4814      	ldr	r0, [pc, #80]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002caa:	f004 f94d 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002cb4:	f7ff f8c0 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002cca:	f004 f93d 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002cd4:	f7ff f8b0 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_TIM3_Init+0xf8>)
 8002ce6:	f004 fd6f 	bl	80077c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002cf0:	f7ff f8a2 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	3730      	adds	r7, #48	; 0x30
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000ad8c 	.word	0x2000ad8c
 8002d00:	40000400 	.word	0x40000400

08002d04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <MX_TIM4_Init+0xfc>)
 8002d34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002d56:	4829      	ldr	r0, [pc, #164]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d58:	f003 fe76 	bl	8006a48 <HAL_TIM_IC_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002d62:	f7ff f869 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002d66:	2304      	movs	r3, #4
 8002d68:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002d6a:	2350      	movs	r3, #80	; 0x50
 8002d6c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002d7a:	f107 031c 	add.w	r3, r7, #28
 8002d7e:	4619      	mov	r1, r3
 8002d80:	481e      	ldr	r0, [pc, #120]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002d82:	f004 f97d 	bl	8007080 <HAL_TIM_SlaveConfigSynchro>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d8c:	f7ff f854 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4814      	ldr	r0, [pc, #80]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002daa:	f004 f8cd 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002db4:	f7ff f840 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002db8:	2302      	movs	r3, #2
 8002dba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002dca:	f004 f8bd 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002dd4:	f7ff f830 	bl	8001e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_TIM4_Init+0xf8>)
 8002de6:	f004 fcef 	bl	80077c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002df0:	f7ff f822 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3730      	adds	r7, #48	; 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2000add4 	.word	0x2000add4
 8002e00:	40000800 	.word	0x40000800

08002e04 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <MX_TIM11_Init+0x8c>)
 8002e1a:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e2e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e3c:	4813      	ldr	r0, [pc, #76]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e3e:	f003 fd43 	bl	80068c8 <HAL_TIM_Base_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002e48:	f7fe fff6 	bl	8001e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002e4c:	480f      	ldr	r0, [pc, #60]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e4e:	f003 fdfb 	bl	8006a48 <HAL_TIM_IC_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002e58:	f7fe ffee 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e60:	2301      	movs	r3, #1
 8002e62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <MX_TIM11_Init+0x88>)
 8002e74:	f004 f868 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002e7e:	f7fe ffdb 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000ae1c 	.word	0x2000ae1c
 8002e90:	40014800 	.word	0x40014800

08002e94 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <MX_TIM12_Init+0xd4>)
 8002eba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ece:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002edc:	4821      	ldr	r0, [pc, #132]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002ede:	f003 fdb3 	bl	8006a48 <HAL_TIM_IC_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8002ee8:	f7fe ffa6 	bl	8001e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002eec:	2304      	movs	r3, #4
 8002eee:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002ef0:	2350      	movs	r3, #80	; 0x50
 8002ef2:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4619      	mov	r1, r3
 8002f06:	4817      	ldr	r0, [pc, #92]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002f08:	f004 f8ba 	bl	8007080 <HAL_TIM_SlaveConfigSynchro>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002f12:	f7fe ff91 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002f2e:	f004 f80b 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8002f38:	f7fe ff7e 	bl	8001e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002f40:	2302      	movs	r3, #2
 8002f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2204      	movs	r2, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4806      	ldr	r0, [pc, #24]	; (8002f64 <MX_TIM12_Init+0xd0>)
 8002f4c:	f003 fffc 	bl	8006f48 <HAL_TIM_IC_ConfigChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8002f56:	f7fe ff6f 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	3728      	adds	r7, #40	; 0x28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000ae64 	.word	0x2000ae64
 8002f68:	40001800 	.word	0x40001800

08002f6c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a57      	ldr	r2, [pc, #348]	; (80030e8 <HAL_TIM_IC_MspInit+0x17c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d134      	bne.n	8002ff8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a55      	ldr	r2, [pc, #340]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fc6:	2340      	movs	r3, #64	; 0x40
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4843      	ldr	r0, [pc, #268]	; (80030f0 <HAL_TIM_IC_MspInit+0x184>)
 8002fe2:	f001 fc11 	bl	8004808 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	201d      	movs	r0, #29
 8002fec:	f001 f872 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ff0:	201d      	movs	r0, #29
 8002ff2:	f001 f88b 	bl	800410c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002ff6:	e073      	b.n	80030e0 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM4)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3d      	ldr	r2, [pc, #244]	; (80030f4 <HAL_TIM_IC_MspInit+0x188>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d134      	bne.n	800306c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a38      	ldr	r2, [pc, #224]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	6413      	str	r3, [r2, #64]	; 0x40
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a31      	ldr	r2, [pc, #196]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800304a:	2302      	movs	r3, #2
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003052:	4619      	mov	r1, r3
 8003054:	4828      	ldr	r0, [pc, #160]	; (80030f8 <HAL_TIM_IC_MspInit+0x18c>)
 8003056:	f001 fbd7 	bl	8004808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2105      	movs	r1, #5
 800305e:	201e      	movs	r0, #30
 8003060:	f001 f838 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003064:	201e      	movs	r0, #30
 8003066:	f001 f851 	bl	800410c <HAL_NVIC_EnableIRQ>
}
 800306a:	e039      	b.n	80030e0 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM12)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_TIM_IC_MspInit+0x190>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d134      	bne.n	80030e0 <HAL_TIM_IC_MspInit+0x174>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a14      	ldr	r2, [pc, #80]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_TIM_IC_MspInit+0x180>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80030c0:	2309      	movs	r3, #9
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c8:	4619      	mov	r1, r3
 80030ca:	480b      	ldr	r0, [pc, #44]	; (80030f8 <HAL_TIM_IC_MspInit+0x18c>)
 80030cc:	f001 fb9c 	bl	8004808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2105      	movs	r1, #5
 80030d4:	202b      	movs	r0, #43	; 0x2b
 80030d6:	f000 fffd 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80030da:	202b      	movs	r0, #43	; 0x2b
 80030dc:	f001 f816 	bl	800410c <HAL_NVIC_EnableIRQ>
}
 80030e0:	bf00      	nop
 80030e2:	3738      	adds	r7, #56	; 0x38
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40000800 	.word	0x40000800
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40001800 	.word	0x40001800

08003100 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM11)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <HAL_TIM_Base_MspInit+0x94>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d134      	bne.n	800318c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_TIM_Base_MspInit+0x98>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800315a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800316c:	2303      	movs	r3, #3
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4619      	mov	r1, r3
 8003176:	4809      	ldr	r0, [pc, #36]	; (800319c <HAL_TIM_Base_MspInit+0x9c>)
 8003178:	f001 fb46 	bl	8004808 <HAL_GPIO_Init>

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2105      	movs	r1, #5
 8003180:	201a      	movs	r0, #26
 8003182:	f000 ffa7 	bl	80040d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003186:	201a      	movs	r0, #26
 8003188:	f000 ffc0 	bl	800410c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800318c:	bf00      	nop
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40014800 	.word	0x40014800
 8003198:	40023800 	.word	0x40023800
 800319c:	40020400 	.word	0x40020400

080031a0 <HAL_TIM_IC_CaptureCallback>:
}

/* USER CODE BEGIN 1 */
// function called when timer interrupt occurs
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
		}
	}
	*/

	// when interrupt is caused by timer 3
	if(htim->Instance == TIM3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10c      	bne.n	80031cc <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80031b2:	2100      	movs	r1, #0
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f003 ffa5 	bl	8007104 <HAL_TIM_ReadCapturedValue>
 80031ba:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			wheel_FL_pulse_count++;	// increment pulse_count
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_TIM_IC_CaptureCallback+0x80>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_TIM_IC_CaptureCallback+0x80>)
 80031ca:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 4
	if(htim->Instance == TIM4)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_TIM_IC_CaptureCallback+0x84>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80031d6:	2100      	movs	r1, #0
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f003 ff93 	bl	8007104 <HAL_TIM_ReadCapturedValue>
 80031de:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			wheel_FR_pulse_count++;	// increment pulse_count
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_TIM_IC_CaptureCallback+0x88>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_TIM_IC_CaptureCallback+0x88>)
 80031ee:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 12
	if(htim->Instance == TIM12)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10c      	bne.n	8003214 <HAL_TIM_IC_CaptureCallback+0x74>
	{

		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80031fa:	2100      	movs	r1, #0
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f003 ff81 	bl	8007104 <HAL_TIM_ReadCapturedValue>
 8003202:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			flowmeter_pulse_count++;	// increment pulse_count
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_TIM_IC_CaptureCallback+0x90>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003212:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40000400 	.word	0x40000400
 8003220:	2000ad84 	.word	0x2000ad84
 8003224:	40000800 	.word	0x40000800
 8003228:	2000ad88 	.word	0x2000ad88
 800322c:	40001800 	.word	0x40001800
 8003230:	2000ad80 	.word	0x2000ad80

08003234 <MX_USART1_Init>:

USART_HandleTypeDef husart1;

/* USART1 init function */
void MX_USART1_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <MX_USART1_Init+0x50>)
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <MX_USART1_Init+0x54>)
 800323c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_USART1_Init+0x50>)
 8003240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003244:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <MX_USART1_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <MX_USART1_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <MX_USART1_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <MX_USART1_Init+0x50>)
 800325a:	220c      	movs	r2, #12
 800325c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_USART1_Init+0x50>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <MX_USART1_Init+0x50>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <MX_USART1_Init+0x50>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8003270:	4804      	ldr	r0, [pc, #16]	; (8003284 <MX_USART1_Init+0x50>)
 8003272:	f004 fb39 	bl	80078e8 <HAL_USART_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800327c:	f7fe fddc 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000aeac 	.word	0x2000aeac
 8003288:	40011000 	.word	0x40011000

0800328c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_USART_MspInit+0x84>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d12c      	bne.n	8003308 <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032b8:	f043 0310 	orr.w	r3, r3, #16
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_USART_MspInit+0x88>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80032e6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f8:	2307      	movs	r3, #7
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <HAL_USART_MspInit+0x8c>)
 8003304:	f001 fa80 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40011000 	.word	0x40011000
 8003314:	40023800 	.word	0x40023800
 8003318:	40020000 	.word	0x40020000
 800331c:	00000000 	.word	0x00000000

08003320 <calculateWheelSpeed>:

extern volatile int wheel_FL_pulse_count;
extern volatile int wheel_FR_pulse_count;

// gets wheel speeds as m/s
double calculateWheelSpeed(int pulse_count){
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	volatile double wheel_speed;

	wheel_speed = pulse_count*conversionFactor*WHEEL_CIRCUMFERENCE/NUM_TEETH;	// calculate wheel speed
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fd f91b 	bl	8000564 <__aeabi_i2d>
 800332e:	a315      	add	r3, pc, #84	; (adr r3, 8003384 <calculateWheelSpeed+0x64>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fd f980 	bl	8000638 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	a312      	add	r3, pc, #72	; (adr r3, 800338c <calculateWheelSpeed+0x6c>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fd f977 	bl	8000638 <__aeabi_dmul>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <calculateWheelSpeed+0x60>)
 8003358:	f7fd fa98 	bl	800088c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return wheel_speed;
 8003364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003368:	ec43 2b17 	vmov	d7, r2, r3
}
 800336c:	eeb0 0a47 	vmov.f32	s0, s14
 8003370:	eef0 0a67 	vmov.f32	s1, s15
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	40240000 	.word	0x40240000
 8003384:	d2f1a9fc 	.word	0xd2f1a9fc
 8003388:	3f60624d 	.word	0x3f60624d
 800338c:	f01b866e 	.word	0xf01b866e
 8003390:	400921f9 	.word	0x400921f9

08003394 <StartGetWheelSpeedTask>:

void StartGetWheelSpeedTask(void const * argument){
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	volatile double FL_speed;
	volatile double FR_speed;

	for (;;){
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 800339c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033a0:	f007 ff14 	bl	800b1cc <osDelay>

		// calculates wheel speeds
		FL_speed = calculateWheelSpeed(wheel_FL_pulse_count);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <StartGetWheelSpeedTask+0x4c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb9 	bl	8003320 <calculateWheelSpeed>
 80033ae:	eeb0 7a40 	vmov.f32	s14, s0
 80033b2:	eef0 7a60 	vmov.f32	s15, s1
 80033b6:	ed87 7b04 	vstr	d7, [r7, #16]
		FR_speed = calculateWheelSpeed(wheel_FR_pulse_count);
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <StartGetWheelSpeedTask+0x50>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ffae 	bl	8003320 <calculateWheelSpeed>
 80033c4:	eeb0 7a40 	vmov.f32	s14, s0
 80033c8:	eef0 7a60 	vmov.f32	s15, s1
 80033cc:	ed87 7b02 	vstr	d7, [r7, #8]
		/* TODO SCU#35 */
		/* Logging Starts */
		/* Logging Ends */

		// reset counts
		wheel_FL_pulse_count = 0;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <StartGetWheelSpeedTask+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
		wheel_FR_pulse_count = 0;
 80033d6:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <StartGetWheelSpeedTask+0x50>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 80033dc:	e7de      	b.n	800339c <StartGetWheelSpeedTask+0x8>
 80033de:	bf00      	nop
 80033e0:	2000ad84 	.word	0x2000ad84
 80033e4:	2000ad88 	.word	0x2000ad88

080033e8 <Reset_Handler>:
 80033e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003420 <LoopFillZerobss+0x12>
 80033ec:	480d      	ldr	r0, [pc, #52]	; (8003424 <LoopFillZerobss+0x16>)
 80033ee:	490e      	ldr	r1, [pc, #56]	; (8003428 <LoopFillZerobss+0x1a>)
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <LoopFillZerobss+0x1e>)
 80033f2:	2300      	movs	r3, #0
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:
 80033f6:	58d4      	ldr	r4, [r2, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:
 80033fc:	18c4      	adds	r4, r0, r3
 80033fe:	428c      	cmp	r4, r1
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <LoopFillZerobss+0x22>)
 8003404:	4c0b      	ldr	r4, [pc, #44]	; (8003434 <LoopFillZerobss+0x26>)
 8003406:	2300      	movs	r3, #0
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:
 800340e:	42a2      	cmp	r2, r4
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>
 8003412:	f7ff fa3b 	bl	800288c <SystemInit>
 8003416:	f00b f9f1 	bl	800e7fc <__libc_init_array>
 800341a:	f7fe fc57 	bl	8001ccc <main>
 800341e:	4770      	bx	lr
 8003420:	20020000 	.word	0x20020000
 8003424:	20000000 	.word	0x20000000
 8003428:	20000208 	.word	0x20000208
 800342c:	080122e8 	.word	0x080122e8
 8003430:	20000208 	.word	0x20000208
 8003434:	2000ee1c 	.word	0x2000ee1c

08003438 <ADC_IRQHandler>:
 8003438:	e7fe      	b.n	8003438 <ADC_IRQHandler>
	...

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_Init+0x40>)
 8003446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_Init+0x40>)
 8003452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x40>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003464:	2003      	movs	r0, #3
 8003466:	f000 fe2a 	bl	80040be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	200f      	movs	r0, #15
 800346c:	f7ff f884 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7ff f856 	bl	8002520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000000c 	.word	0x2000000c
 80034a4:	2000aef0 	.word	0x2000aef0

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000aef0 	.word	0x2000aef0

080034c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e033      	b.n	800353e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f8e4 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003506:	f023 0302 	bic.w	r3, r3, #2
 800350a:	f043 0202 	orr.w	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa6e 	bl	80039f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f023 0303 	bic.w	r3, r3, #3
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
 800352e:	e001      	b.n	8003534 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Start_DMA+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0e9      	b.n	800373a <HAL_ADC_Start_DMA+0x1f2>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d018      	beq.n	80035ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800358c:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_ADC_Start_DMA+0x1fc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6d      	ldr	r2, [pc, #436]	; (8003748 <HAL_ADC_Start_DMA+0x200>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0c9a      	lsrs	r2, r3, #18
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a0:	e002      	b.n	80035a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f9      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d107      	bne.n	80035ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 80a1 	bne.w	8003720 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361c:	d106      	bne.n	800362c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f023 0206 	bic.w	r2, r3, #6
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
 800362a:	e002      	b.n	8003632 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_ADC_Start_DMA+0x204>)
 800363c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_ADC_Start_DMA+0x208>)
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_ADC_Start_DMA+0x20c>)
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4a41      	ldr	r2, [pc, #260]	; (8003758 <HAL_ADC_Start_DMA+0x210>)
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800365e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800366e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	334c      	adds	r3, #76	; 0x4c
 800368a:	4619      	mov	r1, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f000 fdf8 	bl	8004284 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2b00      	cmp	r3, #0
 800369e:	d12a      	bne.n	80036f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_ADC_Start_DMA+0x214>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d015      	beq.n	80036d6 <HAL_ADC_Start_DMA+0x18e>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_ADC_Start_DMA+0x218>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d105      	bne.n	80036c0 <HAL_ADC_Start_DMA+0x178>
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_ADC_Start_DMA+0x204>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_ADC_Start_DMA+0x21c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d136      	bne.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_ADC_Start_DMA+0x204>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d130      	bne.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d129      	bne.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e020      	b.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_ADC_Start_DMA+0x214>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d11b      	bne.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d114      	bne.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	e00b      	b.n	8003738 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0210 	orr.w	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000004 	.word	0x20000004
 8003748:	431bde83 	.word	0x431bde83
 800374c:	40012300 	.word	0x40012300
 8003750:	08003bed 	.word	0x08003bed
 8003754:	08003ca7 	.word	0x08003ca7
 8003758:	08003cc3 	.word	0x08003cc3
 800375c:	40012000 	.word	0x40012000
 8003760:	40012100 	.word	0x40012100
 8003764:	40012200 	.word	0x40012200

08003768 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e113      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x244>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d925      	bls.n	8003808 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	3b1e      	subs	r3, #30
 80037d2:	2207      	movs	r2, #7
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43da      	mvns	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	400a      	ands	r2, r1
 80037e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68d9      	ldr	r1, [r3, #12]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4403      	add	r3, r0
 80037fa:	3b1e      	subs	r3, #30
 80037fc:	409a      	lsls	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e022      	b.n	800384e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	2207      	movs	r2, #7
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	400a      	ands	r2, r1
 800382a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	4618      	mov	r0, r3
 800383e:	4603      	mov	r3, r0
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4403      	add	r3, r0
 8003844:	409a      	lsls	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b06      	cmp	r3, #6
 8003854:	d824      	bhi.n	80038a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	3b05      	subs	r3, #5
 8003868:	221f      	movs	r2, #31
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	400a      	ands	r2, r1
 8003876:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	4618      	mov	r0, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b05      	subs	r3, #5
 8003892:	fa00 f203 	lsl.w	r2, r0, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	635a      	str	r2, [r3, #52]	; 0x34
 800389e:	e04c      	b.n	800393a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d824      	bhi.n	80038f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b23      	subs	r3, #35	; 0x23
 80038ba:	221f      	movs	r2, #31
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43da      	mvns	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	400a      	ands	r2, r1
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4618      	mov	r0, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	3b23      	subs	r3, #35	; 0x23
 80038e4:	fa00 f203 	lsl.w	r2, r0, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
 80038f0:	e023      	b.n	800393a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	3b41      	subs	r3, #65	; 0x41
 8003904:	221f      	movs	r2, #31
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	400a      	ands	r2, r1
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4618      	mov	r0, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	3b41      	subs	r3, #65	; 0x41
 800392e:	fa00 f203 	lsl.w	r2, r0, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_ADC_ConfigChannel+0x250>)
 800393c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <HAL_ADC_ConfigChannel+0x254>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d10f      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x1d8>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b12      	cmp	r3, #18
 800394e:	d10b      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_ADC_ConfigChannel+0x254>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12b      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x23a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_ADC_ConfigChannel+0x258>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x1f4>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b11      	cmp	r3, #17
 8003982:	d122      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_ADC_ConfigChannel+0x258>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d111      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_ADC_ConfigChannel+0x25c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <HAL_ADC_ConfigChannel+0x260>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	0c9a      	lsrs	r2, r3, #18
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039bc:	e002      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f9      	bne.n	80039be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40012300 	.word	0x40012300
 80039e4:	40012000 	.word	0x40012000
 80039e8:	10000012 	.word	0x10000012
 80039ec:	20000004 	.word	0x20000004
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fc:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <ADC_Init+0x1f0>)
 80039fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	021a      	lsls	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <ADC_Init+0x1f4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	e00f      	b.n	8003af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0202 	bic.w	r2, r2, #2
 8003b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7e1b      	ldrb	r3, [r3, #24]
 8003b0c:	005a      	lsls	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	035a      	lsls	r2, r3, #13
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e007      	b.n	8003b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	051a      	lsls	r2, r3, #20
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6899      	ldr	r1, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003baa:	025a      	lsls	r2, r3, #9
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	029a      	lsls	r2, r3, #10
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40012300 	.word	0x40012300
 8003be8:	0f000001 	.word	0x0f000001

08003bec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d13c      	bne.n	8003c80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12b      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d127      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d119      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0220 	bic.w	r2, r2, #32
 8003c52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7fd fdc7 	bl	800180c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c7e:	e00e      	b.n	8003c9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fd75 	bl	800377c <HAL_ADC_ErrorCallback>
}
 8003c92:	e004      	b.n	8003c9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fd57 	bl	8003768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fd4a 	bl	800377c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d003      	beq.n	8003d14 <HAL_CAN_GetRxMessage+0x24>
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	f040 80f3 	bne.w	8003efa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10e      	bne.n	8003d38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d116      	bne.n	8003d56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0e7      	b.n	8003f08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0d8      	b.n	8003f08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	331b      	adds	r3, #27
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4413      	add	r3, r2
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0204 	and.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10c      	bne.n	8003d8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	331b      	adds	r3, #27
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	4413      	add	r3, r2
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	0d5b      	lsrs	r3, r3, #21
 8003d84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e00b      	b.n	8003da6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	331b      	adds	r3, #27
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	331b      	adds	r3, #27
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0202 	and.w	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	331b      	adds	r3, #27
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	331b      	adds	r3, #27
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	331b      	adds	r3, #27
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	0a1a      	lsrs	r2, r3, #8
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0c1a      	lsrs	r2, r3, #16
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	0e1a      	lsrs	r2, r3, #24
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	3303      	adds	r3, #3
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0a1a      	lsrs	r2, r3, #8
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	3305      	adds	r3, #5
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0c1a      	lsrs	r2, r3, #16
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	3306      	adds	r3, #6
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e1a      	lsrs	r2, r3, #24
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	3307      	adds	r3, #7
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d108      	bne.n	8003ee6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	e007      	b.n	8003ef6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0220 	orr.w	r2, r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e006      	b.n	8003f08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f28:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d10f      	bne.n	8003f56 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e005      	b.n	8003f56 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f80:	4013      	ands	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f96:	4a04      	ldr	r2, [pc, #16]	; (8003fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	60d3      	str	r3, [r2, #12]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 0307 	and.w	r3, r3, #7
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db0b      	blt.n	8003ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	4907      	ldr	r1, [pc, #28]	; (8004000 <__NVIC_EnableIRQ+0x38>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2001      	movs	r0, #1
 8003fea:	fa00 f202 	lsl.w	r2, r0, r2
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	e000e100 	.word	0xe000e100

08004004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db0a      	blt.n	800402e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	b2da      	uxtb	r2, r3
 800401c:	490c      	ldr	r1, [pc, #48]	; (8004050 <__NVIC_SetPriority+0x4c>)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	0112      	lsls	r2, r2, #4
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	440b      	add	r3, r1
 8004028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800402c:	e00a      	b.n	8004044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4908      	ldr	r1, [pc, #32]	; (8004054 <__NVIC_SetPriority+0x50>)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3b04      	subs	r3, #4
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	440b      	add	r3, r1
 8004042:	761a      	strb	r2, [r3, #24]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000e100 	.word	0xe000e100
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	bf28      	it	cs
 8004076:	2304      	movcs	r3, #4
 8004078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3304      	adds	r3, #4
 800407e:	2b06      	cmp	r3, #6
 8004080:	d902      	bls.n	8004088 <NVIC_EncodePriority+0x30>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3b03      	subs	r3, #3
 8004086:	e000      	b.n	800408a <NVIC_EncodePriority+0x32>
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	401a      	ands	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	43d9      	mvns	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b0:	4313      	orrs	r3, r2
         );
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff4c 	bl	8003f64 <__NVIC_SetPriorityGrouping>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e6:	f7ff ff61 	bl	8003fac <__NVIC_GetPriorityGrouping>
 80040ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	6978      	ldr	r0, [r7, #20]
 80040f2:	f7ff ffb1 	bl	8004058 <NVIC_EncodePriority>
 80040f6:	4602      	mov	r2, r0
 80040f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff80 	bl	8004004 <__NVIC_SetPriority>
}
 8004104:	bf00      	nop
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff ff54 	bl	8003fc8 <__NVIC_EnableIRQ>
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff f9b8 	bl	80034a8 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e099      	b.n	8004278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004164:	e00f      	b.n	8004186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004166:	f7ff f99f 	bl	80034a8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b05      	cmp	r3, #5
 8004172:	d908      	bls.n	8004186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e078      	b.n	8004278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e8      	bne.n	8004166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4b38      	ldr	r3, [pc, #224]	; (8004280 <HAL_DMA_Init+0x158>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d107      	bne.n	80041f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	4313      	orrs	r3, r2
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	2b04      	cmp	r3, #4
 8004218:	d117      	bne.n	800424a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa6f 	bl	8004710 <DMA_CheckFifoParam>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004246:	2301      	movs	r3, #1
 8004248:	e016      	b.n	8004278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa26 	bl	80046a4 <DMA_CalcBaseAndBitshift>
 8004258:	4603      	mov	r3, r0
 800425a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	f010803f 	.word	0xf010803f

08004284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_DMA_Start_IT+0x26>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e040      	b.n	800432c <HAL_DMA_Start_IT+0xa8>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12f      	bne.n	800431e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f9b8 	bl	8004648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	409a      	lsls	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0216 	orr.w	r2, r2, #22
 80042f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0208 	orr.w	r2, r2, #8
 800430a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e005      	b.n	800432a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004326:	2302      	movs	r3, #2
 8004328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800432a:	7dfb      	ldrb	r3, [r7, #23]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004340:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_DMA_IRQHandler+0x248>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a8e      	ldr	r2, [pc, #568]	; (8004580 <HAL_DMA_IRQHandler+0x24c>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	2208      	movs	r2, #8
 8004360:	409a      	lsls	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2208      	movs	r2, #8
 800438e:	409a      	lsls	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	2201      	movs	r2, #1
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f043 0202 	orr.w	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	2204      	movs	r2, #4
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d012      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2210      	movs	r2, #16
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d043      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03c      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2210      	movs	r2, #16
 8004430:	409a      	lsls	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d024      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e01f      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e016      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0208 	bic.w	r2, r2, #8
 8004492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2220      	movs	r2, #32
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 808f 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8087 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	2220      	movs	r2, #32
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d136      	bne.n	800454c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_IRQHandler+0x1da>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	223f      	movs	r2, #63	; 0x3f
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d07e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
        }
        return;
 800454a:	e079      	b.n	8004640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	2b00      	cmp	r3, #0
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	e02c      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004
 8004580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
 8004594:	e01e      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10f      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0210 	bic.w	r2, r2, #16
 80045b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d022      	beq.n	800462e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2205      	movs	r2, #5
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	d307      	bcc.n	800461c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_DMA_IRQHandler+0x2cc>
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800461c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
 800463e:	e000      	b.n	8004642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004640:	bf00      	nop
    }
  }
}
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d108      	bne.n	8004688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004686:	e007      	b.n	8004698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	3b10      	subs	r3, #16
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <DMA_CalcBaseAndBitshift+0x64>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <DMA_CalcBaseAndBitshift+0x68>)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d909      	bls.n	80046e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
 80046e4:	e007      	b.n	80046f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	08011eac 	.word	0x08011eac

08004710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d856      	bhi.n	80047de <DMA_CheckFifoParam+0xce>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <DMA_CheckFifoParam+0x28>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004749 	.word	0x08004749
 800473c:	0800475b 	.word	0x0800475b
 8004740:	08004749 	.word	0x08004749
 8004744:	080047df 	.word	0x080047df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d046      	beq.n	80047e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e043      	b.n	80047e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004762:	d140      	bne.n	80047e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004768:	e03d      	b.n	80047e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	d121      	bne.n	80047b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d837      	bhi.n	80047ea <DMA_CheckFifoParam+0xda>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <DMA_CheckFifoParam+0x70>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	08004797 	.word	0x08004797
 8004788:	08004791 	.word	0x08004791
 800478c:	080047a9 	.word	0x080047a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e030      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d025      	beq.n	80047ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a6:	e022      	b.n	80047ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b0:	d11f      	bne.n	80047f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b6:	e01c      	b.n	80047f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d903      	bls.n	80047c6 <DMA_CheckFifoParam+0xb6>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d003      	beq.n	80047cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c4:	e018      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ca:	e015      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e00b      	b.n	80047f6 <DMA_CheckFifoParam+0xe6>
      break;
 80047de:	bf00      	nop
 80047e0:	e00a      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e008      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e006      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e004      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
    }
  } 
  
  return status; 
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e165      	b.n	8004af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004824:	2201      	movs	r2, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	f040 8154 	bne.w	8004aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004856:	2b02      	cmp	r3, #2
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d017      	beq.n	80048f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d123      	bne.n	800494c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	220f      	movs	r2, #15
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80ae 	beq.w	8004aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <HAL_GPIO_Init+0x300>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	4a5c      	ldr	r2, [pc, #368]	; (8004b08 <HAL_GPIO_Init+0x300>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499c:	6453      	str	r3, [r2, #68]	; 0x44
 800499e:	4b5a      	ldr	r3, [pc, #360]	; (8004b08 <HAL_GPIO_Init+0x300>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049aa:	4a58      	ldr	r2, [pc, #352]	; (8004b0c <HAL_GPIO_Init+0x304>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a4f      	ldr	r2, [pc, #316]	; (8004b10 <HAL_GPIO_Init+0x308>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d025      	beq.n	8004a22 <HAL_GPIO_Init+0x21a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a4e      	ldr	r2, [pc, #312]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <HAL_GPIO_Init+0x216>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4d      	ldr	r2, [pc, #308]	; (8004b18 <HAL_GPIO_Init+0x310>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d019      	beq.n	8004a1a <HAL_GPIO_Init+0x212>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4c      	ldr	r2, [pc, #304]	; (8004b1c <HAL_GPIO_Init+0x314>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_GPIO_Init+0x20e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_GPIO_Init+0x318>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00d      	beq.n	8004a12 <HAL_GPIO_Init+0x20a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_GPIO_Init+0x31c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x206>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_GPIO_Init+0x320>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_GPIO_Init+0x202>
 8004a06:	2306      	movs	r3, #6
 8004a08:	e00c      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	e00a      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a0e:	2305      	movs	r3, #5
 8004a10:	e008      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a12:	2304      	movs	r3, #4
 8004a14:	e006      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a16:	2303      	movs	r3, #3
 8004a18:	e004      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e002      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_GPIO_Init+0x21c>
 8004a22:	2300      	movs	r3, #0
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f002 0203 	and.w	r2, r2, #3
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	4093      	lsls	r3, r2
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a34:	4935      	ldr	r1, [pc, #212]	; (8004b0c <HAL_GPIO_Init+0x304>)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a42:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a66:	4a31      	ldr	r2, [pc, #196]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a6c:	4b2f      	ldr	r3, [pc, #188]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a96:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aba:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <HAL_GPIO_Init+0x324>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	f67f ae96 	bls.w	8004824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40020400 	.word	0x40020400
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	40020c00 	.word	0x40020c00
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40021400 	.word	0x40021400
 8004b28:	40021800 	.word	0x40021800
 8004b2c:	40013c00 	.word	0x40013c00

08004b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b40:	787b      	ldrb	r3, [r7, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b4c:	e003      	b.n	8004b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	041a      	lsls	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	619a      	str	r2, [r3, #24]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0cc      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d90c      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b65      	ldr	r3, [pc, #404]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0b8      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d020      	beq.n	8004bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a58      	ldr	r2, [pc, #352]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bd0:	4b53      	ldr	r3, [pc, #332]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	4a52      	ldr	r2, [pc, #328]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bdc:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	494d      	ldr	r1, [pc, #308]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d044      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d119      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e07f      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d003      	beq.n	8004c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e06f      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e067      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f023 0203 	bic.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4934      	ldr	r1, [pc, #208]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c54:	f7fe fc28 	bl	80034a8 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5c:	f7fe fc24 	bl	80034a8 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e04f      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 020c 	and.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1eb      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d20c      	bcs.n	8004cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e032      	b.n	8004d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb8:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4916      	ldr	r1, [pc, #88]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	490e      	ldr	r1, [pc, #56]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cea:	f000 fbb1 	bl	8005450 <HAL_RCC_GetSysClockFreq>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	490a      	ldr	r1, [pc, #40]	; (8004d24 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	5ccb      	ldrb	r3, [r1, r3]
 8004cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fd fc34 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023c00 	.word	0x40023c00
 8004d20:	40023800 	.word	0x40023800
 8004d24:	08011e88 	.word	0x08011e88
 8004d28:	20000004 	.word	0x20000004
 8004d2c:	20000008 	.word	0x20000008

08004d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000004 	.word	0x20000004

08004d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d4c:	f7ff fff0 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	0a9b      	lsrs	r3, r3, #10
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5e:	5ccb      	ldrb	r3, [r1, r3]
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	08011e98 	.word	0x08011e98

08004d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d74:	f7ff ffdc 	bl	8004d30 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	0b5b      	lsrs	r3, r3, #13
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	08011e98 	.word	0x08011e98

08004d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	220f      	movs	r2, #15
 8004da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0203 	and.w	r2, r3, #3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_GetClockConfig+0x5c>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_RCC_GetClockConfig+0x60>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 020f 	and.w	r2, r3, #15
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40023c00 	.word	0x40023c00

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004e34:	4b6f      	ldr	r3, [pc, #444]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	496c      	ldr	r1, [pc, #432]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004e52:	2301      	movs	r3, #1
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004e62:	4b64      	ldr	r3, [pc, #400]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e68:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	4960      	ldr	r1, [pc, #384]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004e80:	2301      	movs	r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d017      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e90:	4b58      	ldr	r3, [pc, #352]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	4955      	ldr	r1, [pc, #340]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ecc:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	4946      	ldr	r1, [pc, #280]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004eec:	2301      	movs	r3, #1
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 808a 	beq.w	800501e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	4a38      	ldr	r2, [pc, #224]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f26:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a33      	ldr	r2, [pc, #204]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f32:	f7fe fab9 	bl	80034a8 <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f3a:	f7fe fab5 	bl	80034a8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e278      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f60:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d028      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f76:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d114      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fa83 	bl	80034a8 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fe fa7f 	bl	80034a8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e240      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ee      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd4:	d114      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fea:	4902      	ldr	r1, [pc, #8]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]
 8004ff0:	e00c      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42470e40 	.word	0x42470e40
 8005000:	4b4a      	ldr	r3, [pc, #296]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	4a49      	ldr	r2, [pc, #292]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005006:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800500a:	6093      	str	r3, [r2, #8]
 800500c:	4b47      	ldr	r3, [pc, #284]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800500e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005018:	4944      	ldr	r1, [pc, #272]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800501a:	4313      	orrs	r3, r2
 800501c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005030:	4b3f      	ldr	r3, [pc, #252]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005032:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4937      	ldr	r1, [pc, #220]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005062:	4b32      	ldr	r3, [pc, #200]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005068:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005070:	492e      	ldr	r1, [pc, #184]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005084:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	4926      	ldr	r1, [pc, #152]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a2:	d101      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80050b4:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	491a      	ldr	r1, [pc, #104]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d011      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	4911      	ldr	r1, [pc, #68]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80050f6:	2301      	movs	r3, #1
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d005      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005108:	f040 80ff 	bne.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005112:	f7fe f9c9 	bl	80034a8 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005118:	e00e      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800511a:	f7fe f9c5 	bl	80034a8 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d907      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e188      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800512c:	40023800 	.word	0x40023800
 8005130:	424711e0 	.word	0x424711e0
 8005134:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005138:	4b7e      	ldr	r3, [pc, #504]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ea      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005160:	2b00      	cmp	r3, #0
 8005162:	d028      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d124      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800516c:	4b71      	ldr	r3, [pc, #452]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	3301      	adds	r3, #1
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800517e:	4b6d      	ldr	r3, [pc, #436]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	0e1b      	lsrs	r3, r3, #24
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	431a      	orrs	r2, r3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	431a      	orrs	r2, r3
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	071b      	lsls	r3, r3, #28
 80051ae:	4961      	ldr	r1, [pc, #388]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d035      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e0:	d130      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051f4:	4b4f      	ldr	r3, [pc, #316]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	0f1b      	lsrs	r3, r3, #28
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	019b      	lsls	r3, r3, #6
 800520c:	431a      	orrs	r2, r3
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	3b01      	subs	r3, #1
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	431a      	orrs	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	071b      	lsls	r3, r3, #28
 8005224:	4943      	ldr	r1, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800522c:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800522e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005232:	f023 021f 	bic.w	r2, r3, #31
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	3b01      	subs	r3, #1
 800523c:	493d      	ldr	r1, [pc, #244]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d029      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005258:	d124      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005260:	0c1b      	lsrs	r3, r3, #16
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800526c:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800526e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005272:	0f1b      	lsrs	r3, r3, #28
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	019b      	lsls	r3, r3, #6
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	3b01      	subs	r3, #1
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	431a      	orrs	r2, r3
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	071b      	lsls	r3, r3, #28
 800529c:	4925      	ldr	r1, [pc, #148]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d016      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	3b01      	subs	r3, #1
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	061b      	lsls	r3, r3, #24
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	071b      	lsls	r3, r3, #28
 80052d6:	4917      	ldr	r1, [pc, #92]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052e4:	f7fe f8e0 	bl	80034a8 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052ec:	f7fe f8dc 	bl	80034a8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e09f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 8095 	bne.w	800543c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005318:	f7fe f8c6 	bl	80034a8 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800531e:	e00f      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005320:	f7fe f8c2 	bl	80034a8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d908      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e085      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800
 8005338:	42470068 	.word	0x42470068
 800533c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005340:	4b41      	ldr	r3, [pc, #260]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534c:	d0e8      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02b      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	d127      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	3301      	adds	r3, #1
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	431a      	orrs	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	3b01      	subs	r3, #1
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	4928      	ldr	r1, [pc, #160]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ac:	4b26      	ldr	r3, [pc, #152]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	3b01      	subs	r3, #1
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	4922      	ldr	r1, [pc, #136]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01d      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053da:	d118      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	0e1b      	lsrs	r3, r3, #24
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	019b      	lsls	r3, r3, #6
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	431a      	orrs	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	4910      	ldr	r1, [pc, #64]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005414:	f7fe f848 	bl	80034a8 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800541c:	f7fe f844 	bl	80034a8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e007      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543a:	d1ef      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3730      	adds	r7, #48	; 0x30
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	42470070 	.word	0x42470070

08005450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005454:	b0a6      	sub	sp, #152	; 0x98
 8005456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005476:	4bc8      	ldr	r3, [pc, #800]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b0c      	cmp	r3, #12
 8005480:	f200 817e 	bhi.w	8005780 <HAL_RCC_GetSysClockFreq+0x330>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054c1 	.word	0x080054c1
 8005490:	08005781 	.word	0x08005781
 8005494:	08005781 	.word	0x08005781
 8005498:	08005781 	.word	0x08005781
 800549c:	080054c9 	.word	0x080054c9
 80054a0:	08005781 	.word	0x08005781
 80054a4:	08005781 	.word	0x08005781
 80054a8:	08005781 	.word	0x08005781
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	08005781 	.word	0x08005781
 80054b4:	08005781 	.word	0x08005781
 80054b8:	08005781 	.word	0x08005781
 80054bc:	0800563b 	.word	0x0800563b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c0:	4bb6      	ldr	r3, [pc, #728]	; (800579c <HAL_RCC_GetSysClockFreq+0x34c>)
 80054c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80054c6:	e15f      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c8:	4bb5      	ldr	r3, [pc, #724]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x350>)
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80054ce:	e15b      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d0:	4bb1      	ldr	r3, [pc, #708]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054dc:	4bae      	ldr	r3, [pc, #696]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d031      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054e8:	4bab      	ldr	r3, [pc, #684]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	2200      	movs	r2, #0
 80054f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	663b      	str	r3, [r7, #96]	; 0x60
 80054fc:	2300      	movs	r3, #0
 80054fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005500:	4ba7      	ldr	r3, [pc, #668]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005502:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005506:	462a      	mov	r2, r5
 8005508:	fb03 f202 	mul.w	r2, r3, r2
 800550c:	2300      	movs	r3, #0
 800550e:	4621      	mov	r1, r4
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	4413      	add	r3, r2
 8005516:	4aa2      	ldr	r2, [pc, #648]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005518:	4621      	mov	r1, r4
 800551a:	fba1 1202 	umull	r1, r2, r1, r2
 800551e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005520:	460a      	mov	r2, r1
 8005522:	67ba      	str	r2, [r7, #120]	; 0x78
 8005524:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005526:	4413      	add	r3, r2
 8005528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800552a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800552e:	2200      	movs	r2, #0
 8005530:	65bb      	str	r3, [r7, #88]	; 0x58
 8005532:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005534:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005538:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800553c:	f7fb fba4 	bl	8000c88 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4613      	mov	r3, r2
 8005546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800554a:	e064      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554c:	4b92      	ldr	r3, [pc, #584]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	2200      	movs	r2, #0
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
 8005556:	657a      	str	r2, [r7, #84]	; 0x54
 8005558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005560:	2300      	movs	r3, #0
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005564:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005568:	4622      	mov	r2, r4
 800556a:	462b      	mov	r3, r5
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	0159      	lsls	r1, r3, #5
 8005576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557a:	0150      	lsls	r0, r2, #5
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4621      	mov	r1, r4
 8005582:	1a51      	subs	r1, r2, r1
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	4629      	mov	r1, r5
 8005588:	eb63 0301 	sbc.w	r3, r3, r1
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800559a:	4659      	mov	r1, fp
 800559c:	018b      	lsls	r3, r1, #6
 800559e:	4651      	mov	r1, sl
 80055a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a4:	4651      	mov	r1, sl
 80055a6:	018a      	lsls	r2, r1, #6
 80055a8:	4651      	mov	r1, sl
 80055aa:	ebb2 0801 	subs.w	r8, r2, r1
 80055ae:	4659      	mov	r1, fp
 80055b0:	eb63 0901 	sbc.w	r9, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055c8:	4690      	mov	r8, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	4623      	mov	r3, r4
 80055ce:	eb18 0303 	adds.w	r3, r8, r3
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	462b      	mov	r3, r5
 80055d6:	eb49 0303 	adc.w	r3, r9, r3
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055e8:	4629      	mov	r1, r5
 80055ea:	028b      	lsls	r3, r1, #10
 80055ec:	4621      	mov	r1, r4
 80055ee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f2:	4621      	mov	r1, r4
 80055f4:	028a      	lsls	r2, r1, #10
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fe:	2200      	movs	r2, #0
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
 8005602:	647a      	str	r2, [r7, #68]	; 0x44
 8005604:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005608:	f7fb fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4613      	mov	r3, r2
 8005612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005616:	4b60      	ldr	r3, [pc, #384]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	3301      	adds	r3, #1
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005628:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800562c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005638:	e0a6      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563a:	4b57      	ldr	r3, [pc, #348]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005646:	4b54      	ldr	r3, [pc, #336]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d02a      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	2200      	movs	r2, #0
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
 800565c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005664:	2100      	movs	r1, #0
 8005666:	4b4e      	ldr	r3, [pc, #312]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005668:	fb03 f201 	mul.w	r2, r3, r1
 800566c:	2300      	movs	r3, #0
 800566e:	fb00 f303 	mul.w	r3, r0, r3
 8005672:	4413      	add	r3, r2
 8005674:	4a4a      	ldr	r2, [pc, #296]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005676:	fba0 1202 	umull	r1, r2, r0, r2
 800567a:	677a      	str	r2, [r7, #116]	; 0x74
 800567c:	460a      	mov	r2, r1
 800567e:	673a      	str	r2, [r7, #112]	; 0x70
 8005680:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005682:	4413      	add	r3, r2
 8005684:	677b      	str	r3, [r7, #116]	; 0x74
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800568a:	2200      	movs	r2, #0
 800568c:	633b      	str	r3, [r7, #48]	; 0x30
 800568e:	637a      	str	r2, [r7, #52]	; 0x34
 8005690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005694:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005698:	f7fb faf6 	bl	8000c88 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4613      	mov	r3, r2
 80056a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056a6:	e05b      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	099b      	lsrs	r3, r3, #6
 80056ae:	2200      	movs	r2, #0
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ba:	623b      	str	r3, [r7, #32]
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	0159      	lsls	r1, r3, #5
 80056d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d6:	0150      	lsls	r0, r2, #5
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4641      	mov	r1, r8
 80056de:	ebb2 0a01 	subs.w	sl, r2, r1
 80056e2:	4649      	mov	r1, r9
 80056e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005700:	eb63 050b 	sbc.w	r5, r3, fp
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	00eb      	lsls	r3, r5, #3
 800570e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005712:	00e2      	lsls	r2, r4, #3
 8005714:	4614      	mov	r4, r2
 8005716:	461d      	mov	r5, r3
 8005718:	4643      	mov	r3, r8
 800571a:	18e3      	adds	r3, r4, r3
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	464b      	mov	r3, r9
 8005720:	eb45 0303 	adc.w	r3, r5, r3
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005732:	4629      	mov	r1, r5
 8005734:	028b      	lsls	r3, r1, #10
 8005736:	4621      	mov	r1, r4
 8005738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800573c:	4621      	mov	r1, r4
 800573e:	028a      	lsls	r2, r1, #10
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005748:	2200      	movs	r2, #0
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	61fa      	str	r2, [r7, #28]
 800574e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005752:	f7fb fa99 	bl	8000c88 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4613      	mov	r3, r2
 800575c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <HAL_RCC_GetSysClockFreq+0x348>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	0f1b      	lsrs	r3, r3, #28
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800576e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800577e:	e003      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800578c:	4618      	mov	r0, r3
 800578e:	3798      	adds	r7, #152	; 0x98
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	017d7840 	.word	0x017d7840

080057a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e28d      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8083 	beq.w	80058ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057c4:	4b94      	ldr	r3, [pc, #592]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d019      	beq.n	8005804 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057d0:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057dc:	4b8e      	ldr	r3, [pc, #568]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e8:	d00c      	beq.n	8005804 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ea:	4b8b      	ldr	r3, [pc, #556]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d112      	bne.n	800581c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f6:	4b88      	ldr	r3, [pc, #544]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005802:	d10b      	bne.n	800581c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	4b84      	ldr	r3, [pc, #528]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05b      	beq.n	80058c8 <HAL_RCC_OscConfig+0x124>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d157      	bne.n	80058c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e25a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d106      	bne.n	8005834 <HAL_RCC_OscConfig+0x90>
 8005826:	4b7c      	ldr	r3, [pc, #496]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7b      	ldr	r2, [pc, #492]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e01d      	b.n	8005870 <HAL_RCC_OscConfig+0xcc>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0xb4>
 800583e:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a75      	ldr	r2, [pc, #468]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b73      	ldr	r3, [pc, #460]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a72      	ldr	r2, [pc, #456]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0xcc>
 8005858:	4b6f      	ldr	r3, [pc, #444]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6e      	ldr	r2, [pc, #440]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800585e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6b      	ldr	r2, [pc, #428]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800586a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fd fe16 	bl	80034a8 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005880:	f7fd fe12 	bl	80034a8 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e21f      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005892:	4b61      	ldr	r3, [pc, #388]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCC_OscConfig+0xdc>
 800589e:	e014      	b.n	80058ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a0:	f7fd fe02 	bl	80034a8 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fd fdfe 	bl	80034a8 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e20b      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ba:	4b57      	ldr	r3, [pc, #348]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x104>
 80058c6:	e000      	b.n	80058ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d06f      	beq.n	80059b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058d6:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d017      	beq.n	8005912 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058e2:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d105      	bne.n	80058fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058ee:	4b4a      	ldr	r3, [pc, #296]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fa:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d11c      	bne.n	8005940 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005906:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_OscConfig+0x186>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e1d3      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592a:	4b3b      	ldr	r3, [pc, #236]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4937      	ldr	r1, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593e:	e03a      	b.n	80059b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005948:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <HAL_RCC_OscConfig+0x278>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fd fdab 	bl	80034a8 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005956:	f7fd fda7 	bl	80034a8 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e1b4      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005974:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4925      	ldr	r1, [pc, #148]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 8005984:	4313      	orrs	r3, r2
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	e015      	b.n	80059b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_OscConfig+0x278>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fd8a 	bl	80034a8 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005998:	f7fd fd86 	bl	80034a8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e193      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d036      	beq.n	8005a30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <HAL_RCC_OscConfig+0x27c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fd fd6a 	bl	80034a8 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fd fd66 	bl	80034a8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e173      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_OscConfig+0x274>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x234>
 80059f6:	e01b      	b.n	8005a30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCC_OscConfig+0x27c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fe:	f7fd fd53 	bl	80034a8 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	e00e      	b.n	8005a24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a06:	f7fd fd4f 	bl	80034a8 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d907      	bls.n	8005a24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e15c      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	42470000 	.word	0x42470000
 8005a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a24:	4b8a      	ldr	r3, [pc, #552]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1ea      	bne.n	8005a06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8097 	beq.w	8005b6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a42:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10f      	bne.n	8005a6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	4b7f      	ldr	r3, [pc, #508]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4a7e      	ldr	r2, [pc, #504]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5e:	4b7c      	ldr	r3, [pc, #496]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a66:	60bb      	str	r3, [r7, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d118      	bne.n	8005aac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7a:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a75      	ldr	r2, [pc, #468]	; (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a86:	f7fd fd0f 	bl	80034a8 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8e:	f7fd fd0b 	bl	80034a8 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e118      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	4b6c      	ldr	r3, [pc, #432]	; (8005c54 <HAL_RCC_OscConfig+0x4b0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x31e>
 8005ab4:	4b66      	ldr	r3, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a65      	ldr	r2, [pc, #404]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005aba:	f043 0301 	orr.w	r3, r3, #1
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	e01c      	b.n	8005afc <HAL_RCC_OscConfig+0x358>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x340>
 8005aca:	4b61      	ldr	r3, [pc, #388]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a60      	ldr	r2, [pc, #384]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad6:	4b5e      	ldr	r3, [pc, #376]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	4a5d      	ldr	r2, [pc, #372]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae2:	e00b      	b.n	8005afc <HAL_RCC_OscConfig+0x358>
 8005ae4:	4b5a      	ldr	r3, [pc, #360]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a59      	ldr	r2, [pc, #356]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	4a56      	ldr	r2, [pc, #344]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005af6:	f023 0304 	bic.w	r3, r3, #4
 8005afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fd fcd0 	bl	80034a8 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b0c:	f7fd fccc 	bl	80034a8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0d7      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b22:	4b4b      	ldr	r3, [pc, #300]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0ee      	beq.n	8005b0c <HAL_RCC_OscConfig+0x368>
 8005b2e:	e014      	b.n	8005b5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b30:	f7fd fcba 	bl	80034a8 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b38:	f7fd fcb6 	bl	80034a8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0c1      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4e:	4b40      	ldr	r3, [pc, #256]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ee      	bne.n	8005b38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	4a3a      	ldr	r2, [pc, #232]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80ad 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b76:	4b36      	ldr	r3, [pc, #216]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d060      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d145      	bne.n	8005c16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b33      	ldr	r3, [pc, #204]	; (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fd fc8a 	bl	80034a8 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fd fc86 	bl	80034a8 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e093      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	041b      	lsls	r3, r3, #16
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	071b      	lsls	r3, r3, #28
 8005be2:	491b      	ldr	r1, [pc, #108]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fd fc5b 	bl	80034a8 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fd fc57 	bl	80034a8 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e064      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x452>
 8005c14:	e05c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_RCC_OscConfig+0x4b4>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fd fc44 	bl	80034a8 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fd fc40 	bl	80034a8 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e04d      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCC_OscConfig+0x4ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x480>
 8005c42:	e045      	b.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e040      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c5c:	4b1f      	ldr	r3, [pc, #124]	; (8005cdc <HAL_RCC_OscConfig+0x538>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d030      	beq.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d129      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d122      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d119      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d10f      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800

08005ce0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e066      	b.n	8005dc4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7f5b      	ldrb	r3, [r3, #29]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc f8c2 	bl	8001e90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ca      	movs	r2, #202	; 0xca
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2253      	movs	r2, #83	; 0x53
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f927 	bl	8005f76 <RTC_EnterInitMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d12c      	bne.n	8005d8c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6899      	ldr	r1, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68d2      	ldr	r2, [r2, #12]
 8005d6c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6919      	ldr	r1, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	041a      	lsls	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f92e 	bl	8005fe4 <RTC_ExitInitMode>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d113      	bne.n	8005dba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	0c1b      	lsrs	r3, r3, #16
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	0d9b      	lsrs	r3, r3, #22
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11a      	bne.n	8005e7e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f8ee 	bl	800602e <RTC_Bcd2ToByte>
 8005e52:	4603      	mov	r3, r0
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f8e5 	bl	800602e <RTC_Bcd2ToByte>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	789b      	ldrb	r3, [r3, #2]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f8dc 	bl	800602e <RTC_Bcd2ToByte>
 8005e76:	4603      	mov	r3, r0
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ea2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	0c1b      	lsrs	r3, r3, #16
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	0b5b      	lsrs	r3, r3, #13
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11a      	bne.n	8005f1c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	78db      	ldrb	r3, [r3, #3]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f89f 	bl	800602e <RTC_Bcd2ToByte>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f896 	bl	800602e <RTC_Bcd2ToByte>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	789b      	ldrb	r3, [r3, #2]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f88d 	bl	800602e <RTC_Bcd2ToByte>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f40:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f42:	f7fd fab1 	bl	80034a8 <HAL_GetTick>
 8005f46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f48:	e009      	b.n	8005f5e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f4a:	f7fd faad 	bl	80034a8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f58:	d901      	bls.n	8005f5e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e007      	b.n	8005f6e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ee      	beq.n	8005f4a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d122      	bne.n	8005fda <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fa2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fa4:	f7fd fa80 	bl	80034a8 <HAL_GetTick>
 8005fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005faa:	e00c      	b.n	8005fc6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fac:	f7fd fa7c 	bl	80034a8 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fba:	d904      	bls.n	8005fc6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <RTC_EnterInitMode+0x64>
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d1e8      	bne.n	8005fac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ffe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff ff89 	bl	8005f26 <HAL_RTC_WaitForSynchro>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	4603      	mov	r3, r0
 8006036:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	0092      	lsls	r2, r2, #2
 8006046:	4413      	add	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	b2da      	uxtb	r2, r3
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	4413      	add	r3, r2
 8006058:	b2db      	uxtb	r3, r3
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e07b      	b.n	8006170 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	d108      	bne.n	8006092 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006088:	d009      	beq.n	800609e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	61da      	str	r2, [r3, #28]
 8006090:	e005      	b.n	800609e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d106      	bne.n	80060be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fc f9e9 	bl	8002490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	ea42 0103 	orr.w	r1, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	0c1b      	lsrs	r3, r3, #16
 800613c:	f003 0104 	and.w	r1, r3, #4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f003 0210 	and.w	r2, r3, #16
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69da      	ldr	r2, [r3, #28]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_SPI_Transmit+0x22>
 8006196:	2302      	movs	r3, #2
 8006198:	e126      	b.n	80063e8 <HAL_SPI_Transmit+0x270>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a2:	f7fd f981 	bl	80034a8 <HAL_GetTick>
 80061a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d002      	beq.n	80061be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
 80061ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061bc:	e10b      	b.n	80063d6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Transmit+0x52>
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ce:	e102      	b.n	80063d6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2203      	movs	r2, #3
 80061d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006216:	d10f      	bne.n	8006238 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006226:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006236:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d007      	beq.n	8006256 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d14b      	bne.n	80062f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_Transmit+0xf6>
 8006268:	8afb      	ldrh	r3, [r7, #22]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d13e      	bne.n	80062ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627e:	1c9a      	adds	r2, r3, #2
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006292:	e02b      	b.n	80062ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d112      	bne.n	80062c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	881a      	ldrh	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	1c9a      	adds	r2, r3, #2
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80062c6:	e011      	b.n	80062ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c8:	f7fd f8ee 	bl	80034a8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d803      	bhi.n	80062e0 <HAL_SPI_Transmit+0x168>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d102      	bne.n	80062e6 <HAL_SPI_Transmit+0x16e>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ea:	e074      	b.n	80063d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1ce      	bne.n	8006294 <HAL_SPI_Transmit+0x11c>
 80062f6:	e04c      	b.n	8006392 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Transmit+0x18e>
 8006300:	8afb      	ldrh	r3, [r7, #22]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d140      	bne.n	8006388 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	330c      	adds	r3, #12
 8006310:	7812      	ldrb	r2, [r2, #0]
 8006312:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800632c:	e02c      	b.n	8006388 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d113      	bne.n	8006364 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	86da      	strh	r2, [r3, #54]	; 0x36
 8006362:	e011      	b.n	8006388 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006364:	f7fd f8a0 	bl	80034a8 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d803      	bhi.n	800637c <HAL_SPI_Transmit+0x204>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d102      	bne.n	8006382 <HAL_SPI_Transmit+0x20a>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006386:	e026      	b.n	80063d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1cd      	bne.n	800632e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa54 	bl	8006844 <SPI_EndRxTxTransaction>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e000      	b.n	80063d6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80063d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3720      	adds	r7, #32
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	; 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063fe:	2301      	movs	r3, #1
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_SPI_TransmitReceive+0x26>
 8006412:	2302      	movs	r3, #2
 8006414:	e18a      	b.n	800672c <HAL_SPI_TransmitReceive+0x33c>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800641e:	f7fd f843 	bl	80034a8 <HAL_GetTick>
 8006422:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006434:	887b      	ldrh	r3, [r7, #2]
 8006436:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800643c:	2b01      	cmp	r3, #1
 800643e:	d00f      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x70>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006446:	d107      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d103      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x68>
 8006450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006454:	2b04      	cmp	r3, #4
 8006456:	d003      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006458:	2302      	movs	r3, #2
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800645e:	e15b      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x82>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x82>
 800646c:	887b      	ldrh	r3, [r7, #2]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006478:	e14e      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b04      	cmp	r3, #4
 8006484:	d003      	beq.n	800648e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2205      	movs	r2, #5
 800648a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	887a      	ldrh	r2, [r7, #2]
 800649e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	887a      	ldrh	r2, [r7, #2]
 80064b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d007      	beq.n	80064e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ea:	d178      	bne.n	80065de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x10a>
 80064f4:	8b7b      	ldrh	r3, [r7, #26]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d166      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651e:	e053      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d11b      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x176>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d016      	beq.n	8006566 <HAL_SPI_TransmitReceive+0x176>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d113      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b01      	cmp	r3, #1
 8006572:	d119      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x1b8>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d014      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	b292      	uxth	r2, r2
 800658a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	1c9a      	adds	r2, r3, #2
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a4:	2301      	movs	r3, #1
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065a8:	f7fc ff7e 	bl	80034a8 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d807      	bhi.n	80065c8 <HAL_SPI_TransmitReceive+0x1d8>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065c6:	e0a7      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1a6      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x130>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1a1      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x130>
 80065dc:	e07c      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x1fc>
 80065e6:	8b7b      	ldrh	r3, [r7, #26]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d16b      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006612:	e057      	b.n	80066c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d11c      	bne.n	800665c <HAL_SPI_TransmitReceive+0x26c>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_SPI_TransmitReceive+0x26c>
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	2b01      	cmp	r3, #1
 8006630:	d114      	bne.n	800665c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d119      	bne.n	800669e <HAL_SPI_TransmitReceive+0x2ae>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666e:	b29b      	uxth	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d014      	beq.n	800669e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800669a:	2301      	movs	r3, #1
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800669e:	f7fc ff03 	bl	80034a8 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d803      	bhi.n	80066b6 <HAL_SPI_TransmitReceive+0x2c6>
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d102      	bne.n	80066bc <HAL_SPI_TransmitReceive+0x2cc>
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066c2:	e029      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1a2      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x224>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d19d      	bne.n	8006614 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f8b1 	bl	8006844 <SPI_EndRxTxTransaction>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066f4:	e010      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	e000      	b.n	8006718 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800672c:	4618      	mov	r0, r3
 800672e:	3730      	adds	r7, #48	; 0x30
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006744:	f7fc feb0 	bl	80034a8 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4413      	add	r3, r2
 8006752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006754:	f7fc fea8 	bl	80034a8 <HAL_GetTick>
 8006758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800675a:	4b39      	ldr	r3, [pc, #228]	; (8006840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	015b      	lsls	r3, r3, #5
 8006760:	0d1b      	lsrs	r3, r3, #20
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676a:	e054      	b.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d050      	beq.n	8006816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006774:	f7fc fe98 	bl	80034a8 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	d902      	bls.n	800678a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d13d      	bne.n	8006806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d111      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ac:	d004      	beq.n	80067b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b6:	d107      	bne.n	80067c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d0:	d10f      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e017      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3b01      	subs	r3, #1
 8006814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d19b      	bne.n	800676c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000004 	.word	0x20000004

08006844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <SPI_EndRxTxTransaction+0x7c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <SPI_EndRxTxTransaction+0x80>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0d5b      	lsrs	r3, r3, #21
 800685c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800686e:	d112      	bne.n	8006896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff ff5a 	bl	8006734 <SPI_WaitFlagStateUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e00f      	b.n	80068b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3b01      	subs	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ac:	2b80      	cmp	r3, #128	; 0x80
 80068ae:	d0f2      	beq.n	8006896 <SPI_EndRxTxTransaction+0x52>
 80068b0:	e000      	b.n	80068b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80068b2:	bf00      	nop
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000004 	.word	0x20000004
 80068c4:	165e9f81 	.word	0x165e9f81

080068c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e041      	b.n	800695e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fc fc06 	bl	8003100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 fc5e 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d001      	beq.n	8006980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e04e      	b.n	8006a1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a23      	ldr	r2, [pc, #140]	; (8006a2c <HAL_TIM_Base_Start_IT+0xc4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d022      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d01d      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d018      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d013      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d00e      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <HAL_TIM_Base_Start_IT+0xd4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d009      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_TIM_Base_Start_IT+0xd8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x80>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_TIM_Base_Start_IT+0xdc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d111      	bne.n	8006a0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d010      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0201 	orr.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0a:	e007      	b.n	8006a1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40001800 	.word	0x40001800

08006a48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e041      	b.n	8006ade <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7fc fa7c 	bl	8002f6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 fb9e 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <HAL_TIM_IC_Start_IT+0x1e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	e013      	b.n	8006b2e <HAL_TIM_IC_Start_IT+0x46>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d104      	bne.n	8006b16 <HAL_TIM_IC_Start_IT+0x2e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	e00b      	b.n	8006b2e <HAL_TIM_IC_Start_IT+0x46>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d104      	bne.n	8006b26 <HAL_TIM_IC_Start_IT+0x3e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	e003      	b.n	8006b2e <HAL_TIM_IC_Start_IT+0x46>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <HAL_TIM_IC_Start_IT+0x58>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	e013      	b.n	8006b68 <HAL_TIM_IC_Start_IT+0x80>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d104      	bne.n	8006b50 <HAL_TIM_IC_Start_IT+0x68>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	e00b      	b.n	8006b68 <HAL_TIM_IC_Start_IT+0x80>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d104      	bne.n	8006b60 <HAL_TIM_IC_Start_IT+0x78>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	e003      	b.n	8006b68 <HAL_TIM_IC_Start_IT+0x80>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d102      	bne.n	8006b76 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b70:	7b7b      	ldrb	r3, [r7, #13]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d001      	beq.n	8006b7a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e0cc      	b.n	8006d14 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_IC_Start_IT+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b88:	e013      	b.n	8006bb2 <HAL_TIM_IC_Start_IT+0xca>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_IC_Start_IT+0xb2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	e00b      	b.n	8006bb2 <HAL_TIM_IC_Start_IT+0xca>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_IC_Start_IT+0xc2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	e003      	b.n	8006bb2 <HAL_TIM_IC_Start_IT+0xca>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_IC_Start_IT+0xda>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc0:	e013      	b.n	8006bea <HAL_TIM_IC_Start_IT+0x102>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_IC_Start_IT+0xea>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd0:	e00b      	b.n	8006bea <HAL_TIM_IC_Start_IT+0x102>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_IC_Start_IT+0xfa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be0:	e003      	b.n	8006bea <HAL_TIM_IC_Start_IT+0x102>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b0c      	cmp	r3, #12
 8006bee:	d841      	bhi.n	8006c74 <HAL_TIM_IC_Start_IT+0x18c>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <HAL_TIM_IC_Start_IT+0x110>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006c75 	.word	0x08006c75
 8006c04:	08006c75 	.word	0x08006c75
 8006c08:	08006c3f 	.word	0x08006c3f
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006c75 	.word	0x08006c75
 8006c14:	08006c75 	.word	0x08006c75
 8006c18:	08006c51 	.word	0x08006c51
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006c63 	.word	0x08006c63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0202 	orr.w	r2, r2, #2
 8006c3a:	60da      	str	r2, [r3, #12]
      break;
 8006c3c:	e01d      	b.n	8006c7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0204 	orr.w	r2, r2, #4
 8006c4c:	60da      	str	r2, [r3, #12]
      break;
 8006c4e:	e014      	b.n	8006c7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0208 	orr.w	r2, r2, #8
 8006c5e:	60da      	str	r2, [r3, #12]
      break;
 8006c60:	e00b      	b.n	8006c7a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0210 	orr.w	r2, r2, #16
 8006c70:	60da      	str	r2, [r3, #12]
      break;
 8006c72:	e002      	b.n	8006c7a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
      break;
 8006c78:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d148      	bne.n	8006d12 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2201      	movs	r2, #1
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fd78 	bl	800777e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a22      	ldr	r2, [pc, #136]	; (8006d1c <HAL_TIM_IC_Start_IT+0x234>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d01d      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1e      	ldr	r2, [pc, #120]	; (8006d20 <HAL_TIM_IC_Start_IT+0x238>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_TIM_IC_Start_IT+0x23c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1b      	ldr	r2, [pc, #108]	; (8006d28 <HAL_TIM_IC_Start_IT+0x240>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <HAL_TIM_IC_Start_IT+0x244>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <HAL_TIM_IC_Start_IT+0x248>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIM_IC_Start_IT+0x1f6>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <HAL_TIM_IC_Start_IT+0x24c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d111      	bne.n	8006d02 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b06      	cmp	r3, #6
 8006cee:	d010      	beq.n	8006d12 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d00:	e007      	b.n	8006d12 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40001800 	.word	0x40001800

08006d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0202 	mvn.w	r2, #2
 8006d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fc fa10 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fa02 	bl	800718c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa09 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d122      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d11b      	bne.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0204 	mvn.w	r2, #4
 8006db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fc f9e6 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9d8 	bl	800718c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9df 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d122      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d11b      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0208 	mvn.w	r2, #8
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2204      	movs	r2, #4
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fc f9bc 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f9ae 	bl	800718c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f9b5 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0210 	mvn.w	r2, #16
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2208      	movs	r2, #8
 8006e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc f992 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f984 	bl	800718c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f98b 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10e      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d107      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0201 	mvn.w	r2, #1
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fa ffac 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed4:	2b80      	cmp	r3, #128	; 0x80
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fcf6 	bl	80078d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f950 	bl	80071b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0220 	mvn.w	r2, #32
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fcc0 	bl	80078c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e088      	b.n	8007078 <HAL_TIM_IC_ConfigChannel+0x130>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f000 fa52 	bl	800742c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 020c 	bic.w	r2, r2, #12
 8006f96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6999      	ldr	r1, [r3, #24]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	619a      	str	r2, [r3, #24]
 8006faa:	e060      	b.n	800706e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d11c      	bne.n	8006fec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f000 fad6 	bl	8007572 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006fd4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6999      	ldr	r1, [r3, #24]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	021a      	lsls	r2, r3, #8
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	619a      	str	r2, [r3, #24]
 8006fea:	e040      	b.n	800706e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d11b      	bne.n	800702a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6819      	ldr	r1, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f000 fb23 	bl	800764c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 020c 	bic.w	r2, r2, #12
 8007014:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69d9      	ldr	r1, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	61da      	str	r2, [r3, #28]
 8007028:	e021      	b.n	800706e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d11c      	bne.n	800706a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6819      	ldr	r1, [r3, #0]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f000 fb40 	bl	80076c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007052:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69d9      	ldr	r1, [r3, #28]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	021a      	lsls	r2, r3, #8
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	61da      	str	r2, [r3, #28]
 8007068:	e001      	b.n	800706e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007094:	2302      	movs	r3, #2
 8007096:	e031      	b.n	80070fc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f92c 	bl	8007308 <TIM_SlaveTimer_SetConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e018      	b.n	80070fc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b0c      	cmp	r3, #12
 8007116:	d831      	bhi.n	800717c <HAL_TIM_ReadCapturedValue+0x78>
 8007118:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <HAL_TIM_ReadCapturedValue+0x1c>)
 800711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711e:	bf00      	nop
 8007120:	08007155 	.word	0x08007155
 8007124:	0800717d 	.word	0x0800717d
 8007128:	0800717d 	.word	0x0800717d
 800712c:	0800717d 	.word	0x0800717d
 8007130:	0800715f 	.word	0x0800715f
 8007134:	0800717d 	.word	0x0800717d
 8007138:	0800717d 	.word	0x0800717d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	08007169 	.word	0x08007169
 8007144:	0800717d 	.word	0x0800717d
 8007148:	0800717d 	.word	0x0800717d
 800714c:	0800717d 	.word	0x0800717d
 8007150:	08007173 	.word	0x08007173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	60fb      	str	r3, [r7, #12]

      break;
 800715c:	e00f      	b.n	800717e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	60fb      	str	r3, [r7, #12]

      break;
 8007166:	e00a      	b.n	800717e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	60fb      	str	r3, [r7, #12]

      break;
 8007170:	e005      	b.n	800717e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	60fb      	str	r3, [r7, #12]

      break;
 800717a:	e000      	b.n	800717e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800717c:	bf00      	nop
  }

  return tmpreg;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a40      	ldr	r2, [pc, #256]	; (80072dc <TIM_Base_SetConfig+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e6:	d00f      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <TIM_Base_SetConfig+0x118>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00b      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3c      	ldr	r2, [pc, #240]	; (80072e4 <TIM_Base_SetConfig+0x11c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a3b      	ldr	r2, [pc, #236]	; (80072e8 <TIM_Base_SetConfig+0x120>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3a      	ldr	r2, [pc, #232]	; (80072ec <TIM_Base_SetConfig+0x124>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <TIM_Base_SetConfig+0x114>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d02b      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007228:	d027      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <TIM_Base_SetConfig+0x118>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d023      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2b      	ldr	r2, [pc, #172]	; (80072e4 <TIM_Base_SetConfig+0x11c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d01f      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <TIM_Base_SetConfig+0x120>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01b      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a29      	ldr	r2, [pc, #164]	; (80072ec <TIM_Base_SetConfig+0x124>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d017      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a28      	ldr	r2, [pc, #160]	; (80072f0 <TIM_Base_SetConfig+0x128>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a27      	ldr	r2, [pc, #156]	; (80072f4 <TIM_Base_SetConfig+0x12c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a26      	ldr	r2, [pc, #152]	; (80072f8 <TIM_Base_SetConfig+0x130>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a25      	ldr	r2, [pc, #148]	; (80072fc <TIM_Base_SetConfig+0x134>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a24      	ldr	r2, [pc, #144]	; (8007300 <TIM_Base_SetConfig+0x138>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a23      	ldr	r2, [pc, #140]	; (8007304 <TIM_Base_SetConfig+0x13c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <TIM_Base_SetConfig+0x114>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_Base_SetConfig+0xf8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <TIM_Base_SetConfig+0x124>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d103      	bne.n	80072c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	615a      	str	r2, [r3, #20]
}
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800
 80072fc:	40001800 	.word	0x40001800
 8007300:	40001c00 	.word	0x40001c00
 8007304:	40002000 	.word	0x40002000

08007308 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f023 0307 	bic.w	r3, r3, #7
 8007336:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b70      	cmp	r3, #112	; 0x70
 8007350:	d01a      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0x80>
 8007352:	2b70      	cmp	r3, #112	; 0x70
 8007354:	d860      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 8007356:	2b60      	cmp	r3, #96	; 0x60
 8007358:	d054      	beq.n	8007404 <TIM_SlaveTimer_SetConfig+0xfc>
 800735a:	2b60      	cmp	r3, #96	; 0x60
 800735c:	d85c      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 800735e:	2b50      	cmp	r3, #80	; 0x50
 8007360:	d046      	beq.n	80073f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007362:	2b50      	cmp	r3, #80	; 0x50
 8007364:	d858      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d019      	beq.n	800739e <TIM_SlaveTimer_SetConfig+0x96>
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d854      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 800736e:	2b30      	cmp	r3, #48	; 0x30
 8007370:	d055      	beq.n	800741e <TIM_SlaveTimer_SetConfig+0x116>
 8007372:	2b30      	cmp	r3, #48	; 0x30
 8007374:	d850      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 8007376:	2b20      	cmp	r3, #32
 8007378:	d051      	beq.n	800741e <TIM_SlaveTimer_SetConfig+0x116>
 800737a:	2b20      	cmp	r3, #32
 800737c:	d84c      	bhi.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d04d      	beq.n	800741e <TIM_SlaveTimer_SetConfig+0x116>
 8007382:	2b10      	cmp	r3, #16
 8007384:	d04b      	beq.n	800741e <TIM_SlaveTimer_SetConfig+0x116>
 8007386:	e047      	b.n	8007418 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68d9      	ldr	r1, [r3, #12]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f000 f9d1 	bl	800773e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800739c:	e040      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d101      	bne.n	80073aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e03b      	b.n	8007422 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	621a      	str	r2, [r3, #32]
      break;
 80073ee:	e017      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6899      	ldr	r1, [r3, #8]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	461a      	mov	r2, r3
 80073fe:	f000 f889 	bl	8007514 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007402:	e00d      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	6899      	ldr	r1, [r3, #8]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	461a      	mov	r2, r3
 8007412:	f000 f8eb 	bl	80075ec <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007416:	e003      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	75fb      	strb	r3, [r7, #23]
      break;
 800741c:	e000      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800741e:	bf00      	nop
  }

  return status;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0201 	bic.w	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <TIM_TI1_SetConfig+0xcc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01b      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d017      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <TIM_TI1_SetConfig+0xd0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4a24      	ldr	r2, [pc, #144]	; (8007500 <TIM_TI1_SetConfig+0xd4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00f      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4a23      	ldr	r2, [pc, #140]	; (8007504 <TIM_TI1_SetConfig+0xd8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00b      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a22      	ldr	r2, [pc, #136]	; (8007508 <TIM_TI1_SetConfig+0xdc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d007      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a21      	ldr	r2, [pc, #132]	; (800750c <TIM_TI1_SetConfig+0xe0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_TI1_SetConfig+0x66>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <TIM_TI1_SetConfig+0xe4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <TIM_TI1_SetConfig+0x6a>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <TIM_TI1_SetConfig+0x6c>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0303 	bic.w	r3, r3, #3
 80074a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e003      	b.n	80074b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f023 030a 	bic.w	r3, r3, #10
 80074d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f003 030a 	and.w	r3, r3, #10
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40010400 	.word	0x40010400
 800750c:	40014000 	.word	0x40014000
 8007510:	40001800 	.word	0x40001800

08007514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 030a 	bic.w	r3, r3, #10
 8007550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007572:	b480      	push	{r7}
 8007574:	b087      	sub	sp, #28
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	f023 0210 	bic.w	r2, r3, #16
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	031b      	lsls	r3, r3, #12
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	621a      	str	r2, [r3, #32]
}
 80075e0:	bf00      	nop
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 0210 	bic.w	r2, r3, #16
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	031b      	lsls	r3, r3, #12
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	b2db      	uxtb	r3, r3
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800769c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007702:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	031b      	lsls	r3, r3, #12
 8007708:	b29b      	uxth	r3, r3
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	031b      	lsls	r3, r3, #12
 800771c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800773e:	b480      	push	{r7}
 8007740:	b087      	sub	sp, #28
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007758:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	021a      	lsls	r2, r3, #8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	431a      	orrs	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	609a      	str	r2, [r3, #8]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2201      	movs	r2, #1
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1a      	ldr	r2, [r3, #32]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	43db      	mvns	r3, r3
 80077a0:	401a      	ands	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f003 031f 	and.w	r3, r3, #31
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	621a      	str	r2, [r3, #32]
}
 80077bc:	bf00      	nop
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077dc:	2302      	movs	r3, #2
 80077de:	e05a      	b.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a21      	ldr	r2, [pc, #132]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d022      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d01d      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1a      	ldr	r2, [pc, #104]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a18      	ldr	r2, [pc, #96]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a15      	ldr	r2, [pc, #84]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10c      	bne.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	4313      	orrs	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40010400 	.word	0x40010400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40001800 	.word	0x40001800

080078c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e033      	b.n	8007962 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fb fcbc 	bl	800328c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f90b 	bl	8007b38 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007940:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007950:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b08a      	sub	sp, #40	; 0x28
 800796e:	af02      	add	r7, sp, #8
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	d17c      	bne.n	8007a80 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_USART_Transmit+0x28>
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e075      	b.n	8007a82 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_USART_Transmit+0x3a>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e06e      	b.n	8007a82 <HAL_USART_Transmit+0x118>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2212      	movs	r2, #18
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079ba:	f7fb fd75 	bl	80034a8 <HAL_GetTick>
 80079be:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	88fa      	ldrh	r2, [r7, #6]
 80079c4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	88fa      	ldrh	r2, [r7, #6]
 80079ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d4:	d108      	bne.n	80079e8 <HAL_USART_Transmit+0x7e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	e003      	b.n	80079f0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80079f0:	e02a      	b.n	8007a48 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f844 	bl	8007a8a <USART_WaitOnFlagUntilTimeout>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e03a      	b.n	8007a82 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a20:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	3302      	adds	r3, #2
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	e007      	b.n	8007a3a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1cf      	bne.n	80079f2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2140      	movs	r1, #64	; 0x40
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f814 	bl	8007a8a <USART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e00a      	b.n	8007a82 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e000      	b.n	8007a82 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007a9a:	e038      	b.n	8007b0e <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d034      	beq.n	8007b0e <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d007      	beq.n	8007aba <USART_WaitOnFlagUntilTimeout+0x30>
 8007aaa:	f7fb fcfd 	bl	80034a8 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d229      	bcs.n	8007b0e <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac8:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0220 	bic.w	r2, r2, #32
 8007ad8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ae8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e00f      	b.n	8007b2e <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d0b7      	beq.n	8007a9c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b3c:	b0c6      	sub	sp, #280	; 0x118
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68d9      	ldr	r1, [r3, #12]
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	f021 030c 	bic.w	r3, r1, #12
 8007b5c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b7a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b80:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007b82:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007b92:	431a      	orrs	r2, r3
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bac:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007bc2:	f023 030c 	bic.w	r3, r3, #12
 8007bc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6959      	ldr	r1, [r3, #20]
 8007c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8007c0c:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8007c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4b8b      	ldr	r3, [pc, #556]	; (8007e44 <USART_SetConfig+0x30c>)
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d006      	beq.n	8007c28 <USART_SetConfig+0xf0>
 8007c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b89      	ldr	r3, [pc, #548]	; (8007e48 <USART_SetConfig+0x310>)
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f040 8114 	bne.w	8007e50 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7fd f8a2 	bl	8004d70 <HAL_RCC_GetPCLK2Freq>
 8007c2c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007c30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c3a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007c3e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	6739      	str	r1, [r7, #112]	; 0x70
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007c4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007c52:	4621      	mov	r1, r4
 8007c54:	eb12 0801 	adds.w	r8, r2, r1
 8007c58:	4629      	mov	r1, r5
 8007c5a:	eb43 0901 	adc.w	r9, r3, r1
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c72:	4690      	mov	r8, r2
 8007c74:	4699      	mov	r9, r3
 8007c76:	4623      	mov	r3, r4
 8007c78:	eb18 0303 	adds.w	r3, r8, r3
 8007c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c80:	462b      	mov	r3, r5
 8007c82:	eb49 0303 	adc.w	r3, r9, r3
 8007c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c96:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007c9a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	18db      	adds	r3, r3, r3
 8007ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	eb42 0303 	adc.w	r3, r2, r3
 8007caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007cb0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007cb4:	f7f8 ffe8 	bl	8000c88 <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4b63      	ldr	r3, [pc, #396]	; (8007e4c <USART_SetConfig+0x314>)
 8007cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	011c      	lsls	r4, r3, #4
 8007cc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cd0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cd4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	1891      	adds	r1, r2, r2
 8007cde:	6639      	str	r1, [r7, #96]	; 0x60
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ce8:	4641      	mov	r1, r8
 8007cea:	1851      	adds	r1, r2, r1
 8007cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cee:	4649      	mov	r1, r9
 8007cf0:	414b      	adcs	r3, r1
 8007cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007d00:	4659      	mov	r1, fp
 8007d02:	00cb      	lsls	r3, r1, #3
 8007d04:	4651      	mov	r1, sl
 8007d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d0a:	4651      	mov	r1, sl
 8007d0c:	00ca      	lsls	r2, r1, #3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	4619      	mov	r1, r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	4642      	mov	r2, r8
 8007d16:	189b      	adds	r3, r3, r2
 8007d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	460a      	mov	r2, r1
 8007d20:	eb42 0303 	adc.w	r3, r2, r3
 8007d24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d34:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d38:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	18db      	adds	r3, r3, r3
 8007d40:	653b      	str	r3, [r7, #80]	; 0x50
 8007d42:	4613      	mov	r3, r2
 8007d44:	eb42 0303 	adc.w	r3, r2, r3
 8007d48:	657b      	str	r3, [r7, #84]	; 0x54
 8007d4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d4e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d52:	f7f8 ff99 	bl	8000c88 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <USART_SetConfig+0x314>)
 8007d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	2264      	movs	r2, #100	; 0x64
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	1acb      	subs	r3, r1, r3
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d72:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <USART_SetConfig+0x314>)
 8007d74:	fba3 2302 	umull	r2, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d80:	441c      	add	r4, r3
 8007d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007da4:	4641      	mov	r1, r8
 8007da6:	1851      	adds	r1, r2, r1
 8007da8:	6439      	str	r1, [r7, #64]	; 0x40
 8007daa:	4649      	mov	r1, r9
 8007dac:	414b      	adcs	r3, r1
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	00cb      	lsls	r3, r1, #3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	00ca      	lsls	r2, r1, #3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	460a      	mov	r2, r1
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	18db      	adds	r3, r3, r3
 8007dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dfe:	4613      	mov	r3, r2
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e0e:	f7f8 ff3b 	bl	8000c88 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <USART_SetConfig+0x314>)
 8007e18:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	2164      	movs	r1, #100	; 0x64
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	3332      	adds	r3, #50	; 0x32
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <USART_SetConfig+0x314>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	f003 0207 	and.w	r2, r3, #7
 8007e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4422      	add	r2, r4
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	e109      	b.n	8008056 <USART_SetConfig+0x51e>
 8007e42:	bf00      	nop
 8007e44:	40011000 	.word	0x40011000
 8007e48:	40011400 	.word	0x40011400
 8007e4c:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e50:	f7fc ff7a 	bl	8004d48 <HAL_RCC_GetPCLK1Freq>
 8007e54:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007e58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e62:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e66:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	1891      	adds	r1, r2, r2
 8007e70:	6339      	str	r1, [r7, #48]	; 0x30
 8007e72:	415b      	adcs	r3, r3
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
 8007e76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	1854      	adds	r4, r2, r1
 8007e7e:	4649      	mov	r1, r9
 8007e80:	eb43 0501 	adc.w	r5, r3, r1
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	00eb      	lsls	r3, r5, #3
 8007e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e92:	00e2      	lsls	r2, r4, #3
 8007e94:	4614      	mov	r4, r2
 8007e96:	461d      	mov	r5, r3
 8007e98:	4643      	mov	r3, r8
 8007e9a:	18e3      	adds	r3, r4, r3
 8007e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	eb45 0303 	adc.w	r3, r5, r3
 8007ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eb6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007eba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	18db      	adds	r3, r3, r3
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	eb42 0303 	adc.w	r3, r2, r3
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ed0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ed4:	f7f8 fed8 	bl	8000c88 <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4b61      	ldr	r3, [pc, #388]	; (8008064 <USART_SetConfig+0x52c>)
 8007ede:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	011c      	lsls	r4, r3, #4
 8007ee6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ef0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ef4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	1891      	adds	r1, r2, r2
 8007efe:	6239      	str	r1, [r7, #32]
 8007f00:	415b      	adcs	r3, r3
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
 8007f04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f08:	4641      	mov	r1, r8
 8007f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0b01 	adc.w	fp, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f28:	4692      	mov	sl, r2
 8007f2a:	469b      	mov	fp, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f36:	464b      	mov	r3, r9
 8007f38:	eb4b 0303 	adc.w	r3, fp, r3
 8007f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f50:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007f54:	460b      	mov	r3, r1
 8007f56:	18db      	adds	r3, r3, r3
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f66:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f6a:	f7f8 fe8d 	bl	8000c88 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <USART_SetConfig+0x52c>)
 8007f76:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	2264      	movs	r2, #100	; 0x64
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f8a:	4b36      	ldr	r3, [pc, #216]	; (8008064 <USART_SetConfig+0x52c>)
 8007f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f98:	441c      	add	r4, r3
 8007f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fac:	4642      	mov	r2, r8
 8007fae:	464b      	mov	r3, r9
 8007fb0:	1891      	adds	r1, r2, r2
 8007fb2:	6139      	str	r1, [r7, #16]
 8007fb4:	415b      	adcs	r3, r3
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	1851      	adds	r1, r2, r1
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	414b      	adcs	r3, r1
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	00cb      	lsls	r3, r1, #3
 8007fd8:	4651      	mov	r1, sl
 8007fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fde:	4651      	mov	r1, sl
 8007fe0:	00ca      	lsls	r2, r1, #3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4642      	mov	r2, r8
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	460a      	mov	r2, r1
 8007ff4:	eb42 0303 	adc.w	r3, r2, r3
 8007ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	67bb      	str	r3, [r7, #120]	; 0x78
 8008006:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008008:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800800c:	460b      	mov	r3, r1
 800800e:	18db      	adds	r3, r3, r3
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	eb42 0303 	adc.w	r3, r2, r3
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800801e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008022:	f7f8 fe31 	bl	8000c88 <__aeabi_uldivmod>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4b0e      	ldr	r3, [pc, #56]	; (8008064 <USART_SetConfig+0x52c>)
 800802c:	fba3 1302 	umull	r1, r3, r3, r2
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	2164      	movs	r1, #100	; 0x64
 8008034:	fb01 f303 	mul.w	r3, r1, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	3332      	adds	r3, #50	; 0x32
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <USART_SetConfig+0x52c>)
 8008040:	fba2 2303 	umull	r2, r3, r2, r3
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f003 0207 	and.w	r2, r3, #7
 800804a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4422      	add	r2, r4
 8008052:	609a      	str	r2, [r3, #8]
  }
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008062:	bf00      	nop
 8008064:	51eb851f 	.word	0x51eb851f

08008068 <MX_FATFS_Init>:
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
 800806c:	4904      	ldr	r1, [pc, #16]	; (8008080 <MX_FATFS_Init+0x18>)
 800806e:	4805      	ldr	r0, [pc, #20]	; (8008084 <MX_FATFS_Init+0x1c>)
 8008070:	f002 ffd4 	bl	800b01c <FATFS_LinkDriver>
 8008074:	4603      	mov	r3, r0
 8008076:	461a      	mov	r2, r3
 8008078:	4b03      	ldr	r3, [pc, #12]	; (8008088 <MX_FATFS_Init+0x20>)
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	bf00      	nop
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2000aef8 	.word	0x2000aef8
 8008084:	20000010 	.word	0x20000010
 8008088:	2000aef4 	.word	0x2000aef4

0800808c <get_fattime>:
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
 8008090:	2300      	movs	r3, #0
 8008092:	4618      	mov	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USER_initialize>:
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f9d7 	bl	800845c <USER_SPI_initialize>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4618      	mov	r0, r3
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USER_status>:
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	71fb      	strb	r3, [r7, #7]
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fab5 	bl	8008634 <USER_SPI_status>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USER_read>:
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]
 80080e4:	7bf8      	ldrb	r0, [r7, #15]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	f000 fab8 	bl	8008660 <USER_SPI_read>
 80080f0:	4603      	mov	r3, r0
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USER_write>:
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
 800810a:	7bf8      	ldrb	r0, [r7, #15]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	f000 fb0b 	bl	800872c <USER_SPI_write>
 8008116:	4603      	mov	r3, r0
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USER_ioctl>:
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	603a      	str	r2, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
 800812c:	460b      	mov	r3, r1
 800812e:	71bb      	strb	r3, [r7, #6]
 8008130:	79b9      	ldrb	r1, [r7, #6]
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fb74 	bl	8008824 <USER_SPI_ioctl>
 800813c:	4603      	mov	r3, r0
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <SPI_Timer_On>:
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	f7fb f9aa 	bl	80034a8 <HAL_GetTick>
 8008154:	4603      	mov	r3, r0
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <SPI_Timer_On+0x20>)
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	4a04      	ldr	r2, [pc, #16]	; (800816c <SPI_Timer_On+0x24>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	2000af00 	.word	0x2000af00
 800816c:	2000af04 	.word	0x2000af04

08008170 <SPI_Timer_Status>:
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
 8008174:	f7fb f998 	bl	80034a8 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <SPI_Timer_Status+0x24>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	4b05      	ldr	r3, [pc, #20]	; (8008198 <SPI_Timer_Status+0x28>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	bf34      	ite	cc
 8008188:	2301      	movcc	r3, #1
 800818a:	2300      	movcs	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4618      	mov	r0, r3
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	2000af00 	.word	0x2000af00
 8008198:	2000af04 	.word	0x2000af04

0800819c <xchg_spi>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	4603      	mov	r3, r0
 80081a4:	71fb      	strb	r3, [r7, #7]
 80081a6:	f107 020f 	add.w	r2, r7, #15
 80081aa:	1df9      	adds	r1, r7, #7
 80081ac:	2332      	movs	r3, #50	; 0x32
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2301      	movs	r3, #1
 80081b2:	4804      	ldr	r0, [pc, #16]	; (80081c4 <xchg_spi+0x28>)
 80081b4:	f7fe f91c 	bl	80063f0 <HAL_SPI_TransmitReceive>
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	2000ac40 	.word	0x2000ac40

080081c8 <rcvr_spi_multi>:
 80081c8:	b590      	push	{r4, r7, lr}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e00a      	b.n	80081ee <rcvr_spi_multi+0x26>
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	18d4      	adds	r4, r2, r3
 80081de:	20ff      	movs	r0, #255	; 0xff
 80081e0:	f7ff ffdc 	bl	800819c <xchg_spi>
 80081e4:	4603      	mov	r3, r0
 80081e6:	7023      	strb	r3, [r4, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d3f0      	bcc.n	80081d8 <rcvr_spi_multi+0x10>
 80081f6:	bf00      	nop
 80081f8:	bf00      	nop
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}

08008200 <xmit_spi_multi>:
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	b29a      	uxth	r2, r3
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	4803      	ldr	r0, [pc, #12]	; (8008224 <xmit_spi_multi+0x24>)
 8008216:	f7fd ffaf 	bl	8006178 <HAL_SPI_Transmit>
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2000ac40 	.word	0x2000ac40

08008228 <wait_ready>:
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	f7fb f93a 	bl	80034a8 <HAL_GetTick>
 8008234:	6178      	str	r0, [r7, #20]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	20ff      	movs	r0, #255	; 0xff
 800823c:	f7ff ffae 	bl	800819c <xchg_spi>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2bff      	cmp	r3, #255	; 0xff
 8008248:	d007      	beq.n	800825a <wait_ready+0x32>
 800824a:	f7fb f92d 	bl	80034a8 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d8ef      	bhi.n	800823a <wait_ready+0x12>
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2bff      	cmp	r3, #255	; 0xff
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <despiselect>:
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
 8008274:	2201      	movs	r2, #1
 8008276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800827a:	4804      	ldr	r0, [pc, #16]	; (800828c <despiselect+0x1c>)
 800827c:	f7fc fc58 	bl	8004b30 <HAL_GPIO_WritePin>
 8008280:	20ff      	movs	r0, #255	; 0xff
 8008282:	f7ff ff8b 	bl	800819c <xchg_spi>
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40020400 	.word	0x40020400

08008290 <spiselect>:
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
 8008294:	2200      	movs	r2, #0
 8008296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800829a:	480a      	ldr	r0, [pc, #40]	; (80082c4 <spiselect+0x34>)
 800829c:	f7fc fc48 	bl	8004b30 <HAL_GPIO_WritePin>
 80082a0:	20ff      	movs	r0, #255	; 0xff
 80082a2:	f7ff ff7b 	bl	800819c <xchg_spi>
 80082a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082aa:	f7ff ffbd 	bl	8008228 <wait_ready>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <spiselect+0x28>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e002      	b.n	80082be <spiselect+0x2e>
 80082b8:	f7ff ffda 	bl	8008270 <despiselect>
 80082bc:	2300      	movs	r3, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	40020400 	.word	0x40020400

080082c8 <rcvr_datablock>:
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	20c8      	movs	r0, #200	; 0xc8
 80082d4:	f7ff ff38 	bl	8008148 <SPI_Timer_On>
 80082d8:	20ff      	movs	r0, #255	; 0xff
 80082da:	f7ff ff5f 	bl	800819c <xchg_spi>
 80082de:	4603      	mov	r3, r0
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2bff      	cmp	r3, #255	; 0xff
 80082e6:	d104      	bne.n	80082f2 <rcvr_datablock+0x2a>
 80082e8:	f7ff ff42 	bl	8008170 <SPI_Timer_Status>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f2      	bne.n	80082d8 <rcvr_datablock+0x10>
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2bfe      	cmp	r3, #254	; 0xfe
 80082f6:	d001      	beq.n	80082fc <rcvr_datablock+0x34>
 80082f8:	2300      	movs	r3, #0
 80082fa:	e00a      	b.n	8008312 <rcvr_datablock+0x4a>
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff ff62 	bl	80081c8 <rcvr_spi_multi>
 8008304:	20ff      	movs	r0, #255	; 0xff
 8008306:	f7ff ff49 	bl	800819c <xchg_spi>
 800830a:	20ff      	movs	r0, #255	; 0xff
 800830c:	f7ff ff46 	bl	800819c <xchg_spi>
 8008310:	2301      	movs	r3, #1
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <xmit_datablock>:
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
 8008326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800832a:	f7ff ff7d 	bl	8008228 <wait_ready>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <xmit_datablock+0x1e>
 8008334:	2300      	movs	r3, #0
 8008336:	e01e      	b.n	8008376 <xmit_datablock+0x5c>
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff ff2e 	bl	800819c <xchg_spi>
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	2bfd      	cmp	r3, #253	; 0xfd
 8008344:	d016      	beq.n	8008374 <xmit_datablock+0x5a>
 8008346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff ff58 	bl	8008200 <xmit_spi_multi>
 8008350:	20ff      	movs	r0, #255	; 0xff
 8008352:	f7ff ff23 	bl	800819c <xchg_spi>
 8008356:	20ff      	movs	r0, #255	; 0xff
 8008358:	f7ff ff20 	bl	800819c <xchg_spi>
 800835c:	20ff      	movs	r0, #255	; 0xff
 800835e:	f7ff ff1d 	bl	800819c <xchg_spi>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2b05      	cmp	r3, #5
 800836e:	d001      	beq.n	8008374 <xmit_datablock+0x5a>
 8008370:	2300      	movs	r3, #0
 8008372:	e000      	b.n	8008376 <xmit_datablock+0x5c>
 8008374:	2301      	movs	r3, #1
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <send_cmd>:
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	4603      	mov	r3, r0
 8008386:	6039      	str	r1, [r7, #0]
 8008388:	71fb      	strb	r3, [r7, #7]
 800838a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da0e      	bge.n	80083b0 <send_cmd+0x32>
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008398:	71fb      	strb	r3, [r7, #7]
 800839a:	2100      	movs	r1, #0
 800839c:	2037      	movs	r0, #55	; 0x37
 800839e:	f7ff ffee 	bl	800837e <send_cmd>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d901      	bls.n	80083b0 <send_cmd+0x32>
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	e051      	b.n	8008454 <send_cmd+0xd6>
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	2b0c      	cmp	r3, #12
 80083b4:	d008      	beq.n	80083c8 <send_cmd+0x4a>
 80083b6:	f7ff ff5b 	bl	8008270 <despiselect>
 80083ba:	f7ff ff69 	bl	8008290 <spiselect>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <send_cmd+0x4a>
 80083c4:	23ff      	movs	r3, #255	; 0xff
 80083c6:	e045      	b.n	8008454 <send_cmd+0xd6>
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fee3 	bl	800819c <xchg_spi>
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fedd 	bl	800819c <xchg_spi>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	0c1b      	lsrs	r3, r3, #16
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fed7 	bl	800819c <xchg_spi>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fed1 	bl	800819c <xchg_spi>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fecc 	bl	800819c <xchg_spi>
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <send_cmd+0x94>
 800840e:	2395      	movs	r3, #149	; 0x95
 8008410:	73fb      	strb	r3, [r7, #15]
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d101      	bne.n	800841c <send_cmd+0x9e>
 8008418:	2387      	movs	r3, #135	; 0x87
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff febc 	bl	800819c <xchg_spi>
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b0c      	cmp	r3, #12
 8008428:	d102      	bne.n	8008430 <send_cmd+0xb2>
 800842a:	20ff      	movs	r0, #255	; 0xff
 800842c:	f7ff feb6 	bl	800819c <xchg_spi>
 8008430:	230a      	movs	r3, #10
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	20ff      	movs	r0, #255	; 0xff
 8008436:	f7ff feb1 	bl	800819c <xchg_spi>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]
 800843e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da05      	bge.n	8008452 <send_cmd+0xd4>
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	3b01      	subs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f0      	bne.n	8008434 <send_cmd+0xb6>
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USER_SPI_initialize>:
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
 8008466:	79fb      	ldrb	r3, [r7, #7]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USER_SPI_initialize+0x14>
 800846c:	2301      	movs	r3, #1
 800846e:	e0d6      	b.n	800861e <USER_SPI_initialize+0x1c2>
 8008470:	4b6d      	ldr	r3, [pc, #436]	; (8008628 <USER_SPI_initialize+0x1cc>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <USER_SPI_initialize+0x2a>
 800847e:	4b6a      	ldr	r3, [pc, #424]	; (8008628 <USER_SPI_initialize+0x1cc>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	e0cb      	b.n	800861e <USER_SPI_initialize+0x1c2>
 8008486:	4b69      	ldr	r3, [pc, #420]	; (800862c <USER_SPI_initialize+0x1d0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008490:	4b66      	ldr	r3, [pc, #408]	; (800862c <USER_SPI_initialize+0x1d0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	230a      	movs	r3, #10
 800849c:	73fb      	strb	r3, [r7, #15]
 800849e:	e005      	b.n	80084ac <USER_SPI_initialize+0x50>
 80084a0:	20ff      	movs	r0, #255	; 0xff
 80084a2:	f7ff fe7b 	bl	800819c <xchg_spi>
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f6      	bne.n	80084a0 <USER_SPI_initialize+0x44>
 80084b2:	2300      	movs	r3, #0
 80084b4:	737b      	strb	r3, [r7, #13]
 80084b6:	2100      	movs	r1, #0
 80084b8:	2000      	movs	r0, #0
 80084ba:	f7ff ff60 	bl	800837e <send_cmd>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	f040 808b 	bne.w	80085dc <USER_SPI_initialize+0x180>
 80084c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084ca:	f7ff fe3d 	bl	8008148 <SPI_Timer_On>
 80084ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084d2:	2008      	movs	r0, #8
 80084d4:	f7ff ff53 	bl	800837e <send_cmd>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d151      	bne.n	8008582 <USER_SPI_initialize+0x126>
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
 80084e2:	e00d      	b.n	8008500 <USER_SPI_initialize+0xa4>
 80084e4:	7bfc      	ldrb	r4, [r7, #15]
 80084e6:	20ff      	movs	r0, #255	; 0xff
 80084e8:	f7ff fe58 	bl	800819c <xchg_spi>
 80084ec:	4603      	mov	r3, r0
 80084ee:	461a      	mov	r2, r3
 80084f0:	f104 0310 	add.w	r3, r4, #16
 80084f4:	443b      	add	r3, r7
 80084f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	3301      	adds	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d9ee      	bls.n	80084e4 <USER_SPI_initialize+0x88>
 8008506:	7abb      	ldrb	r3, [r7, #10]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d167      	bne.n	80085dc <USER_SPI_initialize+0x180>
 800850c:	7afb      	ldrb	r3, [r7, #11]
 800850e:	2baa      	cmp	r3, #170	; 0xaa
 8008510:	d164      	bne.n	80085dc <USER_SPI_initialize+0x180>
 8008512:	bf00      	nop
 8008514:	f7ff fe2c 	bl	8008170 <SPI_Timer_Status>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <USER_SPI_initialize+0xd2>
 800851e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008522:	20a9      	movs	r0, #169	; 0xa9
 8008524:	f7ff ff2b 	bl	800837e <send_cmd>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1f2      	bne.n	8008514 <USER_SPI_initialize+0xb8>
 800852e:	f7ff fe1f 	bl	8008170 <SPI_Timer_Status>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d051      	beq.n	80085dc <USER_SPI_initialize+0x180>
 8008538:	2100      	movs	r1, #0
 800853a:	203a      	movs	r0, #58	; 0x3a
 800853c:	f7ff ff1f 	bl	800837e <send_cmd>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d14a      	bne.n	80085dc <USER_SPI_initialize+0x180>
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
 800854a:	e00d      	b.n	8008568 <USER_SPI_initialize+0x10c>
 800854c:	7bfc      	ldrb	r4, [r7, #15]
 800854e:	20ff      	movs	r0, #255	; 0xff
 8008550:	f7ff fe24 	bl	800819c <xchg_spi>
 8008554:	4603      	mov	r3, r0
 8008556:	461a      	mov	r2, r3
 8008558:	f104 0310 	add.w	r3, r4, #16
 800855c:	443b      	add	r3, r7
 800855e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	3301      	adds	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d9ee      	bls.n	800854c <USER_SPI_initialize+0xf0>
 800856e:	7a3b      	ldrb	r3, [r7, #8]
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <USER_SPI_initialize+0x120>
 8008578:	230c      	movs	r3, #12
 800857a:	e000      	b.n	800857e <USER_SPI_initialize+0x122>
 800857c:	2304      	movs	r3, #4
 800857e:	737b      	strb	r3, [r7, #13]
 8008580:	e02c      	b.n	80085dc <USER_SPI_initialize+0x180>
 8008582:	2100      	movs	r1, #0
 8008584:	20a9      	movs	r0, #169	; 0xa9
 8008586:	f7ff fefa 	bl	800837e <send_cmd>
 800858a:	4603      	mov	r3, r0
 800858c:	2b01      	cmp	r3, #1
 800858e:	d804      	bhi.n	800859a <USER_SPI_initialize+0x13e>
 8008590:	2302      	movs	r3, #2
 8008592:	737b      	strb	r3, [r7, #13]
 8008594:	23a9      	movs	r3, #169	; 0xa9
 8008596:	73bb      	strb	r3, [r7, #14]
 8008598:	e003      	b.n	80085a2 <USER_SPI_initialize+0x146>
 800859a:	2301      	movs	r3, #1
 800859c:	737b      	strb	r3, [r7, #13]
 800859e:	2301      	movs	r3, #1
 80085a0:	73bb      	strb	r3, [r7, #14]
 80085a2:	bf00      	nop
 80085a4:	f7ff fde4 	bl	8008170 <SPI_Timer_Status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <USER_SPI_initialize+0x162>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fee3 	bl	800837e <send_cmd>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f2      	bne.n	80085a4 <USER_SPI_initialize+0x148>
 80085be:	f7ff fdd7 	bl	8008170 <SPI_Timer_Status>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <USER_SPI_initialize+0x17c>
 80085c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085cc:	2010      	movs	r0, #16
 80085ce:	f7ff fed6 	bl	800837e <send_cmd>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USER_SPI_initialize+0x180>
 80085d8:	2300      	movs	r3, #0
 80085da:	737b      	strb	r3, [r7, #13]
 80085dc:	4a14      	ldr	r2, [pc, #80]	; (8008630 <USER_SPI_initialize+0x1d4>)
 80085de:	7b7b      	ldrb	r3, [r7, #13]
 80085e0:	7013      	strb	r3, [r2, #0]
 80085e2:	f7ff fe45 	bl	8008270 <despiselect>
 80085e6:	7b7b      	ldrb	r3, [r7, #13]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d012      	beq.n	8008612 <USER_SPI_initialize+0x1b6>
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <USER_SPI_initialize+0x1d0>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085f6:	4b0d      	ldr	r3, [pc, #52]	; (800862c <USER_SPI_initialize+0x1d0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0210 	orr.w	r2, r2, #16
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <USER_SPI_initialize+0x1cc>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	b2da      	uxtb	r2, r3
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <USER_SPI_initialize+0x1cc>)
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	e002      	b.n	8008618 <USER_SPI_initialize+0x1bc>
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <USER_SPI_initialize+0x1cc>)
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	4b03      	ldr	r3, [pc, #12]	; (8008628 <USER_SPI_initialize+0x1cc>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	bd90      	pop	{r4, r7, pc}
 8008626:	bf00      	nop
 8008628:	20000024 	.word	0x20000024
 800862c:	2000ac40 	.word	0x2000ac40
 8008630:	2000aefc 	.word	0x2000aefc

08008634 <USER_SPI_status>:
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	71fb      	strb	r3, [r7, #7]
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <USER_SPI_status+0x14>
 8008644:	2301      	movs	r3, #1
 8008646:	e002      	b.n	800864e <USER_SPI_status+0x1a>
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <USER_SPI_status+0x28>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000024 	.word	0x20000024

08008660 <USER_SPI_read>:
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <USER_SPI_read+0x1c>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <USER_SPI_read+0x20>
 800867c:	2304      	movs	r3, #4
 800867e:	e04d      	b.n	800871c <USER_SPI_read+0xbc>
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <USER_SPI_read+0xc4>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <USER_SPI_read+0x32>
 800868e:	2303      	movs	r3, #3
 8008690:	e044      	b.n	800871c <USER_SPI_read+0xbc>
 8008692:	4b25      	ldr	r3, [pc, #148]	; (8008728 <USER_SPI_read+0xc8>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <USER_SPI_read+0x44>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	607b      	str	r3, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d111      	bne.n	80086ce <USER_SPI_read+0x6e>
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	2011      	movs	r0, #17
 80086ae:	f7ff fe66 	bl	800837e <send_cmd>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d129      	bne.n	800870c <USER_SPI_read+0xac>
 80086b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086bc:	68b8      	ldr	r0, [r7, #8]
 80086be:	f7ff fe03 	bl	80082c8 <rcvr_datablock>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d021      	beq.n	800870c <USER_SPI_read+0xac>
 80086c8:	2300      	movs	r3, #0
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	e01e      	b.n	800870c <USER_SPI_read+0xac>
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	2012      	movs	r0, #18
 80086d2:	f7ff fe54 	bl	800837e <send_cmd>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d117      	bne.n	800870c <USER_SPI_read+0xac>
 80086dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086e0:	68b8      	ldr	r0, [r7, #8]
 80086e2:	f7ff fdf1 	bl	80082c8 <rcvr_datablock>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <USER_SPI_read+0xa2>
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086f2:	60bb      	str	r3, [r7, #8]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1ed      	bne.n	80086dc <USER_SPI_read+0x7c>
 8008700:	e000      	b.n	8008704 <USER_SPI_read+0xa4>
 8008702:	bf00      	nop
 8008704:	2100      	movs	r1, #0
 8008706:	200c      	movs	r0, #12
 8008708:	f7ff fe39 	bl	800837e <send_cmd>
 800870c:	f7ff fdb0 	bl	8008270 <despiselect>
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	bf14      	ite	ne
 8008716:	2301      	movne	r3, #1
 8008718:	2300      	moveq	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000024 	.word	0x20000024
 8008728:	2000aefc 	.word	0x2000aefc

0800872c <USER_SPI_write>:
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d102      	bne.n	8008748 <USER_SPI_write+0x1c>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <USER_SPI_write+0x20>
 8008748:	2304      	movs	r3, #4
 800874a:	e063      	b.n	8008814 <USER_SPI_write+0xe8>
 800874c:	4b33      	ldr	r3, [pc, #204]	; (800881c <USER_SPI_write+0xf0>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <USER_SPI_write+0x32>
 800875a:	2303      	movs	r3, #3
 800875c:	e05a      	b.n	8008814 <USER_SPI_write+0xe8>
 800875e:	4b2f      	ldr	r3, [pc, #188]	; (800881c <USER_SPI_write+0xf0>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <USER_SPI_write+0x44>
 800876c:	2302      	movs	r3, #2
 800876e:	e051      	b.n	8008814 <USER_SPI_write+0xe8>
 8008770:	4b2b      	ldr	r3, [pc, #172]	; (8008820 <USER_SPI_write+0xf4>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d102      	bne.n	8008782 <USER_SPI_write+0x56>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	025b      	lsls	r3, r3, #9
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d110      	bne.n	80087aa <USER_SPI_write+0x7e>
 8008788:	6879      	ldr	r1, [r7, #4]
 800878a:	2018      	movs	r0, #24
 800878c:	f7ff fdf7 	bl	800837e <send_cmd>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d136      	bne.n	8008804 <USER_SPI_write+0xd8>
 8008796:	21fe      	movs	r1, #254	; 0xfe
 8008798:	68b8      	ldr	r0, [r7, #8]
 800879a:	f7ff fdbe 	bl	800831a <xmit_datablock>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02f      	beq.n	8008804 <USER_SPI_write+0xd8>
 80087a4:	2300      	movs	r3, #0
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	e02c      	b.n	8008804 <USER_SPI_write+0xd8>
 80087aa:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <USER_SPI_write+0xf4>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 0306 	and.w	r3, r3, #6
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <USER_SPI_write+0x92>
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	2097      	movs	r0, #151	; 0x97
 80087ba:	f7ff fde0 	bl	800837e <send_cmd>
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	2019      	movs	r0, #25
 80087c2:	f7ff fddc 	bl	800837e <send_cmd>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11b      	bne.n	8008804 <USER_SPI_write+0xd8>
 80087cc:	21fc      	movs	r1, #252	; 0xfc
 80087ce:	68b8      	ldr	r0, [r7, #8]
 80087d0:	f7ff fda3 	bl	800831a <xmit_datablock>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <USER_SPI_write+0xc4>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80087e0:	60bb      	str	r3, [r7, #8]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1ee      	bne.n	80087cc <USER_SPI_write+0xa0>
 80087ee:	e000      	b.n	80087f2 <USER_SPI_write+0xc6>
 80087f0:	bf00      	nop
 80087f2:	21fd      	movs	r1, #253	; 0xfd
 80087f4:	2000      	movs	r0, #0
 80087f6:	f7ff fd90 	bl	800831a <xmit_datablock>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <USER_SPI_write+0xd8>
 8008800:	2301      	movs	r3, #1
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	f7ff fd34 	bl	8008270 <despiselect>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	bf14      	ite	ne
 800880e:	2301      	movne	r3, #1
 8008810:	2300      	moveq	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000024 	.word	0x20000024
 8008820:	2000aefc 	.word	0x2000aefc

08008824 <USER_SPI_ioctl>:
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	; 0x30
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	603a      	str	r2, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
 8008830:	460b      	mov	r3, r1
 8008832:	71bb      	strb	r3, [r7, #6]
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USER_SPI_ioctl+0x1a>
 800883a:	2304      	movs	r3, #4
 800883c:	e15a      	b.n	8008af4 <USER_SPI_ioctl+0x2d0>
 800883e:	4baf      	ldr	r3, [pc, #700]	; (8008afc <USER_SPI_ioctl+0x2d8>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <USER_SPI_ioctl+0x2c>
 800884c:	2303      	movs	r3, #3
 800884e:	e151      	b.n	8008af4 <USER_SPI_ioctl+0x2d0>
 8008850:	2301      	movs	r3, #1
 8008852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008856:	79bb      	ldrb	r3, [r7, #6]
 8008858:	2b04      	cmp	r3, #4
 800885a:	f200 8136 	bhi.w	8008aca <USER_SPI_ioctl+0x2a6>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <USER_SPI_ioctl+0x40>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	08008879 	.word	0x08008879
 8008868:	0800888d 	.word	0x0800888d
 800886c:	08008acb 	.word	0x08008acb
 8008870:	08008939 	.word	0x08008939
 8008874:	08008a2f 	.word	0x08008a2f
 8008878:	f7ff fd0a 	bl	8008290 <spiselect>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	f000 8127 	beq.w	8008ad2 <USER_SPI_ioctl+0x2ae>
 8008884:	2300      	movs	r3, #0
 8008886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800888a:	e122      	b.n	8008ad2 <USER_SPI_ioctl+0x2ae>
 800888c:	2100      	movs	r1, #0
 800888e:	2009      	movs	r0, #9
 8008890:	f7ff fd75 	bl	800837e <send_cmd>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	f040 811d 	bne.w	8008ad6 <USER_SPI_ioctl+0x2b2>
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	2110      	movs	r1, #16
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fd10 	bl	80082c8 <rcvr_datablock>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8113 	beq.w	8008ad6 <USER_SPI_ioctl+0x2b2>
 80088b0:	7b3b      	ldrb	r3, [r7, #12]
 80088b2:	099b      	lsrs	r3, r3, #6
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d111      	bne.n	80088de <USER_SPI_ioctl+0xba>
 80088ba:	7d7b      	ldrb	r3, [r7, #21]
 80088bc:	461a      	mov	r2, r3
 80088be:	7d3b      	ldrb	r3, [r7, #20]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	4413      	add	r3, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	7cfb      	ldrb	r3, [r7, #19]
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80088ce:	4413      	add	r3, r2
 80088d0:	3301      	adds	r3, #1
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	029a      	lsls	r2, r3, #10
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e028      	b.n	8008930 <USER_SPI_ioctl+0x10c>
 80088de:	7c7b      	ldrb	r3, [r7, #17]
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	7dbb      	ldrb	r3, [r7, #22]
 80088e8:	09db      	lsrs	r3, r3, #7
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4413      	add	r3, r2
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	7d7b      	ldrb	r3, [r7, #21]
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 0306 	and.w	r3, r3, #6
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	3302      	adds	r3, #2
 8008902:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008906:	7d3b      	ldrb	r3, [r7, #20]
 8008908:	099b      	lsrs	r3, r3, #6
 800890a:	b2db      	uxtb	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	7cfb      	ldrb	r3, [r7, #19]
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	441a      	add	r2, r3
 8008914:	7cbb      	ldrb	r3, [r7, #18]
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800891c:	4413      	add	r3, r2
 800891e:	3301      	adds	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008926:	3b09      	subs	r3, #9
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	409a      	lsls	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	2300      	movs	r3, #0
 8008932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008936:	e0ce      	b.n	8008ad6 <USER_SPI_ioctl+0x2b2>
 8008938:	4b71      	ldr	r3, [pc, #452]	; (8008b00 <USER_SPI_ioctl+0x2dc>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d031      	beq.n	80089a8 <USER_SPI_ioctl+0x184>
 8008944:	2100      	movs	r1, #0
 8008946:	208d      	movs	r0, #141	; 0x8d
 8008948:	f7ff fd19 	bl	800837e <send_cmd>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	f040 80c3 	bne.w	8008ada <USER_SPI_ioctl+0x2b6>
 8008954:	20ff      	movs	r0, #255	; 0xff
 8008956:	f7ff fc21 	bl	800819c <xchg_spi>
 800895a:	f107 030c 	add.w	r3, r7, #12
 800895e:	2110      	movs	r1, #16
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fcb1 	bl	80082c8 <rcvr_datablock>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80b6 	beq.w	8008ada <USER_SPI_ioctl+0x2b6>
 800896e:	2330      	movs	r3, #48	; 0x30
 8008970:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008974:	e007      	b.n	8008986 <USER_SPI_ioctl+0x162>
 8008976:	20ff      	movs	r0, #255	; 0xff
 8008978:	f7ff fc10 	bl	800819c <xchg_spi>
 800897c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008980:	3b01      	subs	r3, #1
 8008982:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008986:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f3      	bne.n	8008976 <USER_SPI_ioctl+0x152>
 800898e:	7dbb      	ldrb	r3, [r7, #22]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	2310      	movs	r3, #16
 8008998:	fa03 f202 	lsl.w	r2, r3, r2
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089a6:	e098      	b.n	8008ada <USER_SPI_ioctl+0x2b6>
 80089a8:	2100      	movs	r1, #0
 80089aa:	2009      	movs	r0, #9
 80089ac:	f7ff fce7 	bl	800837e <send_cmd>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f040 8091 	bne.w	8008ada <USER_SPI_ioctl+0x2b6>
 80089b8:	f107 030c 	add.w	r3, r7, #12
 80089bc:	2110      	movs	r1, #16
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff fc82 	bl	80082c8 <rcvr_datablock>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8087 	beq.w	8008ada <USER_SPI_ioctl+0x2b6>
 80089cc:	4b4c      	ldr	r3, [pc, #304]	; (8008b00 <USER_SPI_ioctl+0x2dc>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <USER_SPI_ioctl+0x1da>
 80089d8:	7dbb      	ldrb	r3, [r7, #22]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80089e0:	7dfa      	ldrb	r2, [r7, #23]
 80089e2:	09d2      	lsrs	r2, r2, #7
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	4413      	add	r3, r2
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	7e7b      	ldrb	r3, [r7, #25]
 80089ec:	099b      	lsrs	r3, r3, #6
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	3b01      	subs	r3, #1
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	461a      	mov	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e013      	b.n	8008a26 <USER_SPI_ioctl+0x202>
 80089fe:	7dbb      	ldrb	r3, [r7, #22]
 8008a00:	109b      	asrs	r3, r3, #2
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f003 031f 	and.w	r3, r3, #31
 8008a08:	3301      	adds	r3, #1
 8008a0a:	7dfa      	ldrb	r2, [r7, #23]
 8008a0c:	00d2      	lsls	r2, r2, #3
 8008a0e:	f002 0218 	and.w	r2, r2, #24
 8008a12:	7df9      	ldrb	r1, [r7, #23]
 8008a14:	0949      	lsrs	r1, r1, #5
 8008a16:	b2c9      	uxtb	r1, r1
 8008a18:	440a      	add	r2, r1
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a2c:	e055      	b.n	8008ada <USER_SPI_ioctl+0x2b6>
 8008a2e:	4b34      	ldr	r3, [pc, #208]	; (8008b00 <USER_SPI_ioctl+0x2dc>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0306 	and.w	r3, r3, #6
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d051      	beq.n	8008ade <USER_SPI_ioctl+0x2ba>
 8008a3a:	f107 020c 	add.w	r2, r7, #12
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	210b      	movs	r1, #11
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff feee 	bl	8008824 <USER_SPI_ioctl>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d149      	bne.n	8008ae2 <USER_SPI_ioctl+0x2be>
 8008a4e:	7b3b      	ldrb	r3, [r7, #12]
 8008a50:	099b      	lsrs	r3, r3, #6
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <USER_SPI_ioctl+0x23e>
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d041      	beq.n	8008ae6 <USER_SPI_ioctl+0x2c2>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	623b      	str	r3, [r7, #32]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
 8008a72:	4b23      	ldr	r3, [pc, #140]	; (8008b00 <USER_SPI_ioctl+0x2dc>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <USER_SPI_ioctl+0x266>
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	025b      	lsls	r3, r3, #9
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	025b      	lsls	r3, r3, #9
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a8c:	2020      	movs	r0, #32
 8008a8e:	f7ff fc76 	bl	800837e <send_cmd>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d128      	bne.n	8008aea <USER_SPI_ioctl+0x2c6>
 8008a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a9a:	2021      	movs	r0, #33	; 0x21
 8008a9c:	f7ff fc6f 	bl	800837e <send_cmd>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d121      	bne.n	8008aea <USER_SPI_ioctl+0x2c6>
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	2026      	movs	r0, #38	; 0x26
 8008aaa:	f7ff fc68 	bl	800837e <send_cmd>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d11a      	bne.n	8008aea <USER_SPI_ioctl+0x2c6>
 8008ab4:	f247 5030 	movw	r0, #30000	; 0x7530
 8008ab8:	f7ff fbb6 	bl	8008228 <wait_ready>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <USER_SPI_ioctl+0x2c6>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ac8:	e00f      	b.n	8008aea <USER_SPI_ioctl+0x2c6>
 8008aca:	2304      	movs	r3, #4
 8008acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ad0:	e00c      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ad2:	bf00      	nop
 8008ad4:	e00a      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ad6:	bf00      	nop
 8008ad8:	e008      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ada:	bf00      	nop
 8008adc:	e006      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <USER_SPI_ioctl+0x2c8>
 8008aea:	bf00      	nop
 8008aec:	f7ff fbc0 	bl	8008270 <despiselect>
 8008af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008af4:	4618      	mov	r0, r3
 8008af6:	3730      	adds	r7, #48	; 0x30
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20000024 	.word	0x20000024
 8008b00:	2000aefc 	.word	0x2000aefc

08008b04 <disk_status>:
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	71fb      	strb	r3, [r7, #7]
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <disk_status+0x30>)
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	79fa      	ldrb	r2, [r7, #7]
 8008b1c:	4905      	ldr	r1, [pc, #20]	; (8008b34 <disk_status+0x30>)
 8008b1e:	440a      	add	r2, r1
 8008b20:	7a12      	ldrb	r2, [r2, #8]
 8008b22:	4610      	mov	r0, r2
 8008b24:	4798      	blx	r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	2000af30 	.word	0x2000af30

08008b38 <disk_initialize>:
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	4a0d      	ldr	r2, [pc, #52]	; (8008b80 <disk_initialize+0x48>)
 8008b4a:	5cd3      	ldrb	r3, [r2, r3]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d111      	bne.n	8008b74 <disk_initialize+0x3c>
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	4a0b      	ldr	r2, [pc, #44]	; (8008b80 <disk_initialize+0x48>)
 8008b54:	2101      	movs	r1, #1
 8008b56:	54d1      	strb	r1, [r2, r3]
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	4a09      	ldr	r2, [pc, #36]	; (8008b80 <disk_initialize+0x48>)
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	79fa      	ldrb	r2, [r7, #7]
 8008b66:	4906      	ldr	r1, [pc, #24]	; (8008b80 <disk_initialize+0x48>)
 8008b68:	440a      	add	r2, r1
 8008b6a:	7a12      	ldrb	r2, [r2, #8]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	2000af30 	.word	0x2000af30

08008b84 <disk_read>:
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	4a0a      	ldr	r2, [pc, #40]	; (8008bc0 <disk_read+0x3c>)
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	689c      	ldr	r4, [r3, #8]
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4a07      	ldr	r2, [pc, #28]	; (8008bc0 <disk_read+0x3c>)
 8008ba4:	4413      	add	r3, r2
 8008ba6:	7a18      	ldrb	r0, [r3, #8]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	47a0      	blx	r4
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd90      	pop	{r4, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	2000af30 	.word	0x2000af30

08008bc4 <disk_write>:
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <disk_write+0x3c>)
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68dc      	ldr	r4, [r3, #12]
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	4a07      	ldr	r2, [pc, #28]	; (8008c00 <disk_write+0x3c>)
 8008be4:	4413      	add	r3, r2
 8008be6:	7a18      	ldrb	r0, [r3, #8]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	47a0      	blx	r4
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd90      	pop	{r4, r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000af30 	.word	0x2000af30

08008c04 <disk_ioctl>:
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	603a      	str	r2, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
 8008c10:	460b      	mov	r3, r1
 8008c12:	71bb      	strb	r3, [r7, #6]
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <disk_ioctl+0x38>)
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	79fa      	ldrb	r2, [r7, #7]
 8008c22:	4906      	ldr	r1, [pc, #24]	; (8008c3c <disk_ioctl+0x38>)
 8008c24:	440a      	add	r2, r1
 8008c26:	7a10      	ldrb	r0, [r2, #8]
 8008c28:	79b9      	ldrb	r1, [r7, #6]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	4798      	blx	r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	2000af30 	.word	0x2000af30

08008c40 <ld_word>:
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	81fb      	strh	r3, [r7, #14]
 8008c50:	89fb      	ldrh	r3, [r7, #14]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	b21a      	sxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	b21b      	sxth	r3, r3
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	b21b      	sxth	r3, r3
 8008c60:	81fb      	strh	r3, [r7, #14]
 8008c62:	89fb      	ldrh	r3, [r7, #14]
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <ld_dword>:
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3303      	adds	r3, #3
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	021b      	lsls	r3, r3, #8
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	3202      	adds	r2, #2
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	3201      	adds	r2, #1
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7812      	ldrb	r2, [r2, #0]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <st_word>:
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	807b      	strh	r3, [r7, #2]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	887a      	ldrh	r2, [r7, #2]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	887b      	ldrh	r3, [r7, #2]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	807b      	strh	r3, [r7, #2]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	887a      	ldrh	r2, [r7, #2]
 8008cdc:	b2d2      	uxtb	r2, r2
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <st_dword>:
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	0a1b      	lsrs	r3, r3, #8
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <mem_cpy>:
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00d      	beq.n	8008d7a <mem_cpy+0x36>
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	1c53      	adds	r3, r2, #1
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	1c59      	adds	r1, r3, #1
 8008d68:	6179      	str	r1, [r7, #20]
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f1      	bne.n	8008d5e <mem_cpy+0x1a>
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <mem_set>:
 8008d86:	b480      	push	{r7}
 8008d88:	b087      	sub	sp, #28
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	617a      	str	r2, [r7, #20]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	607b      	str	r3, [r7, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f3      	bne.n	8008d96 <mem_set+0x10>
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <mem_cmp>:
 8008dbc:	b480      	push	{r7}
 8008dbe:	b089      	sub	sp, #36	; 0x24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	61bb      	str	r3, [r7, #24]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	61fa      	str	r2, [r7, #28]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	61ba      	str	r2, [r7, #24]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	1acb      	subs	r3, r1, r3
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	607b      	str	r3, [r7, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <mem_cmp+0x40>
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0eb      	beq.n	8008dd4 <mem_cmp+0x18>
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3724      	adds	r7, #36	; 0x24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <chk_chr>:
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
 8008e14:	e002      	b.n	8008e1c <chk_chr+0x12>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	607b      	str	r3, [r7, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <chk_chr+0x26>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d1f2      	bne.n	8008e16 <chk_chr+0xc>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <lock_fs>:
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <lock_fs+0x22>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 f91d 	bl	800b092 <ff_req_grant>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <lock_fs+0x22>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e000      	b.n	8008e64 <lock_fs+0x24>
 8008e62:	2300      	movs	r3, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <unlock_fs>:
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <unlock_fs+0x2e>
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	2b0c      	cmp	r3, #12
 8008e82:	d00a      	beq.n	8008e9a <unlock_fs+0x2e>
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	2b0b      	cmp	r3, #11
 8008e88:	d007      	beq.n	8008e9a <unlock_fs+0x2e>
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	2b0f      	cmp	r3, #15
 8008e8e:	d004      	beq.n	8008e9a <unlock_fs+0x2e>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 f911 	bl	800b0bc <ff_rel_grant>
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <chk_lock>:
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e029      	b.n	8008f0c <chk_lock+0x68>
 8008eb8:	4a27      	ldr	r2, [pc, #156]	; (8008f58 <chk_lock+0xb4>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	4413      	add	r3, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01d      	beq.n	8008f02 <chk_lock+0x5e>
 8008ec6:	4a24      	ldr	r2, [pc, #144]	; (8008f58 <chk_lock+0xb4>)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d116      	bne.n	8008f06 <chk_lock+0x62>
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <chk_lock+0xb4>)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d10c      	bne.n	8008f06 <chk_lock+0x62>
 8008eec:	4a1a      	ldr	r2, [pc, #104]	; (8008f58 <chk_lock+0xb4>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d102      	bne.n	8008f06 <chk_lock+0x62>
 8008f00:	e007      	b.n	8008f12 <chk_lock+0x6e>
 8008f02:	2301      	movs	r3, #1
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d9d2      	bls.n	8008eb8 <chk_lock+0x14>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d109      	bne.n	8008f2c <chk_lock+0x88>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <chk_lock+0x80>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d101      	bne.n	8008f28 <chk_lock+0x84>
 8008f24:	2300      	movs	r3, #0
 8008f26:	e010      	b.n	8008f4a <chk_lock+0xa6>
 8008f28:	2312      	movs	r3, #18
 8008f2a:	e00e      	b.n	8008f4a <chk_lock+0xa6>
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d108      	bne.n	8008f44 <chk_lock+0xa0>
 8008f32:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <chk_lock+0xb4>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f42:	d101      	bne.n	8008f48 <chk_lock+0xa4>
 8008f44:	2310      	movs	r3, #16
 8008f46:	e000      	b.n	8008f4a <chk_lock+0xa6>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	2000af10 	.word	0x2000af10

08008f5c <enq_lock>:
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	e002      	b.n	8008f6e <enq_lock+0x12>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d806      	bhi.n	8008f82 <enq_lock+0x26>
 8008f74:	4a09      	ldr	r2, [pc, #36]	; (8008f9c <enq_lock+0x40>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	4413      	add	r3, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f2      	bne.n	8008f68 <enq_lock+0xc>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	bf14      	ite	ne
 8008f88:	2301      	movne	r3, #1
 8008f8a:	2300      	moveq	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	2000af10 	.word	0x2000af10

08008fa0 <inc_lock>:
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	e01f      	b.n	8008ff0 <inc_lock+0x50>
 8008fb0:	4a41      	ldr	r2, [pc, #260]	; (80090b8 <inc_lock+0x118>)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	4413      	add	r3, r2
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d113      	bne.n	8008fea <inc_lock+0x4a>
 8008fc2:	4a3d      	ldr	r2, [pc, #244]	; (80090b8 <inc_lock+0x118>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	4413      	add	r3, r2
 8008fca:	3304      	adds	r3, #4
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d109      	bne.n	8008fea <inc_lock+0x4a>
 8008fd6:	4a38      	ldr	r2, [pc, #224]	; (80090b8 <inc_lock+0x118>)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	4413      	add	r3, r2
 8008fde:	3308      	adds	r3, #8
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d006      	beq.n	8008ff8 <inc_lock+0x58>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d9dc      	bls.n	8008fb0 <inc_lock+0x10>
 8008ff6:	e000      	b.n	8008ffa <inc_lock+0x5a>
 8008ff8:	bf00      	nop
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d132      	bne.n	8009066 <inc_lock+0xc6>
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e002      	b.n	800900c <inc_lock+0x6c>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d806      	bhi.n	8009020 <inc_lock+0x80>
 8009012:	4a29      	ldr	r2, [pc, #164]	; (80090b8 <inc_lock+0x118>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	4413      	add	r3, r2
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f2      	bne.n	8009006 <inc_lock+0x66>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d101      	bne.n	800902a <inc_lock+0x8a>
 8009026:	2300      	movs	r3, #0
 8009028:	e040      	b.n	80090ac <inc_lock+0x10c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4922      	ldr	r1, [pc, #136]	; (80090b8 <inc_lock+0x118>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	440b      	add	r3, r1
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	491e      	ldr	r1, [pc, #120]	; (80090b8 <inc_lock+0x118>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	440b      	add	r3, r1
 8009044:	3304      	adds	r3, #4
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	491a      	ldr	r1, [pc, #104]	; (80090b8 <inc_lock+0x118>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	011b      	lsls	r3, r3, #4
 8009052:	440b      	add	r3, r1
 8009054:	3308      	adds	r3, #8
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <inc_lock+0x118>)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	4413      	add	r3, r2
 8009060:	330c      	adds	r3, #12
 8009062:	2200      	movs	r2, #0
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <inc_lock+0xe0>
 800906c:	4a12      	ldr	r2, [pc, #72]	; (80090b8 <inc_lock+0x118>)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	4413      	add	r3, r2
 8009074:	330c      	adds	r3, #12
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <inc_lock+0xe0>
 800907c:	2300      	movs	r3, #0
 800907e:	e015      	b.n	80090ac <inc_lock+0x10c>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <inc_lock+0xf8>
 8009086:	4a0c      	ldr	r2, [pc, #48]	; (80090b8 <inc_lock+0x118>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	4413      	add	r3, r2
 800908e:	330c      	adds	r3, #12
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	e001      	b.n	800909c <inc_lock+0xfc>
 8009098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800909c:	4906      	ldr	r1, [pc, #24]	; (80090b8 <inc_lock+0x118>)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	011b      	lsls	r3, r3, #4
 80090a2:	440b      	add	r3, r1
 80090a4:	330c      	adds	r3, #12
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	4618      	mov	r0, r3
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000af10 	.word	0x2000af10

080090bc <clear_lock>:
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e010      	b.n	80090ec <clear_lock+0x30>
 80090ca:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <clear_lock+0x44>)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4413      	add	r3, r2
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d105      	bne.n	80090e6 <clear_lock+0x2a>
 80090da:	4a09      	ldr	r2, [pc, #36]	; (8009100 <clear_lock+0x44>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d9eb      	bls.n	80090ca <clear_lock+0xe>
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	2000af10 	.word	0x2000af10

08009104 <sync_window>:
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	78db      	ldrb	r3, [r3, #3]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d034      	beq.n	8009182 <sync_window+0x7e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7858      	ldrb	r0, [r3, #1]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009128:	2301      	movs	r3, #1
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	f7ff fd4a 	bl	8008bc4 <disk_write>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <sync_window+0x38>
 8009136:	2301      	movs	r3, #1
 8009138:	73fb      	strb	r3, [r7, #15]
 800913a:	e022      	b.n	8009182 <sync_window+0x7e>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	70da      	strb	r2, [r3, #3]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	429a      	cmp	r2, r3
 8009150:	d217      	bcs.n	8009182 <sync_window+0x7e>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	e010      	b.n	800917c <sync_window+0x78>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	7858      	ldrb	r0, [r3, #1]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800916e:	2301      	movs	r3, #1
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	f7ff fd27 	bl	8008bc4 <disk_write>
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	3b01      	subs	r3, #1
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d8eb      	bhi.n	800915a <sync_window+0x56>
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <move_window>:
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d01b      	beq.n	80091dc <move_window+0x50>
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff ffad 	bl	8009104 <sync_window>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d113      	bne.n	80091dc <move_window+0x50>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7858      	ldrb	r0, [r3, #1]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091be:	2301      	movs	r3, #1
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	f7ff fcdf 	bl	8008b84 <disk_read>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <move_window+0x4a>
 80091cc:	f04f 33ff 	mov.w	r3, #4294967295
 80091d0:	603b      	str	r3, [r7, #0]
 80091d2:	2301      	movs	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	631a      	str	r2, [r3, #48]	; 0x30
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <sync_fs>:
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff87 	bl	8009104 <sync_window>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d158      	bne.n	80092b2 <sync_fs+0xca>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d148      	bne.n	800929a <sync_fs+0xb2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	791b      	ldrb	r3, [r3, #4]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d144      	bne.n	800929a <sync_fs+0xb2>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3334      	adds	r3, #52	; 0x34
 8009214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fdb3 	bl	8008d86 <mem_set>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3334      	adds	r3, #52	; 0x34
 8009224:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009228:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fd42 	bl	8008cb6 <st_word>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3334      	adds	r3, #52	; 0x34
 8009236:	4921      	ldr	r1, [pc, #132]	; (80092bc <sync_fs+0xd4>)
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fd57 	bl	8008cec <st_dword>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3334      	adds	r3, #52	; 0x34
 8009242:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009246:	491e      	ldr	r1, [pc, #120]	; (80092c0 <sync_fs+0xd8>)
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fd4f 	bl	8008cec <st_dword>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3334      	adds	r3, #52	; 0x34
 8009252:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f7ff fd45 	bl	8008cec <st_dword>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3334      	adds	r3, #52	; 0x34
 8009266:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f7ff fd3b 	bl	8008cec <st_dword>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7858      	ldrb	r0, [r3, #1]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800928e:	2301      	movs	r3, #1
 8009290:	f7ff fc98 	bl	8008bc4 <disk_write>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	711a      	strb	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fcae 	bl	8008c04 <disk_ioctl>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <sync_fs+0xca>
 80092ae:	2301      	movs	r3, #1
 80092b0:	73fb      	strb	r3, [r7, #15]
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	41615252 	.word	0x41615252
 80092c0:	61417272 	.word	0x61417272

080092c4 <clust2sect>:
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	3b02      	subs	r3, #2
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	3b02      	subs	r3, #2
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d301      	bcc.n	80092e4 <clust2sect+0x20>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e008      	b.n	80092f6 <clust2sect+0x32>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	895b      	ldrh	r3, [r3, #10]
 80092e8:	461a      	mov	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	fb03 f202 	mul.w	r2, r3, r2
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4413      	add	r3, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <get_fat>:
 8009302:	b580      	push	{r7, lr}
 8009304:	b086      	sub	sp, #24
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d904      	bls.n	8009322 <get_fat+0x20>
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d302      	bcc.n	8009328 <get_fat+0x26>
 8009322:	2301      	movs	r3, #1
 8009324:	617b      	str	r3, [r7, #20]
 8009326:	e08f      	b.n	8009448 <get_fat+0x146>
 8009328:	f04f 33ff 	mov.w	r3, #4294967295
 800932c:	617b      	str	r3, [r7, #20]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b03      	cmp	r3, #3
 8009334:	d062      	beq.n	80093fc <get_fat+0xfa>
 8009336:	2b03      	cmp	r3, #3
 8009338:	dc7c      	bgt.n	8009434 <get_fat+0x132>
 800933a:	2b01      	cmp	r3, #1
 800933c:	d002      	beq.n	8009344 <get_fat+0x42>
 800933e:	2b02      	cmp	r3, #2
 8009340:	d042      	beq.n	80093c8 <get_fat+0xc6>
 8009342:	e077      	b.n	8009434 <get_fat+0x132>
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	0a5b      	lsrs	r3, r3, #9
 800935a:	4413      	add	r3, r2
 800935c:	4619      	mov	r1, r3
 800935e:	6938      	ldr	r0, [r7, #16]
 8009360:	f7ff ff14 	bl	800918c <move_window>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d167      	bne.n	800943a <get_fat+0x138>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	60fa      	str	r2, [r7, #12]
 8009370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800937c:	60bb      	str	r3, [r7, #8]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	0a5b      	lsrs	r3, r3, #9
 8009386:	4413      	add	r3, r2
 8009388:	4619      	mov	r1, r3
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f7ff fefe 	bl	800918c <move_window>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d153      	bne.n	800943e <get_fat+0x13c>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	461a      	mov	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <get_fat+0xbc>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	091b      	lsrs	r3, r3, #4
 80093bc:	e002      	b.n	80093c4 <get_fat+0xc2>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e03f      	b.n	8009448 <get_fat+0x146>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	0a1b      	lsrs	r3, r3, #8
 80093d0:	4413      	add	r3, r2
 80093d2:	4619      	mov	r1, r3
 80093d4:	6938      	ldr	r0, [r7, #16]
 80093d6:	f7ff fed9 	bl	800918c <move_window>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d130      	bne.n	8009442 <get_fat+0x140>
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80093ee:	4413      	add	r3, r2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fc25 	bl	8008c40 <ld_word>
 80093f6:	4603      	mov	r3, r0
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e025      	b.n	8009448 <get_fat+0x146>
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	09db      	lsrs	r3, r3, #7
 8009404:	4413      	add	r3, r2
 8009406:	4619      	mov	r1, r3
 8009408:	6938      	ldr	r0, [r7, #16]
 800940a:	f7ff febf 	bl	800918c <move_window>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d118      	bne.n	8009446 <get_fat+0x144>
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009422:	4413      	add	r3, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff fc23 	bl	8008c70 <ld_dword>
 800942a:	4603      	mov	r3, r0
 800942c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e009      	b.n	8009448 <get_fat+0x146>
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e006      	b.n	8009448 <get_fat+0x146>
 800943a:	bf00      	nop
 800943c:	e004      	b.n	8009448 <get_fat+0x146>
 800943e:	bf00      	nop
 8009440:	e002      	b.n	8009448 <get_fat+0x146>
 8009442:	bf00      	nop
 8009444:	e000      	b.n	8009448 <get_fat+0x146>
 8009446:	bf00      	nop
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <put_fat>:
 8009452:	b590      	push	{r4, r7, lr}
 8009454:	b089      	sub	sp, #36	; 0x24
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
 800945e:	2302      	movs	r3, #2
 8009460:	77fb      	strb	r3, [r7, #31]
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b01      	cmp	r3, #1
 8009466:	f240 80d9 	bls.w	800961c <put_fat+0x1ca>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	f080 80d3 	bcs.w	800961c <put_fat+0x1ca>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b03      	cmp	r3, #3
 800947c:	f000 8096 	beq.w	80095ac <put_fat+0x15a>
 8009480:	2b03      	cmp	r3, #3
 8009482:	f300 80cb 	bgt.w	800961c <put_fat+0x1ca>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d002      	beq.n	8009490 <put_fat+0x3e>
 800948a:	2b02      	cmp	r3, #2
 800948c:	d06e      	beq.n	800956c <put_fat+0x11a>
 800948e:	e0c5      	b.n	800961c <put_fat+0x1ca>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	085b      	lsrs	r3, r3, #1
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	4413      	add	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	0a5b      	lsrs	r3, r3, #9
 80094a6:	4413      	add	r3, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fe6e 	bl	800918c <move_window>
 80094b0:	4603      	mov	r3, r0
 80094b2:	77fb      	strb	r3, [r7, #31]
 80094b4:	7ffb      	ldrb	r3, [r7, #31]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f040 80a9 	bne.w	800960e <put_fat+0x1bc>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	1c59      	adds	r1, r3, #1
 80094c6:	61b9      	str	r1, [r7, #24]
 80094c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094cc:	4413      	add	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00d      	beq.n	80094f6 <put_fat+0xa4>
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	b25b      	sxtb	r3, r3
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b25a      	sxtb	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	b25b      	sxtb	r3, r3
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b25b      	sxtb	r3, r3
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	e001      	b.n	80094fa <put_fat+0xa8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	7013      	strb	r3, [r2, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	70da      	strb	r2, [r3, #3]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	0a5b      	lsrs	r3, r3, #9
 800950c:	4413      	add	r3, r2
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fe3b 	bl	800918c <move_window>
 8009516:	4603      	mov	r3, r0
 8009518:	77fb      	strb	r3, [r7, #31]
 800951a:	7ffb      	ldrb	r3, [r7, #31]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d178      	bne.n	8009612 <put_fat+0x1c0>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952c:	4413      	add	r3, r2
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <put_fat+0xf0>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	091b      	lsrs	r3, r3, #4
 800953e:	b2db      	uxtb	r3, r3
 8009540:	e00e      	b.n	8009560 <put_fat+0x10e>
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b25b      	sxtb	r3, r3
 8009548:	f023 030f 	bic.w	r3, r3, #15
 800954c:	b25a      	sxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	b25b      	sxtb	r3, r3
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	b25b      	sxtb	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	b25b      	sxtb	r3, r3
 800955e:	b2db      	uxtb	r3, r3
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	7013      	strb	r3, [r2, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	70da      	strb	r2, [r3, #3]
 800956a:	e057      	b.n	800961c <put_fat+0x1ca>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	4413      	add	r3, r2
 8009576:	4619      	mov	r1, r3
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fe07 	bl	800918c <move_window>
 800957e:	4603      	mov	r3, r0
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	7ffb      	ldrb	r3, [r7, #31]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d146      	bne.n	8009616 <put_fat+0x1c4>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009596:	4413      	add	r3, r2
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	b292      	uxth	r2, r2
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fb89 	bl	8008cb6 <st_word>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	70da      	strb	r2, [r3, #3]
 80095aa:	e037      	b.n	800961c <put_fat+0x1ca>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	09db      	lsrs	r3, r3, #7
 80095b4:	4413      	add	r3, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff fde7 	bl	800918c <move_window>
 80095be:	4603      	mov	r3, r0
 80095c0:	77fb      	strb	r3, [r7, #31]
 80095c2:	7ffb      	ldrb	r3, [r7, #31]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d128      	bne.n	800961a <put_fat+0x1c8>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095dc:	4413      	add	r3, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fb46 	bl	8008c70 <ld_dword>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095ea:	4323      	orrs	r3, r4
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80095fc:	4413      	add	r3, r2
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fb73 	bl	8008cec <st_dword>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	70da      	strb	r2, [r3, #3]
 800960c:	e006      	b.n	800961c <put_fat+0x1ca>
 800960e:	bf00      	nop
 8009610:	e004      	b.n	800961c <put_fat+0x1ca>
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <put_fat+0x1ca>
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <put_fat+0x1ca>
 800961a:	bf00      	nop
 800961c:	7ffb      	ldrb	r3, [r7, #31]
 800961e:	4618      	mov	r0, r3
 8009620:	3724      	adds	r7, #36	; 0x24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd90      	pop	{r4, r7, pc}

08009626 <remove_chain>:
 8009626:	b580      	push	{r7, lr}
 8009628:	b088      	sub	sp, #32
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	2300      	movs	r3, #0
 8009634:	77fb      	strb	r3, [r7, #31]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	61bb      	str	r3, [r7, #24]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d904      	bls.n	800964c <remove_chain+0x26>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	d301      	bcc.n	8009650 <remove_chain+0x2a>
 800964c:	2302      	movs	r3, #2
 800964e:	e04b      	b.n	80096e8 <remove_chain+0xc2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00c      	beq.n	8009670 <remove_chain+0x4a>
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	6879      	ldr	r1, [r7, #4]
 800965c:	69b8      	ldr	r0, [r7, #24]
 800965e:	f7ff fef8 	bl	8009452 <put_fat>
 8009662:	4603      	mov	r3, r0
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	7ffb      	ldrb	r3, [r7, #31]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <remove_chain+0x4a>
 800966c:	7ffb      	ldrb	r3, [r7, #31]
 800966e:	e03b      	b.n	80096e8 <remove_chain+0xc2>
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff fe45 	bl	8009302 <get_fat>
 8009678:	6178      	str	r0, [r7, #20]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d031      	beq.n	80096e4 <remove_chain+0xbe>
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <remove_chain+0x64>
 8009686:	2302      	movs	r3, #2
 8009688:	e02e      	b.n	80096e8 <remove_chain+0xc2>
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009690:	d101      	bne.n	8009696 <remove_chain+0x70>
 8009692:	2301      	movs	r3, #1
 8009694:	e028      	b.n	80096e8 <remove_chain+0xc2>
 8009696:	2200      	movs	r2, #0
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	69b8      	ldr	r0, [r7, #24]
 800969c:	f7ff fed9 	bl	8009452 <put_fat>
 80096a0:	4603      	mov	r3, r0
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	7ffb      	ldrb	r3, [r7, #31]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <remove_chain+0x88>
 80096aa:	7ffb      	ldrb	r3, [r7, #31]
 80096ac:	e01c      	b.n	80096e8 <remove_chain+0xc2>
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	3b02      	subs	r3, #2
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d20b      	bcs.n	80096d4 <remove_chain+0xae>
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	615a      	str	r2, [r3, #20]
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	791b      	ldrb	r3, [r3, #4]
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	711a      	strb	r2, [r3, #4]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	60bb      	str	r3, [r7, #8]
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d3c6      	bcc.n	8009670 <remove_chain+0x4a>
 80096e2:	e000      	b.n	80096e6 <remove_chain+0xc0>
 80096e4:	bf00      	nop
 80096e6:	2300      	movs	r3, #0
 80096e8:	4618      	mov	r0, r3
 80096ea:	3720      	adds	r7, #32
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <create_chain>:
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	613b      	str	r3, [r7, #16]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10d      	bne.n	8009722 <create_chain+0x32>
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d004      	beq.n	800971c <create_chain+0x2c>
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	429a      	cmp	r2, r3
 800971a:	d31b      	bcc.n	8009754 <create_chain+0x64>
 800971c:	2301      	movs	r3, #1
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	e018      	b.n	8009754 <create_chain+0x64>
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff fdec 	bl	8009302 <get_fat>
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d801      	bhi.n	8009736 <create_chain+0x46>
 8009732:	2301      	movs	r3, #1
 8009734:	e070      	b.n	8009818 <create_chain+0x128>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973c:	d101      	bne.n	8009742 <create_chain+0x52>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	e06a      	b.n	8009818 <create_chain+0x128>
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	429a      	cmp	r2, r3
 800974a:	d201      	bcs.n	8009750 <create_chain+0x60>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	e063      	b.n	8009818 <create_chain+0x128>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	3301      	adds	r3, #1
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	429a      	cmp	r2, r3
 8009766:	d307      	bcc.n	8009778 <create_chain+0x88>
 8009768:	2302      	movs	r3, #2
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	429a      	cmp	r2, r3
 8009772:	d901      	bls.n	8009778 <create_chain+0x88>
 8009774:	2300      	movs	r3, #0
 8009776:	e04f      	b.n	8009818 <create_chain+0x128>
 8009778:	69f9      	ldr	r1, [r7, #28]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fdc1 	bl	8009302 <get_fat>
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00e      	beq.n	80097a6 <create_chain+0xb6>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d003      	beq.n	8009796 <create_chain+0xa6>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d101      	bne.n	800979a <create_chain+0xaa>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	e03e      	b.n	8009818 <create_chain+0x128>
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d1da      	bne.n	8009758 <create_chain+0x68>
 80097a2:	2300      	movs	r3, #0
 80097a4:	e038      	b.n	8009818 <create_chain+0x128>
 80097a6:	bf00      	nop
 80097a8:	f04f 32ff 	mov.w	r2, #4294967295
 80097ac:	69f9      	ldr	r1, [r7, #28]
 80097ae:	6938      	ldr	r0, [r7, #16]
 80097b0:	f7ff fe4f 	bl	8009452 <put_fat>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <create_chain+0xe2>
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d006      	beq.n	80097d2 <create_chain+0xe2>
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6938      	ldr	r0, [r7, #16]
 80097ca:	f7ff fe42 	bl	8009452 <put_fat>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75fb      	strb	r3, [r7, #23]
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d116      	bne.n	8009806 <create_chain+0x116>
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	611a      	str	r2, [r3, #16]
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	695a      	ldr	r2, [r3, #20]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	3b02      	subs	r3, #2
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d804      	bhi.n	80097f6 <create_chain+0x106>
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	1e5a      	subs	r2, r3, #1
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	615a      	str	r2, [r3, #20]
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	791b      	ldrb	r3, [r3, #4]
 80097fa:	f043 0301 	orr.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	711a      	strb	r2, [r3, #4]
 8009804:	e007      	b.n	8009816 <create_chain+0x126>
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d102      	bne.n	8009812 <create_chain+0x122>
 800980c:	f04f 33ff 	mov.w	r3, #4294967295
 8009810:	e000      	b.n	8009814 <create_chain+0x124>
 8009812:	2301      	movs	r3, #1
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4618      	mov	r0, r3
 800981a:	3720      	adds	r7, #32
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <clmt_clust>:
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	3304      	adds	r3, #4
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	0a5b      	lsrs	r3, r3, #9
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	8952      	ldrh	r2, [r2, #10]
 8009840:	fbb3 f3f2 	udiv	r3, r3, r2
 8009844:	617b      	str	r3, [r7, #20]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	1d1a      	adds	r2, r3, #4
 800984a:	613a      	str	r2, [r7, #16]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <clmt_clust+0x3a>
 8009856:	2300      	movs	r3, #0
 8009858:	e010      	b.n	800987c <clmt_clust+0x5c>
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	429a      	cmp	r2, r3
 8009860:	d307      	bcc.n	8009872 <clmt_clust+0x52>
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3304      	adds	r3, #4
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	e7e9      	b.n	8009846 <clmt_clust+0x26>
 8009872:	bf00      	nop
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	4413      	add	r3, r2
 800987c:	4618      	mov	r0, r3
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <dir_sdi>:
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800989e:	d204      	bcs.n	80098aa <dir_sdi+0x22>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f003 031f 	and.w	r3, r3, #31
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <dir_sdi+0x26>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e063      	b.n	8009976 <dir_sdi+0xee>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	615a      	str	r2, [r3, #20]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <dir_sdi+0x46>
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d902      	bls.n	80098ce <dir_sdi+0x46>
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10c      	bne.n	80098ee <dir_sdi+0x66>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	8912      	ldrh	r2, [r2, #8]
 80098dc:	4293      	cmp	r3, r2
 80098de:	d301      	bcc.n	80098e4 <dir_sdi+0x5c>
 80098e0:	2302      	movs	r3, #2
 80098e2:	e048      	b.n	8009976 <dir_sdi+0xee>
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	61da      	str	r2, [r3, #28]
 80098ec:	e029      	b.n	8009942 <dir_sdi+0xba>
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	895b      	ldrh	r3, [r3, #10]
 80098f2:	025b      	lsls	r3, r3, #9
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	e019      	b.n	800992c <dir_sdi+0xa4>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6979      	ldr	r1, [r7, #20]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fd00 	bl	8009302 <get_fat>
 8009902:	6178      	str	r0, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d101      	bne.n	8009910 <dir_sdi+0x88>
 800990c:	2301      	movs	r3, #1
 800990e:	e032      	b.n	8009976 <dir_sdi+0xee>
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d904      	bls.n	8009920 <dir_sdi+0x98>
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	429a      	cmp	r2, r3
 800991e:	d301      	bcc.n	8009924 <dir_sdi+0x9c>
 8009920:	2302      	movs	r3, #2
 8009922:	e028      	b.n	8009976 <dir_sdi+0xee>
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	603b      	str	r3, [r7, #0]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	429a      	cmp	r2, r3
 8009932:	d2e1      	bcs.n	80098f8 <dir_sdi+0x70>
 8009934:	6979      	ldr	r1, [r7, #20]
 8009936:	6938      	ldr	r0, [r7, #16]
 8009938:	f7ff fcc4 	bl	80092c4 <clust2sect>
 800993c:	4602      	mov	r2, r0
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	61da      	str	r2, [r3, #28]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	619a      	str	r2, [r3, #24]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <dir_sdi+0xcc>
 8009950:	2302      	movs	r3, #2
 8009952:	e010      	b.n	8009976 <dir_sdi+0xee>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	0a5b      	lsrs	r3, r3, #9
 800995c:	441a      	add	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	61da      	str	r2, [r3, #28]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996e:	441a      	add	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	621a      	str	r2, [r3, #32]
 8009974:	2300      	movs	r3, #0
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <dir_next>:
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	60fb      	str	r3, [r7, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	3320      	adds	r3, #32
 8009994:	60bb      	str	r3, [r7, #8]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <dir_next+0x28>
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099a4:	d301      	bcc.n	80099aa <dir_next+0x2c>
 80099a6:	2304      	movs	r3, #4
 80099a8:	e0aa      	b.n	8009b00 <dir_next+0x182>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 8098 	bne.w	8009ae6 <dir_next+0x168>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	61da      	str	r2, [r3, #28]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <dir_next+0x62>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	8912      	ldrh	r2, [r2, #8]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	f0c0 8088 	bcc.w	8009ae6 <dir_next+0x168>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	61da      	str	r2, [r3, #28]
 80099dc:	2304      	movs	r3, #4
 80099de:	e08f      	b.n	8009b00 <dir_next+0x182>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	0a5b      	lsrs	r3, r3, #9
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	8952      	ldrh	r2, [r2, #10]
 80099e8:	3a01      	subs	r2, #1
 80099ea:	4013      	ands	r3, r2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d17a      	bne.n	8009ae6 <dir_next+0x168>
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f7ff fc82 	bl	8009302 <get_fat>
 80099fe:	6178      	str	r0, [r7, #20]
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d801      	bhi.n	8009a0a <dir_next+0x8c>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e07a      	b.n	8009b00 <dir_next+0x182>
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d101      	bne.n	8009a16 <dir_next+0x98>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e074      	b.n	8009b00 <dir_next+0x182>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d358      	bcc.n	8009ad2 <dir_next+0x154>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d104      	bne.n	8009a30 <dir_next+0xb2>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	61da      	str	r2, [r3, #28]
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	e067      	b.n	8009b00 <dir_next+0x182>
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f7ff fe59 	bl	80096f0 <create_chain>
 8009a3e:	6178      	str	r0, [r7, #20]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <dir_next+0xcc>
 8009a46:	2307      	movs	r3, #7
 8009a48:	e05a      	b.n	8009b00 <dir_next+0x182>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <dir_next+0xd6>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e055      	b.n	8009b00 <dir_next+0x182>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5a:	d101      	bne.n	8009a60 <dir_next+0xe2>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e04f      	b.n	8009b00 <dir_next+0x182>
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f7ff fb4f 	bl	8009104 <sync_window>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <dir_next+0xf2>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e047      	b.n	8009b00 <dir_next+0x182>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3334      	adds	r3, #52	; 0x34
 8009a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff f983 	bl	8008d86 <mem_set>
 8009a80:	2300      	movs	r3, #0
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	6979      	ldr	r1, [r7, #20]
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fc1c 	bl	80092c4 <clust2sect>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30
 8009a92:	e012      	b.n	8009aba <dir_next+0x13c>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	70da      	strb	r2, [r3, #3]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff fb32 	bl	8009104 <sync_window>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <dir_next+0x12c>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e02a      	b.n	8009b00 <dir_next+0x182>
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3301      	adds	r3, #1
 8009aae:	613b      	str	r3, [r7, #16]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	895b      	ldrh	r3, [r3, #10]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d3e6      	bcc.n	8009a94 <dir_next+0x116>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	1ad2      	subs	r2, r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	619a      	str	r2, [r3, #24]
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fbf2 	bl	80092c4 <clust2sect>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	61da      	str	r2, [r3, #28]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	615a      	str	r2, [r3, #20]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af8:	441a      	add	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	621a      	str	r2, [r3, #32]
 8009afe:	2300      	movs	r3, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <dir_alloc>:
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff feb4 	bl	8009888 <dir_sdi>
 8009b20:	4603      	mov	r3, r0
 8009b22:	75fb      	strb	r3, [r7, #23]
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d12b      	bne.n	8009b82 <dir_alloc+0x7a>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	4619      	mov	r1, r3
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fb29 	bl	800918c <move_window>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d11d      	bne.n	8009b80 <dir_alloc+0x78>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2be5      	cmp	r3, #229	; 0xe5
 8009b4c:	d004      	beq.n	8009b58 <dir_alloc+0x50>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d107      	bne.n	8009b68 <dir_alloc+0x60>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	613b      	str	r3, [r7, #16]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d102      	bne.n	8009b6c <dir_alloc+0x64>
 8009b66:	e00c      	b.n	8009b82 <dir_alloc+0x7a>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff ff05 	bl	800997e <dir_next>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0d7      	beq.n	8009b2e <dir_alloc+0x26>
 8009b7e:	e000      	b.n	8009b82 <dir_alloc+0x7a>
 8009b80:	bf00      	nop
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d101      	bne.n	8009b8c <dir_alloc+0x84>
 8009b88:	2307      	movs	r3, #7
 8009b8a:	75fb      	strb	r3, [r7, #23]
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <ld_clust>:
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	331a      	adds	r3, #26
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff f84b 	bl	8008c40 <ld_word>
 8009baa:	4603      	mov	r3, r0
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d109      	bne.n	8009bca <ld_clust+0x34>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3314      	adds	r3, #20
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff f840 	bl	8008c40 <ld_word>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	041b      	lsls	r3, r3, #16
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <st_clust>:
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	331a      	adds	r3, #26
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	b292      	uxth	r2, r2
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7ff f863 	bl	8008cb6 <st_word>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d109      	bne.n	8009c0c <st_clust+0x38>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f103 0214 	add.w	r2, r3, #20
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	0c1b      	lsrs	r3, r3, #16
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7ff f855 	bl	8008cb6 <st_word>
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <dir_find>:
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fe2f 	bl	8009888 <dir_sdi>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	75fb      	strb	r3, [r7, #23]
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <dir_find+0x24>
 8009c34:	7dfb      	ldrb	r3, [r7, #23]
 8009c36:	e03e      	b.n	8009cb6 <dir_find+0xa2>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6938      	ldr	r0, [r7, #16]
 8009c40:	f7ff faa4 	bl	800918c <move_window>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d12f      	bne.n	8009cae <dir_find+0x9a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	73fb      	strb	r3, [r7, #15]
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <dir_find+0x4e>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	75fb      	strb	r3, [r7, #23]
 8009c60:	e028      	b.n	8009cb4 <dir_find+0xa0>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	330b      	adds	r3, #11
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	719a      	strb	r2, [r3, #6]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	330b      	adds	r3, #11
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <dir_find+0x86>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a18      	ldr	r0, [r3, #32]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3324      	adds	r3, #36	; 0x24
 8009c8c:	220b      	movs	r2, #11
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f7ff f894 	bl	8008dbc <mem_cmp>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <dir_find+0x9e>
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff fe6e 	bl	800997e <dir_next>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0c5      	beq.n	8009c38 <dir_find+0x24>
 8009cac:	e002      	b.n	8009cb4 <dir_find+0xa0>
 8009cae:	bf00      	nop
 8009cb0:	e000      	b.n	8009cb4 <dir_find+0xa0>
 8009cb2:	bf00      	nop
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <dir_register>:
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60bb      	str	r3, [r7, #8]
 8009ccc:	2101      	movs	r1, #1
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff ff1a 	bl	8009b08 <dir_alloc>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d11c      	bne.n	8009d18 <dir_register+0x5a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	68b8      	ldr	r0, [r7, #8]
 8009ce6:	f7ff fa51 	bl	800918c <move_window>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d111      	bne.n	8009d18 <dir_register+0x5a>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff f842 	bl	8008d86 <mem_set>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a18      	ldr	r0, [r3, #32]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3324      	adds	r3, #36	; 0x24
 8009d0a:	220b      	movs	r2, #11
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7ff f819 	bl	8008d44 <mem_cpy>
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2201      	movs	r2, #1
 8009d16:	70da      	strb	r2, [r3, #3]
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <get_fileinfo>:
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	725a      	strb	r2, [r3, #9]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d04e      	beq.n	8009dd8 <get_fileinfo+0xb6>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	617b      	str	r3, [r7, #20]
 8009d42:	e021      	b.n	8009d88 <get_fileinfo+0x66>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a1a      	ldr	r2, [r3, #32]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	1c59      	adds	r1, r3, #1
 8009d4c:	6179      	str	r1, [r7, #20]
 8009d4e:	4413      	add	r3, r2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	73fb      	strb	r3, [r7, #15]
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d100      	bne.n	8009d5c <get_fileinfo+0x3a>
 8009d5a:	e015      	b.n	8009d88 <get_fileinfo+0x66>
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	d101      	bne.n	8009d66 <get_fileinfo+0x44>
 8009d62:	23e5      	movs	r3, #229	; 0xe5
 8009d64:	73fb      	strb	r3, [r7, #15]
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b09      	cmp	r3, #9
 8009d6a:	d106      	bne.n	8009d7a <get_fileinfo+0x58>
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	613a      	str	r2, [r7, #16]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	222e      	movs	r2, #46	; 0x2e
 8009d78:	725a      	strb	r2, [r3, #9]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	613a      	str	r2, [r7, #16]
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4413      	add	r3, r2
 8009d84:	7bfa      	ldrb	r2, [r7, #15]
 8009d86:	725a      	strb	r2, [r3, #9]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b0a      	cmp	r3, #10
 8009d8c:	d9da      	bls.n	8009d44 <get_fileinfo+0x22>
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	3309      	adds	r3, #9
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	7ada      	ldrb	r2, [r3, #11]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	721a      	strb	r2, [r3, #8]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	331c      	adds	r3, #28
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe ff60 	bl	8008c70 <ld_dword>
 8009db0:	4602      	mov	r2, r0
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	3316      	adds	r3, #22
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe ff57 	bl	8008c70 <ld_dword>
 8009dc2:	60b8      	str	r0, [r7, #8]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	80da      	strh	r2, [r3, #6]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	0c1b      	lsrs	r3, r3, #16
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	809a      	strh	r2, [r3, #4]
 8009dd6:	e000      	b.n	8009dda <get_fileinfo+0xb8>
 8009dd8:	bf00      	nop
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <create_name>:
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3324      	adds	r3, #36	; 0x24
 8009df4:	60bb      	str	r3, [r7, #8]
 8009df6:	220b      	movs	r2, #11
 8009df8:	2120      	movs	r1, #32
 8009dfa:	68b8      	ldr	r0, [r7, #8]
 8009dfc:	f7fe ffc3 	bl	8008d86 <mem_set>
 8009e00:	2300      	movs	r3, #0
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	2308      	movs	r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	61fa      	str	r2, [r7, #28]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4413      	add	r3, r2
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	76fb      	strb	r3, [r7, #27]
 8009e1a:	7efb      	ldrb	r3, [r7, #27]
 8009e1c:	2b20      	cmp	r3, #32
 8009e1e:	d94e      	bls.n	8009ebe <create_name+0xde>
 8009e20:	7efb      	ldrb	r3, [r7, #27]
 8009e22:	2b2f      	cmp	r3, #47	; 0x2f
 8009e24:	d006      	beq.n	8009e34 <create_name+0x54>
 8009e26:	7efb      	ldrb	r3, [r7, #27]
 8009e28:	2b5c      	cmp	r3, #92	; 0x5c
 8009e2a:	d110      	bne.n	8009e4e <create_name+0x6e>
 8009e2c:	e002      	b.n	8009e34 <create_name+0x54>
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3301      	adds	r3, #1
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e3e:	d0f6      	beq.n	8009e2e <create_name+0x4e>
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b5c      	cmp	r3, #92	; 0x5c
 8009e4a:	d0f0      	beq.n	8009e2e <create_name+0x4e>
 8009e4c:	e038      	b.n	8009ec0 <create_name+0xe0>
 8009e4e:	7efb      	ldrb	r3, [r7, #27]
 8009e50:	2b2e      	cmp	r3, #46	; 0x2e
 8009e52:	d003      	beq.n	8009e5c <create_name+0x7c>
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d30c      	bcc.n	8009e76 <create_name+0x96>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b0b      	cmp	r3, #11
 8009e60:	d002      	beq.n	8009e68 <create_name+0x88>
 8009e62:	7efb      	ldrb	r3, [r7, #27]
 8009e64:	2b2e      	cmp	r3, #46	; 0x2e
 8009e66:	d001      	beq.n	8009e6c <create_name+0x8c>
 8009e68:	2306      	movs	r3, #6
 8009e6a:	e044      	b.n	8009ef6 <create_name+0x116>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	613b      	str	r3, [r7, #16]
 8009e70:	230b      	movs	r3, #11
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	e022      	b.n	8009ebc <create_name+0xdc>
 8009e76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	da04      	bge.n	8009e88 <create_name+0xa8>
 8009e7e:	7efb      	ldrb	r3, [r7, #27]
 8009e80:	3b80      	subs	r3, #128	; 0x80
 8009e82:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <create_name+0x120>)
 8009e84:	5cd3      	ldrb	r3, [r2, r3]
 8009e86:	76fb      	strb	r3, [r7, #27]
 8009e88:	7efb      	ldrb	r3, [r7, #27]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	481d      	ldr	r0, [pc, #116]	; (8009f04 <create_name+0x124>)
 8009e8e:	f7fe ffbc 	bl	8008e0a <chk_chr>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <create_name+0xbc>
 8009e98:	2306      	movs	r3, #6
 8009e9a:	e02c      	b.n	8009ef6 <create_name+0x116>
 8009e9c:	7efb      	ldrb	r3, [r7, #27]
 8009e9e:	2b60      	cmp	r3, #96	; 0x60
 8009ea0:	d905      	bls.n	8009eae <create_name+0xce>
 8009ea2:	7efb      	ldrb	r3, [r7, #27]
 8009ea4:	2b7a      	cmp	r3, #122	; 0x7a
 8009ea6:	d802      	bhi.n	8009eae <create_name+0xce>
 8009ea8:	7efb      	ldrb	r3, [r7, #27]
 8009eaa:	3b20      	subs	r3, #32
 8009eac:	76fb      	strb	r3, [r7, #27]
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	613a      	str	r2, [r7, #16]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	7efa      	ldrb	r2, [r7, #27]
 8009eba:	701a      	strb	r2, [r3, #0]
 8009ebc:	e7a6      	b.n	8009e0c <create_name+0x2c>
 8009ebe:	bf00      	nop
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <create_name+0xf4>
 8009ed0:	2306      	movs	r3, #6
 8009ed2:	e010      	b.n	8009ef6 <create_name+0x116>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2be5      	cmp	r3, #229	; 0xe5
 8009eda:	d102      	bne.n	8009ee2 <create_name+0x102>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2205      	movs	r2, #5
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	7efb      	ldrb	r3, [r7, #27]
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d801      	bhi.n	8009eec <create_name+0x10c>
 8009ee8:	2204      	movs	r2, #4
 8009eea:	e000      	b.n	8009eee <create_name+0x10e>
 8009eec:	2200      	movs	r2, #0
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	330b      	adds	r3, #11
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	08011eb4 	.word	0x08011eb4
 8009f04:	08011e3c 	.word	0x08011e3c

08009f08 <follow_path>:
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e002      	b.n	8009f24 <follow_path+0x1c>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b2f      	cmp	r3, #47	; 0x2f
 8009f2a:	d0f8      	beq.n	8009f1e <follow_path+0x16>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2b5c      	cmp	r3, #92	; 0x5c
 8009f32:	d0f4      	beq.n	8009f1e <follow_path+0x16>
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2200      	movs	r2, #0
 8009f38:	609a      	str	r2, [r3, #8]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b1f      	cmp	r3, #31
 8009f40:	d80a      	bhi.n	8009f58 <follow_path+0x50>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2280      	movs	r2, #128	; 0x80
 8009f46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fc9b 	bl	8009888 <dir_sdi>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e043      	b.n	8009fe0 <follow_path+0xd8>
 8009f58:	463b      	mov	r3, r7
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff3f 	bl	8009de0 <create_name>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d134      	bne.n	8009fd6 <follow_path+0xce>
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff fe51 	bl	8009c14 <dir_find>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f7c:	72fb      	strb	r3, [r7, #11]
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00a      	beq.n	8009f9a <follow_path+0x92>
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d127      	bne.n	8009fda <follow_path+0xd2>
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d122      	bne.n	8009fda <follow_path+0xd2>
 8009f94:	2305      	movs	r3, #5
 8009f96:	75fb      	strb	r3, [r7, #23]
 8009f98:	e01f      	b.n	8009fda <follow_path+0xd2>
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d11c      	bne.n	8009fde <follow_path+0xd6>
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	799b      	ldrb	r3, [r3, #6]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <follow_path+0xae>
 8009fb0:	2305      	movs	r3, #5
 8009fb2:	75fb      	strb	r3, [r7, #23]
 8009fb4:	e014      	b.n	8009fe0 <follow_path+0xd8>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fde4 	bl	8009b96 <ld_clust>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	609a      	str	r2, [r3, #8]
 8009fd4:	e7c0      	b.n	8009f58 <follow_path+0x50>
 8009fd6:	bf00      	nop
 8009fd8:	e002      	b.n	8009fe0 <follow_path+0xd8>
 8009fda:	bf00      	nop
 8009fdc:	e000      	b.n	8009fe0 <follow_path+0xd8>
 8009fde:	bf00      	nop
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <get_ldnumber>:
 8009fea:	b480      	push	{r7}
 8009fec:	b087      	sub	sp, #28
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff6:	613b      	str	r3, [r7, #16]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d031      	beq.n	800a064 <get_ldnumber+0x7a>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	e002      	b.n	800a00e <get_ldnumber+0x24>
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	3301      	adds	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b20      	cmp	r3, #32
 800a014:	d903      	bls.n	800a01e <get_ldnumber+0x34>
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b3a      	cmp	r3, #58	; 0x3a
 800a01c:	d1f4      	bne.n	800a008 <get_ldnumber+0x1e>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	2b3a      	cmp	r3, #58	; 0x3a
 800a024:	d11c      	bne.n	800a060 <get_ldnumber+0x76>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	60fa      	str	r2, [r7, #12]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	3b30      	subs	r3, #48	; 0x30
 800a036:	60bb      	str	r3, [r7, #8]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	d80e      	bhi.n	800a05c <get_ldnumber+0x72>
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	429a      	cmp	r2, r3
 800a044:	d10a      	bne.n	800a05c <get_ldnumber+0x72>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d107      	bne.n	800a05c <get_ldnumber+0x72>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	3301      	adds	r3, #1
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	e002      	b.n	800a066 <get_ldnumber+0x7c>
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4618      	mov	r0, r3
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
	...

0800a074 <check_fs>:
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	70da      	strb	r2, [r3, #3]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30
 800a08c:	6839      	ldr	r1, [r7, #0]
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff f87c 	bl	800918c <move_window>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <check_fs+0x2a>
 800a09a:	2304      	movs	r3, #4
 800a09c:	e038      	b.n	800a110 <check_fs+0x9c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3334      	adds	r3, #52	; 0x34
 800a0a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fdca 	bl	8008c40 <ld_word>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d001      	beq.n	800a0bc <check_fs+0x48>
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e029      	b.n	800a110 <check_fs+0x9c>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0c2:	2be9      	cmp	r3, #233	; 0xe9
 800a0c4:	d009      	beq.n	800a0da <check_fs+0x66>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0cc:	2beb      	cmp	r3, #235	; 0xeb
 800a0ce:	d11e      	bne.n	800a10e <check_fs+0x9a>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a0d6:	2b90      	cmp	r3, #144	; 0x90
 800a0d8:	d119      	bne.n	800a10e <check_fs+0x9a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	3334      	adds	r3, #52	; 0x34
 800a0de:	3336      	adds	r3, #54	; 0x36
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fdc5 	bl	8008c70 <ld_dword>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <check_fs+0xa4>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d101      	bne.n	800a0f6 <check_fs+0x82>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e00c      	b.n	800a110 <check_fs+0x9c>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3334      	adds	r3, #52	; 0x34
 800a0fa:	3352      	adds	r3, #82	; 0x52
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe fdb7 	bl	8008c70 <ld_dword>
 800a102:	4603      	mov	r3, r0
 800a104:	4a05      	ldr	r2, [pc, #20]	; (800a11c <check_fs+0xa8>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d101      	bne.n	800a10e <check_fs+0x9a>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e000      	b.n	800a110 <check_fs+0x9c>
 800a10e:	2302      	movs	r3, #2
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	00544146 	.word	0x00544146
 800a11c:	33544146 	.word	0x33544146

0800a120 <find_volume>:
 800a120:	b580      	push	{r7, lr}
 800a122:	b096      	sub	sp, #88	; 0x58
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff ff58 	bl	8009fea <get_ldnumber>
 800a13a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da01      	bge.n	800a146 <find_volume+0x26>
 800a142:	230b      	movs	r3, #11
 800a144:	e235      	b.n	800a5b2 <find_volume+0x492>
 800a146:	4aa5      	ldr	r2, [pc, #660]	; (800a3dc <find_volume+0x2bc>)
 800a148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a14e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <find_volume+0x3a>
 800a156:	230c      	movs	r3, #12
 800a158:	e22b      	b.n	800a5b2 <find_volume+0x492>
 800a15a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a15c:	f7fe fe70 	bl	8008e40 <lock_fs>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <find_volume+0x4a>
 800a166:	230f      	movs	r3, #15
 800a168:	e223      	b.n	800a5b2 <find_volume+0x492>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	79fb      	ldrb	r3, [r7, #7]
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	71fb      	strb	r3, [r7, #7]
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01a      	beq.n	800a1b6 <find_volume+0x96>
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe fcbd 	bl	8008b04 <disk_status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10c      	bne.n	800a1b6 <find_volume+0x96>
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d007      	beq.n	800a1b2 <find_volume+0x92>
 800a1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <find_volume+0x92>
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	e1ff      	b.n	800a5b2 <find_volume+0x492>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e1fd      	b.n	800a5b2 <find_volume+0x492>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	705a      	strb	r2, [r3, #1]
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fcb5 	bl	8008b38 <disk_initialize>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <find_volume+0xc4>
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e1e6      	b.n	800a5b2 <find_volume+0x492>
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d007      	beq.n	800a1fa <find_volume+0xda>
 800a1ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <find_volume+0xda>
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	e1db      	b.n	800a5b2 <find_volume+0x492>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	653b      	str	r3, [r7, #80]	; 0x50
 800a1fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a202:	f7ff ff37 	bl	800a074 <check_fs>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a210:	2b02      	cmp	r3, #2
 800a212:	d149      	bne.n	800a2a8 <find_volume+0x188>
 800a214:	2300      	movs	r3, #0
 800a216:	643b      	str	r3, [r7, #64]	; 0x40
 800a218:	e01e      	b.n	800a258 <find_volume+0x138>
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a228:	4413      	add	r3, r2
 800a22a:	633b      	str	r3, [r7, #48]	; 0x30
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	3304      	adds	r3, #4
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d006      	beq.n	800a244 <find_volume+0x124>
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	3308      	adds	r3, #8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fd18 	bl	8008c70 <ld_dword>
 800a240:	4602      	mov	r2, r0
 800a242:	e000      	b.n	800a246 <find_volume+0x126>
 800a244:	2200      	movs	r2, #0
 800a246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	3358      	adds	r3, #88	; 0x58
 800a24c:	443b      	add	r3, r7
 800a24e:	f843 2c44 	str.w	r2, [r3, #-68]
 800a252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a254:	3301      	adds	r3, #1
 800a256:	643b      	str	r3, [r7, #64]	; 0x40
 800a258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d9dd      	bls.n	800a21a <find_volume+0xfa>
 800a25e:	2300      	movs	r3, #0
 800a260:	643b      	str	r3, [r7, #64]	; 0x40
 800a262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <find_volume+0x14e>
 800a268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26a:	3b01      	subs	r3, #1
 800a26c:	643b      	str	r3, [r7, #64]	; 0x40
 800a26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	3358      	adds	r3, #88	; 0x58
 800a274:	443b      	add	r3, r7
 800a276:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a27a:	653b      	str	r3, [r7, #80]	; 0x50
 800a27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <find_volume+0x16e>
 800a282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a286:	f7ff fef5 	bl	800a074 <check_fs>
 800a28a:	4603      	mov	r3, r0
 800a28c:	e000      	b.n	800a290 <find_volume+0x170>
 800a28e:	2303      	movs	r3, #3
 800a290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d905      	bls.n	800a2a8 <find_volume+0x188>
 800a29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a29e:	3301      	adds	r3, #1
 800a2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d9e2      	bls.n	800a26e <find_volume+0x14e>
 800a2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d101      	bne.n	800a2b4 <find_volume+0x194>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e17e      	b.n	800a5b2 <find_volume+0x492>
 800a2b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d901      	bls.n	800a2c0 <find_volume+0x1a0>
 800a2bc:	230d      	movs	r3, #13
 800a2be:	e178      	b.n	800a5b2 <find_volume+0x492>
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	3334      	adds	r3, #52	; 0x34
 800a2c4:	330b      	adds	r3, #11
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fcba 	bl	8008c40 <ld_word>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d2:	d001      	beq.n	800a2d8 <find_volume+0x1b8>
 800a2d4:	230d      	movs	r3, #13
 800a2d6:	e16c      	b.n	800a5b2 <find_volume+0x492>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	3334      	adds	r3, #52	; 0x34
 800a2dc:	3316      	adds	r3, #22
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fcae 	bl	8008c40 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <find_volume+0x1dc>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	3334      	adds	r3, #52	; 0x34
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fcbb 	bl	8008c70 <ld_dword>
 800a2fa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a300:	61da      	str	r2, [r3, #28]
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	709a      	strb	r2, [r3, #2]
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d005      	beq.n	800a320 <find_volume+0x200>
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	789b      	ldrb	r3, [r3, #2]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d001      	beq.n	800a320 <find_volume+0x200>
 800a31c:	230d      	movs	r3, #13
 800a31e:	e148      	b.n	800a5b2 <find_volume+0x492>
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	461a      	mov	r2, r3
 800a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a328:	fb02 f303 	mul.w	r3, r2, r3
 800a32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a334:	b29a      	uxth	r2, r3
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	815a      	strh	r2, [r3, #10]
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d008      	beq.n	800a354 <find_volume+0x234>
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	895b      	ldrh	r3, [r3, #10]
 800a346:	461a      	mov	r2, r3
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	895b      	ldrh	r3, [r3, #10]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <find_volume+0x238>
 800a354:	230d      	movs	r3, #13
 800a356:	e12c      	b.n	800a5b2 <find_volume+0x492>
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	3334      	adds	r3, #52	; 0x34
 800a35c:	3311      	adds	r3, #17
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fc6e 	bl	8008c40 <ld_word>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	811a      	strh	r2, [r3, #8]
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	891b      	ldrh	r3, [r3, #8]
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	b29b      	uxth	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <find_volume+0x25e>
 800a37a:	230d      	movs	r3, #13
 800a37c:	e119      	b.n	800a5b2 <find_volume+0x492>
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	3334      	adds	r3, #52	; 0x34
 800a382:	3313      	adds	r3, #19
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fc5b 	bl	8008c40 <ld_word>
 800a38a:	4603      	mov	r3, r0
 800a38c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a390:	2b00      	cmp	r3, #0
 800a392:	d106      	bne.n	800a3a2 <find_volume+0x282>
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	3334      	adds	r3, #52	; 0x34
 800a398:	3320      	adds	r3, #32
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fc68 	bl	8008c70 <ld_dword>
 800a3a0:	64b8      	str	r0, [r7, #72]	; 0x48
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	3334      	adds	r3, #52	; 0x34
 800a3a6:	330e      	adds	r3, #14
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fc49 	bl	8008c40 <ld_word>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <find_volume+0x29c>
 800a3b8:	230d      	movs	r3, #13
 800a3ba:	e0fa      	b.n	800a5b2 <find_volume+0x492>
 800a3bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c0:	4413      	add	r3, r2
 800a3c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3c4:	8912      	ldrh	r2, [r2, #8]
 800a3c6:	0912      	lsrs	r2, r2, #4
 800a3c8:	b292      	uxth	r2, r2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d204      	bcs.n	800a3e0 <find_volume+0x2c0>
 800a3d6:	230d      	movs	r3, #13
 800a3d8:	e0eb      	b.n	800a5b2 <find_volume+0x492>
 800a3da:	bf00      	nop
 800a3dc:	2000af08 	.word	0x2000af08
 800a3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e8:	8952      	ldrh	r2, [r2, #10]
 800a3ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <find_volume+0x2da>
 800a3f6:	230d      	movs	r3, #13
 800a3f8:	e0db      	b.n	800a5b2 <find_volume+0x492>
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a406:	4293      	cmp	r3, r2
 800a408:	d802      	bhi.n	800a410 <find_volume+0x2f0>
 800a40a:	2302      	movs	r3, #2
 800a40c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a416:	4293      	cmp	r3, r2
 800a418:	d802      	bhi.n	800a420 <find_volume+0x300>
 800a41a:	2301      	movs	r3, #1
 800a41c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	1c9a      	adds	r2, r3, #2
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	619a      	str	r2, [r3, #24]
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a42c:	621a      	str	r2, [r3, #32]
 800a42e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a432:	441a      	add	r2, r3
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	625a      	str	r2, [r3, #36]	; 0x24
 800a438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	441a      	add	r2, r3
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
 800a442:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a446:	2b03      	cmp	r3, #3
 800a448:	d11e      	bne.n	800a488 <find_volume+0x368>
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	3334      	adds	r3, #52	; 0x34
 800a44e:	332a      	adds	r3, #42	; 0x2a
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fbf5 	bl	8008c40 <ld_word>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <find_volume+0x340>
 800a45c:	230d      	movs	r3, #13
 800a45e:	e0a8      	b.n	800a5b2 <find_volume+0x492>
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	891b      	ldrh	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <find_volume+0x34c>
 800a468:	230d      	movs	r3, #13
 800a46a:	e0a2      	b.n	800a5b2 <find_volume+0x492>
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	3334      	adds	r3, #52	; 0x34
 800a470:	332c      	adds	r3, #44	; 0x2c
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fbfc 	bl	8008c70 <ld_dword>
 800a478:	4602      	mov	r2, r0
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	629a      	str	r2, [r3, #40]	; 0x28
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	647b      	str	r3, [r7, #68]	; 0x44
 800a486:	e01f      	b.n	800a4c8 <find_volume+0x3a8>
 800a488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48a:	891b      	ldrh	r3, [r3, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <find_volume+0x374>
 800a490:	230d      	movs	r3, #13
 800a492:	e08e      	b.n	800a5b2 <find_volume+0x492>
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49a:	441a      	add	r2, r3
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
 800a4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d103      	bne.n	800a4b0 <find_volume+0x390>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	e00a      	b.n	800a4c6 <find_volume+0x3a6>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	699a      	ldr	r2, [r3, #24]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	4413      	add	r3, r2
 800a4ba:	085a      	lsrs	r2, r3, #1
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	4413      	add	r3, r2
 800a4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	69da      	ldr	r2, [r3, #28]
 800a4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4d2:	0a5b      	lsrs	r3, r3, #9
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d201      	bcs.n	800a4dc <find_volume+0x3bc>
 800a4d8:	230d      	movs	r3, #13
 800a4da:	e06a      	b.n	800a5b2 <find_volume+0x492>
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	615a      	str	r2, [r3, #20]
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	695a      	ldr	r2, [r3, #20]
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	611a      	str	r2, [r3, #16]
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	2280      	movs	r2, #128	; 0x80
 800a4f0:	711a      	strb	r2, [r3, #4]
 800a4f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d149      	bne.n	800a58e <find_volume+0x46e>
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	3334      	adds	r3, #52	; 0x34
 800a4fe:	3330      	adds	r3, #48	; 0x30
 800a500:	4618      	mov	r0, r3
 800a502:	f7fe fb9d 	bl	8008c40 <ld_word>
 800a506:	4603      	mov	r3, r0
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d140      	bne.n	800a58e <find_volume+0x46e>
 800a50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a50e:	3301      	adds	r3, #1
 800a510:	4619      	mov	r1, r3
 800a512:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a514:	f7fe fe3a 	bl	800918c <move_window>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d137      	bne.n	800a58e <find_volume+0x46e>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	2200      	movs	r2, #0
 800a522:	711a      	strb	r2, [r3, #4]
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	3334      	adds	r3, #52	; 0x34
 800a528:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fb87 	bl	8008c40 <ld_word>
 800a532:	4603      	mov	r3, r0
 800a534:	461a      	mov	r2, r3
 800a536:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d127      	bne.n	800a58e <find_volume+0x46e>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	3334      	adds	r3, #52	; 0x34
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fb94 	bl	8008c70 <ld_dword>
 800a548:	4603      	mov	r3, r0
 800a54a:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <find_volume+0x49c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d11e      	bne.n	800a58e <find_volume+0x46e>
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	3334      	adds	r3, #52	; 0x34
 800a554:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fb89 	bl	8008c70 <ld_dword>
 800a55e:	4603      	mov	r3, r0
 800a560:	4a17      	ldr	r2, [pc, #92]	; (800a5c0 <find_volume+0x4a0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d113      	bne.n	800a58e <find_volume+0x46e>
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	3334      	adds	r3, #52	; 0x34
 800a56a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fb7e 	bl	8008c70 <ld_dword>
 800a574:	4602      	mov	r2, r0
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	615a      	str	r2, [r3, #20]
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	3334      	adds	r3, #52	; 0x34
 800a57e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fb74 	bl	8008c70 <ld_dword>
 800a588:	4602      	mov	r2, r0
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	611a      	str	r2, [r3, #16]
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a594:	701a      	strb	r2, [r3, #0]
 800a596:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <find_volume+0x4a4>)
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <find_volume+0x4a4>)
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	4b08      	ldr	r3, [pc, #32]	; (800a5c4 <find_volume+0x4a4>)
 800a5a4:	881a      	ldrh	r2, [r3, #0]
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	80da      	strh	r2, [r3, #6]
 800a5aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ac:	f7fe fd86 	bl	80090bc <clear_lock>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3758      	adds	r7, #88	; 0x58
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	41615252 	.word	0x41615252
 800a5c0:	61417272 	.word	0x61417272
 800a5c4:	2000af0c 	.word	0x2000af0c

0800a5c8 <validate>:
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
 800a5d2:	2309      	movs	r3, #9
 800a5d4:	73fb      	strb	r3, [r7, #15]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02e      	beq.n	800a63a <validate+0x72>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d02a      	beq.n	800a63a <validate+0x72>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d025      	beq.n	800a63a <validate+0x72>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	889a      	ldrh	r2, [r3, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	88db      	ldrh	r3, [r3, #6]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d11e      	bne.n	800a63a <validate+0x72>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fc1d 	bl	8008e40 <lock_fs>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d014      	beq.n	800a636 <validate+0x6e>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	785b      	ldrb	r3, [r3, #1]
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fa76 	bl	8008b04 <disk_status>
 800a618:	4603      	mov	r3, r0
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <validate+0x60>
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
 800a626:	e008      	b.n	800a63a <validate+0x72>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fc1c 	bl	8008e6c <unlock_fs>
 800a634:	e001      	b.n	800a63a <validate+0x72>
 800a636:	230f      	movs	r3, #15
 800a638:	73fb      	strb	r3, [r7, #15]
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d102      	bne.n	800a646 <validate+0x7e>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	e000      	b.n	800a648 <validate+0x80>
 800a646:	2300      	movs	r3, #0
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <f_mount>:
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	71fb      	strb	r3, [r7, #7]
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	613b      	str	r3, [r7, #16]
 800a66a:	f107 0310 	add.w	r3, r7, #16
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff fcbb 	bl	8009fea <get_ldnumber>
 800a674:	61f8      	str	r0, [r7, #28]
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da01      	bge.n	800a680 <f_mount+0x28>
 800a67c:	230b      	movs	r3, #11
 800a67e:	e048      	b.n	800a712 <f_mount+0xba>
 800a680:	4a26      	ldr	r2, [pc, #152]	; (800a71c <f_mount+0xc4>)
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a688:	61bb      	str	r3, [r7, #24]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00f      	beq.n	800a6b0 <f_mount+0x58>
 800a690:	69b8      	ldr	r0, [r7, #24]
 800a692:	f7fe fd13 	bl	80090bc <clear_lock>
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fced 	bl	800b07a <ff_del_syncobj>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <f_mount+0x52>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e033      	b.n	800a712 <f_mount+0xba>
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00f      	beq.n	800a6d6 <f_mount+0x7e>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	330c      	adds	r3, #12
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	4610      	mov	r0, r2
 800a6c8:	f000 fcb7 	bl	800b03a <ff_cre_syncobj>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <f_mount+0x7e>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e01d      	b.n	800a712 <f_mount+0xba>
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	4910      	ldr	r1, [pc, #64]	; (800a71c <f_mount+0xc4>)
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <f_mount+0x94>
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d001      	beq.n	800a6f0 <f_mount+0x98>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	e010      	b.n	800a712 <f_mount+0xba>
 800a6f0:	f107 010c 	add.w	r1, r7, #12
 800a6f4:	f107 0308 	add.w	r3, r7, #8
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff fd10 	bl	800a120 <find_volume>
 800a700:	4603      	mov	r3, r0
 800a702:	75fb      	strb	r3, [r7, #23]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	7dfa      	ldrb	r2, [r7, #23]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fbae 	bl	8008e6c <unlock_fs>
 800a710:	7dfb      	ldrb	r3, [r7, #23]
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	2000af08 	.word	0x2000af08

0800a720 <f_open>:
 800a720:	b580      	push	{r7, lr}
 800a722:	b098      	sub	sp, #96	; 0x60
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <f_open+0x18>
 800a734:	2309      	movs	r3, #9
 800a736:	e1b4      	b.n	800aaa2 <f_open+0x382>
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a73e:	71fb      	strb	r3, [r7, #7]
 800a740:	79fa      	ldrb	r2, [r7, #7]
 800a742:	f107 0110 	add.w	r1, r7, #16
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7ff fce8 	bl	800a120 <find_volume>
 800a750:	4603      	mov	r3, r0
 800a752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f040 8191 	bne.w	800aa82 <f_open+0x362>
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	f107 0314 	add.w	r3, r7, #20
 800a76a:	4611      	mov	r1, r2
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fbcb 	bl	8009f08 <follow_path>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d11a      	bne.n	800a7b6 <f_open+0x96>
 800a780:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a784:	b25b      	sxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	da03      	bge.n	800a792 <f_open+0x72>
 800a78a:	2306      	movs	r3, #6
 800a78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a790:	e011      	b.n	800a7b6 <f_open+0x96>
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	f023 0301 	bic.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf14      	ite	ne
 800a79c:	2301      	movne	r3, #1
 800a79e:	2300      	moveq	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f107 0314 	add.w	r3, r7, #20
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fb7a 	bl	8008ea4 <chk_lock>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7b6:	79fb      	ldrb	r3, [r7, #7]
 800a7b8:	f003 031c 	and.w	r3, r3, #28
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d07f      	beq.n	800a8c0 <f_open+0x1a0>
 800a7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d017      	beq.n	800a7f8 <f_open+0xd8>
 800a7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d10e      	bne.n	800a7ee <f_open+0xce>
 800a7d0:	f7fe fbc4 	bl	8008f5c <enq_lock>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d006      	beq.n	800a7e8 <f_open+0xc8>
 800a7da:	f107 0314 	add.w	r3, r7, #20
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fa6d 	bl	8009cbe <dir_register>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	e000      	b.n	800a7ea <f_open+0xca>
 800a7e8:	2312      	movs	r3, #18
 800a7ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	f043 0308 	orr.w	r3, r3, #8
 800a7f4:	71fb      	strb	r3, [r7, #7]
 800a7f6:	e010      	b.n	800a81a <f_open+0xfa>
 800a7f8:	7ebb      	ldrb	r3, [r7, #26]
 800a7fa:	f003 0311 	and.w	r3, r3, #17
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <f_open+0xea>
 800a802:	2307      	movs	r3, #7
 800a804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a808:	e007      	b.n	800a81a <f_open+0xfa>
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <f_open+0xfa>
 800a814:	2308      	movs	r3, #8
 800a816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d168      	bne.n	800a8f4 <f_open+0x1d4>
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	f003 0308 	and.w	r3, r3, #8
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d063      	beq.n	800a8f4 <f_open+0x1d4>
 800a82c:	f7fd fc2e 	bl	800808c <get_fattime>
 800a830:	6538      	str	r0, [r7, #80]	; 0x50
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	330e      	adds	r3, #14
 800a836:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fa57 	bl	8008cec <st_dword>
 800a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a840:	3316      	adds	r3, #22
 800a842:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fa51 	bl	8008cec <st_dword>
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	330b      	adds	r3, #11
 800a84e:	2220      	movs	r2, #32
 800a850:	701a      	strb	r2, [r3, #0]
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff f99c 	bl	8009b96 <ld_clust>
 800a85e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a864:	2200      	movs	r2, #0
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff f9b4 	bl	8009bd4 <st_clust>
 800a86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86e:	331c      	adds	r3, #28
 800a870:	2100      	movs	r1, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fa3a 	bl	8008cec <st_dword>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	2201      	movs	r2, #1
 800a87c:	70da      	strb	r2, [r3, #3]
 800a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d037      	beq.n	800a8f4 <f_open+0x1d4>
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	653b      	str	r3, [r7, #80]	; 0x50
 800a88a:	f107 0314 	add.w	r3, r7, #20
 800a88e:	2200      	movs	r2, #0
 800a890:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe fec7 	bl	8009626 <remove_chain>
 800a898:	4603      	mov	r3, r0
 800a89a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a89e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d126      	bne.n	800a8f4 <f_open+0x1d4>
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fc6e 	bl	800918c <move_window>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8ba:	3a01      	subs	r2, #1
 800a8bc:	611a      	str	r2, [r3, #16]
 800a8be:	e019      	b.n	800a8f4 <f_open+0x1d4>
 800a8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d115      	bne.n	800a8f4 <f_open+0x1d4>
 800a8c8:	7ebb      	ldrb	r3, [r7, #26]
 800a8ca:	f003 0310 	and.w	r3, r3, #16
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <f_open+0x1ba>
 800a8d2:	2304      	movs	r3, #4
 800a8d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8d8:	e00c      	b.n	800a8f4 <f_open+0x1d4>
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <f_open+0x1d4>
 800a8e4:	7ebb      	ldrb	r3, [r7, #26]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <f_open+0x1d4>
 800a8ee:	2307      	movs	r3, #7
 800a8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d128      	bne.n	800a94e <f_open+0x22e>
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <f_open+0x1ee>
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90c:	71fb      	strb	r3, [r7, #7]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	625a      	str	r2, [r3, #36]	; 0x24
 800a916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	629a      	str	r2, [r3, #40]	; 0x28
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	f023 0301 	bic.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	bf14      	ite	ne
 800a926:	2301      	movne	r3, #1
 800a928:	2300      	moveq	r3, #0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	f107 0314 	add.w	r3, r7, #20
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe fb33 	bl	8008fa0 <inc_lock>
 800a93a:	4602      	mov	r2, r0
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	611a      	str	r2, [r3, #16]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d102      	bne.n	800a94e <f_open+0x22e>
 800a948:	2302      	movs	r3, #2
 800a94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a94e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a952:	2b00      	cmp	r3, #0
 800a954:	f040 8095 	bne.w	800aa82 <f_open+0x362>
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff f919 	bl	8009b96 <ld_clust>
 800a964:	4602      	mov	r2, r0
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	609a      	str	r2, [r3, #8]
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	331c      	adds	r3, #28
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe f97e 	bl	8008c70 <ld_dword>
 800a974:	4602      	mov	r2, r0
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	62da      	str	r2, [r3, #44]	; 0x2c
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	88da      	ldrh	r2, [r3, #6]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	809a      	strh	r2, [r3, #4]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	79fa      	ldrb	r2, [r7, #7]
 800a992:	751a      	strb	r2, [r3, #20]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	755a      	strb	r2, [r3, #21]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	621a      	str	r2, [r3, #32]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	619a      	str	r2, [r3, #24]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3330      	adds	r3, #48	; 0x30
 800a9aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe f9e8 	bl	8008d86 <mem_set>
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d060      	beq.n	800aa82 <f_open+0x362>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d05c      	beq.n	800aa82 <f_open+0x362>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	619a      	str	r2, [r3, #24]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	895b      	ldrh	r3, [r3, #10]
 800a9d4:	025b      	lsls	r3, r3, #9
 800a9d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a9e4:	e016      	b.n	800aa14 <f_open+0x2f4>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fc89 	bl	8009302 <get_fat>
 800a9f0:	65b8      	str	r0, [r7, #88]	; 0x58
 800a9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d802      	bhi.n	800a9fe <f_open+0x2de>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa04:	d102      	bne.n	800aa0c <f_open+0x2ec>
 800aa06:	2301      	movs	r3, #1
 800aa08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	657b      	str	r3, [r7, #84]	; 0x54
 800aa14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d103      	bne.n	800aa24 <f_open+0x304>
 800aa1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d8e0      	bhi.n	800a9e6 <f_open+0x2c6>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa28:	61da      	str	r2, [r3, #28]
 800aa2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d127      	bne.n	800aa82 <f_open+0x362>
 800aa32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d022      	beq.n	800aa82 <f_open+0x362>
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe fc3f 	bl	80092c4 <clust2sect>
 800aa46:	6478      	str	r0, [r7, #68]	; 0x44
 800aa48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d103      	bne.n	800aa56 <f_open+0x336>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa54:	e015      	b.n	800aa82 <f_open+0x362>
 800aa56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa58:	0a5a      	lsrs	r2, r3, #9
 800aa5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa5c:	441a      	add	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	621a      	str	r2, [r3, #32]
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	7858      	ldrb	r0, [r3, #1]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	2301      	movs	r3, #1
 800aa72:	f7fe f887 	bl	8008b84 <disk_read>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <f_open+0x362>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <f_open+0x370>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe f9e7 	bl	8008e6c <unlock_fs>
 800aa9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3760      	adds	r7, #96	; 0x60
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <f_write>:
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b08c      	sub	sp, #48	; 0x30
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	61fb      	str	r3, [r7, #28]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f107 0210 	add.w	r2, r7, #16
 800aac8:	4611      	mov	r1, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fd7c 	bl	800a5c8 <validate>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d107      	bne.n	800aaee <f_write+0x44>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	7d5b      	ldrb	r3, [r3, #21]
 800aae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <f_write+0x58>
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe f9b8 	bl	8008e6c <unlock_fs>
 800aafc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab00:	e173      	b.n	800adea <f_write+0x340>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	7d1b      	ldrb	r3, [r3, #20]
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <f_write+0x72>
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2107      	movs	r1, #7
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f9aa 	bl	8008e6c <unlock_fs>
 800ab18:	2307      	movs	r3, #7
 800ab1a:	e166      	b.n	800adea <f_write+0x340>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	699a      	ldr	r2, [r3, #24]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	441a      	add	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	f080 814b 	bcs.w	800adc4 <f_write+0x31a>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	43db      	mvns	r3, r3
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	e145      	b.n	800adc4 <f_write+0x31a>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 8101 	bne.w	800ad48 <f_write+0x29e>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	0a5b      	lsrs	r3, r3, #9
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	8952      	ldrh	r2, [r2, #10]
 800ab50:	3a01      	subs	r2, #1
 800ab52:	4013      	ands	r3, r2
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d14d      	bne.n	800abf8 <f_write+0x14e>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10c      	bne.n	800ab7e <f_write+0xd4>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11a      	bne.n	800aba6 <f_write+0xfc>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2100      	movs	r1, #0
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fdbb 	bl	80096f0 <create_chain>
 800ab7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab7c:	e013      	b.n	800aba6 <f_write+0xfc>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d007      	beq.n	800ab96 <f_write+0xec>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7fe fe47 	bl	8009820 <clmt_clust>
 800ab92:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab94:	e007      	b.n	800aba6 <f_write+0xfc>
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	4610      	mov	r0, r2
 800aba0:	f7fe fda6 	bl	80096f0 <create_chain>
 800aba4:	62b8      	str	r0, [r7, #40]	; 0x28
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 8110 	beq.w	800adce <f_write+0x324>
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d109      	bne.n	800abc8 <f_write+0x11e>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2202      	movs	r2, #2
 800abb8:	755a      	strb	r2, [r3, #21]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	2102      	movs	r1, #2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe f954 	bl	8008e6c <unlock_fs>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e110      	b.n	800adea <f_write+0x340>
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abce:	d109      	bne.n	800abe4 <f_write+0x13a>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2201      	movs	r2, #1
 800abd4:	755a      	strb	r2, [r3, #21]
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	2101      	movs	r1, #1
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe f946 	bl	8008e6c <unlock_fs>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e102      	b.n	800adea <f_write+0x340>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe8:	61da      	str	r2, [r3, #28]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <f_write+0x14e>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf6:	609a      	str	r2, [r3, #8]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	7d1b      	ldrb	r3, [r3, #20]
 800abfc:	b25b      	sxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da1d      	bge.n	800ac3e <f_write+0x194>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	7858      	ldrb	r0, [r3, #1]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1a      	ldr	r2, [r3, #32]
 800ac10:	2301      	movs	r3, #1
 800ac12:	f7fd ffd7 	bl	8008bc4 <disk_write>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <f_write+0x186>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	755a      	strb	r2, [r3, #21]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2101      	movs	r1, #1
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f920 	bl	8008e6c <unlock_fs>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e0dc      	b.n	800adea <f_write+0x340>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	7d1b      	ldrb	r3, [r3, #20]
 800ac34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	751a      	strb	r2, [r3, #20]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	4619      	mov	r1, r3
 800ac46:	4610      	mov	r0, r2
 800ac48:	f7fe fb3c 	bl	80092c4 <clust2sect>
 800ac4c:	6178      	str	r0, [r7, #20]
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <f_write+0x1be>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2202      	movs	r2, #2
 800ac58:	755a      	strb	r2, [r3, #21]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2102      	movs	r1, #2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe f904 	bl	8008e6c <unlock_fs>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e0c0      	b.n	800adea <f_write+0x340>
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0a5b      	lsrs	r3, r3, #9
 800ac74:	623b      	str	r3, [r7, #32]
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d041      	beq.n	800ad00 <f_write+0x256>
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	4413      	add	r3, r2
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	8952      	ldrh	r2, [r2, #10]
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d905      	bls.n	800ac96 <f_write+0x1ec>
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	895b      	ldrh	r3, [r3, #10]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	623b      	str	r3, [r7, #32]
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	7858      	ldrb	r0, [r3, #1]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	69f9      	ldr	r1, [r7, #28]
 800aca0:	f7fd ff90 	bl	8008bc4 <disk_write>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <f_write+0x214>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2201      	movs	r2, #1
 800acae:	755a      	strb	r2, [r3, #21]
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2101      	movs	r1, #1
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe f8d9 	bl	8008e6c <unlock_fs>
 800acba:	2301      	movs	r3, #1
 800acbc:	e095      	b.n	800adea <f_write+0x340>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a1a      	ldr	r2, [r3, #32]
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	6a3a      	ldr	r2, [r7, #32]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d915      	bls.n	800acf8 <f_write+0x24e>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a1a      	ldr	r2, [r3, #32]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	025b      	lsls	r3, r3, #9
 800acdc:	69fa      	ldr	r2, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ace4:	4619      	mov	r1, r3
 800ace6:	f7fe f82d 	bl	8008d44 <mem_cpy>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	7d1b      	ldrb	r3, [r3, #20]
 800acee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	751a      	strb	r2, [r3, #20]
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	025b      	lsls	r3, r3, #9
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
 800acfe:	e044      	b.n	800ad8a <f_write+0x2e0>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d01b      	beq.n	800ad42 <f_write+0x298>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d215      	bcs.n	800ad42 <f_write+0x298>
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	7858      	ldrb	r0, [r3, #1]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad20:	2301      	movs	r3, #1
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	f7fd ff2e 	bl	8008b84 <disk_read>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <f_write+0x298>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	755a      	strb	r2, [r3, #21]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2101      	movs	r1, #1
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe f897 	bl	8008e6c <unlock_fs>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e053      	b.n	800adea <f_write+0x340>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	621a      	str	r2, [r3, #32]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d901      	bls.n	800ad62 <f_write+0x2b8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	627b      	str	r3, [r7, #36]	; 0x24
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad70:	4413      	add	r3, r2
 800ad72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad74:	69f9      	ldr	r1, [r7, #28]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd ffe4 	bl	8008d44 <mem_cpy>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	7d1b      	ldrb	r3, [r3, #20]
 800ad80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	751a      	strb	r2, [r3, #20]
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	4413      	add	r3, r2
 800ad90:	61fb      	str	r3, [r7, #28]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	441a      	add	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	619a      	str	r2, [r3, #24]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	bf38      	it	cc
 800adaa:	461a      	movcc	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	60da      	str	r2, [r3, #12]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	441a      	add	r2, r3
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f47f aeb6 	bne.w	800ab38 <f_write+0x8e>
 800adcc:	e000      	b.n	800add0 <f_write+0x326>
 800adce:	bf00      	nop
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
 800add4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add8:	b2da      	uxtb	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	751a      	strb	r2, [r3, #20]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe f842 	bl	8008e6c <unlock_fs>
 800ade8:	2300      	movs	r3, #0
 800adea:	4618      	mov	r0, r3
 800adec:	3730      	adds	r7, #48	; 0x30
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <f_sync>:
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b086      	sub	sp, #24
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f107 0208 	add.w	r2, r7, #8
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fbe0 	bl	800a5c8 <validate>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	75fb      	strb	r3, [r7, #23]
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d16d      	bne.n	800aeee <f_sync+0xfc>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7d1b      	ldrb	r3, [r3, #20]
 800ae16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d067      	beq.n	800aeee <f_sync+0xfc>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7d1b      	ldrb	r3, [r3, #20]
 800ae22:	b25b      	sxtb	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	da1a      	bge.n	800ae5e <f_sync+0x6c>
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	7858      	ldrb	r0, [r3, #1]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1a      	ldr	r2, [r3, #32]
 800ae36:	2301      	movs	r3, #1
 800ae38:	f7fd fec4 	bl	8008bc4 <disk_write>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <f_sync+0x5e>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2101      	movs	r1, #1
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe f810 	bl	8008e6c <unlock_fs>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e055      	b.n	800aefc <f_sync+0x10a>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	7d1b      	ldrb	r3, [r3, #20]
 800ae54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	751a      	strb	r2, [r3, #20]
 800ae5e:	f7fd f915 	bl	800808c <get_fattime>
 800ae62:	6138      	str	r0, [r7, #16]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe f98d 	bl	800918c <move_window>
 800ae72:	4603      	mov	r3, r0
 800ae74:	75fb      	strb	r3, [r7, #23]
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d138      	bne.n	800aeee <f_sync+0xfc>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	330b      	adds	r3, #11
 800ae86:	781a      	ldrb	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	330b      	adds	r3, #11
 800ae8c:	f042 0220 	orr.w	r2, r2, #32
 800ae90:	b2d2      	uxtb	r2, r2
 800ae92:	701a      	strb	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68f9      	ldr	r1, [r7, #12]
 800aea0:	f7fe fe98 	bl	8009bd4 <st_clust>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f103 021c 	add.w	r2, r3, #28
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7fd ff1b 	bl	8008cec <st_dword>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3316      	adds	r3, #22
 800aeba:	6939      	ldr	r1, [r7, #16]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fd ff15 	bl	8008cec <st_dword>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3312      	adds	r3, #18
 800aec6:	2100      	movs	r1, #0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fd fef4 	bl	8008cb6 <st_word>
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2201      	movs	r2, #1
 800aed2:	70da      	strb	r2, [r3, #3]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe f986 	bl	80091e8 <sync_fs>
 800aedc:	4603      	mov	r3, r0
 800aede:	75fb      	strb	r3, [r7, #23]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7d1b      	ldrb	r3, [r3, #20]
 800aee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	751a      	strb	r2, [r3, #20]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	7dfa      	ldrb	r2, [r7, #23]
 800aef2:	4611      	mov	r1, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fd ffb9 	bl	8008e6c <unlock_fs>
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <f_stat>:
 800af04:	b580      	push	{r7, lr}
 800af06:	b090      	sub	sp, #64	; 0x40
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
 800af0e:	f107 010c 	add.w	r1, r7, #12
 800af12:	1d3b      	adds	r3, r7, #4
 800af14:	2200      	movs	r2, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff f902 	bl	800a120 <find_volume>
 800af1c:	4603      	mov	r3, r0
 800af1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af26:	2b00      	cmp	r3, #0
 800af28:	d11f      	bne.n	800af6a <f_stat+0x66>
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	f107 030c 	add.w	r3, r7, #12
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe ffe8 	bl	8009f08 <follow_path>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af42:	2b00      	cmp	r3, #0
 800af44:	d111      	bne.n	800af6a <f_stat+0x66>
 800af46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	da03      	bge.n	800af58 <f_stat+0x54>
 800af50:	2306      	movs	r3, #6
 800af52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af56:	e008      	b.n	800af6a <f_stat+0x66>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <f_stat+0x66>
 800af5e:	f107 030c 	add.w	r3, r7, #12
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fedc 	bl	8009d22 <get_fileinfo>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800af70:	4611      	mov	r1, r2
 800af72:	4618      	mov	r0, r3
 800af74:	f7fd ff7a 	bl	8008e6c <unlock_fs>
 800af78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af7c:	4618      	mov	r0, r3
 800af7e:	3740      	adds	r7, #64	; 0x40
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <FATFS_LinkDriverEx>:
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
 800af92:	2301      	movs	r3, #1
 800af94:	75fb      	strb	r3, [r7, #23]
 800af96:	2300      	movs	r3, #0
 800af98:	75bb      	strb	r3, [r7, #22]
 800af9a:	4b1f      	ldr	r3, [pc, #124]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800af9c:	7a5b      	ldrb	r3, [r3, #9]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d131      	bne.n	800b008 <FATFS_LinkDriverEx+0x84>
 800afa4:	4b1c      	ldr	r3, [pc, #112]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afa6:	7a5b      	ldrb	r3, [r3, #9]
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afae:	2100      	movs	r1, #0
 800afb0:	5499      	strb	r1, [r3, r2]
 800afb2:	4b19      	ldr	r3, [pc, #100]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afb4:	7a5b      	ldrb	r3, [r3, #9]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	4a17      	ldr	r2, [pc, #92]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	605a      	str	r2, [r3, #4]
 800afc2:	4b15      	ldr	r3, [pc, #84]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afc4:	7a5b      	ldrb	r3, [r3, #9]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afcc:	4413      	add	r3, r2
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	721a      	strb	r2, [r3, #8]
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afd4:	7a5b      	ldrb	r3, [r3, #9]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	b2d1      	uxtb	r1, r2
 800afdc:	4a0e      	ldr	r2, [pc, #56]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afde:	7251      	strb	r1, [r2, #9]
 800afe0:	75bb      	strb	r3, [r7, #22]
 800afe2:	7dbb      	ldrb	r3, [r7, #22]
 800afe4:	3330      	adds	r3, #48	; 0x30
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	701a      	strb	r2, [r3, #0]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3301      	adds	r3, #1
 800aff0:	223a      	movs	r2, #58	; 0x3a
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	3302      	adds	r3, #2
 800aff8:	222f      	movs	r2, #47	; 0x2f
 800affa:	701a      	strb	r2, [r3, #0]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	3303      	adds	r3, #3
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	75fb      	strb	r3, [r7, #23]
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	4618      	mov	r0, r3
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	2000af30 	.word	0x2000af30

0800b01c <FATFS_LinkDriver>:
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
 800b026:	2200      	movs	r2, #0
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff ffaa 	bl	800af84 <FATFS_LinkDriverEx>
 800b030:	4603      	mov	r3, r0
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <ff_cre_syncobj>:
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b086      	sub	sp, #24
 800b03e:	af00      	add	r7, sp, #0
 800b040:	4603      	mov	r3, r0
 800b042:	6039      	str	r1, [r7, #0]
 800b044:	71fb      	strb	r3, [r7, #7]
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	f107 030c 	add.w	r3, r7, #12
 800b052:	2101      	movs	r1, #1
 800b054:	4618      	mov	r0, r3
 800b056:	f000 f8cd 	bl	800b1f4 <osSemaphoreCreate>
 800b05a:	4602      	mov	r2, r0
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf14      	ite	ne
 800b068:	2301      	movne	r3, #1
 800b06a:	2300      	moveq	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	617b      	str	r3, [r7, #20]
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <ff_del_syncobj>:
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f96c 	bl	800b360 <osSemaphoreDelete>
 800b088:	2301      	movs	r3, #1
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <ff_req_grant>:
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f8d8 	bl	800b258 <osSemaphoreWait>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <ff_req_grant+0x20>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <ff_rel_grant>:
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f915 	bl	800b2f4 <osSemaphoreRelease>
 800b0ca:	bf00      	nop
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <makeFreeRtosPriority>:
 800b0d2:	b480      	push	{r7}
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	4603      	mov	r3, r0
 800b0da:	80fb      	strh	r3, [r7, #6]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0e4:	2b84      	cmp	r3, #132	; 0x84
 800b0e6:	d005      	beq.n	800b0f4 <makeFreeRtosPriority+0x22>
 800b0e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	3303      	adds	r3, #3
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <inHandlerMode>:
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	f3ef 8305 	mrs	r3, IPSR
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	bf14      	ite	ne
 800b114:	2301      	movne	r3, #1
 800b116:	2300      	moveq	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <osKernelStart>:
 800b126:	b580      	push	{r7, lr}
 800b128:	af00      	add	r7, sp, #0
 800b12a:	f001 fa67 	bl	800c5fc <vTaskStartScheduler>
 800b12e:	2300      	movs	r3, #0
 800b130:	4618      	mov	r0, r3
 800b132:	bd80      	pop	{r7, pc}

0800b134 <osThreadCreate>:
 800b134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b136:	b089      	sub	sp, #36	; 0x24
 800b138:	af04      	add	r7, sp, #16
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d020      	beq.n	800b188 <osThreadCreate+0x54>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01c      	beq.n	800b188 <osThreadCreate+0x54>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685c      	ldr	r4, [r3, #4]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681d      	ldr	r5, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	691e      	ldr	r6, [r3, #16]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff ffb6 	bl	800b0d2 <makeFreeRtosPriority>
 800b166:	4601      	mov	r1, r0
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	695b      	ldr	r3, [r3, #20]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	6992      	ldr	r2, [r2, #24]
 800b170:	9202      	str	r2, [sp, #8]
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	9100      	str	r1, [sp, #0]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	4632      	mov	r2, r6
 800b17a:	4629      	mov	r1, r5
 800b17c:	4620      	mov	r0, r4
 800b17e:	f001 f85f 	bl	800c240 <xTaskCreateStatic>
 800b182:	4603      	mov	r3, r0
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e01c      	b.n	800b1c2 <osThreadCreate+0x8e>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685c      	ldr	r4, [r3, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681d      	ldr	r5, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	b29e      	uxth	r6, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff ff98 	bl	800b0d2 <makeFreeRtosPriority>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	f107 030c 	add.w	r3, r7, #12
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	9200      	str	r2, [sp, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f001 f8a1 	bl	800c2fa <xTaskCreate>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d001      	beq.n	800b1c2 <osThreadCreate+0x8e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e000      	b.n	800b1c4 <osThreadCreate+0x90>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b1cc <osDelay>:
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <osDelay+0x16>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	e000      	b.n	800b1e4 <osDelay+0x18>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 f9d5 	bl	800c594 <vTaskDelay>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <osSemaphoreCreate>:
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00f      	beq.n	800b226 <osSemaphoreCreate+0x32>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d10a      	bne.n	800b222 <osSemaphoreCreate+0x2e>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2203      	movs	r2, #3
 800b212:	9200      	str	r2, [sp, #0]
 800b214:	2200      	movs	r2, #0
 800b216:	2100      	movs	r1, #0
 800b218:	2001      	movs	r0, #1
 800b21a:	f000 f9d1 	bl	800b5c0 <xQueueGenericCreateStatic>
 800b21e:	4603      	mov	r3, r0
 800b220:	e016      	b.n	800b250 <osSemaphoreCreate+0x5c>
 800b222:	2300      	movs	r3, #0
 800b224:	e014      	b.n	800b250 <osSemaphoreCreate+0x5c>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d110      	bne.n	800b24e <osSemaphoreCreate+0x5a>
 800b22c:	2203      	movs	r2, #3
 800b22e:	2100      	movs	r1, #0
 800b230:	2001      	movs	r0, #1
 800b232:	f000 fa3d 	bl	800b6b0 <xQueueGenericCreate>
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <osSemaphoreCreate+0x56>
 800b23e:	2300      	movs	r3, #0
 800b240:	2200      	movs	r2, #0
 800b242:	2100      	movs	r1, #0
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 fa8d 	bl	800b764 <xQueueGenericSend>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	e000      	b.n	800b250 <osSemaphoreCreate+0x5c>
 800b24e:	2300      	movs	r3, #0
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <osSemaphoreWait>:
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <osSemaphoreWait+0x18>
 800b26c:	2380      	movs	r3, #128	; 0x80
 800b26e:	e03a      	b.n	800b2e6 <osSemaphoreWait+0x8e>
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d103      	bne.n	800b284 <osSemaphoreWait+0x2c>
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	e009      	b.n	800b298 <osSemaphoreWait+0x40>
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d006      	beq.n	800b298 <osSemaphoreWait+0x40>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <osSemaphoreWait+0x40>
 800b294:	2301      	movs	r3, #1
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	f7ff ff33 	bl	800b102 <inHandlerMode>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d017      	beq.n	800b2d2 <osSemaphoreWait+0x7a>
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fdd2 	bl	800be54 <xQueueReceiveFromISR>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d001      	beq.n	800b2ba <osSemaphoreWait+0x62>
 800b2b6:	23ff      	movs	r3, #255	; 0xff
 800b2b8:	e015      	b.n	800b2e6 <osSemaphoreWait+0x8e>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d011      	beq.n	800b2e4 <osSemaphoreWait+0x8c>
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <osSemaphoreWait+0x98>)
 800b2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	e008      	b.n	800b2e4 <osSemaphoreWait+0x8c>
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fcb1 	bl	800bc3c <xQueueSemaphoreTake>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d001      	beq.n	800b2e4 <osSemaphoreWait+0x8c>
 800b2e0:	23ff      	movs	r3, #255	; 0xff
 800b2e2:	e000      	b.n	800b2e6 <osSemaphoreWait+0x8e>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000ed04 	.word	0xe000ed04

0800b2f4 <osSemaphoreRelease>:
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	2300      	movs	r3, #0
 800b302:	60bb      	str	r3, [r7, #8]
 800b304:	f7ff fefd 	bl	800b102 <inHandlerMode>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d016      	beq.n	800b33c <osSemaphoreRelease+0x48>
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fb23 	bl	800b960 <xQueueGiveFromISR>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d001      	beq.n	800b324 <osSemaphoreRelease+0x30>
 800b320:	23ff      	movs	r3, #255	; 0xff
 800b322:	e017      	b.n	800b354 <osSemaphoreRelease+0x60>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d013      	beq.n	800b352 <osSemaphoreRelease+0x5e>
 800b32a:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <osSemaphoreRelease+0x68>)
 800b32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	e00a      	b.n	800b352 <osSemaphoreRelease+0x5e>
 800b33c:	2300      	movs	r3, #0
 800b33e:	2200      	movs	r2, #0
 800b340:	2100      	movs	r1, #0
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa0e 	bl	800b764 <xQueueGenericSend>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d001      	beq.n	800b352 <osSemaphoreRelease+0x5e>
 800b34e:	23ff      	movs	r3, #255	; 0xff
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <osSemaphoreDelete>:
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	f7ff fecb 	bl	800b102 <inHandlerMode>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <osSemaphoreDelete+0x16>
 800b372:	2382      	movs	r3, #130	; 0x82
 800b374:	e003      	b.n	800b37e <osSemaphoreDelete+0x1e>
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fdec 	bl	800bf54 <vQueueDelete>
 800b37c:	2300      	movs	r3, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <vListInitialise>:
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f103 0208 	add.w	r2, r3, #8
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	605a      	str	r2, [r3, #4]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	609a      	str	r2, [r3, #8]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f103 0208 	add.w	r2, r3, #8
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60da      	str	r2, [r3, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f103 0208 	add.w	r2, r3, #8
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	611a      	str	r2, [r3, #16]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <vListInitialiseItem>:
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	611a      	str	r2, [r3, #16]
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <vListInsertEnd>:
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	605a      	str	r2, [r3, #4]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	609a      	str	r2, [r3, #8]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	609a      	str	r2, [r3, #8]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	611a      	str	r2, [r3, #16]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <vListInsert>:
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60bb      	str	r3, [r7, #8]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d103      	bne.n	800b448 <vListInsert+0x20>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	e00c      	b.n	800b462 <vListInsert+0x3a>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3308      	adds	r3, #8
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e002      	b.n	800b456 <vListInsert+0x2e>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d2f6      	bcs.n	800b450 <vListInsert+0x28>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	605a      	str	r2, [r3, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	609a      	str	r2, [r3, #8]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	609a      	str	r2, [r3, #8]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	605a      	str	r2, [r3, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	611a      	str	r2, [r3, #16]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <uxListRemove>:
 800b49a:	b480      	push	{r7}
 800b49c:	b085      	sub	sp, #20
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6892      	ldr	r2, [r2, #8]
 800b4b0:	609a      	str	r2, [r3, #8]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	6852      	ldr	r2, [r2, #4]
 800b4ba:	605a      	str	r2, [r3, #4]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d103      	bne.n	800b4ce <uxListRemove+0x34>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	605a      	str	r2, [r3, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	611a      	str	r2, [r3, #16]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	1e5a      	subs	r2, r3, #1
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
	...

0800b4f0 <xQueueGenericReset>:
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xQueueGenericReset+0x2a>
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	60bb      	str	r3, [r7, #8]
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xQueueGenericReset+0x28>
 800b51a:	f001 ffd3 	bl	800d4c4 <vPortEnterCritical>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	441a      	add	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	609a      	str	r2, [r3, #8]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	639a      	str	r2, [r3, #56]	; 0x38
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	3b01      	subs	r3, #1
 800b54c:	68f9      	ldr	r1, [r7, #12]
 800b54e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b550:	fb01 f303 	mul.w	r3, r1, r3
 800b554:	441a      	add	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	60da      	str	r2, [r3, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	22ff      	movs	r2, #255	; 0xff
 800b55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d114      	bne.n	800b59a <xQueueGenericReset+0xaa>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01a      	beq.n	800b5ae <xQueueGenericReset+0xbe>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3310      	adds	r3, #16
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 fa8f 	bl	800caa0 <xTaskRemoveFromEventList>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d012      	beq.n	800b5ae <xQueueGenericReset+0xbe>
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <xQueueGenericReset+0xcc>)
 800b58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58e:	601a      	str	r2, [r3, #0]
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	e009      	b.n	800b5ae <xQueueGenericReset+0xbe>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3310      	adds	r3, #16
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fef1 	bl	800b386 <vListInitialise>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3324      	adds	r3, #36	; 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff feec 	bl	800b386 <vListInitialise>
 800b5ae:	f001 ffb9 	bl	800d524 <vPortExitCritical>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <xQueueGenericCreateStatic>:
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08e      	sub	sp, #56	; 0x38
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10a      	bne.n	800b5ea <xQueueGenericCreateStatic+0x2a>
 800b5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5e6:	bf00      	nop
 800b5e8:	e7fe      	b.n	800b5e8 <xQueueGenericCreateStatic+0x28>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10a      	bne.n	800b606 <xQueueGenericCreateStatic+0x46>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xQueueGenericCreateStatic+0x44>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <xQueueGenericCreateStatic+0x52>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <xQueueGenericCreateStatic+0x56>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericCreateStatic+0x58>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10a      	bne.n	800b632 <xQueueGenericCreateStatic+0x72>
 800b61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	623b      	str	r3, [r7, #32]
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericCreateStatic+0x70>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <xQueueGenericCreateStatic+0x7e>
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <xQueueGenericCreateStatic+0x82>
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <xQueueGenericCreateStatic+0x84>
 800b642:	2300      	movs	r3, #0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <xQueueGenericCreateStatic+0x9e>
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xQueueGenericCreateStatic+0x9c>
 800b65e:	2348      	movs	r3, #72	; 0x48
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b48      	cmp	r3, #72	; 0x48
 800b666:	d00a      	beq.n	800b67e <xQueueGenericCreateStatic+0xbe>
 800b668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xQueueGenericCreateStatic+0xbc>
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00d      	beq.n	800b6a6 <xQueueGenericCreateStatic+0xe6>
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4613      	mov	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 f83f 	bl	800b724 <prvInitialiseNewQueue>
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3730      	adds	r7, #48	; 0x30
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <xQueueGenericCreate>:
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	; 0x28
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10a      	bne.n	800b6da <xQueueGenericCreate+0x2a>
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <xQueueGenericCreate+0x28>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	fb02 f303 	mul.w	r3, r2, r3
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	3348      	adds	r3, #72	; 0x48
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f002 f80d 	bl	800d708 <pvPortMalloc>
 800b6ee:	61b8      	str	r0, [r7, #24]
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d011      	beq.n	800b71a <xQueueGenericCreate+0x6a>
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	3348      	adds	r3, #72	; 0x48
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b708:	79fa      	ldrb	r2, [r7, #7]
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	4613      	mov	r3, r2
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f805 	bl	800b724 <prvInitialiseNewQueue>
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	4618      	mov	r0, r3
 800b71e:	3720      	adds	r7, #32
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <prvInitialiseNewQueue>:
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	70fb      	strb	r3, [r7, #3]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d103      	bne.n	800b740 <prvInitialiseNewQueue+0x1c>
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e002      	b.n	800b746 <prvInitialiseNewQueue+0x22>
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	641a      	str	r2, [r3, #64]	; 0x40
 800b752:	2101      	movs	r1, #1
 800b754:	69b8      	ldr	r0, [r7, #24]
 800b756:	f7ff fecb 	bl	800b4f0 <xQueueGenericReset>
 800b75a:	bf00      	nop
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
	...

0800b764 <xQueueGenericSend>:
 800b764:	b580      	push	{r7, lr}
 800b766:	b08e      	sub	sp, #56	; 0x38
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
 800b772:	2300      	movs	r3, #0
 800b774:	637b      	str	r3, [r7, #52]	; 0x34
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	633b      	str	r3, [r7, #48]	; 0x30
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <xQueueGenericSend+0x32>
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericSend+0x30>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <xQueueGenericSend+0x40>
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <xQueueGenericSend+0x44>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <xQueueGenericSend+0x46>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <xQueueGenericSend+0x60>
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <xQueueGenericSend+0x5e>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d103      	bne.n	800b7d2 <xQueueGenericSend+0x6e>
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d101      	bne.n	800b7d6 <xQueueGenericSend+0x72>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e000      	b.n	800b7d8 <xQueueGenericSend+0x74>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10a      	bne.n	800b7f2 <xQueueGenericSend+0x8e>
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	623b      	str	r3, [r7, #32]
 800b7ee:	bf00      	nop
 800b7f0:	e7fe      	b.n	800b7f0 <xQueueGenericSend+0x8c>
 800b7f2:	f001 fb15 	bl	800ce20 <xTaskGetSchedulerState>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d102      	bne.n	800b802 <xQueueGenericSend+0x9e>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <xQueueGenericSend+0xa2>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericSend+0xa4>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10a      	bne.n	800b822 <xQueueGenericSend+0xbe>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xQueueGenericSend+0xbc>
 800b822:	f001 fe4f 	bl	800d4c4 <vPortEnterCritical>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	429a      	cmp	r2, r3
 800b830:	d302      	bcc.n	800b838 <xQueueGenericSend+0xd4>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d129      	bne.n	800b88c <xQueueGenericSend+0x128>
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b83e:	f000 fbc4 	bl	800bfca <prvCopyDataToQueue>
 800b842:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d010      	beq.n	800b86e <xQueueGenericSend+0x10a>
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	3324      	adds	r3, #36	; 0x24
 800b850:	4618      	mov	r0, r3
 800b852:	f001 f925 	bl	800caa0 <xTaskRemoveFromEventList>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d013      	beq.n	800b884 <xQueueGenericSend+0x120>
 800b85c:	4b3f      	ldr	r3, [pc, #252]	; (800b95c <xQueueGenericSend+0x1f8>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	e00a      	b.n	800b884 <xQueueGenericSend+0x120>
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	2b00      	cmp	r3, #0
 800b872:	d007      	beq.n	800b884 <xQueueGenericSend+0x120>
 800b874:	4b39      	ldr	r3, [pc, #228]	; (800b95c <xQueueGenericSend+0x1f8>)
 800b876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f001 fe4e 	bl	800d524 <vPortExitCritical>
 800b888:	2301      	movs	r3, #1
 800b88a:	e063      	b.n	800b954 <xQueueGenericSend+0x1f0>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d103      	bne.n	800b89a <xQueueGenericSend+0x136>
 800b892:	f001 fe47 	bl	800d524 <vPortExitCritical>
 800b896:	2300      	movs	r3, #0
 800b898:	e05c      	b.n	800b954 <xQueueGenericSend+0x1f0>
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <xQueueGenericSend+0x14a>
 800b8a0:	f107 0314 	add.w	r3, r7, #20
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 f95d 	bl	800cb64 <vTaskInternalSetTimeOutState>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ae:	f001 fe39 	bl	800d524 <vPortExitCritical>
 800b8b2:	f000 ff0d 	bl	800c6d0 <vTaskSuspendAll>
 800b8b6:	f001 fe05 	bl	800d4c4 <vPortEnterCritical>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c6:	d103      	bne.n	800b8d0 <xQueueGenericSend+0x16c>
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8dc:	d103      	bne.n	800b8e6 <xQueueGenericSend+0x182>
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e6:	f001 fe1d 	bl	800d524 <vPortExitCritical>
 800b8ea:	1d3a      	adds	r2, r7, #4
 800b8ec:	f107 0314 	add.w	r3, r7, #20
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 f94c 	bl	800cb90 <xTaskCheckForTimeOut>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d124      	bne.n	800b948 <xQueueGenericSend+0x1e4>
 800b8fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b900:	f000 fc5b 	bl	800c1ba <prvIsQueueFull>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d018      	beq.n	800b93c <xQueueGenericSend+0x1d8>
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	3310      	adds	r3, #16
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f001 f8a0 	bl	800ca58 <vTaskPlaceOnEventList>
 800b918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91a:	f000 fbe6 	bl	800c0ea <prvUnlockQueue>
 800b91e:	f000 fee5 	bl	800c6ec <xTaskResumeAll>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	f47f af7c 	bne.w	800b822 <xQueueGenericSend+0xbe>
 800b92a:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <xQueueGenericSend+0x1f8>)
 800b92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	e772      	b.n	800b822 <xQueueGenericSend+0xbe>
 800b93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b93e:	f000 fbd4 	bl	800c0ea <prvUnlockQueue>
 800b942:	f000 fed3 	bl	800c6ec <xTaskResumeAll>
 800b946:	e76c      	b.n	800b822 <xQueueGenericSend+0xbe>
 800b948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b94a:	f000 fbce 	bl	800c0ea <prvUnlockQueue>
 800b94e:	f000 fecd 	bl	800c6ec <xTaskResumeAll>
 800b952:	2300      	movs	r3, #0
 800b954:	4618      	mov	r0, r3
 800b956:	3738      	adds	r7, #56	; 0x38
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <xQueueGiveFromISR>:
 800b960:	b580      	push	{r7, lr}
 800b962:	b08e      	sub	sp, #56	; 0x38
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	633b      	str	r3, [r7, #48]	; 0x30
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xQueueGiveFromISR+0x2a>
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	623b      	str	r3, [r7, #32]
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGiveFromISR+0x28>
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00a      	beq.n	800b9a8 <xQueueGiveFromISR+0x48>
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	bf00      	nop
 800b9a6:	e7fe      	b.n	800b9a6 <xQueueGiveFromISR+0x46>
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <xQueueGiveFromISR+0x58>
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <xQueueGiveFromISR+0x5c>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <xQueueGiveFromISR+0x5e>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10a      	bne.n	800b9d8 <xQueueGiveFromISR+0x78>
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	61bb      	str	r3, [r7, #24]
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <xQueueGiveFromISR+0x76>
 800b9d8:	f001 fe56 	bl	800d688 <vPortValidateInterruptPriority>
 800b9dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	617a      	str	r2, [r7, #20]
 800b9f2:	613b      	str	r3, [r7, #16]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d22b      	bcs.n	800ba60 <xQueueGiveFromISR+0x100>
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	639a      	str	r2, [r3, #56]	; 0x38
 800ba1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d112      	bne.n	800ba4a <xQueueGiveFromISR+0xea>
 800ba24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d016      	beq.n	800ba5a <xQueueGiveFromISR+0xfa>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	3324      	adds	r3, #36	; 0x24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 f835 	bl	800caa0 <xTaskRemoveFromEventList>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00e      	beq.n	800ba5a <xQueueGiveFromISR+0xfa>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <xQueueGiveFromISR+0xfa>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2201      	movs	r2, #1
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	e007      	b.n	800ba5a <xQueueGiveFromISR+0xfa>
 800ba4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	b25a      	sxtb	r2, r3
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba5e:	e001      	b.n	800ba64 <xQueueGiveFromISR+0x104>
 800ba60:	2300      	movs	r3, #0
 800ba62:	637b      	str	r3, [r7, #52]	; 0x34
 800ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	bf00      	nop
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba72:	4618      	mov	r0, r3
 800ba74:	3738      	adds	r7, #56	; 0x38
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <xQueueReceive>:
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08c      	sub	sp, #48	; 0x30
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <xQueueReceive+0x30>
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	623b      	str	r3, [r7, #32]
 800baa8:	bf00      	nop
 800baaa:	e7fe      	b.n	800baaa <xQueueReceive+0x2e>
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d103      	bne.n	800baba <xQueueReceive+0x3e>
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <xQueueReceive+0x42>
 800baba:	2301      	movs	r3, #1
 800babc:	e000      	b.n	800bac0 <xQueueReceive+0x44>
 800babe:	2300      	movs	r3, #0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xQueueReceive+0x5e>
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xQueueReceive+0x5c>
 800bada:	f001 f9a1 	bl	800ce20 <xTaskGetSchedulerState>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <xQueueReceive+0x6e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <xQueueReceive+0x72>
 800baea:	2301      	movs	r3, #1
 800baec:	e000      	b.n	800baf0 <xQueueReceive+0x74>
 800baee:	2300      	movs	r3, #0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <xQueueReceive+0x8e>
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xQueueReceive+0x8c>
 800bb0a:	f001 fcdb 	bl	800d4c4 <vPortEnterCritical>
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01f      	beq.n	800bb5a <xQueueReceive+0xde>
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb1e:	f000 fabe 	bl	800c09e <prvCopyDataFromQueue>
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	1e5a      	subs	r2, r3, #1
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	639a      	str	r2, [r3, #56]	; 0x38
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00f      	beq.n	800bb52 <xQueueReceive+0xd6>
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	3310      	adds	r3, #16
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 ffb2 	bl	800caa0 <xTaskRemoveFromEventList>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d007      	beq.n	800bb52 <xQueueReceive+0xd6>
 800bb42:	4b3d      	ldr	r3, [pc, #244]	; (800bc38 <xQueueReceive+0x1bc>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f001 fce7 	bl	800d524 <vPortExitCritical>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e069      	b.n	800bc2e <xQueueReceive+0x1b2>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d103      	bne.n	800bb68 <xQueueReceive+0xec>
 800bb60:	f001 fce0 	bl	800d524 <vPortExitCritical>
 800bb64:	2300      	movs	r3, #0
 800bb66:	e062      	b.n	800bc2e <xQueueReceive+0x1b2>
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <xQueueReceive+0x100>
 800bb6e:	f107 0310 	add.w	r3, r7, #16
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fff6 	bl	800cb64 <vTaskInternalSetTimeOutState>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb7c:	f001 fcd2 	bl	800d524 <vPortExitCritical>
 800bb80:	f000 fda6 	bl	800c6d0 <vTaskSuspendAll>
 800bb84:	f001 fc9e 	bl	800d4c4 <vPortEnterCritical>
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d103      	bne.n	800bb9e <xQueueReceive+0x122>
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d103      	bne.n	800bbb4 <xQueueReceive+0x138>
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb4:	f001 fcb6 	bl	800d524 <vPortExitCritical>
 800bbb8:	1d3a      	adds	r2, r7, #4
 800bbba:	f107 0310 	add.w	r3, r7, #16
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 ffe5 	bl	800cb90 <xTaskCheckForTimeOut>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d123      	bne.n	800bc14 <xQueueReceive+0x198>
 800bbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbce:	f000 fade 	bl	800c18e <prvIsQueueEmpty>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <xQueueReceive+0x18c>
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	3324      	adds	r3, #36	; 0x24
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 ff39 	bl	800ca58 <vTaskPlaceOnEventList>
 800bbe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbe8:	f000 fa7f 	bl	800c0ea <prvUnlockQueue>
 800bbec:	f000 fd7e 	bl	800c6ec <xTaskResumeAll>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d189      	bne.n	800bb0a <xQueueReceive+0x8e>
 800bbf6:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <xQueueReceive+0x1bc>)
 800bbf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	e780      	b.n	800bb0a <xQueueReceive+0x8e>
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 fa6e 	bl	800c0ea <prvUnlockQueue>
 800bc0e:	f000 fd6d 	bl	800c6ec <xTaskResumeAll>
 800bc12:	e77a      	b.n	800bb0a <xQueueReceive+0x8e>
 800bc14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc16:	f000 fa68 	bl	800c0ea <prvUnlockQueue>
 800bc1a:	f000 fd67 	bl	800c6ec <xTaskResumeAll>
 800bc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc20:	f000 fab5 	bl	800c18e <prvIsQueueEmpty>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f43f af6f 	beq.w	800bb0a <xQueueReceive+0x8e>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3730      	adds	r7, #48	; 0x30
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <xQueueSemaphoreTake>:
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08e      	sub	sp, #56	; 0x38
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
 800bc46:	2300      	movs	r3, #0
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc4e:	2300      	movs	r3, #0
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <xQueueSemaphoreTake+0x32>
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	623b      	str	r3, [r7, #32]
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <xQueueSemaphoreTake+0x30>
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <xQueueSemaphoreTake+0x50>
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <xQueueSemaphoreTake+0x4e>
 800bc8c:	f001 f8c8 	bl	800ce20 <xTaskGetSchedulerState>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d102      	bne.n	800bc9c <xQueueSemaphoreTake+0x60>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <xQueueSemaphoreTake+0x64>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <xQueueSemaphoreTake+0x66>
 800bca0:	2300      	movs	r3, #0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <xQueueSemaphoreTake+0x80>
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	61bb      	str	r3, [r7, #24]
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <xQueueSemaphoreTake+0x7e>
 800bcbc:	f001 fc02 	bl	800d4c4 <vPortEnterCritical>
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d024      	beq.n	800bd16 <xQueueSemaphoreTake+0xda>
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	1e5a      	subs	r2, r3, #1
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d104      	bne.n	800bce6 <xQueueSemaphoreTake+0xaa>
 800bcdc:	f001 fa48 	bl	800d170 <pvTaskIncrementMutexHeldCount>
 800bce0:	4602      	mov	r2, r0
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	609a      	str	r2, [r3, #8]
 800bce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00f      	beq.n	800bd0e <xQueueSemaphoreTake+0xd2>
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	3310      	adds	r3, #16
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fed4 	bl	800caa0 <xTaskRemoveFromEventList>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <xQueueSemaphoreTake+0xd2>
 800bcfe:	4b54      	ldr	r3, [pc, #336]	; (800be50 <xQueueSemaphoreTake+0x214>)
 800bd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f001 fc09 	bl	800d524 <vPortExitCritical>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e097      	b.n	800be46 <xQueueSemaphoreTake+0x20a>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d111      	bne.n	800bd40 <xQueueSemaphoreTake+0x104>
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <xQueueSemaphoreTake+0xfc>
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xQueueSemaphoreTake+0xfa>
 800bd38:	f001 fbf4 	bl	800d524 <vPortExitCritical>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e082      	b.n	800be46 <xQueueSemaphoreTake+0x20a>
 800bd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <xQueueSemaphoreTake+0x118>
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 ff0a 	bl	800cb64 <vTaskInternalSetTimeOutState>
 800bd50:	2301      	movs	r3, #1
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
 800bd54:	f001 fbe6 	bl	800d524 <vPortExitCritical>
 800bd58:	f000 fcba 	bl	800c6d0 <vTaskSuspendAll>
 800bd5c:	f001 fbb2 	bl	800d4c4 <vPortEnterCritical>
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd66:	b25b      	sxtb	r3, r3
 800bd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6c:	d103      	bne.n	800bd76 <xQueueSemaphoreTake+0x13a>
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd7c:	b25b      	sxtb	r3, r3
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d103      	bne.n	800bd8c <xQueueSemaphoreTake+0x150>
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd8c:	f001 fbca 	bl	800d524 <vPortExitCritical>
 800bd90:	463a      	mov	r2, r7
 800bd92:	f107 030c 	add.w	r3, r7, #12
 800bd96:	4611      	mov	r1, r2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fef9 	bl	800cb90 <xTaskCheckForTimeOut>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d132      	bne.n	800be0a <xQueueSemaphoreTake+0x1ce>
 800bda4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bda6:	f000 f9f2 	bl	800c18e <prvIsQueueEmpty>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d026      	beq.n	800bdfe <xQueueSemaphoreTake+0x1c2>
 800bdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d109      	bne.n	800bdcc <xQueueSemaphoreTake+0x190>
 800bdb8:	f001 fb84 	bl	800d4c4 <vPortEnterCritical>
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f001 f84b 	bl	800ce5c <xTaskPriorityInherit>
 800bdc6:	6338      	str	r0, [r7, #48]	; 0x30
 800bdc8:	f001 fbac 	bl	800d524 <vPortExitCritical>
 800bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdce:	3324      	adds	r3, #36	; 0x24
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fe3f 	bl	800ca58 <vTaskPlaceOnEventList>
 800bdda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bddc:	f000 f985 	bl	800c0ea <prvUnlockQueue>
 800bde0:	f000 fc84 	bl	800c6ec <xTaskResumeAll>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f47f af68 	bne.w	800bcbc <xQueueSemaphoreTake+0x80>
 800bdec:	4b18      	ldr	r3, [pc, #96]	; (800be50 <xQueueSemaphoreTake+0x214>)
 800bdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	e75e      	b.n	800bcbc <xQueueSemaphoreTake+0x80>
 800bdfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be00:	f000 f973 	bl	800c0ea <prvUnlockQueue>
 800be04:	f000 fc72 	bl	800c6ec <xTaskResumeAll>
 800be08:	e758      	b.n	800bcbc <xQueueSemaphoreTake+0x80>
 800be0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be0c:	f000 f96d 	bl	800c0ea <prvUnlockQueue>
 800be10:	f000 fc6c 	bl	800c6ec <xTaskResumeAll>
 800be14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be16:	f000 f9ba 	bl	800c18e <prvIsQueueEmpty>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f43f af4d 	beq.w	800bcbc <xQueueSemaphoreTake+0x80>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00d      	beq.n	800be44 <xQueueSemaphoreTake+0x208>
 800be28:	f001 fb4c 	bl	800d4c4 <vPortEnterCritical>
 800be2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be2e:	f000 f8b4 	bl	800bf9a <prvGetDisinheritPriorityAfterTimeout>
 800be32:	6278      	str	r0, [r7, #36]	; 0x24
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 f90a 	bl	800d054 <vTaskPriorityDisinheritAfterTimeout>
 800be40:	f001 fb70 	bl	800d524 <vPortExitCritical>
 800be44:	2300      	movs	r3, #0
 800be46:	4618      	mov	r0, r3
 800be48:	3738      	adds	r7, #56	; 0x38
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	e000ed04 	.word	0xe000ed04

0800be54 <xQueueReceiveFromISR>:
 800be54:	b580      	push	{r7, lr}
 800be56:	b08e      	sub	sp, #56	; 0x38
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	633b      	str	r3, [r7, #48]	; 0x30
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <xQueueReceiveFromISR+0x2c>
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	623b      	str	r3, [r7, #32]
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <xQueueReceiveFromISR+0x2a>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d103      	bne.n	800be8e <xQueueReceiveFromISR+0x3a>
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <xQueueReceiveFromISR+0x3e>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueReceiveFromISR+0x40>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueReceiveFromISR+0x5a>
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61fb      	str	r3, [r7, #28]
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueReceiveFromISR+0x58>
 800beae:	f001 fbeb 	bl	800d688 <vPortValidateInterruptPriority>
 800beb2:	f3ef 8211 	mrs	r2, BASEPRI
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	61ba      	str	r2, [r7, #24]
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d02f      	beq.n	800bf3a <xQueueReceiveFromISR+0xe6>
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bee8:	f000 f8d9 	bl	800c09e <prvCopyDataFromQueue>
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	1e5a      	subs	r2, r3, #1
 800bef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38
 800bef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d112      	bne.n	800bf24 <xQueueReceiveFromISR+0xd0>
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d016      	beq.n	800bf34 <xQueueReceiveFromISR+0xe0>
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	3310      	adds	r3, #16
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fdc8 	bl	800caa0 <xTaskRemoveFromEventList>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <xQueueReceiveFromISR+0xe0>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00b      	beq.n	800bf34 <xQueueReceiveFromISR+0xe0>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	e007      	b.n	800bf34 <xQueueReceiveFromISR+0xe0>
 800bf24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	b25a      	sxtb	r2, r3
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf34:	2301      	movs	r3, #1
 800bf36:	637b      	str	r3, [r7, #52]	; 0x34
 800bf38:	e001      	b.n	800bf3e <xQueueReceiveFromISR+0xea>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	613b      	str	r3, [r7, #16]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	bf00      	nop
 800bf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3738      	adds	r7, #56	; 0x38
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <vQueueDelete>:
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <vQueueDelete+0x28>
 800bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	60bb      	str	r3, [r7, #8]
 800bf78:	bf00      	nop
 800bf7a:	e7fe      	b.n	800bf7a <vQueueDelete+0x26>
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f935 	bl	800c1ec <vQueueUnregisterQueue>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <vQueueDelete+0x3e>
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f001 fc87 	bl	800d8a0 <vPortFree>
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <prvGetDisinheritPriorityAfterTimeout>:
 800bf9a:	b480      	push	{r7}
 800bf9c:	b085      	sub	sp, #20
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d006      	beq.n	800bfb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f1c3 0307 	rsb	r3, r3, #7
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	e001      	b.n	800bfbc <prvGetDisinheritPriorityAfterTimeout+0x22>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <prvCopyDataToQueue>:
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b086      	sub	sp, #24
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10d      	bne.n	800c004 <prvCopyDataToQueue+0x3a>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d14d      	bne.n	800c08c <prvCopyDataToQueue+0xc2>
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 ffa7 	bl	800cf48 <xTaskPriorityDisinherit>
 800bffa:	6178      	str	r0, [r7, #20]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	609a      	str	r2, [r3, #8]
 800c002:	e043      	b.n	800c08c <prvCopyDataToQueue+0xc2>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d119      	bne.n	800c03e <prvCopyDataToQueue+0x74>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6858      	ldr	r0, [r3, #4]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	461a      	mov	r2, r3
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	f002 fc18 	bl	800e84a <memcpy>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	441a      	add	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	605a      	str	r2, [r3, #4]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	429a      	cmp	r2, r3
 800c032:	d32b      	bcc.n	800c08c <prvCopyDataToQueue+0xc2>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	605a      	str	r2, [r3, #4]
 800c03c:	e026      	b.n	800c08c <prvCopyDataToQueue+0xc2>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68d8      	ldr	r0, [r3, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c046:	461a      	mov	r2, r3
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	f002 fbfe 	bl	800e84a <memcpy>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c056:	425b      	negs	r3, r3
 800c058:	441a      	add	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	60da      	str	r2, [r3, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	68da      	ldr	r2, [r3, #12]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	429a      	cmp	r2, r3
 800c068:	d207      	bcs.n	800c07a <prvCopyDataToQueue+0xb0>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	689a      	ldr	r2, [r3, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	425b      	negs	r3, r3
 800c074:	441a      	add	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	60da      	str	r2, [r3, #12]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d105      	bne.n	800c08c <prvCopyDataToQueue+0xc2>
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <prvCopyDataToQueue+0xc2>
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3b01      	subs	r3, #1
 800c08a:	613b      	str	r3, [r7, #16]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	639a      	str	r2, [r3, #56]	; 0x38
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <prvCopyDataFromQueue>:
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6039      	str	r1, [r7, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d018      	beq.n	800c0e2 <prvCopyDataFromQueue+0x44>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68da      	ldr	r2, [r3, #12]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b8:	441a      	add	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60da      	str	r2, [r3, #12]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d303      	bcc.n	800c0d2 <prvCopyDataFromQueue+0x34>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60da      	str	r2, [r3, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	68d9      	ldr	r1, [r3, #12]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0da:	461a      	mov	r2, r3
 800c0dc:	6838      	ldr	r0, [r7, #0]
 800c0de:	f002 fbb4 	bl	800e84a <memcpy>
 800c0e2:	bf00      	nop
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <prvUnlockQueue>:
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	f001 f9e7 	bl	800d4c4 <vPortEnterCritical>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0fc:	73fb      	strb	r3, [r7, #15]
 800c0fe:	e011      	b.n	800c124 <prvUnlockQueue+0x3a>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	2b00      	cmp	r3, #0
 800c106:	d012      	beq.n	800c12e <prvUnlockQueue+0x44>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3324      	adds	r3, #36	; 0x24
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 fcc7 	bl	800caa0 <xTaskRemoveFromEventList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <prvUnlockQueue+0x32>
 800c118:	f000 fd9c 	bl	800cc54 <vTaskMissedYield>
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	3b01      	subs	r3, #1
 800c120:	b2db      	uxtb	r3, r3
 800c122:	73fb      	strb	r3, [r7, #15]
 800c124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dce9      	bgt.n	800c100 <prvUnlockQueue+0x16>
 800c12c:	e000      	b.n	800c130 <prvUnlockQueue+0x46>
 800c12e:	bf00      	nop
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	22ff      	movs	r2, #255	; 0xff
 800c134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c138:	f001 f9f4 	bl	800d524 <vPortExitCritical>
 800c13c:	f001 f9c2 	bl	800d4c4 <vPortEnterCritical>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c146:	73bb      	strb	r3, [r7, #14]
 800c148:	e011      	b.n	800c16e <prvUnlockQueue+0x84>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d012      	beq.n	800c178 <prvUnlockQueue+0x8e>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3310      	adds	r3, #16
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fca2 	bl	800caa0 <xTaskRemoveFromEventList>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d001      	beq.n	800c166 <prvUnlockQueue+0x7c>
 800c162:	f000 fd77 	bl	800cc54 <vTaskMissedYield>
 800c166:	7bbb      	ldrb	r3, [r7, #14]
 800c168:	3b01      	subs	r3, #1
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	73bb      	strb	r3, [r7, #14]
 800c16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c172:	2b00      	cmp	r3, #0
 800c174:	dce9      	bgt.n	800c14a <prvUnlockQueue+0x60>
 800c176:	e000      	b.n	800c17a <prvUnlockQueue+0x90>
 800c178:	bf00      	nop
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	22ff      	movs	r2, #255	; 0xff
 800c17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c182:	f001 f9cf 	bl	800d524 <vPortExitCritical>
 800c186:	bf00      	nop
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <prvIsQueueEmpty>:
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	f001 f995 	bl	800d4c4 <vPortEnterCritical>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <prvIsQueueEmpty+0x1a>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e001      	b.n	800c1ac <prvIsQueueEmpty+0x1e>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	f001 f9ba 	bl	800d524 <vPortExitCritical>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <prvIsQueueFull>:
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	f001 f97f 	bl	800d4c4 <vPortEnterCritical>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d102      	bne.n	800c1d8 <prvIsQueueFull+0x1e>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	e001      	b.n	800c1dc <prvIsQueueFull+0x22>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	f001 f9a2 	bl	800d524 <vPortExitCritical>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <vQueueUnregisterQueue>:
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	e016      	b.n	800c228 <vQueueUnregisterQueue+0x3c>
 800c1fa:	4a10      	ldr	r2, [pc, #64]	; (800c23c <vQueueUnregisterQueue+0x50>)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	4413      	add	r3, r2
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	429a      	cmp	r2, r3
 800c208:	d10b      	bne.n	800c222 <vQueueUnregisterQueue+0x36>
 800c20a:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <vQueueUnregisterQueue+0x50>)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2100      	movs	r1, #0
 800c210:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800c214:	4a09      	ldr	r2, [pc, #36]	; (800c23c <vQueueUnregisterQueue+0x50>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	4413      	add	r3, r2
 800c21c:	2200      	movs	r2, #0
 800c21e:	605a      	str	r2, [r3, #4]
 800c220:	e006      	b.n	800c230 <vQueueUnregisterQueue+0x44>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3301      	adds	r3, #1
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b07      	cmp	r3, #7
 800c22c:	d9e5      	bls.n	800c1fa <vQueueUnregisterQueue+0xe>
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	2000af3c 	.word	0x2000af3c

0800c240 <xTaskCreateStatic>:
 800c240:	b580      	push	{r7, lr}
 800c242:	b08e      	sub	sp, #56	; 0x38
 800c244:	af04      	add	r7, sp, #16
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	603b      	str	r3, [r7, #0]
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xTaskCreateStatic+0x2a>
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	623b      	str	r3, [r7, #32]
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xTaskCreateStatic+0x28>
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xTaskCreateStatic+0x46>
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xTaskCreateStatic+0x44>
 800c286:	23a0      	movs	r3, #160	; 0xa0
 800c288:	613b      	str	r3, [r7, #16]
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2ba0      	cmp	r3, #160	; 0xa0
 800c28e:	d00a      	beq.n	800c2a6 <xTaskCreateStatic+0x66>
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	61bb      	str	r3, [r7, #24]
 800c2a2:	bf00      	nop
 800c2a4:	e7fe      	b.n	800c2a4 <xTaskCreateStatic+0x64>
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d01e      	beq.n	800c2ec <xTaskCreateStatic+0xac>
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d01b      	beq.n	800c2ec <xTaskCreateStatic+0xac>
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9303      	str	r3, [sp, #12]
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	9302      	str	r3, [sp, #8]
 800c2ce:	f107 0314 	add.w	r3, r7, #20
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f000 f850 	bl	800c384 <prvInitialiseNewTask>
 800c2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2e6:	f000 f8eb 	bl	800c4c0 <prvAddNewTaskToReadyList>
 800c2ea:	e001      	b.n	800c2f0 <xTaskCreateStatic+0xb0>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3728      	adds	r7, #40	; 0x28
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <xTaskCreate>:
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b08c      	sub	sp, #48	; 0x30
 800c2fe:	af04      	add	r7, sp, #16
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4618      	mov	r0, r3
 800c310:	f001 f9fa 	bl	800d708 <pvPortMalloc>
 800c314:	6178      	str	r0, [r7, #20]
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00e      	beq.n	800c33a <xTaskCreate+0x40>
 800c31c:	20a0      	movs	r0, #160	; 0xa0
 800c31e:	f001 f9f3 	bl	800d708 <pvPortMalloc>
 800c322:	61f8      	str	r0, [r7, #28]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <xTaskCreate+0x38>
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	631a      	str	r2, [r3, #48]	; 0x30
 800c330:	e005      	b.n	800c33e <xTaskCreate+0x44>
 800c332:	6978      	ldr	r0, [r7, #20]
 800c334:	f001 fab4 	bl	800d8a0 <vPortFree>
 800c338:	e001      	b.n	800c33e <xTaskCreate+0x44>
 800c33a:	2300      	movs	r3, #0
 800c33c:	61fb      	str	r3, [r7, #28]
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d017      	beq.n	800c374 <xTaskCreate+0x7a>
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800c34c:	88fa      	ldrh	r2, [r7, #6]
 800c34e:	2300      	movs	r3, #0
 800c350:	9303      	str	r3, [sp, #12]
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	9302      	str	r3, [sp, #8]
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	68b9      	ldr	r1, [r7, #8]
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f000 f80e 	bl	800c384 <prvInitialiseNewTask>
 800c368:	69f8      	ldr	r0, [r7, #28]
 800c36a:	f000 f8a9 	bl	800c4c0 <prvAddNewTaskToReadyList>
 800c36e:	2301      	movs	r3, #1
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	e002      	b.n	800c37a <xTaskCreate+0x80>
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
 800c378:	61bb      	str	r3, [r7, #24]
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	4618      	mov	r0, r3
 800c37e:	3720      	adds	r7, #32
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <prvInitialiseNewTask>:
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c39c:	3b01      	subs	r3, #1
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	61bb      	str	r3, [r7, #24]
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	f023 0307 	bic.w	r3, r3, #7
 800c3aa:	61bb      	str	r3, [r7, #24]
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00a      	beq.n	800c3cc <prvInitialiseNewTask+0x48>
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <prvInitialiseNewTask+0x46>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01f      	beq.n	800c412 <prvInitialiseNewTask+0x8e>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61fb      	str	r3, [r7, #28]
 800c3d6:	e012      	b.n	800c3fe <prvInitialiseNewTask+0x7a>
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	4413      	add	r3, r2
 800c3de:	7819      	ldrb	r1, [r3, #0]
 800c3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3334      	adds	r3, #52	; 0x34
 800c3e8:	460a      	mov	r2, r1
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <prvInitialiseNewTask+0x82>
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2b0f      	cmp	r3, #15
 800c402:	d9e9      	bls.n	800c3d8 <prvInitialiseNewTask+0x54>
 800c404:	e000      	b.n	800c408 <prvInitialiseNewTask+0x84>
 800c406:	bf00      	nop
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c410:	e003      	b.n	800c41a <prvInitialiseNewTask+0x96>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	2b06      	cmp	r3, #6
 800c41e:	d901      	bls.n	800c424 <prvInitialiseNewTask+0xa0>
 800c420:	2306      	movs	r3, #6
 800c422:	62bb      	str	r3, [r7, #40]	; 0x28
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42e:	645a      	str	r2, [r3, #68]	; 0x44
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	2200      	movs	r2, #0
 800c434:	649a      	str	r2, [r3, #72]	; 0x48
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	3304      	adds	r3, #4
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe ffc3 	bl	800b3c6 <vListInitialiseItem>
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	3318      	adds	r3, #24
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe ffbe 	bl	800b3c6 <vListInitialiseItem>
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44e:	611a      	str	r2, [r3, #16]
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	f1c3 0207 	rsb	r2, r3, #7
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	619a      	str	r2, [r3, #24]
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45e:	625a      	str	r2, [r3, #36]	; 0x24
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	2200      	movs	r2, #0
 800c464:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	334c      	adds	r3, #76	; 0x4c
 800c474:	224c      	movs	r2, #76	; 0x4c
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f002 f8ee 	bl	800e65a <memset>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	4a0c      	ldr	r2, [pc, #48]	; (800c4b4 <prvInitialiseNewTask+0x130>)
 800c482:	651a      	str	r2, [r3, #80]	; 0x50
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <prvInitialiseNewTask+0x134>)
 800c488:	655a      	str	r2, [r3, #84]	; 0x54
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	4a0b      	ldr	r2, [pc, #44]	; (800c4bc <prvInitialiseNewTask+0x138>)
 800c48e:	659a      	str	r2, [r3, #88]	; 0x58
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	68f9      	ldr	r1, [r7, #12]
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f000 fee5 	bl	800d264 <pxPortInitialiseStack>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	601a      	str	r2, [r3, #0]
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <prvInitialiseNewTask+0x128>
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	bf00      	nop
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2000ecd0 	.word	0x2000ecd0
 800c4b8:	2000ed38 	.word	0x2000ed38
 800c4bc:	2000eda0 	.word	0x2000eda0

0800c4c0 <prvAddNewTaskToReadyList>:
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	f000 fffc 	bl	800d4c4 <vPortEnterCritical>
 800c4cc:	4b2a      	ldr	r3, [pc, #168]	; (800c578 <prvAddNewTaskToReadyList+0xb8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	4a29      	ldr	r2, [pc, #164]	; (800c578 <prvAddNewTaskToReadyList+0xb8>)
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <prvAddNewTaskToReadyList+0xbc>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d109      	bne.n	800c4f2 <prvAddNewTaskToReadyList+0x32>
 800c4de:	4a27      	ldr	r2, [pc, #156]	; (800c57c <prvAddNewTaskToReadyList+0xbc>)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	4b24      	ldr	r3, [pc, #144]	; (800c578 <prvAddNewTaskToReadyList+0xb8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d110      	bne.n	800c50e <prvAddNewTaskToReadyList+0x4e>
 800c4ec:	f000 fbd6 	bl	800cc9c <prvInitialiseTaskLists>
 800c4f0:	e00d      	b.n	800c50e <prvAddNewTaskToReadyList+0x4e>
 800c4f2:	4b23      	ldr	r3, [pc, #140]	; (800c580 <prvAddNewTaskToReadyList+0xc0>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d109      	bne.n	800c50e <prvAddNewTaskToReadyList+0x4e>
 800c4fa:	4b20      	ldr	r3, [pc, #128]	; (800c57c <prvAddNewTaskToReadyList+0xbc>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	429a      	cmp	r2, r3
 800c506:	d802      	bhi.n	800c50e <prvAddNewTaskToReadyList+0x4e>
 800c508:	4a1c      	ldr	r2, [pc, #112]	; (800c57c <prvAddNewTaskToReadyList+0xbc>)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	4b1d      	ldr	r3, [pc, #116]	; (800c584 <prvAddNewTaskToReadyList+0xc4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	4a1b      	ldr	r2, [pc, #108]	; (800c584 <prvAddNewTaskToReadyList+0xc4>)
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	2201      	movs	r2, #1
 800c51e:	409a      	lsls	r2, r3
 800c520:	4b19      	ldr	r3, [pc, #100]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4313      	orrs	r3, r2
 800c526:	4a18      	ldr	r2, [pc, #96]	; (800c588 <prvAddNewTaskToReadyList+0xc8>)
 800c528:	6013      	str	r3, [r2, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52e:	4613      	mov	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4a15      	ldr	r2, [pc, #84]	; (800c58c <prvAddNewTaskToReadyList+0xcc>)
 800c538:	441a      	add	r2, r3
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f7fe ff4d 	bl	800b3e0 <vListInsertEnd>
 800c546:	f000 ffed 	bl	800d524 <vPortExitCritical>
 800c54a:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <prvAddNewTaskToReadyList+0xc0>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00e      	beq.n	800c570 <prvAddNewTaskToReadyList+0xb0>
 800c552:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <prvAddNewTaskToReadyList+0xbc>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d207      	bcs.n	800c570 <prvAddNewTaskToReadyList+0xb0>
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <prvAddNewTaskToReadyList+0xd0>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	2000b07c 	.word	0x2000b07c
 800c57c:	2000af7c 	.word	0x2000af7c
 800c580:	2000b088 	.word	0x2000b088
 800c584:	2000b098 	.word	0x2000b098
 800c588:	2000b084 	.word	0x2000b084
 800c58c:	2000af80 	.word	0x2000af80
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <vTaskDelay>:
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	2300      	movs	r3, #0
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d017      	beq.n	800c5d6 <vTaskDelay+0x42>
 800c5a6:	4b13      	ldr	r3, [pc, #76]	; (800c5f4 <vTaskDelay+0x60>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <vTaskDelay+0x30>
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	60bb      	str	r3, [r7, #8]
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <vTaskDelay+0x2e>
 800c5c4:	f000 f884 	bl	800c6d0 <vTaskSuspendAll>
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fde4 	bl	800d198 <prvAddCurrentTaskToDelayedList>
 800c5d0:	f000 f88c 	bl	800c6ec <xTaskResumeAll>
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d107      	bne.n	800c5ec <vTaskDelay+0x58>
 800c5dc:	4b06      	ldr	r3, [pc, #24]	; (800c5f8 <vTaskDelay+0x64>)
 800c5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	bf00      	nop
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	2000b0a4 	.word	0x2000b0a4
 800c5f8:	e000ed04 	.word	0xe000ed04

0800c5fc <vTaskStartScheduler>:
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08a      	sub	sp, #40	; 0x28
 800c600:	af04      	add	r7, sp, #16
 800c602:	2300      	movs	r3, #0
 800c604:	60bb      	str	r3, [r7, #8]
 800c606:	2300      	movs	r3, #0
 800c608:	607b      	str	r3, [r7, #4]
 800c60a:	463a      	mov	r2, r7
 800c60c:	1d39      	adds	r1, r7, #4
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	4618      	mov	r0, r3
 800c614:	f7f5 fa06 	bl	8001a24 <vApplicationGetIdleTaskMemory>
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	9202      	str	r2, [sp, #8]
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	2300      	movs	r3, #0
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	2300      	movs	r3, #0
 800c628:	460a      	mov	r2, r1
 800c62a:	4921      	ldr	r1, [pc, #132]	; (800c6b0 <vTaskStartScheduler+0xb4>)
 800c62c:	4821      	ldr	r0, [pc, #132]	; (800c6b4 <vTaskStartScheduler+0xb8>)
 800c62e:	f7ff fe07 	bl	800c240 <xTaskCreateStatic>
 800c632:	4603      	mov	r3, r0
 800c634:	4a20      	ldr	r2, [pc, #128]	; (800c6b8 <vTaskStartScheduler+0xbc>)
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	4b1f      	ldr	r3, [pc, #124]	; (800c6b8 <vTaskStartScheduler+0xbc>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <vTaskStartScheduler+0x4a>
 800c640:	2301      	movs	r3, #1
 800c642:	617b      	str	r3, [r7, #20]
 800c644:	e001      	b.n	800c64a <vTaskStartScheduler+0x4e>
 800c646:	2300      	movs	r3, #0
 800c648:	617b      	str	r3, [r7, #20]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d11b      	bne.n	800c688 <vTaskStartScheduler+0x8c>
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	bf00      	nop
 800c664:	4b15      	ldr	r3, [pc, #84]	; (800c6bc <vTaskStartScheduler+0xc0>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	334c      	adds	r3, #76	; 0x4c
 800c66a:	4a15      	ldr	r2, [pc, #84]	; (800c6c0 <vTaskStartScheduler+0xc4>)
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <vTaskStartScheduler+0xc8>)
 800c670:	f04f 32ff 	mov.w	r2, #4294967295
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <vTaskStartScheduler+0xcc>)
 800c678:	2201      	movs	r2, #1
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <vTaskStartScheduler+0xd0>)
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	f000 fe7d 	bl	800d380 <xPortStartScheduler>
 800c686:	e00e      	b.n	800c6a6 <vTaskStartScheduler+0xaa>
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68e:	d10a      	bne.n	800c6a6 <vTaskStartScheduler+0xaa>
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <vTaskStartScheduler+0xa8>
 800c6a6:	bf00      	nop
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	08011e80 	.word	0x08011e80
 800c6b4:	0800cc6d 	.word	0x0800cc6d
 800c6b8:	2000b0a0 	.word	0x2000b0a0
 800c6bc:	2000af7c 	.word	0x2000af7c
 800c6c0:	20000084 	.word	0x20000084
 800c6c4:	2000b09c 	.word	0x2000b09c
 800c6c8:	2000b088 	.word	0x2000b088
 800c6cc:	2000b080 	.word	0x2000b080

0800c6d0 <vTaskSuspendAll>:
 800c6d0:	b480      	push	{r7}
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	4b04      	ldr	r3, [pc, #16]	; (800c6e8 <vTaskSuspendAll+0x18>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	4a03      	ldr	r2, [pc, #12]	; (800c6e8 <vTaskSuspendAll+0x18>)
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	bf00      	nop
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr
 800c6e8:	2000b0a4 	.word	0x2000b0a4

0800c6ec <xTaskResumeAll>:
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60bb      	str	r3, [r7, #8]
 800c6fa:	4b41      	ldr	r3, [pc, #260]	; (800c800 <xTaskResumeAll+0x114>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10a      	bne.n	800c718 <xTaskResumeAll+0x2c>
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xTaskResumeAll+0x2a>
 800c718:	f000 fed4 	bl	800d4c4 <vPortEnterCritical>
 800c71c:	4b38      	ldr	r3, [pc, #224]	; (800c800 <xTaskResumeAll+0x114>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3b01      	subs	r3, #1
 800c722:	4a37      	ldr	r2, [pc, #220]	; (800c800 <xTaskResumeAll+0x114>)
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	4b36      	ldr	r3, [pc, #216]	; (800c800 <xTaskResumeAll+0x114>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d161      	bne.n	800c7f2 <xTaskResumeAll+0x106>
 800c72e:	4b35      	ldr	r3, [pc, #212]	; (800c804 <xTaskResumeAll+0x118>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d05d      	beq.n	800c7f2 <xTaskResumeAll+0x106>
 800c736:	e02e      	b.n	800c796 <xTaskResumeAll+0xaa>
 800c738:	4b33      	ldr	r3, [pc, #204]	; (800c808 <xTaskResumeAll+0x11c>)
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3318      	adds	r3, #24
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fea8 	bl	800b49a <uxListRemove>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe fea3 	bl	800b49a <uxListRemove>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	2201      	movs	r2, #1
 800c75a:	409a      	lsls	r2, r3
 800c75c:	4b2b      	ldr	r3, [pc, #172]	; (800c80c <xTaskResumeAll+0x120>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4313      	orrs	r3, r2
 800c762:	4a2a      	ldr	r2, [pc, #168]	; (800c80c <xTaskResumeAll+0x120>)
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c76a:	4613      	mov	r3, r2
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	4a27      	ldr	r2, [pc, #156]	; (800c810 <xTaskResumeAll+0x124>)
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3304      	adds	r3, #4
 800c77a:	4619      	mov	r1, r3
 800c77c:	4610      	mov	r0, r2
 800c77e:	f7fe fe2f 	bl	800b3e0 <vListInsertEnd>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c786:	4b23      	ldr	r3, [pc, #140]	; (800c814 <xTaskResumeAll+0x128>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d302      	bcc.n	800c796 <xTaskResumeAll+0xaa>
 800c790:	4b21      	ldr	r3, [pc, #132]	; (800c818 <xTaskResumeAll+0x12c>)
 800c792:	2201      	movs	r2, #1
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	4b1c      	ldr	r3, [pc, #112]	; (800c808 <xTaskResumeAll+0x11c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1cc      	bne.n	800c738 <xTaskResumeAll+0x4c>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <xTaskResumeAll+0xbc>
 800c7a4:	f000 fb1c 	bl	800cde0 <prvResetNextTaskUnblockTime>
 800c7a8:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <xTaskResumeAll+0x130>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	607b      	str	r3, [r7, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d010      	beq.n	800c7d6 <xTaskResumeAll+0xea>
 800c7b4:	f000 f836 	bl	800c824 <xTaskIncrementTick>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <xTaskResumeAll+0xd8>
 800c7be:	4b16      	ldr	r3, [pc, #88]	; (800c818 <xTaskResumeAll+0x12c>)
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	607b      	str	r3, [r7, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1f1      	bne.n	800c7b4 <xTaskResumeAll+0xc8>
 800c7d0:	4b12      	ldr	r3, [pc, #72]	; (800c81c <xTaskResumeAll+0x130>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	4b10      	ldr	r3, [pc, #64]	; (800c818 <xTaskResumeAll+0x12c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d009      	beq.n	800c7f2 <xTaskResumeAll+0x106>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	4b0f      	ldr	r3, [pc, #60]	; (800c820 <xTaskResumeAll+0x134>)
 800c7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f000 fe97 	bl	800d524 <vPortExitCritical>
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	2000b0a4 	.word	0x2000b0a4
 800c804:	2000b07c 	.word	0x2000b07c
 800c808:	2000b03c 	.word	0x2000b03c
 800c80c:	2000b084 	.word	0x2000b084
 800c810:	2000af80 	.word	0x2000af80
 800c814:	2000af7c 	.word	0x2000af7c
 800c818:	2000b090 	.word	0x2000b090
 800c81c:	2000b08c 	.word	0x2000b08c
 800c820:	e000ed04 	.word	0xe000ed04

0800c824 <xTaskIncrementTick>:
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	4b4e      	ldr	r3, [pc, #312]	; (800c968 <xTaskIncrementTick+0x144>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f040 808e 	bne.w	800c954 <xTaskIncrementTick+0x130>
 800c838:	4b4c      	ldr	r3, [pc, #304]	; (800c96c <xTaskIncrementTick+0x148>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	613b      	str	r3, [r7, #16]
 800c840:	4a4a      	ldr	r2, [pc, #296]	; (800c96c <xTaskIncrementTick+0x148>)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d120      	bne.n	800c88e <xTaskIncrementTick+0x6a>
 800c84c:	4b48      	ldr	r3, [pc, #288]	; (800c970 <xTaskIncrementTick+0x14c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00a      	beq.n	800c86c <xTaskIncrementTick+0x48>
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <xTaskIncrementTick+0x46>
 800c86c:	4b40      	ldr	r3, [pc, #256]	; (800c970 <xTaskIncrementTick+0x14c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	4b40      	ldr	r3, [pc, #256]	; (800c974 <xTaskIncrementTick+0x150>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a3e      	ldr	r2, [pc, #248]	; (800c970 <xTaskIncrementTick+0x14c>)
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	4a3e      	ldr	r2, [pc, #248]	; (800c974 <xTaskIncrementTick+0x150>)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6013      	str	r3, [r2, #0]
 800c880:	4b3d      	ldr	r3, [pc, #244]	; (800c978 <xTaskIncrementTick+0x154>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	4a3c      	ldr	r2, [pc, #240]	; (800c978 <xTaskIncrementTick+0x154>)
 800c888:	6013      	str	r3, [r2, #0]
 800c88a:	f000 faa9 	bl	800cde0 <prvResetNextTaskUnblockTime>
 800c88e:	4b3b      	ldr	r3, [pc, #236]	; (800c97c <xTaskIncrementTick+0x158>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	429a      	cmp	r2, r3
 800c896:	d348      	bcc.n	800c92a <xTaskIncrementTick+0x106>
 800c898:	4b35      	ldr	r3, [pc, #212]	; (800c970 <xTaskIncrementTick+0x14c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d104      	bne.n	800c8ac <xTaskIncrementTick+0x88>
 800c8a2:	4b36      	ldr	r3, [pc, #216]	; (800c97c <xTaskIncrementTick+0x158>)
 800c8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	e03e      	b.n	800c92a <xTaskIncrementTick+0x106>
 800c8ac:	4b30      	ldr	r3, [pc, #192]	; (800c970 <xTaskIncrementTick+0x14c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	60bb      	str	r3, [r7, #8]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	607b      	str	r3, [r7, #4]
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d203      	bcs.n	800c8cc <xTaskIncrementTick+0xa8>
 800c8c4:	4a2d      	ldr	r2, [pc, #180]	; (800c97c <xTaskIncrementTick+0x158>)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	e02e      	b.n	800c92a <xTaskIncrementTick+0x106>
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7fe fde2 	bl	800b49a <uxListRemove>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d004      	beq.n	800c8e8 <xTaskIncrementTick+0xc4>
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	3318      	adds	r3, #24
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe fdd9 	bl	800b49a <uxListRemove>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	409a      	lsls	r2, r3
 800c8f0:	4b23      	ldr	r3, [pc, #140]	; (800c980 <xTaskIncrementTick+0x15c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	4a22      	ldr	r2, [pc, #136]	; (800c980 <xTaskIncrementTick+0x15c>)
 800c8f8:	6013      	str	r3, [r2, #0]
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fe:	4613      	mov	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4a1f      	ldr	r2, [pc, #124]	; (800c984 <xTaskIncrementTick+0x160>)
 800c908:	441a      	add	r2, r3
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	3304      	adds	r3, #4
 800c90e:	4619      	mov	r1, r3
 800c910:	4610      	mov	r0, r2
 800c912:	f7fe fd65 	bl	800b3e0 <vListInsertEnd>
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91a:	4b1b      	ldr	r3, [pc, #108]	; (800c988 <xTaskIncrementTick+0x164>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	429a      	cmp	r2, r3
 800c922:	d3b9      	bcc.n	800c898 <xTaskIncrementTick+0x74>
 800c924:	2301      	movs	r3, #1
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	e7b6      	b.n	800c898 <xTaskIncrementTick+0x74>
 800c92a:	4b17      	ldr	r3, [pc, #92]	; (800c988 <xTaskIncrementTick+0x164>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c930:	4914      	ldr	r1, [pc, #80]	; (800c984 <xTaskIncrementTick+0x160>)
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	440b      	add	r3, r1
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d901      	bls.n	800c946 <xTaskIncrementTick+0x122>
 800c942:	2301      	movs	r3, #1
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	4b11      	ldr	r3, [pc, #68]	; (800c98c <xTaskIncrementTick+0x168>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d007      	beq.n	800c95e <xTaskIncrementTick+0x13a>
 800c94e:	2301      	movs	r3, #1
 800c950:	617b      	str	r3, [r7, #20]
 800c952:	e004      	b.n	800c95e <xTaskIncrementTick+0x13a>
 800c954:	4b0e      	ldr	r3, [pc, #56]	; (800c990 <xTaskIncrementTick+0x16c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3301      	adds	r3, #1
 800c95a:	4a0d      	ldr	r2, [pc, #52]	; (800c990 <xTaskIncrementTick+0x16c>)
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	2000b0a4 	.word	0x2000b0a4
 800c96c:	2000b080 	.word	0x2000b080
 800c970:	2000b034 	.word	0x2000b034
 800c974:	2000b038 	.word	0x2000b038
 800c978:	2000b094 	.word	0x2000b094
 800c97c:	2000b09c 	.word	0x2000b09c
 800c980:	2000b084 	.word	0x2000b084
 800c984:	2000af80 	.word	0x2000af80
 800c988:	2000af7c 	.word	0x2000af7c
 800c98c:	2000b090 	.word	0x2000b090
 800c990:	2000b08c 	.word	0x2000b08c

0800c994 <vTaskSwitchContext>:
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4b29      	ldr	r3, [pc, #164]	; (800ca40 <vTaskSwitchContext+0xac>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d003      	beq.n	800c9aa <vTaskSwitchContext+0x16>
 800c9a2:	4b28      	ldr	r3, [pc, #160]	; (800ca44 <vTaskSwitchContext+0xb0>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	e044      	b.n	800ca34 <vTaskSwitchContext+0xa0>
 800c9aa:	4b26      	ldr	r3, [pc, #152]	; (800ca44 <vTaskSwitchContext+0xb0>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	601a      	str	r2, [r3, #0]
 800c9b0:	4b25      	ldr	r3, [pc, #148]	; (800ca48 <vTaskSwitchContext+0xb4>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	fab3 f383 	clz	r3, r3
 800c9bc:	72fb      	strb	r3, [r7, #11]
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	f1c3 031f 	rsb	r3, r3, #31
 800c9c4:	617b      	str	r3, [r7, #20]
 800c9c6:	4921      	ldr	r1, [pc, #132]	; (800ca4c <vTaskSwitchContext+0xb8>)
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	440b      	add	r3, r1
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10a      	bne.n	800c9f0 <vTaskSwitchContext+0x5c>
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	607b      	str	r3, [r7, #4]
 800c9ec:	bf00      	nop
 800c9ee:	e7fe      	b.n	800c9ee <vTaskSwitchContext+0x5a>
 800c9f0:	697a      	ldr	r2, [r7, #20]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4a14      	ldr	r2, [pc, #80]	; (800ca4c <vTaskSwitchContext+0xb8>)
 800c9fc:	4413      	add	r3, r2
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	685a      	ldr	r2, [r3, #4]
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	3308      	adds	r3, #8
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d104      	bne.n	800ca20 <vTaskSwitchContext+0x8c>
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	605a      	str	r2, [r3, #4]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	4a0a      	ldr	r2, [pc, #40]	; (800ca50 <vTaskSwitchContext+0xbc>)
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	4b09      	ldr	r3, [pc, #36]	; (800ca50 <vTaskSwitchContext+0xbc>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	334c      	adds	r3, #76	; 0x4c
 800ca30:	4a08      	ldr	r2, [pc, #32]	; (800ca54 <vTaskSwitchContext+0xc0>)
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	bf00      	nop
 800ca36:	371c      	adds	r7, #28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	2000b0a4 	.word	0x2000b0a4
 800ca44:	2000b090 	.word	0x2000b090
 800ca48:	2000b084 	.word	0x2000b084
 800ca4c:	2000af80 	.word	0x2000af80
 800ca50:	2000af7c 	.word	0x2000af7c
 800ca54:	20000084 	.word	0x20000084

0800ca58 <vTaskPlaceOnEventList>:
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <vTaskPlaceOnEventList+0x26>
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <vTaskPlaceOnEventList+0x24>
 800ca7e:	4b07      	ldr	r3, [pc, #28]	; (800ca9c <vTaskPlaceOnEventList+0x44>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3318      	adds	r3, #24
 800ca84:	4619      	mov	r1, r3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7fe fcce 	bl	800b428 <vListInsert>
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	6838      	ldr	r0, [r7, #0]
 800ca90:	f000 fb82 	bl	800d198 <prvAddCurrentTaskToDelayedList>
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	2000af7c 	.word	0x2000af7c

0800caa0 <xTaskRemoveFromEventList>:
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10a      	bne.n	800cacc <xTaskRemoveFromEventList+0x2c>
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <xTaskRemoveFromEventList+0x2a>
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	3318      	adds	r3, #24
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fce2 	bl	800b49a <uxListRemove>
 800cad6:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <xTaskRemoveFromEventList+0xac>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d11c      	bne.n	800cb18 <xTaskRemoveFromEventList+0x78>
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	3304      	adds	r3, #4
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fcd9 	bl	800b49a <uxListRemove>
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caec:	2201      	movs	r2, #1
 800caee:	409a      	lsls	r2, r3
 800caf0:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <xTaskRemoveFromEventList+0xb0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	4a16      	ldr	r2, [pc, #88]	; (800cb50 <xTaskRemoveFromEventList+0xb0>)
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4a13      	ldr	r2, [pc, #76]	; (800cb54 <xTaskRemoveFromEventList+0xb4>)
 800cb08:	441a      	add	r2, r3
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4610      	mov	r0, r2
 800cb12:	f7fe fc65 	bl	800b3e0 <vListInsertEnd>
 800cb16:	e005      	b.n	800cb24 <xTaskRemoveFromEventList+0x84>
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	3318      	adds	r3, #24
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	480e      	ldr	r0, [pc, #56]	; (800cb58 <xTaskRemoveFromEventList+0xb8>)
 800cb20:	f7fe fc5e 	bl	800b3e0 <vListInsertEnd>
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <xTaskRemoveFromEventList+0xbc>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d905      	bls.n	800cb3e <xTaskRemoveFromEventList+0x9e>
 800cb32:	2301      	movs	r3, #1
 800cb34:	617b      	str	r3, [r7, #20]
 800cb36:	4b0a      	ldr	r3, [pc, #40]	; (800cb60 <xTaskRemoveFromEventList+0xc0>)
 800cb38:	2201      	movs	r2, #1
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	e001      	b.n	800cb42 <xTaskRemoveFromEventList+0xa2>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	4618      	mov	r0, r3
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	2000b0a4 	.word	0x2000b0a4
 800cb50:	2000b084 	.word	0x2000b084
 800cb54:	2000af80 	.word	0x2000af80
 800cb58:	2000b03c 	.word	0x2000b03c
 800cb5c:	2000af7c 	.word	0x2000af7c
 800cb60:	2000b090 	.word	0x2000b090

0800cb64 <vTaskInternalSetTimeOutState>:
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	4b06      	ldr	r3, [pc, #24]	; (800cb88 <vTaskInternalSetTimeOutState+0x24>)
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <vTaskInternalSetTimeOutState+0x28>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	605a      	str	r2, [r3, #4]
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	2000b094 	.word	0x2000b094
 800cb8c:	2000b080 	.word	0x2000b080

0800cb90 <xTaskCheckForTimeOut>:
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xTaskCheckForTimeOut+0x26>
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	613b      	str	r3, [r7, #16]
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCheckForTimeOut+0x24>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xTaskCheckForTimeOut+0x42>
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCheckForTimeOut+0x40>
 800cbd2:	f000 fc77 	bl	800d4c4 <vPortEnterCritical>
 800cbd6:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <xTaskCheckForTimeOut+0xbc>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	61bb      	str	r3, [r7, #24]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbee:	d102      	bne.n	800cbf6 <xTaskCheckForTimeOut+0x66>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61fb      	str	r3, [r7, #28]
 800cbf4:	e023      	b.n	800cc3e <xTaskCheckForTimeOut+0xae>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	4b15      	ldr	r3, [pc, #84]	; (800cc50 <xTaskCheckForTimeOut+0xc0>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d007      	beq.n	800cc12 <xTaskCheckForTimeOut+0x82>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d302      	bcc.n	800cc12 <xTaskCheckForTimeOut+0x82>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	61fb      	str	r3, [r7, #28]
 800cc10:	e015      	b.n	800cc3e <xTaskCheckForTimeOut+0xae>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d20b      	bcs.n	800cc34 <xTaskCheckForTimeOut+0xa4>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	1ad2      	subs	r2, r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff ff9b 	bl	800cb64 <vTaskInternalSetTimeOutState>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	61fb      	str	r3, [r7, #28]
 800cc32:	e004      	b.n	800cc3e <xTaskCheckForTimeOut+0xae>
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	61fb      	str	r3, [r7, #28]
 800cc3e:	f000 fc71 	bl	800d524 <vPortExitCritical>
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	4618      	mov	r0, r3
 800cc46:	3720      	adds	r7, #32
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	2000b080 	.word	0x2000b080
 800cc50:	2000b094 	.word	0x2000b094

0800cc54 <vTaskMissedYield>:
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	4b03      	ldr	r3, [pc, #12]	; (800cc68 <vTaskMissedYield+0x14>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	bf00      	nop
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	2000b090 	.word	0x2000b090

0800cc6c <prvIdleTask>:
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	f000 f852 	bl	800cd1c <prvCheckTasksWaitingTermination>
 800cc78:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <prvIdleTask+0x28>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d9f9      	bls.n	800cc74 <prvIdleTask+0x8>
 800cc80:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <prvIdleTask+0x2c>)
 800cc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	e7f0      	b.n	800cc74 <prvIdleTask+0x8>
 800cc92:	bf00      	nop
 800cc94:	2000af80 	.word	0x2000af80
 800cc98:	e000ed04 	.word	0xe000ed04

0800cc9c <prvInitialiseTaskLists>:
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	2300      	movs	r3, #0
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	e00c      	b.n	800ccc2 <prvInitialiseTaskLists+0x26>
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4413      	add	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4a12      	ldr	r2, [pc, #72]	; (800ccfc <prvInitialiseTaskLists+0x60>)
 800ccb4:	4413      	add	r3, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fb65 	bl	800b386 <vListInitialise>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	607b      	str	r3, [r7, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2b06      	cmp	r3, #6
 800ccc6:	d9ef      	bls.n	800cca8 <prvInitialiseTaskLists+0xc>
 800ccc8:	480d      	ldr	r0, [pc, #52]	; (800cd00 <prvInitialiseTaskLists+0x64>)
 800ccca:	f7fe fb5c 	bl	800b386 <vListInitialise>
 800ccce:	480d      	ldr	r0, [pc, #52]	; (800cd04 <prvInitialiseTaskLists+0x68>)
 800ccd0:	f7fe fb59 	bl	800b386 <vListInitialise>
 800ccd4:	480c      	ldr	r0, [pc, #48]	; (800cd08 <prvInitialiseTaskLists+0x6c>)
 800ccd6:	f7fe fb56 	bl	800b386 <vListInitialise>
 800ccda:	480c      	ldr	r0, [pc, #48]	; (800cd0c <prvInitialiseTaskLists+0x70>)
 800ccdc:	f7fe fb53 	bl	800b386 <vListInitialise>
 800cce0:	480b      	ldr	r0, [pc, #44]	; (800cd10 <prvInitialiseTaskLists+0x74>)
 800cce2:	f7fe fb50 	bl	800b386 <vListInitialise>
 800cce6:	4b0b      	ldr	r3, [pc, #44]	; (800cd14 <prvInitialiseTaskLists+0x78>)
 800cce8:	4a05      	ldr	r2, [pc, #20]	; (800cd00 <prvInitialiseTaskLists+0x64>)
 800ccea:	601a      	str	r2, [r3, #0]
 800ccec:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <prvInitialiseTaskLists+0x7c>)
 800ccee:	4a05      	ldr	r2, [pc, #20]	; (800cd04 <prvInitialiseTaskLists+0x68>)
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	bf00      	nop
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000af80 	.word	0x2000af80
 800cd00:	2000b00c 	.word	0x2000b00c
 800cd04:	2000b020 	.word	0x2000b020
 800cd08:	2000b03c 	.word	0x2000b03c
 800cd0c:	2000b050 	.word	0x2000b050
 800cd10:	2000b068 	.word	0x2000b068
 800cd14:	2000b034 	.word	0x2000b034
 800cd18:	2000b038 	.word	0x2000b038

0800cd1c <prvCheckTasksWaitingTermination>:
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	e019      	b.n	800cd58 <prvCheckTasksWaitingTermination+0x3c>
 800cd24:	f000 fbce 	bl	800d4c4 <vPortEnterCritical>
 800cd28:	4b10      	ldr	r3, [pc, #64]	; (800cd6c <prvCheckTasksWaitingTermination+0x50>)
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	607b      	str	r3, [r7, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fe fbb0 	bl	800b49a <uxListRemove>
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <prvCheckTasksWaitingTermination+0x54>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	4a0b      	ldr	r2, [pc, #44]	; (800cd70 <prvCheckTasksWaitingTermination+0x54>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	4b0b      	ldr	r3, [pc, #44]	; (800cd74 <prvCheckTasksWaitingTermination+0x58>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	4a0a      	ldr	r2, [pc, #40]	; (800cd74 <prvCheckTasksWaitingTermination+0x58>)
 800cd4c:	6013      	str	r3, [r2, #0]
 800cd4e:	f000 fbe9 	bl	800d524 <vPortExitCritical>
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f810 	bl	800cd78 <prvDeleteTCB>
 800cd58:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <prvCheckTasksWaitingTermination+0x58>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e1      	bne.n	800cd24 <prvCheckTasksWaitingTermination+0x8>
 800cd60:	bf00      	nop
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2000b050 	.word	0x2000b050
 800cd70:	2000b07c 	.word	0x2000b07c
 800cd74:	2000b064 	.word	0x2000b064

0800cd78 <prvDeleteTCB>:
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	334c      	adds	r3, #76	; 0x4c
 800cd84:	4618      	mov	r0, r3
 800cd86:	f001 fca7 	bl	800e6d8 <_reclaim_reent>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d108      	bne.n	800cda6 <prvDeleteTCB+0x2e>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fd81 	bl	800d8a0 <vPortFree>
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fd7e 	bl	800d8a0 <vPortFree>
 800cda4:	e018      	b.n	800cdd8 <prvDeleteTCB+0x60>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d103      	bne.n	800cdb8 <prvDeleteTCB+0x40>
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 fd75 	bl	800d8a0 <vPortFree>
 800cdb6:	e00f      	b.n	800cdd8 <prvDeleteTCB+0x60>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d00a      	beq.n	800cdd8 <prvDeleteTCB+0x60>
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <prvDeleteTCB+0x5e>
 800cdd8:	bf00      	nop
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <prvResetNextTaskUnblockTime>:
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <prvResetNextTaskUnblockTime+0x38>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d104      	bne.n	800cdfa <prvResetNextTaskUnblockTime+0x1a>
 800cdf0:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <prvResetNextTaskUnblockTime+0x3c>)
 800cdf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	e008      	b.n	800ce0c <prvResetNextTaskUnblockTime+0x2c>
 800cdfa:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <prvResetNextTaskUnblockTime+0x38>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	607b      	str	r3, [r7, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4a04      	ldr	r2, [pc, #16]	; (800ce1c <prvResetNextTaskUnblockTime+0x3c>)
 800ce0a:	6013      	str	r3, [r2, #0]
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	2000b034 	.word	0x2000b034
 800ce1c:	2000b09c 	.word	0x2000b09c

0800ce20 <xTaskGetSchedulerState>:
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <xTaskGetSchedulerState+0x34>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d102      	bne.n	800ce34 <xTaskGetSchedulerState+0x14>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	e008      	b.n	800ce46 <xTaskGetSchedulerState+0x26>
 800ce34:	4b08      	ldr	r3, [pc, #32]	; (800ce58 <xTaskGetSchedulerState+0x38>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d102      	bne.n	800ce42 <xTaskGetSchedulerState+0x22>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	607b      	str	r3, [r7, #4]
 800ce40:	e001      	b.n	800ce46 <xTaskGetSchedulerState+0x26>
 800ce42:	2300      	movs	r3, #0
 800ce44:	607b      	str	r3, [r7, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	2000b088 	.word	0x2000b088
 800ce58:	2000b0a4 	.word	0x2000b0a4

0800ce5c <xTaskPriorityInherit>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	60bb      	str	r3, [r7, #8]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d05e      	beq.n	800cf30 <xTaskPriorityInherit+0xd4>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce76:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <xTaskPriorityInherit+0xe0>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d24e      	bcs.n	800cf1e <xTaskPriorityInherit+0xc2>
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	db06      	blt.n	800ce96 <xTaskPriorityInherit+0x3a>
 800ce88:	4b2c      	ldr	r3, [pc, #176]	; (800cf3c <xTaskPriorityInherit+0xe0>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	f1c3 0207 	rsb	r2, r3, #7
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	619a      	str	r2, [r3, #24]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	6959      	ldr	r1, [r3, #20]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4a26      	ldr	r2, [pc, #152]	; (800cf40 <xTaskPriorityInherit+0xe4>)
 800cea8:	4413      	add	r3, r2
 800ceaa:	4299      	cmp	r1, r3
 800ceac:	d12f      	bne.n	800cf0e <xTaskPriorityInherit+0xb2>
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe faf1 	bl	800b49a <uxListRemove>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <xTaskPriorityInherit+0x78>
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	2201      	movs	r2, #1
 800cec4:	fa02 f303 	lsl.w	r3, r2, r3
 800cec8:	43da      	mvns	r2, r3
 800ceca:	4b1e      	ldr	r3, [pc, #120]	; (800cf44 <xTaskPriorityInherit+0xe8>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4013      	ands	r3, r2
 800ced0:	4a1c      	ldr	r2, [pc, #112]	; (800cf44 <xTaskPriorityInherit+0xe8>)
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	4b19      	ldr	r3, [pc, #100]	; (800cf3c <xTaskPriorityInherit+0xe0>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	2201      	movs	r2, #1
 800cee4:	409a      	lsls	r2, r3
 800cee6:	4b17      	ldr	r3, [pc, #92]	; (800cf44 <xTaskPriorityInherit+0xe8>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	4a15      	ldr	r2, [pc, #84]	; (800cf44 <xTaskPriorityInherit+0xe8>)
 800ceee:	6013      	str	r3, [r2, #0]
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef4:	4613      	mov	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4a10      	ldr	r2, [pc, #64]	; (800cf40 <xTaskPriorityInherit+0xe4>)
 800cefe:	441a      	add	r2, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4619      	mov	r1, r3
 800cf06:	4610      	mov	r0, r2
 800cf08:	f7fe fa6a 	bl	800b3e0 <vListInsertEnd>
 800cf0c:	e004      	b.n	800cf18 <xTaskPriorityInherit+0xbc>
 800cf0e:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <xTaskPriorityInherit+0xe0>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf18:	2301      	movs	r3, #1
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	e008      	b.n	800cf30 <xTaskPriorityInherit+0xd4>
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf22:	4b06      	ldr	r3, [pc, #24]	; (800cf3c <xTaskPriorityInherit+0xe0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d201      	bcs.n	800cf30 <xTaskPriorityInherit+0xd4>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	2000af7c 	.word	0x2000af7c
 800cf40:	2000af80 	.word	0x2000af80
 800cf44:	2000b084 	.word	0x2000b084

0800cf48 <xTaskPriorityDisinherit>:
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	613b      	str	r3, [r7, #16]
 800cf54:	2300      	movs	r3, #0
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d06e      	beq.n	800d03c <xTaskPriorityDisinherit+0xf4>
 800cf5e:	4b3a      	ldr	r3, [pc, #232]	; (800d048 <xTaskPriorityDisinherit+0x100>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d00a      	beq.n	800cf7e <xTaskPriorityDisinherit+0x36>
 800cf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	bf00      	nop
 800cf7c:	e7fe      	b.n	800cf7c <xTaskPriorityDisinherit+0x34>
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10a      	bne.n	800cf9c <xTaskPriorityDisinherit+0x54>
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60bb      	str	r3, [r7, #8]
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <xTaskPriorityDisinherit+0x52>
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa0:	1e5a      	subs	r2, r3, #1
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	649a      	str	r2, [r3, #72]	; 0x48
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d044      	beq.n	800d03c <xTaskPriorityDisinherit+0xf4>
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d140      	bne.n	800d03c <xTaskPriorityDisinherit+0xf4>
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe fa6b 	bl	800b49a <uxListRemove>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d115      	bne.n	800cff6 <xTaskPriorityDisinherit+0xae>
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfce:	491f      	ldr	r1, [pc, #124]	; (800d04c <xTaskPriorityDisinherit+0x104>)
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	440b      	add	r3, r1
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <xTaskPriorityDisinherit+0xae>
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfea:	43da      	mvns	r2, r3
 800cfec:	4b18      	ldr	r3, [pc, #96]	; (800d050 <xTaskPriorityDisinherit+0x108>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4013      	ands	r3, r2
 800cff2:	4a17      	ldr	r2, [pc, #92]	; (800d050 <xTaskPriorityDisinherit+0x108>)
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	62da      	str	r2, [r3, #44]	; 0x2c
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d002:	f1c3 0207 	rsb	r2, r3, #7
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	619a      	str	r2, [r3, #24]
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00e:	2201      	movs	r2, #1
 800d010:	409a      	lsls	r2, r3
 800d012:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <xTaskPriorityDisinherit+0x108>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4313      	orrs	r3, r2
 800d018:	4a0d      	ldr	r2, [pc, #52]	; (800d050 <xTaskPriorityDisinherit+0x108>)
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d020:	4613      	mov	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4a08      	ldr	r2, [pc, #32]	; (800d04c <xTaskPriorityDisinherit+0x104>)
 800d02a:	441a      	add	r2, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	3304      	adds	r3, #4
 800d030:	4619      	mov	r1, r3
 800d032:	4610      	mov	r0, r2
 800d034:	f7fe f9d4 	bl	800b3e0 <vListInsertEnd>
 800d038:	2301      	movs	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	2000af7c 	.word	0x2000af7c
 800d04c:	2000af80 	.word	0x2000af80
 800d050:	2000b084 	.word	0x2000b084

0800d054 <vTaskPriorityDisinheritAfterTimeout>:
 800d054:	b580      	push	{r7, lr}
 800d056:	b088      	sub	sp, #32
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	2301      	movs	r3, #1
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d077      	beq.n	800d15c <vTaskPriorityDisinheritAfterTimeout+0x108>
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	429a      	cmp	r2, r3
 800d092:	d902      	bls.n	800d09a <vTaskPriorityDisinheritAfterTimeout+0x46>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	61fb      	str	r3, [r7, #28]
 800d098:	e002      	b.n	800d0a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d09e:	61fb      	str	r3, [r7, #28]
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	69fa      	ldr	r2, [r7, #28]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d058      	beq.n	800d15c <vTaskPriorityDisinheritAfterTimeout+0x108>
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d153      	bne.n	800d15c <vTaskPriorityDisinheritAfterTimeout+0x108>
 800d0b4:	4b2b      	ldr	r3, [pc, #172]	; (800d164 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	69ba      	ldr	r2, [r7, #24]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d10a      	bne.n	800d0d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	60bb      	str	r3, [r7, #8]
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	613b      	str	r3, [r7, #16]
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	69fa      	ldr	r2, [r7, #28]
 800d0de:	62da      	str	r2, [r3, #44]	; 0x2c
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	db04      	blt.n	800d0f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	f1c3 0207 	rsb	r2, r3, #7
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	619a      	str	r2, [r3, #24]
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	6959      	ldr	r1, [r3, #20]
 800d0f6:	693a      	ldr	r2, [r7, #16]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4a19      	ldr	r2, [pc, #100]	; (800d168 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d102:	4413      	add	r3, r2
 800d104:	4299      	cmp	r1, r3
 800d106:	d129      	bne.n	800d15c <vTaskPriorityDisinheritAfterTimeout+0x108>
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	3304      	adds	r3, #4
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe f9c4 	bl	800b49a <uxListRemove>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11c:	2201      	movs	r2, #1
 800d11e:	fa02 f303 	lsl.w	r3, r2, r3
 800d122:	43da      	mvns	r2, r3
 800d124:	4b11      	ldr	r3, [pc, #68]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4013      	ands	r3, r2
 800d12a:	4a10      	ldr	r2, [pc, #64]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d132:	2201      	movs	r2, #1
 800d134:	409a      	lsls	r2, r3
 800d136:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	4a0b      	ldr	r2, [pc, #44]	; (800d16c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d144:	4613      	mov	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4413      	add	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4a06      	ldr	r2, [pc, #24]	; (800d168 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d14e:	441a      	add	r2, r3
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	3304      	adds	r3, #4
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f7fe f942 	bl	800b3e0 <vListInsertEnd>
 800d15c:	bf00      	nop
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	2000af7c 	.word	0x2000af7c
 800d168:	2000af80 	.word	0x2000af80
 800d16c:	2000b084 	.word	0x2000b084

0800d170 <pvTaskIncrementMutexHeldCount>:
 800d170:	b480      	push	{r7}
 800d172:	af00      	add	r7, sp, #0
 800d174:	4b07      	ldr	r3, [pc, #28]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d004      	beq.n	800d186 <pvTaskIncrementMutexHeldCount+0x16>
 800d17c:	4b05      	ldr	r3, [pc, #20]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d182:	3201      	adds	r2, #1
 800d184:	649a      	str	r2, [r3, #72]	; 0x48
 800d186:	4b03      	ldr	r3, [pc, #12]	; (800d194 <pvTaskIncrementMutexHeldCount+0x24>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4618      	mov	r0, r3
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	2000af7c 	.word	0x2000af7c

0800d198 <prvAddCurrentTaskToDelayedList>:
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
 800d1a2:	4b29      	ldr	r3, [pc, #164]	; (800d248 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	4b28      	ldr	r3, [pc, #160]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe f973 	bl	800b49a <uxListRemove>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10b      	bne.n	800d1d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d1ba:	4b24      	ldr	r3, [pc, #144]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c6:	43da      	mvns	r2, r3
 800d1c8:	4b21      	ldr	r3, [pc, #132]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	4a20      	ldr	r2, [pc, #128]	; (800d250 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d8:	d10a      	bne.n	800d1f0 <prvAddCurrentTaskToDelayedList+0x58>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <prvAddCurrentTaskToDelayedList+0x58>
 800d1e0:	4b1a      	ldr	r3, [pc, #104]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	481a      	ldr	r0, [pc, #104]	; (800d254 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d1ea:	f7fe f8f9 	bl	800b3e0 <vListInsertEnd>
 800d1ee:	e026      	b.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	60bb      	str	r3, [r7, #8]
 800d1f8:	4b14      	ldr	r3, [pc, #80]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	605a      	str	r2, [r3, #4]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	429a      	cmp	r2, r3
 800d206:	d209      	bcs.n	800d21c <prvAddCurrentTaskToDelayedList+0x84>
 800d208:	4b13      	ldr	r3, [pc, #76]	; (800d258 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3304      	adds	r3, #4
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7fe f907 	bl	800b428 <vListInsert>
 800d21a:	e010      	b.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
 800d21c:	4b0f      	ldr	r3, [pc, #60]	; (800d25c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3304      	adds	r3, #4
 800d226:	4619      	mov	r1, r3
 800d228:	4610      	mov	r0, r2
 800d22a:	f7fe f8fd 	bl	800b428 <vListInsert>
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	429a      	cmp	r2, r3
 800d236:	d202      	bcs.n	800d23e <prvAddCurrentTaskToDelayedList+0xa6>
 800d238:	4a09      	ldr	r2, [pc, #36]	; (800d260 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6013      	str	r3, [r2, #0]
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	2000b080 	.word	0x2000b080
 800d24c:	2000af7c 	.word	0x2000af7c
 800d250:	2000b084 	.word	0x2000b084
 800d254:	2000b068 	.word	0x2000b068
 800d258:	2000b038 	.word	0x2000b038
 800d25c:	2000b034 	.word	0x2000b034
 800d260:	2000b09c 	.word	0x2000b09c

0800d264 <pxPortInitialiseStack>:
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3b04      	subs	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3b04      	subs	r3, #4
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f023 0201 	bic.w	r2, r3, #1
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3b04      	subs	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	4a0c      	ldr	r2, [pc, #48]	; (800d2c8 <pxPortInitialiseStack+0x64>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3b14      	subs	r3, #20
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3b04      	subs	r3, #4
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f06f 0202 	mvn.w	r2, #2
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3b20      	subs	r3, #32
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	0800d2cd 	.word	0x0800d2cd

0800d2cc <prvTaskExitError>:
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	607b      	str	r3, [r7, #4]
 800d2d6:	4b12      	ldr	r3, [pc, #72]	; (800d320 <prvTaskExitError+0x54>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2de:	d00a      	beq.n	800d2f6 <prvTaskExitError+0x2a>
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	60fb      	str	r3, [r7, #12]
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <prvTaskExitError+0x28>
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60bb      	str	r3, [r7, #8]
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0fc      	beq.n	800d30c <prvTaskExitError+0x40>
 800d312:	bf00      	nop
 800d314:	bf00      	nop
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20000028 	.word	0x20000028
	...

0800d330 <SVC_Handler>:
 800d330:	4b07      	ldr	r3, [pc, #28]	; (800d350 <pxCurrentTCBConst2>)
 800d332:	6819      	ldr	r1, [r3, #0]
 800d334:	6808      	ldr	r0, [r1, #0]
 800d336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	f380 8809 	msr	PSP, r0
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f04f 0000 	mov.w	r0, #0
 800d346:	f380 8811 	msr	BASEPRI, r0
 800d34a:	4770      	bx	lr
 800d34c:	f3af 8000 	nop.w

0800d350 <pxCurrentTCBConst2>:
 800d350:	2000af7c 	.word	0x2000af7c
 800d354:	bf00      	nop
 800d356:	bf00      	nop

0800d358 <prvPortStartFirstTask>:
 800d358:	4808      	ldr	r0, [pc, #32]	; (800d37c <prvPortStartFirstTask+0x24>)
 800d35a:	6800      	ldr	r0, [r0, #0]
 800d35c:	6800      	ldr	r0, [r0, #0]
 800d35e:	f380 8808 	msr	MSP, r0
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f380 8814 	msr	CONTROL, r0
 800d36a:	b662      	cpsie	i
 800d36c:	b661      	cpsie	f
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	df00      	svc	0
 800d378:	bf00      	nop
 800d37a:	bf00      	nop
 800d37c:	e000ed08 	.word	0xe000ed08

0800d380 <xPortStartScheduler>:
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	4b46      	ldr	r3, [pc, #280]	; (800d4a0 <xPortStartScheduler+0x120>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a46      	ldr	r2, [pc, #280]	; (800d4a4 <xPortStartScheduler+0x124>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d10a      	bne.n	800d3a6 <xPortStartScheduler+0x26>
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	613b      	str	r3, [r7, #16]
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xPortStartScheduler+0x24>
 800d3a6:	4b3e      	ldr	r3, [pc, #248]	; (800d4a0 <xPortStartScheduler+0x120>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a3f      	ldr	r2, [pc, #252]	; (800d4a8 <xPortStartScheduler+0x128>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d10a      	bne.n	800d3c6 <xPortStartScheduler+0x46>
 800d3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	60fb      	str	r3, [r7, #12]
 800d3c2:	bf00      	nop
 800d3c4:	e7fe      	b.n	800d3c4 <xPortStartScheduler+0x44>
 800d3c6:	4b39      	ldr	r3, [pc, #228]	; (800d4ac <xPortStartScheduler+0x12c>)
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	607b      	str	r3, [r7, #4]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	701a      	strb	r2, [r3, #0]
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	70fb      	strb	r3, [r7, #3]
 800d3e0:	78fb      	ldrb	r3, [r7, #3]
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	4b31      	ldr	r3, [pc, #196]	; (800d4b0 <xPortStartScheduler+0x130>)
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	4b31      	ldr	r3, [pc, #196]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d3f0:	2207      	movs	r2, #7
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e009      	b.n	800d40a <xPortStartScheduler+0x8a>
 800d3f6:	4b2f      	ldr	r3, [pc, #188]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	4a2d      	ldr	r2, [pc, #180]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d3fe:	6013      	str	r3, [r2, #0]
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	b2db      	uxtb	r3, r3
 800d408:	70fb      	strb	r3, [r7, #3]
 800d40a:	78fb      	ldrb	r3, [r7, #3]
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d412:	2b80      	cmp	r3, #128	; 0x80
 800d414:	d0ef      	beq.n	800d3f6 <xPortStartScheduler+0x76>
 800d416:	4b27      	ldr	r3, [pc, #156]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f1c3 0307 	rsb	r3, r3, #7
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d00a      	beq.n	800d438 <xPortStartScheduler+0xb8>
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	60bb      	str	r3, [r7, #8]
 800d434:	bf00      	nop
 800d436:	e7fe      	b.n	800d436 <xPortStartScheduler+0xb6>
 800d438:	4b1e      	ldr	r3, [pc, #120]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	021b      	lsls	r3, r3, #8
 800d43e:	4a1d      	ldr	r2, [pc, #116]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	4b1c      	ldr	r3, [pc, #112]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d44a:	4a1a      	ldr	r2, [pc, #104]	; (800d4b4 <xPortStartScheduler+0x134>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	b2da      	uxtb	r2, r3
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	701a      	strb	r2, [r3, #0]
 800d456:	4b18      	ldr	r3, [pc, #96]	; (800d4b8 <xPortStartScheduler+0x138>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a17      	ldr	r2, [pc, #92]	; (800d4b8 <xPortStartScheduler+0x138>)
 800d45c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d460:	6013      	str	r3, [r2, #0]
 800d462:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <xPortStartScheduler+0x138>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a14      	ldr	r2, [pc, #80]	; (800d4b8 <xPortStartScheduler+0x138>)
 800d468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	f000 f8dd 	bl	800d62c <vPortSetupTimerInterrupt>
 800d472:	4b12      	ldr	r3, [pc, #72]	; (800d4bc <xPortStartScheduler+0x13c>)
 800d474:	2200      	movs	r2, #0
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	f000 f8fc 	bl	800d674 <vPortEnableVFP>
 800d47c:	4b10      	ldr	r3, [pc, #64]	; (800d4c0 <xPortStartScheduler+0x140>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0f      	ldr	r2, [pc, #60]	; (800d4c0 <xPortStartScheduler+0x140>)
 800d482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	f7ff ff66 	bl	800d358 <prvPortStartFirstTask>
 800d48c:	f7ff fa82 	bl	800c994 <vTaskSwitchContext>
 800d490:	f7ff ff1c 	bl	800d2cc <prvTaskExitError>
 800d494:	2300      	movs	r3, #0
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	e000ed00 	.word	0xe000ed00
 800d4a4:	410fc271 	.word	0x410fc271
 800d4a8:	410fc270 	.word	0x410fc270
 800d4ac:	e000e400 	.word	0xe000e400
 800d4b0:	2000b0a8 	.word	0x2000b0a8
 800d4b4:	2000b0ac 	.word	0x2000b0ac
 800d4b8:	e000ed20 	.word	0xe000ed20
 800d4bc:	20000028 	.word	0x20000028
 800d4c0:	e000ef34 	.word	0xe000ef34

0800d4c4 <vPortEnterCritical>:
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	607b      	str	r3, [r7, #4]
 800d4dc:	bf00      	nop
 800d4de:	4b0f      	ldr	r3, [pc, #60]	; (800d51c <vPortEnterCritical+0x58>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	4a0d      	ldr	r2, [pc, #52]	; (800d51c <vPortEnterCritical+0x58>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	; (800d51c <vPortEnterCritical+0x58>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d10f      	bne.n	800d510 <vPortEnterCritical+0x4c>
 800d4f0:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <vPortEnterCritical+0x5c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00a      	beq.n	800d510 <vPortEnterCritical+0x4c>
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <vPortEnterCritical+0x4a>
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	20000028 	.word	0x20000028
 800d520:	e000ed04 	.word	0xe000ed04

0800d524 <vPortExitCritical>:
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4b12      	ldr	r3, [pc, #72]	; (800d574 <vPortExitCritical+0x50>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10a      	bne.n	800d548 <vPortExitCritical+0x24>
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	607b      	str	r3, [r7, #4]
 800d544:	bf00      	nop
 800d546:	e7fe      	b.n	800d546 <vPortExitCritical+0x22>
 800d548:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <vPortExitCritical+0x50>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	4a09      	ldr	r2, [pc, #36]	; (800d574 <vPortExitCritical+0x50>)
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	4b08      	ldr	r3, [pc, #32]	; (800d574 <vPortExitCritical+0x50>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <vPortExitCritical+0x42>
 800d55a:	2300      	movs	r3, #0
 800d55c:	603b      	str	r3, [r7, #0]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	20000028 	.word	0x20000028
	...

0800d580 <PendSV_Handler>:
 800d580:	f3ef 8009 	mrs	r0, PSP
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	4b15      	ldr	r3, [pc, #84]	; (800d5e0 <pxCurrentTCBConst>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	f01e 0f10 	tst.w	lr, #16
 800d590:	bf08      	it	eq
 800d592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59a:	6010      	str	r0, [r2, #0]
 800d59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5a4:	f380 8811 	msr	BASEPRI, r0
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f7ff f9f0 	bl	800c994 <vTaskSwitchContext>
 800d5b4:	f04f 0000 	mov.w	r0, #0
 800d5b8:	f380 8811 	msr	BASEPRI, r0
 800d5bc:	bc09      	pop	{r0, r3}
 800d5be:	6819      	ldr	r1, [r3, #0]
 800d5c0:	6808      	ldr	r0, [r1, #0]
 800d5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c6:	f01e 0f10 	tst.w	lr, #16
 800d5ca:	bf08      	it	eq
 800d5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5d0:	f380 8809 	msr	PSP, r0
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	f3af 8000 	nop.w

0800d5e0 <pxCurrentTCBConst>:
 800d5e0:	2000af7c 	.word	0x2000af7c
 800d5e4:	bf00      	nop
 800d5e6:	bf00      	nop

0800d5e8 <SysTick_Handler>:
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	607b      	str	r3, [r7, #4]
 800d600:	bf00      	nop
 800d602:	f7ff f90f 	bl	800c824 <xTaskIncrementTick>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <SysTick_Handler+0x2c>
 800d60c:	4b06      	ldr	r3, [pc, #24]	; (800d628 <SysTick_Handler+0x40>)
 800d60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	2300      	movs	r3, #0
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	bf00      	nop
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	e000ed04 	.word	0xe000ed04

0800d62c <vPortSetupTimerInterrupt>:
 800d62c:	b480      	push	{r7}
 800d62e:	af00      	add	r7, sp, #0
 800d630:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <vPortSetupTimerInterrupt+0x34>)
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <vPortSetupTimerInterrupt+0x38>)
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	4b0a      	ldr	r3, [pc, #40]	; (800d668 <vPortSetupTimerInterrupt+0x3c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <vPortSetupTimerInterrupt+0x40>)
 800d642:	fba2 2303 	umull	r2, r3, r2, r3
 800d646:	099b      	lsrs	r3, r3, #6
 800d648:	4a09      	ldr	r2, [pc, #36]	; (800d670 <vPortSetupTimerInterrupt+0x44>)
 800d64a:	3b01      	subs	r3, #1
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	4b04      	ldr	r3, [pc, #16]	; (800d660 <vPortSetupTimerInterrupt+0x34>)
 800d650:	2207      	movs	r2, #7
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	bf00      	nop
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	e000e010 	.word	0xe000e010
 800d664:	e000e018 	.word	0xe000e018
 800d668:	20000004 	.word	0x20000004
 800d66c:	10624dd3 	.word	0x10624dd3
 800d670:	e000e014 	.word	0xe000e014

0800d674 <vPortEnableVFP>:
 800d674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d684 <vPortEnableVFP+0x10>
 800d678:	6801      	ldr	r1, [r0, #0]
 800d67a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d67e:	6001      	str	r1, [r0, #0]
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	e000ed88 	.word	0xe000ed88

0800d688 <vPortValidateInterruptPriority>:
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	f3ef 8305 	mrs	r3, IPSR
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b0f      	cmp	r3, #15
 800d698:	d914      	bls.n	800d6c4 <vPortValidateInterruptPriority+0x3c>
 800d69a:	4a17      	ldr	r2, [pc, #92]	; (800d6f8 <vPortValidateInterruptPriority+0x70>)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	72fb      	strb	r3, [r7, #11]
 800d6a4:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <vPortValidateInterruptPriority+0x74>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	7afa      	ldrb	r2, [r7, #11]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d20a      	bcs.n	800d6c4 <vPortValidateInterruptPriority+0x3c>
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	607b      	str	r3, [r7, #4]
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <vPortValidateInterruptPriority+0x3a>
 800d6c4:	4b0e      	ldr	r3, [pc, #56]	; (800d700 <vPortValidateInterruptPriority+0x78>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6cc:	4b0d      	ldr	r3, [pc, #52]	; (800d704 <vPortValidateInterruptPriority+0x7c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d90a      	bls.n	800d6ea <vPortValidateInterruptPriority+0x62>
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	603b      	str	r3, [r7, #0]
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <vPortValidateInterruptPriority+0x60>
 800d6ea:	bf00      	nop
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	e000e3f0 	.word	0xe000e3f0
 800d6fc:	2000b0a8 	.word	0x2000b0a8
 800d700:	e000ed0c 	.word	0xe000ed0c
 800d704:	2000b0ac 	.word	0x2000b0ac

0800d708 <pvPortMalloc>:
 800d708:	b580      	push	{r7, lr}
 800d70a:	b08a      	sub	sp, #40	; 0x28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	2300      	movs	r3, #0
 800d712:	61fb      	str	r3, [r7, #28]
 800d714:	f7fe ffdc 	bl	800c6d0 <vTaskSuspendAll>
 800d718:	4b5b      	ldr	r3, [pc, #364]	; (800d888 <pvPortMalloc+0x180>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <pvPortMalloc+0x1c>
 800d720:	f000 f920 	bl	800d964 <prvHeapInit>
 800d724:	4b59      	ldr	r3, [pc, #356]	; (800d88c <pvPortMalloc+0x184>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4013      	ands	r3, r2
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 8093 	bne.w	800d858 <pvPortMalloc+0x150>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d01d      	beq.n	800d774 <pvPortMalloc+0x6c>
 800d738:	2208      	movs	r2, #8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4413      	add	r3, r2
 800d73e:	607b      	str	r3, [r7, #4]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b00      	cmp	r3, #0
 800d748:	d014      	beq.n	800d774 <pvPortMalloc+0x6c>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f023 0307 	bic.w	r3, r3, #7
 800d750:	3308      	adds	r3, #8
 800d752:	607b      	str	r3, [r7, #4]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <pvPortMalloc+0x6c>
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <pvPortMalloc+0x6a>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d06e      	beq.n	800d858 <pvPortMalloc+0x150>
 800d77a:	4b45      	ldr	r3, [pc, #276]	; (800d890 <pvPortMalloc+0x188>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	429a      	cmp	r2, r3
 800d782:	d869      	bhi.n	800d858 <pvPortMalloc+0x150>
 800d784:	4b43      	ldr	r3, [pc, #268]	; (800d894 <pvPortMalloc+0x18c>)
 800d786:	623b      	str	r3, [r7, #32]
 800d788:	4b42      	ldr	r3, [pc, #264]	; (800d894 <pvPortMalloc+0x18c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	627b      	str	r3, [r7, #36]	; 0x24
 800d78e:	e004      	b.n	800d79a <pvPortMalloc+0x92>
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	623b      	str	r3, [r7, #32]
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d903      	bls.n	800d7ac <pvPortMalloc+0xa4>
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1f1      	bne.n	800d790 <pvPortMalloc+0x88>
 800d7ac:	4b36      	ldr	r3, [pc, #216]	; (800d888 <pvPortMalloc+0x180>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d050      	beq.n	800d858 <pvPortMalloc+0x150>
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2208      	movs	r2, #8
 800d7bc:	4413      	add	r3, r2
 800d7be:	61fb      	str	r3, [r7, #28]
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	601a      	str	r2, [r3, #0]
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d91f      	bls.n	800d818 <pvPortMalloc+0x110>
 800d7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4413      	add	r3, r2
 800d7de:	61bb      	str	r3, [r7, #24]
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <pvPortMalloc+0xf8>
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	613b      	str	r3, [r7, #16]
 800d7fc:	bf00      	nop
 800d7fe:	e7fe      	b.n	800d7fe <pvPortMalloc+0xf6>
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	1ad2      	subs	r2, r2, r3
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	605a      	str	r2, [r3, #4]
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	605a      	str	r2, [r3, #4]
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f000 f908 	bl	800da28 <prvInsertBlockIntoFreeList>
 800d818:	4b1d      	ldr	r3, [pc, #116]	; (800d890 <pvPortMalloc+0x188>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	4a1b      	ldr	r2, [pc, #108]	; (800d890 <pvPortMalloc+0x188>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	4b1a      	ldr	r3, [pc, #104]	; (800d890 <pvPortMalloc+0x188>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <pvPortMalloc+0x190>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d203      	bcs.n	800d83a <pvPortMalloc+0x132>
 800d832:	4b17      	ldr	r3, [pc, #92]	; (800d890 <pvPortMalloc+0x188>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a18      	ldr	r2, [pc, #96]	; (800d898 <pvPortMalloc+0x190>)
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <pvPortMalloc+0x184>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	431a      	orrs	r2, r3
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	605a      	str	r2, [r3, #4]
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <pvPortMalloc+0x194>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3301      	adds	r3, #1
 800d854:	4a11      	ldr	r2, [pc, #68]	; (800d89c <pvPortMalloc+0x194>)
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	f7fe ff48 	bl	800c6ec <xTaskResumeAll>
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f003 0307 	and.w	r3, r3, #7
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00a      	beq.n	800d87c <pvPortMalloc+0x174>
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <pvPortMalloc+0x172>
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	4618      	mov	r0, r3
 800d880:	3728      	adds	r7, #40	; 0x28
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	2000ecb8 	.word	0x2000ecb8
 800d88c:	2000eccc 	.word	0x2000eccc
 800d890:	2000ecbc 	.word	0x2000ecbc
 800d894:	2000ecb0 	.word	0x2000ecb0
 800d898:	2000ecc0 	.word	0x2000ecc0
 800d89c:	2000ecc4 	.word	0x2000ecc4

0800d8a0 <vPortFree>:
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	617b      	str	r3, [r7, #20]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d04d      	beq.n	800d94e <vPortFree+0xae>
 800d8b2:	2308      	movs	r3, #8
 800d8b4:	425b      	negs	r3, r3
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	617b      	str	r3, [r7, #20]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <vPortFree+0xb8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <vPortFree+0x44>
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <vPortFree+0x42>
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <vPortFree+0x62>
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	60bb      	str	r3, [r7, #8]
 800d8fe:	bf00      	nop
 800d900:	e7fe      	b.n	800d900 <vPortFree+0x60>
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	4b14      	ldr	r3, [pc, #80]	; (800d958 <vPortFree+0xb8>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4013      	ands	r3, r2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01e      	beq.n	800d94e <vPortFree+0xae>
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d11a      	bne.n	800d94e <vPortFree+0xae>
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b0e      	ldr	r3, [pc, #56]	; (800d958 <vPortFree+0xb8>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	43db      	mvns	r3, r3
 800d922:	401a      	ands	r2, r3
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	605a      	str	r2, [r3, #4]
 800d928:	f7fe fed2 	bl	800c6d0 <vTaskSuspendAll>
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <vPortFree+0xbc>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4413      	add	r3, r2
 800d936:	4a09      	ldr	r2, [pc, #36]	; (800d95c <vPortFree+0xbc>)
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	6938      	ldr	r0, [r7, #16]
 800d93c:	f000 f874 	bl	800da28 <prvInsertBlockIntoFreeList>
 800d940:	4b07      	ldr	r3, [pc, #28]	; (800d960 <vPortFree+0xc0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	4a06      	ldr	r2, [pc, #24]	; (800d960 <vPortFree+0xc0>)
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	f7fe fecf 	bl	800c6ec <xTaskResumeAll>
 800d94e:	bf00      	nop
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2000eccc 	.word	0x2000eccc
 800d95c:	2000ecbc 	.word	0x2000ecbc
 800d960:	2000ecc8 	.word	0x2000ecc8

0800d964 <prvHeapInit>:
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d96e:	60bb      	str	r3, [r7, #8]
 800d970:	4b27      	ldr	r3, [pc, #156]	; (800da10 <prvHeapInit+0xac>)
 800d972:	60fb      	str	r3, [r7, #12]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f003 0307 	and.w	r3, r3, #7
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00c      	beq.n	800d998 <prvHeapInit+0x34>
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3307      	adds	r3, #7
 800d982:	60fb      	str	r3, [r7, #12]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0307 	bic.w	r3, r3, #7
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	4a1f      	ldr	r2, [pc, #124]	; (800da10 <prvHeapInit+0xac>)
 800d994:	4413      	add	r3, r2
 800d996:	60bb      	str	r3, [r7, #8]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	607b      	str	r3, [r7, #4]
 800d99c:	4a1d      	ldr	r2, [pc, #116]	; (800da14 <prvHeapInit+0xb0>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6013      	str	r3, [r2, #0]
 800d9a2:	4b1c      	ldr	r3, [pc, #112]	; (800da14 <prvHeapInit+0xb0>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	605a      	str	r2, [r3, #4]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	2208      	movs	r2, #8
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	1a9b      	subs	r3, r3, r2
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f023 0307 	bic.w	r3, r3, #7
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4a15      	ldr	r2, [pc, #84]	; (800da18 <prvHeapInit+0xb4>)
 800d9c4:	6013      	str	r3, [r2, #0]
 800d9c6:	4b14      	ldr	r3, [pc, #80]	; (800da18 <prvHeapInit+0xb4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	605a      	str	r2, [r3, #4]
 800d9ce:	4b12      	ldr	r3, [pc, #72]	; (800da18 <prvHeapInit+0xb4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	605a      	str	r2, [r3, #4]
 800d9e4:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <prvHeapInit+0xb4>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	4a0a      	ldr	r2, [pc, #40]	; (800da1c <prvHeapInit+0xb8>)
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	4a09      	ldr	r2, [pc, #36]	; (800da20 <prvHeapInit+0xbc>)
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <prvHeapInit+0xc0>)
 800d9fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	bf00      	nop
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	2000b0b0 	.word	0x2000b0b0
 800da14:	2000ecb0 	.word	0x2000ecb0
 800da18:	2000ecb8 	.word	0x2000ecb8
 800da1c:	2000ecc0 	.word	0x2000ecc0
 800da20:	2000ecbc 	.word	0x2000ecbc
 800da24:	2000eccc 	.word	0x2000eccc

0800da28 <prvInsertBlockIntoFreeList>:
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	4b28      	ldr	r3, [pc, #160]	; (800dad4 <prvInsertBlockIntoFreeList+0xac>)
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	e002      	b.n	800da3c <prvInsertBlockIntoFreeList+0x14>
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	429a      	cmp	r2, r3
 800da44:	d8f7      	bhi.n	800da36 <prvInsertBlockIntoFreeList+0xe>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	60bb      	str	r3, [r7, #8]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	4413      	add	r3, r2
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d108      	bne.n	800da6a <prvInsertBlockIntoFreeList+0x42>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	441a      	add	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	605a      	str	r2, [r3, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	607b      	str	r3, [r7, #4]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	60bb      	str	r3, [r7, #8]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	441a      	add	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d118      	bne.n	800dab0 <prvInsertBlockIntoFreeList+0x88>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <prvInsertBlockIntoFreeList+0xb0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d00d      	beq.n	800daa6 <prvInsertBlockIntoFreeList+0x7e>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	441a      	add	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	605a      	str	r2, [r3, #4]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	e008      	b.n	800dab8 <prvInsertBlockIntoFreeList+0x90>
 800daa6:	4b0c      	ldr	r3, [pc, #48]	; (800dad8 <prvInsertBlockIntoFreeList+0xb0>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	e003      	b.n	800dab8 <prvInsertBlockIntoFreeList+0x90>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d002      	beq.n	800dac6 <prvInsertBlockIntoFreeList+0x9e>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	2000ecb0 	.word	0x2000ecb0
 800dad8:	2000ecb8 	.word	0x2000ecb8

0800dadc <__cvt>:
 800dadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	ec55 4b10 	vmov	r4, r5, d0
 800dae4:	2d00      	cmp	r5, #0
 800dae6:	460e      	mov	r6, r1
 800dae8:	4619      	mov	r1, r3
 800daea:	462b      	mov	r3, r5
 800daec:	bfbb      	ittet	lt
 800daee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800daf2:	461d      	movlt	r5, r3
 800daf4:	2300      	movge	r3, #0
 800daf6:	232d      	movlt	r3, #45	; 0x2d
 800daf8:	700b      	strb	r3, [r1, #0]
 800dafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dafc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db00:	4691      	mov	r9, r2
 800db02:	f023 0820 	bic.w	r8, r3, #32
 800db06:	bfbc      	itt	lt
 800db08:	4622      	movlt	r2, r4
 800db0a:	4614      	movlt	r4, r2
 800db0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db10:	d005      	beq.n	800db1e <__cvt+0x42>
 800db12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db16:	d100      	bne.n	800db1a <__cvt+0x3e>
 800db18:	3601      	adds	r6, #1
 800db1a:	2102      	movs	r1, #2
 800db1c:	e000      	b.n	800db20 <__cvt+0x44>
 800db1e:	2103      	movs	r1, #3
 800db20:	ab03      	add	r3, sp, #12
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	ab02      	add	r3, sp, #8
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	ec45 4b10 	vmov	d0, r4, r5
 800db2c:	4653      	mov	r3, sl
 800db2e:	4632      	mov	r2, r6
 800db30:	f000 ff22 	bl	800e978 <_dtoa_r>
 800db34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db38:	4607      	mov	r7, r0
 800db3a:	d102      	bne.n	800db42 <__cvt+0x66>
 800db3c:	f019 0f01 	tst.w	r9, #1
 800db40:	d022      	beq.n	800db88 <__cvt+0xac>
 800db42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db46:	eb07 0906 	add.w	r9, r7, r6
 800db4a:	d110      	bne.n	800db6e <__cvt+0x92>
 800db4c:	783b      	ldrb	r3, [r7, #0]
 800db4e:	2b30      	cmp	r3, #48	; 0x30
 800db50:	d10a      	bne.n	800db68 <__cvt+0x8c>
 800db52:	2200      	movs	r2, #0
 800db54:	2300      	movs	r3, #0
 800db56:	4620      	mov	r0, r4
 800db58:	4629      	mov	r1, r5
 800db5a:	f7f2 ffd5 	bl	8000b08 <__aeabi_dcmpeq>
 800db5e:	b918      	cbnz	r0, 800db68 <__cvt+0x8c>
 800db60:	f1c6 0601 	rsb	r6, r6, #1
 800db64:	f8ca 6000 	str.w	r6, [sl]
 800db68:	f8da 3000 	ldr.w	r3, [sl]
 800db6c:	4499      	add	r9, r3
 800db6e:	2200      	movs	r2, #0
 800db70:	2300      	movs	r3, #0
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 ffc7 	bl	8000b08 <__aeabi_dcmpeq>
 800db7a:	b108      	cbz	r0, 800db80 <__cvt+0xa4>
 800db7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800db80:	2230      	movs	r2, #48	; 0x30
 800db82:	9b03      	ldr	r3, [sp, #12]
 800db84:	454b      	cmp	r3, r9
 800db86:	d307      	bcc.n	800db98 <__cvt+0xbc>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db8c:	1bdb      	subs	r3, r3, r7
 800db8e:	4638      	mov	r0, r7
 800db90:	6013      	str	r3, [r2, #0]
 800db92:	b004      	add	sp, #16
 800db94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db98:	1c59      	adds	r1, r3, #1
 800db9a:	9103      	str	r1, [sp, #12]
 800db9c:	701a      	strb	r2, [r3, #0]
 800db9e:	e7f0      	b.n	800db82 <__cvt+0xa6>

0800dba0 <__exponent>:
 800dba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dba2:	4603      	mov	r3, r0
 800dba4:	2900      	cmp	r1, #0
 800dba6:	bfb8      	it	lt
 800dba8:	4249      	neglt	r1, r1
 800dbaa:	f803 2b02 	strb.w	r2, [r3], #2
 800dbae:	bfb4      	ite	lt
 800dbb0:	222d      	movlt	r2, #45	; 0x2d
 800dbb2:	222b      	movge	r2, #43	; 0x2b
 800dbb4:	2909      	cmp	r1, #9
 800dbb6:	7042      	strb	r2, [r0, #1]
 800dbb8:	dd2a      	ble.n	800dc10 <__exponent+0x70>
 800dbba:	f10d 0207 	add.w	r2, sp, #7
 800dbbe:	4617      	mov	r7, r2
 800dbc0:	260a      	movs	r6, #10
 800dbc2:	4694      	mov	ip, r2
 800dbc4:	fb91 f5f6 	sdiv	r5, r1, r6
 800dbc8:	fb06 1415 	mls	r4, r6, r5, r1
 800dbcc:	3430      	adds	r4, #48	; 0x30
 800dbce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	2c63      	cmp	r4, #99	; 0x63
 800dbd6:	f102 32ff 	add.w	r2, r2, #4294967295
 800dbda:	4629      	mov	r1, r5
 800dbdc:	dcf1      	bgt.n	800dbc2 <__exponent+0x22>
 800dbde:	3130      	adds	r1, #48	; 0x30
 800dbe0:	f1ac 0402 	sub.w	r4, ip, #2
 800dbe4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dbe8:	1c41      	adds	r1, r0, #1
 800dbea:	4622      	mov	r2, r4
 800dbec:	42ba      	cmp	r2, r7
 800dbee:	d30a      	bcc.n	800dc06 <__exponent+0x66>
 800dbf0:	f10d 0209 	add.w	r2, sp, #9
 800dbf4:	eba2 020c 	sub.w	r2, r2, ip
 800dbf8:	42bc      	cmp	r4, r7
 800dbfa:	bf88      	it	hi
 800dbfc:	2200      	movhi	r2, #0
 800dbfe:	4413      	add	r3, r2
 800dc00:	1a18      	subs	r0, r3, r0
 800dc02:	b003      	add	sp, #12
 800dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc06:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dc0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dc0e:	e7ed      	b.n	800dbec <__exponent+0x4c>
 800dc10:	2330      	movs	r3, #48	; 0x30
 800dc12:	3130      	adds	r1, #48	; 0x30
 800dc14:	7083      	strb	r3, [r0, #2]
 800dc16:	70c1      	strb	r1, [r0, #3]
 800dc18:	1d03      	adds	r3, r0, #4
 800dc1a:	e7f1      	b.n	800dc00 <__exponent+0x60>

0800dc1c <_printf_float>:
 800dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc20:	ed2d 8b02 	vpush	{d8}
 800dc24:	b08d      	sub	sp, #52	; 0x34
 800dc26:	460c      	mov	r4, r1
 800dc28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	461f      	mov	r7, r3
 800dc30:	4605      	mov	r5, r0
 800dc32:	f000 fd3d 	bl	800e6b0 <_localeconv_r>
 800dc36:	f8d0 a000 	ldr.w	sl, [r0]
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	f7f2 fb38 	bl	80002b0 <strlen>
 800dc40:	2300      	movs	r3, #0
 800dc42:	930a      	str	r3, [sp, #40]	; 0x28
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	9305      	str	r3, [sp, #20]
 800dc48:	f8d8 3000 	ldr.w	r3, [r8]
 800dc4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dc50:	3307      	adds	r3, #7
 800dc52:	f023 0307 	bic.w	r3, r3, #7
 800dc56:	f103 0208 	add.w	r2, r3, #8
 800dc5a:	f8c8 2000 	str.w	r2, [r8]
 800dc5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc66:	9307      	str	r3, [sp, #28]
 800dc68:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc6c:	ee08 0a10 	vmov	s16, r0
 800dc70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dc74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc78:	4b9e      	ldr	r3, [pc, #632]	; (800def4 <_printf_float+0x2d8>)
 800dc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7e:	f7f2 ff75 	bl	8000b6c <__aeabi_dcmpun>
 800dc82:	bb88      	cbnz	r0, 800dce8 <_printf_float+0xcc>
 800dc84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc88:	4b9a      	ldr	r3, [pc, #616]	; (800def4 <_printf_float+0x2d8>)
 800dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8e:	f7f2 ff4f 	bl	8000b30 <__aeabi_dcmple>
 800dc92:	bb48      	cbnz	r0, 800dce8 <_printf_float+0xcc>
 800dc94:	2200      	movs	r2, #0
 800dc96:	2300      	movs	r3, #0
 800dc98:	4640      	mov	r0, r8
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	f7f2 ff3e 	bl	8000b1c <__aeabi_dcmplt>
 800dca0:	b110      	cbz	r0, 800dca8 <_printf_float+0x8c>
 800dca2:	232d      	movs	r3, #45	; 0x2d
 800dca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dca8:	4a93      	ldr	r2, [pc, #588]	; (800def8 <_printf_float+0x2dc>)
 800dcaa:	4b94      	ldr	r3, [pc, #592]	; (800defc <_printf_float+0x2e0>)
 800dcac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dcb0:	bf94      	ite	ls
 800dcb2:	4690      	movls	r8, r2
 800dcb4:	4698      	movhi	r8, r3
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	6123      	str	r3, [r4, #16]
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	f023 0304 	bic.w	r3, r3, #4
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	f04f 0900 	mov.w	r9, #0
 800dcc6:	9700      	str	r7, [sp, #0]
 800dcc8:	4633      	mov	r3, r6
 800dcca:	aa0b      	add	r2, sp, #44	; 0x2c
 800dccc:	4621      	mov	r1, r4
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f000 f9da 	bl	800e088 <_printf_common>
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	f040 8090 	bne.w	800ddfa <_printf_float+0x1de>
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295
 800dcde:	b00d      	add	sp, #52	; 0x34
 800dce0:	ecbd 8b02 	vpop	{d8}
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	4642      	mov	r2, r8
 800dcea:	464b      	mov	r3, r9
 800dcec:	4640      	mov	r0, r8
 800dcee:	4649      	mov	r1, r9
 800dcf0:	f7f2 ff3c 	bl	8000b6c <__aeabi_dcmpun>
 800dcf4:	b140      	cbz	r0, 800dd08 <_printf_float+0xec>
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	bfbc      	itt	lt
 800dcfc:	232d      	movlt	r3, #45	; 0x2d
 800dcfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd02:	4a7f      	ldr	r2, [pc, #508]	; (800df00 <_printf_float+0x2e4>)
 800dd04:	4b7f      	ldr	r3, [pc, #508]	; (800df04 <_printf_float+0x2e8>)
 800dd06:	e7d1      	b.n	800dcac <_printf_float+0x90>
 800dd08:	6863      	ldr	r3, [r4, #4]
 800dd0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd0e:	9206      	str	r2, [sp, #24]
 800dd10:	1c5a      	adds	r2, r3, #1
 800dd12:	d13f      	bne.n	800dd94 <_printf_float+0x178>
 800dd14:	2306      	movs	r3, #6
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	9b05      	ldr	r3, [sp, #20]
 800dd1a:	6861      	ldr	r1, [r4, #4]
 800dd1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd20:	2300      	movs	r3, #0
 800dd22:	9303      	str	r3, [sp, #12]
 800dd24:	ab0a      	add	r3, sp, #40	; 0x28
 800dd26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd2a:	ab09      	add	r3, sp, #36	; 0x24
 800dd2c:	ec49 8b10 	vmov	d0, r8, r9
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	6022      	str	r2, [r4, #0]
 800dd34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd38:	4628      	mov	r0, r5
 800dd3a:	f7ff fecf 	bl	800dadc <__cvt>
 800dd3e:	9b06      	ldr	r3, [sp, #24]
 800dd40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd42:	2b47      	cmp	r3, #71	; 0x47
 800dd44:	4680      	mov	r8, r0
 800dd46:	d108      	bne.n	800dd5a <_printf_float+0x13e>
 800dd48:	1cc8      	adds	r0, r1, #3
 800dd4a:	db02      	blt.n	800dd52 <_printf_float+0x136>
 800dd4c:	6863      	ldr	r3, [r4, #4]
 800dd4e:	4299      	cmp	r1, r3
 800dd50:	dd41      	ble.n	800ddd6 <_printf_float+0x1ba>
 800dd52:	f1ab 0302 	sub.w	r3, fp, #2
 800dd56:	fa5f fb83 	uxtb.w	fp, r3
 800dd5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd5e:	d820      	bhi.n	800dda2 <_printf_float+0x186>
 800dd60:	3901      	subs	r1, #1
 800dd62:	465a      	mov	r2, fp
 800dd64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd68:	9109      	str	r1, [sp, #36]	; 0x24
 800dd6a:	f7ff ff19 	bl	800dba0 <__exponent>
 800dd6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd70:	1813      	adds	r3, r2, r0
 800dd72:	2a01      	cmp	r2, #1
 800dd74:	4681      	mov	r9, r0
 800dd76:	6123      	str	r3, [r4, #16]
 800dd78:	dc02      	bgt.n	800dd80 <_printf_float+0x164>
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	07d2      	lsls	r2, r2, #31
 800dd7e:	d501      	bpl.n	800dd84 <_printf_float+0x168>
 800dd80:	3301      	adds	r3, #1
 800dd82:	6123      	str	r3, [r4, #16]
 800dd84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d09c      	beq.n	800dcc6 <_printf_float+0xaa>
 800dd8c:	232d      	movs	r3, #45	; 0x2d
 800dd8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd92:	e798      	b.n	800dcc6 <_printf_float+0xaa>
 800dd94:	9a06      	ldr	r2, [sp, #24]
 800dd96:	2a47      	cmp	r2, #71	; 0x47
 800dd98:	d1be      	bne.n	800dd18 <_printf_float+0xfc>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1bc      	bne.n	800dd18 <_printf_float+0xfc>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e7b9      	b.n	800dd16 <_printf_float+0xfa>
 800dda2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dda6:	d118      	bne.n	800ddda <_printf_float+0x1be>
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	6863      	ldr	r3, [r4, #4]
 800ddac:	dd0b      	ble.n	800ddc6 <_printf_float+0x1aa>
 800ddae:	6121      	str	r1, [r4, #16]
 800ddb0:	b913      	cbnz	r3, 800ddb8 <_printf_float+0x19c>
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	07d0      	lsls	r0, r2, #31
 800ddb6:	d502      	bpl.n	800ddbe <_printf_float+0x1a2>
 800ddb8:	3301      	adds	r3, #1
 800ddba:	440b      	add	r3, r1
 800ddbc:	6123      	str	r3, [r4, #16]
 800ddbe:	65a1      	str	r1, [r4, #88]	; 0x58
 800ddc0:	f04f 0900 	mov.w	r9, #0
 800ddc4:	e7de      	b.n	800dd84 <_printf_float+0x168>
 800ddc6:	b913      	cbnz	r3, 800ddce <_printf_float+0x1b2>
 800ddc8:	6822      	ldr	r2, [r4, #0]
 800ddca:	07d2      	lsls	r2, r2, #31
 800ddcc:	d501      	bpl.n	800ddd2 <_printf_float+0x1b6>
 800ddce:	3302      	adds	r3, #2
 800ddd0:	e7f4      	b.n	800ddbc <_printf_float+0x1a0>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e7f2      	b.n	800ddbc <_printf_float+0x1a0>
 800ddd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ddda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dddc:	4299      	cmp	r1, r3
 800ddde:	db05      	blt.n	800ddec <_printf_float+0x1d0>
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	6121      	str	r1, [r4, #16]
 800dde4:	07d8      	lsls	r0, r3, #31
 800dde6:	d5ea      	bpl.n	800ddbe <_printf_float+0x1a2>
 800dde8:	1c4b      	adds	r3, r1, #1
 800ddea:	e7e7      	b.n	800ddbc <_printf_float+0x1a0>
 800ddec:	2900      	cmp	r1, #0
 800ddee:	bfd4      	ite	le
 800ddf0:	f1c1 0202 	rsble	r2, r1, #2
 800ddf4:	2201      	movgt	r2, #1
 800ddf6:	4413      	add	r3, r2
 800ddf8:	e7e0      	b.n	800ddbc <_printf_float+0x1a0>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	055a      	lsls	r2, r3, #21
 800ddfe:	d407      	bmi.n	800de10 <_printf_float+0x1f4>
 800de00:	6923      	ldr	r3, [r4, #16]
 800de02:	4642      	mov	r2, r8
 800de04:	4631      	mov	r1, r6
 800de06:	4628      	mov	r0, r5
 800de08:	47b8      	blx	r7
 800de0a:	3001      	adds	r0, #1
 800de0c:	d12c      	bne.n	800de68 <_printf_float+0x24c>
 800de0e:	e764      	b.n	800dcda <_printf_float+0xbe>
 800de10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de14:	f240 80e0 	bls.w	800dfd8 <_printf_float+0x3bc>
 800de18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de1c:	2200      	movs	r2, #0
 800de1e:	2300      	movs	r3, #0
 800de20:	f7f2 fe72 	bl	8000b08 <__aeabi_dcmpeq>
 800de24:	2800      	cmp	r0, #0
 800de26:	d034      	beq.n	800de92 <_printf_float+0x276>
 800de28:	4a37      	ldr	r2, [pc, #220]	; (800df08 <_printf_float+0x2ec>)
 800de2a:	2301      	movs	r3, #1
 800de2c:	4631      	mov	r1, r6
 800de2e:	4628      	mov	r0, r5
 800de30:	47b8      	blx	r7
 800de32:	3001      	adds	r0, #1
 800de34:	f43f af51 	beq.w	800dcda <_printf_float+0xbe>
 800de38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de3c:	429a      	cmp	r2, r3
 800de3e:	db02      	blt.n	800de46 <_printf_float+0x22a>
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	07d8      	lsls	r0, r3, #31
 800de44:	d510      	bpl.n	800de68 <_printf_float+0x24c>
 800de46:	ee18 3a10 	vmov	r3, s16
 800de4a:	4652      	mov	r2, sl
 800de4c:	4631      	mov	r1, r6
 800de4e:	4628      	mov	r0, r5
 800de50:	47b8      	blx	r7
 800de52:	3001      	adds	r0, #1
 800de54:	f43f af41 	beq.w	800dcda <_printf_float+0xbe>
 800de58:	f04f 0800 	mov.w	r8, #0
 800de5c:	f104 091a 	add.w	r9, r4, #26
 800de60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de62:	3b01      	subs	r3, #1
 800de64:	4543      	cmp	r3, r8
 800de66:	dc09      	bgt.n	800de7c <_printf_float+0x260>
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	079b      	lsls	r3, r3, #30
 800de6c:	f100 8107 	bmi.w	800e07e <_printf_float+0x462>
 800de70:	68e0      	ldr	r0, [r4, #12]
 800de72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de74:	4298      	cmp	r0, r3
 800de76:	bfb8      	it	lt
 800de78:	4618      	movlt	r0, r3
 800de7a:	e730      	b.n	800dcde <_printf_float+0xc2>
 800de7c:	2301      	movs	r3, #1
 800de7e:	464a      	mov	r2, r9
 800de80:	4631      	mov	r1, r6
 800de82:	4628      	mov	r0, r5
 800de84:	47b8      	blx	r7
 800de86:	3001      	adds	r0, #1
 800de88:	f43f af27 	beq.w	800dcda <_printf_float+0xbe>
 800de8c:	f108 0801 	add.w	r8, r8, #1
 800de90:	e7e6      	b.n	800de60 <_printf_float+0x244>
 800de92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de94:	2b00      	cmp	r3, #0
 800de96:	dc39      	bgt.n	800df0c <_printf_float+0x2f0>
 800de98:	4a1b      	ldr	r2, [pc, #108]	; (800df08 <_printf_float+0x2ec>)
 800de9a:	2301      	movs	r3, #1
 800de9c:	4631      	mov	r1, r6
 800de9e:	4628      	mov	r0, r5
 800dea0:	47b8      	blx	r7
 800dea2:	3001      	adds	r0, #1
 800dea4:	f43f af19 	beq.w	800dcda <_printf_float+0xbe>
 800dea8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800deac:	4313      	orrs	r3, r2
 800deae:	d102      	bne.n	800deb6 <_printf_float+0x29a>
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	07d9      	lsls	r1, r3, #31
 800deb4:	d5d8      	bpl.n	800de68 <_printf_float+0x24c>
 800deb6:	ee18 3a10 	vmov	r3, s16
 800deba:	4652      	mov	r2, sl
 800debc:	4631      	mov	r1, r6
 800debe:	4628      	mov	r0, r5
 800dec0:	47b8      	blx	r7
 800dec2:	3001      	adds	r0, #1
 800dec4:	f43f af09 	beq.w	800dcda <_printf_float+0xbe>
 800dec8:	f04f 0900 	mov.w	r9, #0
 800decc:	f104 0a1a 	add.w	sl, r4, #26
 800ded0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded2:	425b      	negs	r3, r3
 800ded4:	454b      	cmp	r3, r9
 800ded6:	dc01      	bgt.n	800dedc <_printf_float+0x2c0>
 800ded8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deda:	e792      	b.n	800de02 <_printf_float+0x1e6>
 800dedc:	2301      	movs	r3, #1
 800dede:	4652      	mov	r2, sl
 800dee0:	4631      	mov	r1, r6
 800dee2:	4628      	mov	r0, r5
 800dee4:	47b8      	blx	r7
 800dee6:	3001      	adds	r0, #1
 800dee8:	f43f aef7 	beq.w	800dcda <_printf_float+0xbe>
 800deec:	f109 0901 	add.w	r9, r9, #1
 800def0:	e7ee      	b.n	800ded0 <_printf_float+0x2b4>
 800def2:	bf00      	nop
 800def4:	7fefffff 	.word	0x7fefffff
 800def8:	08011f34 	.word	0x08011f34
 800defc:	08011f38 	.word	0x08011f38
 800df00:	08011f3c 	.word	0x08011f3c
 800df04:	08011f40 	.word	0x08011f40
 800df08:	08011f44 	.word	0x08011f44
 800df0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df10:	429a      	cmp	r2, r3
 800df12:	bfa8      	it	ge
 800df14:	461a      	movge	r2, r3
 800df16:	2a00      	cmp	r2, #0
 800df18:	4691      	mov	r9, r2
 800df1a:	dc37      	bgt.n	800df8c <_printf_float+0x370>
 800df1c:	f04f 0b00 	mov.w	fp, #0
 800df20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df24:	f104 021a 	add.w	r2, r4, #26
 800df28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df2a:	9305      	str	r3, [sp, #20]
 800df2c:	eba3 0309 	sub.w	r3, r3, r9
 800df30:	455b      	cmp	r3, fp
 800df32:	dc33      	bgt.n	800df9c <_printf_float+0x380>
 800df34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df38:	429a      	cmp	r2, r3
 800df3a:	db3b      	blt.n	800dfb4 <_printf_float+0x398>
 800df3c:	6823      	ldr	r3, [r4, #0]
 800df3e:	07da      	lsls	r2, r3, #31
 800df40:	d438      	bmi.n	800dfb4 <_printf_float+0x398>
 800df42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800df46:	eba2 0903 	sub.w	r9, r2, r3
 800df4a:	9b05      	ldr	r3, [sp, #20]
 800df4c:	1ad2      	subs	r2, r2, r3
 800df4e:	4591      	cmp	r9, r2
 800df50:	bfa8      	it	ge
 800df52:	4691      	movge	r9, r2
 800df54:	f1b9 0f00 	cmp.w	r9, #0
 800df58:	dc35      	bgt.n	800dfc6 <_printf_float+0x3aa>
 800df5a:	f04f 0800 	mov.w	r8, #0
 800df5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df62:	f104 0a1a 	add.w	sl, r4, #26
 800df66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	eba3 0309 	sub.w	r3, r3, r9
 800df70:	4543      	cmp	r3, r8
 800df72:	f77f af79 	ble.w	800de68 <_printf_float+0x24c>
 800df76:	2301      	movs	r3, #1
 800df78:	4652      	mov	r2, sl
 800df7a:	4631      	mov	r1, r6
 800df7c:	4628      	mov	r0, r5
 800df7e:	47b8      	blx	r7
 800df80:	3001      	adds	r0, #1
 800df82:	f43f aeaa 	beq.w	800dcda <_printf_float+0xbe>
 800df86:	f108 0801 	add.w	r8, r8, #1
 800df8a:	e7ec      	b.n	800df66 <_printf_float+0x34a>
 800df8c:	4613      	mov	r3, r2
 800df8e:	4631      	mov	r1, r6
 800df90:	4642      	mov	r2, r8
 800df92:	4628      	mov	r0, r5
 800df94:	47b8      	blx	r7
 800df96:	3001      	adds	r0, #1
 800df98:	d1c0      	bne.n	800df1c <_printf_float+0x300>
 800df9a:	e69e      	b.n	800dcda <_printf_float+0xbe>
 800df9c:	2301      	movs	r3, #1
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	9205      	str	r2, [sp, #20]
 800dfa4:	47b8      	blx	r7
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	f43f ae97 	beq.w	800dcda <_printf_float+0xbe>
 800dfac:	9a05      	ldr	r2, [sp, #20]
 800dfae:	f10b 0b01 	add.w	fp, fp, #1
 800dfb2:	e7b9      	b.n	800df28 <_printf_float+0x30c>
 800dfb4:	ee18 3a10 	vmov	r3, s16
 800dfb8:	4652      	mov	r2, sl
 800dfba:	4631      	mov	r1, r6
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	47b8      	blx	r7
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	d1be      	bne.n	800df42 <_printf_float+0x326>
 800dfc4:	e689      	b.n	800dcda <_printf_float+0xbe>
 800dfc6:	9a05      	ldr	r2, [sp, #20]
 800dfc8:	464b      	mov	r3, r9
 800dfca:	4442      	add	r2, r8
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4628      	mov	r0, r5
 800dfd0:	47b8      	blx	r7
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	d1c1      	bne.n	800df5a <_printf_float+0x33e>
 800dfd6:	e680      	b.n	800dcda <_printf_float+0xbe>
 800dfd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfda:	2a01      	cmp	r2, #1
 800dfdc:	dc01      	bgt.n	800dfe2 <_printf_float+0x3c6>
 800dfde:	07db      	lsls	r3, r3, #31
 800dfe0:	d53a      	bpl.n	800e058 <_printf_float+0x43c>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4642      	mov	r2, r8
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4628      	mov	r0, r5
 800dfea:	47b8      	blx	r7
 800dfec:	3001      	adds	r0, #1
 800dfee:	f43f ae74 	beq.w	800dcda <_printf_float+0xbe>
 800dff2:	ee18 3a10 	vmov	r3, s16
 800dff6:	4652      	mov	r2, sl
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f ae6b 	beq.w	800dcda <_printf_float+0xbe>
 800e004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e008:	2200      	movs	r2, #0
 800e00a:	2300      	movs	r3, #0
 800e00c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e010:	f7f2 fd7a 	bl	8000b08 <__aeabi_dcmpeq>
 800e014:	b9d8      	cbnz	r0, 800e04e <_printf_float+0x432>
 800e016:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e01a:	f108 0201 	add.w	r2, r8, #1
 800e01e:	4631      	mov	r1, r6
 800e020:	4628      	mov	r0, r5
 800e022:	47b8      	blx	r7
 800e024:	3001      	adds	r0, #1
 800e026:	d10e      	bne.n	800e046 <_printf_float+0x42a>
 800e028:	e657      	b.n	800dcda <_printf_float+0xbe>
 800e02a:	2301      	movs	r3, #1
 800e02c:	4652      	mov	r2, sl
 800e02e:	4631      	mov	r1, r6
 800e030:	4628      	mov	r0, r5
 800e032:	47b8      	blx	r7
 800e034:	3001      	adds	r0, #1
 800e036:	f43f ae50 	beq.w	800dcda <_printf_float+0xbe>
 800e03a:	f108 0801 	add.w	r8, r8, #1
 800e03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e040:	3b01      	subs	r3, #1
 800e042:	4543      	cmp	r3, r8
 800e044:	dcf1      	bgt.n	800e02a <_printf_float+0x40e>
 800e046:	464b      	mov	r3, r9
 800e048:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e04c:	e6da      	b.n	800de04 <_printf_float+0x1e8>
 800e04e:	f04f 0800 	mov.w	r8, #0
 800e052:	f104 0a1a 	add.w	sl, r4, #26
 800e056:	e7f2      	b.n	800e03e <_printf_float+0x422>
 800e058:	2301      	movs	r3, #1
 800e05a:	4642      	mov	r2, r8
 800e05c:	e7df      	b.n	800e01e <_printf_float+0x402>
 800e05e:	2301      	movs	r3, #1
 800e060:	464a      	mov	r2, r9
 800e062:	4631      	mov	r1, r6
 800e064:	4628      	mov	r0, r5
 800e066:	47b8      	blx	r7
 800e068:	3001      	adds	r0, #1
 800e06a:	f43f ae36 	beq.w	800dcda <_printf_float+0xbe>
 800e06e:	f108 0801 	add.w	r8, r8, #1
 800e072:	68e3      	ldr	r3, [r4, #12]
 800e074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e076:	1a5b      	subs	r3, r3, r1
 800e078:	4543      	cmp	r3, r8
 800e07a:	dcf0      	bgt.n	800e05e <_printf_float+0x442>
 800e07c:	e6f8      	b.n	800de70 <_printf_float+0x254>
 800e07e:	f04f 0800 	mov.w	r8, #0
 800e082:	f104 0919 	add.w	r9, r4, #25
 800e086:	e7f4      	b.n	800e072 <_printf_float+0x456>

0800e088 <_printf_common>:
 800e088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e08c:	4616      	mov	r6, r2
 800e08e:	4699      	mov	r9, r3
 800e090:	688a      	ldr	r2, [r1, #8]
 800e092:	690b      	ldr	r3, [r1, #16]
 800e094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e098:	4293      	cmp	r3, r2
 800e09a:	bfb8      	it	lt
 800e09c:	4613      	movlt	r3, r2
 800e09e:	6033      	str	r3, [r6, #0]
 800e0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0a4:	4607      	mov	r7, r0
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	b10a      	cbz	r2, 800e0ae <_printf_common+0x26>
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	6033      	str	r3, [r6, #0]
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	0699      	lsls	r1, r3, #26
 800e0b2:	bf42      	ittt	mi
 800e0b4:	6833      	ldrmi	r3, [r6, #0]
 800e0b6:	3302      	addmi	r3, #2
 800e0b8:	6033      	strmi	r3, [r6, #0]
 800e0ba:	6825      	ldr	r5, [r4, #0]
 800e0bc:	f015 0506 	ands.w	r5, r5, #6
 800e0c0:	d106      	bne.n	800e0d0 <_printf_common+0x48>
 800e0c2:	f104 0a19 	add.w	sl, r4, #25
 800e0c6:	68e3      	ldr	r3, [r4, #12]
 800e0c8:	6832      	ldr	r2, [r6, #0]
 800e0ca:	1a9b      	subs	r3, r3, r2
 800e0cc:	42ab      	cmp	r3, r5
 800e0ce:	dc26      	bgt.n	800e11e <_printf_common+0x96>
 800e0d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e0d4:	1e13      	subs	r3, r2, #0
 800e0d6:	6822      	ldr	r2, [r4, #0]
 800e0d8:	bf18      	it	ne
 800e0da:	2301      	movne	r3, #1
 800e0dc:	0692      	lsls	r2, r2, #26
 800e0de:	d42b      	bmi.n	800e138 <_printf_common+0xb0>
 800e0e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0e4:	4649      	mov	r1, r9
 800e0e6:	4638      	mov	r0, r7
 800e0e8:	47c0      	blx	r8
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	d01e      	beq.n	800e12c <_printf_common+0xa4>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	6922      	ldr	r2, [r4, #16]
 800e0f2:	f003 0306 	and.w	r3, r3, #6
 800e0f6:	2b04      	cmp	r3, #4
 800e0f8:	bf02      	ittt	eq
 800e0fa:	68e5      	ldreq	r5, [r4, #12]
 800e0fc:	6833      	ldreq	r3, [r6, #0]
 800e0fe:	1aed      	subeq	r5, r5, r3
 800e100:	68a3      	ldr	r3, [r4, #8]
 800e102:	bf0c      	ite	eq
 800e104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e108:	2500      	movne	r5, #0
 800e10a:	4293      	cmp	r3, r2
 800e10c:	bfc4      	itt	gt
 800e10e:	1a9b      	subgt	r3, r3, r2
 800e110:	18ed      	addgt	r5, r5, r3
 800e112:	2600      	movs	r6, #0
 800e114:	341a      	adds	r4, #26
 800e116:	42b5      	cmp	r5, r6
 800e118:	d11a      	bne.n	800e150 <_printf_common+0xc8>
 800e11a:	2000      	movs	r0, #0
 800e11c:	e008      	b.n	800e130 <_printf_common+0xa8>
 800e11e:	2301      	movs	r3, #1
 800e120:	4652      	mov	r2, sl
 800e122:	4649      	mov	r1, r9
 800e124:	4638      	mov	r0, r7
 800e126:	47c0      	blx	r8
 800e128:	3001      	adds	r0, #1
 800e12a:	d103      	bne.n	800e134 <_printf_common+0xac>
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e134:	3501      	adds	r5, #1
 800e136:	e7c6      	b.n	800e0c6 <_printf_common+0x3e>
 800e138:	18e1      	adds	r1, r4, r3
 800e13a:	1c5a      	adds	r2, r3, #1
 800e13c:	2030      	movs	r0, #48	; 0x30
 800e13e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e142:	4422      	add	r2, r4
 800e144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e14c:	3302      	adds	r3, #2
 800e14e:	e7c7      	b.n	800e0e0 <_printf_common+0x58>
 800e150:	2301      	movs	r3, #1
 800e152:	4622      	mov	r2, r4
 800e154:	4649      	mov	r1, r9
 800e156:	4638      	mov	r0, r7
 800e158:	47c0      	blx	r8
 800e15a:	3001      	adds	r0, #1
 800e15c:	d0e6      	beq.n	800e12c <_printf_common+0xa4>
 800e15e:	3601      	adds	r6, #1
 800e160:	e7d9      	b.n	800e116 <_printf_common+0x8e>
	...

0800e164 <_printf_i>:
 800e164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	7e0f      	ldrb	r7, [r1, #24]
 800e16a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e16c:	2f78      	cmp	r7, #120	; 0x78
 800e16e:	4691      	mov	r9, r2
 800e170:	4680      	mov	r8, r0
 800e172:	460c      	mov	r4, r1
 800e174:	469a      	mov	sl, r3
 800e176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e17a:	d807      	bhi.n	800e18c <_printf_i+0x28>
 800e17c:	2f62      	cmp	r7, #98	; 0x62
 800e17e:	d80a      	bhi.n	800e196 <_printf_i+0x32>
 800e180:	2f00      	cmp	r7, #0
 800e182:	f000 80d4 	beq.w	800e32e <_printf_i+0x1ca>
 800e186:	2f58      	cmp	r7, #88	; 0x58
 800e188:	f000 80c0 	beq.w	800e30c <_printf_i+0x1a8>
 800e18c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e194:	e03a      	b.n	800e20c <_printf_i+0xa8>
 800e196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e19a:	2b15      	cmp	r3, #21
 800e19c:	d8f6      	bhi.n	800e18c <_printf_i+0x28>
 800e19e:	a101      	add	r1, pc, #4	; (adr r1, 800e1a4 <_printf_i+0x40>)
 800e1a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1a4:	0800e1fd 	.word	0x0800e1fd
 800e1a8:	0800e211 	.word	0x0800e211
 800e1ac:	0800e18d 	.word	0x0800e18d
 800e1b0:	0800e18d 	.word	0x0800e18d
 800e1b4:	0800e18d 	.word	0x0800e18d
 800e1b8:	0800e18d 	.word	0x0800e18d
 800e1bc:	0800e211 	.word	0x0800e211
 800e1c0:	0800e18d 	.word	0x0800e18d
 800e1c4:	0800e18d 	.word	0x0800e18d
 800e1c8:	0800e18d 	.word	0x0800e18d
 800e1cc:	0800e18d 	.word	0x0800e18d
 800e1d0:	0800e315 	.word	0x0800e315
 800e1d4:	0800e23d 	.word	0x0800e23d
 800e1d8:	0800e2cf 	.word	0x0800e2cf
 800e1dc:	0800e18d 	.word	0x0800e18d
 800e1e0:	0800e18d 	.word	0x0800e18d
 800e1e4:	0800e337 	.word	0x0800e337
 800e1e8:	0800e18d 	.word	0x0800e18d
 800e1ec:	0800e23d 	.word	0x0800e23d
 800e1f0:	0800e18d 	.word	0x0800e18d
 800e1f4:	0800e18d 	.word	0x0800e18d
 800e1f8:	0800e2d7 	.word	0x0800e2d7
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	602a      	str	r2, [r5, #0]
 800e204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e20c:	2301      	movs	r3, #1
 800e20e:	e09f      	b.n	800e350 <_printf_i+0x1ec>
 800e210:	6820      	ldr	r0, [r4, #0]
 800e212:	682b      	ldr	r3, [r5, #0]
 800e214:	0607      	lsls	r7, r0, #24
 800e216:	f103 0104 	add.w	r1, r3, #4
 800e21a:	6029      	str	r1, [r5, #0]
 800e21c:	d501      	bpl.n	800e222 <_printf_i+0xbe>
 800e21e:	681e      	ldr	r6, [r3, #0]
 800e220:	e003      	b.n	800e22a <_printf_i+0xc6>
 800e222:	0646      	lsls	r6, r0, #25
 800e224:	d5fb      	bpl.n	800e21e <_printf_i+0xba>
 800e226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e22a:	2e00      	cmp	r6, #0
 800e22c:	da03      	bge.n	800e236 <_printf_i+0xd2>
 800e22e:	232d      	movs	r3, #45	; 0x2d
 800e230:	4276      	negs	r6, r6
 800e232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e236:	485a      	ldr	r0, [pc, #360]	; (800e3a0 <_printf_i+0x23c>)
 800e238:	230a      	movs	r3, #10
 800e23a:	e012      	b.n	800e262 <_printf_i+0xfe>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	6820      	ldr	r0, [r4, #0]
 800e240:	1d19      	adds	r1, r3, #4
 800e242:	6029      	str	r1, [r5, #0]
 800e244:	0605      	lsls	r5, r0, #24
 800e246:	d501      	bpl.n	800e24c <_printf_i+0xe8>
 800e248:	681e      	ldr	r6, [r3, #0]
 800e24a:	e002      	b.n	800e252 <_printf_i+0xee>
 800e24c:	0641      	lsls	r1, r0, #25
 800e24e:	d5fb      	bpl.n	800e248 <_printf_i+0xe4>
 800e250:	881e      	ldrh	r6, [r3, #0]
 800e252:	4853      	ldr	r0, [pc, #332]	; (800e3a0 <_printf_i+0x23c>)
 800e254:	2f6f      	cmp	r7, #111	; 0x6f
 800e256:	bf0c      	ite	eq
 800e258:	2308      	moveq	r3, #8
 800e25a:	230a      	movne	r3, #10
 800e25c:	2100      	movs	r1, #0
 800e25e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e262:	6865      	ldr	r5, [r4, #4]
 800e264:	60a5      	str	r5, [r4, #8]
 800e266:	2d00      	cmp	r5, #0
 800e268:	bfa2      	ittt	ge
 800e26a:	6821      	ldrge	r1, [r4, #0]
 800e26c:	f021 0104 	bicge.w	r1, r1, #4
 800e270:	6021      	strge	r1, [r4, #0]
 800e272:	b90e      	cbnz	r6, 800e278 <_printf_i+0x114>
 800e274:	2d00      	cmp	r5, #0
 800e276:	d04b      	beq.n	800e310 <_printf_i+0x1ac>
 800e278:	4615      	mov	r5, r2
 800e27a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e27e:	fb03 6711 	mls	r7, r3, r1, r6
 800e282:	5dc7      	ldrb	r7, [r0, r7]
 800e284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e288:	4637      	mov	r7, r6
 800e28a:	42bb      	cmp	r3, r7
 800e28c:	460e      	mov	r6, r1
 800e28e:	d9f4      	bls.n	800e27a <_printf_i+0x116>
 800e290:	2b08      	cmp	r3, #8
 800e292:	d10b      	bne.n	800e2ac <_printf_i+0x148>
 800e294:	6823      	ldr	r3, [r4, #0]
 800e296:	07de      	lsls	r6, r3, #31
 800e298:	d508      	bpl.n	800e2ac <_printf_i+0x148>
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	6861      	ldr	r1, [r4, #4]
 800e29e:	4299      	cmp	r1, r3
 800e2a0:	bfde      	ittt	le
 800e2a2:	2330      	movle	r3, #48	; 0x30
 800e2a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2ac:	1b52      	subs	r2, r2, r5
 800e2ae:	6122      	str	r2, [r4, #16]
 800e2b0:	f8cd a000 	str.w	sl, [sp]
 800e2b4:	464b      	mov	r3, r9
 800e2b6:	aa03      	add	r2, sp, #12
 800e2b8:	4621      	mov	r1, r4
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	f7ff fee4 	bl	800e088 <_printf_common>
 800e2c0:	3001      	adds	r0, #1
 800e2c2:	d14a      	bne.n	800e35a <_printf_i+0x1f6>
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	b004      	add	sp, #16
 800e2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	f043 0320 	orr.w	r3, r3, #32
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	4833      	ldr	r0, [pc, #204]	; (800e3a4 <_printf_i+0x240>)
 800e2d8:	2778      	movs	r7, #120	; 0x78
 800e2da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e2de:	6823      	ldr	r3, [r4, #0]
 800e2e0:	6829      	ldr	r1, [r5, #0]
 800e2e2:	061f      	lsls	r7, r3, #24
 800e2e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e2e8:	d402      	bmi.n	800e2f0 <_printf_i+0x18c>
 800e2ea:	065f      	lsls	r7, r3, #25
 800e2ec:	bf48      	it	mi
 800e2ee:	b2b6      	uxthmi	r6, r6
 800e2f0:	07df      	lsls	r7, r3, #31
 800e2f2:	bf48      	it	mi
 800e2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800e2f8:	6029      	str	r1, [r5, #0]
 800e2fa:	bf48      	it	mi
 800e2fc:	6023      	strmi	r3, [r4, #0]
 800e2fe:	b91e      	cbnz	r6, 800e308 <_printf_i+0x1a4>
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	f023 0320 	bic.w	r3, r3, #32
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	2310      	movs	r3, #16
 800e30a:	e7a7      	b.n	800e25c <_printf_i+0xf8>
 800e30c:	4824      	ldr	r0, [pc, #144]	; (800e3a0 <_printf_i+0x23c>)
 800e30e:	e7e4      	b.n	800e2da <_printf_i+0x176>
 800e310:	4615      	mov	r5, r2
 800e312:	e7bd      	b.n	800e290 <_printf_i+0x12c>
 800e314:	682b      	ldr	r3, [r5, #0]
 800e316:	6826      	ldr	r6, [r4, #0]
 800e318:	6961      	ldr	r1, [r4, #20]
 800e31a:	1d18      	adds	r0, r3, #4
 800e31c:	6028      	str	r0, [r5, #0]
 800e31e:	0635      	lsls	r5, r6, #24
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	d501      	bpl.n	800e328 <_printf_i+0x1c4>
 800e324:	6019      	str	r1, [r3, #0]
 800e326:	e002      	b.n	800e32e <_printf_i+0x1ca>
 800e328:	0670      	lsls	r0, r6, #25
 800e32a:	d5fb      	bpl.n	800e324 <_printf_i+0x1c0>
 800e32c:	8019      	strh	r1, [r3, #0]
 800e32e:	2300      	movs	r3, #0
 800e330:	6123      	str	r3, [r4, #16]
 800e332:	4615      	mov	r5, r2
 800e334:	e7bc      	b.n	800e2b0 <_printf_i+0x14c>
 800e336:	682b      	ldr	r3, [r5, #0]
 800e338:	1d1a      	adds	r2, r3, #4
 800e33a:	602a      	str	r2, [r5, #0]
 800e33c:	681d      	ldr	r5, [r3, #0]
 800e33e:	6862      	ldr	r2, [r4, #4]
 800e340:	2100      	movs	r1, #0
 800e342:	4628      	mov	r0, r5
 800e344:	f7f1 ff64 	bl	8000210 <memchr>
 800e348:	b108      	cbz	r0, 800e34e <_printf_i+0x1ea>
 800e34a:	1b40      	subs	r0, r0, r5
 800e34c:	6060      	str	r0, [r4, #4]
 800e34e:	6863      	ldr	r3, [r4, #4]
 800e350:	6123      	str	r3, [r4, #16]
 800e352:	2300      	movs	r3, #0
 800e354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e358:	e7aa      	b.n	800e2b0 <_printf_i+0x14c>
 800e35a:	6923      	ldr	r3, [r4, #16]
 800e35c:	462a      	mov	r2, r5
 800e35e:	4649      	mov	r1, r9
 800e360:	4640      	mov	r0, r8
 800e362:	47d0      	blx	sl
 800e364:	3001      	adds	r0, #1
 800e366:	d0ad      	beq.n	800e2c4 <_printf_i+0x160>
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	079b      	lsls	r3, r3, #30
 800e36c:	d413      	bmi.n	800e396 <_printf_i+0x232>
 800e36e:	68e0      	ldr	r0, [r4, #12]
 800e370:	9b03      	ldr	r3, [sp, #12]
 800e372:	4298      	cmp	r0, r3
 800e374:	bfb8      	it	lt
 800e376:	4618      	movlt	r0, r3
 800e378:	e7a6      	b.n	800e2c8 <_printf_i+0x164>
 800e37a:	2301      	movs	r3, #1
 800e37c:	4632      	mov	r2, r6
 800e37e:	4649      	mov	r1, r9
 800e380:	4640      	mov	r0, r8
 800e382:	47d0      	blx	sl
 800e384:	3001      	adds	r0, #1
 800e386:	d09d      	beq.n	800e2c4 <_printf_i+0x160>
 800e388:	3501      	adds	r5, #1
 800e38a:	68e3      	ldr	r3, [r4, #12]
 800e38c:	9903      	ldr	r1, [sp, #12]
 800e38e:	1a5b      	subs	r3, r3, r1
 800e390:	42ab      	cmp	r3, r5
 800e392:	dcf2      	bgt.n	800e37a <_printf_i+0x216>
 800e394:	e7eb      	b.n	800e36e <_printf_i+0x20a>
 800e396:	2500      	movs	r5, #0
 800e398:	f104 0619 	add.w	r6, r4, #25
 800e39c:	e7f5      	b.n	800e38a <_printf_i+0x226>
 800e39e:	bf00      	nop
 800e3a0:	08011f46 	.word	0x08011f46
 800e3a4:	08011f57 	.word	0x08011f57

0800e3a8 <std>:
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	b510      	push	{r4, lr}
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3b6:	6083      	str	r3, [r0, #8]
 800e3b8:	8181      	strh	r1, [r0, #12]
 800e3ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e3bc:	81c2      	strh	r2, [r0, #14]
 800e3be:	6183      	str	r3, [r0, #24]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	2208      	movs	r2, #8
 800e3c4:	305c      	adds	r0, #92	; 0x5c
 800e3c6:	f000 f948 	bl	800e65a <memset>
 800e3ca:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <std+0x58>)
 800e3cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <std+0x5c>)
 800e3d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	; (800e408 <std+0x60>)
 800e3d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3d6:	4b0d      	ldr	r3, [pc, #52]	; (800e40c <std+0x64>)
 800e3d8:	6323      	str	r3, [r4, #48]	; 0x30
 800e3da:	4b0d      	ldr	r3, [pc, #52]	; (800e410 <std+0x68>)
 800e3dc:	6224      	str	r4, [r4, #32]
 800e3de:	429c      	cmp	r4, r3
 800e3e0:	d006      	beq.n	800e3f0 <std+0x48>
 800e3e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e3e6:	4294      	cmp	r4, r2
 800e3e8:	d002      	beq.n	800e3f0 <std+0x48>
 800e3ea:	33d0      	adds	r3, #208	; 0xd0
 800e3ec:	429c      	cmp	r4, r3
 800e3ee:	d105      	bne.n	800e3fc <std+0x54>
 800e3f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3f8:	f000 ba24 	b.w	800e844 <__retarget_lock_init_recursive>
 800e3fc:	bd10      	pop	{r4, pc}
 800e3fe:	bf00      	nop
 800e400:	0800e5d5 	.word	0x0800e5d5
 800e404:	0800e5f7 	.word	0x0800e5f7
 800e408:	0800e62f 	.word	0x0800e62f
 800e40c:	0800e653 	.word	0x0800e653
 800e410:	2000ecd0 	.word	0x2000ecd0

0800e414 <stdio_exit_handler>:
 800e414:	4a02      	ldr	r2, [pc, #8]	; (800e420 <stdio_exit_handler+0xc>)
 800e416:	4903      	ldr	r1, [pc, #12]	; (800e424 <stdio_exit_handler+0x10>)
 800e418:	4803      	ldr	r0, [pc, #12]	; (800e428 <stdio_exit_handler+0x14>)
 800e41a:	f000 b869 	b.w	800e4f0 <_fwalk_sglue>
 800e41e:	bf00      	nop
 800e420:	2000002c 	.word	0x2000002c
 800e424:	08010211 	.word	0x08010211
 800e428:	20000038 	.word	0x20000038

0800e42c <cleanup_stdio>:
 800e42c:	6841      	ldr	r1, [r0, #4]
 800e42e:	4b0c      	ldr	r3, [pc, #48]	; (800e460 <cleanup_stdio+0x34>)
 800e430:	4299      	cmp	r1, r3
 800e432:	b510      	push	{r4, lr}
 800e434:	4604      	mov	r4, r0
 800e436:	d001      	beq.n	800e43c <cleanup_stdio+0x10>
 800e438:	f001 feea 	bl	8010210 <_fflush_r>
 800e43c:	68a1      	ldr	r1, [r4, #8]
 800e43e:	4b09      	ldr	r3, [pc, #36]	; (800e464 <cleanup_stdio+0x38>)
 800e440:	4299      	cmp	r1, r3
 800e442:	d002      	beq.n	800e44a <cleanup_stdio+0x1e>
 800e444:	4620      	mov	r0, r4
 800e446:	f001 fee3 	bl	8010210 <_fflush_r>
 800e44a:	68e1      	ldr	r1, [r4, #12]
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <cleanup_stdio+0x3c>)
 800e44e:	4299      	cmp	r1, r3
 800e450:	d004      	beq.n	800e45c <cleanup_stdio+0x30>
 800e452:	4620      	mov	r0, r4
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e458:	f001 beda 	b.w	8010210 <_fflush_r>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	bf00      	nop
 800e460:	2000ecd0 	.word	0x2000ecd0
 800e464:	2000ed38 	.word	0x2000ed38
 800e468:	2000eda0 	.word	0x2000eda0

0800e46c <global_stdio_init.part.0>:
 800e46c:	b510      	push	{r4, lr}
 800e46e:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <global_stdio_init.part.0+0x30>)
 800e470:	4c0b      	ldr	r4, [pc, #44]	; (800e4a0 <global_stdio_init.part.0+0x34>)
 800e472:	4a0c      	ldr	r2, [pc, #48]	; (800e4a4 <global_stdio_init.part.0+0x38>)
 800e474:	601a      	str	r2, [r3, #0]
 800e476:	4620      	mov	r0, r4
 800e478:	2200      	movs	r2, #0
 800e47a:	2104      	movs	r1, #4
 800e47c:	f7ff ff94 	bl	800e3a8 <std>
 800e480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e484:	2201      	movs	r2, #1
 800e486:	2109      	movs	r1, #9
 800e488:	f7ff ff8e 	bl	800e3a8 <std>
 800e48c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e490:	2202      	movs	r2, #2
 800e492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e496:	2112      	movs	r1, #18
 800e498:	f7ff bf86 	b.w	800e3a8 <std>
 800e49c:	2000ee08 	.word	0x2000ee08
 800e4a0:	2000ecd0 	.word	0x2000ecd0
 800e4a4:	0800e415 	.word	0x0800e415

0800e4a8 <__sfp_lock_acquire>:
 800e4a8:	4801      	ldr	r0, [pc, #4]	; (800e4b0 <__sfp_lock_acquire+0x8>)
 800e4aa:	f000 b9cc 	b.w	800e846 <__retarget_lock_acquire_recursive>
 800e4ae:	bf00      	nop
 800e4b0:	2000ee11 	.word	0x2000ee11

0800e4b4 <__sfp_lock_release>:
 800e4b4:	4801      	ldr	r0, [pc, #4]	; (800e4bc <__sfp_lock_release+0x8>)
 800e4b6:	f000 b9c7 	b.w	800e848 <__retarget_lock_release_recursive>
 800e4ba:	bf00      	nop
 800e4bc:	2000ee11 	.word	0x2000ee11

0800e4c0 <__sinit>:
 800e4c0:	b510      	push	{r4, lr}
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	f7ff fff0 	bl	800e4a8 <__sfp_lock_acquire>
 800e4c8:	6a23      	ldr	r3, [r4, #32]
 800e4ca:	b11b      	cbz	r3, 800e4d4 <__sinit+0x14>
 800e4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4d0:	f7ff bff0 	b.w	800e4b4 <__sfp_lock_release>
 800e4d4:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <__sinit+0x28>)
 800e4d6:	6223      	str	r3, [r4, #32]
 800e4d8:	4b04      	ldr	r3, [pc, #16]	; (800e4ec <__sinit+0x2c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1f5      	bne.n	800e4cc <__sinit+0xc>
 800e4e0:	f7ff ffc4 	bl	800e46c <global_stdio_init.part.0>
 800e4e4:	e7f2      	b.n	800e4cc <__sinit+0xc>
 800e4e6:	bf00      	nop
 800e4e8:	0800e42d 	.word	0x0800e42d
 800e4ec:	2000ee08 	.word	0x2000ee08

0800e4f0 <_fwalk_sglue>:
 800e4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f4:	4607      	mov	r7, r0
 800e4f6:	4688      	mov	r8, r1
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	2600      	movs	r6, #0
 800e4fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e500:	f1b9 0901 	subs.w	r9, r9, #1
 800e504:	d505      	bpl.n	800e512 <_fwalk_sglue+0x22>
 800e506:	6824      	ldr	r4, [r4, #0]
 800e508:	2c00      	cmp	r4, #0
 800e50a:	d1f7      	bne.n	800e4fc <_fwalk_sglue+0xc>
 800e50c:	4630      	mov	r0, r6
 800e50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e512:	89ab      	ldrh	r3, [r5, #12]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d907      	bls.n	800e528 <_fwalk_sglue+0x38>
 800e518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e51c:	3301      	adds	r3, #1
 800e51e:	d003      	beq.n	800e528 <_fwalk_sglue+0x38>
 800e520:	4629      	mov	r1, r5
 800e522:	4638      	mov	r0, r7
 800e524:	47c0      	blx	r8
 800e526:	4306      	orrs	r6, r0
 800e528:	3568      	adds	r5, #104	; 0x68
 800e52a:	e7e9      	b.n	800e500 <_fwalk_sglue+0x10>

0800e52c <sniprintf>:
 800e52c:	b40c      	push	{r2, r3}
 800e52e:	b530      	push	{r4, r5, lr}
 800e530:	4b17      	ldr	r3, [pc, #92]	; (800e590 <sniprintf+0x64>)
 800e532:	1e0c      	subs	r4, r1, #0
 800e534:	681d      	ldr	r5, [r3, #0]
 800e536:	b09d      	sub	sp, #116	; 0x74
 800e538:	da08      	bge.n	800e54c <sniprintf+0x20>
 800e53a:	238b      	movs	r3, #139	; 0x8b
 800e53c:	602b      	str	r3, [r5, #0]
 800e53e:	f04f 30ff 	mov.w	r0, #4294967295
 800e542:	b01d      	add	sp, #116	; 0x74
 800e544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e548:	b002      	add	sp, #8
 800e54a:	4770      	bx	lr
 800e54c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e550:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e554:	bf14      	ite	ne
 800e556:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e55a:	4623      	moveq	r3, r4
 800e55c:	9304      	str	r3, [sp, #16]
 800e55e:	9307      	str	r3, [sp, #28]
 800e560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e564:	9002      	str	r0, [sp, #8]
 800e566:	9006      	str	r0, [sp, #24]
 800e568:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e56e:	ab21      	add	r3, sp, #132	; 0x84
 800e570:	a902      	add	r1, sp, #8
 800e572:	4628      	mov	r0, r5
 800e574:	9301      	str	r3, [sp, #4]
 800e576:	f001 fcc7 	bl	800ff08 <_svfiprintf_r>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	bfbc      	itt	lt
 800e57e:	238b      	movlt	r3, #139	; 0x8b
 800e580:	602b      	strlt	r3, [r5, #0]
 800e582:	2c00      	cmp	r4, #0
 800e584:	d0dd      	beq.n	800e542 <sniprintf+0x16>
 800e586:	9b02      	ldr	r3, [sp, #8]
 800e588:	2200      	movs	r2, #0
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e7d9      	b.n	800e542 <sniprintf+0x16>
 800e58e:	bf00      	nop
 800e590:	20000084 	.word	0x20000084

0800e594 <siprintf>:
 800e594:	b40e      	push	{r1, r2, r3}
 800e596:	b500      	push	{lr}
 800e598:	b09c      	sub	sp, #112	; 0x70
 800e59a:	ab1d      	add	r3, sp, #116	; 0x74
 800e59c:	9002      	str	r0, [sp, #8]
 800e59e:	9006      	str	r0, [sp, #24]
 800e5a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5a4:	4809      	ldr	r0, [pc, #36]	; (800e5cc <siprintf+0x38>)
 800e5a6:	9107      	str	r1, [sp, #28]
 800e5a8:	9104      	str	r1, [sp, #16]
 800e5aa:	4909      	ldr	r1, [pc, #36]	; (800e5d0 <siprintf+0x3c>)
 800e5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5b0:	9105      	str	r1, [sp, #20]
 800e5b2:	6800      	ldr	r0, [r0, #0]
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	a902      	add	r1, sp, #8
 800e5b8:	f001 fca6 	bl	800ff08 <_svfiprintf_r>
 800e5bc:	9b02      	ldr	r3, [sp, #8]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	701a      	strb	r2, [r3, #0]
 800e5c2:	b01c      	add	sp, #112	; 0x70
 800e5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5c8:	b003      	add	sp, #12
 800e5ca:	4770      	bx	lr
 800e5cc:	20000084 	.word	0x20000084
 800e5d0:	ffff0208 	.word	0xffff0208

0800e5d4 <__sread>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5dc:	f000 f8e4 	bl	800e7a8 <_read_r>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	bfab      	itete	ge
 800e5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e5e8:	181b      	addge	r3, r3, r0
 800e5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5ee:	bfac      	ite	ge
 800e5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5f2:	81a3      	strhlt	r3, [r4, #12]
 800e5f4:	bd10      	pop	{r4, pc}

0800e5f6 <__swrite>:
 800e5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fa:	461f      	mov	r7, r3
 800e5fc:	898b      	ldrh	r3, [r1, #12]
 800e5fe:	05db      	lsls	r3, r3, #23
 800e600:	4605      	mov	r5, r0
 800e602:	460c      	mov	r4, r1
 800e604:	4616      	mov	r6, r2
 800e606:	d505      	bpl.n	800e614 <__swrite+0x1e>
 800e608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e60c:	2302      	movs	r3, #2
 800e60e:	2200      	movs	r2, #0
 800e610:	f000 f8b8 	bl	800e784 <_lseek_r>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e61e:	81a3      	strh	r3, [r4, #12]
 800e620:	4632      	mov	r2, r6
 800e622:	463b      	mov	r3, r7
 800e624:	4628      	mov	r0, r5
 800e626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e62a:	f000 b8cf 	b.w	800e7cc <_write_r>

0800e62e <__sseek>:
 800e62e:	b510      	push	{r4, lr}
 800e630:	460c      	mov	r4, r1
 800e632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e636:	f000 f8a5 	bl	800e784 <_lseek_r>
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	bf15      	itete	ne
 800e640:	6560      	strne	r0, [r4, #84]	; 0x54
 800e642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e64a:	81a3      	strheq	r3, [r4, #12]
 800e64c:	bf18      	it	ne
 800e64e:	81a3      	strhne	r3, [r4, #12]
 800e650:	bd10      	pop	{r4, pc}

0800e652 <__sclose>:
 800e652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e656:	f000 b82f 	b.w	800e6b8 <_close_r>

0800e65a <memset>:
 800e65a:	4402      	add	r2, r0
 800e65c:	4603      	mov	r3, r0
 800e65e:	4293      	cmp	r3, r2
 800e660:	d100      	bne.n	800e664 <memset+0xa>
 800e662:	4770      	bx	lr
 800e664:	f803 1b01 	strb.w	r1, [r3], #1
 800e668:	e7f9      	b.n	800e65e <memset+0x4>

0800e66a <strcat>:
 800e66a:	b510      	push	{r4, lr}
 800e66c:	4602      	mov	r2, r0
 800e66e:	7814      	ldrb	r4, [r2, #0]
 800e670:	4613      	mov	r3, r2
 800e672:	3201      	adds	r2, #1
 800e674:	2c00      	cmp	r4, #0
 800e676:	d1fa      	bne.n	800e66e <strcat+0x4>
 800e678:	3b01      	subs	r3, #1
 800e67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e682:	2a00      	cmp	r2, #0
 800e684:	d1f9      	bne.n	800e67a <strcat+0x10>
 800e686:	bd10      	pop	{r4, pc}

0800e688 <strncpy>:
 800e688:	b510      	push	{r4, lr}
 800e68a:	3901      	subs	r1, #1
 800e68c:	4603      	mov	r3, r0
 800e68e:	b132      	cbz	r2, 800e69e <strncpy+0x16>
 800e690:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e694:	f803 4b01 	strb.w	r4, [r3], #1
 800e698:	3a01      	subs	r2, #1
 800e69a:	2c00      	cmp	r4, #0
 800e69c:	d1f7      	bne.n	800e68e <strncpy+0x6>
 800e69e:	441a      	add	r2, r3
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d100      	bne.n	800e6a8 <strncpy+0x20>
 800e6a6:	bd10      	pop	{r4, pc}
 800e6a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e6ac:	e7f9      	b.n	800e6a2 <strncpy+0x1a>
	...

0800e6b0 <_localeconv_r>:
 800e6b0:	4800      	ldr	r0, [pc, #0]	; (800e6b4 <_localeconv_r+0x4>)
 800e6b2:	4770      	bx	lr
 800e6b4:	20000178 	.word	0x20000178

0800e6b8 <_close_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4d06      	ldr	r5, [pc, #24]	; (800e6d4 <_close_r+0x1c>)
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4604      	mov	r4, r0
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	602b      	str	r3, [r5, #0]
 800e6c4:	f7f4 f877 	bl	80027b6 <_close>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_close_r+0x1a>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_close_r+0x1a>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	2000ee0c 	.word	0x2000ee0c

0800e6d8 <_reclaim_reent>:
 800e6d8:	4b29      	ldr	r3, [pc, #164]	; (800e780 <_reclaim_reent+0xa8>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4283      	cmp	r3, r0
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	d04b      	beq.n	800e77c <_reclaim_reent+0xa4>
 800e6e4:	69c3      	ldr	r3, [r0, #28]
 800e6e6:	b143      	cbz	r3, 800e6fa <_reclaim_reent+0x22>
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d144      	bne.n	800e778 <_reclaim_reent+0xa0>
 800e6ee:	69e3      	ldr	r3, [r4, #28]
 800e6f0:	6819      	ldr	r1, [r3, #0]
 800e6f2:	b111      	cbz	r1, 800e6fa <_reclaim_reent+0x22>
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f000 ff31 	bl	800f55c <_free_r>
 800e6fa:	6961      	ldr	r1, [r4, #20]
 800e6fc:	b111      	cbz	r1, 800e704 <_reclaim_reent+0x2c>
 800e6fe:	4620      	mov	r0, r4
 800e700:	f000 ff2c 	bl	800f55c <_free_r>
 800e704:	69e1      	ldr	r1, [r4, #28]
 800e706:	b111      	cbz	r1, 800e70e <_reclaim_reent+0x36>
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 ff27 	bl	800f55c <_free_r>
 800e70e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e710:	b111      	cbz	r1, 800e718 <_reclaim_reent+0x40>
 800e712:	4620      	mov	r0, r4
 800e714:	f000 ff22 	bl	800f55c <_free_r>
 800e718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e71a:	b111      	cbz	r1, 800e722 <_reclaim_reent+0x4a>
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 ff1d 	bl	800f55c <_free_r>
 800e722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e724:	b111      	cbz	r1, 800e72c <_reclaim_reent+0x54>
 800e726:	4620      	mov	r0, r4
 800e728:	f000 ff18 	bl	800f55c <_free_r>
 800e72c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e72e:	b111      	cbz	r1, 800e736 <_reclaim_reent+0x5e>
 800e730:	4620      	mov	r0, r4
 800e732:	f000 ff13 	bl	800f55c <_free_r>
 800e736:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e738:	b111      	cbz	r1, 800e740 <_reclaim_reent+0x68>
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 ff0e 	bl	800f55c <_free_r>
 800e740:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e742:	b111      	cbz	r1, 800e74a <_reclaim_reent+0x72>
 800e744:	4620      	mov	r0, r4
 800e746:	f000 ff09 	bl	800f55c <_free_r>
 800e74a:	6a23      	ldr	r3, [r4, #32]
 800e74c:	b1b3      	cbz	r3, 800e77c <_reclaim_reent+0xa4>
 800e74e:	4620      	mov	r0, r4
 800e750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e754:	4718      	bx	r3
 800e756:	5949      	ldr	r1, [r1, r5]
 800e758:	b941      	cbnz	r1, 800e76c <_reclaim_reent+0x94>
 800e75a:	3504      	adds	r5, #4
 800e75c:	69e3      	ldr	r3, [r4, #28]
 800e75e:	2d80      	cmp	r5, #128	; 0x80
 800e760:	68d9      	ldr	r1, [r3, #12]
 800e762:	d1f8      	bne.n	800e756 <_reclaim_reent+0x7e>
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fef9 	bl	800f55c <_free_r>
 800e76a:	e7c0      	b.n	800e6ee <_reclaim_reent+0x16>
 800e76c:	680e      	ldr	r6, [r1, #0]
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 fef4 	bl	800f55c <_free_r>
 800e774:	4631      	mov	r1, r6
 800e776:	e7ef      	b.n	800e758 <_reclaim_reent+0x80>
 800e778:	2500      	movs	r5, #0
 800e77a:	e7ef      	b.n	800e75c <_reclaim_reent+0x84>
 800e77c:	bd70      	pop	{r4, r5, r6, pc}
 800e77e:	bf00      	nop
 800e780:	20000084 	.word	0x20000084

0800e784 <_lseek_r>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4d07      	ldr	r5, [pc, #28]	; (800e7a4 <_lseek_r+0x20>)
 800e788:	4604      	mov	r4, r0
 800e78a:	4608      	mov	r0, r1
 800e78c:	4611      	mov	r1, r2
 800e78e:	2200      	movs	r2, #0
 800e790:	602a      	str	r2, [r5, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f7f4 f836 	bl	8002804 <_lseek>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_lseek_r+0x1e>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_lseek_r+0x1e>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	2000ee0c 	.word	0x2000ee0c

0800e7a8 <_read_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d07      	ldr	r5, [pc, #28]	; (800e7c8 <_read_r+0x20>)
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	4608      	mov	r0, r1
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	602a      	str	r2, [r5, #0]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	f7f3 ffc4 	bl	8002744 <_read>
 800e7bc:	1c43      	adds	r3, r0, #1
 800e7be:	d102      	bne.n	800e7c6 <_read_r+0x1e>
 800e7c0:	682b      	ldr	r3, [r5, #0]
 800e7c2:	b103      	cbz	r3, 800e7c6 <_read_r+0x1e>
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	bd38      	pop	{r3, r4, r5, pc}
 800e7c8:	2000ee0c 	.word	0x2000ee0c

0800e7cc <_write_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	; (800e7ec <_write_r+0x20>)
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f7f3 ffcf 	bl	800277e <_write>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_write_r+0x1e>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_write_r+0x1e>
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	2000ee0c 	.word	0x2000ee0c

0800e7f0 <__errno>:
 800e7f0:	4b01      	ldr	r3, [pc, #4]	; (800e7f8 <__errno+0x8>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20000084 	.word	0x20000084

0800e7fc <__libc_init_array>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4d0d      	ldr	r5, [pc, #52]	; (800e834 <__libc_init_array+0x38>)
 800e800:	4c0d      	ldr	r4, [pc, #52]	; (800e838 <__libc_init_array+0x3c>)
 800e802:	1b64      	subs	r4, r4, r5
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	2600      	movs	r6, #0
 800e808:	42a6      	cmp	r6, r4
 800e80a:	d109      	bne.n	800e820 <__libc_init_array+0x24>
 800e80c:	4d0b      	ldr	r5, [pc, #44]	; (800e83c <__libc_init_array+0x40>)
 800e80e:	4c0c      	ldr	r4, [pc, #48]	; (800e840 <__libc_init_array+0x44>)
 800e810:	f003 f9d2 	bl	8011bb8 <_init>
 800e814:	1b64      	subs	r4, r4, r5
 800e816:	10a4      	asrs	r4, r4, #2
 800e818:	2600      	movs	r6, #0
 800e81a:	42a6      	cmp	r6, r4
 800e81c:	d105      	bne.n	800e82a <__libc_init_array+0x2e>
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	f855 3b04 	ldr.w	r3, [r5], #4
 800e824:	4798      	blx	r3
 800e826:	3601      	adds	r6, #1
 800e828:	e7ee      	b.n	800e808 <__libc_init_array+0xc>
 800e82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e82e:	4798      	blx	r3
 800e830:	3601      	adds	r6, #1
 800e832:	e7f2      	b.n	800e81a <__libc_init_array+0x1e>
 800e834:	080122e0 	.word	0x080122e0
 800e838:	080122e0 	.word	0x080122e0
 800e83c:	080122e0 	.word	0x080122e0
 800e840:	080122e4 	.word	0x080122e4

0800e844 <__retarget_lock_init_recursive>:
 800e844:	4770      	bx	lr

0800e846 <__retarget_lock_acquire_recursive>:
 800e846:	4770      	bx	lr

0800e848 <__retarget_lock_release_recursive>:
 800e848:	4770      	bx	lr

0800e84a <memcpy>:
 800e84a:	440a      	add	r2, r1
 800e84c:	4291      	cmp	r1, r2
 800e84e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e852:	d100      	bne.n	800e856 <memcpy+0xc>
 800e854:	4770      	bx	lr
 800e856:	b510      	push	{r4, lr}
 800e858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e860:	4291      	cmp	r1, r2
 800e862:	d1f9      	bne.n	800e858 <memcpy+0xe>
 800e864:	bd10      	pop	{r4, pc}

0800e866 <quorem>:
 800e866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86a:	6903      	ldr	r3, [r0, #16]
 800e86c:	690c      	ldr	r4, [r1, #16]
 800e86e:	42a3      	cmp	r3, r4
 800e870:	4607      	mov	r7, r0
 800e872:	db7e      	blt.n	800e972 <quorem+0x10c>
 800e874:	3c01      	subs	r4, #1
 800e876:	f101 0814 	add.w	r8, r1, #20
 800e87a:	f100 0514 	add.w	r5, r0, #20
 800e87e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e88c:	3301      	adds	r3, #1
 800e88e:	429a      	cmp	r2, r3
 800e890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e898:	fbb2 f6f3 	udiv	r6, r2, r3
 800e89c:	d331      	bcc.n	800e902 <quorem+0x9c>
 800e89e:	f04f 0e00 	mov.w	lr, #0
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	46ac      	mov	ip, r5
 800e8a6:	46f2      	mov	sl, lr
 800e8a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e8ac:	b293      	uxth	r3, r2
 800e8ae:	fb06 e303 	mla	r3, r6, r3, lr
 800e8b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8b6:	0c1a      	lsrs	r2, r3, #16
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	ebaa 0303 	sub.w	r3, sl, r3
 800e8be:	f8dc a000 	ldr.w	sl, [ip]
 800e8c2:	fa13 f38a 	uxtah	r3, r3, sl
 800e8c6:	fb06 220e 	mla	r2, r6, lr, r2
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	9b00      	ldr	r3, [sp, #0]
 800e8ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e8d2:	b292      	uxth	r2, r2
 800e8d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e8d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8e0:	4581      	cmp	r9, r0
 800e8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8e6:	f84c 3b04 	str.w	r3, [ip], #4
 800e8ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8ee:	d2db      	bcs.n	800e8a8 <quorem+0x42>
 800e8f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8f4:	b92b      	cbnz	r3, 800e902 <quorem+0x9c>
 800e8f6:	9b01      	ldr	r3, [sp, #4]
 800e8f8:	3b04      	subs	r3, #4
 800e8fa:	429d      	cmp	r5, r3
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	d32c      	bcc.n	800e95a <quorem+0xf4>
 800e900:	613c      	str	r4, [r7, #16]
 800e902:	4638      	mov	r0, r7
 800e904:	f001 f9a6 	bl	800fc54 <__mcmp>
 800e908:	2800      	cmp	r0, #0
 800e90a:	db22      	blt.n	800e952 <quorem+0xec>
 800e90c:	3601      	adds	r6, #1
 800e90e:	4629      	mov	r1, r5
 800e910:	2000      	movs	r0, #0
 800e912:	f858 2b04 	ldr.w	r2, [r8], #4
 800e916:	f8d1 c000 	ldr.w	ip, [r1]
 800e91a:	b293      	uxth	r3, r2
 800e91c:	1ac3      	subs	r3, r0, r3
 800e91e:	0c12      	lsrs	r2, r2, #16
 800e920:	fa13 f38c 	uxtah	r3, r3, ip
 800e924:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e932:	45c1      	cmp	r9, r8
 800e934:	f841 3b04 	str.w	r3, [r1], #4
 800e938:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e93c:	d2e9      	bcs.n	800e912 <quorem+0xac>
 800e93e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e946:	b922      	cbnz	r2, 800e952 <quorem+0xec>
 800e948:	3b04      	subs	r3, #4
 800e94a:	429d      	cmp	r5, r3
 800e94c:	461a      	mov	r2, r3
 800e94e:	d30a      	bcc.n	800e966 <quorem+0x100>
 800e950:	613c      	str	r4, [r7, #16]
 800e952:	4630      	mov	r0, r6
 800e954:	b003      	add	sp, #12
 800e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95a:	6812      	ldr	r2, [r2, #0]
 800e95c:	3b04      	subs	r3, #4
 800e95e:	2a00      	cmp	r2, #0
 800e960:	d1ce      	bne.n	800e900 <quorem+0x9a>
 800e962:	3c01      	subs	r4, #1
 800e964:	e7c9      	b.n	800e8fa <quorem+0x94>
 800e966:	6812      	ldr	r2, [r2, #0]
 800e968:	3b04      	subs	r3, #4
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	d1f0      	bne.n	800e950 <quorem+0xea>
 800e96e:	3c01      	subs	r4, #1
 800e970:	e7eb      	b.n	800e94a <quorem+0xe4>
 800e972:	2000      	movs	r0, #0
 800e974:	e7ee      	b.n	800e954 <quorem+0xee>
	...

0800e978 <_dtoa_r>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	ed2d 8b04 	vpush	{d8-d9}
 800e980:	69c5      	ldr	r5, [r0, #28]
 800e982:	b093      	sub	sp, #76	; 0x4c
 800e984:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e988:	ec57 6b10 	vmov	r6, r7, d0
 800e98c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e990:	9107      	str	r1, [sp, #28]
 800e992:	4604      	mov	r4, r0
 800e994:	920a      	str	r2, [sp, #40]	; 0x28
 800e996:	930d      	str	r3, [sp, #52]	; 0x34
 800e998:	b975      	cbnz	r5, 800e9b8 <_dtoa_r+0x40>
 800e99a:	2010      	movs	r0, #16
 800e99c:	f000 fe2a 	bl	800f5f4 <malloc>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	61e0      	str	r0, [r4, #28]
 800e9a4:	b920      	cbnz	r0, 800e9b0 <_dtoa_r+0x38>
 800e9a6:	4bae      	ldr	r3, [pc, #696]	; (800ec60 <_dtoa_r+0x2e8>)
 800e9a8:	21ef      	movs	r1, #239	; 0xef
 800e9aa:	48ae      	ldr	r0, [pc, #696]	; (800ec64 <_dtoa_r+0x2ec>)
 800e9ac:	f001 fc82 	bl	80102b4 <__assert_func>
 800e9b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e9b4:	6005      	str	r5, [r0, #0]
 800e9b6:	60c5      	str	r5, [r0, #12]
 800e9b8:	69e3      	ldr	r3, [r4, #28]
 800e9ba:	6819      	ldr	r1, [r3, #0]
 800e9bc:	b151      	cbz	r1, 800e9d4 <_dtoa_r+0x5c>
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	604a      	str	r2, [r1, #4]
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4093      	lsls	r3, r2
 800e9c6:	608b      	str	r3, [r1, #8]
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f000 ff07 	bl	800f7dc <_Bfree>
 800e9ce:	69e3      	ldr	r3, [r4, #28]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	1e3b      	subs	r3, r7, #0
 800e9d6:	bfbb      	ittet	lt
 800e9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e9dc:	9303      	strlt	r3, [sp, #12]
 800e9de:	2300      	movge	r3, #0
 800e9e0:	2201      	movlt	r2, #1
 800e9e2:	bfac      	ite	ge
 800e9e4:	f8c8 3000 	strge.w	r3, [r8]
 800e9e8:	f8c8 2000 	strlt.w	r2, [r8]
 800e9ec:	4b9e      	ldr	r3, [pc, #632]	; (800ec68 <_dtoa_r+0x2f0>)
 800e9ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e9f2:	ea33 0308 	bics.w	r3, r3, r8
 800e9f6:	d11b      	bne.n	800ea30 <_dtoa_r+0xb8>
 800e9f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ea04:	4333      	orrs	r3, r6
 800ea06:	f000 8593 	beq.w	800f530 <_dtoa_r+0xbb8>
 800ea0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea0c:	b963      	cbnz	r3, 800ea28 <_dtoa_r+0xb0>
 800ea0e:	4b97      	ldr	r3, [pc, #604]	; (800ec6c <_dtoa_r+0x2f4>)
 800ea10:	e027      	b.n	800ea62 <_dtoa_r+0xea>
 800ea12:	4b97      	ldr	r3, [pc, #604]	; (800ec70 <_dtoa_r+0x2f8>)
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	3308      	adds	r3, #8
 800ea18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	9800      	ldr	r0, [sp, #0]
 800ea1e:	b013      	add	sp, #76	; 0x4c
 800ea20:	ecbd 8b04 	vpop	{d8-d9}
 800ea24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea28:	4b90      	ldr	r3, [pc, #576]	; (800ec6c <_dtoa_r+0x2f4>)
 800ea2a:	9300      	str	r3, [sp, #0]
 800ea2c:	3303      	adds	r3, #3
 800ea2e:	e7f3      	b.n	800ea18 <_dtoa_r+0xa0>
 800ea30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea34:	2200      	movs	r2, #0
 800ea36:	ec51 0b17 	vmov	r0, r1, d7
 800ea3a:	eeb0 8a47 	vmov.f32	s16, s14
 800ea3e:	eef0 8a67 	vmov.f32	s17, s15
 800ea42:	2300      	movs	r3, #0
 800ea44:	f7f2 f860 	bl	8000b08 <__aeabi_dcmpeq>
 800ea48:	4681      	mov	r9, r0
 800ea4a:	b160      	cbz	r0, 800ea66 <_dtoa_r+0xee>
 800ea4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea4e:	2301      	movs	r3, #1
 800ea50:	6013      	str	r3, [r2, #0]
 800ea52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 8568 	beq.w	800f52a <_dtoa_r+0xbb2>
 800ea5a:	4b86      	ldr	r3, [pc, #536]	; (800ec74 <_dtoa_r+0x2fc>)
 800ea5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	e7da      	b.n	800ea1c <_dtoa_r+0xa4>
 800ea66:	aa10      	add	r2, sp, #64	; 0x40
 800ea68:	a911      	add	r1, sp, #68	; 0x44
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ea70:	eef0 0a68 	vmov.f32	s1, s17
 800ea74:	f001 f994 	bl	800fda0 <__d2b>
 800ea78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ea7c:	4682      	mov	sl, r0
 800ea7e:	2d00      	cmp	r5, #0
 800ea80:	d07f      	beq.n	800eb82 <_dtoa_r+0x20a>
 800ea82:	ee18 3a90 	vmov	r3, s17
 800ea86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ea8e:	ec51 0b18 	vmov	r0, r1, d8
 800ea92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	4b75      	ldr	r3, [pc, #468]	; (800ec78 <_dtoa_r+0x300>)
 800eaa4:	f7f1 fc10 	bl	80002c8 <__aeabi_dsub>
 800eaa8:	a367      	add	r3, pc, #412	; (adr r3, 800ec48 <_dtoa_r+0x2d0>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f7f1 fdc3 	bl	8000638 <__aeabi_dmul>
 800eab2:	a367      	add	r3, pc, #412	; (adr r3, 800ec50 <_dtoa_r+0x2d8>)
 800eab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab8:	f7f1 fc08 	bl	80002cc <__adddf3>
 800eabc:	4606      	mov	r6, r0
 800eabe:	4628      	mov	r0, r5
 800eac0:	460f      	mov	r7, r1
 800eac2:	f7f1 fd4f 	bl	8000564 <__aeabi_i2d>
 800eac6:	a364      	add	r3, pc, #400	; (adr r3, 800ec58 <_dtoa_r+0x2e0>)
 800eac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eacc:	f7f1 fdb4 	bl	8000638 <__aeabi_dmul>
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f1 fbf8 	bl	80002cc <__adddf3>
 800eadc:	4606      	mov	r6, r0
 800eade:	460f      	mov	r7, r1
 800eae0:	f7f2 f85a 	bl	8000b98 <__aeabi_d2iz>
 800eae4:	2200      	movs	r2, #0
 800eae6:	4683      	mov	fp, r0
 800eae8:	2300      	movs	r3, #0
 800eaea:	4630      	mov	r0, r6
 800eaec:	4639      	mov	r1, r7
 800eaee:	f7f2 f815 	bl	8000b1c <__aeabi_dcmplt>
 800eaf2:	b148      	cbz	r0, 800eb08 <_dtoa_r+0x190>
 800eaf4:	4658      	mov	r0, fp
 800eaf6:	f7f1 fd35 	bl	8000564 <__aeabi_i2d>
 800eafa:	4632      	mov	r2, r6
 800eafc:	463b      	mov	r3, r7
 800eafe:	f7f2 f803 	bl	8000b08 <__aeabi_dcmpeq>
 800eb02:	b908      	cbnz	r0, 800eb08 <_dtoa_r+0x190>
 800eb04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb08:	f1bb 0f16 	cmp.w	fp, #22
 800eb0c:	d857      	bhi.n	800ebbe <_dtoa_r+0x246>
 800eb0e:	4b5b      	ldr	r3, [pc, #364]	; (800ec7c <_dtoa_r+0x304>)
 800eb10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	ec51 0b18 	vmov	r0, r1, d8
 800eb1c:	f7f1 fffe 	bl	8000b1c <__aeabi_dcmplt>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d04e      	beq.n	800ebc2 <_dtoa_r+0x24a>
 800eb24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb28:	2300      	movs	r3, #0
 800eb2a:	930c      	str	r3, [sp, #48]	; 0x30
 800eb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb2e:	1b5b      	subs	r3, r3, r5
 800eb30:	1e5a      	subs	r2, r3, #1
 800eb32:	bf45      	ittet	mi
 800eb34:	f1c3 0301 	rsbmi	r3, r3, #1
 800eb38:	9305      	strmi	r3, [sp, #20]
 800eb3a:	2300      	movpl	r3, #0
 800eb3c:	2300      	movmi	r3, #0
 800eb3e:	9206      	str	r2, [sp, #24]
 800eb40:	bf54      	ite	pl
 800eb42:	9305      	strpl	r3, [sp, #20]
 800eb44:	9306      	strmi	r3, [sp, #24]
 800eb46:	f1bb 0f00 	cmp.w	fp, #0
 800eb4a:	db3c      	blt.n	800ebc6 <_dtoa_r+0x24e>
 800eb4c:	9b06      	ldr	r3, [sp, #24]
 800eb4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800eb52:	445b      	add	r3, fp
 800eb54:	9306      	str	r3, [sp, #24]
 800eb56:	2300      	movs	r3, #0
 800eb58:	9308      	str	r3, [sp, #32]
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	2b09      	cmp	r3, #9
 800eb5e:	d868      	bhi.n	800ec32 <_dtoa_r+0x2ba>
 800eb60:	2b05      	cmp	r3, #5
 800eb62:	bfc4      	itt	gt
 800eb64:	3b04      	subgt	r3, #4
 800eb66:	9307      	strgt	r3, [sp, #28]
 800eb68:	9b07      	ldr	r3, [sp, #28]
 800eb6a:	f1a3 0302 	sub.w	r3, r3, #2
 800eb6e:	bfcc      	ite	gt
 800eb70:	2500      	movgt	r5, #0
 800eb72:	2501      	movle	r5, #1
 800eb74:	2b03      	cmp	r3, #3
 800eb76:	f200 8085 	bhi.w	800ec84 <_dtoa_r+0x30c>
 800eb7a:	e8df f003 	tbb	[pc, r3]
 800eb7e:	3b2e      	.short	0x3b2e
 800eb80:	5839      	.short	0x5839
 800eb82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb86:	441d      	add	r5, r3
 800eb88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb8c:	2b20      	cmp	r3, #32
 800eb8e:	bfc1      	itttt	gt
 800eb90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb94:	fa08 f803 	lslgt.w	r8, r8, r3
 800eb98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800eb9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eba0:	bfd6      	itet	le
 800eba2:	f1c3 0320 	rsble	r3, r3, #32
 800eba6:	ea48 0003 	orrgt.w	r0, r8, r3
 800ebaa:	fa06 f003 	lslle.w	r0, r6, r3
 800ebae:	f7f1 fcc9 	bl	8000544 <__aeabi_ui2d>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ebb8:	3d01      	subs	r5, #1
 800ebba:	920e      	str	r2, [sp, #56]	; 0x38
 800ebbc:	e76f      	b.n	800ea9e <_dtoa_r+0x126>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e7b3      	b.n	800eb2a <_dtoa_r+0x1b2>
 800ebc2:	900c      	str	r0, [sp, #48]	; 0x30
 800ebc4:	e7b2      	b.n	800eb2c <_dtoa_r+0x1b4>
 800ebc6:	9b05      	ldr	r3, [sp, #20]
 800ebc8:	eba3 030b 	sub.w	r3, r3, fp
 800ebcc:	9305      	str	r3, [sp, #20]
 800ebce:	f1cb 0300 	rsb	r3, fp, #0
 800ebd2:	9308      	str	r3, [sp, #32]
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebd8:	e7bf      	b.n	800eb5a <_dtoa_r+0x1e2>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	dc52      	bgt.n	800ec8a <_dtoa_r+0x312>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	9304      	str	r3, [sp, #16]
 800ebea:	461a      	mov	r2, r3
 800ebec:	920a      	str	r2, [sp, #40]	; 0x28
 800ebee:	e00b      	b.n	800ec08 <_dtoa_r+0x290>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e7f3      	b.n	800ebdc <_dtoa_r+0x264>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebfa:	445b      	add	r3, fp
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	9304      	str	r3, [sp, #16]
 800ec04:	bfb8      	it	lt
 800ec06:	2301      	movlt	r3, #1
 800ec08:	69e0      	ldr	r0, [r4, #28]
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	f102 0614 	add.w	r6, r2, #20
 800ec12:	429e      	cmp	r6, r3
 800ec14:	d93d      	bls.n	800ec92 <_dtoa_r+0x31a>
 800ec16:	6041      	str	r1, [r0, #4]
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 fd9f 	bl	800f75c <_Balloc>
 800ec1e:	9000      	str	r0, [sp, #0]
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d139      	bne.n	800ec98 <_dtoa_r+0x320>
 800ec24:	4b16      	ldr	r3, [pc, #88]	; (800ec80 <_dtoa_r+0x308>)
 800ec26:	4602      	mov	r2, r0
 800ec28:	f240 11af 	movw	r1, #431	; 0x1af
 800ec2c:	e6bd      	b.n	800e9aa <_dtoa_r+0x32>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e7e1      	b.n	800ebf6 <_dtoa_r+0x27e>
 800ec32:	2501      	movs	r5, #1
 800ec34:	2300      	movs	r3, #0
 800ec36:	9307      	str	r3, [sp, #28]
 800ec38:	9509      	str	r5, [sp, #36]	; 0x24
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	9304      	str	r3, [sp, #16]
 800ec42:	2200      	movs	r2, #0
 800ec44:	2312      	movs	r3, #18
 800ec46:	e7d1      	b.n	800ebec <_dtoa_r+0x274>
 800ec48:	636f4361 	.word	0x636f4361
 800ec4c:	3fd287a7 	.word	0x3fd287a7
 800ec50:	8b60c8b3 	.word	0x8b60c8b3
 800ec54:	3fc68a28 	.word	0x3fc68a28
 800ec58:	509f79fb 	.word	0x509f79fb
 800ec5c:	3fd34413 	.word	0x3fd34413
 800ec60:	08011f75 	.word	0x08011f75
 800ec64:	08011f8c 	.word	0x08011f8c
 800ec68:	7ff00000 	.word	0x7ff00000
 800ec6c:	08011f71 	.word	0x08011f71
 800ec70:	08011f68 	.word	0x08011f68
 800ec74:	08011f45 	.word	0x08011f45
 800ec78:	3ff80000 	.word	0x3ff80000
 800ec7c:	08012078 	.word	0x08012078
 800ec80:	08011fe4 	.word	0x08011fe4
 800ec84:	2301      	movs	r3, #1
 800ec86:	9309      	str	r3, [sp, #36]	; 0x24
 800ec88:	e7d7      	b.n	800ec3a <_dtoa_r+0x2c2>
 800ec8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	9304      	str	r3, [sp, #16]
 800ec90:	e7ba      	b.n	800ec08 <_dtoa_r+0x290>
 800ec92:	3101      	adds	r1, #1
 800ec94:	0052      	lsls	r2, r2, #1
 800ec96:	e7ba      	b.n	800ec0e <_dtoa_r+0x296>
 800ec98:	69e3      	ldr	r3, [r4, #28]
 800ec9a:	9a00      	ldr	r2, [sp, #0]
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	9b04      	ldr	r3, [sp, #16]
 800eca0:	2b0e      	cmp	r3, #14
 800eca2:	f200 80a8 	bhi.w	800edf6 <_dtoa_r+0x47e>
 800eca6:	2d00      	cmp	r5, #0
 800eca8:	f000 80a5 	beq.w	800edf6 <_dtoa_r+0x47e>
 800ecac:	f1bb 0f00 	cmp.w	fp, #0
 800ecb0:	dd38      	ble.n	800ed24 <_dtoa_r+0x3ac>
 800ecb2:	4bc0      	ldr	r3, [pc, #768]	; (800efb4 <_dtoa_r+0x63c>)
 800ecb4:	f00b 020f 	and.w	r2, fp, #15
 800ecb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ecc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ecc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ecc8:	d019      	beq.n	800ecfe <_dtoa_r+0x386>
 800ecca:	4bbb      	ldr	r3, [pc, #748]	; (800efb8 <_dtoa_r+0x640>)
 800eccc:	ec51 0b18 	vmov	r0, r1, d8
 800ecd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ecd4:	f7f1 fdda 	bl	800088c <__aeabi_ddiv>
 800ecd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecdc:	f008 080f 	and.w	r8, r8, #15
 800ece0:	2503      	movs	r5, #3
 800ece2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800efb8 <_dtoa_r+0x640>
 800ece6:	f1b8 0f00 	cmp.w	r8, #0
 800ecea:	d10a      	bne.n	800ed02 <_dtoa_r+0x38a>
 800ecec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecf0:	4632      	mov	r2, r6
 800ecf2:	463b      	mov	r3, r7
 800ecf4:	f7f1 fdca 	bl	800088c <__aeabi_ddiv>
 800ecf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecfc:	e02b      	b.n	800ed56 <_dtoa_r+0x3de>
 800ecfe:	2502      	movs	r5, #2
 800ed00:	e7ef      	b.n	800ece2 <_dtoa_r+0x36a>
 800ed02:	f018 0f01 	tst.w	r8, #1
 800ed06:	d008      	beq.n	800ed1a <_dtoa_r+0x3a2>
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ed10:	f7f1 fc92 	bl	8000638 <__aeabi_dmul>
 800ed14:	3501      	adds	r5, #1
 800ed16:	4606      	mov	r6, r0
 800ed18:	460f      	mov	r7, r1
 800ed1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed1e:	f109 0908 	add.w	r9, r9, #8
 800ed22:	e7e0      	b.n	800ece6 <_dtoa_r+0x36e>
 800ed24:	f000 809f 	beq.w	800ee66 <_dtoa_r+0x4ee>
 800ed28:	f1cb 0600 	rsb	r6, fp, #0
 800ed2c:	4ba1      	ldr	r3, [pc, #644]	; (800efb4 <_dtoa_r+0x63c>)
 800ed2e:	4fa2      	ldr	r7, [pc, #648]	; (800efb8 <_dtoa_r+0x640>)
 800ed30:	f006 020f 	and.w	r2, r6, #15
 800ed34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	ec51 0b18 	vmov	r0, r1, d8
 800ed40:	f7f1 fc7a 	bl	8000638 <__aeabi_dmul>
 800ed44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed48:	1136      	asrs	r6, r6, #4
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	2502      	movs	r5, #2
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d17e      	bne.n	800ee50 <_dtoa_r+0x4d8>
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1d0      	bne.n	800ecf8 <_dtoa_r+0x380>
 800ed56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 8084 	beq.w	800ee6a <_dtoa_r+0x4f2>
 800ed62:	4b96      	ldr	r3, [pc, #600]	; (800efbc <_dtoa_r+0x644>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 fed7 	bl	8000b1c <__aeabi_dcmplt>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d07b      	beq.n	800ee6a <_dtoa_r+0x4f2>
 800ed72:	9b04      	ldr	r3, [sp, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d078      	beq.n	800ee6a <_dtoa_r+0x4f2>
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	dd39      	ble.n	800edf2 <_dtoa_r+0x47a>
 800ed7e:	4b90      	ldr	r3, [pc, #576]	; (800efc0 <_dtoa_r+0x648>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	f7f1 fc57 	bl	8000638 <__aeabi_dmul>
 800ed8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed8e:	9e01      	ldr	r6, [sp, #4]
 800ed90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ed94:	3501      	adds	r5, #1
 800ed96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f7f1 fbe2 	bl	8000564 <__aeabi_i2d>
 800eda0:	4642      	mov	r2, r8
 800eda2:	464b      	mov	r3, r9
 800eda4:	f7f1 fc48 	bl	8000638 <__aeabi_dmul>
 800eda8:	4b86      	ldr	r3, [pc, #536]	; (800efc4 <_dtoa_r+0x64c>)
 800edaa:	2200      	movs	r2, #0
 800edac:	f7f1 fa8e 	bl	80002cc <__adddf3>
 800edb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800edb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	2e00      	cmp	r6, #0
 800edbc:	d158      	bne.n	800ee70 <_dtoa_r+0x4f8>
 800edbe:	4b82      	ldr	r3, [pc, #520]	; (800efc8 <_dtoa_r+0x650>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	4640      	mov	r0, r8
 800edc4:	4649      	mov	r1, r9
 800edc6:	f7f1 fa7f 	bl	80002c8 <__aeabi_dsub>
 800edca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edce:	4680      	mov	r8, r0
 800edd0:	4689      	mov	r9, r1
 800edd2:	f7f1 fec1 	bl	8000b58 <__aeabi_dcmpgt>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f040 8296 	bne.w	800f308 <_dtoa_r+0x990>
 800eddc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ede0:	4640      	mov	r0, r8
 800ede2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ede6:	4649      	mov	r1, r9
 800ede8:	f7f1 fe98 	bl	8000b1c <__aeabi_dcmplt>
 800edec:	2800      	cmp	r0, #0
 800edee:	f040 8289 	bne.w	800f304 <_dtoa_r+0x98c>
 800edf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800edf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f2c0 814e 	blt.w	800f09a <_dtoa_r+0x722>
 800edfe:	f1bb 0f0e 	cmp.w	fp, #14
 800ee02:	f300 814a 	bgt.w	800f09a <_dtoa_r+0x722>
 800ee06:	4b6b      	ldr	r3, [pc, #428]	; (800efb4 <_dtoa_r+0x63c>)
 800ee08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f280 80dc 	bge.w	800efd0 <_dtoa_r+0x658>
 800ee18:	9b04      	ldr	r3, [sp, #16]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f300 80d8 	bgt.w	800efd0 <_dtoa_r+0x658>
 800ee20:	f040 826f 	bne.w	800f302 <_dtoa_r+0x98a>
 800ee24:	4b68      	ldr	r3, [pc, #416]	; (800efc8 <_dtoa_r+0x650>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	f7f1 fc04 	bl	8000638 <__aeabi_dmul>
 800ee30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee34:	f7f1 fe86 	bl	8000b44 <__aeabi_dcmpge>
 800ee38:	9e04      	ldr	r6, [sp, #16]
 800ee3a:	4637      	mov	r7, r6
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	f040 8245 	bne.w	800f2cc <_dtoa_r+0x954>
 800ee42:	9d00      	ldr	r5, [sp, #0]
 800ee44:	2331      	movs	r3, #49	; 0x31
 800ee46:	f805 3b01 	strb.w	r3, [r5], #1
 800ee4a:	f10b 0b01 	add.w	fp, fp, #1
 800ee4e:	e241      	b.n	800f2d4 <_dtoa_r+0x95c>
 800ee50:	07f2      	lsls	r2, r6, #31
 800ee52:	d505      	bpl.n	800ee60 <_dtoa_r+0x4e8>
 800ee54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee58:	f7f1 fbee 	bl	8000638 <__aeabi_dmul>
 800ee5c:	3501      	adds	r5, #1
 800ee5e:	2301      	movs	r3, #1
 800ee60:	1076      	asrs	r6, r6, #1
 800ee62:	3708      	adds	r7, #8
 800ee64:	e773      	b.n	800ed4e <_dtoa_r+0x3d6>
 800ee66:	2502      	movs	r5, #2
 800ee68:	e775      	b.n	800ed56 <_dtoa_r+0x3de>
 800ee6a:	9e04      	ldr	r6, [sp, #16]
 800ee6c:	465f      	mov	r7, fp
 800ee6e:	e792      	b.n	800ed96 <_dtoa_r+0x41e>
 800ee70:	9900      	ldr	r1, [sp, #0]
 800ee72:	4b50      	ldr	r3, [pc, #320]	; (800efb4 <_dtoa_r+0x63c>)
 800ee74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee78:	4431      	add	r1, r6
 800ee7a:	9102      	str	r1, [sp, #8]
 800ee7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee7e:	eeb0 9a47 	vmov.f32	s18, s14
 800ee82:	eef0 9a67 	vmov.f32	s19, s15
 800ee86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee8e:	2900      	cmp	r1, #0
 800ee90:	d044      	beq.n	800ef1c <_dtoa_r+0x5a4>
 800ee92:	494e      	ldr	r1, [pc, #312]	; (800efcc <_dtoa_r+0x654>)
 800ee94:	2000      	movs	r0, #0
 800ee96:	f7f1 fcf9 	bl	800088c <__aeabi_ddiv>
 800ee9a:	ec53 2b19 	vmov	r2, r3, d9
 800ee9e:	f7f1 fa13 	bl	80002c8 <__aeabi_dsub>
 800eea2:	9d00      	ldr	r5, [sp, #0]
 800eea4:	ec41 0b19 	vmov	d9, r0, r1
 800eea8:	4649      	mov	r1, r9
 800eeaa:	4640      	mov	r0, r8
 800eeac:	f7f1 fe74 	bl	8000b98 <__aeabi_d2iz>
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	f7f1 fb57 	bl	8000564 <__aeabi_i2d>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	f7f1 fa03 	bl	80002c8 <__aeabi_dsub>
 800eec2:	3630      	adds	r6, #48	; 0x30
 800eec4:	f805 6b01 	strb.w	r6, [r5], #1
 800eec8:	ec53 2b19 	vmov	r2, r3, d9
 800eecc:	4680      	mov	r8, r0
 800eece:	4689      	mov	r9, r1
 800eed0:	f7f1 fe24 	bl	8000b1c <__aeabi_dcmplt>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d164      	bne.n	800efa2 <_dtoa_r+0x62a>
 800eed8:	4642      	mov	r2, r8
 800eeda:	464b      	mov	r3, r9
 800eedc:	4937      	ldr	r1, [pc, #220]	; (800efbc <_dtoa_r+0x644>)
 800eede:	2000      	movs	r0, #0
 800eee0:	f7f1 f9f2 	bl	80002c8 <__aeabi_dsub>
 800eee4:	ec53 2b19 	vmov	r2, r3, d9
 800eee8:	f7f1 fe18 	bl	8000b1c <__aeabi_dcmplt>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	f040 80b6 	bne.w	800f05e <_dtoa_r+0x6e6>
 800eef2:	9b02      	ldr	r3, [sp, #8]
 800eef4:	429d      	cmp	r5, r3
 800eef6:	f43f af7c 	beq.w	800edf2 <_dtoa_r+0x47a>
 800eefa:	4b31      	ldr	r3, [pc, #196]	; (800efc0 <_dtoa_r+0x648>)
 800eefc:	ec51 0b19 	vmov	r0, r1, d9
 800ef00:	2200      	movs	r2, #0
 800ef02:	f7f1 fb99 	bl	8000638 <__aeabi_dmul>
 800ef06:	4b2e      	ldr	r3, [pc, #184]	; (800efc0 <_dtoa_r+0x648>)
 800ef08:	ec41 0b19 	vmov	d9, r0, r1
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	4640      	mov	r0, r8
 800ef10:	4649      	mov	r1, r9
 800ef12:	f7f1 fb91 	bl	8000638 <__aeabi_dmul>
 800ef16:	4680      	mov	r8, r0
 800ef18:	4689      	mov	r9, r1
 800ef1a:	e7c5      	b.n	800eea8 <_dtoa_r+0x530>
 800ef1c:	ec51 0b17 	vmov	r0, r1, d7
 800ef20:	f7f1 fb8a 	bl	8000638 <__aeabi_dmul>
 800ef24:	9b02      	ldr	r3, [sp, #8]
 800ef26:	9d00      	ldr	r5, [sp, #0]
 800ef28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef2a:	ec41 0b19 	vmov	d9, r0, r1
 800ef2e:	4649      	mov	r1, r9
 800ef30:	4640      	mov	r0, r8
 800ef32:	f7f1 fe31 	bl	8000b98 <__aeabi_d2iz>
 800ef36:	4606      	mov	r6, r0
 800ef38:	f7f1 fb14 	bl	8000564 <__aeabi_i2d>
 800ef3c:	3630      	adds	r6, #48	; 0x30
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4640      	mov	r0, r8
 800ef44:	4649      	mov	r1, r9
 800ef46:	f7f1 f9bf 	bl	80002c8 <__aeabi_dsub>
 800ef4a:	f805 6b01 	strb.w	r6, [r5], #1
 800ef4e:	9b02      	ldr	r3, [sp, #8]
 800ef50:	429d      	cmp	r5, r3
 800ef52:	4680      	mov	r8, r0
 800ef54:	4689      	mov	r9, r1
 800ef56:	f04f 0200 	mov.w	r2, #0
 800ef5a:	d124      	bne.n	800efa6 <_dtoa_r+0x62e>
 800ef5c:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <_dtoa_r+0x654>)
 800ef5e:	ec51 0b19 	vmov	r0, r1, d9
 800ef62:	f7f1 f9b3 	bl	80002cc <__adddf3>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	4640      	mov	r0, r8
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	f7f1 fdf3 	bl	8000b58 <__aeabi_dcmpgt>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d173      	bne.n	800f05e <_dtoa_r+0x6e6>
 800ef76:	ec53 2b19 	vmov	r2, r3, d9
 800ef7a:	4914      	ldr	r1, [pc, #80]	; (800efcc <_dtoa_r+0x654>)
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	f7f1 f9a3 	bl	80002c8 <__aeabi_dsub>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4640      	mov	r0, r8
 800ef88:	4649      	mov	r1, r9
 800ef8a:	f7f1 fdc7 	bl	8000b1c <__aeabi_dcmplt>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	f43f af2f 	beq.w	800edf2 <_dtoa_r+0x47a>
 800ef94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef96:	1e6b      	subs	r3, r5, #1
 800ef98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef9e:	2b30      	cmp	r3, #48	; 0x30
 800efa0:	d0f8      	beq.n	800ef94 <_dtoa_r+0x61c>
 800efa2:	46bb      	mov	fp, r7
 800efa4:	e04a      	b.n	800f03c <_dtoa_r+0x6c4>
 800efa6:	4b06      	ldr	r3, [pc, #24]	; (800efc0 <_dtoa_r+0x648>)
 800efa8:	f7f1 fb46 	bl	8000638 <__aeabi_dmul>
 800efac:	4680      	mov	r8, r0
 800efae:	4689      	mov	r9, r1
 800efb0:	e7bd      	b.n	800ef2e <_dtoa_r+0x5b6>
 800efb2:	bf00      	nop
 800efb4:	08012078 	.word	0x08012078
 800efb8:	08012050 	.word	0x08012050
 800efbc:	3ff00000 	.word	0x3ff00000
 800efc0:	40240000 	.word	0x40240000
 800efc4:	401c0000 	.word	0x401c0000
 800efc8:	40140000 	.word	0x40140000
 800efcc:	3fe00000 	.word	0x3fe00000
 800efd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800efd4:	9d00      	ldr	r5, [sp, #0]
 800efd6:	4642      	mov	r2, r8
 800efd8:	464b      	mov	r3, r9
 800efda:	4630      	mov	r0, r6
 800efdc:	4639      	mov	r1, r7
 800efde:	f7f1 fc55 	bl	800088c <__aeabi_ddiv>
 800efe2:	f7f1 fdd9 	bl	8000b98 <__aeabi_d2iz>
 800efe6:	9001      	str	r0, [sp, #4]
 800efe8:	f7f1 fabc 	bl	8000564 <__aeabi_i2d>
 800efec:	4642      	mov	r2, r8
 800efee:	464b      	mov	r3, r9
 800eff0:	f7f1 fb22 	bl	8000638 <__aeabi_dmul>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	4630      	mov	r0, r6
 800effa:	4639      	mov	r1, r7
 800effc:	f7f1 f964 	bl	80002c8 <__aeabi_dsub>
 800f000:	9e01      	ldr	r6, [sp, #4]
 800f002:	9f04      	ldr	r7, [sp, #16]
 800f004:	3630      	adds	r6, #48	; 0x30
 800f006:	f805 6b01 	strb.w	r6, [r5], #1
 800f00a:	9e00      	ldr	r6, [sp, #0]
 800f00c:	1bae      	subs	r6, r5, r6
 800f00e:	42b7      	cmp	r7, r6
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	d134      	bne.n	800f080 <_dtoa_r+0x708>
 800f016:	f7f1 f959 	bl	80002cc <__adddf3>
 800f01a:	4642      	mov	r2, r8
 800f01c:	464b      	mov	r3, r9
 800f01e:	4606      	mov	r6, r0
 800f020:	460f      	mov	r7, r1
 800f022:	f7f1 fd99 	bl	8000b58 <__aeabi_dcmpgt>
 800f026:	b9c8      	cbnz	r0, 800f05c <_dtoa_r+0x6e4>
 800f028:	4642      	mov	r2, r8
 800f02a:	464b      	mov	r3, r9
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f1 fd6a 	bl	8000b08 <__aeabi_dcmpeq>
 800f034:	b110      	cbz	r0, 800f03c <_dtoa_r+0x6c4>
 800f036:	9b01      	ldr	r3, [sp, #4]
 800f038:	07db      	lsls	r3, r3, #31
 800f03a:	d40f      	bmi.n	800f05c <_dtoa_r+0x6e4>
 800f03c:	4651      	mov	r1, sl
 800f03e:	4620      	mov	r0, r4
 800f040:	f000 fbcc 	bl	800f7dc <_Bfree>
 800f044:	2300      	movs	r3, #0
 800f046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f048:	702b      	strb	r3, [r5, #0]
 800f04a:	f10b 0301 	add.w	r3, fp, #1
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f052:	2b00      	cmp	r3, #0
 800f054:	f43f ace2 	beq.w	800ea1c <_dtoa_r+0xa4>
 800f058:	601d      	str	r5, [r3, #0]
 800f05a:	e4df      	b.n	800ea1c <_dtoa_r+0xa4>
 800f05c:	465f      	mov	r7, fp
 800f05e:	462b      	mov	r3, r5
 800f060:	461d      	mov	r5, r3
 800f062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f066:	2a39      	cmp	r2, #57	; 0x39
 800f068:	d106      	bne.n	800f078 <_dtoa_r+0x700>
 800f06a:	9a00      	ldr	r2, [sp, #0]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d1f7      	bne.n	800f060 <_dtoa_r+0x6e8>
 800f070:	9900      	ldr	r1, [sp, #0]
 800f072:	2230      	movs	r2, #48	; 0x30
 800f074:	3701      	adds	r7, #1
 800f076:	700a      	strb	r2, [r1, #0]
 800f078:	781a      	ldrb	r2, [r3, #0]
 800f07a:	3201      	adds	r2, #1
 800f07c:	701a      	strb	r2, [r3, #0]
 800f07e:	e790      	b.n	800efa2 <_dtoa_r+0x62a>
 800f080:	4ba3      	ldr	r3, [pc, #652]	; (800f310 <_dtoa_r+0x998>)
 800f082:	2200      	movs	r2, #0
 800f084:	f7f1 fad8 	bl	8000638 <__aeabi_dmul>
 800f088:	2200      	movs	r2, #0
 800f08a:	2300      	movs	r3, #0
 800f08c:	4606      	mov	r6, r0
 800f08e:	460f      	mov	r7, r1
 800f090:	f7f1 fd3a 	bl	8000b08 <__aeabi_dcmpeq>
 800f094:	2800      	cmp	r0, #0
 800f096:	d09e      	beq.n	800efd6 <_dtoa_r+0x65e>
 800f098:	e7d0      	b.n	800f03c <_dtoa_r+0x6c4>
 800f09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f09c:	2a00      	cmp	r2, #0
 800f09e:	f000 80ca 	beq.w	800f236 <_dtoa_r+0x8be>
 800f0a2:	9a07      	ldr	r2, [sp, #28]
 800f0a4:	2a01      	cmp	r2, #1
 800f0a6:	f300 80ad 	bgt.w	800f204 <_dtoa_r+0x88c>
 800f0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0ac:	2a00      	cmp	r2, #0
 800f0ae:	f000 80a5 	beq.w	800f1fc <_dtoa_r+0x884>
 800f0b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f0b6:	9e08      	ldr	r6, [sp, #32]
 800f0b8:	9d05      	ldr	r5, [sp, #20]
 800f0ba:	9a05      	ldr	r2, [sp, #20]
 800f0bc:	441a      	add	r2, r3
 800f0be:	9205      	str	r2, [sp, #20]
 800f0c0:	9a06      	ldr	r2, [sp, #24]
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	441a      	add	r2, r3
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	9206      	str	r2, [sp, #24]
 800f0ca:	f000 fc3d 	bl	800f948 <__i2b>
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	b165      	cbz	r5, 800f0ec <_dtoa_r+0x774>
 800f0d2:	9b06      	ldr	r3, [sp, #24]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dd09      	ble.n	800f0ec <_dtoa_r+0x774>
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	9a05      	ldr	r2, [sp, #20]
 800f0dc:	bfa8      	it	ge
 800f0de:	462b      	movge	r3, r5
 800f0e0:	1ad2      	subs	r2, r2, r3
 800f0e2:	9205      	str	r2, [sp, #20]
 800f0e4:	9a06      	ldr	r2, [sp, #24]
 800f0e6:	1aed      	subs	r5, r5, r3
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	9306      	str	r3, [sp, #24]
 800f0ec:	9b08      	ldr	r3, [sp, #32]
 800f0ee:	b1f3      	cbz	r3, 800f12e <_dtoa_r+0x7b6>
 800f0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 80a3 	beq.w	800f23e <_dtoa_r+0x8c6>
 800f0f8:	2e00      	cmp	r6, #0
 800f0fa:	dd10      	ble.n	800f11e <_dtoa_r+0x7a6>
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	4632      	mov	r2, r6
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fce1 	bl	800fac8 <__pow5mult>
 800f106:	4652      	mov	r2, sl
 800f108:	4601      	mov	r1, r0
 800f10a:	4607      	mov	r7, r0
 800f10c:	4620      	mov	r0, r4
 800f10e:	f000 fc31 	bl	800f974 <__multiply>
 800f112:	4651      	mov	r1, sl
 800f114:	4680      	mov	r8, r0
 800f116:	4620      	mov	r0, r4
 800f118:	f000 fb60 	bl	800f7dc <_Bfree>
 800f11c:	46c2      	mov	sl, r8
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	1b9a      	subs	r2, r3, r6
 800f122:	d004      	beq.n	800f12e <_dtoa_r+0x7b6>
 800f124:	4651      	mov	r1, sl
 800f126:	4620      	mov	r0, r4
 800f128:	f000 fcce 	bl	800fac8 <__pow5mult>
 800f12c:	4682      	mov	sl, r0
 800f12e:	2101      	movs	r1, #1
 800f130:	4620      	mov	r0, r4
 800f132:	f000 fc09 	bl	800f948 <__i2b>
 800f136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f138:	2b00      	cmp	r3, #0
 800f13a:	4606      	mov	r6, r0
 800f13c:	f340 8081 	ble.w	800f242 <_dtoa_r+0x8ca>
 800f140:	461a      	mov	r2, r3
 800f142:	4601      	mov	r1, r0
 800f144:	4620      	mov	r0, r4
 800f146:	f000 fcbf 	bl	800fac8 <__pow5mult>
 800f14a:	9b07      	ldr	r3, [sp, #28]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	4606      	mov	r6, r0
 800f150:	dd7a      	ble.n	800f248 <_dtoa_r+0x8d0>
 800f152:	f04f 0800 	mov.w	r8, #0
 800f156:	6933      	ldr	r3, [r6, #16]
 800f158:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f15c:	6918      	ldr	r0, [r3, #16]
 800f15e:	f000 fba5 	bl	800f8ac <__hi0bits>
 800f162:	f1c0 0020 	rsb	r0, r0, #32
 800f166:	9b06      	ldr	r3, [sp, #24]
 800f168:	4418      	add	r0, r3
 800f16a:	f010 001f 	ands.w	r0, r0, #31
 800f16e:	f000 8094 	beq.w	800f29a <_dtoa_r+0x922>
 800f172:	f1c0 0320 	rsb	r3, r0, #32
 800f176:	2b04      	cmp	r3, #4
 800f178:	f340 8085 	ble.w	800f286 <_dtoa_r+0x90e>
 800f17c:	9b05      	ldr	r3, [sp, #20]
 800f17e:	f1c0 001c 	rsb	r0, r0, #28
 800f182:	4403      	add	r3, r0
 800f184:	9305      	str	r3, [sp, #20]
 800f186:	9b06      	ldr	r3, [sp, #24]
 800f188:	4403      	add	r3, r0
 800f18a:	4405      	add	r5, r0
 800f18c:	9306      	str	r3, [sp, #24]
 800f18e:	9b05      	ldr	r3, [sp, #20]
 800f190:	2b00      	cmp	r3, #0
 800f192:	dd05      	ble.n	800f1a0 <_dtoa_r+0x828>
 800f194:	4651      	mov	r1, sl
 800f196:	461a      	mov	r2, r3
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 fcef 	bl	800fb7c <__lshift>
 800f19e:	4682      	mov	sl, r0
 800f1a0:	9b06      	ldr	r3, [sp, #24]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	dd05      	ble.n	800f1b2 <_dtoa_r+0x83a>
 800f1a6:	4631      	mov	r1, r6
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f000 fce6 	bl	800fb7c <__lshift>
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d072      	beq.n	800f29e <_dtoa_r+0x926>
 800f1b8:	4631      	mov	r1, r6
 800f1ba:	4650      	mov	r0, sl
 800f1bc:	f000 fd4a 	bl	800fc54 <__mcmp>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	da6c      	bge.n	800f29e <_dtoa_r+0x926>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	4651      	mov	r1, sl
 800f1c8:	220a      	movs	r2, #10
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f000 fb28 	bl	800f820 <__multadd>
 800f1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1d6:	4682      	mov	sl, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 81b0 	beq.w	800f53e <_dtoa_r+0xbc6>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	220a      	movs	r2, #10
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 fb1b 	bl	800f820 <__multadd>
 800f1ea:	9b01      	ldr	r3, [sp, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	4607      	mov	r7, r0
 800f1f0:	f300 8096 	bgt.w	800f320 <_dtoa_r+0x9a8>
 800f1f4:	9b07      	ldr	r3, [sp, #28]
 800f1f6:	2b02      	cmp	r3, #2
 800f1f8:	dc59      	bgt.n	800f2ae <_dtoa_r+0x936>
 800f1fa:	e091      	b.n	800f320 <_dtoa_r+0x9a8>
 800f1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f202:	e758      	b.n	800f0b6 <_dtoa_r+0x73e>
 800f204:	9b04      	ldr	r3, [sp, #16]
 800f206:	1e5e      	subs	r6, r3, #1
 800f208:	9b08      	ldr	r3, [sp, #32]
 800f20a:	42b3      	cmp	r3, r6
 800f20c:	bfbf      	itttt	lt
 800f20e:	9b08      	ldrlt	r3, [sp, #32]
 800f210:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f212:	9608      	strlt	r6, [sp, #32]
 800f214:	1af3      	sublt	r3, r6, r3
 800f216:	bfb4      	ite	lt
 800f218:	18d2      	addlt	r2, r2, r3
 800f21a:	1b9e      	subge	r6, r3, r6
 800f21c:	9b04      	ldr	r3, [sp, #16]
 800f21e:	bfbc      	itt	lt
 800f220:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f222:	2600      	movlt	r6, #0
 800f224:	2b00      	cmp	r3, #0
 800f226:	bfb7      	itett	lt
 800f228:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f22c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f230:	1a9d      	sublt	r5, r3, r2
 800f232:	2300      	movlt	r3, #0
 800f234:	e741      	b.n	800f0ba <_dtoa_r+0x742>
 800f236:	9e08      	ldr	r6, [sp, #32]
 800f238:	9d05      	ldr	r5, [sp, #20]
 800f23a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f23c:	e748      	b.n	800f0d0 <_dtoa_r+0x758>
 800f23e:	9a08      	ldr	r2, [sp, #32]
 800f240:	e770      	b.n	800f124 <_dtoa_r+0x7ac>
 800f242:	9b07      	ldr	r3, [sp, #28]
 800f244:	2b01      	cmp	r3, #1
 800f246:	dc19      	bgt.n	800f27c <_dtoa_r+0x904>
 800f248:	9b02      	ldr	r3, [sp, #8]
 800f24a:	b9bb      	cbnz	r3, 800f27c <_dtoa_r+0x904>
 800f24c:	9b03      	ldr	r3, [sp, #12]
 800f24e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f252:	b99b      	cbnz	r3, 800f27c <_dtoa_r+0x904>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f25a:	0d1b      	lsrs	r3, r3, #20
 800f25c:	051b      	lsls	r3, r3, #20
 800f25e:	b183      	cbz	r3, 800f282 <_dtoa_r+0x90a>
 800f260:	9b05      	ldr	r3, [sp, #20]
 800f262:	3301      	adds	r3, #1
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	3301      	adds	r3, #1
 800f26a:	9306      	str	r3, [sp, #24]
 800f26c:	f04f 0801 	mov.w	r8, #1
 800f270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f272:	2b00      	cmp	r3, #0
 800f274:	f47f af6f 	bne.w	800f156 <_dtoa_r+0x7de>
 800f278:	2001      	movs	r0, #1
 800f27a:	e774      	b.n	800f166 <_dtoa_r+0x7ee>
 800f27c:	f04f 0800 	mov.w	r8, #0
 800f280:	e7f6      	b.n	800f270 <_dtoa_r+0x8f8>
 800f282:	4698      	mov	r8, r3
 800f284:	e7f4      	b.n	800f270 <_dtoa_r+0x8f8>
 800f286:	d082      	beq.n	800f18e <_dtoa_r+0x816>
 800f288:	9a05      	ldr	r2, [sp, #20]
 800f28a:	331c      	adds	r3, #28
 800f28c:	441a      	add	r2, r3
 800f28e:	9205      	str	r2, [sp, #20]
 800f290:	9a06      	ldr	r2, [sp, #24]
 800f292:	441a      	add	r2, r3
 800f294:	441d      	add	r5, r3
 800f296:	9206      	str	r2, [sp, #24]
 800f298:	e779      	b.n	800f18e <_dtoa_r+0x816>
 800f29a:	4603      	mov	r3, r0
 800f29c:	e7f4      	b.n	800f288 <_dtoa_r+0x910>
 800f29e:	9b04      	ldr	r3, [sp, #16]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dc37      	bgt.n	800f314 <_dtoa_r+0x99c>
 800f2a4:	9b07      	ldr	r3, [sp, #28]
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	dd34      	ble.n	800f314 <_dtoa_r+0x99c>
 800f2aa:	9b04      	ldr	r3, [sp, #16]
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	b963      	cbnz	r3, 800f2cc <_dtoa_r+0x954>
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 fab2 	bl	800f820 <__multadd>
 800f2bc:	4601      	mov	r1, r0
 800f2be:	4606      	mov	r6, r0
 800f2c0:	4650      	mov	r0, sl
 800f2c2:	f000 fcc7 	bl	800fc54 <__mcmp>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f73f adbb 	bgt.w	800ee42 <_dtoa_r+0x4ca>
 800f2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ce:	9d00      	ldr	r5, [sp, #0]
 800f2d0:	ea6f 0b03 	mvn.w	fp, r3
 800f2d4:	f04f 0800 	mov.w	r8, #0
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 fa7e 	bl	800f7dc <_Bfree>
 800f2e0:	2f00      	cmp	r7, #0
 800f2e2:	f43f aeab 	beq.w	800f03c <_dtoa_r+0x6c4>
 800f2e6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ea:	d005      	beq.n	800f2f8 <_dtoa_r+0x980>
 800f2ec:	45b8      	cmp	r8, r7
 800f2ee:	d003      	beq.n	800f2f8 <_dtoa_r+0x980>
 800f2f0:	4641      	mov	r1, r8
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f000 fa72 	bl	800f7dc <_Bfree>
 800f2f8:	4639      	mov	r1, r7
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 fa6e 	bl	800f7dc <_Bfree>
 800f300:	e69c      	b.n	800f03c <_dtoa_r+0x6c4>
 800f302:	2600      	movs	r6, #0
 800f304:	4637      	mov	r7, r6
 800f306:	e7e1      	b.n	800f2cc <_dtoa_r+0x954>
 800f308:	46bb      	mov	fp, r7
 800f30a:	4637      	mov	r7, r6
 800f30c:	e599      	b.n	800ee42 <_dtoa_r+0x4ca>
 800f30e:	bf00      	nop
 800f310:	40240000 	.word	0x40240000
 800f314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 80c8 	beq.w	800f4ac <_dtoa_r+0xb34>
 800f31c:	9b04      	ldr	r3, [sp, #16]
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	2d00      	cmp	r5, #0
 800f322:	dd05      	ble.n	800f330 <_dtoa_r+0x9b8>
 800f324:	4639      	mov	r1, r7
 800f326:	462a      	mov	r2, r5
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 fc27 	bl	800fb7c <__lshift>
 800f32e:	4607      	mov	r7, r0
 800f330:	f1b8 0f00 	cmp.w	r8, #0
 800f334:	d05b      	beq.n	800f3ee <_dtoa_r+0xa76>
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	4620      	mov	r0, r4
 800f33a:	f000 fa0f 	bl	800f75c <_Balloc>
 800f33e:	4605      	mov	r5, r0
 800f340:	b928      	cbnz	r0, 800f34e <_dtoa_r+0x9d6>
 800f342:	4b83      	ldr	r3, [pc, #524]	; (800f550 <_dtoa_r+0xbd8>)
 800f344:	4602      	mov	r2, r0
 800f346:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f34a:	f7ff bb2e 	b.w	800e9aa <_dtoa_r+0x32>
 800f34e:	693a      	ldr	r2, [r7, #16]
 800f350:	3202      	adds	r2, #2
 800f352:	0092      	lsls	r2, r2, #2
 800f354:	f107 010c 	add.w	r1, r7, #12
 800f358:	300c      	adds	r0, #12
 800f35a:	f7ff fa76 	bl	800e84a <memcpy>
 800f35e:	2201      	movs	r2, #1
 800f360:	4629      	mov	r1, r5
 800f362:	4620      	mov	r0, r4
 800f364:	f000 fc0a 	bl	800fb7c <__lshift>
 800f368:	9b00      	ldr	r3, [sp, #0]
 800f36a:	3301      	adds	r3, #1
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f372:	4413      	add	r3, r2
 800f374:	9308      	str	r3, [sp, #32]
 800f376:	9b02      	ldr	r3, [sp, #8]
 800f378:	f003 0301 	and.w	r3, r3, #1
 800f37c:	46b8      	mov	r8, r7
 800f37e:	9306      	str	r3, [sp, #24]
 800f380:	4607      	mov	r7, r0
 800f382:	9b04      	ldr	r3, [sp, #16]
 800f384:	4631      	mov	r1, r6
 800f386:	3b01      	subs	r3, #1
 800f388:	4650      	mov	r0, sl
 800f38a:	9301      	str	r3, [sp, #4]
 800f38c:	f7ff fa6b 	bl	800e866 <quorem>
 800f390:	4641      	mov	r1, r8
 800f392:	9002      	str	r0, [sp, #8]
 800f394:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f398:	4650      	mov	r0, sl
 800f39a:	f000 fc5b 	bl	800fc54 <__mcmp>
 800f39e:	463a      	mov	r2, r7
 800f3a0:	9005      	str	r0, [sp, #20]
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 fc71 	bl	800fc8c <__mdiff>
 800f3aa:	68c2      	ldr	r2, [r0, #12]
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	bb02      	cbnz	r2, 800f3f2 <_dtoa_r+0xa7a>
 800f3b0:	4601      	mov	r1, r0
 800f3b2:	4650      	mov	r0, sl
 800f3b4:	f000 fc4e 	bl	800fc54 <__mcmp>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	4620      	mov	r0, r4
 800f3be:	9209      	str	r2, [sp, #36]	; 0x24
 800f3c0:	f000 fa0c 	bl	800f7dc <_Bfree>
 800f3c4:	9b07      	ldr	r3, [sp, #28]
 800f3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3c8:	9d04      	ldr	r5, [sp, #16]
 800f3ca:	ea43 0102 	orr.w	r1, r3, r2
 800f3ce:	9b06      	ldr	r3, [sp, #24]
 800f3d0:	4319      	orrs	r1, r3
 800f3d2:	d110      	bne.n	800f3f6 <_dtoa_r+0xa7e>
 800f3d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f3d8:	d029      	beq.n	800f42e <_dtoa_r+0xab6>
 800f3da:	9b05      	ldr	r3, [sp, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dd02      	ble.n	800f3e6 <_dtoa_r+0xa6e>
 800f3e0:	9b02      	ldr	r3, [sp, #8]
 800f3e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	f883 9000 	strb.w	r9, [r3]
 800f3ec:	e774      	b.n	800f2d8 <_dtoa_r+0x960>
 800f3ee:	4638      	mov	r0, r7
 800f3f0:	e7ba      	b.n	800f368 <_dtoa_r+0x9f0>
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	e7e1      	b.n	800f3ba <_dtoa_r+0xa42>
 800f3f6:	9b05      	ldr	r3, [sp, #20]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	db04      	blt.n	800f406 <_dtoa_r+0xa8e>
 800f3fc:	9907      	ldr	r1, [sp, #28]
 800f3fe:	430b      	orrs	r3, r1
 800f400:	9906      	ldr	r1, [sp, #24]
 800f402:	430b      	orrs	r3, r1
 800f404:	d120      	bne.n	800f448 <_dtoa_r+0xad0>
 800f406:	2a00      	cmp	r2, #0
 800f408:	dded      	ble.n	800f3e6 <_dtoa_r+0xa6e>
 800f40a:	4651      	mov	r1, sl
 800f40c:	2201      	movs	r2, #1
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 fbb4 	bl	800fb7c <__lshift>
 800f414:	4631      	mov	r1, r6
 800f416:	4682      	mov	sl, r0
 800f418:	f000 fc1c 	bl	800fc54 <__mcmp>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	dc03      	bgt.n	800f428 <_dtoa_r+0xab0>
 800f420:	d1e1      	bne.n	800f3e6 <_dtoa_r+0xa6e>
 800f422:	f019 0f01 	tst.w	r9, #1
 800f426:	d0de      	beq.n	800f3e6 <_dtoa_r+0xa6e>
 800f428:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f42c:	d1d8      	bne.n	800f3e0 <_dtoa_r+0xa68>
 800f42e:	9a01      	ldr	r2, [sp, #4]
 800f430:	2339      	movs	r3, #57	; 0x39
 800f432:	7013      	strb	r3, [r2, #0]
 800f434:	462b      	mov	r3, r5
 800f436:	461d      	mov	r5, r3
 800f438:	3b01      	subs	r3, #1
 800f43a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f43e:	2a39      	cmp	r2, #57	; 0x39
 800f440:	d06c      	beq.n	800f51c <_dtoa_r+0xba4>
 800f442:	3201      	adds	r2, #1
 800f444:	701a      	strb	r2, [r3, #0]
 800f446:	e747      	b.n	800f2d8 <_dtoa_r+0x960>
 800f448:	2a00      	cmp	r2, #0
 800f44a:	dd07      	ble.n	800f45c <_dtoa_r+0xae4>
 800f44c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f450:	d0ed      	beq.n	800f42e <_dtoa_r+0xab6>
 800f452:	9a01      	ldr	r2, [sp, #4]
 800f454:	f109 0301 	add.w	r3, r9, #1
 800f458:	7013      	strb	r3, [r2, #0]
 800f45a:	e73d      	b.n	800f2d8 <_dtoa_r+0x960>
 800f45c:	9b04      	ldr	r3, [sp, #16]
 800f45e:	9a08      	ldr	r2, [sp, #32]
 800f460:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f464:	4293      	cmp	r3, r2
 800f466:	d043      	beq.n	800f4f0 <_dtoa_r+0xb78>
 800f468:	4651      	mov	r1, sl
 800f46a:	2300      	movs	r3, #0
 800f46c:	220a      	movs	r2, #10
 800f46e:	4620      	mov	r0, r4
 800f470:	f000 f9d6 	bl	800f820 <__multadd>
 800f474:	45b8      	cmp	r8, r7
 800f476:	4682      	mov	sl, r0
 800f478:	f04f 0300 	mov.w	r3, #0
 800f47c:	f04f 020a 	mov.w	r2, #10
 800f480:	4641      	mov	r1, r8
 800f482:	4620      	mov	r0, r4
 800f484:	d107      	bne.n	800f496 <_dtoa_r+0xb1e>
 800f486:	f000 f9cb 	bl	800f820 <__multadd>
 800f48a:	4680      	mov	r8, r0
 800f48c:	4607      	mov	r7, r0
 800f48e:	9b04      	ldr	r3, [sp, #16]
 800f490:	3301      	adds	r3, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	e775      	b.n	800f382 <_dtoa_r+0xa0a>
 800f496:	f000 f9c3 	bl	800f820 <__multadd>
 800f49a:	4639      	mov	r1, r7
 800f49c:	4680      	mov	r8, r0
 800f49e:	2300      	movs	r3, #0
 800f4a0:	220a      	movs	r2, #10
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f000 f9bc 	bl	800f820 <__multadd>
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	e7f0      	b.n	800f48e <_dtoa_r+0xb16>
 800f4ac:	9b04      	ldr	r3, [sp, #16]
 800f4ae:	9301      	str	r3, [sp, #4]
 800f4b0:	9d00      	ldr	r5, [sp, #0]
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4650      	mov	r0, sl
 800f4b6:	f7ff f9d6 	bl	800e866 <quorem>
 800f4ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f4be:	9b00      	ldr	r3, [sp, #0]
 800f4c0:	f805 9b01 	strb.w	r9, [r5], #1
 800f4c4:	1aea      	subs	r2, r5, r3
 800f4c6:	9b01      	ldr	r3, [sp, #4]
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	dd07      	ble.n	800f4dc <_dtoa_r+0xb64>
 800f4cc:	4651      	mov	r1, sl
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	220a      	movs	r2, #10
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f000 f9a4 	bl	800f820 <__multadd>
 800f4d8:	4682      	mov	sl, r0
 800f4da:	e7ea      	b.n	800f4b2 <_dtoa_r+0xb3a>
 800f4dc:	9b01      	ldr	r3, [sp, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bfc8      	it	gt
 800f4e2:	461d      	movgt	r5, r3
 800f4e4:	9b00      	ldr	r3, [sp, #0]
 800f4e6:	bfd8      	it	le
 800f4e8:	2501      	movle	r5, #1
 800f4ea:	441d      	add	r5, r3
 800f4ec:	f04f 0800 	mov.w	r8, #0
 800f4f0:	4651      	mov	r1, sl
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fb41 	bl	800fb7c <__lshift>
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4682      	mov	sl, r0
 800f4fe:	f000 fba9 	bl	800fc54 <__mcmp>
 800f502:	2800      	cmp	r0, #0
 800f504:	dc96      	bgt.n	800f434 <_dtoa_r+0xabc>
 800f506:	d102      	bne.n	800f50e <_dtoa_r+0xb96>
 800f508:	f019 0f01 	tst.w	r9, #1
 800f50c:	d192      	bne.n	800f434 <_dtoa_r+0xabc>
 800f50e:	462b      	mov	r3, r5
 800f510:	461d      	mov	r5, r3
 800f512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f516:	2a30      	cmp	r2, #48	; 0x30
 800f518:	d0fa      	beq.n	800f510 <_dtoa_r+0xb98>
 800f51a:	e6dd      	b.n	800f2d8 <_dtoa_r+0x960>
 800f51c:	9a00      	ldr	r2, [sp, #0]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d189      	bne.n	800f436 <_dtoa_r+0xabe>
 800f522:	f10b 0b01 	add.w	fp, fp, #1
 800f526:	2331      	movs	r3, #49	; 0x31
 800f528:	e796      	b.n	800f458 <_dtoa_r+0xae0>
 800f52a:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <_dtoa_r+0xbdc>)
 800f52c:	f7ff ba99 	b.w	800ea62 <_dtoa_r+0xea>
 800f530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f532:	2b00      	cmp	r3, #0
 800f534:	f47f aa6d 	bne.w	800ea12 <_dtoa_r+0x9a>
 800f538:	4b07      	ldr	r3, [pc, #28]	; (800f558 <_dtoa_r+0xbe0>)
 800f53a:	f7ff ba92 	b.w	800ea62 <_dtoa_r+0xea>
 800f53e:	9b01      	ldr	r3, [sp, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	dcb5      	bgt.n	800f4b0 <_dtoa_r+0xb38>
 800f544:	9b07      	ldr	r3, [sp, #28]
 800f546:	2b02      	cmp	r3, #2
 800f548:	f73f aeb1 	bgt.w	800f2ae <_dtoa_r+0x936>
 800f54c:	e7b0      	b.n	800f4b0 <_dtoa_r+0xb38>
 800f54e:	bf00      	nop
 800f550:	08011fe4 	.word	0x08011fe4
 800f554:	08011f44 	.word	0x08011f44
 800f558:	08011f68 	.word	0x08011f68

0800f55c <_free_r>:
 800f55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f55e:	2900      	cmp	r1, #0
 800f560:	d044      	beq.n	800f5ec <_free_r+0x90>
 800f562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f566:	9001      	str	r0, [sp, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f1a1 0404 	sub.w	r4, r1, #4
 800f56e:	bfb8      	it	lt
 800f570:	18e4      	addlt	r4, r4, r3
 800f572:	f000 f8e7 	bl	800f744 <__malloc_lock>
 800f576:	4a1e      	ldr	r2, [pc, #120]	; (800f5f0 <_free_r+0x94>)
 800f578:	9801      	ldr	r0, [sp, #4]
 800f57a:	6813      	ldr	r3, [r2, #0]
 800f57c:	b933      	cbnz	r3, 800f58c <_free_r+0x30>
 800f57e:	6063      	str	r3, [r4, #4]
 800f580:	6014      	str	r4, [r2, #0]
 800f582:	b003      	add	sp, #12
 800f584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f588:	f000 b8e2 	b.w	800f750 <__malloc_unlock>
 800f58c:	42a3      	cmp	r3, r4
 800f58e:	d908      	bls.n	800f5a2 <_free_r+0x46>
 800f590:	6825      	ldr	r5, [r4, #0]
 800f592:	1961      	adds	r1, r4, r5
 800f594:	428b      	cmp	r3, r1
 800f596:	bf01      	itttt	eq
 800f598:	6819      	ldreq	r1, [r3, #0]
 800f59a:	685b      	ldreq	r3, [r3, #4]
 800f59c:	1949      	addeq	r1, r1, r5
 800f59e:	6021      	streq	r1, [r4, #0]
 800f5a0:	e7ed      	b.n	800f57e <_free_r+0x22>
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	b10b      	cbz	r3, 800f5ac <_free_r+0x50>
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	d9fa      	bls.n	800f5a2 <_free_r+0x46>
 800f5ac:	6811      	ldr	r1, [r2, #0]
 800f5ae:	1855      	adds	r5, r2, r1
 800f5b0:	42a5      	cmp	r5, r4
 800f5b2:	d10b      	bne.n	800f5cc <_free_r+0x70>
 800f5b4:	6824      	ldr	r4, [r4, #0]
 800f5b6:	4421      	add	r1, r4
 800f5b8:	1854      	adds	r4, r2, r1
 800f5ba:	42a3      	cmp	r3, r4
 800f5bc:	6011      	str	r1, [r2, #0]
 800f5be:	d1e0      	bne.n	800f582 <_free_r+0x26>
 800f5c0:	681c      	ldr	r4, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	6053      	str	r3, [r2, #4]
 800f5c6:	440c      	add	r4, r1
 800f5c8:	6014      	str	r4, [r2, #0]
 800f5ca:	e7da      	b.n	800f582 <_free_r+0x26>
 800f5cc:	d902      	bls.n	800f5d4 <_free_r+0x78>
 800f5ce:	230c      	movs	r3, #12
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	e7d6      	b.n	800f582 <_free_r+0x26>
 800f5d4:	6825      	ldr	r5, [r4, #0]
 800f5d6:	1961      	adds	r1, r4, r5
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	bf04      	itt	eq
 800f5dc:	6819      	ldreq	r1, [r3, #0]
 800f5de:	685b      	ldreq	r3, [r3, #4]
 800f5e0:	6063      	str	r3, [r4, #4]
 800f5e2:	bf04      	itt	eq
 800f5e4:	1949      	addeq	r1, r1, r5
 800f5e6:	6021      	streq	r1, [r4, #0]
 800f5e8:	6054      	str	r4, [r2, #4]
 800f5ea:	e7ca      	b.n	800f582 <_free_r+0x26>
 800f5ec:	b003      	add	sp, #12
 800f5ee:	bd30      	pop	{r4, r5, pc}
 800f5f0:	2000ee14 	.word	0x2000ee14

0800f5f4 <malloc>:
 800f5f4:	4b02      	ldr	r3, [pc, #8]	; (800f600 <malloc+0xc>)
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	f000 b823 	b.w	800f644 <_malloc_r>
 800f5fe:	bf00      	nop
 800f600:	20000084 	.word	0x20000084

0800f604 <sbrk_aligned>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	4e0e      	ldr	r6, [pc, #56]	; (800f640 <sbrk_aligned+0x3c>)
 800f608:	460c      	mov	r4, r1
 800f60a:	6831      	ldr	r1, [r6, #0]
 800f60c:	4605      	mov	r5, r0
 800f60e:	b911      	cbnz	r1, 800f616 <sbrk_aligned+0x12>
 800f610:	f000 fe40 	bl	8010294 <_sbrk_r>
 800f614:	6030      	str	r0, [r6, #0]
 800f616:	4621      	mov	r1, r4
 800f618:	4628      	mov	r0, r5
 800f61a:	f000 fe3b 	bl	8010294 <_sbrk_r>
 800f61e:	1c43      	adds	r3, r0, #1
 800f620:	d00a      	beq.n	800f638 <sbrk_aligned+0x34>
 800f622:	1cc4      	adds	r4, r0, #3
 800f624:	f024 0403 	bic.w	r4, r4, #3
 800f628:	42a0      	cmp	r0, r4
 800f62a:	d007      	beq.n	800f63c <sbrk_aligned+0x38>
 800f62c:	1a21      	subs	r1, r4, r0
 800f62e:	4628      	mov	r0, r5
 800f630:	f000 fe30 	bl	8010294 <_sbrk_r>
 800f634:	3001      	adds	r0, #1
 800f636:	d101      	bne.n	800f63c <sbrk_aligned+0x38>
 800f638:	f04f 34ff 	mov.w	r4, #4294967295
 800f63c:	4620      	mov	r0, r4
 800f63e:	bd70      	pop	{r4, r5, r6, pc}
 800f640:	2000ee18 	.word	0x2000ee18

0800f644 <_malloc_r>:
 800f644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f648:	1ccd      	adds	r5, r1, #3
 800f64a:	f025 0503 	bic.w	r5, r5, #3
 800f64e:	3508      	adds	r5, #8
 800f650:	2d0c      	cmp	r5, #12
 800f652:	bf38      	it	cc
 800f654:	250c      	movcc	r5, #12
 800f656:	2d00      	cmp	r5, #0
 800f658:	4607      	mov	r7, r0
 800f65a:	db01      	blt.n	800f660 <_malloc_r+0x1c>
 800f65c:	42a9      	cmp	r1, r5
 800f65e:	d905      	bls.n	800f66c <_malloc_r+0x28>
 800f660:	230c      	movs	r3, #12
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	2600      	movs	r6, #0
 800f666:	4630      	mov	r0, r6
 800f668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f740 <_malloc_r+0xfc>
 800f670:	f000 f868 	bl	800f744 <__malloc_lock>
 800f674:	f8d8 3000 	ldr.w	r3, [r8]
 800f678:	461c      	mov	r4, r3
 800f67a:	bb5c      	cbnz	r4, 800f6d4 <_malloc_r+0x90>
 800f67c:	4629      	mov	r1, r5
 800f67e:	4638      	mov	r0, r7
 800f680:	f7ff ffc0 	bl	800f604 <sbrk_aligned>
 800f684:	1c43      	adds	r3, r0, #1
 800f686:	4604      	mov	r4, r0
 800f688:	d155      	bne.n	800f736 <_malloc_r+0xf2>
 800f68a:	f8d8 4000 	ldr.w	r4, [r8]
 800f68e:	4626      	mov	r6, r4
 800f690:	2e00      	cmp	r6, #0
 800f692:	d145      	bne.n	800f720 <_malloc_r+0xdc>
 800f694:	2c00      	cmp	r4, #0
 800f696:	d048      	beq.n	800f72a <_malloc_r+0xe6>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	4631      	mov	r1, r6
 800f69c:	4638      	mov	r0, r7
 800f69e:	eb04 0903 	add.w	r9, r4, r3
 800f6a2:	f000 fdf7 	bl	8010294 <_sbrk_r>
 800f6a6:	4581      	cmp	r9, r0
 800f6a8:	d13f      	bne.n	800f72a <_malloc_r+0xe6>
 800f6aa:	6821      	ldr	r1, [r4, #0]
 800f6ac:	1a6d      	subs	r5, r5, r1
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f7ff ffa7 	bl	800f604 <sbrk_aligned>
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	d037      	beq.n	800f72a <_malloc_r+0xe6>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	442b      	add	r3, r5
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d038      	beq.n	800f73a <_malloc_r+0xf6>
 800f6c8:	685a      	ldr	r2, [r3, #4]
 800f6ca:	42a2      	cmp	r2, r4
 800f6cc:	d12b      	bne.n	800f726 <_malloc_r+0xe2>
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	605a      	str	r2, [r3, #4]
 800f6d2:	e00f      	b.n	800f6f4 <_malloc_r+0xb0>
 800f6d4:	6822      	ldr	r2, [r4, #0]
 800f6d6:	1b52      	subs	r2, r2, r5
 800f6d8:	d41f      	bmi.n	800f71a <_malloc_r+0xd6>
 800f6da:	2a0b      	cmp	r2, #11
 800f6dc:	d917      	bls.n	800f70e <_malloc_r+0xca>
 800f6de:	1961      	adds	r1, r4, r5
 800f6e0:	42a3      	cmp	r3, r4
 800f6e2:	6025      	str	r5, [r4, #0]
 800f6e4:	bf18      	it	ne
 800f6e6:	6059      	strne	r1, [r3, #4]
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	bf08      	it	eq
 800f6ec:	f8c8 1000 	streq.w	r1, [r8]
 800f6f0:	5162      	str	r2, [r4, r5]
 800f6f2:	604b      	str	r3, [r1, #4]
 800f6f4:	4638      	mov	r0, r7
 800f6f6:	f104 060b 	add.w	r6, r4, #11
 800f6fa:	f000 f829 	bl	800f750 <__malloc_unlock>
 800f6fe:	f026 0607 	bic.w	r6, r6, #7
 800f702:	1d23      	adds	r3, r4, #4
 800f704:	1af2      	subs	r2, r6, r3
 800f706:	d0ae      	beq.n	800f666 <_malloc_r+0x22>
 800f708:	1b9b      	subs	r3, r3, r6
 800f70a:	50a3      	str	r3, [r4, r2]
 800f70c:	e7ab      	b.n	800f666 <_malloc_r+0x22>
 800f70e:	42a3      	cmp	r3, r4
 800f710:	6862      	ldr	r2, [r4, #4]
 800f712:	d1dd      	bne.n	800f6d0 <_malloc_r+0x8c>
 800f714:	f8c8 2000 	str.w	r2, [r8]
 800f718:	e7ec      	b.n	800f6f4 <_malloc_r+0xb0>
 800f71a:	4623      	mov	r3, r4
 800f71c:	6864      	ldr	r4, [r4, #4]
 800f71e:	e7ac      	b.n	800f67a <_malloc_r+0x36>
 800f720:	4634      	mov	r4, r6
 800f722:	6876      	ldr	r6, [r6, #4]
 800f724:	e7b4      	b.n	800f690 <_malloc_r+0x4c>
 800f726:	4613      	mov	r3, r2
 800f728:	e7cc      	b.n	800f6c4 <_malloc_r+0x80>
 800f72a:	230c      	movs	r3, #12
 800f72c:	603b      	str	r3, [r7, #0]
 800f72e:	4638      	mov	r0, r7
 800f730:	f000 f80e 	bl	800f750 <__malloc_unlock>
 800f734:	e797      	b.n	800f666 <_malloc_r+0x22>
 800f736:	6025      	str	r5, [r4, #0]
 800f738:	e7dc      	b.n	800f6f4 <_malloc_r+0xb0>
 800f73a:	605b      	str	r3, [r3, #4]
 800f73c:	deff      	udf	#255	; 0xff
 800f73e:	bf00      	nop
 800f740:	2000ee14 	.word	0x2000ee14

0800f744 <__malloc_lock>:
 800f744:	4801      	ldr	r0, [pc, #4]	; (800f74c <__malloc_lock+0x8>)
 800f746:	f7ff b87e 	b.w	800e846 <__retarget_lock_acquire_recursive>
 800f74a:	bf00      	nop
 800f74c:	2000ee10 	.word	0x2000ee10

0800f750 <__malloc_unlock>:
 800f750:	4801      	ldr	r0, [pc, #4]	; (800f758 <__malloc_unlock+0x8>)
 800f752:	f7ff b879 	b.w	800e848 <__retarget_lock_release_recursive>
 800f756:	bf00      	nop
 800f758:	2000ee10 	.word	0x2000ee10

0800f75c <_Balloc>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	69c6      	ldr	r6, [r0, #28]
 800f760:	4604      	mov	r4, r0
 800f762:	460d      	mov	r5, r1
 800f764:	b976      	cbnz	r6, 800f784 <_Balloc+0x28>
 800f766:	2010      	movs	r0, #16
 800f768:	f7ff ff44 	bl	800f5f4 <malloc>
 800f76c:	4602      	mov	r2, r0
 800f76e:	61e0      	str	r0, [r4, #28]
 800f770:	b920      	cbnz	r0, 800f77c <_Balloc+0x20>
 800f772:	4b18      	ldr	r3, [pc, #96]	; (800f7d4 <_Balloc+0x78>)
 800f774:	4818      	ldr	r0, [pc, #96]	; (800f7d8 <_Balloc+0x7c>)
 800f776:	216b      	movs	r1, #107	; 0x6b
 800f778:	f000 fd9c 	bl	80102b4 <__assert_func>
 800f77c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f780:	6006      	str	r6, [r0, #0]
 800f782:	60c6      	str	r6, [r0, #12]
 800f784:	69e6      	ldr	r6, [r4, #28]
 800f786:	68f3      	ldr	r3, [r6, #12]
 800f788:	b183      	cbz	r3, 800f7ac <_Balloc+0x50>
 800f78a:	69e3      	ldr	r3, [r4, #28]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f792:	b9b8      	cbnz	r0, 800f7c4 <_Balloc+0x68>
 800f794:	2101      	movs	r1, #1
 800f796:	fa01 f605 	lsl.w	r6, r1, r5
 800f79a:	1d72      	adds	r2, r6, #5
 800f79c:	0092      	lsls	r2, r2, #2
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fda6 	bl	80102f0 <_calloc_r>
 800f7a4:	b160      	cbz	r0, 800f7c0 <_Balloc+0x64>
 800f7a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7aa:	e00e      	b.n	800f7ca <_Balloc+0x6e>
 800f7ac:	2221      	movs	r2, #33	; 0x21
 800f7ae:	2104      	movs	r1, #4
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 fd9d 	bl	80102f0 <_calloc_r>
 800f7b6:	69e3      	ldr	r3, [r4, #28]
 800f7b8:	60f0      	str	r0, [r6, #12]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1e4      	bne.n	800f78a <_Balloc+0x2e>
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	6802      	ldr	r2, [r0, #0]
 800f7c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7d0:	e7f7      	b.n	800f7c2 <_Balloc+0x66>
 800f7d2:	bf00      	nop
 800f7d4:	08011f75 	.word	0x08011f75
 800f7d8:	08011ff5 	.word	0x08011ff5

0800f7dc <_Bfree>:
 800f7dc:	b570      	push	{r4, r5, r6, lr}
 800f7de:	69c6      	ldr	r6, [r0, #28]
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	b976      	cbnz	r6, 800f804 <_Bfree+0x28>
 800f7e6:	2010      	movs	r0, #16
 800f7e8:	f7ff ff04 	bl	800f5f4 <malloc>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	61e8      	str	r0, [r5, #28]
 800f7f0:	b920      	cbnz	r0, 800f7fc <_Bfree+0x20>
 800f7f2:	4b09      	ldr	r3, [pc, #36]	; (800f818 <_Bfree+0x3c>)
 800f7f4:	4809      	ldr	r0, [pc, #36]	; (800f81c <_Bfree+0x40>)
 800f7f6:	218f      	movs	r1, #143	; 0x8f
 800f7f8:	f000 fd5c 	bl	80102b4 <__assert_func>
 800f7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f800:	6006      	str	r6, [r0, #0]
 800f802:	60c6      	str	r6, [r0, #12]
 800f804:	b13c      	cbz	r4, 800f816 <_Bfree+0x3a>
 800f806:	69eb      	ldr	r3, [r5, #28]
 800f808:	6862      	ldr	r2, [r4, #4]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f810:	6021      	str	r1, [r4, #0]
 800f812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	08011f75 	.word	0x08011f75
 800f81c:	08011ff5 	.word	0x08011ff5

0800f820 <__multadd>:
 800f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f824:	690d      	ldr	r5, [r1, #16]
 800f826:	4607      	mov	r7, r0
 800f828:	460c      	mov	r4, r1
 800f82a:	461e      	mov	r6, r3
 800f82c:	f101 0c14 	add.w	ip, r1, #20
 800f830:	2000      	movs	r0, #0
 800f832:	f8dc 3000 	ldr.w	r3, [ip]
 800f836:	b299      	uxth	r1, r3
 800f838:	fb02 6101 	mla	r1, r2, r1, r6
 800f83c:	0c1e      	lsrs	r6, r3, #16
 800f83e:	0c0b      	lsrs	r3, r1, #16
 800f840:	fb02 3306 	mla	r3, r2, r6, r3
 800f844:	b289      	uxth	r1, r1
 800f846:	3001      	adds	r0, #1
 800f848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f84c:	4285      	cmp	r5, r0
 800f84e:	f84c 1b04 	str.w	r1, [ip], #4
 800f852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f856:	dcec      	bgt.n	800f832 <__multadd+0x12>
 800f858:	b30e      	cbz	r6, 800f89e <__multadd+0x7e>
 800f85a:	68a3      	ldr	r3, [r4, #8]
 800f85c:	42ab      	cmp	r3, r5
 800f85e:	dc19      	bgt.n	800f894 <__multadd+0x74>
 800f860:	6861      	ldr	r1, [r4, #4]
 800f862:	4638      	mov	r0, r7
 800f864:	3101      	adds	r1, #1
 800f866:	f7ff ff79 	bl	800f75c <_Balloc>
 800f86a:	4680      	mov	r8, r0
 800f86c:	b928      	cbnz	r0, 800f87a <__multadd+0x5a>
 800f86e:	4602      	mov	r2, r0
 800f870:	4b0c      	ldr	r3, [pc, #48]	; (800f8a4 <__multadd+0x84>)
 800f872:	480d      	ldr	r0, [pc, #52]	; (800f8a8 <__multadd+0x88>)
 800f874:	21ba      	movs	r1, #186	; 0xba
 800f876:	f000 fd1d 	bl	80102b4 <__assert_func>
 800f87a:	6922      	ldr	r2, [r4, #16]
 800f87c:	3202      	adds	r2, #2
 800f87e:	f104 010c 	add.w	r1, r4, #12
 800f882:	0092      	lsls	r2, r2, #2
 800f884:	300c      	adds	r0, #12
 800f886:	f7fe ffe0 	bl	800e84a <memcpy>
 800f88a:	4621      	mov	r1, r4
 800f88c:	4638      	mov	r0, r7
 800f88e:	f7ff ffa5 	bl	800f7dc <_Bfree>
 800f892:	4644      	mov	r4, r8
 800f894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f898:	3501      	adds	r5, #1
 800f89a:	615e      	str	r6, [r3, #20]
 800f89c:	6125      	str	r5, [r4, #16]
 800f89e:	4620      	mov	r0, r4
 800f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a4:	08011fe4 	.word	0x08011fe4
 800f8a8:	08011ff5 	.word	0x08011ff5

0800f8ac <__hi0bits>:
 800f8ac:	0c03      	lsrs	r3, r0, #16
 800f8ae:	041b      	lsls	r3, r3, #16
 800f8b0:	b9d3      	cbnz	r3, 800f8e8 <__hi0bits+0x3c>
 800f8b2:	0400      	lsls	r0, r0, #16
 800f8b4:	2310      	movs	r3, #16
 800f8b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8ba:	bf04      	itt	eq
 800f8bc:	0200      	lsleq	r0, r0, #8
 800f8be:	3308      	addeq	r3, #8
 800f8c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f8c4:	bf04      	itt	eq
 800f8c6:	0100      	lsleq	r0, r0, #4
 800f8c8:	3304      	addeq	r3, #4
 800f8ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f8ce:	bf04      	itt	eq
 800f8d0:	0080      	lsleq	r0, r0, #2
 800f8d2:	3302      	addeq	r3, #2
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	db05      	blt.n	800f8e4 <__hi0bits+0x38>
 800f8d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8dc:	f103 0301 	add.w	r3, r3, #1
 800f8e0:	bf08      	it	eq
 800f8e2:	2320      	moveq	r3, #32
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	4770      	bx	lr
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	e7e4      	b.n	800f8b6 <__hi0bits+0xa>

0800f8ec <__lo0bits>:
 800f8ec:	6803      	ldr	r3, [r0, #0]
 800f8ee:	f013 0207 	ands.w	r2, r3, #7
 800f8f2:	d00c      	beq.n	800f90e <__lo0bits+0x22>
 800f8f4:	07d9      	lsls	r1, r3, #31
 800f8f6:	d422      	bmi.n	800f93e <__lo0bits+0x52>
 800f8f8:	079a      	lsls	r2, r3, #30
 800f8fa:	bf49      	itett	mi
 800f8fc:	085b      	lsrmi	r3, r3, #1
 800f8fe:	089b      	lsrpl	r3, r3, #2
 800f900:	6003      	strmi	r3, [r0, #0]
 800f902:	2201      	movmi	r2, #1
 800f904:	bf5c      	itt	pl
 800f906:	6003      	strpl	r3, [r0, #0]
 800f908:	2202      	movpl	r2, #2
 800f90a:	4610      	mov	r0, r2
 800f90c:	4770      	bx	lr
 800f90e:	b299      	uxth	r1, r3
 800f910:	b909      	cbnz	r1, 800f916 <__lo0bits+0x2a>
 800f912:	0c1b      	lsrs	r3, r3, #16
 800f914:	2210      	movs	r2, #16
 800f916:	b2d9      	uxtb	r1, r3
 800f918:	b909      	cbnz	r1, 800f91e <__lo0bits+0x32>
 800f91a:	3208      	adds	r2, #8
 800f91c:	0a1b      	lsrs	r3, r3, #8
 800f91e:	0719      	lsls	r1, r3, #28
 800f920:	bf04      	itt	eq
 800f922:	091b      	lsreq	r3, r3, #4
 800f924:	3204      	addeq	r2, #4
 800f926:	0799      	lsls	r1, r3, #30
 800f928:	bf04      	itt	eq
 800f92a:	089b      	lsreq	r3, r3, #2
 800f92c:	3202      	addeq	r2, #2
 800f92e:	07d9      	lsls	r1, r3, #31
 800f930:	d403      	bmi.n	800f93a <__lo0bits+0x4e>
 800f932:	085b      	lsrs	r3, r3, #1
 800f934:	f102 0201 	add.w	r2, r2, #1
 800f938:	d003      	beq.n	800f942 <__lo0bits+0x56>
 800f93a:	6003      	str	r3, [r0, #0]
 800f93c:	e7e5      	b.n	800f90a <__lo0bits+0x1e>
 800f93e:	2200      	movs	r2, #0
 800f940:	e7e3      	b.n	800f90a <__lo0bits+0x1e>
 800f942:	2220      	movs	r2, #32
 800f944:	e7e1      	b.n	800f90a <__lo0bits+0x1e>
	...

0800f948 <__i2b>:
 800f948:	b510      	push	{r4, lr}
 800f94a:	460c      	mov	r4, r1
 800f94c:	2101      	movs	r1, #1
 800f94e:	f7ff ff05 	bl	800f75c <_Balloc>
 800f952:	4602      	mov	r2, r0
 800f954:	b928      	cbnz	r0, 800f962 <__i2b+0x1a>
 800f956:	4b05      	ldr	r3, [pc, #20]	; (800f96c <__i2b+0x24>)
 800f958:	4805      	ldr	r0, [pc, #20]	; (800f970 <__i2b+0x28>)
 800f95a:	f240 1145 	movw	r1, #325	; 0x145
 800f95e:	f000 fca9 	bl	80102b4 <__assert_func>
 800f962:	2301      	movs	r3, #1
 800f964:	6144      	str	r4, [r0, #20]
 800f966:	6103      	str	r3, [r0, #16]
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	bf00      	nop
 800f96c:	08011fe4 	.word	0x08011fe4
 800f970:	08011ff5 	.word	0x08011ff5

0800f974 <__multiply>:
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	4691      	mov	r9, r2
 800f97a:	690a      	ldr	r2, [r1, #16]
 800f97c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f980:	429a      	cmp	r2, r3
 800f982:	bfb8      	it	lt
 800f984:	460b      	movlt	r3, r1
 800f986:	460c      	mov	r4, r1
 800f988:	bfbc      	itt	lt
 800f98a:	464c      	movlt	r4, r9
 800f98c:	4699      	movlt	r9, r3
 800f98e:	6927      	ldr	r7, [r4, #16]
 800f990:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f994:	68a3      	ldr	r3, [r4, #8]
 800f996:	6861      	ldr	r1, [r4, #4]
 800f998:	eb07 060a 	add.w	r6, r7, sl
 800f99c:	42b3      	cmp	r3, r6
 800f99e:	b085      	sub	sp, #20
 800f9a0:	bfb8      	it	lt
 800f9a2:	3101      	addlt	r1, #1
 800f9a4:	f7ff feda 	bl	800f75c <_Balloc>
 800f9a8:	b930      	cbnz	r0, 800f9b8 <__multiply+0x44>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4b44      	ldr	r3, [pc, #272]	; (800fac0 <__multiply+0x14c>)
 800f9ae:	4845      	ldr	r0, [pc, #276]	; (800fac4 <__multiply+0x150>)
 800f9b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f9b4:	f000 fc7e 	bl	80102b4 <__assert_func>
 800f9b8:	f100 0514 	add.w	r5, r0, #20
 800f9bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9c0:	462b      	mov	r3, r5
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	4543      	cmp	r3, r8
 800f9c6:	d321      	bcc.n	800fa0c <__multiply+0x98>
 800f9c8:	f104 0314 	add.w	r3, r4, #20
 800f9cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f9d0:	f109 0314 	add.w	r3, r9, #20
 800f9d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f9d8:	9202      	str	r2, [sp, #8]
 800f9da:	1b3a      	subs	r2, r7, r4
 800f9dc:	3a15      	subs	r2, #21
 800f9de:	f022 0203 	bic.w	r2, r2, #3
 800f9e2:	3204      	adds	r2, #4
 800f9e4:	f104 0115 	add.w	r1, r4, #21
 800f9e8:	428f      	cmp	r7, r1
 800f9ea:	bf38      	it	cc
 800f9ec:	2204      	movcc	r2, #4
 800f9ee:	9201      	str	r2, [sp, #4]
 800f9f0:	9a02      	ldr	r2, [sp, #8]
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d80c      	bhi.n	800fa12 <__multiply+0x9e>
 800f9f8:	2e00      	cmp	r6, #0
 800f9fa:	dd03      	ble.n	800fa04 <__multiply+0x90>
 800f9fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d05b      	beq.n	800fabc <__multiply+0x148>
 800fa04:	6106      	str	r6, [r0, #16]
 800fa06:	b005      	add	sp, #20
 800fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0c:	f843 2b04 	str.w	r2, [r3], #4
 800fa10:	e7d8      	b.n	800f9c4 <__multiply+0x50>
 800fa12:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa16:	f1ba 0f00 	cmp.w	sl, #0
 800fa1a:	d024      	beq.n	800fa66 <__multiply+0xf2>
 800fa1c:	f104 0e14 	add.w	lr, r4, #20
 800fa20:	46a9      	mov	r9, r5
 800fa22:	f04f 0c00 	mov.w	ip, #0
 800fa26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa2a:	f8d9 1000 	ldr.w	r1, [r9]
 800fa2e:	fa1f fb82 	uxth.w	fp, r2
 800fa32:	b289      	uxth	r1, r1
 800fa34:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa3c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa40:	4461      	add	r1, ip
 800fa42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa46:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa4e:	b289      	uxth	r1, r1
 800fa50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa54:	4577      	cmp	r7, lr
 800fa56:	f849 1b04 	str.w	r1, [r9], #4
 800fa5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa5e:	d8e2      	bhi.n	800fa26 <__multiply+0xb2>
 800fa60:	9a01      	ldr	r2, [sp, #4]
 800fa62:	f845 c002 	str.w	ip, [r5, r2]
 800fa66:	9a03      	ldr	r2, [sp, #12]
 800fa68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	f1b9 0f00 	cmp.w	r9, #0
 800fa72:	d021      	beq.n	800fab8 <__multiply+0x144>
 800fa74:	6829      	ldr	r1, [r5, #0]
 800fa76:	f104 0c14 	add.w	ip, r4, #20
 800fa7a:	46ae      	mov	lr, r5
 800fa7c:	f04f 0a00 	mov.w	sl, #0
 800fa80:	f8bc b000 	ldrh.w	fp, [ip]
 800fa84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa88:	fb09 220b 	mla	r2, r9, fp, r2
 800fa8c:	4452      	add	r2, sl
 800fa8e:	b289      	uxth	r1, r1
 800fa90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa94:	f84e 1b04 	str.w	r1, [lr], #4
 800fa98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fa9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800faa0:	f8be 1000 	ldrh.w	r1, [lr]
 800faa4:	fb09 110a 	mla	r1, r9, sl, r1
 800faa8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800faac:	4567      	cmp	r7, ip
 800faae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fab2:	d8e5      	bhi.n	800fa80 <__multiply+0x10c>
 800fab4:	9a01      	ldr	r2, [sp, #4]
 800fab6:	50a9      	str	r1, [r5, r2]
 800fab8:	3504      	adds	r5, #4
 800faba:	e799      	b.n	800f9f0 <__multiply+0x7c>
 800fabc:	3e01      	subs	r6, #1
 800fabe:	e79b      	b.n	800f9f8 <__multiply+0x84>
 800fac0:	08011fe4 	.word	0x08011fe4
 800fac4:	08011ff5 	.word	0x08011ff5

0800fac8 <__pow5mult>:
 800fac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800facc:	4615      	mov	r5, r2
 800face:	f012 0203 	ands.w	r2, r2, #3
 800fad2:	4606      	mov	r6, r0
 800fad4:	460f      	mov	r7, r1
 800fad6:	d007      	beq.n	800fae8 <__pow5mult+0x20>
 800fad8:	4c25      	ldr	r4, [pc, #148]	; (800fb70 <__pow5mult+0xa8>)
 800fada:	3a01      	subs	r2, #1
 800fadc:	2300      	movs	r3, #0
 800fade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fae2:	f7ff fe9d 	bl	800f820 <__multadd>
 800fae6:	4607      	mov	r7, r0
 800fae8:	10ad      	asrs	r5, r5, #2
 800faea:	d03d      	beq.n	800fb68 <__pow5mult+0xa0>
 800faec:	69f4      	ldr	r4, [r6, #28]
 800faee:	b97c      	cbnz	r4, 800fb10 <__pow5mult+0x48>
 800faf0:	2010      	movs	r0, #16
 800faf2:	f7ff fd7f 	bl	800f5f4 <malloc>
 800faf6:	4602      	mov	r2, r0
 800faf8:	61f0      	str	r0, [r6, #28]
 800fafa:	b928      	cbnz	r0, 800fb08 <__pow5mult+0x40>
 800fafc:	4b1d      	ldr	r3, [pc, #116]	; (800fb74 <__pow5mult+0xac>)
 800fafe:	481e      	ldr	r0, [pc, #120]	; (800fb78 <__pow5mult+0xb0>)
 800fb00:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fb04:	f000 fbd6 	bl	80102b4 <__assert_func>
 800fb08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb0c:	6004      	str	r4, [r0, #0]
 800fb0e:	60c4      	str	r4, [r0, #12]
 800fb10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fb14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb18:	b94c      	cbnz	r4, 800fb2e <__pow5mult+0x66>
 800fb1a:	f240 2171 	movw	r1, #625	; 0x271
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f7ff ff12 	bl	800f948 <__i2b>
 800fb24:	2300      	movs	r3, #0
 800fb26:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	6003      	str	r3, [r0, #0]
 800fb2e:	f04f 0900 	mov.w	r9, #0
 800fb32:	07eb      	lsls	r3, r5, #31
 800fb34:	d50a      	bpl.n	800fb4c <__pow5mult+0x84>
 800fb36:	4639      	mov	r1, r7
 800fb38:	4622      	mov	r2, r4
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f7ff ff1a 	bl	800f974 <__multiply>
 800fb40:	4639      	mov	r1, r7
 800fb42:	4680      	mov	r8, r0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7ff fe49 	bl	800f7dc <_Bfree>
 800fb4a:	4647      	mov	r7, r8
 800fb4c:	106d      	asrs	r5, r5, #1
 800fb4e:	d00b      	beq.n	800fb68 <__pow5mult+0xa0>
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	b938      	cbnz	r0, 800fb64 <__pow5mult+0x9c>
 800fb54:	4622      	mov	r2, r4
 800fb56:	4621      	mov	r1, r4
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7ff ff0b 	bl	800f974 <__multiply>
 800fb5e:	6020      	str	r0, [r4, #0]
 800fb60:	f8c0 9000 	str.w	r9, [r0]
 800fb64:	4604      	mov	r4, r0
 800fb66:	e7e4      	b.n	800fb32 <__pow5mult+0x6a>
 800fb68:	4638      	mov	r0, r7
 800fb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb6e:	bf00      	nop
 800fb70:	08012140 	.word	0x08012140
 800fb74:	08011f75 	.word	0x08011f75
 800fb78:	08011ff5 	.word	0x08011ff5

0800fb7c <__lshift>:
 800fb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb80:	460c      	mov	r4, r1
 800fb82:	6849      	ldr	r1, [r1, #4]
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb8a:	68a3      	ldr	r3, [r4, #8]
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	4691      	mov	r9, r2
 800fb90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb94:	f108 0601 	add.w	r6, r8, #1
 800fb98:	42b3      	cmp	r3, r6
 800fb9a:	db0b      	blt.n	800fbb4 <__lshift+0x38>
 800fb9c:	4638      	mov	r0, r7
 800fb9e:	f7ff fddd 	bl	800f75c <_Balloc>
 800fba2:	4605      	mov	r5, r0
 800fba4:	b948      	cbnz	r0, 800fbba <__lshift+0x3e>
 800fba6:	4602      	mov	r2, r0
 800fba8:	4b28      	ldr	r3, [pc, #160]	; (800fc4c <__lshift+0xd0>)
 800fbaa:	4829      	ldr	r0, [pc, #164]	; (800fc50 <__lshift+0xd4>)
 800fbac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fbb0:	f000 fb80 	bl	80102b4 <__assert_func>
 800fbb4:	3101      	adds	r1, #1
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	e7ee      	b.n	800fb98 <__lshift+0x1c>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f100 0114 	add.w	r1, r0, #20
 800fbc0:	f100 0210 	add.w	r2, r0, #16
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	4553      	cmp	r3, sl
 800fbc8:	db33      	blt.n	800fc32 <__lshift+0xb6>
 800fbca:	6920      	ldr	r0, [r4, #16]
 800fbcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbd0:	f104 0314 	add.w	r3, r4, #20
 800fbd4:	f019 091f 	ands.w	r9, r9, #31
 800fbd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fbe0:	d02b      	beq.n	800fc3a <__lshift+0xbe>
 800fbe2:	f1c9 0e20 	rsb	lr, r9, #32
 800fbe6:	468a      	mov	sl, r1
 800fbe8:	2200      	movs	r2, #0
 800fbea:	6818      	ldr	r0, [r3, #0]
 800fbec:	fa00 f009 	lsl.w	r0, r0, r9
 800fbf0:	4310      	orrs	r0, r2
 800fbf2:	f84a 0b04 	str.w	r0, [sl], #4
 800fbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfa:	459c      	cmp	ip, r3
 800fbfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc00:	d8f3      	bhi.n	800fbea <__lshift+0x6e>
 800fc02:	ebac 0304 	sub.w	r3, ip, r4
 800fc06:	3b15      	subs	r3, #21
 800fc08:	f023 0303 	bic.w	r3, r3, #3
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	f104 0015 	add.w	r0, r4, #21
 800fc12:	4584      	cmp	ip, r0
 800fc14:	bf38      	it	cc
 800fc16:	2304      	movcc	r3, #4
 800fc18:	50ca      	str	r2, [r1, r3]
 800fc1a:	b10a      	cbz	r2, 800fc20 <__lshift+0xa4>
 800fc1c:	f108 0602 	add.w	r6, r8, #2
 800fc20:	3e01      	subs	r6, #1
 800fc22:	4638      	mov	r0, r7
 800fc24:	612e      	str	r6, [r5, #16]
 800fc26:	4621      	mov	r1, r4
 800fc28:	f7ff fdd8 	bl	800f7dc <_Bfree>
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc32:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc36:	3301      	adds	r3, #1
 800fc38:	e7c5      	b.n	800fbc6 <__lshift+0x4a>
 800fc3a:	3904      	subs	r1, #4
 800fc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc40:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc44:	459c      	cmp	ip, r3
 800fc46:	d8f9      	bhi.n	800fc3c <__lshift+0xc0>
 800fc48:	e7ea      	b.n	800fc20 <__lshift+0xa4>
 800fc4a:	bf00      	nop
 800fc4c:	08011fe4 	.word	0x08011fe4
 800fc50:	08011ff5 	.word	0x08011ff5

0800fc54 <__mcmp>:
 800fc54:	b530      	push	{r4, r5, lr}
 800fc56:	6902      	ldr	r2, [r0, #16]
 800fc58:	690c      	ldr	r4, [r1, #16]
 800fc5a:	1b12      	subs	r2, r2, r4
 800fc5c:	d10e      	bne.n	800fc7c <__mcmp+0x28>
 800fc5e:	f100 0314 	add.w	r3, r0, #20
 800fc62:	3114      	adds	r1, #20
 800fc64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc74:	42a5      	cmp	r5, r4
 800fc76:	d003      	beq.n	800fc80 <__mcmp+0x2c>
 800fc78:	d305      	bcc.n	800fc86 <__mcmp+0x32>
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	bd30      	pop	{r4, r5, pc}
 800fc80:	4283      	cmp	r3, r0
 800fc82:	d3f3      	bcc.n	800fc6c <__mcmp+0x18>
 800fc84:	e7fa      	b.n	800fc7c <__mcmp+0x28>
 800fc86:	f04f 32ff 	mov.w	r2, #4294967295
 800fc8a:	e7f7      	b.n	800fc7c <__mcmp+0x28>

0800fc8c <__mdiff>:
 800fc8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc90:	460c      	mov	r4, r1
 800fc92:	4606      	mov	r6, r0
 800fc94:	4611      	mov	r1, r2
 800fc96:	4620      	mov	r0, r4
 800fc98:	4690      	mov	r8, r2
 800fc9a:	f7ff ffdb 	bl	800fc54 <__mcmp>
 800fc9e:	1e05      	subs	r5, r0, #0
 800fca0:	d110      	bne.n	800fcc4 <__mdiff+0x38>
 800fca2:	4629      	mov	r1, r5
 800fca4:	4630      	mov	r0, r6
 800fca6:	f7ff fd59 	bl	800f75c <_Balloc>
 800fcaa:	b930      	cbnz	r0, 800fcba <__mdiff+0x2e>
 800fcac:	4b3a      	ldr	r3, [pc, #232]	; (800fd98 <__mdiff+0x10c>)
 800fcae:	4602      	mov	r2, r0
 800fcb0:	f240 2137 	movw	r1, #567	; 0x237
 800fcb4:	4839      	ldr	r0, [pc, #228]	; (800fd9c <__mdiff+0x110>)
 800fcb6:	f000 fafd 	bl	80102b4 <__assert_func>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fcc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc4:	bfa4      	itt	ge
 800fcc6:	4643      	movge	r3, r8
 800fcc8:	46a0      	movge	r8, r4
 800fcca:	4630      	mov	r0, r6
 800fccc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fcd0:	bfa6      	itte	ge
 800fcd2:	461c      	movge	r4, r3
 800fcd4:	2500      	movge	r5, #0
 800fcd6:	2501      	movlt	r5, #1
 800fcd8:	f7ff fd40 	bl	800f75c <_Balloc>
 800fcdc:	b920      	cbnz	r0, 800fce8 <__mdiff+0x5c>
 800fcde:	4b2e      	ldr	r3, [pc, #184]	; (800fd98 <__mdiff+0x10c>)
 800fce0:	4602      	mov	r2, r0
 800fce2:	f240 2145 	movw	r1, #581	; 0x245
 800fce6:	e7e5      	b.n	800fcb4 <__mdiff+0x28>
 800fce8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fcec:	6926      	ldr	r6, [r4, #16]
 800fcee:	60c5      	str	r5, [r0, #12]
 800fcf0:	f104 0914 	add.w	r9, r4, #20
 800fcf4:	f108 0514 	add.w	r5, r8, #20
 800fcf8:	f100 0e14 	add.w	lr, r0, #20
 800fcfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd04:	f108 0210 	add.w	r2, r8, #16
 800fd08:	46f2      	mov	sl, lr
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd14:	fa11 f88b 	uxtah	r8, r1, fp
 800fd18:	b299      	uxth	r1, r3
 800fd1a:	0c1b      	lsrs	r3, r3, #16
 800fd1c:	eba8 0801 	sub.w	r8, r8, r1
 800fd20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd28:	fa1f f888 	uxth.w	r8, r8
 800fd2c:	1419      	asrs	r1, r3, #16
 800fd2e:	454e      	cmp	r6, r9
 800fd30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd34:	f84a 3b04 	str.w	r3, [sl], #4
 800fd38:	d8e8      	bhi.n	800fd0c <__mdiff+0x80>
 800fd3a:	1b33      	subs	r3, r6, r4
 800fd3c:	3b15      	subs	r3, #21
 800fd3e:	f023 0303 	bic.w	r3, r3, #3
 800fd42:	3304      	adds	r3, #4
 800fd44:	3415      	adds	r4, #21
 800fd46:	42a6      	cmp	r6, r4
 800fd48:	bf38      	it	cc
 800fd4a:	2304      	movcc	r3, #4
 800fd4c:	441d      	add	r5, r3
 800fd4e:	4473      	add	r3, lr
 800fd50:	469e      	mov	lr, r3
 800fd52:	462e      	mov	r6, r5
 800fd54:	4566      	cmp	r6, ip
 800fd56:	d30e      	bcc.n	800fd76 <__mdiff+0xea>
 800fd58:	f10c 0203 	add.w	r2, ip, #3
 800fd5c:	1b52      	subs	r2, r2, r5
 800fd5e:	f022 0203 	bic.w	r2, r2, #3
 800fd62:	3d03      	subs	r5, #3
 800fd64:	45ac      	cmp	ip, r5
 800fd66:	bf38      	it	cc
 800fd68:	2200      	movcc	r2, #0
 800fd6a:	4413      	add	r3, r2
 800fd6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fd70:	b17a      	cbz	r2, 800fd92 <__mdiff+0x106>
 800fd72:	6107      	str	r7, [r0, #16]
 800fd74:	e7a4      	b.n	800fcc0 <__mdiff+0x34>
 800fd76:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd7a:	fa11 f288 	uxtah	r2, r1, r8
 800fd7e:	1414      	asrs	r4, r2, #16
 800fd80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd84:	b292      	uxth	r2, r2
 800fd86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd8a:	f84e 2b04 	str.w	r2, [lr], #4
 800fd8e:	1421      	asrs	r1, r4, #16
 800fd90:	e7e0      	b.n	800fd54 <__mdiff+0xc8>
 800fd92:	3f01      	subs	r7, #1
 800fd94:	e7ea      	b.n	800fd6c <__mdiff+0xe0>
 800fd96:	bf00      	nop
 800fd98:	08011fe4 	.word	0x08011fe4
 800fd9c:	08011ff5 	.word	0x08011ff5

0800fda0 <__d2b>:
 800fda0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fda4:	460f      	mov	r7, r1
 800fda6:	2101      	movs	r1, #1
 800fda8:	ec59 8b10 	vmov	r8, r9, d0
 800fdac:	4616      	mov	r6, r2
 800fdae:	f7ff fcd5 	bl	800f75c <_Balloc>
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	b930      	cbnz	r0, 800fdc4 <__d2b+0x24>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	4b24      	ldr	r3, [pc, #144]	; (800fe4c <__d2b+0xac>)
 800fdba:	4825      	ldr	r0, [pc, #148]	; (800fe50 <__d2b+0xb0>)
 800fdbc:	f240 310f 	movw	r1, #783	; 0x30f
 800fdc0:	f000 fa78 	bl	80102b4 <__assert_func>
 800fdc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fdc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdcc:	bb2d      	cbnz	r5, 800fe1a <__d2b+0x7a>
 800fdce:	9301      	str	r3, [sp, #4]
 800fdd0:	f1b8 0300 	subs.w	r3, r8, #0
 800fdd4:	d026      	beq.n	800fe24 <__d2b+0x84>
 800fdd6:	4668      	mov	r0, sp
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	f7ff fd87 	bl	800f8ec <__lo0bits>
 800fdde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fde2:	b1e8      	cbz	r0, 800fe20 <__d2b+0x80>
 800fde4:	f1c0 0320 	rsb	r3, r0, #32
 800fde8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdec:	430b      	orrs	r3, r1
 800fdee:	40c2      	lsrs	r2, r0
 800fdf0:	6163      	str	r3, [r4, #20]
 800fdf2:	9201      	str	r2, [sp, #4]
 800fdf4:	9b01      	ldr	r3, [sp, #4]
 800fdf6:	61a3      	str	r3, [r4, #24]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	bf14      	ite	ne
 800fdfc:	2202      	movne	r2, #2
 800fdfe:	2201      	moveq	r2, #1
 800fe00:	6122      	str	r2, [r4, #16]
 800fe02:	b1bd      	cbz	r5, 800fe34 <__d2b+0x94>
 800fe04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe08:	4405      	add	r5, r0
 800fe0a:	603d      	str	r5, [r7, #0]
 800fe0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe10:	6030      	str	r0, [r6, #0]
 800fe12:	4620      	mov	r0, r4
 800fe14:	b003      	add	sp, #12
 800fe16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe1e:	e7d6      	b.n	800fdce <__d2b+0x2e>
 800fe20:	6161      	str	r1, [r4, #20]
 800fe22:	e7e7      	b.n	800fdf4 <__d2b+0x54>
 800fe24:	a801      	add	r0, sp, #4
 800fe26:	f7ff fd61 	bl	800f8ec <__lo0bits>
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	6163      	str	r3, [r4, #20]
 800fe2e:	3020      	adds	r0, #32
 800fe30:	2201      	movs	r2, #1
 800fe32:	e7e5      	b.n	800fe00 <__d2b+0x60>
 800fe34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe3c:	6038      	str	r0, [r7, #0]
 800fe3e:	6918      	ldr	r0, [r3, #16]
 800fe40:	f7ff fd34 	bl	800f8ac <__hi0bits>
 800fe44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe48:	e7e2      	b.n	800fe10 <__d2b+0x70>
 800fe4a:	bf00      	nop
 800fe4c:	08011fe4 	.word	0x08011fe4
 800fe50:	08011ff5 	.word	0x08011ff5

0800fe54 <__ssputs_r>:
 800fe54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe58:	688e      	ldr	r6, [r1, #8]
 800fe5a:	461f      	mov	r7, r3
 800fe5c:	42be      	cmp	r6, r7
 800fe5e:	680b      	ldr	r3, [r1, #0]
 800fe60:	4682      	mov	sl, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	4690      	mov	r8, r2
 800fe66:	d82c      	bhi.n	800fec2 <__ssputs_r+0x6e>
 800fe68:	898a      	ldrh	r2, [r1, #12]
 800fe6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe6e:	d026      	beq.n	800febe <__ssputs_r+0x6a>
 800fe70:	6965      	ldr	r5, [r4, #20]
 800fe72:	6909      	ldr	r1, [r1, #16]
 800fe74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe78:	eba3 0901 	sub.w	r9, r3, r1
 800fe7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe80:	1c7b      	adds	r3, r7, #1
 800fe82:	444b      	add	r3, r9
 800fe84:	106d      	asrs	r5, r5, #1
 800fe86:	429d      	cmp	r5, r3
 800fe88:	bf38      	it	cc
 800fe8a:	461d      	movcc	r5, r3
 800fe8c:	0553      	lsls	r3, r2, #21
 800fe8e:	d527      	bpl.n	800fee0 <__ssputs_r+0x8c>
 800fe90:	4629      	mov	r1, r5
 800fe92:	f7ff fbd7 	bl	800f644 <_malloc_r>
 800fe96:	4606      	mov	r6, r0
 800fe98:	b360      	cbz	r0, 800fef4 <__ssputs_r+0xa0>
 800fe9a:	6921      	ldr	r1, [r4, #16]
 800fe9c:	464a      	mov	r2, r9
 800fe9e:	f7fe fcd4 	bl	800e84a <memcpy>
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feac:	81a3      	strh	r3, [r4, #12]
 800feae:	6126      	str	r6, [r4, #16]
 800feb0:	6165      	str	r5, [r4, #20]
 800feb2:	444e      	add	r6, r9
 800feb4:	eba5 0509 	sub.w	r5, r5, r9
 800feb8:	6026      	str	r6, [r4, #0]
 800feba:	60a5      	str	r5, [r4, #8]
 800febc:	463e      	mov	r6, r7
 800febe:	42be      	cmp	r6, r7
 800fec0:	d900      	bls.n	800fec4 <__ssputs_r+0x70>
 800fec2:	463e      	mov	r6, r7
 800fec4:	6820      	ldr	r0, [r4, #0]
 800fec6:	4632      	mov	r2, r6
 800fec8:	4641      	mov	r1, r8
 800feca:	f000 f9c9 	bl	8010260 <memmove>
 800fece:	68a3      	ldr	r3, [r4, #8]
 800fed0:	1b9b      	subs	r3, r3, r6
 800fed2:	60a3      	str	r3, [r4, #8]
 800fed4:	6823      	ldr	r3, [r4, #0]
 800fed6:	4433      	add	r3, r6
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	2000      	movs	r0, #0
 800fedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee0:	462a      	mov	r2, r5
 800fee2:	f000 fa2d 	bl	8010340 <_realloc_r>
 800fee6:	4606      	mov	r6, r0
 800fee8:	2800      	cmp	r0, #0
 800feea:	d1e0      	bne.n	800feae <__ssputs_r+0x5a>
 800feec:	6921      	ldr	r1, [r4, #16]
 800feee:	4650      	mov	r0, sl
 800fef0:	f7ff fb34 	bl	800f55c <_free_r>
 800fef4:	230c      	movs	r3, #12
 800fef6:	f8ca 3000 	str.w	r3, [sl]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	e7e9      	b.n	800fedc <__ssputs_r+0x88>

0800ff08 <_svfiprintf_r>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	4698      	mov	r8, r3
 800ff0e:	898b      	ldrh	r3, [r1, #12]
 800ff10:	061b      	lsls	r3, r3, #24
 800ff12:	b09d      	sub	sp, #116	; 0x74
 800ff14:	4607      	mov	r7, r0
 800ff16:	460d      	mov	r5, r1
 800ff18:	4614      	mov	r4, r2
 800ff1a:	d50e      	bpl.n	800ff3a <_svfiprintf_r+0x32>
 800ff1c:	690b      	ldr	r3, [r1, #16]
 800ff1e:	b963      	cbnz	r3, 800ff3a <_svfiprintf_r+0x32>
 800ff20:	2140      	movs	r1, #64	; 0x40
 800ff22:	f7ff fb8f 	bl	800f644 <_malloc_r>
 800ff26:	6028      	str	r0, [r5, #0]
 800ff28:	6128      	str	r0, [r5, #16]
 800ff2a:	b920      	cbnz	r0, 800ff36 <_svfiprintf_r+0x2e>
 800ff2c:	230c      	movs	r3, #12
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295
 800ff34:	e0d0      	b.n	80100d8 <_svfiprintf_r+0x1d0>
 800ff36:	2340      	movs	r3, #64	; 0x40
 800ff38:	616b      	str	r3, [r5, #20]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff3e:	2320      	movs	r3, #32
 800ff40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff48:	2330      	movs	r3, #48	; 0x30
 800ff4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80100f0 <_svfiprintf_r+0x1e8>
 800ff4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff52:	f04f 0901 	mov.w	r9, #1
 800ff56:	4623      	mov	r3, r4
 800ff58:	469a      	mov	sl, r3
 800ff5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff5e:	b10a      	cbz	r2, 800ff64 <_svfiprintf_r+0x5c>
 800ff60:	2a25      	cmp	r2, #37	; 0x25
 800ff62:	d1f9      	bne.n	800ff58 <_svfiprintf_r+0x50>
 800ff64:	ebba 0b04 	subs.w	fp, sl, r4
 800ff68:	d00b      	beq.n	800ff82 <_svfiprintf_r+0x7a>
 800ff6a:	465b      	mov	r3, fp
 800ff6c:	4622      	mov	r2, r4
 800ff6e:	4629      	mov	r1, r5
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff ff6f 	bl	800fe54 <__ssputs_r>
 800ff76:	3001      	adds	r0, #1
 800ff78:	f000 80a9 	beq.w	80100ce <_svfiprintf_r+0x1c6>
 800ff7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff7e:	445a      	add	r2, fp
 800ff80:	9209      	str	r2, [sp, #36]	; 0x24
 800ff82:	f89a 3000 	ldrb.w	r3, [sl]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 80a1 	beq.w	80100ce <_svfiprintf_r+0x1c6>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff96:	f10a 0a01 	add.w	sl, sl, #1
 800ff9a:	9304      	str	r3, [sp, #16]
 800ff9c:	9307      	str	r3, [sp, #28]
 800ff9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffa2:	931a      	str	r3, [sp, #104]	; 0x68
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2205      	movs	r2, #5
 800ffa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffac:	4850      	ldr	r0, [pc, #320]	; (80100f0 <_svfiprintf_r+0x1e8>)
 800ffae:	f7f0 f92f 	bl	8000210 <memchr>
 800ffb2:	9a04      	ldr	r2, [sp, #16]
 800ffb4:	b9d8      	cbnz	r0, 800ffee <_svfiprintf_r+0xe6>
 800ffb6:	06d0      	lsls	r0, r2, #27
 800ffb8:	bf44      	itt	mi
 800ffba:	2320      	movmi	r3, #32
 800ffbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffc0:	0711      	lsls	r1, r2, #28
 800ffc2:	bf44      	itt	mi
 800ffc4:	232b      	movmi	r3, #43	; 0x2b
 800ffc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffca:	f89a 3000 	ldrb.w	r3, [sl]
 800ffce:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd0:	d015      	beq.n	800fffe <_svfiprintf_r+0xf6>
 800ffd2:	9a07      	ldr	r2, [sp, #28]
 800ffd4:	4654      	mov	r4, sl
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	f04f 0c0a 	mov.w	ip, #10
 800ffdc:	4621      	mov	r1, r4
 800ffde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffe2:	3b30      	subs	r3, #48	; 0x30
 800ffe4:	2b09      	cmp	r3, #9
 800ffe6:	d94d      	bls.n	8010084 <_svfiprintf_r+0x17c>
 800ffe8:	b1b0      	cbz	r0, 8010018 <_svfiprintf_r+0x110>
 800ffea:	9207      	str	r2, [sp, #28]
 800ffec:	e014      	b.n	8010018 <_svfiprintf_r+0x110>
 800ffee:	eba0 0308 	sub.w	r3, r0, r8
 800fff2:	fa09 f303 	lsl.w	r3, r9, r3
 800fff6:	4313      	orrs	r3, r2
 800fff8:	9304      	str	r3, [sp, #16]
 800fffa:	46a2      	mov	sl, r4
 800fffc:	e7d2      	b.n	800ffa4 <_svfiprintf_r+0x9c>
 800fffe:	9b03      	ldr	r3, [sp, #12]
 8010000:	1d19      	adds	r1, r3, #4
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	9103      	str	r1, [sp, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfbb      	ittet	lt
 801000a:	425b      	neglt	r3, r3
 801000c:	f042 0202 	orrlt.w	r2, r2, #2
 8010010:	9307      	strge	r3, [sp, #28]
 8010012:	9307      	strlt	r3, [sp, #28]
 8010014:	bfb8      	it	lt
 8010016:	9204      	strlt	r2, [sp, #16]
 8010018:	7823      	ldrb	r3, [r4, #0]
 801001a:	2b2e      	cmp	r3, #46	; 0x2e
 801001c:	d10c      	bne.n	8010038 <_svfiprintf_r+0x130>
 801001e:	7863      	ldrb	r3, [r4, #1]
 8010020:	2b2a      	cmp	r3, #42	; 0x2a
 8010022:	d134      	bne.n	801008e <_svfiprintf_r+0x186>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	1d1a      	adds	r2, r3, #4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	9203      	str	r2, [sp, #12]
 801002c:	2b00      	cmp	r3, #0
 801002e:	bfb8      	it	lt
 8010030:	f04f 33ff 	movlt.w	r3, #4294967295
 8010034:	3402      	adds	r4, #2
 8010036:	9305      	str	r3, [sp, #20]
 8010038:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010100 <_svfiprintf_r+0x1f8>
 801003c:	7821      	ldrb	r1, [r4, #0]
 801003e:	2203      	movs	r2, #3
 8010040:	4650      	mov	r0, sl
 8010042:	f7f0 f8e5 	bl	8000210 <memchr>
 8010046:	b138      	cbz	r0, 8010058 <_svfiprintf_r+0x150>
 8010048:	9b04      	ldr	r3, [sp, #16]
 801004a:	eba0 000a 	sub.w	r0, r0, sl
 801004e:	2240      	movs	r2, #64	; 0x40
 8010050:	4082      	lsls	r2, r0
 8010052:	4313      	orrs	r3, r2
 8010054:	3401      	adds	r4, #1
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801005c:	4825      	ldr	r0, [pc, #148]	; (80100f4 <_svfiprintf_r+0x1ec>)
 801005e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010062:	2206      	movs	r2, #6
 8010064:	f7f0 f8d4 	bl	8000210 <memchr>
 8010068:	2800      	cmp	r0, #0
 801006a:	d038      	beq.n	80100de <_svfiprintf_r+0x1d6>
 801006c:	4b22      	ldr	r3, [pc, #136]	; (80100f8 <_svfiprintf_r+0x1f0>)
 801006e:	bb1b      	cbnz	r3, 80100b8 <_svfiprintf_r+0x1b0>
 8010070:	9b03      	ldr	r3, [sp, #12]
 8010072:	3307      	adds	r3, #7
 8010074:	f023 0307 	bic.w	r3, r3, #7
 8010078:	3308      	adds	r3, #8
 801007a:	9303      	str	r3, [sp, #12]
 801007c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007e:	4433      	add	r3, r6
 8010080:	9309      	str	r3, [sp, #36]	; 0x24
 8010082:	e768      	b.n	800ff56 <_svfiprintf_r+0x4e>
 8010084:	fb0c 3202 	mla	r2, ip, r2, r3
 8010088:	460c      	mov	r4, r1
 801008a:	2001      	movs	r0, #1
 801008c:	e7a6      	b.n	800ffdc <_svfiprintf_r+0xd4>
 801008e:	2300      	movs	r3, #0
 8010090:	3401      	adds	r4, #1
 8010092:	9305      	str	r3, [sp, #20]
 8010094:	4619      	mov	r1, r3
 8010096:	f04f 0c0a 	mov.w	ip, #10
 801009a:	4620      	mov	r0, r4
 801009c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100a0:	3a30      	subs	r2, #48	; 0x30
 80100a2:	2a09      	cmp	r2, #9
 80100a4:	d903      	bls.n	80100ae <_svfiprintf_r+0x1a6>
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d0c6      	beq.n	8010038 <_svfiprintf_r+0x130>
 80100aa:	9105      	str	r1, [sp, #20]
 80100ac:	e7c4      	b.n	8010038 <_svfiprintf_r+0x130>
 80100ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80100b2:	4604      	mov	r4, r0
 80100b4:	2301      	movs	r3, #1
 80100b6:	e7f0      	b.n	801009a <_svfiprintf_r+0x192>
 80100b8:	ab03      	add	r3, sp, #12
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	462a      	mov	r2, r5
 80100be:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <_svfiprintf_r+0x1f4>)
 80100c0:	a904      	add	r1, sp, #16
 80100c2:	4638      	mov	r0, r7
 80100c4:	f7fd fdaa 	bl	800dc1c <_printf_float>
 80100c8:	1c42      	adds	r2, r0, #1
 80100ca:	4606      	mov	r6, r0
 80100cc:	d1d6      	bne.n	801007c <_svfiprintf_r+0x174>
 80100ce:	89ab      	ldrh	r3, [r5, #12]
 80100d0:	065b      	lsls	r3, r3, #25
 80100d2:	f53f af2d 	bmi.w	800ff30 <_svfiprintf_r+0x28>
 80100d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100d8:	b01d      	add	sp, #116	; 0x74
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	ab03      	add	r3, sp, #12
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	462a      	mov	r2, r5
 80100e4:	4b05      	ldr	r3, [pc, #20]	; (80100fc <_svfiprintf_r+0x1f4>)
 80100e6:	a904      	add	r1, sp, #16
 80100e8:	4638      	mov	r0, r7
 80100ea:	f7fe f83b 	bl	800e164 <_printf_i>
 80100ee:	e7eb      	b.n	80100c8 <_svfiprintf_r+0x1c0>
 80100f0:	0801214c 	.word	0x0801214c
 80100f4:	08012156 	.word	0x08012156
 80100f8:	0800dc1d 	.word	0x0800dc1d
 80100fc:	0800fe55 	.word	0x0800fe55
 8010100:	08012152 	.word	0x08012152

08010104 <__sflush_r>:
 8010104:	898a      	ldrh	r2, [r1, #12]
 8010106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801010a:	4605      	mov	r5, r0
 801010c:	0710      	lsls	r0, r2, #28
 801010e:	460c      	mov	r4, r1
 8010110:	d458      	bmi.n	80101c4 <__sflush_r+0xc0>
 8010112:	684b      	ldr	r3, [r1, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	dc05      	bgt.n	8010124 <__sflush_r+0x20>
 8010118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801011a:	2b00      	cmp	r3, #0
 801011c:	dc02      	bgt.n	8010124 <__sflush_r+0x20>
 801011e:	2000      	movs	r0, #0
 8010120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010126:	2e00      	cmp	r6, #0
 8010128:	d0f9      	beq.n	801011e <__sflush_r+0x1a>
 801012a:	2300      	movs	r3, #0
 801012c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010130:	682f      	ldr	r7, [r5, #0]
 8010132:	6a21      	ldr	r1, [r4, #32]
 8010134:	602b      	str	r3, [r5, #0]
 8010136:	d032      	beq.n	801019e <__sflush_r+0x9a>
 8010138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801013a:	89a3      	ldrh	r3, [r4, #12]
 801013c:	075a      	lsls	r2, r3, #29
 801013e:	d505      	bpl.n	801014c <__sflush_r+0x48>
 8010140:	6863      	ldr	r3, [r4, #4]
 8010142:	1ac0      	subs	r0, r0, r3
 8010144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010146:	b10b      	cbz	r3, 801014c <__sflush_r+0x48>
 8010148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801014a:	1ac0      	subs	r0, r0, r3
 801014c:	2300      	movs	r3, #0
 801014e:	4602      	mov	r2, r0
 8010150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010152:	6a21      	ldr	r1, [r4, #32]
 8010154:	4628      	mov	r0, r5
 8010156:	47b0      	blx	r6
 8010158:	1c43      	adds	r3, r0, #1
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	d106      	bne.n	801016c <__sflush_r+0x68>
 801015e:	6829      	ldr	r1, [r5, #0]
 8010160:	291d      	cmp	r1, #29
 8010162:	d82b      	bhi.n	80101bc <__sflush_r+0xb8>
 8010164:	4a29      	ldr	r2, [pc, #164]	; (801020c <__sflush_r+0x108>)
 8010166:	410a      	asrs	r2, r1
 8010168:	07d6      	lsls	r6, r2, #31
 801016a:	d427      	bmi.n	80101bc <__sflush_r+0xb8>
 801016c:	2200      	movs	r2, #0
 801016e:	6062      	str	r2, [r4, #4]
 8010170:	04d9      	lsls	r1, r3, #19
 8010172:	6922      	ldr	r2, [r4, #16]
 8010174:	6022      	str	r2, [r4, #0]
 8010176:	d504      	bpl.n	8010182 <__sflush_r+0x7e>
 8010178:	1c42      	adds	r2, r0, #1
 801017a:	d101      	bne.n	8010180 <__sflush_r+0x7c>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	b903      	cbnz	r3, 8010182 <__sflush_r+0x7e>
 8010180:	6560      	str	r0, [r4, #84]	; 0x54
 8010182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010184:	602f      	str	r7, [r5, #0]
 8010186:	2900      	cmp	r1, #0
 8010188:	d0c9      	beq.n	801011e <__sflush_r+0x1a>
 801018a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801018e:	4299      	cmp	r1, r3
 8010190:	d002      	beq.n	8010198 <__sflush_r+0x94>
 8010192:	4628      	mov	r0, r5
 8010194:	f7ff f9e2 	bl	800f55c <_free_r>
 8010198:	2000      	movs	r0, #0
 801019a:	6360      	str	r0, [r4, #52]	; 0x34
 801019c:	e7c0      	b.n	8010120 <__sflush_r+0x1c>
 801019e:	2301      	movs	r3, #1
 80101a0:	4628      	mov	r0, r5
 80101a2:	47b0      	blx	r6
 80101a4:	1c41      	adds	r1, r0, #1
 80101a6:	d1c8      	bne.n	801013a <__sflush_r+0x36>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d0c5      	beq.n	801013a <__sflush_r+0x36>
 80101ae:	2b1d      	cmp	r3, #29
 80101b0:	d001      	beq.n	80101b6 <__sflush_r+0xb2>
 80101b2:	2b16      	cmp	r3, #22
 80101b4:	d101      	bne.n	80101ba <__sflush_r+0xb6>
 80101b6:	602f      	str	r7, [r5, #0]
 80101b8:	e7b1      	b.n	801011e <__sflush_r+0x1a>
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101c0:	81a3      	strh	r3, [r4, #12]
 80101c2:	e7ad      	b.n	8010120 <__sflush_r+0x1c>
 80101c4:	690f      	ldr	r7, [r1, #16]
 80101c6:	2f00      	cmp	r7, #0
 80101c8:	d0a9      	beq.n	801011e <__sflush_r+0x1a>
 80101ca:	0793      	lsls	r3, r2, #30
 80101cc:	680e      	ldr	r6, [r1, #0]
 80101ce:	bf08      	it	eq
 80101d0:	694b      	ldreq	r3, [r1, #20]
 80101d2:	600f      	str	r7, [r1, #0]
 80101d4:	bf18      	it	ne
 80101d6:	2300      	movne	r3, #0
 80101d8:	eba6 0807 	sub.w	r8, r6, r7
 80101dc:	608b      	str	r3, [r1, #8]
 80101de:	f1b8 0f00 	cmp.w	r8, #0
 80101e2:	dd9c      	ble.n	801011e <__sflush_r+0x1a>
 80101e4:	6a21      	ldr	r1, [r4, #32]
 80101e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101e8:	4643      	mov	r3, r8
 80101ea:	463a      	mov	r2, r7
 80101ec:	4628      	mov	r0, r5
 80101ee:	47b0      	blx	r6
 80101f0:	2800      	cmp	r0, #0
 80101f2:	dc06      	bgt.n	8010202 <__sflush_r+0xfe>
 80101f4:	89a3      	ldrh	r3, [r4, #12]
 80101f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fa:	81a3      	strh	r3, [r4, #12]
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	e78e      	b.n	8010120 <__sflush_r+0x1c>
 8010202:	4407      	add	r7, r0
 8010204:	eba8 0800 	sub.w	r8, r8, r0
 8010208:	e7e9      	b.n	80101de <__sflush_r+0xda>
 801020a:	bf00      	nop
 801020c:	dfbffffe 	.word	0xdfbffffe

08010210 <_fflush_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	690b      	ldr	r3, [r1, #16]
 8010214:	4605      	mov	r5, r0
 8010216:	460c      	mov	r4, r1
 8010218:	b913      	cbnz	r3, 8010220 <_fflush_r+0x10>
 801021a:	2500      	movs	r5, #0
 801021c:	4628      	mov	r0, r5
 801021e:	bd38      	pop	{r3, r4, r5, pc}
 8010220:	b118      	cbz	r0, 801022a <_fflush_r+0x1a>
 8010222:	6a03      	ldr	r3, [r0, #32]
 8010224:	b90b      	cbnz	r3, 801022a <_fflush_r+0x1a>
 8010226:	f7fe f94b 	bl	800e4c0 <__sinit>
 801022a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0f3      	beq.n	801021a <_fflush_r+0xa>
 8010232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010234:	07d0      	lsls	r0, r2, #31
 8010236:	d404      	bmi.n	8010242 <_fflush_r+0x32>
 8010238:	0599      	lsls	r1, r3, #22
 801023a:	d402      	bmi.n	8010242 <_fflush_r+0x32>
 801023c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801023e:	f7fe fb02 	bl	800e846 <__retarget_lock_acquire_recursive>
 8010242:	4628      	mov	r0, r5
 8010244:	4621      	mov	r1, r4
 8010246:	f7ff ff5d 	bl	8010104 <__sflush_r>
 801024a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801024c:	07da      	lsls	r2, r3, #31
 801024e:	4605      	mov	r5, r0
 8010250:	d4e4      	bmi.n	801021c <_fflush_r+0xc>
 8010252:	89a3      	ldrh	r3, [r4, #12]
 8010254:	059b      	lsls	r3, r3, #22
 8010256:	d4e1      	bmi.n	801021c <_fflush_r+0xc>
 8010258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801025a:	f7fe faf5 	bl	800e848 <__retarget_lock_release_recursive>
 801025e:	e7dd      	b.n	801021c <_fflush_r+0xc>

08010260 <memmove>:
 8010260:	4288      	cmp	r0, r1
 8010262:	b510      	push	{r4, lr}
 8010264:	eb01 0402 	add.w	r4, r1, r2
 8010268:	d902      	bls.n	8010270 <memmove+0x10>
 801026a:	4284      	cmp	r4, r0
 801026c:	4623      	mov	r3, r4
 801026e:	d807      	bhi.n	8010280 <memmove+0x20>
 8010270:	1e43      	subs	r3, r0, #1
 8010272:	42a1      	cmp	r1, r4
 8010274:	d008      	beq.n	8010288 <memmove+0x28>
 8010276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801027a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801027e:	e7f8      	b.n	8010272 <memmove+0x12>
 8010280:	4402      	add	r2, r0
 8010282:	4601      	mov	r1, r0
 8010284:	428a      	cmp	r2, r1
 8010286:	d100      	bne.n	801028a <memmove+0x2a>
 8010288:	bd10      	pop	{r4, pc}
 801028a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801028e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010292:	e7f7      	b.n	8010284 <memmove+0x24>

08010294 <_sbrk_r>:
 8010294:	b538      	push	{r3, r4, r5, lr}
 8010296:	4d06      	ldr	r5, [pc, #24]	; (80102b0 <_sbrk_r+0x1c>)
 8010298:	2300      	movs	r3, #0
 801029a:	4604      	mov	r4, r0
 801029c:	4608      	mov	r0, r1
 801029e:	602b      	str	r3, [r5, #0]
 80102a0:	f7f2 fabe 	bl	8002820 <_sbrk>
 80102a4:	1c43      	adds	r3, r0, #1
 80102a6:	d102      	bne.n	80102ae <_sbrk_r+0x1a>
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	b103      	cbz	r3, 80102ae <_sbrk_r+0x1a>
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	2000ee0c 	.word	0x2000ee0c

080102b4 <__assert_func>:
 80102b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102b6:	4614      	mov	r4, r2
 80102b8:	461a      	mov	r2, r3
 80102ba:	4b09      	ldr	r3, [pc, #36]	; (80102e0 <__assert_func+0x2c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4605      	mov	r5, r0
 80102c0:	68d8      	ldr	r0, [r3, #12]
 80102c2:	b14c      	cbz	r4, 80102d8 <__assert_func+0x24>
 80102c4:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <__assert_func+0x30>)
 80102c6:	9100      	str	r1, [sp, #0]
 80102c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102cc:	4906      	ldr	r1, [pc, #24]	; (80102e8 <__assert_func+0x34>)
 80102ce:	462b      	mov	r3, r5
 80102d0:	f000 f872 	bl	80103b8 <fiprintf>
 80102d4:	f000 f882 	bl	80103dc <abort>
 80102d8:	4b04      	ldr	r3, [pc, #16]	; (80102ec <__assert_func+0x38>)
 80102da:	461c      	mov	r4, r3
 80102dc:	e7f3      	b.n	80102c6 <__assert_func+0x12>
 80102de:	bf00      	nop
 80102e0:	20000084 	.word	0x20000084
 80102e4:	08012167 	.word	0x08012167
 80102e8:	08012174 	.word	0x08012174
 80102ec:	080121a2 	.word	0x080121a2

080102f0 <_calloc_r>:
 80102f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102f2:	fba1 2402 	umull	r2, r4, r1, r2
 80102f6:	b94c      	cbnz	r4, 801030c <_calloc_r+0x1c>
 80102f8:	4611      	mov	r1, r2
 80102fa:	9201      	str	r2, [sp, #4]
 80102fc:	f7ff f9a2 	bl	800f644 <_malloc_r>
 8010300:	9a01      	ldr	r2, [sp, #4]
 8010302:	4605      	mov	r5, r0
 8010304:	b930      	cbnz	r0, 8010314 <_calloc_r+0x24>
 8010306:	4628      	mov	r0, r5
 8010308:	b003      	add	sp, #12
 801030a:	bd30      	pop	{r4, r5, pc}
 801030c:	220c      	movs	r2, #12
 801030e:	6002      	str	r2, [r0, #0]
 8010310:	2500      	movs	r5, #0
 8010312:	e7f8      	b.n	8010306 <_calloc_r+0x16>
 8010314:	4621      	mov	r1, r4
 8010316:	f7fe f9a0 	bl	800e65a <memset>
 801031a:	e7f4      	b.n	8010306 <_calloc_r+0x16>

0801031c <__ascii_mbtowc>:
 801031c:	b082      	sub	sp, #8
 801031e:	b901      	cbnz	r1, 8010322 <__ascii_mbtowc+0x6>
 8010320:	a901      	add	r1, sp, #4
 8010322:	b142      	cbz	r2, 8010336 <__ascii_mbtowc+0x1a>
 8010324:	b14b      	cbz	r3, 801033a <__ascii_mbtowc+0x1e>
 8010326:	7813      	ldrb	r3, [r2, #0]
 8010328:	600b      	str	r3, [r1, #0]
 801032a:	7812      	ldrb	r2, [r2, #0]
 801032c:	1e10      	subs	r0, r2, #0
 801032e:	bf18      	it	ne
 8010330:	2001      	movne	r0, #1
 8010332:	b002      	add	sp, #8
 8010334:	4770      	bx	lr
 8010336:	4610      	mov	r0, r2
 8010338:	e7fb      	b.n	8010332 <__ascii_mbtowc+0x16>
 801033a:	f06f 0001 	mvn.w	r0, #1
 801033e:	e7f8      	b.n	8010332 <__ascii_mbtowc+0x16>

08010340 <_realloc_r>:
 8010340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010344:	4680      	mov	r8, r0
 8010346:	4614      	mov	r4, r2
 8010348:	460e      	mov	r6, r1
 801034a:	b921      	cbnz	r1, 8010356 <_realloc_r+0x16>
 801034c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010350:	4611      	mov	r1, r2
 8010352:	f7ff b977 	b.w	800f644 <_malloc_r>
 8010356:	b92a      	cbnz	r2, 8010364 <_realloc_r+0x24>
 8010358:	f7ff f900 	bl	800f55c <_free_r>
 801035c:	4625      	mov	r5, r4
 801035e:	4628      	mov	r0, r5
 8010360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010364:	f000 f841 	bl	80103ea <_malloc_usable_size_r>
 8010368:	4284      	cmp	r4, r0
 801036a:	4607      	mov	r7, r0
 801036c:	d802      	bhi.n	8010374 <_realloc_r+0x34>
 801036e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010372:	d812      	bhi.n	801039a <_realloc_r+0x5a>
 8010374:	4621      	mov	r1, r4
 8010376:	4640      	mov	r0, r8
 8010378:	f7ff f964 	bl	800f644 <_malloc_r>
 801037c:	4605      	mov	r5, r0
 801037e:	2800      	cmp	r0, #0
 8010380:	d0ed      	beq.n	801035e <_realloc_r+0x1e>
 8010382:	42bc      	cmp	r4, r7
 8010384:	4622      	mov	r2, r4
 8010386:	4631      	mov	r1, r6
 8010388:	bf28      	it	cs
 801038a:	463a      	movcs	r2, r7
 801038c:	f7fe fa5d 	bl	800e84a <memcpy>
 8010390:	4631      	mov	r1, r6
 8010392:	4640      	mov	r0, r8
 8010394:	f7ff f8e2 	bl	800f55c <_free_r>
 8010398:	e7e1      	b.n	801035e <_realloc_r+0x1e>
 801039a:	4635      	mov	r5, r6
 801039c:	e7df      	b.n	801035e <_realloc_r+0x1e>

0801039e <__ascii_wctomb>:
 801039e:	b149      	cbz	r1, 80103b4 <__ascii_wctomb+0x16>
 80103a0:	2aff      	cmp	r2, #255	; 0xff
 80103a2:	bf85      	ittet	hi
 80103a4:	238a      	movhi	r3, #138	; 0x8a
 80103a6:	6003      	strhi	r3, [r0, #0]
 80103a8:	700a      	strbls	r2, [r1, #0]
 80103aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80103ae:	bf98      	it	ls
 80103b0:	2001      	movls	r0, #1
 80103b2:	4770      	bx	lr
 80103b4:	4608      	mov	r0, r1
 80103b6:	4770      	bx	lr

080103b8 <fiprintf>:
 80103b8:	b40e      	push	{r1, r2, r3}
 80103ba:	b503      	push	{r0, r1, lr}
 80103bc:	4601      	mov	r1, r0
 80103be:	ab03      	add	r3, sp, #12
 80103c0:	4805      	ldr	r0, [pc, #20]	; (80103d8 <fiprintf+0x20>)
 80103c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c6:	6800      	ldr	r0, [r0, #0]
 80103c8:	9301      	str	r3, [sp, #4]
 80103ca:	f000 f83f 	bl	801044c <_vfiprintf_r>
 80103ce:	b002      	add	sp, #8
 80103d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103d4:	b003      	add	sp, #12
 80103d6:	4770      	bx	lr
 80103d8:	20000084 	.word	0x20000084

080103dc <abort>:
 80103dc:	b508      	push	{r3, lr}
 80103de:	2006      	movs	r0, #6
 80103e0:	f000 fa0c 	bl	80107fc <raise>
 80103e4:	2001      	movs	r0, #1
 80103e6:	f7f2 f9a3 	bl	8002730 <_exit>

080103ea <_malloc_usable_size_r>:
 80103ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103ee:	1f18      	subs	r0, r3, #4
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bfbc      	itt	lt
 80103f4:	580b      	ldrlt	r3, [r1, r0]
 80103f6:	18c0      	addlt	r0, r0, r3
 80103f8:	4770      	bx	lr

080103fa <__sfputc_r>:
 80103fa:	6893      	ldr	r3, [r2, #8]
 80103fc:	3b01      	subs	r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	b410      	push	{r4}
 8010402:	6093      	str	r3, [r2, #8]
 8010404:	da08      	bge.n	8010418 <__sfputc_r+0x1e>
 8010406:	6994      	ldr	r4, [r2, #24]
 8010408:	42a3      	cmp	r3, r4
 801040a:	db01      	blt.n	8010410 <__sfputc_r+0x16>
 801040c:	290a      	cmp	r1, #10
 801040e:	d103      	bne.n	8010418 <__sfputc_r+0x1e>
 8010410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010414:	f000 b934 	b.w	8010680 <__swbuf_r>
 8010418:	6813      	ldr	r3, [r2, #0]
 801041a:	1c58      	adds	r0, r3, #1
 801041c:	6010      	str	r0, [r2, #0]
 801041e:	7019      	strb	r1, [r3, #0]
 8010420:	4608      	mov	r0, r1
 8010422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010426:	4770      	bx	lr

08010428 <__sfputs_r>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	4614      	mov	r4, r2
 8010430:	18d5      	adds	r5, r2, r3
 8010432:	42ac      	cmp	r4, r5
 8010434:	d101      	bne.n	801043a <__sfputs_r+0x12>
 8010436:	2000      	movs	r0, #0
 8010438:	e007      	b.n	801044a <__sfputs_r+0x22>
 801043a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801043e:	463a      	mov	r2, r7
 8010440:	4630      	mov	r0, r6
 8010442:	f7ff ffda 	bl	80103fa <__sfputc_r>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	d1f3      	bne.n	8010432 <__sfputs_r+0xa>
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801044c <_vfiprintf_r>:
 801044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	460d      	mov	r5, r1
 8010452:	b09d      	sub	sp, #116	; 0x74
 8010454:	4614      	mov	r4, r2
 8010456:	4698      	mov	r8, r3
 8010458:	4606      	mov	r6, r0
 801045a:	b118      	cbz	r0, 8010464 <_vfiprintf_r+0x18>
 801045c:	6a03      	ldr	r3, [r0, #32]
 801045e:	b90b      	cbnz	r3, 8010464 <_vfiprintf_r+0x18>
 8010460:	f7fe f82e 	bl	800e4c0 <__sinit>
 8010464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010466:	07d9      	lsls	r1, r3, #31
 8010468:	d405      	bmi.n	8010476 <_vfiprintf_r+0x2a>
 801046a:	89ab      	ldrh	r3, [r5, #12]
 801046c:	059a      	lsls	r2, r3, #22
 801046e:	d402      	bmi.n	8010476 <_vfiprintf_r+0x2a>
 8010470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010472:	f7fe f9e8 	bl	800e846 <__retarget_lock_acquire_recursive>
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	071b      	lsls	r3, r3, #28
 801047a:	d501      	bpl.n	8010480 <_vfiprintf_r+0x34>
 801047c:	692b      	ldr	r3, [r5, #16]
 801047e:	b99b      	cbnz	r3, 80104a8 <_vfiprintf_r+0x5c>
 8010480:	4629      	mov	r1, r5
 8010482:	4630      	mov	r0, r6
 8010484:	f000 f93a 	bl	80106fc <__swsetup_r>
 8010488:	b170      	cbz	r0, 80104a8 <_vfiprintf_r+0x5c>
 801048a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801048c:	07dc      	lsls	r4, r3, #31
 801048e:	d504      	bpl.n	801049a <_vfiprintf_r+0x4e>
 8010490:	f04f 30ff 	mov.w	r0, #4294967295
 8010494:	b01d      	add	sp, #116	; 0x74
 8010496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049a:	89ab      	ldrh	r3, [r5, #12]
 801049c:	0598      	lsls	r0, r3, #22
 801049e:	d4f7      	bmi.n	8010490 <_vfiprintf_r+0x44>
 80104a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104a2:	f7fe f9d1 	bl	800e848 <__retarget_lock_release_recursive>
 80104a6:	e7f3      	b.n	8010490 <_vfiprintf_r+0x44>
 80104a8:	2300      	movs	r3, #0
 80104aa:	9309      	str	r3, [sp, #36]	; 0x24
 80104ac:	2320      	movs	r3, #32
 80104ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80104b6:	2330      	movs	r3, #48	; 0x30
 80104b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801066c <_vfiprintf_r+0x220>
 80104bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104c0:	f04f 0901 	mov.w	r9, #1
 80104c4:	4623      	mov	r3, r4
 80104c6:	469a      	mov	sl, r3
 80104c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104cc:	b10a      	cbz	r2, 80104d2 <_vfiprintf_r+0x86>
 80104ce:	2a25      	cmp	r2, #37	; 0x25
 80104d0:	d1f9      	bne.n	80104c6 <_vfiprintf_r+0x7a>
 80104d2:	ebba 0b04 	subs.w	fp, sl, r4
 80104d6:	d00b      	beq.n	80104f0 <_vfiprintf_r+0xa4>
 80104d8:	465b      	mov	r3, fp
 80104da:	4622      	mov	r2, r4
 80104dc:	4629      	mov	r1, r5
 80104de:	4630      	mov	r0, r6
 80104e0:	f7ff ffa2 	bl	8010428 <__sfputs_r>
 80104e4:	3001      	adds	r0, #1
 80104e6:	f000 80a9 	beq.w	801063c <_vfiprintf_r+0x1f0>
 80104ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ec:	445a      	add	r2, fp
 80104ee:	9209      	str	r2, [sp, #36]	; 0x24
 80104f0:	f89a 3000 	ldrb.w	r3, [sl]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 80a1 	beq.w	801063c <_vfiprintf_r+0x1f0>
 80104fa:	2300      	movs	r3, #0
 80104fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010504:	f10a 0a01 	add.w	sl, sl, #1
 8010508:	9304      	str	r3, [sp, #16]
 801050a:	9307      	str	r3, [sp, #28]
 801050c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010510:	931a      	str	r3, [sp, #104]	; 0x68
 8010512:	4654      	mov	r4, sl
 8010514:	2205      	movs	r2, #5
 8010516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801051a:	4854      	ldr	r0, [pc, #336]	; (801066c <_vfiprintf_r+0x220>)
 801051c:	f7ef fe78 	bl	8000210 <memchr>
 8010520:	9a04      	ldr	r2, [sp, #16]
 8010522:	b9d8      	cbnz	r0, 801055c <_vfiprintf_r+0x110>
 8010524:	06d1      	lsls	r1, r2, #27
 8010526:	bf44      	itt	mi
 8010528:	2320      	movmi	r3, #32
 801052a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801052e:	0713      	lsls	r3, r2, #28
 8010530:	bf44      	itt	mi
 8010532:	232b      	movmi	r3, #43	; 0x2b
 8010534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010538:	f89a 3000 	ldrb.w	r3, [sl]
 801053c:	2b2a      	cmp	r3, #42	; 0x2a
 801053e:	d015      	beq.n	801056c <_vfiprintf_r+0x120>
 8010540:	9a07      	ldr	r2, [sp, #28]
 8010542:	4654      	mov	r4, sl
 8010544:	2000      	movs	r0, #0
 8010546:	f04f 0c0a 	mov.w	ip, #10
 801054a:	4621      	mov	r1, r4
 801054c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010550:	3b30      	subs	r3, #48	; 0x30
 8010552:	2b09      	cmp	r3, #9
 8010554:	d94d      	bls.n	80105f2 <_vfiprintf_r+0x1a6>
 8010556:	b1b0      	cbz	r0, 8010586 <_vfiprintf_r+0x13a>
 8010558:	9207      	str	r2, [sp, #28]
 801055a:	e014      	b.n	8010586 <_vfiprintf_r+0x13a>
 801055c:	eba0 0308 	sub.w	r3, r0, r8
 8010560:	fa09 f303 	lsl.w	r3, r9, r3
 8010564:	4313      	orrs	r3, r2
 8010566:	9304      	str	r3, [sp, #16]
 8010568:	46a2      	mov	sl, r4
 801056a:	e7d2      	b.n	8010512 <_vfiprintf_r+0xc6>
 801056c:	9b03      	ldr	r3, [sp, #12]
 801056e:	1d19      	adds	r1, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	9103      	str	r1, [sp, #12]
 8010574:	2b00      	cmp	r3, #0
 8010576:	bfbb      	ittet	lt
 8010578:	425b      	neglt	r3, r3
 801057a:	f042 0202 	orrlt.w	r2, r2, #2
 801057e:	9307      	strge	r3, [sp, #28]
 8010580:	9307      	strlt	r3, [sp, #28]
 8010582:	bfb8      	it	lt
 8010584:	9204      	strlt	r2, [sp, #16]
 8010586:	7823      	ldrb	r3, [r4, #0]
 8010588:	2b2e      	cmp	r3, #46	; 0x2e
 801058a:	d10c      	bne.n	80105a6 <_vfiprintf_r+0x15a>
 801058c:	7863      	ldrb	r3, [r4, #1]
 801058e:	2b2a      	cmp	r3, #42	; 0x2a
 8010590:	d134      	bne.n	80105fc <_vfiprintf_r+0x1b0>
 8010592:	9b03      	ldr	r3, [sp, #12]
 8010594:	1d1a      	adds	r2, r3, #4
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	9203      	str	r2, [sp, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	bfb8      	it	lt
 801059e:	f04f 33ff 	movlt.w	r3, #4294967295
 80105a2:	3402      	adds	r4, #2
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801067c <_vfiprintf_r+0x230>
 80105aa:	7821      	ldrb	r1, [r4, #0]
 80105ac:	2203      	movs	r2, #3
 80105ae:	4650      	mov	r0, sl
 80105b0:	f7ef fe2e 	bl	8000210 <memchr>
 80105b4:	b138      	cbz	r0, 80105c6 <_vfiprintf_r+0x17a>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	eba0 000a 	sub.w	r0, r0, sl
 80105bc:	2240      	movs	r2, #64	; 0x40
 80105be:	4082      	lsls	r2, r0
 80105c0:	4313      	orrs	r3, r2
 80105c2:	3401      	adds	r4, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ca:	4829      	ldr	r0, [pc, #164]	; (8010670 <_vfiprintf_r+0x224>)
 80105cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105d0:	2206      	movs	r2, #6
 80105d2:	f7ef fe1d 	bl	8000210 <memchr>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d03f      	beq.n	801065a <_vfiprintf_r+0x20e>
 80105da:	4b26      	ldr	r3, [pc, #152]	; (8010674 <_vfiprintf_r+0x228>)
 80105dc:	bb1b      	cbnz	r3, 8010626 <_vfiprintf_r+0x1da>
 80105de:	9b03      	ldr	r3, [sp, #12]
 80105e0:	3307      	adds	r3, #7
 80105e2:	f023 0307 	bic.w	r3, r3, #7
 80105e6:	3308      	adds	r3, #8
 80105e8:	9303      	str	r3, [sp, #12]
 80105ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ec:	443b      	add	r3, r7
 80105ee:	9309      	str	r3, [sp, #36]	; 0x24
 80105f0:	e768      	b.n	80104c4 <_vfiprintf_r+0x78>
 80105f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f6:	460c      	mov	r4, r1
 80105f8:	2001      	movs	r0, #1
 80105fa:	e7a6      	b.n	801054a <_vfiprintf_r+0xfe>
 80105fc:	2300      	movs	r3, #0
 80105fe:	3401      	adds	r4, #1
 8010600:	9305      	str	r3, [sp, #20]
 8010602:	4619      	mov	r1, r3
 8010604:	f04f 0c0a 	mov.w	ip, #10
 8010608:	4620      	mov	r0, r4
 801060a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801060e:	3a30      	subs	r2, #48	; 0x30
 8010610:	2a09      	cmp	r2, #9
 8010612:	d903      	bls.n	801061c <_vfiprintf_r+0x1d0>
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0c6      	beq.n	80105a6 <_vfiprintf_r+0x15a>
 8010618:	9105      	str	r1, [sp, #20]
 801061a:	e7c4      	b.n	80105a6 <_vfiprintf_r+0x15a>
 801061c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010620:	4604      	mov	r4, r0
 8010622:	2301      	movs	r3, #1
 8010624:	e7f0      	b.n	8010608 <_vfiprintf_r+0x1bc>
 8010626:	ab03      	add	r3, sp, #12
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	462a      	mov	r2, r5
 801062c:	4b12      	ldr	r3, [pc, #72]	; (8010678 <_vfiprintf_r+0x22c>)
 801062e:	a904      	add	r1, sp, #16
 8010630:	4630      	mov	r0, r6
 8010632:	f7fd faf3 	bl	800dc1c <_printf_float>
 8010636:	4607      	mov	r7, r0
 8010638:	1c78      	adds	r0, r7, #1
 801063a:	d1d6      	bne.n	80105ea <_vfiprintf_r+0x19e>
 801063c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801063e:	07d9      	lsls	r1, r3, #31
 8010640:	d405      	bmi.n	801064e <_vfiprintf_r+0x202>
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	059a      	lsls	r2, r3, #22
 8010646:	d402      	bmi.n	801064e <_vfiprintf_r+0x202>
 8010648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801064a:	f7fe f8fd 	bl	800e848 <__retarget_lock_release_recursive>
 801064e:	89ab      	ldrh	r3, [r5, #12]
 8010650:	065b      	lsls	r3, r3, #25
 8010652:	f53f af1d 	bmi.w	8010490 <_vfiprintf_r+0x44>
 8010656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010658:	e71c      	b.n	8010494 <_vfiprintf_r+0x48>
 801065a:	ab03      	add	r3, sp, #12
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	462a      	mov	r2, r5
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <_vfiprintf_r+0x22c>)
 8010662:	a904      	add	r1, sp, #16
 8010664:	4630      	mov	r0, r6
 8010666:	f7fd fd7d 	bl	800e164 <_printf_i>
 801066a:	e7e4      	b.n	8010636 <_vfiprintf_r+0x1ea>
 801066c:	0801214c 	.word	0x0801214c
 8010670:	08012156 	.word	0x08012156
 8010674:	0800dc1d 	.word	0x0800dc1d
 8010678:	08010429 	.word	0x08010429
 801067c:	08012152 	.word	0x08012152

08010680 <__swbuf_r>:
 8010680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010682:	460e      	mov	r6, r1
 8010684:	4614      	mov	r4, r2
 8010686:	4605      	mov	r5, r0
 8010688:	b118      	cbz	r0, 8010692 <__swbuf_r+0x12>
 801068a:	6a03      	ldr	r3, [r0, #32]
 801068c:	b90b      	cbnz	r3, 8010692 <__swbuf_r+0x12>
 801068e:	f7fd ff17 	bl	800e4c0 <__sinit>
 8010692:	69a3      	ldr	r3, [r4, #24]
 8010694:	60a3      	str	r3, [r4, #8]
 8010696:	89a3      	ldrh	r3, [r4, #12]
 8010698:	071a      	lsls	r2, r3, #28
 801069a:	d525      	bpl.n	80106e8 <__swbuf_r+0x68>
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	b31b      	cbz	r3, 80106e8 <__swbuf_r+0x68>
 80106a0:	6823      	ldr	r3, [r4, #0]
 80106a2:	6922      	ldr	r2, [r4, #16]
 80106a4:	1a98      	subs	r0, r3, r2
 80106a6:	6963      	ldr	r3, [r4, #20]
 80106a8:	b2f6      	uxtb	r6, r6
 80106aa:	4283      	cmp	r3, r0
 80106ac:	4637      	mov	r7, r6
 80106ae:	dc04      	bgt.n	80106ba <__swbuf_r+0x3a>
 80106b0:	4621      	mov	r1, r4
 80106b2:	4628      	mov	r0, r5
 80106b4:	f7ff fdac 	bl	8010210 <_fflush_r>
 80106b8:	b9e0      	cbnz	r0, 80106f4 <__swbuf_r+0x74>
 80106ba:	68a3      	ldr	r3, [r4, #8]
 80106bc:	3b01      	subs	r3, #1
 80106be:	60a3      	str	r3, [r4, #8]
 80106c0:	6823      	ldr	r3, [r4, #0]
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	6022      	str	r2, [r4, #0]
 80106c6:	701e      	strb	r6, [r3, #0]
 80106c8:	6962      	ldr	r2, [r4, #20]
 80106ca:	1c43      	adds	r3, r0, #1
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d004      	beq.n	80106da <__swbuf_r+0x5a>
 80106d0:	89a3      	ldrh	r3, [r4, #12]
 80106d2:	07db      	lsls	r3, r3, #31
 80106d4:	d506      	bpl.n	80106e4 <__swbuf_r+0x64>
 80106d6:	2e0a      	cmp	r6, #10
 80106d8:	d104      	bne.n	80106e4 <__swbuf_r+0x64>
 80106da:	4621      	mov	r1, r4
 80106dc:	4628      	mov	r0, r5
 80106de:	f7ff fd97 	bl	8010210 <_fflush_r>
 80106e2:	b938      	cbnz	r0, 80106f4 <__swbuf_r+0x74>
 80106e4:	4638      	mov	r0, r7
 80106e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106e8:	4621      	mov	r1, r4
 80106ea:	4628      	mov	r0, r5
 80106ec:	f000 f806 	bl	80106fc <__swsetup_r>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d0d5      	beq.n	80106a0 <__swbuf_r+0x20>
 80106f4:	f04f 37ff 	mov.w	r7, #4294967295
 80106f8:	e7f4      	b.n	80106e4 <__swbuf_r+0x64>
	...

080106fc <__swsetup_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4b2a      	ldr	r3, [pc, #168]	; (80107a8 <__swsetup_r+0xac>)
 8010700:	4605      	mov	r5, r0
 8010702:	6818      	ldr	r0, [r3, #0]
 8010704:	460c      	mov	r4, r1
 8010706:	b118      	cbz	r0, 8010710 <__swsetup_r+0x14>
 8010708:	6a03      	ldr	r3, [r0, #32]
 801070a:	b90b      	cbnz	r3, 8010710 <__swsetup_r+0x14>
 801070c:	f7fd fed8 	bl	800e4c0 <__sinit>
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010716:	0718      	lsls	r0, r3, #28
 8010718:	d422      	bmi.n	8010760 <__swsetup_r+0x64>
 801071a:	06d9      	lsls	r1, r3, #27
 801071c:	d407      	bmi.n	801072e <__swsetup_r+0x32>
 801071e:	2309      	movs	r3, #9
 8010720:	602b      	str	r3, [r5, #0]
 8010722:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010726:	81a3      	strh	r3, [r4, #12]
 8010728:	f04f 30ff 	mov.w	r0, #4294967295
 801072c:	e034      	b.n	8010798 <__swsetup_r+0x9c>
 801072e:	0758      	lsls	r0, r3, #29
 8010730:	d512      	bpl.n	8010758 <__swsetup_r+0x5c>
 8010732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010734:	b141      	cbz	r1, 8010748 <__swsetup_r+0x4c>
 8010736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801073a:	4299      	cmp	r1, r3
 801073c:	d002      	beq.n	8010744 <__swsetup_r+0x48>
 801073e:	4628      	mov	r0, r5
 8010740:	f7fe ff0c 	bl	800f55c <_free_r>
 8010744:	2300      	movs	r3, #0
 8010746:	6363      	str	r3, [r4, #52]	; 0x34
 8010748:	89a3      	ldrh	r3, [r4, #12]
 801074a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801074e:	81a3      	strh	r3, [r4, #12]
 8010750:	2300      	movs	r3, #0
 8010752:	6063      	str	r3, [r4, #4]
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	6023      	str	r3, [r4, #0]
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	f043 0308 	orr.w	r3, r3, #8
 801075e:	81a3      	strh	r3, [r4, #12]
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	b94b      	cbnz	r3, 8010778 <__swsetup_r+0x7c>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801076a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801076e:	d003      	beq.n	8010778 <__swsetup_r+0x7c>
 8010770:	4621      	mov	r1, r4
 8010772:	4628      	mov	r0, r5
 8010774:	f000 f884 	bl	8010880 <__smakebuf_r>
 8010778:	89a0      	ldrh	r0, [r4, #12]
 801077a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801077e:	f010 0301 	ands.w	r3, r0, #1
 8010782:	d00a      	beq.n	801079a <__swsetup_r+0x9e>
 8010784:	2300      	movs	r3, #0
 8010786:	60a3      	str	r3, [r4, #8]
 8010788:	6963      	ldr	r3, [r4, #20]
 801078a:	425b      	negs	r3, r3
 801078c:	61a3      	str	r3, [r4, #24]
 801078e:	6923      	ldr	r3, [r4, #16]
 8010790:	b943      	cbnz	r3, 80107a4 <__swsetup_r+0xa8>
 8010792:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010796:	d1c4      	bne.n	8010722 <__swsetup_r+0x26>
 8010798:	bd38      	pop	{r3, r4, r5, pc}
 801079a:	0781      	lsls	r1, r0, #30
 801079c:	bf58      	it	pl
 801079e:	6963      	ldrpl	r3, [r4, #20]
 80107a0:	60a3      	str	r3, [r4, #8]
 80107a2:	e7f4      	b.n	801078e <__swsetup_r+0x92>
 80107a4:	2000      	movs	r0, #0
 80107a6:	e7f7      	b.n	8010798 <__swsetup_r+0x9c>
 80107a8:	20000084 	.word	0x20000084

080107ac <_raise_r>:
 80107ac:	291f      	cmp	r1, #31
 80107ae:	b538      	push	{r3, r4, r5, lr}
 80107b0:	4604      	mov	r4, r0
 80107b2:	460d      	mov	r5, r1
 80107b4:	d904      	bls.n	80107c0 <_raise_r+0x14>
 80107b6:	2316      	movs	r3, #22
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	f04f 30ff 	mov.w	r0, #4294967295
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80107c2:	b112      	cbz	r2, 80107ca <_raise_r+0x1e>
 80107c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107c8:	b94b      	cbnz	r3, 80107de <_raise_r+0x32>
 80107ca:	4620      	mov	r0, r4
 80107cc:	f000 f830 	bl	8010830 <_getpid_r>
 80107d0:	462a      	mov	r2, r5
 80107d2:	4601      	mov	r1, r0
 80107d4:	4620      	mov	r0, r4
 80107d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107da:	f000 b817 	b.w	801080c <_kill_r>
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d00a      	beq.n	80107f8 <_raise_r+0x4c>
 80107e2:	1c59      	adds	r1, r3, #1
 80107e4:	d103      	bne.n	80107ee <_raise_r+0x42>
 80107e6:	2316      	movs	r3, #22
 80107e8:	6003      	str	r3, [r0, #0]
 80107ea:	2001      	movs	r0, #1
 80107ec:	e7e7      	b.n	80107be <_raise_r+0x12>
 80107ee:	2400      	movs	r4, #0
 80107f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107f4:	4628      	mov	r0, r5
 80107f6:	4798      	blx	r3
 80107f8:	2000      	movs	r0, #0
 80107fa:	e7e0      	b.n	80107be <_raise_r+0x12>

080107fc <raise>:
 80107fc:	4b02      	ldr	r3, [pc, #8]	; (8010808 <raise+0xc>)
 80107fe:	4601      	mov	r1, r0
 8010800:	6818      	ldr	r0, [r3, #0]
 8010802:	f7ff bfd3 	b.w	80107ac <_raise_r>
 8010806:	bf00      	nop
 8010808:	20000084 	.word	0x20000084

0801080c <_kill_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4d07      	ldr	r5, [pc, #28]	; (801082c <_kill_r+0x20>)
 8010810:	2300      	movs	r3, #0
 8010812:	4604      	mov	r4, r0
 8010814:	4608      	mov	r0, r1
 8010816:	4611      	mov	r1, r2
 8010818:	602b      	str	r3, [r5, #0]
 801081a:	f7f1 ff79 	bl	8002710 <_kill>
 801081e:	1c43      	adds	r3, r0, #1
 8010820:	d102      	bne.n	8010828 <_kill_r+0x1c>
 8010822:	682b      	ldr	r3, [r5, #0]
 8010824:	b103      	cbz	r3, 8010828 <_kill_r+0x1c>
 8010826:	6023      	str	r3, [r4, #0]
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop
 801082c:	2000ee0c 	.word	0x2000ee0c

08010830 <_getpid_r>:
 8010830:	f7f1 bf66 	b.w	8002700 <_getpid>

08010834 <__swhatbuf_r>:
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	460c      	mov	r4, r1
 8010838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801083c:	2900      	cmp	r1, #0
 801083e:	b096      	sub	sp, #88	; 0x58
 8010840:	4615      	mov	r5, r2
 8010842:	461e      	mov	r6, r3
 8010844:	da0d      	bge.n	8010862 <__swhatbuf_r+0x2e>
 8010846:	89a3      	ldrh	r3, [r4, #12]
 8010848:	f013 0f80 	tst.w	r3, #128	; 0x80
 801084c:	f04f 0100 	mov.w	r1, #0
 8010850:	bf0c      	ite	eq
 8010852:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010856:	2340      	movne	r3, #64	; 0x40
 8010858:	2000      	movs	r0, #0
 801085a:	6031      	str	r1, [r6, #0]
 801085c:	602b      	str	r3, [r5, #0]
 801085e:	b016      	add	sp, #88	; 0x58
 8010860:	bd70      	pop	{r4, r5, r6, pc}
 8010862:	466a      	mov	r2, sp
 8010864:	f000 f848 	bl	80108f8 <_fstat_r>
 8010868:	2800      	cmp	r0, #0
 801086a:	dbec      	blt.n	8010846 <__swhatbuf_r+0x12>
 801086c:	9901      	ldr	r1, [sp, #4]
 801086e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010872:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010876:	4259      	negs	r1, r3
 8010878:	4159      	adcs	r1, r3
 801087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801087e:	e7eb      	b.n	8010858 <__swhatbuf_r+0x24>

08010880 <__smakebuf_r>:
 8010880:	898b      	ldrh	r3, [r1, #12]
 8010882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010884:	079d      	lsls	r5, r3, #30
 8010886:	4606      	mov	r6, r0
 8010888:	460c      	mov	r4, r1
 801088a:	d507      	bpl.n	801089c <__smakebuf_r+0x1c>
 801088c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	6123      	str	r3, [r4, #16]
 8010894:	2301      	movs	r3, #1
 8010896:	6163      	str	r3, [r4, #20]
 8010898:	b002      	add	sp, #8
 801089a:	bd70      	pop	{r4, r5, r6, pc}
 801089c:	ab01      	add	r3, sp, #4
 801089e:	466a      	mov	r2, sp
 80108a0:	f7ff ffc8 	bl	8010834 <__swhatbuf_r>
 80108a4:	9900      	ldr	r1, [sp, #0]
 80108a6:	4605      	mov	r5, r0
 80108a8:	4630      	mov	r0, r6
 80108aa:	f7fe fecb 	bl	800f644 <_malloc_r>
 80108ae:	b948      	cbnz	r0, 80108c4 <__smakebuf_r+0x44>
 80108b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b4:	059a      	lsls	r2, r3, #22
 80108b6:	d4ef      	bmi.n	8010898 <__smakebuf_r+0x18>
 80108b8:	f023 0303 	bic.w	r3, r3, #3
 80108bc:	f043 0302 	orr.w	r3, r3, #2
 80108c0:	81a3      	strh	r3, [r4, #12]
 80108c2:	e7e3      	b.n	801088c <__smakebuf_r+0xc>
 80108c4:	89a3      	ldrh	r3, [r4, #12]
 80108c6:	6020      	str	r0, [r4, #0]
 80108c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108cc:	81a3      	strh	r3, [r4, #12]
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	6163      	str	r3, [r4, #20]
 80108d2:	9b01      	ldr	r3, [sp, #4]
 80108d4:	6120      	str	r0, [r4, #16]
 80108d6:	b15b      	cbz	r3, 80108f0 <__smakebuf_r+0x70>
 80108d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108dc:	4630      	mov	r0, r6
 80108de:	f000 f81d 	bl	801091c <_isatty_r>
 80108e2:	b128      	cbz	r0, 80108f0 <__smakebuf_r+0x70>
 80108e4:	89a3      	ldrh	r3, [r4, #12]
 80108e6:	f023 0303 	bic.w	r3, r3, #3
 80108ea:	f043 0301 	orr.w	r3, r3, #1
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	89a3      	ldrh	r3, [r4, #12]
 80108f2:	431d      	orrs	r5, r3
 80108f4:	81a5      	strh	r5, [r4, #12]
 80108f6:	e7cf      	b.n	8010898 <__smakebuf_r+0x18>

080108f8 <_fstat_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4d07      	ldr	r5, [pc, #28]	; (8010918 <_fstat_r+0x20>)
 80108fc:	2300      	movs	r3, #0
 80108fe:	4604      	mov	r4, r0
 8010900:	4608      	mov	r0, r1
 8010902:	4611      	mov	r1, r2
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	f7f1 ff62 	bl	80027ce <_fstat>
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	d102      	bne.n	8010914 <_fstat_r+0x1c>
 801090e:	682b      	ldr	r3, [r5, #0]
 8010910:	b103      	cbz	r3, 8010914 <_fstat_r+0x1c>
 8010912:	6023      	str	r3, [r4, #0]
 8010914:	bd38      	pop	{r3, r4, r5, pc}
 8010916:	bf00      	nop
 8010918:	2000ee0c 	.word	0x2000ee0c

0801091c <_isatty_r>:
 801091c:	b538      	push	{r3, r4, r5, lr}
 801091e:	4d06      	ldr	r5, [pc, #24]	; (8010938 <_isatty_r+0x1c>)
 8010920:	2300      	movs	r3, #0
 8010922:	4604      	mov	r4, r0
 8010924:	4608      	mov	r0, r1
 8010926:	602b      	str	r3, [r5, #0]
 8010928:	f7f1 ff61 	bl	80027ee <_isatty>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_isatty_r+0x1a>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_isatty_r+0x1a>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	2000ee0c 	.word	0x2000ee0c
 801093c:	00000000 	.word	0x00000000

08010940 <log>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	ed2d 8b02 	vpush	{d8}
 8010946:	ec55 4b10 	vmov	r4, r5, d0
 801094a:	f000 f8bd 	bl	8010ac8 <__ieee754_log>
 801094e:	4622      	mov	r2, r4
 8010950:	462b      	mov	r3, r5
 8010952:	4620      	mov	r0, r4
 8010954:	4629      	mov	r1, r5
 8010956:	eeb0 8a40 	vmov.f32	s16, s0
 801095a:	eef0 8a60 	vmov.f32	s17, s1
 801095e:	f7f0 f905 	bl	8000b6c <__aeabi_dcmpun>
 8010962:	b998      	cbnz	r0, 801098c <log+0x4c>
 8010964:	2200      	movs	r2, #0
 8010966:	2300      	movs	r3, #0
 8010968:	4620      	mov	r0, r4
 801096a:	4629      	mov	r1, r5
 801096c:	f7f0 f8f4 	bl	8000b58 <__aeabi_dcmpgt>
 8010970:	b960      	cbnz	r0, 801098c <log+0x4c>
 8010972:	2200      	movs	r2, #0
 8010974:	2300      	movs	r3, #0
 8010976:	4620      	mov	r0, r4
 8010978:	4629      	mov	r1, r5
 801097a:	f7f0 f8c5 	bl	8000b08 <__aeabi_dcmpeq>
 801097e:	b160      	cbz	r0, 801099a <log+0x5a>
 8010980:	f7fd ff36 	bl	800e7f0 <__errno>
 8010984:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80109b0 <log+0x70>
 8010988:	2322      	movs	r3, #34	; 0x22
 801098a:	6003      	str	r3, [r0, #0]
 801098c:	eeb0 0a48 	vmov.f32	s0, s16
 8010990:	eef0 0a68 	vmov.f32	s1, s17
 8010994:	ecbd 8b02 	vpop	{d8}
 8010998:	bd38      	pop	{r3, r4, r5, pc}
 801099a:	f7fd ff29 	bl	800e7f0 <__errno>
 801099e:	ecbd 8b02 	vpop	{d8}
 80109a2:	2321      	movs	r3, #33	; 0x21
 80109a4:	6003      	str	r3, [r0, #0]
 80109a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109aa:	4803      	ldr	r0, [pc, #12]	; (80109b8 <log+0x78>)
 80109ac:	f000 b884 	b.w	8010ab8 <nan>
 80109b0:	00000000 	.word	0x00000000
 80109b4:	fff00000 	.word	0xfff00000
 80109b8:	080121a2 	.word	0x080121a2

080109bc <pow>:
 80109bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109be:	ed2d 8b02 	vpush	{d8}
 80109c2:	eeb0 8a40 	vmov.f32	s16, s0
 80109c6:	eef0 8a60 	vmov.f32	s17, s1
 80109ca:	ec55 4b11 	vmov	r4, r5, d1
 80109ce:	f000 fa37 	bl	8010e40 <__ieee754_pow>
 80109d2:	4622      	mov	r2, r4
 80109d4:	462b      	mov	r3, r5
 80109d6:	4620      	mov	r0, r4
 80109d8:	4629      	mov	r1, r5
 80109da:	ec57 6b10 	vmov	r6, r7, d0
 80109de:	f7f0 f8c5 	bl	8000b6c <__aeabi_dcmpun>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d13b      	bne.n	8010a5e <pow+0xa2>
 80109e6:	ec51 0b18 	vmov	r0, r1, d8
 80109ea:	2200      	movs	r2, #0
 80109ec:	2300      	movs	r3, #0
 80109ee:	f7f0 f88b 	bl	8000b08 <__aeabi_dcmpeq>
 80109f2:	b1b8      	cbz	r0, 8010a24 <pow+0x68>
 80109f4:	2200      	movs	r2, #0
 80109f6:	2300      	movs	r3, #0
 80109f8:	4620      	mov	r0, r4
 80109fa:	4629      	mov	r1, r5
 80109fc:	f7f0 f884 	bl	8000b08 <__aeabi_dcmpeq>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	d146      	bne.n	8010a92 <pow+0xd6>
 8010a04:	ec45 4b10 	vmov	d0, r4, r5
 8010a08:	f000 f848 	bl	8010a9c <finite>
 8010a0c:	b338      	cbz	r0, 8010a5e <pow+0xa2>
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2300      	movs	r3, #0
 8010a12:	4620      	mov	r0, r4
 8010a14:	4629      	mov	r1, r5
 8010a16:	f7f0 f881 	bl	8000b1c <__aeabi_dcmplt>
 8010a1a:	b300      	cbz	r0, 8010a5e <pow+0xa2>
 8010a1c:	f7fd fee8 	bl	800e7f0 <__errno>
 8010a20:	2322      	movs	r3, #34	; 0x22
 8010a22:	e01b      	b.n	8010a5c <pow+0xa0>
 8010a24:	ec47 6b10 	vmov	d0, r6, r7
 8010a28:	f000 f838 	bl	8010a9c <finite>
 8010a2c:	b9e0      	cbnz	r0, 8010a68 <pow+0xac>
 8010a2e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a32:	eef0 0a68 	vmov.f32	s1, s17
 8010a36:	f000 f831 	bl	8010a9c <finite>
 8010a3a:	b1a8      	cbz	r0, 8010a68 <pow+0xac>
 8010a3c:	ec45 4b10 	vmov	d0, r4, r5
 8010a40:	f000 f82c 	bl	8010a9c <finite>
 8010a44:	b180      	cbz	r0, 8010a68 <pow+0xac>
 8010a46:	4632      	mov	r2, r6
 8010a48:	463b      	mov	r3, r7
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	4639      	mov	r1, r7
 8010a4e:	f7f0 f88d 	bl	8000b6c <__aeabi_dcmpun>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d0e2      	beq.n	8010a1c <pow+0x60>
 8010a56:	f7fd fecb 	bl	800e7f0 <__errno>
 8010a5a:	2321      	movs	r3, #33	; 0x21
 8010a5c:	6003      	str	r3, [r0, #0]
 8010a5e:	ecbd 8b02 	vpop	{d8}
 8010a62:	ec47 6b10 	vmov	d0, r6, r7
 8010a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	4639      	mov	r1, r7
 8010a70:	f7f0 f84a 	bl	8000b08 <__aeabi_dcmpeq>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d0f2      	beq.n	8010a5e <pow+0xa2>
 8010a78:	eeb0 0a48 	vmov.f32	s0, s16
 8010a7c:	eef0 0a68 	vmov.f32	s1, s17
 8010a80:	f000 f80c 	bl	8010a9c <finite>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d0ea      	beq.n	8010a5e <pow+0xa2>
 8010a88:	ec45 4b10 	vmov	d0, r4, r5
 8010a8c:	f000 f806 	bl	8010a9c <finite>
 8010a90:	e7c3      	b.n	8010a1a <pow+0x5e>
 8010a92:	4f01      	ldr	r7, [pc, #4]	; (8010a98 <pow+0xdc>)
 8010a94:	2600      	movs	r6, #0
 8010a96:	e7e2      	b.n	8010a5e <pow+0xa2>
 8010a98:	3ff00000 	.word	0x3ff00000

08010a9c <finite>:
 8010a9c:	b082      	sub	sp, #8
 8010a9e:	ed8d 0b00 	vstr	d0, [sp]
 8010aa2:	9801      	ldr	r0, [sp, #4]
 8010aa4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010aa8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010aac:	0fc0      	lsrs	r0, r0, #31
 8010aae:	b002      	add	sp, #8
 8010ab0:	4770      	bx	lr
 8010ab2:	0000      	movs	r0, r0
 8010ab4:	0000      	movs	r0, r0
	...

08010ab8 <nan>:
 8010ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010ac0 <nan+0x8>
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	00000000 	.word	0x00000000
 8010ac4:	7ff80000 	.word	0x7ff80000

08010ac8 <__ieee754_log>:
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	ec51 0b10 	vmov	r0, r1, d0
 8010ad0:	ed2d 8b04 	vpush	{d8-d9}
 8010ad4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010ad8:	b083      	sub	sp, #12
 8010ada:	460d      	mov	r5, r1
 8010adc:	da29      	bge.n	8010b32 <__ieee754_log+0x6a>
 8010ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ae2:	4303      	orrs	r3, r0
 8010ae4:	ee10 2a10 	vmov	r2, s0
 8010ae8:	d10c      	bne.n	8010b04 <__ieee754_log+0x3c>
 8010aea:	49cf      	ldr	r1, [pc, #828]	; (8010e28 <__ieee754_log+0x360>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	2300      	movs	r3, #0
 8010af0:	2000      	movs	r0, #0
 8010af2:	f7ef fecb 	bl	800088c <__aeabi_ddiv>
 8010af6:	ec41 0b10 	vmov	d0, r0, r1
 8010afa:	b003      	add	sp, #12
 8010afc:	ecbd 8b04 	vpop	{d8-d9}
 8010b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b04:	2900      	cmp	r1, #0
 8010b06:	da05      	bge.n	8010b14 <__ieee754_log+0x4c>
 8010b08:	460b      	mov	r3, r1
 8010b0a:	f7ef fbdd 	bl	80002c8 <__aeabi_dsub>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	2300      	movs	r3, #0
 8010b12:	e7ee      	b.n	8010af2 <__ieee754_log+0x2a>
 8010b14:	4bc5      	ldr	r3, [pc, #788]	; (8010e2c <__ieee754_log+0x364>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	f7ef fd8e 	bl	8000638 <__aeabi_dmul>
 8010b1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010b20:	460d      	mov	r5, r1
 8010b22:	4ac3      	ldr	r2, [pc, #780]	; (8010e30 <__ieee754_log+0x368>)
 8010b24:	4295      	cmp	r5, r2
 8010b26:	dd06      	ble.n	8010b36 <__ieee754_log+0x6e>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	f7ef fbce 	bl	80002cc <__adddf3>
 8010b30:	e7e1      	b.n	8010af6 <__ieee754_log+0x2e>
 8010b32:	2300      	movs	r3, #0
 8010b34:	e7f5      	b.n	8010b22 <__ieee754_log+0x5a>
 8010b36:	152c      	asrs	r4, r5, #20
 8010b38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010b3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010b40:	441c      	add	r4, r3
 8010b42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010b46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010b52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010b56:	ea42 0105 	orr.w	r1, r2, r5
 8010b5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010b5e:	2200      	movs	r2, #0
 8010b60:	4bb4      	ldr	r3, [pc, #720]	; (8010e34 <__ieee754_log+0x36c>)
 8010b62:	f7ef fbb1 	bl	80002c8 <__aeabi_dsub>
 8010b66:	1cab      	adds	r3, r5, #2
 8010b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b6c:	2b02      	cmp	r3, #2
 8010b6e:	4682      	mov	sl, r0
 8010b70:	468b      	mov	fp, r1
 8010b72:	f04f 0200 	mov.w	r2, #0
 8010b76:	dc53      	bgt.n	8010c20 <__ieee754_log+0x158>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f7ef ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8010b7e:	b1d0      	cbz	r0, 8010bb6 <__ieee754_log+0xee>
 8010b80:	2c00      	cmp	r4, #0
 8010b82:	f000 8122 	beq.w	8010dca <__ieee754_log+0x302>
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ef fcec 	bl	8000564 <__aeabi_i2d>
 8010b8c:	a390      	add	r3, pc, #576	; (adr r3, 8010dd0 <__ieee754_log+0x308>)
 8010b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b92:	4606      	mov	r6, r0
 8010b94:	460f      	mov	r7, r1
 8010b96:	f7ef fd4f 	bl	8000638 <__aeabi_dmul>
 8010b9a:	a38f      	add	r3, pc, #572	; (adr r3, 8010dd8 <__ieee754_log+0x310>)
 8010b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	460d      	mov	r5, r1
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	4639      	mov	r1, r7
 8010ba8:	f7ef fd46 	bl	8000638 <__aeabi_dmul>
 8010bac:	4602      	mov	r2, r0
 8010bae:	460b      	mov	r3, r1
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	e7ba      	b.n	8010b2c <__ieee754_log+0x64>
 8010bb6:	a38a      	add	r3, pc, #552	; (adr r3, 8010de0 <__ieee754_log+0x318>)
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	4650      	mov	r0, sl
 8010bbe:	4659      	mov	r1, fp
 8010bc0:	f7ef fd3a 	bl	8000638 <__aeabi_dmul>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	2000      	movs	r0, #0
 8010bca:	499b      	ldr	r1, [pc, #620]	; (8010e38 <__ieee754_log+0x370>)
 8010bcc:	f7ef fb7c 	bl	80002c8 <__aeabi_dsub>
 8010bd0:	4652      	mov	r2, sl
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	460f      	mov	r7, r1
 8010bd6:	465b      	mov	r3, fp
 8010bd8:	4650      	mov	r0, sl
 8010bda:	4659      	mov	r1, fp
 8010bdc:	f7ef fd2c 	bl	8000638 <__aeabi_dmul>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	4630      	mov	r0, r6
 8010be6:	4639      	mov	r1, r7
 8010be8:	f7ef fd26 	bl	8000638 <__aeabi_dmul>
 8010bec:	4606      	mov	r6, r0
 8010bee:	460f      	mov	r7, r1
 8010bf0:	b914      	cbnz	r4, 8010bf8 <__ieee754_log+0x130>
 8010bf2:	4632      	mov	r2, r6
 8010bf4:	463b      	mov	r3, r7
 8010bf6:	e0a2      	b.n	8010d3e <__ieee754_log+0x276>
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f7ef fcb3 	bl	8000564 <__aeabi_i2d>
 8010bfe:	a374      	add	r3, pc, #464	; (adr r3, 8010dd0 <__ieee754_log+0x308>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	4680      	mov	r8, r0
 8010c06:	4689      	mov	r9, r1
 8010c08:	f7ef fd16 	bl	8000638 <__aeabi_dmul>
 8010c0c:	a372      	add	r3, pc, #456	; (adr r3, 8010dd8 <__ieee754_log+0x310>)
 8010c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c12:	4604      	mov	r4, r0
 8010c14:	460d      	mov	r5, r1
 8010c16:	4640      	mov	r0, r8
 8010c18:	4649      	mov	r1, r9
 8010c1a:	f7ef fd0d 	bl	8000638 <__aeabi_dmul>
 8010c1e:	e0a7      	b.n	8010d70 <__ieee754_log+0x2a8>
 8010c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c24:	f7ef fb52 	bl	80002cc <__adddf3>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	4650      	mov	r0, sl
 8010c2e:	4659      	mov	r1, fp
 8010c30:	f7ef fe2c 	bl	800088c <__aeabi_ddiv>
 8010c34:	ec41 0b18 	vmov	d8, r0, r1
 8010c38:	4620      	mov	r0, r4
 8010c3a:	f7ef fc93 	bl	8000564 <__aeabi_i2d>
 8010c3e:	ec53 2b18 	vmov	r2, r3, d8
 8010c42:	ec41 0b19 	vmov	d9, r0, r1
 8010c46:	ec51 0b18 	vmov	r0, r1, d8
 8010c4a:	f7ef fcf5 	bl	8000638 <__aeabi_dmul>
 8010c4e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010c52:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010c56:	9301      	str	r3, [sp, #4]
 8010c58:	4602      	mov	r2, r0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	4680      	mov	r8, r0
 8010c5e:	4689      	mov	r9, r1
 8010c60:	f7ef fcea 	bl	8000638 <__aeabi_dmul>
 8010c64:	a360      	add	r3, pc, #384	; (adr r3, 8010de8 <__ieee754_log+0x320>)
 8010c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	460f      	mov	r7, r1
 8010c6e:	f7ef fce3 	bl	8000638 <__aeabi_dmul>
 8010c72:	a35f      	add	r3, pc, #380	; (adr r3, 8010df0 <__ieee754_log+0x328>)
 8010c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c78:	f7ef fb28 	bl	80002cc <__adddf3>
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	463b      	mov	r3, r7
 8010c80:	f7ef fcda 	bl	8000638 <__aeabi_dmul>
 8010c84:	a35c      	add	r3, pc, #368	; (adr r3, 8010df8 <__ieee754_log+0x330>)
 8010c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8a:	f7ef fb1f 	bl	80002cc <__adddf3>
 8010c8e:	4632      	mov	r2, r6
 8010c90:	463b      	mov	r3, r7
 8010c92:	f7ef fcd1 	bl	8000638 <__aeabi_dmul>
 8010c96:	a35a      	add	r3, pc, #360	; (adr r3, 8010e00 <__ieee754_log+0x338>)
 8010c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9c:	f7ef fb16 	bl	80002cc <__adddf3>
 8010ca0:	4642      	mov	r2, r8
 8010ca2:	464b      	mov	r3, r9
 8010ca4:	f7ef fcc8 	bl	8000638 <__aeabi_dmul>
 8010ca8:	a357      	add	r3, pc, #348	; (adr r3, 8010e08 <__ieee754_log+0x340>)
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	4680      	mov	r8, r0
 8010cb0:	4689      	mov	r9, r1
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	4639      	mov	r1, r7
 8010cb6:	f7ef fcbf 	bl	8000638 <__aeabi_dmul>
 8010cba:	a355      	add	r3, pc, #340	; (adr r3, 8010e10 <__ieee754_log+0x348>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	f7ef fb04 	bl	80002cc <__adddf3>
 8010cc4:	4632      	mov	r2, r6
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	f7ef fcb6 	bl	8000638 <__aeabi_dmul>
 8010ccc:	a352      	add	r3, pc, #328	; (adr r3, 8010e18 <__ieee754_log+0x350>)
 8010cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd2:	f7ef fafb 	bl	80002cc <__adddf3>
 8010cd6:	4632      	mov	r2, r6
 8010cd8:	463b      	mov	r3, r7
 8010cda:	f7ef fcad 	bl	8000638 <__aeabi_dmul>
 8010cde:	460b      	mov	r3, r1
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	4649      	mov	r1, r9
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	f7ef faf1 	bl	80002cc <__adddf3>
 8010cea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010cee:	9b01      	ldr	r3, [sp, #4]
 8010cf0:	3551      	adds	r5, #81	; 0x51
 8010cf2:	431d      	orrs	r5, r3
 8010cf4:	2d00      	cmp	r5, #0
 8010cf6:	4680      	mov	r8, r0
 8010cf8:	4689      	mov	r9, r1
 8010cfa:	dd48      	ble.n	8010d8e <__ieee754_log+0x2c6>
 8010cfc:	4b4e      	ldr	r3, [pc, #312]	; (8010e38 <__ieee754_log+0x370>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	4650      	mov	r0, sl
 8010d02:	4659      	mov	r1, fp
 8010d04:	f7ef fc98 	bl	8000638 <__aeabi_dmul>
 8010d08:	4652      	mov	r2, sl
 8010d0a:	465b      	mov	r3, fp
 8010d0c:	f7ef fc94 	bl	8000638 <__aeabi_dmul>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4606      	mov	r6, r0
 8010d16:	460f      	mov	r7, r1
 8010d18:	4640      	mov	r0, r8
 8010d1a:	4649      	mov	r1, r9
 8010d1c:	f7ef fad6 	bl	80002cc <__adddf3>
 8010d20:	ec53 2b18 	vmov	r2, r3, d8
 8010d24:	f7ef fc88 	bl	8000638 <__aeabi_dmul>
 8010d28:	4680      	mov	r8, r0
 8010d2a:	4689      	mov	r9, r1
 8010d2c:	b964      	cbnz	r4, 8010d48 <__ieee754_log+0x280>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	460b      	mov	r3, r1
 8010d32:	4630      	mov	r0, r6
 8010d34:	4639      	mov	r1, r7
 8010d36:	f7ef fac7 	bl	80002c8 <__aeabi_dsub>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4650      	mov	r0, sl
 8010d40:	4659      	mov	r1, fp
 8010d42:	f7ef fac1 	bl	80002c8 <__aeabi_dsub>
 8010d46:	e6d6      	b.n	8010af6 <__ieee754_log+0x2e>
 8010d48:	a321      	add	r3, pc, #132	; (adr r3, 8010dd0 <__ieee754_log+0x308>)
 8010d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4e:	ec51 0b19 	vmov	r0, r1, d9
 8010d52:	f7ef fc71 	bl	8000638 <__aeabi_dmul>
 8010d56:	a320      	add	r3, pc, #128	; (adr r3, 8010dd8 <__ieee754_log+0x310>)
 8010d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5c:	4604      	mov	r4, r0
 8010d5e:	460d      	mov	r5, r1
 8010d60:	ec51 0b19 	vmov	r0, r1, d9
 8010d64:	f7ef fc68 	bl	8000638 <__aeabi_dmul>
 8010d68:	4642      	mov	r2, r8
 8010d6a:	464b      	mov	r3, r9
 8010d6c:	f7ef faae 	bl	80002cc <__adddf3>
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	4630      	mov	r0, r6
 8010d76:	4639      	mov	r1, r7
 8010d78:	f7ef faa6 	bl	80002c8 <__aeabi_dsub>
 8010d7c:	4652      	mov	r2, sl
 8010d7e:	465b      	mov	r3, fp
 8010d80:	f7ef faa2 	bl	80002c8 <__aeabi_dsub>
 8010d84:	4602      	mov	r2, r0
 8010d86:	460b      	mov	r3, r1
 8010d88:	4620      	mov	r0, r4
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	e7d9      	b.n	8010d42 <__ieee754_log+0x27a>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	4650      	mov	r0, sl
 8010d94:	4659      	mov	r1, fp
 8010d96:	f7ef fa97 	bl	80002c8 <__aeabi_dsub>
 8010d9a:	ec53 2b18 	vmov	r2, r3, d8
 8010d9e:	f7ef fc4b 	bl	8000638 <__aeabi_dmul>
 8010da2:	4606      	mov	r6, r0
 8010da4:	460f      	mov	r7, r1
 8010da6:	2c00      	cmp	r4, #0
 8010da8:	f43f af23 	beq.w	8010bf2 <__ieee754_log+0x12a>
 8010dac:	a308      	add	r3, pc, #32	; (adr r3, 8010dd0 <__ieee754_log+0x308>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	ec51 0b19 	vmov	r0, r1, d9
 8010db6:	f7ef fc3f 	bl	8000638 <__aeabi_dmul>
 8010dba:	a307      	add	r3, pc, #28	; (adr r3, 8010dd8 <__ieee754_log+0x310>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	ec51 0b19 	vmov	r0, r1, d9
 8010dc8:	e727      	b.n	8010c1a <__ieee754_log+0x152>
 8010dca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010e20 <__ieee754_log+0x358>
 8010dce:	e694      	b.n	8010afa <__ieee754_log+0x32>
 8010dd0:	fee00000 	.word	0xfee00000
 8010dd4:	3fe62e42 	.word	0x3fe62e42
 8010dd8:	35793c76 	.word	0x35793c76
 8010ddc:	3dea39ef 	.word	0x3dea39ef
 8010de0:	55555555 	.word	0x55555555
 8010de4:	3fd55555 	.word	0x3fd55555
 8010de8:	df3e5244 	.word	0xdf3e5244
 8010dec:	3fc2f112 	.word	0x3fc2f112
 8010df0:	96cb03de 	.word	0x96cb03de
 8010df4:	3fc74664 	.word	0x3fc74664
 8010df8:	94229359 	.word	0x94229359
 8010dfc:	3fd24924 	.word	0x3fd24924
 8010e00:	55555593 	.word	0x55555593
 8010e04:	3fe55555 	.word	0x3fe55555
 8010e08:	d078c69f 	.word	0xd078c69f
 8010e0c:	3fc39a09 	.word	0x3fc39a09
 8010e10:	1d8e78af 	.word	0x1d8e78af
 8010e14:	3fcc71c5 	.word	0x3fcc71c5
 8010e18:	9997fa04 	.word	0x9997fa04
 8010e1c:	3fd99999 	.word	0x3fd99999
	...
 8010e28:	c3500000 	.word	0xc3500000
 8010e2c:	43500000 	.word	0x43500000
 8010e30:	7fefffff 	.word	0x7fefffff
 8010e34:	3ff00000 	.word	0x3ff00000
 8010e38:	3fe00000 	.word	0x3fe00000
 8010e3c:	00000000 	.word	0x00000000

08010e40 <__ieee754_pow>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	ed2d 8b06 	vpush	{d8-d10}
 8010e48:	b089      	sub	sp, #36	; 0x24
 8010e4a:	ed8d 1b00 	vstr	d1, [sp]
 8010e4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010e52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010e56:	ea58 0102 	orrs.w	r1, r8, r2
 8010e5a:	ec57 6b10 	vmov	r6, r7, d0
 8010e5e:	d115      	bne.n	8010e8c <__ieee754_pow+0x4c>
 8010e60:	19b3      	adds	r3, r6, r6
 8010e62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010e66:	4152      	adcs	r2, r2
 8010e68:	4299      	cmp	r1, r3
 8010e6a:	4b89      	ldr	r3, [pc, #548]	; (8011090 <__ieee754_pow+0x250>)
 8010e6c:	4193      	sbcs	r3, r2
 8010e6e:	f080 84d1 	bcs.w	8011814 <__ieee754_pow+0x9d4>
 8010e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	f7ef fa27 	bl	80002cc <__adddf3>
 8010e7e:	ec41 0b10 	vmov	d0, r0, r1
 8010e82:	b009      	add	sp, #36	; 0x24
 8010e84:	ecbd 8b06 	vpop	{d8-d10}
 8010e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8c:	4b81      	ldr	r3, [pc, #516]	; (8011094 <__ieee754_pow+0x254>)
 8010e8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010e92:	429c      	cmp	r4, r3
 8010e94:	ee10 aa10 	vmov	sl, s0
 8010e98:	463d      	mov	r5, r7
 8010e9a:	dc06      	bgt.n	8010eaa <__ieee754_pow+0x6a>
 8010e9c:	d101      	bne.n	8010ea2 <__ieee754_pow+0x62>
 8010e9e:	2e00      	cmp	r6, #0
 8010ea0:	d1e7      	bne.n	8010e72 <__ieee754_pow+0x32>
 8010ea2:	4598      	cmp	r8, r3
 8010ea4:	dc01      	bgt.n	8010eaa <__ieee754_pow+0x6a>
 8010ea6:	d10f      	bne.n	8010ec8 <__ieee754_pow+0x88>
 8010ea8:	b172      	cbz	r2, 8010ec8 <__ieee754_pow+0x88>
 8010eaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010eae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010eb2:	ea55 050a 	orrs.w	r5, r5, sl
 8010eb6:	d1dc      	bne.n	8010e72 <__ieee754_pow+0x32>
 8010eb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010ebc:	18db      	adds	r3, r3, r3
 8010ebe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010ec2:	4152      	adcs	r2, r2
 8010ec4:	429d      	cmp	r5, r3
 8010ec6:	e7d0      	b.n	8010e6a <__ieee754_pow+0x2a>
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	da3b      	bge.n	8010f44 <__ieee754_pow+0x104>
 8010ecc:	4b72      	ldr	r3, [pc, #456]	; (8011098 <__ieee754_pow+0x258>)
 8010ece:	4598      	cmp	r8, r3
 8010ed0:	dc51      	bgt.n	8010f76 <__ieee754_pow+0x136>
 8010ed2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010ed6:	4598      	cmp	r8, r3
 8010ed8:	f340 84ab 	ble.w	8011832 <__ieee754_pow+0x9f2>
 8010edc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010ee4:	2b14      	cmp	r3, #20
 8010ee6:	dd0f      	ble.n	8010f08 <__ieee754_pow+0xc8>
 8010ee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010eec:	fa22 f103 	lsr.w	r1, r2, r3
 8010ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	f040 849c 	bne.w	8011832 <__ieee754_pow+0x9f2>
 8010efa:	f001 0101 	and.w	r1, r1, #1
 8010efe:	f1c1 0302 	rsb	r3, r1, #2
 8010f02:	9304      	str	r3, [sp, #16]
 8010f04:	b182      	cbz	r2, 8010f28 <__ieee754_pow+0xe8>
 8010f06:	e05f      	b.n	8010fc8 <__ieee754_pow+0x188>
 8010f08:	2a00      	cmp	r2, #0
 8010f0a:	d15b      	bne.n	8010fc4 <__ieee754_pow+0x184>
 8010f0c:	f1c3 0314 	rsb	r3, r3, #20
 8010f10:	fa48 f103 	asr.w	r1, r8, r3
 8010f14:	fa01 f303 	lsl.w	r3, r1, r3
 8010f18:	4543      	cmp	r3, r8
 8010f1a:	f040 8487 	bne.w	801182c <__ieee754_pow+0x9ec>
 8010f1e:	f001 0101 	and.w	r1, r1, #1
 8010f22:	f1c1 0302 	rsb	r3, r1, #2
 8010f26:	9304      	str	r3, [sp, #16]
 8010f28:	4b5c      	ldr	r3, [pc, #368]	; (801109c <__ieee754_pow+0x25c>)
 8010f2a:	4598      	cmp	r8, r3
 8010f2c:	d132      	bne.n	8010f94 <__ieee754_pow+0x154>
 8010f2e:	f1b9 0f00 	cmp.w	r9, #0
 8010f32:	f280 8477 	bge.w	8011824 <__ieee754_pow+0x9e4>
 8010f36:	4959      	ldr	r1, [pc, #356]	; (801109c <__ieee754_pow+0x25c>)
 8010f38:	4632      	mov	r2, r6
 8010f3a:	463b      	mov	r3, r7
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	f7ef fca5 	bl	800088c <__aeabi_ddiv>
 8010f42:	e79c      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f44:	2300      	movs	r3, #0
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	d13d      	bne.n	8010fc8 <__ieee754_pow+0x188>
 8010f4c:	4b51      	ldr	r3, [pc, #324]	; (8011094 <__ieee754_pow+0x254>)
 8010f4e:	4598      	cmp	r8, r3
 8010f50:	d1ea      	bne.n	8010f28 <__ieee754_pow+0xe8>
 8010f52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010f56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010f5a:	ea53 030a 	orrs.w	r3, r3, sl
 8010f5e:	f000 8459 	beq.w	8011814 <__ieee754_pow+0x9d4>
 8010f62:	4b4f      	ldr	r3, [pc, #316]	; (80110a0 <__ieee754_pow+0x260>)
 8010f64:	429c      	cmp	r4, r3
 8010f66:	dd08      	ble.n	8010f7a <__ieee754_pow+0x13a>
 8010f68:	f1b9 0f00 	cmp.w	r9, #0
 8010f6c:	f2c0 8456 	blt.w	801181c <__ieee754_pow+0x9dc>
 8010f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f74:	e783      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f76:	2302      	movs	r3, #2
 8010f78:	e7e5      	b.n	8010f46 <__ieee754_pow+0x106>
 8010f7a:	f1b9 0f00 	cmp.w	r9, #0
 8010f7e:	f04f 0000 	mov.w	r0, #0
 8010f82:	f04f 0100 	mov.w	r1, #0
 8010f86:	f6bf af7a 	bge.w	8010e7e <__ieee754_pow+0x3e>
 8010f8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010f8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f92:	e774      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010f94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010f98:	d106      	bne.n	8010fa8 <__ieee754_pow+0x168>
 8010f9a:	4632      	mov	r2, r6
 8010f9c:	463b      	mov	r3, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	f7ef fb49 	bl	8000638 <__aeabi_dmul>
 8010fa6:	e76a      	b.n	8010e7e <__ieee754_pow+0x3e>
 8010fa8:	4b3e      	ldr	r3, [pc, #248]	; (80110a4 <__ieee754_pow+0x264>)
 8010faa:	4599      	cmp	r9, r3
 8010fac:	d10c      	bne.n	8010fc8 <__ieee754_pow+0x188>
 8010fae:	2d00      	cmp	r5, #0
 8010fb0:	db0a      	blt.n	8010fc8 <__ieee754_pow+0x188>
 8010fb2:	ec47 6b10 	vmov	d0, r6, r7
 8010fb6:	b009      	add	sp, #36	; 0x24
 8010fb8:	ecbd 8b06 	vpop	{d8-d10}
 8010fbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc0:	f000 bd20 	b.w	8011a04 <__ieee754_sqrt>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9304      	str	r3, [sp, #16]
 8010fc8:	ec47 6b10 	vmov	d0, r6, r7
 8010fcc:	f000 fc62 	bl	8011894 <fabs>
 8010fd0:	ec51 0b10 	vmov	r0, r1, d0
 8010fd4:	f1ba 0f00 	cmp.w	sl, #0
 8010fd8:	d129      	bne.n	801102e <__ieee754_pow+0x1ee>
 8010fda:	b124      	cbz	r4, 8010fe6 <__ieee754_pow+0x1a6>
 8010fdc:	4b2f      	ldr	r3, [pc, #188]	; (801109c <__ieee754_pow+0x25c>)
 8010fde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d123      	bne.n	801102e <__ieee754_pow+0x1ee>
 8010fe6:	f1b9 0f00 	cmp.w	r9, #0
 8010fea:	da05      	bge.n	8010ff8 <__ieee754_pow+0x1b8>
 8010fec:	4602      	mov	r2, r0
 8010fee:	460b      	mov	r3, r1
 8010ff0:	2000      	movs	r0, #0
 8010ff2:	492a      	ldr	r1, [pc, #168]	; (801109c <__ieee754_pow+0x25c>)
 8010ff4:	f7ef fc4a 	bl	800088c <__aeabi_ddiv>
 8010ff8:	2d00      	cmp	r5, #0
 8010ffa:	f6bf af40 	bge.w	8010e7e <__ieee754_pow+0x3e>
 8010ffe:	9b04      	ldr	r3, [sp, #16]
 8011000:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011004:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011008:	431c      	orrs	r4, r3
 801100a:	d108      	bne.n	801101e <__ieee754_pow+0x1de>
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	4610      	mov	r0, r2
 8011012:	4619      	mov	r1, r3
 8011014:	f7ef f958 	bl	80002c8 <__aeabi_dsub>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	e78f      	b.n	8010f3e <__ieee754_pow+0xfe>
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	2b01      	cmp	r3, #1
 8011022:	f47f af2c 	bne.w	8010e7e <__ieee754_pow+0x3e>
 8011026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801102a:	4619      	mov	r1, r3
 801102c:	e727      	b.n	8010e7e <__ieee754_pow+0x3e>
 801102e:	0feb      	lsrs	r3, r5, #31
 8011030:	3b01      	subs	r3, #1
 8011032:	9306      	str	r3, [sp, #24]
 8011034:	9a06      	ldr	r2, [sp, #24]
 8011036:	9b04      	ldr	r3, [sp, #16]
 8011038:	4313      	orrs	r3, r2
 801103a:	d102      	bne.n	8011042 <__ieee754_pow+0x202>
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	e7e6      	b.n	8011010 <__ieee754_pow+0x1d0>
 8011042:	4b19      	ldr	r3, [pc, #100]	; (80110a8 <__ieee754_pow+0x268>)
 8011044:	4598      	cmp	r8, r3
 8011046:	f340 80fb 	ble.w	8011240 <__ieee754_pow+0x400>
 801104a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801104e:	4598      	cmp	r8, r3
 8011050:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <__ieee754_pow+0x260>)
 8011052:	dd0c      	ble.n	801106e <__ieee754_pow+0x22e>
 8011054:	429c      	cmp	r4, r3
 8011056:	dc0f      	bgt.n	8011078 <__ieee754_pow+0x238>
 8011058:	f1b9 0f00 	cmp.w	r9, #0
 801105c:	da0f      	bge.n	801107e <__ieee754_pow+0x23e>
 801105e:	2000      	movs	r0, #0
 8011060:	b009      	add	sp, #36	; 0x24
 8011062:	ecbd 8b06 	vpop	{d8-d10}
 8011066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106a:	f000 bcc2 	b.w	80119f2 <__math_oflow>
 801106e:	429c      	cmp	r4, r3
 8011070:	dbf2      	blt.n	8011058 <__ieee754_pow+0x218>
 8011072:	4b0a      	ldr	r3, [pc, #40]	; (801109c <__ieee754_pow+0x25c>)
 8011074:	429c      	cmp	r4, r3
 8011076:	dd19      	ble.n	80110ac <__ieee754_pow+0x26c>
 8011078:	f1b9 0f00 	cmp.w	r9, #0
 801107c:	dcef      	bgt.n	801105e <__ieee754_pow+0x21e>
 801107e:	2000      	movs	r0, #0
 8011080:	b009      	add	sp, #36	; 0x24
 8011082:	ecbd 8b06 	vpop	{d8-d10}
 8011086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108a:	f000 bca9 	b.w	80119e0 <__math_uflow>
 801108e:	bf00      	nop
 8011090:	fff00000 	.word	0xfff00000
 8011094:	7ff00000 	.word	0x7ff00000
 8011098:	433fffff 	.word	0x433fffff
 801109c:	3ff00000 	.word	0x3ff00000
 80110a0:	3fefffff 	.word	0x3fefffff
 80110a4:	3fe00000 	.word	0x3fe00000
 80110a8:	41e00000 	.word	0x41e00000
 80110ac:	4b60      	ldr	r3, [pc, #384]	; (8011230 <__ieee754_pow+0x3f0>)
 80110ae:	2200      	movs	r2, #0
 80110b0:	f7ef f90a 	bl	80002c8 <__aeabi_dsub>
 80110b4:	a354      	add	r3, pc, #336	; (adr r3, 8011208 <__ieee754_pow+0x3c8>)
 80110b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ba:	4604      	mov	r4, r0
 80110bc:	460d      	mov	r5, r1
 80110be:	f7ef fabb 	bl	8000638 <__aeabi_dmul>
 80110c2:	a353      	add	r3, pc, #332	; (adr r3, 8011210 <__ieee754_pow+0x3d0>)
 80110c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7ef fab2 	bl	8000638 <__aeabi_dmul>
 80110d4:	4b57      	ldr	r3, [pc, #348]	; (8011234 <__ieee754_pow+0x3f4>)
 80110d6:	4682      	mov	sl, r0
 80110d8:	468b      	mov	fp, r1
 80110da:	2200      	movs	r2, #0
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7ef faaa 	bl	8000638 <__aeabi_dmul>
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	a14b      	add	r1, pc, #300	; (adr r1, 8011218 <__ieee754_pow+0x3d8>)
 80110ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110ee:	f7ef f8eb 	bl	80002c8 <__aeabi_dsub>
 80110f2:	4622      	mov	r2, r4
 80110f4:	462b      	mov	r3, r5
 80110f6:	f7ef fa9f 	bl	8000638 <__aeabi_dmul>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	2000      	movs	r0, #0
 8011100:	494d      	ldr	r1, [pc, #308]	; (8011238 <__ieee754_pow+0x3f8>)
 8011102:	f7ef f8e1 	bl	80002c8 <__aeabi_dsub>
 8011106:	4622      	mov	r2, r4
 8011108:	4680      	mov	r8, r0
 801110a:	4689      	mov	r9, r1
 801110c:	462b      	mov	r3, r5
 801110e:	4620      	mov	r0, r4
 8011110:	4629      	mov	r1, r5
 8011112:	f7ef fa91 	bl	8000638 <__aeabi_dmul>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4640      	mov	r0, r8
 801111c:	4649      	mov	r1, r9
 801111e:	f7ef fa8b 	bl	8000638 <__aeabi_dmul>
 8011122:	a33f      	add	r3, pc, #252	; (adr r3, 8011220 <__ieee754_pow+0x3e0>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7ef fa86 	bl	8000638 <__aeabi_dmul>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4650      	mov	r0, sl
 8011132:	4659      	mov	r1, fp
 8011134:	f7ef f8c8 	bl	80002c8 <__aeabi_dsub>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	4680      	mov	r8, r0
 801113e:	4689      	mov	r9, r1
 8011140:	4630      	mov	r0, r6
 8011142:	4639      	mov	r1, r7
 8011144:	f7ef f8c2 	bl	80002cc <__adddf3>
 8011148:	2000      	movs	r0, #0
 801114a:	4632      	mov	r2, r6
 801114c:	463b      	mov	r3, r7
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	f7ef f8b9 	bl	80002c8 <__aeabi_dsub>
 8011156:	4602      	mov	r2, r0
 8011158:	460b      	mov	r3, r1
 801115a:	4640      	mov	r0, r8
 801115c:	4649      	mov	r1, r9
 801115e:	f7ef f8b3 	bl	80002c8 <__aeabi_dsub>
 8011162:	9b04      	ldr	r3, [sp, #16]
 8011164:	9a06      	ldr	r2, [sp, #24]
 8011166:	3b01      	subs	r3, #1
 8011168:	4313      	orrs	r3, r2
 801116a:	4682      	mov	sl, r0
 801116c:	468b      	mov	fp, r1
 801116e:	f040 81e7 	bne.w	8011540 <__ieee754_pow+0x700>
 8011172:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011228 <__ieee754_pow+0x3e8>
 8011176:	eeb0 8a47 	vmov.f32	s16, s14
 801117a:	eef0 8a67 	vmov.f32	s17, s15
 801117e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011182:	2600      	movs	r6, #0
 8011184:	4632      	mov	r2, r6
 8011186:	463b      	mov	r3, r7
 8011188:	e9dd 0100 	ldrd	r0, r1, [sp]
 801118c:	f7ef f89c 	bl	80002c8 <__aeabi_dsub>
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	f7ef fa50 	bl	8000638 <__aeabi_dmul>
 8011198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801119c:	4680      	mov	r8, r0
 801119e:	4689      	mov	r9, r1
 80111a0:	4650      	mov	r0, sl
 80111a2:	4659      	mov	r1, fp
 80111a4:	f7ef fa48 	bl	8000638 <__aeabi_dmul>
 80111a8:	4602      	mov	r2, r0
 80111aa:	460b      	mov	r3, r1
 80111ac:	4640      	mov	r0, r8
 80111ae:	4649      	mov	r1, r9
 80111b0:	f7ef f88c 	bl	80002cc <__adddf3>
 80111b4:	4632      	mov	r2, r6
 80111b6:	463b      	mov	r3, r7
 80111b8:	4680      	mov	r8, r0
 80111ba:	4689      	mov	r9, r1
 80111bc:	4620      	mov	r0, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	f7ef fa3a 	bl	8000638 <__aeabi_dmul>
 80111c4:	460b      	mov	r3, r1
 80111c6:	4604      	mov	r4, r0
 80111c8:	460d      	mov	r5, r1
 80111ca:	4602      	mov	r2, r0
 80111cc:	4649      	mov	r1, r9
 80111ce:	4640      	mov	r0, r8
 80111d0:	f7ef f87c 	bl	80002cc <__adddf3>
 80111d4:	4b19      	ldr	r3, [pc, #100]	; (801123c <__ieee754_pow+0x3fc>)
 80111d6:	4299      	cmp	r1, r3
 80111d8:	ec45 4b19 	vmov	d9, r4, r5
 80111dc:	4606      	mov	r6, r0
 80111de:	460f      	mov	r7, r1
 80111e0:	468b      	mov	fp, r1
 80111e2:	f340 82f0 	ble.w	80117c6 <__ieee754_pow+0x986>
 80111e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80111ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80111ee:	4303      	orrs	r3, r0
 80111f0:	f000 81e4 	beq.w	80115bc <__ieee754_pow+0x77c>
 80111f4:	ec51 0b18 	vmov	r0, r1, d8
 80111f8:	2200      	movs	r2, #0
 80111fa:	2300      	movs	r3, #0
 80111fc:	f7ef fc8e 	bl	8000b1c <__aeabi_dcmplt>
 8011200:	3800      	subs	r0, #0
 8011202:	bf18      	it	ne
 8011204:	2001      	movne	r0, #1
 8011206:	e72b      	b.n	8011060 <__ieee754_pow+0x220>
 8011208:	60000000 	.word	0x60000000
 801120c:	3ff71547 	.word	0x3ff71547
 8011210:	f85ddf44 	.word	0xf85ddf44
 8011214:	3e54ae0b 	.word	0x3e54ae0b
 8011218:	55555555 	.word	0x55555555
 801121c:	3fd55555 	.word	0x3fd55555
 8011220:	652b82fe 	.word	0x652b82fe
 8011224:	3ff71547 	.word	0x3ff71547
 8011228:	00000000 	.word	0x00000000
 801122c:	bff00000 	.word	0xbff00000
 8011230:	3ff00000 	.word	0x3ff00000
 8011234:	3fd00000 	.word	0x3fd00000
 8011238:	3fe00000 	.word	0x3fe00000
 801123c:	408fffff 	.word	0x408fffff
 8011240:	4bd5      	ldr	r3, [pc, #852]	; (8011598 <__ieee754_pow+0x758>)
 8011242:	402b      	ands	r3, r5
 8011244:	2200      	movs	r2, #0
 8011246:	b92b      	cbnz	r3, 8011254 <__ieee754_pow+0x414>
 8011248:	4bd4      	ldr	r3, [pc, #848]	; (801159c <__ieee754_pow+0x75c>)
 801124a:	f7ef f9f5 	bl	8000638 <__aeabi_dmul>
 801124e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011252:	460c      	mov	r4, r1
 8011254:	1523      	asrs	r3, r4, #20
 8011256:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801125a:	4413      	add	r3, r2
 801125c:	9305      	str	r3, [sp, #20]
 801125e:	4bd0      	ldr	r3, [pc, #832]	; (80115a0 <__ieee754_pow+0x760>)
 8011260:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011264:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011268:	429c      	cmp	r4, r3
 801126a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801126e:	dd08      	ble.n	8011282 <__ieee754_pow+0x442>
 8011270:	4bcc      	ldr	r3, [pc, #816]	; (80115a4 <__ieee754_pow+0x764>)
 8011272:	429c      	cmp	r4, r3
 8011274:	f340 8162 	ble.w	801153c <__ieee754_pow+0x6fc>
 8011278:	9b05      	ldr	r3, [sp, #20]
 801127a:	3301      	adds	r3, #1
 801127c:	9305      	str	r3, [sp, #20]
 801127e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011282:	2400      	movs	r4, #0
 8011284:	00e3      	lsls	r3, r4, #3
 8011286:	9307      	str	r3, [sp, #28]
 8011288:	4bc7      	ldr	r3, [pc, #796]	; (80115a8 <__ieee754_pow+0x768>)
 801128a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801128e:	ed93 7b00 	vldr	d7, [r3]
 8011292:	4629      	mov	r1, r5
 8011294:	ec53 2b17 	vmov	r2, r3, d7
 8011298:	eeb0 9a47 	vmov.f32	s18, s14
 801129c:	eef0 9a67 	vmov.f32	s19, s15
 80112a0:	4682      	mov	sl, r0
 80112a2:	f7ef f811 	bl	80002c8 <__aeabi_dsub>
 80112a6:	4652      	mov	r2, sl
 80112a8:	4606      	mov	r6, r0
 80112aa:	460f      	mov	r7, r1
 80112ac:	462b      	mov	r3, r5
 80112ae:	ec51 0b19 	vmov	r0, r1, d9
 80112b2:	f7ef f80b 	bl	80002cc <__adddf3>
 80112b6:	4602      	mov	r2, r0
 80112b8:	460b      	mov	r3, r1
 80112ba:	2000      	movs	r0, #0
 80112bc:	49bb      	ldr	r1, [pc, #748]	; (80115ac <__ieee754_pow+0x76c>)
 80112be:	f7ef fae5 	bl	800088c <__aeabi_ddiv>
 80112c2:	ec41 0b1a 	vmov	d10, r0, r1
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ef f9b3 	bl	8000638 <__aeabi_dmul>
 80112d2:	2300      	movs	r3, #0
 80112d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d8:	9302      	str	r3, [sp, #8]
 80112da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80112de:	46ab      	mov	fp, r5
 80112e0:	106d      	asrs	r5, r5, #1
 80112e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80112e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80112ea:	ec41 0b18 	vmov	d8, r0, r1
 80112ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80112f2:	2200      	movs	r2, #0
 80112f4:	4640      	mov	r0, r8
 80112f6:	4649      	mov	r1, r9
 80112f8:	4614      	mov	r4, r2
 80112fa:	461d      	mov	r5, r3
 80112fc:	f7ef f99c 	bl	8000638 <__aeabi_dmul>
 8011300:	4602      	mov	r2, r0
 8011302:	460b      	mov	r3, r1
 8011304:	4630      	mov	r0, r6
 8011306:	4639      	mov	r1, r7
 8011308:	f7ee ffde 	bl	80002c8 <__aeabi_dsub>
 801130c:	ec53 2b19 	vmov	r2, r3, d9
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7ee ffd6 	bl	80002c8 <__aeabi_dsub>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	4650      	mov	r0, sl
 8011322:	4659      	mov	r1, fp
 8011324:	f7ee ffd0 	bl	80002c8 <__aeabi_dsub>
 8011328:	4642      	mov	r2, r8
 801132a:	464b      	mov	r3, r9
 801132c:	f7ef f984 	bl	8000638 <__aeabi_dmul>
 8011330:	4602      	mov	r2, r0
 8011332:	460b      	mov	r3, r1
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7ee ffc6 	bl	80002c8 <__aeabi_dsub>
 801133c:	ec53 2b1a 	vmov	r2, r3, d10
 8011340:	f7ef f97a 	bl	8000638 <__aeabi_dmul>
 8011344:	ec53 2b18 	vmov	r2, r3, d8
 8011348:	ec41 0b19 	vmov	d9, r0, r1
 801134c:	ec51 0b18 	vmov	r0, r1, d8
 8011350:	f7ef f972 	bl	8000638 <__aeabi_dmul>
 8011354:	a37c      	add	r3, pc, #496	; (adr r3, 8011548 <__ieee754_pow+0x708>)
 8011356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
 801135e:	f7ef f96b 	bl	8000638 <__aeabi_dmul>
 8011362:	a37b      	add	r3, pc, #492	; (adr r3, 8011550 <__ieee754_pow+0x710>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	f7ee ffb0 	bl	80002cc <__adddf3>
 801136c:	4622      	mov	r2, r4
 801136e:	462b      	mov	r3, r5
 8011370:	f7ef f962 	bl	8000638 <__aeabi_dmul>
 8011374:	a378      	add	r3, pc, #480	; (adr r3, 8011558 <__ieee754_pow+0x718>)
 8011376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137a:	f7ee ffa7 	bl	80002cc <__adddf3>
 801137e:	4622      	mov	r2, r4
 8011380:	462b      	mov	r3, r5
 8011382:	f7ef f959 	bl	8000638 <__aeabi_dmul>
 8011386:	a376      	add	r3, pc, #472	; (adr r3, 8011560 <__ieee754_pow+0x720>)
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	f7ee ff9e 	bl	80002cc <__adddf3>
 8011390:	4622      	mov	r2, r4
 8011392:	462b      	mov	r3, r5
 8011394:	f7ef f950 	bl	8000638 <__aeabi_dmul>
 8011398:	a373      	add	r3, pc, #460	; (adr r3, 8011568 <__ieee754_pow+0x728>)
 801139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139e:	f7ee ff95 	bl	80002cc <__adddf3>
 80113a2:	4622      	mov	r2, r4
 80113a4:	462b      	mov	r3, r5
 80113a6:	f7ef f947 	bl	8000638 <__aeabi_dmul>
 80113aa:	a371      	add	r3, pc, #452	; (adr r3, 8011570 <__ieee754_pow+0x730>)
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	f7ee ff8c 	bl	80002cc <__adddf3>
 80113b4:	4622      	mov	r2, r4
 80113b6:	4606      	mov	r6, r0
 80113b8:	460f      	mov	r7, r1
 80113ba:	462b      	mov	r3, r5
 80113bc:	4620      	mov	r0, r4
 80113be:	4629      	mov	r1, r5
 80113c0:	f7ef f93a 	bl	8000638 <__aeabi_dmul>
 80113c4:	4602      	mov	r2, r0
 80113c6:	460b      	mov	r3, r1
 80113c8:	4630      	mov	r0, r6
 80113ca:	4639      	mov	r1, r7
 80113cc:	f7ef f934 	bl	8000638 <__aeabi_dmul>
 80113d0:	4642      	mov	r2, r8
 80113d2:	4604      	mov	r4, r0
 80113d4:	460d      	mov	r5, r1
 80113d6:	464b      	mov	r3, r9
 80113d8:	ec51 0b18 	vmov	r0, r1, d8
 80113dc:	f7ee ff76 	bl	80002cc <__adddf3>
 80113e0:	ec53 2b19 	vmov	r2, r3, d9
 80113e4:	f7ef f928 	bl	8000638 <__aeabi_dmul>
 80113e8:	4622      	mov	r2, r4
 80113ea:	462b      	mov	r3, r5
 80113ec:	f7ee ff6e 	bl	80002cc <__adddf3>
 80113f0:	4642      	mov	r2, r8
 80113f2:	4682      	mov	sl, r0
 80113f4:	468b      	mov	fp, r1
 80113f6:	464b      	mov	r3, r9
 80113f8:	4640      	mov	r0, r8
 80113fa:	4649      	mov	r1, r9
 80113fc:	f7ef f91c 	bl	8000638 <__aeabi_dmul>
 8011400:	4b6b      	ldr	r3, [pc, #428]	; (80115b0 <__ieee754_pow+0x770>)
 8011402:	2200      	movs	r2, #0
 8011404:	4606      	mov	r6, r0
 8011406:	460f      	mov	r7, r1
 8011408:	f7ee ff60 	bl	80002cc <__adddf3>
 801140c:	4652      	mov	r2, sl
 801140e:	465b      	mov	r3, fp
 8011410:	f7ee ff5c 	bl	80002cc <__adddf3>
 8011414:	2000      	movs	r0, #0
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	4602      	mov	r2, r0
 801141c:	460b      	mov	r3, r1
 801141e:	4640      	mov	r0, r8
 8011420:	4649      	mov	r1, r9
 8011422:	f7ef f909 	bl	8000638 <__aeabi_dmul>
 8011426:	4b62      	ldr	r3, [pc, #392]	; (80115b0 <__ieee754_pow+0x770>)
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	2200      	movs	r2, #0
 801142e:	4620      	mov	r0, r4
 8011430:	4629      	mov	r1, r5
 8011432:	f7ee ff49 	bl	80002c8 <__aeabi_dsub>
 8011436:	4632      	mov	r2, r6
 8011438:	463b      	mov	r3, r7
 801143a:	f7ee ff45 	bl	80002c8 <__aeabi_dsub>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4650      	mov	r0, sl
 8011444:	4659      	mov	r1, fp
 8011446:	f7ee ff3f 	bl	80002c8 <__aeabi_dsub>
 801144a:	ec53 2b18 	vmov	r2, r3, d8
 801144e:	f7ef f8f3 	bl	8000638 <__aeabi_dmul>
 8011452:	4622      	mov	r2, r4
 8011454:	4606      	mov	r6, r0
 8011456:	460f      	mov	r7, r1
 8011458:	462b      	mov	r3, r5
 801145a:	ec51 0b19 	vmov	r0, r1, d9
 801145e:	f7ef f8eb 	bl	8000638 <__aeabi_dmul>
 8011462:	4602      	mov	r2, r0
 8011464:	460b      	mov	r3, r1
 8011466:	4630      	mov	r0, r6
 8011468:	4639      	mov	r1, r7
 801146a:	f7ee ff2f 	bl	80002cc <__adddf3>
 801146e:	4606      	mov	r6, r0
 8011470:	460f      	mov	r7, r1
 8011472:	4602      	mov	r2, r0
 8011474:	460b      	mov	r3, r1
 8011476:	4640      	mov	r0, r8
 8011478:	4649      	mov	r1, r9
 801147a:	f7ee ff27 	bl	80002cc <__adddf3>
 801147e:	a33e      	add	r3, pc, #248	; (adr r3, 8011578 <__ieee754_pow+0x738>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	2000      	movs	r0, #0
 8011486:	4604      	mov	r4, r0
 8011488:	460d      	mov	r5, r1
 801148a:	f7ef f8d5 	bl	8000638 <__aeabi_dmul>
 801148e:	4642      	mov	r2, r8
 8011490:	ec41 0b18 	vmov	d8, r0, r1
 8011494:	464b      	mov	r3, r9
 8011496:	4620      	mov	r0, r4
 8011498:	4629      	mov	r1, r5
 801149a:	f7ee ff15 	bl	80002c8 <__aeabi_dsub>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4630      	mov	r0, r6
 80114a4:	4639      	mov	r1, r7
 80114a6:	f7ee ff0f 	bl	80002c8 <__aeabi_dsub>
 80114aa:	a335      	add	r3, pc, #212	; (adr r3, 8011580 <__ieee754_pow+0x740>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	f7ef f8c2 	bl	8000638 <__aeabi_dmul>
 80114b4:	a334      	add	r3, pc, #208	; (adr r3, 8011588 <__ieee754_pow+0x748>)
 80114b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ba:	4606      	mov	r6, r0
 80114bc:	460f      	mov	r7, r1
 80114be:	4620      	mov	r0, r4
 80114c0:	4629      	mov	r1, r5
 80114c2:	f7ef f8b9 	bl	8000638 <__aeabi_dmul>
 80114c6:	4602      	mov	r2, r0
 80114c8:	460b      	mov	r3, r1
 80114ca:	4630      	mov	r0, r6
 80114cc:	4639      	mov	r1, r7
 80114ce:	f7ee fefd 	bl	80002cc <__adddf3>
 80114d2:	9a07      	ldr	r2, [sp, #28]
 80114d4:	4b37      	ldr	r3, [pc, #220]	; (80115b4 <__ieee754_pow+0x774>)
 80114d6:	4413      	add	r3, r2
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7ee fef6 	bl	80002cc <__adddf3>
 80114e0:	4682      	mov	sl, r0
 80114e2:	9805      	ldr	r0, [sp, #20]
 80114e4:	468b      	mov	fp, r1
 80114e6:	f7ef f83d 	bl	8000564 <__aeabi_i2d>
 80114ea:	9a07      	ldr	r2, [sp, #28]
 80114ec:	4b32      	ldr	r3, [pc, #200]	; (80115b8 <__ieee754_pow+0x778>)
 80114ee:	4413      	add	r3, r2
 80114f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80114f4:	4606      	mov	r6, r0
 80114f6:	460f      	mov	r7, r1
 80114f8:	4652      	mov	r2, sl
 80114fa:	465b      	mov	r3, fp
 80114fc:	ec51 0b18 	vmov	r0, r1, d8
 8011500:	f7ee fee4 	bl	80002cc <__adddf3>
 8011504:	4642      	mov	r2, r8
 8011506:	464b      	mov	r3, r9
 8011508:	f7ee fee0 	bl	80002cc <__adddf3>
 801150c:	4632      	mov	r2, r6
 801150e:	463b      	mov	r3, r7
 8011510:	f7ee fedc 	bl	80002cc <__adddf3>
 8011514:	2000      	movs	r0, #0
 8011516:	4632      	mov	r2, r6
 8011518:	463b      	mov	r3, r7
 801151a:	4604      	mov	r4, r0
 801151c:	460d      	mov	r5, r1
 801151e:	f7ee fed3 	bl	80002c8 <__aeabi_dsub>
 8011522:	4642      	mov	r2, r8
 8011524:	464b      	mov	r3, r9
 8011526:	f7ee fecf 	bl	80002c8 <__aeabi_dsub>
 801152a:	ec53 2b18 	vmov	r2, r3, d8
 801152e:	f7ee fecb 	bl	80002c8 <__aeabi_dsub>
 8011532:	4602      	mov	r2, r0
 8011534:	460b      	mov	r3, r1
 8011536:	4650      	mov	r0, sl
 8011538:	4659      	mov	r1, fp
 801153a:	e610      	b.n	801115e <__ieee754_pow+0x31e>
 801153c:	2401      	movs	r4, #1
 801153e:	e6a1      	b.n	8011284 <__ieee754_pow+0x444>
 8011540:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011590 <__ieee754_pow+0x750>
 8011544:	e617      	b.n	8011176 <__ieee754_pow+0x336>
 8011546:	bf00      	nop
 8011548:	4a454eef 	.word	0x4a454eef
 801154c:	3fca7e28 	.word	0x3fca7e28
 8011550:	93c9db65 	.word	0x93c9db65
 8011554:	3fcd864a 	.word	0x3fcd864a
 8011558:	a91d4101 	.word	0xa91d4101
 801155c:	3fd17460 	.word	0x3fd17460
 8011560:	518f264d 	.word	0x518f264d
 8011564:	3fd55555 	.word	0x3fd55555
 8011568:	db6fabff 	.word	0xdb6fabff
 801156c:	3fdb6db6 	.word	0x3fdb6db6
 8011570:	33333303 	.word	0x33333303
 8011574:	3fe33333 	.word	0x3fe33333
 8011578:	e0000000 	.word	0xe0000000
 801157c:	3feec709 	.word	0x3feec709
 8011580:	dc3a03fd 	.word	0xdc3a03fd
 8011584:	3feec709 	.word	0x3feec709
 8011588:	145b01f5 	.word	0x145b01f5
 801158c:	be3e2fe0 	.word	0xbe3e2fe0
 8011590:	00000000 	.word	0x00000000
 8011594:	3ff00000 	.word	0x3ff00000
 8011598:	7ff00000 	.word	0x7ff00000
 801159c:	43400000 	.word	0x43400000
 80115a0:	0003988e 	.word	0x0003988e
 80115a4:	000bb679 	.word	0x000bb679
 80115a8:	080122a8 	.word	0x080122a8
 80115ac:	3ff00000 	.word	0x3ff00000
 80115b0:	40080000 	.word	0x40080000
 80115b4:	080122c8 	.word	0x080122c8
 80115b8:	080122b8 	.word	0x080122b8
 80115bc:	a3b3      	add	r3, pc, #716	; (adr r3, 801188c <__ieee754_pow+0xa4c>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	4640      	mov	r0, r8
 80115c4:	4649      	mov	r1, r9
 80115c6:	f7ee fe81 	bl	80002cc <__adddf3>
 80115ca:	4622      	mov	r2, r4
 80115cc:	ec41 0b1a 	vmov	d10, r0, r1
 80115d0:	462b      	mov	r3, r5
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ee fe77 	bl	80002c8 <__aeabi_dsub>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	ec51 0b1a 	vmov	r0, r1, d10
 80115e2:	f7ef fab9 	bl	8000b58 <__aeabi_dcmpgt>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	f47f ae04 	bne.w	80111f4 <__ieee754_pow+0x3b4>
 80115ec:	4aa2      	ldr	r2, [pc, #648]	; (8011878 <__ieee754_pow+0xa38>)
 80115ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80115f2:	4293      	cmp	r3, r2
 80115f4:	f340 8107 	ble.w	8011806 <__ieee754_pow+0x9c6>
 80115f8:	151b      	asrs	r3, r3, #20
 80115fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80115fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011602:	fa4a fa03 	asr.w	sl, sl, r3
 8011606:	44da      	add	sl, fp
 8011608:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801160c:	489b      	ldr	r0, [pc, #620]	; (801187c <__ieee754_pow+0xa3c>)
 801160e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011612:	4108      	asrs	r0, r1
 8011614:	ea00 030a 	and.w	r3, r0, sl
 8011618:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801161c:	f1c1 0114 	rsb	r1, r1, #20
 8011620:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011624:	fa4a fa01 	asr.w	sl, sl, r1
 8011628:	f1bb 0f00 	cmp.w	fp, #0
 801162c:	f04f 0200 	mov.w	r2, #0
 8011630:	4620      	mov	r0, r4
 8011632:	4629      	mov	r1, r5
 8011634:	bfb8      	it	lt
 8011636:	f1ca 0a00 	rsblt	sl, sl, #0
 801163a:	f7ee fe45 	bl	80002c8 <__aeabi_dsub>
 801163e:	ec41 0b19 	vmov	d9, r0, r1
 8011642:	4642      	mov	r2, r8
 8011644:	464b      	mov	r3, r9
 8011646:	ec51 0b19 	vmov	r0, r1, d9
 801164a:	f7ee fe3f 	bl	80002cc <__adddf3>
 801164e:	a37a      	add	r3, pc, #488	; (adr r3, 8011838 <__ieee754_pow+0x9f8>)
 8011650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011654:	2000      	movs	r0, #0
 8011656:	4604      	mov	r4, r0
 8011658:	460d      	mov	r5, r1
 801165a:	f7ee ffed 	bl	8000638 <__aeabi_dmul>
 801165e:	ec53 2b19 	vmov	r2, r3, d9
 8011662:	4606      	mov	r6, r0
 8011664:	460f      	mov	r7, r1
 8011666:	4620      	mov	r0, r4
 8011668:	4629      	mov	r1, r5
 801166a:	f7ee fe2d 	bl	80002c8 <__aeabi_dsub>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4640      	mov	r0, r8
 8011674:	4649      	mov	r1, r9
 8011676:	f7ee fe27 	bl	80002c8 <__aeabi_dsub>
 801167a:	a371      	add	r3, pc, #452	; (adr r3, 8011840 <__ieee754_pow+0xa00>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	f7ee ffda 	bl	8000638 <__aeabi_dmul>
 8011684:	a370      	add	r3, pc, #448	; (adr r3, 8011848 <__ieee754_pow+0xa08>)
 8011686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168a:	4680      	mov	r8, r0
 801168c:	4689      	mov	r9, r1
 801168e:	4620      	mov	r0, r4
 8011690:	4629      	mov	r1, r5
 8011692:	f7ee ffd1 	bl	8000638 <__aeabi_dmul>
 8011696:	4602      	mov	r2, r0
 8011698:	460b      	mov	r3, r1
 801169a:	4640      	mov	r0, r8
 801169c:	4649      	mov	r1, r9
 801169e:	f7ee fe15 	bl	80002cc <__adddf3>
 80116a2:	4604      	mov	r4, r0
 80116a4:	460d      	mov	r5, r1
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4630      	mov	r0, r6
 80116ac:	4639      	mov	r1, r7
 80116ae:	f7ee fe0d 	bl	80002cc <__adddf3>
 80116b2:	4632      	mov	r2, r6
 80116b4:	463b      	mov	r3, r7
 80116b6:	4680      	mov	r8, r0
 80116b8:	4689      	mov	r9, r1
 80116ba:	f7ee fe05 	bl	80002c8 <__aeabi_dsub>
 80116be:	4602      	mov	r2, r0
 80116c0:	460b      	mov	r3, r1
 80116c2:	4620      	mov	r0, r4
 80116c4:	4629      	mov	r1, r5
 80116c6:	f7ee fdff 	bl	80002c8 <__aeabi_dsub>
 80116ca:	4642      	mov	r2, r8
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	464b      	mov	r3, r9
 80116d2:	4640      	mov	r0, r8
 80116d4:	4649      	mov	r1, r9
 80116d6:	f7ee ffaf 	bl	8000638 <__aeabi_dmul>
 80116da:	a35d      	add	r3, pc, #372	; (adr r3, 8011850 <__ieee754_pow+0xa10>)
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	4604      	mov	r4, r0
 80116e2:	460d      	mov	r5, r1
 80116e4:	f7ee ffa8 	bl	8000638 <__aeabi_dmul>
 80116e8:	a35b      	add	r3, pc, #364	; (adr r3, 8011858 <__ieee754_pow+0xa18>)
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f7ee fdeb 	bl	80002c8 <__aeabi_dsub>
 80116f2:	4622      	mov	r2, r4
 80116f4:	462b      	mov	r3, r5
 80116f6:	f7ee ff9f 	bl	8000638 <__aeabi_dmul>
 80116fa:	a359      	add	r3, pc, #356	; (adr r3, 8011860 <__ieee754_pow+0xa20>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	f7ee fde4 	bl	80002cc <__adddf3>
 8011704:	4622      	mov	r2, r4
 8011706:	462b      	mov	r3, r5
 8011708:	f7ee ff96 	bl	8000638 <__aeabi_dmul>
 801170c:	a356      	add	r3, pc, #344	; (adr r3, 8011868 <__ieee754_pow+0xa28>)
 801170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011712:	f7ee fdd9 	bl	80002c8 <__aeabi_dsub>
 8011716:	4622      	mov	r2, r4
 8011718:	462b      	mov	r3, r5
 801171a:	f7ee ff8d 	bl	8000638 <__aeabi_dmul>
 801171e:	a354      	add	r3, pc, #336	; (adr r3, 8011870 <__ieee754_pow+0xa30>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	f7ee fdd2 	bl	80002cc <__adddf3>
 8011728:	4622      	mov	r2, r4
 801172a:	462b      	mov	r3, r5
 801172c:	f7ee ff84 	bl	8000638 <__aeabi_dmul>
 8011730:	4602      	mov	r2, r0
 8011732:	460b      	mov	r3, r1
 8011734:	4640      	mov	r0, r8
 8011736:	4649      	mov	r1, r9
 8011738:	f7ee fdc6 	bl	80002c8 <__aeabi_dsub>
 801173c:	4604      	mov	r4, r0
 801173e:	460d      	mov	r5, r1
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	4640      	mov	r0, r8
 8011746:	4649      	mov	r1, r9
 8011748:	f7ee ff76 	bl	8000638 <__aeabi_dmul>
 801174c:	2200      	movs	r2, #0
 801174e:	ec41 0b19 	vmov	d9, r0, r1
 8011752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011756:	4620      	mov	r0, r4
 8011758:	4629      	mov	r1, r5
 801175a:	f7ee fdb5 	bl	80002c8 <__aeabi_dsub>
 801175e:	4602      	mov	r2, r0
 8011760:	460b      	mov	r3, r1
 8011762:	ec51 0b19 	vmov	r0, r1, d9
 8011766:	f7ef f891 	bl	800088c <__aeabi_ddiv>
 801176a:	4632      	mov	r2, r6
 801176c:	4604      	mov	r4, r0
 801176e:	460d      	mov	r5, r1
 8011770:	463b      	mov	r3, r7
 8011772:	4640      	mov	r0, r8
 8011774:	4649      	mov	r1, r9
 8011776:	f7ee ff5f 	bl	8000638 <__aeabi_dmul>
 801177a:	4632      	mov	r2, r6
 801177c:	463b      	mov	r3, r7
 801177e:	f7ee fda5 	bl	80002cc <__adddf3>
 8011782:	4602      	mov	r2, r0
 8011784:	460b      	mov	r3, r1
 8011786:	4620      	mov	r0, r4
 8011788:	4629      	mov	r1, r5
 801178a:	f7ee fd9d 	bl	80002c8 <__aeabi_dsub>
 801178e:	4642      	mov	r2, r8
 8011790:	464b      	mov	r3, r9
 8011792:	f7ee fd99 	bl	80002c8 <__aeabi_dsub>
 8011796:	460b      	mov	r3, r1
 8011798:	4602      	mov	r2, r0
 801179a:	4939      	ldr	r1, [pc, #228]	; (8011880 <__ieee754_pow+0xa40>)
 801179c:	2000      	movs	r0, #0
 801179e:	f7ee fd93 	bl	80002c8 <__aeabi_dsub>
 80117a2:	ec41 0b10 	vmov	d0, r0, r1
 80117a6:	ee10 3a90 	vmov	r3, s1
 80117aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80117ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117b2:	da2b      	bge.n	801180c <__ieee754_pow+0x9cc>
 80117b4:	4650      	mov	r0, sl
 80117b6:	f000 f877 	bl	80118a8 <scalbn>
 80117ba:	ec51 0b10 	vmov	r0, r1, d0
 80117be:	ec53 2b18 	vmov	r2, r3, d8
 80117c2:	f7ff bbee 	b.w	8010fa2 <__ieee754_pow+0x162>
 80117c6:	4b2f      	ldr	r3, [pc, #188]	; (8011884 <__ieee754_pow+0xa44>)
 80117c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80117cc:	429e      	cmp	r6, r3
 80117ce:	f77f af0d 	ble.w	80115ec <__ieee754_pow+0x7ac>
 80117d2:	4b2d      	ldr	r3, [pc, #180]	; (8011888 <__ieee754_pow+0xa48>)
 80117d4:	440b      	add	r3, r1
 80117d6:	4303      	orrs	r3, r0
 80117d8:	d009      	beq.n	80117ee <__ieee754_pow+0x9ae>
 80117da:	ec51 0b18 	vmov	r0, r1, d8
 80117de:	2200      	movs	r2, #0
 80117e0:	2300      	movs	r3, #0
 80117e2:	f7ef f99b 	bl	8000b1c <__aeabi_dcmplt>
 80117e6:	3800      	subs	r0, #0
 80117e8:	bf18      	it	ne
 80117ea:	2001      	movne	r0, #1
 80117ec:	e448      	b.n	8011080 <__ieee754_pow+0x240>
 80117ee:	4622      	mov	r2, r4
 80117f0:	462b      	mov	r3, r5
 80117f2:	f7ee fd69 	bl	80002c8 <__aeabi_dsub>
 80117f6:	4642      	mov	r2, r8
 80117f8:	464b      	mov	r3, r9
 80117fa:	f7ef f9a3 	bl	8000b44 <__aeabi_dcmpge>
 80117fe:	2800      	cmp	r0, #0
 8011800:	f43f aef4 	beq.w	80115ec <__ieee754_pow+0x7ac>
 8011804:	e7e9      	b.n	80117da <__ieee754_pow+0x99a>
 8011806:	f04f 0a00 	mov.w	sl, #0
 801180a:	e71a      	b.n	8011642 <__ieee754_pow+0x802>
 801180c:	ec51 0b10 	vmov	r0, r1, d0
 8011810:	4619      	mov	r1, r3
 8011812:	e7d4      	b.n	80117be <__ieee754_pow+0x97e>
 8011814:	491a      	ldr	r1, [pc, #104]	; (8011880 <__ieee754_pow+0xa40>)
 8011816:	2000      	movs	r0, #0
 8011818:	f7ff bb31 	b.w	8010e7e <__ieee754_pow+0x3e>
 801181c:	2000      	movs	r0, #0
 801181e:	2100      	movs	r1, #0
 8011820:	f7ff bb2d 	b.w	8010e7e <__ieee754_pow+0x3e>
 8011824:	4630      	mov	r0, r6
 8011826:	4639      	mov	r1, r7
 8011828:	f7ff bb29 	b.w	8010e7e <__ieee754_pow+0x3e>
 801182c:	9204      	str	r2, [sp, #16]
 801182e:	f7ff bb7b 	b.w	8010f28 <__ieee754_pow+0xe8>
 8011832:	2300      	movs	r3, #0
 8011834:	f7ff bb65 	b.w	8010f02 <__ieee754_pow+0xc2>
 8011838:	00000000 	.word	0x00000000
 801183c:	3fe62e43 	.word	0x3fe62e43
 8011840:	fefa39ef 	.word	0xfefa39ef
 8011844:	3fe62e42 	.word	0x3fe62e42
 8011848:	0ca86c39 	.word	0x0ca86c39
 801184c:	be205c61 	.word	0xbe205c61
 8011850:	72bea4d0 	.word	0x72bea4d0
 8011854:	3e663769 	.word	0x3e663769
 8011858:	c5d26bf1 	.word	0xc5d26bf1
 801185c:	3ebbbd41 	.word	0x3ebbbd41
 8011860:	af25de2c 	.word	0xaf25de2c
 8011864:	3f11566a 	.word	0x3f11566a
 8011868:	16bebd93 	.word	0x16bebd93
 801186c:	3f66c16c 	.word	0x3f66c16c
 8011870:	5555553e 	.word	0x5555553e
 8011874:	3fc55555 	.word	0x3fc55555
 8011878:	3fe00000 	.word	0x3fe00000
 801187c:	fff00000 	.word	0xfff00000
 8011880:	3ff00000 	.word	0x3ff00000
 8011884:	4090cbff 	.word	0x4090cbff
 8011888:	3f6f3400 	.word	0x3f6f3400
 801188c:	652b82fe 	.word	0x652b82fe
 8011890:	3c971547 	.word	0x3c971547

08011894 <fabs>:
 8011894:	ec51 0b10 	vmov	r0, r1, d0
 8011898:	ee10 2a10 	vmov	r2, s0
 801189c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80118a0:	ec43 2b10 	vmov	d0, r2, r3
 80118a4:	4770      	bx	lr
	...

080118a8 <scalbn>:
 80118a8:	b570      	push	{r4, r5, r6, lr}
 80118aa:	ec55 4b10 	vmov	r4, r5, d0
 80118ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80118b2:	4606      	mov	r6, r0
 80118b4:	462b      	mov	r3, r5
 80118b6:	b999      	cbnz	r1, 80118e0 <scalbn+0x38>
 80118b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80118bc:	4323      	orrs	r3, r4
 80118be:	d03f      	beq.n	8011940 <scalbn+0x98>
 80118c0:	4b35      	ldr	r3, [pc, #212]	; (8011998 <scalbn+0xf0>)
 80118c2:	4629      	mov	r1, r5
 80118c4:	ee10 0a10 	vmov	r0, s0
 80118c8:	2200      	movs	r2, #0
 80118ca:	f7ee feb5 	bl	8000638 <__aeabi_dmul>
 80118ce:	4b33      	ldr	r3, [pc, #204]	; (801199c <scalbn+0xf4>)
 80118d0:	429e      	cmp	r6, r3
 80118d2:	4604      	mov	r4, r0
 80118d4:	460d      	mov	r5, r1
 80118d6:	da10      	bge.n	80118fa <scalbn+0x52>
 80118d8:	a327      	add	r3, pc, #156	; (adr r3, 8011978 <scalbn+0xd0>)
 80118da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118de:	e01f      	b.n	8011920 <scalbn+0x78>
 80118e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80118e4:	4291      	cmp	r1, r2
 80118e6:	d10c      	bne.n	8011902 <scalbn+0x5a>
 80118e8:	ee10 2a10 	vmov	r2, s0
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee fcec 	bl	80002cc <__adddf3>
 80118f4:	4604      	mov	r4, r0
 80118f6:	460d      	mov	r5, r1
 80118f8:	e022      	b.n	8011940 <scalbn+0x98>
 80118fa:	460b      	mov	r3, r1
 80118fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011900:	3936      	subs	r1, #54	; 0x36
 8011902:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011906:	4296      	cmp	r6, r2
 8011908:	dd0d      	ble.n	8011926 <scalbn+0x7e>
 801190a:	2d00      	cmp	r5, #0
 801190c:	a11c      	add	r1, pc, #112	; (adr r1, 8011980 <scalbn+0xd8>)
 801190e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011912:	da02      	bge.n	801191a <scalbn+0x72>
 8011914:	a11c      	add	r1, pc, #112	; (adr r1, 8011988 <scalbn+0xe0>)
 8011916:	e9d1 0100 	ldrd	r0, r1, [r1]
 801191a:	a319      	add	r3, pc, #100	; (adr r3, 8011980 <scalbn+0xd8>)
 801191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011920:	f7ee fe8a 	bl	8000638 <__aeabi_dmul>
 8011924:	e7e6      	b.n	80118f4 <scalbn+0x4c>
 8011926:	1872      	adds	r2, r6, r1
 8011928:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801192c:	428a      	cmp	r2, r1
 801192e:	dcec      	bgt.n	801190a <scalbn+0x62>
 8011930:	2a00      	cmp	r2, #0
 8011932:	dd08      	ble.n	8011946 <scalbn+0x9e>
 8011934:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011938:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801193c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011940:	ec45 4b10 	vmov	d0, r4, r5
 8011944:	bd70      	pop	{r4, r5, r6, pc}
 8011946:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801194a:	da08      	bge.n	801195e <scalbn+0xb6>
 801194c:	2d00      	cmp	r5, #0
 801194e:	a10a      	add	r1, pc, #40	; (adr r1, 8011978 <scalbn+0xd0>)
 8011950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011954:	dac0      	bge.n	80118d8 <scalbn+0x30>
 8011956:	a10e      	add	r1, pc, #56	; (adr r1, 8011990 <scalbn+0xe8>)
 8011958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195c:	e7bc      	b.n	80118d8 <scalbn+0x30>
 801195e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011962:	3236      	adds	r2, #54	; 0x36
 8011964:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011968:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801196c:	4620      	mov	r0, r4
 801196e:	4b0c      	ldr	r3, [pc, #48]	; (80119a0 <scalbn+0xf8>)
 8011970:	2200      	movs	r2, #0
 8011972:	e7d5      	b.n	8011920 <scalbn+0x78>
 8011974:	f3af 8000 	nop.w
 8011978:	c2f8f359 	.word	0xc2f8f359
 801197c:	01a56e1f 	.word	0x01a56e1f
 8011980:	8800759c 	.word	0x8800759c
 8011984:	7e37e43c 	.word	0x7e37e43c
 8011988:	8800759c 	.word	0x8800759c
 801198c:	fe37e43c 	.word	0xfe37e43c
 8011990:	c2f8f359 	.word	0xc2f8f359
 8011994:	81a56e1f 	.word	0x81a56e1f
 8011998:	43500000 	.word	0x43500000
 801199c:	ffff3cb0 	.word	0xffff3cb0
 80119a0:	3c900000 	.word	0x3c900000

080119a4 <with_errno>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	4604      	mov	r4, r0
 80119a8:	460d      	mov	r5, r1
 80119aa:	4616      	mov	r6, r2
 80119ac:	f7fc ff20 	bl	800e7f0 <__errno>
 80119b0:	4629      	mov	r1, r5
 80119b2:	6006      	str	r6, [r0, #0]
 80119b4:	4620      	mov	r0, r4
 80119b6:	bd70      	pop	{r4, r5, r6, pc}

080119b8 <xflow>:
 80119b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119ba:	4614      	mov	r4, r2
 80119bc:	461d      	mov	r5, r3
 80119be:	b108      	cbz	r0, 80119c4 <xflow+0xc>
 80119c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80119c4:	e9cd 2300 	strd	r2, r3, [sp]
 80119c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119cc:	4620      	mov	r0, r4
 80119ce:	4629      	mov	r1, r5
 80119d0:	f7ee fe32 	bl	8000638 <__aeabi_dmul>
 80119d4:	2222      	movs	r2, #34	; 0x22
 80119d6:	b003      	add	sp, #12
 80119d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119dc:	f7ff bfe2 	b.w	80119a4 <with_errno>

080119e0 <__math_uflow>:
 80119e0:	b508      	push	{r3, lr}
 80119e2:	2200      	movs	r2, #0
 80119e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80119e8:	f7ff ffe6 	bl	80119b8 <xflow>
 80119ec:	ec41 0b10 	vmov	d0, r0, r1
 80119f0:	bd08      	pop	{r3, pc}

080119f2 <__math_oflow>:
 80119f2:	b508      	push	{r3, lr}
 80119f4:	2200      	movs	r2, #0
 80119f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80119fa:	f7ff ffdd 	bl	80119b8 <xflow>
 80119fe:	ec41 0b10 	vmov	d0, r0, r1
 8011a02:	bd08      	pop	{r3, pc}

08011a04 <__ieee754_sqrt>:
 8011a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	ec55 4b10 	vmov	r4, r5, d0
 8011a0c:	4e67      	ldr	r6, [pc, #412]	; (8011bac <__ieee754_sqrt+0x1a8>)
 8011a0e:	43ae      	bics	r6, r5
 8011a10:	ee10 0a10 	vmov	r0, s0
 8011a14:	ee10 2a10 	vmov	r2, s0
 8011a18:	4629      	mov	r1, r5
 8011a1a:	462b      	mov	r3, r5
 8011a1c:	d10d      	bne.n	8011a3a <__ieee754_sqrt+0x36>
 8011a1e:	f7ee fe0b 	bl	8000638 <__aeabi_dmul>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	4620      	mov	r0, r4
 8011a28:	4629      	mov	r1, r5
 8011a2a:	f7ee fc4f 	bl	80002cc <__adddf3>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	460d      	mov	r5, r1
 8011a32:	ec45 4b10 	vmov	d0, r4, r5
 8011a36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3a:	2d00      	cmp	r5, #0
 8011a3c:	dc0b      	bgt.n	8011a56 <__ieee754_sqrt+0x52>
 8011a3e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011a42:	4326      	orrs	r6, r4
 8011a44:	d0f5      	beq.n	8011a32 <__ieee754_sqrt+0x2e>
 8011a46:	b135      	cbz	r5, 8011a56 <__ieee754_sqrt+0x52>
 8011a48:	f7ee fc3e 	bl	80002c8 <__aeabi_dsub>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	460b      	mov	r3, r1
 8011a50:	f7ee ff1c 	bl	800088c <__aeabi_ddiv>
 8011a54:	e7eb      	b.n	8011a2e <__ieee754_sqrt+0x2a>
 8011a56:	1509      	asrs	r1, r1, #20
 8011a58:	f000 808d 	beq.w	8011b76 <__ieee754_sqrt+0x172>
 8011a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a60:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a68:	07c9      	lsls	r1, r1, #31
 8011a6a:	bf5c      	itt	pl
 8011a6c:	005b      	lslpl	r3, r3, #1
 8011a6e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011a72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a76:	bf58      	it	pl
 8011a78:	0052      	lslpl	r2, r2, #1
 8011a7a:	2500      	movs	r5, #0
 8011a7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011a80:	1076      	asrs	r6, r6, #1
 8011a82:	0052      	lsls	r2, r2, #1
 8011a84:	f04f 0e16 	mov.w	lr, #22
 8011a88:	46ac      	mov	ip, r5
 8011a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a8e:	eb0c 0001 	add.w	r0, ip, r1
 8011a92:	4298      	cmp	r0, r3
 8011a94:	bfde      	ittt	le
 8011a96:	1a1b      	suble	r3, r3, r0
 8011a98:	eb00 0c01 	addle.w	ip, r0, r1
 8011a9c:	186d      	addle	r5, r5, r1
 8011a9e:	005b      	lsls	r3, r3, #1
 8011aa0:	f1be 0e01 	subs.w	lr, lr, #1
 8011aa4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011aa8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011aac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011ab0:	d1ed      	bne.n	8011a8e <__ieee754_sqrt+0x8a>
 8011ab2:	4674      	mov	r4, lr
 8011ab4:	2720      	movs	r7, #32
 8011ab6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011aba:	4563      	cmp	r3, ip
 8011abc:	eb01 000e 	add.w	r0, r1, lr
 8011ac0:	dc02      	bgt.n	8011ac8 <__ieee754_sqrt+0xc4>
 8011ac2:	d113      	bne.n	8011aec <__ieee754_sqrt+0xe8>
 8011ac4:	4290      	cmp	r0, r2
 8011ac6:	d811      	bhi.n	8011aec <__ieee754_sqrt+0xe8>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	eb00 0e01 	add.w	lr, r0, r1
 8011ace:	da57      	bge.n	8011b80 <__ieee754_sqrt+0x17c>
 8011ad0:	f1be 0f00 	cmp.w	lr, #0
 8011ad4:	db54      	blt.n	8011b80 <__ieee754_sqrt+0x17c>
 8011ad6:	f10c 0801 	add.w	r8, ip, #1
 8011ada:	eba3 030c 	sub.w	r3, r3, ip
 8011ade:	4290      	cmp	r0, r2
 8011ae0:	bf88      	it	hi
 8011ae2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011ae6:	1a12      	subs	r2, r2, r0
 8011ae8:	440c      	add	r4, r1
 8011aea:	46c4      	mov	ip, r8
 8011aec:	005b      	lsls	r3, r3, #1
 8011aee:	3f01      	subs	r7, #1
 8011af0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011af4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011af8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011afc:	d1dd      	bne.n	8011aba <__ieee754_sqrt+0xb6>
 8011afe:	4313      	orrs	r3, r2
 8011b00:	d01b      	beq.n	8011b3a <__ieee754_sqrt+0x136>
 8011b02:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011bb0 <__ieee754_sqrt+0x1ac>
 8011b06:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011bb4 <__ieee754_sqrt+0x1b0>
 8011b0a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b0e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b12:	f7ee fbd9 	bl	80002c8 <__aeabi_dsub>
 8011b16:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	4640      	mov	r0, r8
 8011b20:	4649      	mov	r1, r9
 8011b22:	f7ef f805 	bl	8000b30 <__aeabi_dcmple>
 8011b26:	b140      	cbz	r0, 8011b3a <__ieee754_sqrt+0x136>
 8011b28:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011b2c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b30:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b34:	d126      	bne.n	8011b84 <__ieee754_sqrt+0x180>
 8011b36:	3501      	adds	r5, #1
 8011b38:	463c      	mov	r4, r7
 8011b3a:	106a      	asrs	r2, r5, #1
 8011b3c:	0863      	lsrs	r3, r4, #1
 8011b3e:	07e9      	lsls	r1, r5, #31
 8011b40:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011b44:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011b48:	bf48      	it	mi
 8011b4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011b4e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011b52:	461c      	mov	r4, r3
 8011b54:	e76d      	b.n	8011a32 <__ieee754_sqrt+0x2e>
 8011b56:	0ad3      	lsrs	r3, r2, #11
 8011b58:	3815      	subs	r0, #21
 8011b5a:	0552      	lsls	r2, r2, #21
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d0fa      	beq.n	8011b56 <__ieee754_sqrt+0x152>
 8011b60:	02dc      	lsls	r4, r3, #11
 8011b62:	d50a      	bpl.n	8011b7a <__ieee754_sqrt+0x176>
 8011b64:	f1c1 0420 	rsb	r4, r1, #32
 8011b68:	fa22 f404 	lsr.w	r4, r2, r4
 8011b6c:	1e4d      	subs	r5, r1, #1
 8011b6e:	408a      	lsls	r2, r1
 8011b70:	4323      	orrs	r3, r4
 8011b72:	1b41      	subs	r1, r0, r5
 8011b74:	e772      	b.n	8011a5c <__ieee754_sqrt+0x58>
 8011b76:	4608      	mov	r0, r1
 8011b78:	e7f0      	b.n	8011b5c <__ieee754_sqrt+0x158>
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	3101      	adds	r1, #1
 8011b7e:	e7ef      	b.n	8011b60 <__ieee754_sqrt+0x15c>
 8011b80:	46e0      	mov	r8, ip
 8011b82:	e7aa      	b.n	8011ada <__ieee754_sqrt+0xd6>
 8011b84:	f7ee fba2 	bl	80002cc <__adddf3>
 8011b88:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4640      	mov	r0, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	f7ee ffc2 	bl	8000b1c <__aeabi_dcmplt>
 8011b98:	b120      	cbz	r0, 8011ba4 <__ieee754_sqrt+0x1a0>
 8011b9a:	1ca0      	adds	r0, r4, #2
 8011b9c:	bf08      	it	eq
 8011b9e:	3501      	addeq	r5, #1
 8011ba0:	3402      	adds	r4, #2
 8011ba2:	e7ca      	b.n	8011b3a <__ieee754_sqrt+0x136>
 8011ba4:	3401      	adds	r4, #1
 8011ba6:	f024 0401 	bic.w	r4, r4, #1
 8011baa:	e7c6      	b.n	8011b3a <__ieee754_sqrt+0x136>
 8011bac:	7ff00000 	.word	0x7ff00000
 8011bb0:	200001f8 	.word	0x200001f8
 8011bb4:	20000200 	.word	0x20000200

08011bb8 <_init>:
 8011bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bba:	bf00      	nop
 8011bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bbe:	bc08      	pop	{r3}
 8011bc0:	469e      	mov	lr, r3
 8011bc2:	4770      	bx	lr

08011bc4 <_fini>:
 8011bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc6:	bf00      	nop
 8011bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bca:	bc08      	pop	{r3}
 8011bcc:	469e      	mov	lr, r3
 8011bce:	4770      	bx	lr


SCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08011788  08011788  00021788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e48  08011e48  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011e48  08011e48  00021e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e50  08011e50  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e50  08011e50  00021e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e54  08011e54  00021e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011e58  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc4  20000208  08012060  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005dcc  08012060  00035dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000228b5  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006519  00000000  00000000  00052b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  00059050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001716  00000000  00000000  0005aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc1f  00000000  00000000  0005c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c1d6  00000000  00000000  000891dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4dcc  00000000  00000000  000b53b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009044  00000000  00000000  001aa180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001b31c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011770 	.word	0x08011770

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08011770 	.word	0x08011770

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <queueAccelerationPacket>:
	angular_rate_buffer.buf_wrap		= false;
}


int queueAccelerationPacket(uint8_t data[])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f8e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <queueAccelerationPacket+0x22>
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f98:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f9e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30f      	bcc.n	8000fc6 <queueAccelerationPacket+0x42>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fa8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d035      	beq.n	8001022 <queueAccelerationPacket+0x9e>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fb8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fbe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d32d      	bcc.n	8001022 <queueAccelerationPacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		acceleration_buffer.queue[acceleration_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fc8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4401      	add	r1, r0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		acceleration_buffer.buf_end_pos++;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fe0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(acceleration_buffer.buf_end_pos % BUFFER_SIZE < acceleration_buffer.buf_end_pos)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ff0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ffc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001000:	429a      	cmp	r2, r3
 8001002:	d20c      	bcs.n	800101e <queueAccelerationPacket+0x9a>
		{
			acceleration_buffer.buf_end_pos = acceleration_buffer.buf_end_pos % BUFFER_SIZE;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001006:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001012:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			acceleration_buffer.buf_wrap = true;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <queueAccelerationPacket+0xa2>
	}

	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000228 	.word	0x20000228

08001038 <queueAngularRatePacket>:

int queueAngularRatePacket(uint8_t data[])
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001042:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <queueAngularRatePacket+0x22>
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800104c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001052:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001056:	429a      	cmp	r2, r3
 8001058:	d30f      	bcc.n	800107a <queueAngularRatePacket+0x42>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800105c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d035      	beq.n	80010d6 <queueAngularRatePacket+0x9e>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800106c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001072:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001076:	429a      	cmp	r2, r3
 8001078:	d32d      	bcc.n	80010d6 <queueAngularRatePacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		angular_rate_buffer.queue[angular_rate_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800107c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001080:	4619      	mov	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800108a:	00c9      	lsls	r1, r1, #3
 800108c:	4401      	add	r1, r0
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		angular_rate_buffer.buf_end_pos++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001094:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800109e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(angular_rate_buffer.buf_end_pos % BUFFER_SIZE < angular_rate_buffer.buf_end_pos)
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010a4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010b0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20c      	bcs.n	80010d2 <queueAngularRatePacket+0x9a>
		{
			angular_rate_buffer.buf_end_pos = angular_rate_buffer.buf_end_pos % BUFFER_SIZE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010ba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010c6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			angular_rate_buffer.buf_wrap = true;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <queueAngularRatePacket+0xa2>
	}

	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000630 	.word	0x20000630

080010ec <dequeueAccelerationPacket>:

uint64_t dequeueAccelerationPacket()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!acceleration_buffer.buf_wrap && acceleration_buffer.buf_start_pos == acceleration_buffer.buf_end_pos)
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <dequeueAccelerationPacket+0x98>)
 80010f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <dequeueAccelerationPacket+0x30>
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001104:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800110a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800110e:	429a      	cmp	r2, r3
 8001110:	d104      	bne.n	800111c <dequeueAccelerationPacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e02b      	b.n	8001174 <dequeueAccelerationPacket+0x88>
	}

	// get data value
	temp = acceleration_buffer.queue[acceleration_buffer.buf_start_pos];
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800111e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]

	acceleration_buffer.buf_start_pos++;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001132:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800113c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (acceleration_buffer.buf_start_pos % BUFFER_SIZE < acceleration_buffer.buf_start_pos)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800114e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <dequeueAccelerationPacket+0x84>
	{
		acceleration_buffer.buf_start_pos = acceleration_buffer.buf_start_pos % BUFFER_SIZE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001158:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001164:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		acceleration_buffer.buf_wrap = false;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000228 	.word	0x20000228

08001188 <dequeueAngularRatePacket>:

uint64_t dequeueAngularRatePacket()
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_start_pos == angular_rate_buffer.buf_end_pos)
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001190:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <dequeueAngularRatePacket+0x30>
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <dequeueAngularRatePacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e02b      	b.n	8001210 <dequeueAngularRatePacket+0x88>
	}

	// get data value
	temp = angular_rate_buffer.queue[angular_rate_buffer.buf_start_pos];
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]

	angular_rate_buffer.buf_start_pos++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ce:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (angular_rate_buffer.buf_start_pos % BUFFER_SIZE < angular_rate_buffer.buf_start_pos)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011de:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <dequeueAngularRatePacket+0x84>
	{
		angular_rate_buffer.buf_start_pos = angular_rate_buffer.buf_start_pos % BUFFER_SIZE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011f4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001200:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		angular_rate_buffer.buf_wrap = false;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000630 	.word	0x20000630

08001224 <processAccelerationPacket>:

void processAccelerationPacket(uint64_t packet)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	float x_acceleration;
	float y_acceleration;
	float z_acceleration;

	data = (uint16_t*) &packet;
 8001232:	463b      	mov	r3, r7
 8001234:	617b      	str	r3, [r7, #20]

	y_acceleration = ((float)data[0] / 100) - 320;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012b4 <processAccelerationPacket+0x90>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012b8 <processAccelerationPacket+0x94>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	x_acceleration = ((float)data[1] / 100) - 320;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012b4 <processAccelerationPacket+0x90>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012b8 <processAccelerationPacket+0x94>
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	z_acceleration = ((float)data[2] / 100) - 320;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012b4 <processAccelerationPacket+0x90>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <processAccelerationPacket+0x94>
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Acceleration", x_acceleration, y_acceleration, z_acceleration);
 800129a:	ed97 1a02 	vldr	s2, [r7, #8]
 800129e:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <processAccelerationPacket+0x98>)
 80012a8:	f000 f858 	bl	800135c <printPacket>
	/* Logging Ends */
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	43a00000 	.word	0x43a00000
 80012bc:	08011788 	.word	0x08011788

080012c0 <processAngularRatePacket>:

void processAngularRatePacket(uint64_t packet)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	float x_angular_rate;
	float y_angular_rate;
	float z_angular_rate;

	data = (uint16_t*) &packet;
 80012ce:	463b      	mov	r3, r7
 80012d0:	617b      	str	r3, [r7, #20]

	y_angular_rate = ((float)data[0] / 128) - 250;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001350 <processAngularRatePacket+0x90>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001354 <processAngularRatePacket+0x94>
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
	x_angular_rate = ((float)data[1] / 128) - 250;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001350 <processAngularRatePacket+0x90>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001354 <processAngularRatePacket+0x94>
 800130c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	z_angular_rate = ((float)data[2] / 128) - 250;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3304      	adds	r3, #4
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001322:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001350 <processAngularRatePacket+0x90>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001354 <processAngularRatePacket+0x94>
 800132e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001332:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Angular Rate", x_angular_rate, y_angular_rate, z_angular_rate);
 8001336:	ed97 1a02 	vldr	s2, [r7, #8]
 800133a:	edd7 0a04 	vldr	s1, [r7, #16]
 800133e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <processAngularRatePacket+0x98>)
 8001344:	f000 f80a 	bl	800135c <printPacket>
	/* Logging Ends */
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43000000 	.word	0x43000000
 8001354:	437a0000 	.word	0x437a0000
 8001358:	08011798 	.word	0x08011798

0800135c <printPacket>:

void printPacket(char *data_name, float x, float y, float z)
{
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001364:	af0a      	add	r7, sp, #40	; 0x28
 8001366:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001378:	ed83 0a00 	vstr	s0, [r3]
 800137c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001384:	edc3 0a00 	vstr	s1, [r3]
 8001388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001390:	ed83 1a00 	vstr	s2, [r3]
	char tempMsg[512];

	sprintf(tempMsg, "%s X: %f\r\n%s Y: %f\r\n%s Z: %f\r\n", data_name, x, data_name, y, data_name, z);
 8001394:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001398:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013ce:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 80013d2:	f107 0010 	add.w	r0, r7, #16
 80013d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	680a      	ldr	r2, [r1, #0]
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <printPacket+0xcc>)
 80013fe:	f00c fdf7 	bl	800dff0 <siprintf>

	HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 20);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	2314      	movs	r3, #20
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <printPacket+0xd0>)
 8001418:	f006 f9ab 	bl	8007772 <HAL_USART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	080117a8 	.word	0x080117a8
 800142c:	20001e5c 	.word	0x20001e5c

08001430 <StartIMUPacketProcessTask>:

void StartIMUPacketProcessTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint64_t packet;
	for (;;)
	{
		// should probably check to make sure queues are in valid state
		packet = dequeueAccelerationPacket();
 8001438:	f7ff fe58 	bl	80010ec <dequeueAccelerationPacket>
 800143c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAccelerationPacket(packet);
 8001440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001444:	f7ff feee 	bl	8001224 <processAccelerationPacket>

		packet = dequeueAngularRatePacket();
 8001448:	f7ff fe9e 	bl	8001188 <dequeueAngularRatePacket>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAngularRatePacket(packet);
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff ff34 	bl	80012c0 <processAngularRatePacket>

		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f009 fd88 	bl	800af70 <osDelay>
		packet = dequeueAccelerationPacket();
 8001460:	e7ea      	b.n	8001438 <StartIMUPacketProcessTask+0x8>
	...

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001478:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_ADC1_Init+0x240>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <MX_ADC1_Init+0x244>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4876      	ldr	r0, [pc, #472]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c6:	f001 feff 	bl	80032c8 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fcda 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014dc:	2303      	movs	r3, #3
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	486e      	ldr	r0, [pc, #440]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014e6:	f002 f857 	bl	8003598 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fcca 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001502:	f002 f849 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fcbc 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001510:	2302      	movs	r3, #2
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800151e:	f002 f83b 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fcae 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800152c:	2303      	movs	r3, #3
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800153a:	f002 f82d 	bl	8003598 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fca0 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001548:	2304      	movs	r3, #4
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4852      	ldr	r0, [pc, #328]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001556:	f002 f81f 	bl	8003598 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fc92 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001564:	2305      	movs	r3, #5
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001572:	f002 f811 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fc84 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800158e:	f002 f803 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001598:	f000 fc76 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800159c:	2307      	movs	r3, #7
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	483d      	ldr	r0, [pc, #244]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015aa:	f001 fff5 	bl	8003598 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015b4:	f000 fc68 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015bc:	2309      	movs	r3, #9
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015c6:	f001 ffe7 	bl	8003598 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d0:	f000 fc5a 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d4:	2309      	movs	r3, #9
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015e2:	f001 ffd9 	bl	8003598 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015ec:	f000 fc4c 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015f4:	230b      	movs	r3, #11
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015fe:	f001 ffcb 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 fc3e 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001610:	230c      	movs	r3, #12
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800161a:	f001 ffbd 	bl	8003598 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001624:	f000 fc30 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800162c:	230d      	movs	r3, #13
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001636:	f001 ffaf 	bl	8003598 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001640:	f000 fc22 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001644:	230d      	movs	r3, #13
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001648:	230e      	movs	r3, #14
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001652:	f001 ffa1 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800165c:	f000 fc14 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001660:	230e      	movs	r3, #14
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800166e:	f001 ff93 	bl	8003598 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001678:	f000 fc06 	bl	8001e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001680:	2310      	movs	r3, #16
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800168a:	f001 ff85 	bl	8003598 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001694:	f000 fbf8 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a80 	.word	0x20000a80
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001754:	f002 ff5c 	bl	8004610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_ADC_MspInit+0x150>)
 800176c:	f002 ff50 	bl	8004610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x154>)
 8001784:	f002 ff44 	bl	8004610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_ADC_MspInit+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017cc:	f002 fbb0 	bl	8003f30 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80017d6:	f000 fb57 	bl	8001e88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	20000ac8 	.word	0x20000ac8
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	newData_thermistor = 1;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_ADC_ConvCpltCallback+0x20>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	newData_shock_pot = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_ADC_ConvCpltCallback+0x24>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000a7c 	.word	0x20000a7c
 8001830:	20000a78 	.word	0x20000a78

08001834 <StartAdcDma>:

void StartAdcDma(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	const int DELAY = 500;
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <StartAdcDma+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <StartAdcDma+0x28>)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <StartAdcDma+0x2c>)
 800184c:	f001 fd80 	bl	8003350 <HAL_ADC_Start_DMA>

	osDelay(DELAY);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f009 fb8d 	bl	800af70 <osDelay>
  {
 8001856:	e7f4      	b.n	8001842 <StartAdcDma+0xe>
 8001858:	20000000 	.word	0x20000000
 800185c:	20000a38 	.word	0x20000a38
 8001860:	20000a80 	.word	0x20000a80

08001864 <CAN_Polling>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Polling(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	int a = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800186a:	2100      	movs	r1, #0
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <CAN_Polling+0x3c>)
 800186e:	f002 fa55 	bl	8003d1c <HAL_CAN_GetRxFifoFillLevel>
 8001872:	4603      	mov	r3, r0
 8001874:	607b      	str	r3, [r7, #4]
	if (a < 1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dc01      	bgt.n	8001880 <CAN_Polling+0x1c>
	{
		return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00b      	b.n	8001898 <CAN_Polling+0x34>
	}

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CAN_Polling+0x40>)
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <CAN_Polling+0x44>)
 8001884:	2100      	movs	r1, #0
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <CAN_Polling+0x3c>)
 8001888:	f002 f936 	bl	8003af8 <HAL_CAN_GetRxMessage>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <CAN_Polling+0x32>
	{
		return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <CAN_Polling+0x34>
	}

	return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000b4c 	.word	0x20000b4c
 80018a4:	20000b44 	.word	0x20000b44
 80018a8:	20000b28 	.word	0x20000b28

080018ac <StartCanTask>:

void StartCanTask(void const * argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
//	imuState state;
//	char canMsg[40];
	for (;;)
	{
		if (CAN_Polling() == HAL_OK)
 80018b4:	f7ff ffd6 	bl	8001864 <CAN_Polling>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <StartCanTask+0x3c>
		{
			if (RxHeader.IDE == CAN_ID_EXT)
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <StartCanTask+0x48>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d110      	bne.n	80018e8 <StartCanTask+0x3c>
			{
				switch (RxHeader.ExtId)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <StartCanTask+0x48>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <StartCanTask+0x4c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <StartCanTask+0x2c>
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <StartCanTask+0x50>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <StartCanTask+0x34>
 80018d6:	e007      	b.n	80018e8 <StartCanTask+0x3c>
				{
					case IMU_ACCELERATION_CAN_EXT_ID:
						queueAccelerationPacket(RxData);
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <StartCanTask+0x54>)
 80018da:	f7ff fb53 	bl	8000f84 <queueAccelerationPacket>
//						imuProcessAccelerationPacket(&state, RxData);
//						sprintf(canMsg, "IMU Acceleration Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018de:	e003      	b.n	80018e8 <StartCanTask+0x3c>
					case IMU_ANGULAR_RATE_CAN_EXT_ID:
						queueAngularRatePacket(RxData);
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <StartCanTask+0x54>)
 80018e2:	f7ff fba9 	bl	8001038 <queueAngularRatePacket>
//						imuProcessAngularRatePacket(&state, RxData);
//						sprintf(canMsg, "IMU Angular Rate Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018e6:	bf00      	nop
				/* Logging Starts */

				/* Logging Ends */
			}
		}
		osDelay(500);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f009 fb40 	bl	800af70 <osDelay>
		if (CAN_Polling() == HAL_OK)
 80018f0:	e7e0      	b.n	80018b4 <StartCanTask+0x8>
 80018f2:	bf00      	nop
 80018f4:	20000b28 	.word	0x20000b28
 80018f8:	08f02d80 	.word	0x08f02d80
 80018fc:	0cf02a80 	.word	0x0cf02a80
 8001900:	20000b44 	.word	0x20000b44

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2038      	movs	r0, #56	; 0x38
 800192c:	f002 fad6 	bl	8003edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f002 faef 	bl	8003f14 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00000000 	.word	0x00000000

08001948 <calculateFlowrate>:
const int DELAY = 500;													// time in ms
static const double conversionFactor = (1000/DELAY)*(1.0/1000.0);		// convert L/s to m^3/s
extern volatile int flowmeter_pulse_count;

// gets flowrate as m^3/s
double calculateFlowrate(){
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	volatile double flowrate;

	flowrate = flowmeter_pulse_count*conversionFactor/PPL;	// calculate flowrate
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <calculateFlowrate+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe06 	bl	8000564 <__aeabi_i2d>
 8001958:	a313      	add	r3, pc, #76	; (adr r3, 80019a8 <calculateFlowrate+0x60>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe6b 	bl	8000638 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	f640 0398 	movw	r3, #2200	; 0x898
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdf8 	bl	8000564 <__aeabi_i2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe ff86 	bl	800088c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2300 	strd	r2, r3, [r7]
	flowmeter_pulse_count = 0;								// reset pulse_count
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <calculateFlowrate+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

	return flowrate;
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	ec43 2b17 	vmov	d7, r2, r3
}
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f60624d 	.word	0x3f60624d
 80019b0:	20001d30 	.word	0x20001d30

080019b4 <StartGetFlowrateTask>:

// calculates flowrate every DELAY ms
void StartGetFlowrateTask(void const * argument){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	volatile double flowrate;
	char tempMsg[50];
	char* time;

	for (;;){
		flowrate = calculateFlowrate();		// calculates flowrate
 80019bc:	f7ff ffc4 	bl	8001948 <calculateFlowrate>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

		/* TODO SCU#35 */
		/* Logging Starts */
		time = get_time();
 80019cc:	f000 fab2 	bl	8001f34 <get_time>
 80019d0:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80019d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019d4:	f7fe fc6c 	bl	80002b0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	230a      	movs	r3, #10
 80019de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019e0:	480e      	ldr	r0, [pc, #56]	; (8001a1c <StartGetFlowrateTask+0x68>)
 80019e2:	f005 fec6 	bl	8007772 <HAL_USART_Transmit>

		sprintf(tempMsg, ",%f,,,,\r\n", flowrate);
 80019e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <StartGetFlowrateTask+0x6c>)
 80019f0:	f00c fafe 	bl	800dff0 <siprintf>
		HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc59 	bl	80002b0 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 010c 	add.w	r1, r7, #12
 8001a06:	230a      	movs	r3, #10
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <StartGetFlowrateTask+0x68>)
 8001a0a:	f005 feb2 	bl	8007772 <HAL_USART_Transmit>
		/* Logging Ends */

		osDelay(DELAY);
 8001a0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 faac 	bl	800af70 <osDelay>
		flowrate = calculateFlowrate();		// calculates flowrate
 8001a18:	e7d0      	b.n	80019bc <StartGetFlowrateTask+0x8>
 8001a1a:	bf00      	nop
 8001a1c:	20001e5c 	.word	0x20001e5c
 8001a20:	080117c8 	.word	0x080117c8

08001a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <vApplicationGetIdleTaskMemory+0x30>)
 8001a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20001430 	.word	0x20001430
 8001a54:	200014d0 	.word	0x200014d0

08001a58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b0b8      	sub	sp, #224	; 0xe0
 8001a5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <MX_FREERTOS_Init+0x13c>)
 8001a60:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001a64:	461d      	mov	r5, r3
 8001a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f009 fa2d 	bl	800aed8 <osThreadCreate>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <MX_FREERTOS_Init+0x140>)
 8001a82:	6013      	str	r3, [r2, #0]

  /* definition and creation of readAdcTask */
  osThreadStaticDef(readAdcTask, StartAdcDma, osPriorityNormal, 0, 512, readAdcTaskBuffer, &readAdcTaskControlBlock);
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <MX_FREERTOS_Init+0x144>)
 8001a86:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAdcTaskHandle = osThreadCreate(osThread(readAdcTask), NULL);
 8001a98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f009 fa1a 	bl	800aed8 <osThreadCreate>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a3e      	ldr	r2, [pc, #248]	; (8001ba0 <MX_FREERTOS_Init+0x148>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 512);
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <MX_FREERTOS_Init+0x14c>)
 8001aac:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8001abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f009 fa07 	bl	800aed8 <osThreadCreate>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <MX_FREERTOS_Init+0x150>)
 8001ace:	6013      	str	r3, [r2, #0]

  // Shock Pot Reading Thread
  osThreadDef(readDistTask, StartReadDistTask, osPriorityNormal, 0, 512);
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <MX_FREERTOS_Init+0x154>)
 8001ad2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readDistTask), NULL);
 8001ae4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f009 f9f4 	bl	800aed8 <osThreadCreate>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <MX_FREERTOS_Init+0x150>)
 8001af4:	6013      	str	r3, [r2, #0]

  // Flow Meter Reading Thread
  osThreadDef(readFlowmeterTask, StartGetFlowrateTask, osPriorityNormal, 0, 512);
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <MX_FREERTOS_Init+0x158>)
 8001af8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001afc:	461d      	mov	r5, r3
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readFlowmeterTaskHandle = osThreadCreate(osThread(readFlowmeterTask), NULL);
 8001b0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 f9e1 	bl	800aed8 <osThreadCreate>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <MX_FREERTOS_Init+0x15c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  // CAN Receiver Thread
  osThreadDef(canReceiverTask, StartCanTask, osPriorityNormal, 0, 512);
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_FREERTOS_Init+0x160>)
 8001b1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b22:	461d      	mov	r5, r3
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 f9ce 	bl	800aed8 <osThreadCreate>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <MX_FREERTOS_Init+0x164>)
 8001b40:	6013      	str	r3, [r2, #0]

  // IMU Packet Processing Thread
  osThreadDef(imuPacketProcessTask, StartIMUPacketProcessTask, osPriorityNormal, 0, 512);
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_FREERTOS_Init+0x168>)
 8001b44:	f107 041c 	add.w	r4, r7, #28
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuPacketProcessHandle = osThreadCreate(osThread(imuPacketProcessTask), NULL);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 f9bb 	bl	800aed8 <osThreadCreate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <MX_FREERTOS_Init+0x16c>)
 8001b66:	6013      	str	r3, [r2, #0]

  // Wheel Speed Reading Thread
  osThreadDef(readWheelSpeedsTask, StartGetWheelSpeedTask, osPriorityNormal, 0, 512);
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_FREERTOS_Init+0x170>)
 8001b6a:	463c      	mov	r4, r7
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readWheelSpeedsHandle = osThreadCreate(osThread(readWheelSpeedsTask), NULL);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f009 f9aa 	bl	800aed8 <osThreadCreate>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <MX_FREERTOS_Init+0x174>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001b8a:	bf00      	nop
 8001b8c:	37e0      	adds	r7, #224	; 0xe0
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	080117e0 	.word	0x080117e0
 8001b98:	20000b88 	.word	0x20000b88
 8001b9c:	08011808 	.word	0x08011808
 8001ba0:	20000b8c 	.word	0x20000b8c
 8001ba4:	08011834 	.word	0x08011834
 8001ba8:	20000b74 	.word	0x20000b74
 8001bac:	08011860 	.word	0x08011860
 8001bb0:	08011890 	.word	0x08011890
 8001bb4:	20000b78 	.word	0x20000b78
 8001bb8:	080118bc 	.word	0x080118bc
 8001bbc:	20000b7c 	.word	0x20000b7c
 8001bc0:	080118f0 	.word	0x080118f0
 8001bc4:	20000b80 	.word	0x20000b80
 8001bc8:	08011920 	.word	0x08011920
 8001bcc:	20000b84 	.word	0x20000b84

08001bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f009 f9c9 	bl	800af70 <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <StartDefaultTask+0x8>

08001be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c52:	f002 fe71 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	480b      	ldr	r0, [pc, #44]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c6a:	f002 fcd1 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c88:	f002 fcc2 	bl	8004610 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f001 facd 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001caa:	f000 f877 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f7ff ff97 	bl	8001be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb2:	f7ff fe27 	bl	8001904 <MX_DMA_Init>
  MX_ADC1_Init();
 8001cb6:	f7ff fbd5 	bl	8001464 <MX_ADC1_Init>
  MX_USART1_Init();
 8001cba:	f001 f9c1 	bl	8003040 <MX_USART1_Init>
  MX_TIM12_Init();
 8001cbe:	f000 ffdd 	bl	8002c7c <MX_TIM12_Init>
//  MX_CAN1_Init();
  MX_TIM3_Init();
 8001cc2:	f000 fe93 	bl	80029ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cc6:	f000 ff11 	bl	8002aec <MX_TIM4_Init>
  MX_FATFS_Init();
 8001cca:	f006 f8d1 	bl	8007e70 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cce:	f000 fa9b 	bl	8002208 <MX_SPI1_Init>
  MX_RTC_Init();
 8001cd2:	f000 f8df 	bl	8001e94 <MX_RTC_Init>
  MX_TIM11_Init();
 8001cd6:	f000 ff89 	bl	8002bec <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); 		// Start input capture
 8001cda:	2100      	movs	r1, #0
 8001cdc:	482a      	ldr	r0, [pc, #168]	; (8001d88 <main+0xe8>)
 8001cde:	f004 fe07 	bl	80068f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4829      	ldr	r0, [pc, #164]	; (8001d8c <main+0xec>)
 8001ce6:	f004 fe03 	bl	80068f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); 		// Start input capture
 8001cea:	2100      	movs	r1, #0
 8001cec:	4828      	ldr	r0, [pc, #160]	; (8001d90 <main+0xf0>)
 8001cee:	f004 fdff 	bl	80068f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1); 		// Start input capture
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4827      	ldr	r0, [pc, #156]	; (8001d94 <main+0xf4>)
 8001cf6:	f004 fdfb 	bl	80068f0 <HAL_TIM_IC_Start_IT>
  // Init_SD_Card();

  FRESULT fres_mount = sd_mount();
 8001cfa:	f000 f94f 	bl	8001f9c <sd_mount>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  // DSTATUS dres = disk_status(0);

  FRESULT fres_open_file = sd_open_log_file();
 8001d04:	f000 f958 	bl	8001fb8 <sd_open_log_file>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //char start_time[20] = get_time();

  for(int i = 0; i < 100; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e02b      	b.n	8001d6c <main+0xcc>
	#define BUF_LEN 21
	char buff[BUF_LEN];

	//uint32_t length = snprintf(buff, BUF_LEN, "Test: %d\n", i) + 1;

	uint32_t length = snprintf(buff, BUF_LEN, get_time()) + 1;
 8001d14:	f000 f90e 	bl	8001f34 <get_time>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2115      	movs	r1, #21
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00c f932 	bl	800df88 <sniprintf>
 8001d24:	4603      	mov	r3, r0
 8001d26:	3301      	adds	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]

	buff[length - 1] = '\n';
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	3328      	adds	r3, #40	; 0x28
 8001d30:	443b      	add	r3, r7
 8001d32:	220a      	movs	r2, #10
 8001d34:	f803 2c24 	strb.w	r2, [r3, #-36]

	sd_log_to_file(buff, length);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	69f9      	ldr	r1, [r7, #28]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f969 	bl	8002014 <sd_log_to_file>

	length = snprintf(buff, BUF_LEN, "%f\n", 333.333f) + 1;
 8001d42:	1d38      	adds	r0, r7, #4
 8001d44:	a30e      	add	r3, pc, #56	; (adr r3, 8001d80 <main+0xe0>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <main+0xf8>)
 8001d50:	2115      	movs	r1, #21
 8001d52:	f00c f919 	bl	800df88 <sniprintf>
 8001d56:	4603      	mov	r3, r0
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
	// buff[length - 1] = '\n';

	sd_log_to_file(buff, length);
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	69f9      	ldr	r1, [r7, #28]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f957 	bl	8002014 <sd_log_to_file>
  for(int i = 0; i < 100; i++) {
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3301      	adds	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	2b63      	cmp	r3, #99	; 0x63
 8001d70:	ddd0      	ble.n	8001d14 <main+0x74>
//  sd_eject();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d72:	f7ff fe71 	bl	8001a58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d76:	f009 f8a8 	bl	800aeca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <main+0xda>
 8001d7c:	f3af 8000 	nop.w
 8001d80:	00000000 	.word	0x00000000
 8001d84:	4074d554 	.word	0x4074d554
 8001d88:	20001dcc 	.word	0x20001dcc
 8001d8c:	20001d3c 	.word	0x20001d3c
 8001d90:	20001d84 	.word	0x20001d84
 8001d94:	20001e14 	.word	0x20001e14
 8001d98:	0801193c 	.word	0x0801193c

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	; 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2234      	movs	r2, #52	; 0x34
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00c fa11 	bl	800e1d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <SystemClock_Config+0xc0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <SystemClock_Config+0xc0>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <SystemClock_Config+0xc0>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <SystemClock_Config+0xc4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <SystemClock_Config+0xc4>)
 8001dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <SystemClock_Config+0xc4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fbc7 	bl	80055ac <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e24:	f000 f830 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	230f      	movs	r3, #15
 8001e2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fd92 	bl	800496c <HAL_RCC_ClockConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e4e:	f000 f81b 	bl	8001e88 <Error_Handler>
  }
}
 8001e52:	bf00      	nop
 8001e54:	3750      	adds	r7, #80	; 0x50
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e76:	f001 fa07 	bl	8003288 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40014400 	.word	0x40014400

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <MX_RTC_Init+0x48>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ea6:	227f      	movs	r2, #127	; 0x7f
 8001ea8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eac:	22ff      	movs	r2, #255	; 0xff
 8001eae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ec4:	f003 fe10 	bl	8005ae8 <HAL_RTC_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ece:	f7ff ffdb 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200016d0 	.word	0x200016d0
 8001edc:	40002800 	.word	0x40002800

08001ee0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09a      	sub	sp, #104	; 0x68
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	225c      	movs	r2, #92	; 0x5c
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00c f96e 	bl	800e1d2 <memset>
  if(rtcHandle->Instance==RTC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_RTC_MspInit+0x4c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f00:	2320      	movs	r3, #32
 8001f02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fe78 	bl	8004c04 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f1a:	f7ff ffb5 	bl	8001e88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RTC_MspInit+0x50>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f24:	bf00      	nop
 8001f26:	3768      	adds	r7, #104	; 0x68
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40002800 	.word	0x40002800
 8001f30:	42470e3c 	.word	0x42470e3c

08001f34 <get_time>:
//	time[0] = 'a';
//	time[1] = '\0';
//	return time;
//}
char* get_time(void)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	 static char time[20];

	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <get_time+0x5c>)
 8001f42:	f003 fe47 	bl	8005bd4 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4810      	ldr	r0, [pc, #64]	; (8001f90 <get_time+0x5c>)
 8001f50:	f003 fe9e 	bl	8005c90 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss.SS */
	 sprintf(time, "%02u:%02u:%02u.%02lu", gTime.Hours, gTime.Minutes, gTime.Seconds, (uint32_t) (gTime.SecondFraction - gTime.SubSeconds) * 100 / (gTime.SecondFraction + 1));
 8001f54:	783b      	ldrb	r3, [r7, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	78bb      	ldrb	r3, [r7, #2]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2264      	movs	r2, #100	; 0x64
 8001f68:	fb03 f202 	mul.w	r2, r3, r2
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	9100      	str	r1, [sp, #0]
 8001f78:	4623      	mov	r3, r4
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4905      	ldr	r1, [pc, #20]	; (8001f94 <get_time+0x60>)
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <get_time+0x64>)
 8001f80:	f00c f836 	bl	800dff0 <siprintf>

	 return time;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <get_time+0x64>)
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200016d0 	.word	0x200016d0
 8001f94:	08011940 	.word	0x08011940
 8001f98:	200016f0 	.word	0x200016f0

08001f9c <sd_mount>:
FIL logFile; 	//File handle


uint32_t log_index = 0;

FRESULT sd_mount(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	return f_mount(&FatFs, "", 1);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <sd_mount+0x14>)
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <sd_mount+0x18>)
 8001fa6:	f008 fa39 	bl	800a41c <f_mount>
 8001faa:	4603      	mov	r3, r0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08011968 	.word	0x08011968
 8001fb4:	20001704 	.word	0x20001704

08001fb8 <sd_open_log_file>:

FRESULT sd_open_log_file(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b092      	sub	sp, #72	; 0x48
 8001fbc:	af00      	add	r7, sp, #0
	FRESULT fres = FR_NOT_READY;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	char LOG_BUFFER[64] = {0};
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	223c      	movs	r2, #60	; 0x3c
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00c f8fe 	bl	800e1d2 <memset>

	snprintf(LOG_BUFFER, 64, LOG_FILE, log_index++);
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <sd_open_log_file+0x50>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	490a      	ldr	r1, [pc, #40]	; (8002008 <sd_open_log_file+0x50>)
 8001fde:	600a      	str	r2, [r1, #0]
 8001fe0:	1d38      	adds	r0, r7, #4
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <sd_open_log_file+0x54>)
 8001fe4:	2140      	movs	r1, #64	; 0x40
 8001fe6:	f00b ffcf 	bl	800df88 <sniprintf>
	fres = f_open(&logFile, LOG_BUFFER, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	221a      	movs	r2, #26
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <sd_open_log_file+0x58>)
 8001ff2:	f008 fa77 	bl	800a4e4 <f_open>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	return fres;
 8001ffc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002000:	4618      	mov	r0, r3
 8002002:	3748      	adds	r7, #72	; 0x48
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20001b68 	.word	0x20001b68
 800200c:	0801196c 	.word	0x0801196c
 8002010:	20001938 	.word	0x20001938

08002014 <sd_log_to_file>:

FRESULT sd_log_to_file(char *buff, UINT n) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	UINT bytesWritten;
	FRESULT fres = f_write(&logFile, buff, n, &bytesWritten);
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <sd_log_to_file+0x28>)
 8002028:	f008 fc21 	bl	800a86e <f_write>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]
	return fres;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20001938 	.word	0x20001938

08002040 <sd_switch_log>:


FRESULT sd_switch_log(void) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
	FRESULT fres = f_close(&logFile);
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <sd_switch_log+0x28>)
 8002048:	f008 fe3e 	bl	800acc8 <f_close>
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]

	if(fres == FR_OK) {
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <sd_switch_log+0x1e>
		fres = sd_open_log_file();
 8002056:	f7ff ffaf 	bl	8001fb8 <sd_open_log_file>
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	}

	return fres;
 800205e:	79fb      	ldrb	r3, [r7, #7]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20001938 	.word	0x20001938

0800206c <getDistance>:
// INPUT PARAMTERS:
//			voltage - voltage measured across the shock pot
//
// RETURN:	distance in mm of type double
//*********************************************************************
double getDistance(double voltage){
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	ed87 0b00 	vstr	d0, [r7]
	double dist = MAX_DIST * voltage / vDD;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <getDistance+0x58>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa85 	bl	8000588 <__aeabi_f2d>
 800207e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002082:	f7fe fad9 	bl	8000638 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4614      	mov	r4, r2
 800208c:	461d      	mov	r5, r3
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <getDistance+0x5c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa78 	bl	8000588 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe fbf4 	bl	800088c <__aeabi_ddiv>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return dist;
 80020ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	42480000 	.word	0x42480000
 80020c8:	08011a18 	.word	0x08011a18

080020cc <StartReadDistTask>:
// readDist_task
//
// PURPOSE: Main loop for freeRTOS thread. Waits for ADC conversion and
//			translates voltages into distance
//*********************************************************************
void StartReadDistTask(void const * argument){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80020d8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80020dc:	6018      	str	r0, [r3, #0]
	char msgDist[20];
	float voltages[16];
	char distMsg[50];

	for (;;){
		if (newData_shock_pot == 1){
 80020de:	4b43      	ldr	r3, [pc, #268]	; (80021ec <StartReadDistTask+0x120>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d17d      	bne.n	80021e2 <StartReadDistTask+0x116>
			// calculate distances for each ADC channel
			for(int i = 0; i < 16; i++) {
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80020ec:	e05d      	b.n	80021aa <StartReadDistTask+0xde>
				  voltages[i] = ADC_TO_Voltage * ADC_Readings[i];
 80020ee:	4a40      	ldr	r2, [pc, #256]	; (80021f0 <StartReadDistTask+0x124>)
 80020f0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa23 	bl	8000544 <__aeabi_ui2d>
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <StartReadDistTask+0x128>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe fa98 	bl	8000638 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd6a 	bl	8000be8 <__aeabi_d2f>
 8002114:	4601      	mov	r1, r0
 8002116:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800211a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800211e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	6019      	str	r1, [r3, #0]
				  dist[i] = getDistance(voltages[i]);
 8002128:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800212c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002130:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa24 	bl	8000588 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	ec43 2b10 	vmov	d0, r2, r3
 8002148:	f7ff ff90 	bl	800206c <getDistance>
 800214c:	eeb0 7a40 	vmov.f32	s14, s0
 8002150:	eef0 7a60 	vmov.f32	s15, s1
 8002154:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <StartReadDistTask+0x12c>)
 8002156:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	ed83 7b00 	vstr	d7, [r3]
				  sprintf(msgDist, "ADC %d %.5f \n", i, voltages[i]);
 8002162:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002166:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800216a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fa07 	bl	8000588 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002182:	e9cd 2300 	strd	r2, r3, [sp]
 8002186:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800218a:	491c      	ldr	r1, [pc, #112]	; (80021fc <StartReadDistTask+0x130>)
 800218c:	f00b ff30 	bl	800dff0 <siprintf>
				  strcat(msg,msgDist);
 8002190:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002194:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f00c f80a 	bl	800e1b4 <strcat>
			for(int i = 0; i < 16; i++) {
 80021a0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80021a4:	3301      	adds	r3, #1
 80021a6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80021aa:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	dd9d      	ble.n	80020ee <StartReadDistTask+0x22>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			// add ADC channel 0 to message
			sprintf(distMsg, "Distance: %f\r\n", dist[0]);
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <StartReadDistTask+0x12c>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f107 000c 	add.w	r0, r7, #12
 80021bc:	4910      	ldr	r1, [pc, #64]	; (8002200 <StartReadDistTask+0x134>)
 80021be:	f00b ff17 	bl	800dff0 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) distMsg, strlen(distMsg), 10);
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f872 	bl	80002b0 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	f107 010c 	add.w	r1, r7, #12
 80021d4:	230a      	movs	r3, #10
 80021d6:	480b      	ldr	r0, [pc, #44]	; (8002204 <StartReadDistTask+0x138>)
 80021d8:	f005 facb 	bl	8007772 <HAL_USART_Transmit>
			/* Logging Ends */

			newData_shock_pot = 0;					// reset ADC conversion flag
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <StartReadDistTask+0x120>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
		}

		// wait 500ms
		osDelay(500);
 80021e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e6:	f008 fec3 	bl	800af70 <osDelay>
		if (newData_shock_pot == 1){
 80021ea:	e778      	b.n	80020de <StartReadDistTask+0x12>
 80021ec:	20000a78 	.word	0x20000a78
 80021f0:	20000a38 	.word	0x20000a38
 80021f4:	08011a10 	.word	0x08011a10
 80021f8:	20001b70 	.word	0x20001b70
 80021fc:	08011978 	.word	0x08011978
 8002200:	08011988 	.word	0x08011988
 8002204:	20001e5c 	.word	0x20001e5c

08002208 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <MX_SPI1_Init+0x64>)
 800220e:	4a18      	ldr	r2, [pc, #96]	; (8002270 <MX_SPI1_Init+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_SPI1_Init+0x64>)
 8002214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_SPI1_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_SPI1_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_SPI1_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_SPI1_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_SPI1_Init+0x64>)
 8002234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_SPI1_Init+0x64>)
 800223c:	2230      	movs	r2, #48	; 0x30
 800223e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <MX_SPI1_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_SPI1_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_SPI1_Init+0x64>)
 8002254:	220a      	movs	r2, #10
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <MX_SPI1_Init+0x64>)
 800225a:	f003 fe08 	bl	8005e6e <HAL_SPI_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002264:	f7ff fe10 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20001bf0 	.word	0x20001bf0
 8002270:	40013000 	.word	0x40013000

08002274 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_SPI_MspInit+0x84>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12b      	bne.n	80022ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_SPI_MspInit+0x88>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_SPI_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022ce:	2338      	movs	r3, #56	; 0x38
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022de:	2305      	movs	r3, #5
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_SPI_MspInit+0x8c>)
 80022ea:	f002 f991 	bl	8004610 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40013000 	.word	0x40013000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020400 	.word	0x40020400

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_MspInit+0x54>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_MspInit+0x54>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_MspInit+0x54>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_MspInit+0x54>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_MspInit+0x54>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_MspInit+0x54>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	210f      	movs	r1, #15
 8002346:	f06f 0001 	mvn.w	r0, #1
 800234a:	f001 fdc7 	bl	8003edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <HAL_InitTick+0xd0>)
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <HAL_InitTick+0xd0>)
 8002376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237a:	6453      	str	r3, [r2, #68]	; 0x44
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_InitTick+0xd0>)
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fc04 	bl	8004ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002398:	f002 fbee 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 800239c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_InitTick+0xd4>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3b01      	subs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_InitTick+0xd8>)
 80023ae:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_InitTick+0xdc>)
 80023b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_InitTick+0xd8>)
 80023b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80023ba:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_InitTick+0xd8>)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_InitTick+0xd8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_InitTick+0xd8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_InitTick+0xd8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80023d2:	4818      	ldr	r0, [pc, #96]	; (8002434 <HAL_InitTick+0xd8>)
 80023d4:	f004 f97c 	bl	80066d0 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11b      	bne.n	800241e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80023e6:	4813      	ldr	r0, [pc, #76]	; (8002434 <HAL_InitTick+0xd8>)
 80023e8:	f004 f9c2 	bl	8006770 <HAL_TIM_Base_Start_IT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d111      	bne.n	800241e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023fa:	2019      	movs	r0, #25
 80023fc:	f001 fd8a 	bl	8003f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	d808      	bhi.n	8002418 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002406:	2200      	movs	r2, #0
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	2019      	movs	r0, #25
 800240c:	f001 fd66 	bl	8003edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_InitTick+0xe0>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e002      	b.n	800241e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800241e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002422:	4618      	mov	r0, r3
 8002424:	3730      	adds	r7, #48	; 0x30
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	431bde83 	.word	0x431bde83
 8002434:	20001c48 	.word	0x20001c48
 8002438:	40014400 	.word	0x40014400
 800243c:	20000008 	.word	0x20000008

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <NMI_Handler+0x4>

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002472:	f004 fb65 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20001c48 	.word	0x20001c48

08002480 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002486:	f004 fb5b 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20001dcc 	.word	0x20001dcc

08002494 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <TIM3_IRQHandler+0x10>)
 800249a:	f004 fb51 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001d3c 	.word	0x20001d3c

080024a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM4_IRQHandler+0x10>)
 80024ae:	f004 fb47 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001d84 	.word	0x20001d84

080024bc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80024c2:	f004 fb3d 	bl	8006b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20001e14 	.word	0x20001e14

080024d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA2_Stream0_IRQHandler+0x10>)
 80024d6:	f001 fe31 	bl	800413c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000ac8 	.word	0x20000ac8

080024e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	return 1;
 80024e8:	2301      	movs	r3, #1
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_kill>:

int _kill(int pid, int sig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024fe:	f00b fecb 	bl	800e298 <__errno>
 8002502:	4603      	mov	r3, r0
 8002504:	2216      	movs	r2, #22
 8002506:	601a      	str	r2, [r3, #0]
	return -1;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <_exit>:

void _exit (int status)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800251c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ffe7 	bl	80024f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002526:	e7fe      	b.n	8002526 <_exit+0x12>

08002528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e00a      	b.n	8002550 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800253a:	f3af 8000 	nop.w
 800253e:	4601      	mov	r1, r0
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	b2ca      	uxtb	r2, r1
 8002548:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf0      	blt.n	800253a <_read+0x12>
	}

return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e009      	b.n	8002588 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	60ba      	str	r2, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	dbf1      	blt.n	8002574 <_write+0x12>
	}
	return len;
 8002590:	687b      	ldr	r3, [r7, #4]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_close>:

int _close(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
	return -1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c2:	605a      	str	r2, [r3, #4]
	return 0;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_isatty>:

int _isatty(int file)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
	return 1;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
	return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f00b fe30 	bl	800e298 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	220c      	movs	r2, #12
 800263c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <_sbrk+0x64>)
 8002654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20020000 	.word	0x20020000
 8002664:	00000400 	.word	0x00000400
 8002668:	20001c90 	.word	0x20001c90
 800266c:	20005dd0 	.word	0x20005dd0

08002670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SystemInit+0x20>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <SystemInit+0x20>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00
 8002694:	00000000 	.word	0x00000000

08002698 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;

// takes the input voltage and returns the resistance
void get_NTC_Resistance(double voltageReading){
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	ed87 0b00 	vstr	d0, [r7]
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <get_NTC_Resistance+0xb0>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff6f 	bl	8000588 <__aeabi_f2d>
 80026aa:	a325      	add	r3, pc, #148	; (adr r3, 8002740 <get_NTC_Resistance+0xa8>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd fe0a 	bl	80002c8 <__aeabi_dsub>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026bc:	f7fe fa42 	bl	8000b44 <__aeabi_dcmpge>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <get_NTC_Resistance+0x44>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d2:	f7fe fa2d 	bl	8000b30 <__aeabi_dcmple>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <get_NTC_Resistance+0x54>
 80026dc:	491b      	ldr	r1, [pc, #108]	; (800274c <get_NTC_Resistance+0xb4>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
 80026ea:	e025      	b.n	8002738 <get_NTC_Resistance+0xa0>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <get_NTC_Resistance+0xb0>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff4a 	bl	8000588 <__aeabi_f2d>
 80026f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026f8:	f7fe f8c8 	bl	800088c <__aeabi_ddiv>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <get_NTC_Resistance+0xb8>)
 800270a:	f7fd fddd 	bl	80002c8 <__aeabi_dsub>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4614      	mov	r4, r2
 8002714:	461d      	mov	r5, r3
 8002716:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff12 	bl	8000544 <__aeabi_ui2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd ff86 	bl	8000638 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4906      	ldr	r1, [pc, #24]	; (800274c <get_NTC_Resistance+0xb4>)
 8002732:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bdb0      	pop	{r4, r5, r7, pc}
 8002740:	9999999a 	.word	0x9999999a
 8002744:	3fb99999 	.word	0x3fb99999
 8002748:	40533333 	.word	0x40533333
 800274c:	20001d28 	.word	0x20001d28
 8002750:	3ff00000 	.word	0x3ff00000
 8002754:	00000000 	.word	0x00000000

08002758 <getTemperature>:

// takes the input voltage and returns the temperature
double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0b00 	vstr	d0, [r7]
	get_NTC_Resistance(voltageReading);
 8002762:	ed97 0b00 	vldr	d0, [r7]
 8002766:	f7ff ff97 	bl	8002698 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <getTemperature+0x120>)
 800276c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <getTemperature+0x124>)
 8002776:	f7fe f9d1 	bl	8000b1c <__aeabi_dcmplt>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <getTemperature+0x36>
 8002780:	493f      	ldr	r1, [pc, #252]	; (8002880 <getTemperature+0x128>)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <getTemperature+0x12c>)
 8002788:	e9c1 2300 	strd	r2, r3, [r1]
 800278c:	e051      	b.n	8002832 <getTemperature+0xda>
	else{
		naturalLogR = log(R_NTC);
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <getTemperature+0x120>)
 8002790:	ed93 7b00 	vldr	d7, [r3]
 8002794:	eeb0 0a47 	vmov.f32	s0, s14
 8002798:	eef0 0a67 	vmov.f32	s1, s15
 800279c:	f00d feac 	bl	80104f8 <log>
 80027a0:	eeb0 7a40 	vmov.f32	s14, s0
 80027a4:	eef0 7a60 	vmov.f32	s15, s1
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <getTemperature+0x130>)
 80027aa:	ed83 7b00 	vstr	d7, [r3]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 80027ae:	a128      	add	r1, pc, #160	; (adr r1, 8002850 <getTemperature+0xf8>)
 80027b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <getTemperature+0x130>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff3d 	bl	8000638 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	a324      	add	r3, pc, #144	; (adr r3, 8002858 <getTemperature+0x100>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fd7e 	bl	80002cc <__adddf3>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <getTemperature+0x130>)
 80027da:	ed93 7b00 	vldr	d7, [r3]
 80027de:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8002860 <getTemperature+0x108>
 80027e2:	eeb0 0a47 	vmov.f32	s0, s14
 80027e6:	eef0 0a67 	vmov.f32	s1, s15
 80027ea:	f00d fec3 	bl	8010574 <pow>
 80027ee:	ec51 0b10 	vmov	r0, r1, d0
 80027f2:	a31d      	add	r3, pc, #116	; (adr r3, 8002868 <getTemperature+0x110>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd ff1e 	bl	8000638 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fd62 	bl	80002cc <__adddf3>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	f04f 0000 	mov.w	r0, #0
 8002810:	491a      	ldr	r1, [pc, #104]	; (800287c <getTemperature+0x124>)
 8002812:	f7fe f83b 	bl	800088c <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	a314      	add	r3, pc, #80	; (adr r3, 8002870 <getTemperature+0x118>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fd fd50 	bl	80002c8 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4914      	ldr	r1, [pc, #80]	; (8002880 <getTemperature+0x128>)
 800282e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return temperature;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <getTemperature+0x128>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	ec43 2b17 	vmov	d7, r2, r3
}
 800283c:	eeb0 0a47 	vmov.f32	s0, s14
 8002840:	eef0 0a67 	vmov.f32	s1, s15
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bdb0      	pop	{r4, r5, r7, pc}
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w
 8002850:	ac3ea183 	.word	0xac3ea183
 8002854:	3f314eaa 	.word	0x3f314eaa
 8002858:	f0bcee5a 	.word	0xf0bcee5a
 800285c:	3f54f675 	.word	0x3f54f675
 8002860:	00000000 	.word	0x00000000
 8002864:	40080000 	.word	0x40080000
 8002868:	61e3fc4e 	.word	0x61e3fc4e
 800286c:	3e825c55 	.word	0x3e825c55
 8002870:	66666666 	.word	0x66666666
 8002874:	40711266 	.word	0x40711266
 8002878:	20001d28 	.word	0x20001d28
 800287c:	3ff00000 	.word	0x3ff00000
 8002880:	20001d20 	.word	0x20001d20
 8002884:	bff00000 	.word	0xbff00000
 8002888:	20001d18 	.word	0x20001d18
 800288c:	00000000 	.word	0x00000000

08002890 <StartReadTempTask>:

void StartReadTempTask(void const * argument){
 8002890:	b580      	push	{r7, lr}
 8002892:	b092      	sub	sp, #72	; 0x48
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	char tempMsg[50];
	char* time;

	for (;;){
		if (newData_thermistor == 1) {
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <StartReadTempTask+0x140>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 808a 	bne.w	80029b6 <StartReadTempTask+0x126>
			for(int i = 0; i < 16; i++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
 80028a6:	e022      	b.n	80028ee <StartReadTempTask+0x5e>
				  temperatures[i] = getTemperature(ADC_TO_Voltage * ADC_Readings[i]);
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <StartReadTempTask+0x144>)
 80028aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe47 	bl	8000544 <__aeabi_ui2d>
 80028b6:	a344      	add	r3, pc, #272	; (adr r3, 80029c8 <StartReadTempTask+0x138>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd febc 	bl	8000638 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	ec43 2b17 	vmov	d7, r2, r3
 80028c8:	eeb0 0a47 	vmov.f32	s0, s14
 80028cc:	eef0 0a67 	vmov.f32	s1, s15
 80028d0:	f7ff ff42 	bl	8002758 <getTemperature>
 80028d4:	eeb0 7a40 	vmov.f32	s14, s0
 80028d8:	eef0 7a60 	vmov.f32	s15, s1
 80028dc:	4a3e      	ldr	r2, [pc, #248]	; (80029d8 <StartReadTempTask+0x148>)
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	ed83 7b00 	vstr	d7, [r3]
			for(int i = 0; i < 16; i++) {
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	3301      	adds	r3, #1
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
 80028ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	ddd9      	ble.n	80028a8 <StartReadTempTask+0x18>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			time = get_time();
 80028f4:	f7ff fb1e 	bl	8001f34 <get_time>
 80028f8:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80028fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028fc:	f7fd fcd8 	bl	80002b0 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	230a      	movs	r3, #10
 8002906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002908:	4834      	ldr	r0, [pc, #208]	; (80029dc <StartReadTempTask+0x14c>)
 800290a:	f004 ff32 	bl	8007772 <HAL_USART_Transmit>

			sprintf(tempMsg, ",,%f,", temperatures[0]);
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <StartReadTempTask+0x148>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f107 000c 	add.w	r0, r7, #12
 8002918:	4931      	ldr	r1, [pc, #196]	; (80029e0 <StartReadTempTask+0x150>)
 800291a:	f00b fb69 	bl	800dff0 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fcc4 	bl	80002b0 <strlen>
 8002928:	4603      	mov	r3, r0
 800292a:	b29a      	uxth	r2, r3
 800292c:	f107 010c 	add.w	r1, r7, #12
 8002930:	230a      	movs	r3, #10
 8002932:	482a      	ldr	r0, [pc, #168]	; (80029dc <StartReadTempTask+0x14c>)
 8002934:	f004 ff1d 	bl	8007772 <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[1]);
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <StartReadTempTask+0x148>)
 800293a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800293e:	f107 000c 	add.w	r0, r7, #12
 8002942:	4928      	ldr	r1, [pc, #160]	; (80029e4 <StartReadTempTask+0x154>)
 8002944:	f00b fb54 	bl	800dff0 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fcaf 	bl	80002b0 <strlen>
 8002952:	4603      	mov	r3, r0
 8002954:	b29a      	uxth	r2, r3
 8002956:	f107 010c 	add.w	r1, r7, #12
 800295a:	230a      	movs	r3, #10
 800295c:	481f      	ldr	r0, [pc, #124]	; (80029dc <StartReadTempTask+0x14c>)
 800295e:	f004 ff08 	bl	8007772 <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[2]);
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <StartReadTempTask+0x148>)
 8002964:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002968:	f107 000c 	add.w	r0, r7, #12
 800296c:	491d      	ldr	r1, [pc, #116]	; (80029e4 <StartReadTempTask+0x154>)
 800296e:	f00b fb3f 	bl	800dff0 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fc9a 	bl	80002b0 <strlen>
 800297c:	4603      	mov	r3, r0
 800297e:	b29a      	uxth	r2, r3
 8002980:	f107 010c 	add.w	r1, r7, #12
 8002984:	230a      	movs	r3, #10
 8002986:	4815      	ldr	r0, [pc, #84]	; (80029dc <StartReadTempTask+0x14c>)
 8002988:	f004 fef3 	bl	8007772 <HAL_USART_Transmit>

			sprintf(tempMsg, "%f\r\n", temperatures[3]);
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <StartReadTempTask+0x148>)
 800298e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002992:	f107 000c 	add.w	r0, r7, #12
 8002996:	4914      	ldr	r1, [pc, #80]	; (80029e8 <StartReadTempTask+0x158>)
 8002998:	f00b fb2a 	bl	800dff0 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fc85 	bl	80002b0 <strlen>
 80029a6:	4603      	mov	r3, r0
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	f107 010c 	add.w	r1, r7, #12
 80029ae:	230a      	movs	r3, #10
 80029b0:	480a      	ldr	r0, [pc, #40]	; (80029dc <StartReadTempTask+0x14c>)
 80029b2:	f004 fede 	bl	8007772 <HAL_USART_Transmit>
			/* Logging Ends */
		}

		newData_thermistor = 0;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <StartReadTempTask+0x140>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
		osDelay(500);
 80029bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c0:	f008 fad6 	bl	800af70 <osDelay>
		if (newData_thermistor == 1) {
 80029c4:	e768      	b.n	8002898 <StartReadTempTask+0x8>
 80029c6:	bf00      	nop
 80029c8:	e734d9b4 	.word	0xe734d9b4
 80029cc:	3f4a680c 	.word	0x3f4a680c
 80029d0:	20000a7c 	.word	0x20000a7c
 80029d4:	20000a38 	.word	0x20000a38
 80029d8:	20001c98 	.word	0x20001c98
 80029dc:	20001e5c 	.word	0x20001e5c
 80029e0:	08011998 	.word	0x08011998
 80029e4:	080119a0 	.word	0x080119a0
 80029e8:	080119a4 	.word	0x080119a4

080029ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
 8002a00:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <MX_TIM3_Init+0xfc>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a3e:	4829      	ldr	r0, [pc, #164]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a40:	f003 ff06 	bl	8006850 <HAL_TIM_IC_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002a4a:	f7ff fa1d 	bl	8001e88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002a52:	2350      	movs	r3, #80	; 0x50
 8002a54:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	481e      	ldr	r0, [pc, #120]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a6a:	f004 fa0d 	bl	8006e88 <HAL_TIM_SlaveConfigSynchro>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a74:	f7ff fa08 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002a92:	f004 f95d 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a9c:	f7ff f9f4 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	2204      	movs	r2, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002ab2:	f004 f94d 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002abc:	f7ff f9e4 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_TIM3_Init+0xf8>)
 8002ace:	f004 fd7f 	bl	80075d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002ad8:	f7ff f9d6 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3730      	adds	r7, #48	; 0x30
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20001d3c 	.word	0x20001d3c
 8002ae8:	40000400 	.word	0x40000400

08002aec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b1a:	4a33      	ldr	r2, [pc, #204]	; (8002be8 <MX_TIM4_Init+0xfc>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b3e:	4829      	ldr	r0, [pc, #164]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b40:	f003 fe86 	bl	8006850 <HAL_TIM_IC_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002b4a:	f7ff f99d 	bl	8001e88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b4e:	2304      	movs	r3, #4
 8002b50:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b52:	2350      	movs	r3, #80	; 0x50
 8002b54:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	481e      	ldr	r0, [pc, #120]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b6a:	f004 f98d 	bl	8006e88 <HAL_TIM_SlaveConfigSynchro>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b74:	f7ff f988 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4814      	ldr	r0, [pc, #80]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002b92:	f004 f8dd 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002b9c:	f7ff f974 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	2204      	movs	r2, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002bb2:	f004 f8cd 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002bbc:	f7ff f964 	bl	8001e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_TIM4_Init+0xf8>)
 8002bce:	f004 fcff 	bl	80075d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002bd8:	f7ff f956 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20001d84 	.word	0x20001d84
 8002be8:	40000800 	.word	0x40000800

08002bec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <MX_TIM11_Init+0x8c>)
 8002c02:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c16:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c24:	4813      	ldr	r0, [pc, #76]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c26:	f003 fd53 	bl	80066d0 <HAL_TIM_Base_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002c30:	f7ff f92a 	bl	8001e88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002c34:	480f      	ldr	r0, [pc, #60]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c36:	f003 fe0b 	bl	8006850 <HAL_TIM_IC_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002c40:	f7ff f922 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c44:	2300      	movs	r3, #0
 8002c46:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c54:	463b      	mov	r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	; (8002c74 <MX_TIM11_Init+0x88>)
 8002c5c:	f004 f878 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002c66:	f7ff f90f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20001dcc 	.word	0x20001dcc
 8002c78:	40014800 	.word	0x40014800

08002c7c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <MX_TIM12_Init+0xd4>)
 8002ca2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002cc4:	4821      	ldr	r0, [pc, #132]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cc6:	f003 fdc3 	bl	8006850 <HAL_TIM_IC_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8002cd0:	f7ff f8da 	bl	8001e88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002cd8:	2350      	movs	r3, #80	; 0x50
 8002cda:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4817      	ldr	r0, [pc, #92]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002cf0:	f004 f8ca 	bl	8006e88 <HAL_TIM_SlaveConfigSynchro>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002cfa:	f7ff f8c5 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d02:	2301      	movs	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	4619      	mov	r1, r3
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002d16:	f004 f81b 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8002d20:	f7ff f8b2 	bl	8001e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d24:	2302      	movs	r3, #2
 8002d26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4806      	ldr	r0, [pc, #24]	; (8002d4c <MX_TIM12_Init+0xd0>)
 8002d34:	f004 f80c 	bl	8006d50 <HAL_TIM_IC_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8002d3e:	f7ff f8a3 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20001e14 	.word	0x20001e14
 8002d50:	40001800 	.word	0x40001800

08002d54 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_TIM_IC_MspInit+0x17c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d134      	bne.n	8002de0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
 8002d7a:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4843      	ldr	r0, [pc, #268]	; (8002ed8 <HAL_TIM_IC_MspInit+0x184>)
 8002dca:	f001 fc21 	bl	8004610 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	201d      	movs	r0, #29
 8002dd4:	f001 f882 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dd8:	201d      	movs	r0, #29
 8002dda:	f001 f89b 	bl	8003f14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002dde:	e073      	b.n	8002ec8 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM4)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3d      	ldr	r2, [pc, #244]	; (8002edc <HAL_TIM_IC_MspInit+0x188>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d134      	bne.n	8002e54 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e22:	2340      	movs	r3, #64	; 0x40
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e32:	2302      	movs	r3, #2
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4828      	ldr	r0, [pc, #160]	; (8002ee0 <HAL_TIM_IC_MspInit+0x18c>)
 8002e3e:	f001 fbe7 	bl	8004610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2105      	movs	r1, #5
 8002e46:	201e      	movs	r0, #30
 8002e48:	f001 f848 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e4c:	201e      	movs	r0, #30
 8002e4e:	f001 f861 	bl	8003f14 <HAL_NVIC_EnableIRQ>
}
 8002e52:	e039      	b.n	8002ec8 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM12)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_TIM_IC_MspInit+0x190>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d134      	bne.n	8002ec8 <HAL_TIM_IC_MspInit+0x174>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_TIM_IC_MspInit+0x180>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <HAL_TIM_IC_MspInit+0x18c>)
 8002eb4:	f001 fbac 	bl	8004610 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	202b      	movs	r0, #43	; 0x2b
 8002ebe:	f001 f80d 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ec2:	202b      	movs	r0, #43	; 0x2b
 8002ec4:	f001 f826 	bl	8003f14 <HAL_NVIC_EnableIRQ>
}
 8002ec8:	bf00      	nop
 8002eca:	3738      	adds	r7, #56	; 0x38
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40001800 	.word	0x40001800

08002ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM11)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_TIM_Base_MspInit+0x94>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d134      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_TIM_Base_MspInit+0x98>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002f54:	2303      	movs	r3, #3
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4809      	ldr	r0, [pc, #36]	; (8002f84 <HAL_TIM_Base_MspInit+0x9c>)
 8002f60:	f001 fb56 	bl	8004610 <HAL_GPIO_Init>

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002f64:	2200      	movs	r2, #0
 8002f66:	2105      	movs	r1, #5
 8002f68:	201a      	movs	r0, #26
 8002f6a:	f000 ffb7 	bl	8003edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f6e:	201a      	movs	r0, #26
 8002f70:	f000 ffd0 	bl	8003f14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f74:	bf00      	nop
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40014800 	.word	0x40014800
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020400 	.word	0x40020400

08002f88 <HAL_TIM_IC_CaptureCallback>:
}

/* USER CODE BEGIN 1 */
// function called when timer interrupt occurs
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	uint32_t ICValue;

	if (htim->Instance == TIM11) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d109      	bne.n	8002fae <HAL_TIM_IC_CaptureCallback+0x26>
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f003 ffb5 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 8002fa2:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_TIM_IC_CaptureCallback+0x26>
		{
//			sd_ejAect();
			sd_switch_log();
 8002faa:	f7ff f849 	bl	8002040 <sd_switch_log>
		}
	}

	// when interrupt is caused by timer 3
	if(htim->Instance == TIM3)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_TIM_IC_CaptureCallback+0x4a>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002fb8:	2100      	movs	r1, #0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f003 ffa6 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 8002fc0:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{
			wheel_FL_pulse_count++;	// increment pulse_count
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002fd0:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 4
	if(htim->Instance == TIM4)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10c      	bne.n	8002ff6 <HAL_TIM_IC_CaptureCallback+0x6e>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f003 ff94 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 8002fe4:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_TIM_IC_CaptureCallback+0x6e>
		{
			wheel_FR_pulse_count++;	// increment pulse_count
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002ff4:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 12
	if(htim->Instance == TIM12)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10c      	bne.n	800301a <HAL_TIM_IC_CaptureCallback+0x92>
	{

		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003000:	2100      	movs	r1, #0
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f003 ff82 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 8003008:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_TIM_IC_CaptureCallback+0x92>
		{
			flowmeter_pulse_count++;	// increment pulse_count
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8003018:	6013      	str	r3, [r2, #0]
		}
	}
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40014800 	.word	0x40014800
 8003028:	40000400 	.word	0x40000400
 800302c:	20001d34 	.word	0x20001d34
 8003030:	40000800 	.word	0x40000800
 8003034:	20001d38 	.word	0x20001d38
 8003038:	40001800 	.word	0x40001800
 800303c:	20001d30 	.word	0x20001d30

08003040 <MX_USART1_Init>:

USART_HandleTypeDef husart1;

/* USART1 init function */
void MX_USART1_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_USART1_Init+0x50>)
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <MX_USART1_Init+0x54>)
 8003048:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_USART1_Init+0x50>)
 800304c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003050:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_USART1_Init+0x50>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <MX_USART1_Init+0x50>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_USART1_Init+0x50>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <MX_USART1_Init+0x50>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_USART1_Init+0x50>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <MX_USART1_Init+0x50>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <MX_USART1_Init+0x50>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_USART1_Init+0x50>)
 800307e:	f004 fb37 	bl	80076f0 <HAL_USART_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8003088:	f7fe fefe 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20001e5c 	.word	0x20001e5c
 8003094:	40011000 	.word	0x40011000

08003098 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_USART_MspInit+0x84>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12c      	bne.n	8003114 <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030c4:	f043 0310 	orr.w	r3, r3, #16
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_USART_MspInit+0x88>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80030f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003104:	2307      	movs	r3, #7
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_USART_MspInit+0x8c>)
 8003110:	f001 fa7e 	bl	8004610 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40011000 	.word	0x40011000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000

08003128 <calculateWheelSpeed>:

extern volatile int wheel_FL_pulse_count;
extern volatile int wheel_FR_pulse_count;

// gets wheel speeds as m/s
double calculateWheelSpeed(int pulse_count){
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	volatile double wheel_speed;

	wheel_speed = pulse_count*conversionFactor*WHEEL_CIRCUMFERENCE/NUM_TEETH;	// calculate wheel speed
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fa17 	bl	8000564 <__aeabi_i2d>
 8003136:	a315      	add	r3, pc, #84	; (adr r3, 800318c <calculateWheelSpeed+0x64>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd fa7c 	bl	8000638 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	a312      	add	r3, pc, #72	; (adr r3, 8003194 <calculateWheelSpeed+0x6c>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd fa73 	bl	8000638 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <calculateWheelSpeed+0x60>)
 8003160:	f7fd fb94 	bl	800088c <__aeabi_ddiv>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return wheel_speed;
 800316c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003170:	ec43 2b17 	vmov	d7, r2, r3
}
 8003174:	eeb0 0a47 	vmov.f32	s0, s14
 8003178:	eef0 0a67 	vmov.f32	s1, s15
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	f3af 8000 	nop.w
 8003188:	40240000 	.word	0x40240000
 800318c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003190:	3f60624d 	.word	0x3f60624d
 8003194:	f01b866e 	.word	0xf01b866e
 8003198:	400921f9 	.word	0x400921f9

0800319c <StartGetWheelSpeedTask>:

void StartGetWheelSpeedTask(void const * argument){
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	volatile double FL_speed;
	volatile double FR_speed;

	for (;;){
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 80031a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031a8:	f007 fee2 	bl	800af70 <osDelay>

		// calculates wheel speeds
		FL_speed = calculateWheelSpeed(wheel_FL_pulse_count);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <StartGetWheelSpeedTask+0x4c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ffb9 	bl	8003128 <calculateWheelSpeed>
 80031b6:	eeb0 7a40 	vmov.f32	s14, s0
 80031ba:	eef0 7a60 	vmov.f32	s15, s1
 80031be:	ed87 7b04 	vstr	d7, [r7, #16]
		FR_speed = calculateWheelSpeed(wheel_FR_pulse_count);
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <StartGetWheelSpeedTask+0x50>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ffae 	bl	8003128 <calculateWheelSpeed>
 80031cc:	eeb0 7a40 	vmov.f32	s14, s0
 80031d0:	eef0 7a60 	vmov.f32	s15, s1
 80031d4:	ed87 7b02 	vstr	d7, [r7, #8]


		/* Logging Ends */

		// reset counts
		wheel_FL_pulse_count = 0;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <StartGetWheelSpeedTask+0x4c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
		wheel_FR_pulse_count = 0;
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <StartGetWheelSpeedTask+0x50>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 80031e4:	e7de      	b.n	80031a4 <StartGetWheelSpeedTask+0x8>
 80031e6:	bf00      	nop
 80031e8:	20001d34 	.word	0x20001d34
 80031ec:	20001d38 	.word	0x20001d38

080031f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031f6:	490e      	ldr	r1, [pc, #56]	; (8003230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800320c:	4c0b      	ldr	r4, [pc, #44]	; (800323c <LoopFillZerobss+0x26>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800321a:	f7ff fa29 	bl	8002670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800321e:	f00b f841 	bl	800e2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003222:	f7fe fd3d 	bl	8001ca0 <main>
  bx  lr    
 8003226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800322c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003230:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003234:	08011e58 	.word	0x08011e58
  ldr r2, =_sbss
 8003238:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800323c:	20005dcc 	.word	0x20005dcc

08003240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003240:	e7fe      	b.n	8003240 <ADC_IRQHandler>
	...

08003244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_Init+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_Init+0x40>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_Init+0x40>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <HAL_Init+0x40>)
 800325a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_Init+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_Init+0x40>)
 8003266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800326c:	2003      	movs	r0, #3
 800326e:	f000 fe2a 	bl	8003ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003272:	200f      	movs	r0, #15
 8003274:	f7ff f872 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003278:	f7ff f844 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00

08003288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x20>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x24>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_IncTick+0x24>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	20001ea0 	.word	0x20001ea0

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTick+0x14>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20001ea0 	.word	0x20001ea0

080032c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e033      	b.n	8003346 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe f9e0 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800330e:	f023 0302 	bic.w	r3, r3, #2
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa6e 	bl	80037fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
 8003336:	e001      	b.n	800333c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADC_Start_DMA+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0e9      	b.n	8003542 <HAL_ADC_Start_DMA+0x1f2>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d018      	beq.n	80033b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003394:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_ADC_Start_DMA+0x1fc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6d      	ldr	r2, [pc, #436]	; (8003550 <HAL_ADC_Start_DMA+0x200>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0c9a      	lsrs	r2, r3, #18
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033a8:	e002      	b.n	80033b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c4:	d107      	bne.n	80033d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 80a1 	bne.w	8003528 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003424:	d106      	bne.n	8003434 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f023 0206 	bic.w	r2, r3, #6
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
 8003432:	e002      	b.n	800343a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003442:	4b44      	ldr	r3, [pc, #272]	; (8003554 <HAL_ADC_Start_DMA+0x204>)
 8003444:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	4a43      	ldr	r2, [pc, #268]	; (8003558 <HAL_ADC_Start_DMA+0x208>)
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	4a42      	ldr	r2, [pc, #264]	; (800355c <HAL_ADC_Start_DMA+0x20c>)
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	4a41      	ldr	r2, [pc, #260]	; (8003560 <HAL_ADC_Start_DMA+0x210>)
 800345c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003466:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003476:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	334c      	adds	r3, #76	; 0x4c
 8003492:	4619      	mov	r1, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f000 fdf8 	bl	800408c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d12a      	bne.n	80034fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <HAL_ADC_Start_DMA+0x214>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d015      	beq.n	80034de <HAL_ADC_Start_DMA+0x18e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <HAL_ADC_Start_DMA+0x218>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_Start_DMA+0x178>
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_ADC_Start_DMA+0x204>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_ADC_Start_DMA+0x21c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d136      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_ADC_Start_DMA+0x204>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d130      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d129      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e020      	b.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_ADC_Start_DMA+0x214>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d11b      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d114      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	e00b      	b.n	8003540 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f043 0210 	orr.w	r2, r3, #16
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000004 	.word	0x20000004
 8003550:	431bde83 	.word	0x431bde83
 8003554:	40012300 	.word	0x40012300
 8003558:	080039f5 	.word	0x080039f5
 800355c:	08003aaf 	.word	0x08003aaf
 8003560:	08003acb 	.word	0x08003acb
 8003564:	40012000 	.word	0x40012000
 8003568:	40012100 	.word	0x40012100
 800356c:	40012200 	.word	0x40012200

08003570 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e113      	b.n	80037dc <HAL_ADC_ConfigChannel+0x244>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	d925      	bls.n	8003610 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68d9      	ldr	r1, [r3, #12]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	3b1e      	subs	r3, #30
 80035da:	2207      	movs	r2, #7
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68d9      	ldr	r1, [r3, #12]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	4603      	mov	r3, r0
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4403      	add	r3, r0
 8003602:	3b1e      	subs	r3, #30
 8003604:	409a      	lsls	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e022      	b.n	8003656 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6919      	ldr	r1, [r3, #16]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	2207      	movs	r2, #7
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	400a      	ands	r2, r1
 8003632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4618      	mov	r0, r3
 8003646:	4603      	mov	r3, r0
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4403      	add	r3, r0
 800364c:	409a      	lsls	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b06      	cmp	r3, #6
 800365c:	d824      	bhi.n	80036a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b05      	subs	r3, #5
 8003670:	221f      	movs	r2, #31
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	4618      	mov	r0, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	3b05      	subs	r3, #5
 800369a:	fa00 f203 	lsl.w	r2, r0, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
 80036a6:	e04c      	b.n	8003742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	d824      	bhi.n	80036fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	3b23      	subs	r3, #35	; 0x23
 80036c2:	221f      	movs	r2, #31
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43da      	mvns	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	400a      	ands	r2, r1
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	3b23      	subs	r3, #35	; 0x23
 80036ec:	fa00 f203 	lsl.w	r2, r0, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
 80036f8:	e023      	b.n	8003742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	3b41      	subs	r3, #65	; 0x41
 800370c:	221f      	movs	r2, #31
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43da      	mvns	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	400a      	ands	r2, r1
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	4618      	mov	r0, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	3b41      	subs	r3, #65	; 0x41
 8003736:	fa00 f203 	lsl.w	r2, r0, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <HAL_ADC_ConfigChannel+0x250>)
 8003744:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a28      	ldr	r2, [pc, #160]	; (80037ec <HAL_ADC_ConfigChannel+0x254>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10f      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1d8>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b12      	cmp	r3, #18
 8003756:	d10b      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <HAL_ADC_ConfigChannel+0x254>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d12b      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x23a>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_ADC_ConfigChannel+0x258>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <HAL_ADC_ConfigChannel+0x1f4>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b11      	cmp	r3, #17
 800378a:	d122      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <HAL_ADC_ConfigChannel+0x258>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d111      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_ADC_ConfigChannel+0x25c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_ADC_ConfigChannel+0x260>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	0c9a      	lsrs	r2, r3, #18
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037c4:	e002      	b.n	80037cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f9      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012300 	.word	0x40012300
 80037ec:	40012000 	.word	0x40012000
 80037f0:	10000012 	.word	0x10000012
 80037f4:	20000004 	.word	0x20000004
 80037f8:	431bde83 	.word	0x431bde83

080037fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003804:	4b79      	ldr	r3, [pc, #484]	; (80039ec <ADC_Init+0x1f0>)
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	431a      	orrs	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6899      	ldr	r1, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <ADC_Init+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e00f      	b.n	80038fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0202 	bic.w	r2, r2, #2
 8003908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7e1b      	ldrb	r3, [r3, #24]
 8003914:	005a      	lsls	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01b      	beq.n	8003960 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	3b01      	subs	r3, #1
 8003954:	035a      	lsls	r2, r3, #13
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e007      	b.n	8003970 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	3b01      	subs	r3, #1
 800398c:	051a      	lsls	r2, r3, #20
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6899      	ldr	r1, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039b2:	025a      	lsls	r2, r3, #9
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	029a      	lsls	r2, r3, #10
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40012300 	.word	0x40012300
 80039f0:	0f000001 	.word	0x0f000001

080039f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13c      	bne.n	8003a88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d12b      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d127      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d006      	beq.n	8003a4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d119      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	f043 0201 	orr.w	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7fd fec3 	bl	800180c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a86:	e00e      	b.n	8003aa6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff fd75 	bl	8003584 <HAL_ADC_ErrorCallback>
}
 8003a9a:	e004      	b.n	8003aa6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff fd57 	bl	8003570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b084      	sub	sp, #16
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff fd4a 	bl	8003584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d003      	beq.n	8003b1c <HAL_CAN_GetRxMessage+0x24>
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	f040 80f3 	bne.w	8003d02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10e      	bne.n	8003b40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0e7      	b.n	8003d10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d107      	bne.n	8003b5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0d8      	b.n	8003d10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	331b      	adds	r3, #27
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0204 	and.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10c      	bne.n	8003b96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	331b      	adds	r3, #27
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4413      	add	r3, r2
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0d5b      	lsrs	r3, r3, #21
 8003b8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e00b      	b.n	8003bae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	331b      	adds	r3, #27
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	08db      	lsrs	r3, r3, #3
 8003ba6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	331b      	adds	r3, #27
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0202 	and.w	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	331b      	adds	r3, #27
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	331b      	adds	r3, #27
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	331b      	adds	r3, #27
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	0a1a      	lsrs	r2, r3, #8
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0c1a      	lsrs	r2, r3, #16
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	3302      	adds	r3, #2
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	0e1a      	lsrs	r2, r3, #24
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3303      	adds	r3, #3
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3304      	adds	r3, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0a1a      	lsrs	r2, r3, #8
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	3305      	adds	r3, #5
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0c1a      	lsrs	r2, r3, #16
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	3306      	adds	r3, #6
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e1a      	lsrs	r2, r3, #24
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d108      	bne.n	8003cee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0220 	orr.w	r2, r2, #32
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e007      	b.n	8003cfe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0220 	orr.w	r2, r2, #32
 8003cfc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e006      	b.n	8003d10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d30:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d002      	beq.n	8003d3e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d10f      	bne.n	8003d5e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e005      	b.n	8003d5e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db0a      	blt.n	8003e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	490c      	ldr	r1, [pc, #48]	; (8003e58 <__NVIC_SetPriority+0x4c>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	0112      	lsls	r2, r2, #4
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e34:	e00a      	b.n	8003e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4908      	ldr	r1, [pc, #32]	; (8003e5c <__NVIC_SetPriority+0x50>)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	3b04      	subs	r3, #4
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	440b      	add	r3, r1
 8003e4a:	761a      	strb	r2, [r3, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f1c3 0307 	rsb	r3, r3, #7
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	2304      	movcs	r3, #4
 8003e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d902      	bls.n	8003e90 <NVIC_EncodePriority+0x30>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3b03      	subs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <NVIC_EncodePriority+0x32>
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	4313      	orrs	r3, r2
         );
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3724      	adds	r7, #36	; 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff4c 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eee:	f7ff ff61 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f7ff ffb1 	bl	8003e60 <NVIC_EncodePriority>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff80 	bl	8003e0c <__NVIC_SetPriority>
}
 8003f0c:	bf00      	nop
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff54 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7ff f9b8 	bl	80032b0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e099      	b.n	8004080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f6c:	e00f      	b.n	8003f8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f6e:	f7ff f99f 	bl	80032b0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b05      	cmp	r3, #5
 8003f7a:	d908      	bls.n	8003f8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2203      	movs	r2, #3
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e078      	b.n	8004080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e8      	bne.n	8003f6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4b38      	ldr	r3, [pc, #224]	; (8004088 <HAL_DMA_Init+0x158>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d107      	bne.n	8003ff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b04      	cmp	r3, #4
 8004020:	d117      	bne.n	8004052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00e      	beq.n	8004052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa6f 	bl	8004518 <DMA_CheckFifoParam>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800404e:	2301      	movs	r3, #1
 8004050:	e016      	b.n	8004080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa26 	bl	80044ac <DMA_CalcBaseAndBitshift>
 8004060:	4603      	mov	r3, r0
 8004062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	223f      	movs	r2, #63	; 0x3f
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	f010803f 	.word	0xf010803f

0800408c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_DMA_Start_IT+0x26>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e040      	b.n	8004134 <HAL_DMA_Start_IT+0xa8>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d12f      	bne.n	8004126 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f9b8 	bl	8004450 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	223f      	movs	r2, #63	; 0x3f
 80040e6:	409a      	lsls	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0216 	orr.w	r2, r2, #22
 80040fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0208 	orr.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e005      	b.n	8004132 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004148:	4b8e      	ldr	r3, [pc, #568]	; (8004384 <HAL_DMA_IRQHandler+0x248>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a8e      	ldr	r2, [pc, #568]	; (8004388 <HAL_DMA_IRQHandler+0x24c>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0a9b      	lsrs	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	2208      	movs	r2, #8
 8004168:	409a      	lsls	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	2208      	movs	r2, #8
 8004196:	409a      	lsls	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2204      	movs	r2, #4
 8004202:	409a      	lsls	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2210      	movs	r2, #16
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d043      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d03c      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2210      	movs	r2, #16
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d024      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e01f      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01b      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e016      	b.n	80042ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0208 	bic.w	r2, r2, #8
 800429a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2220      	movs	r2, #32
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 808f 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8087 	beq.w	80043dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2220      	movs	r2, #32
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d136      	bne.n	8004354 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0216 	bic.w	r2, r2, #22
 80042f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004304:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_DMA_IRQHandler+0x1da>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	223f      	movs	r2, #63	; 0x3f
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d07e      	beq.n	8004448 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
        }
        return;
 8004352:	e079      	b.n	8004448 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10d      	bne.n	800438c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e02c      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
 8004382:	bf00      	nop
 8004384:	20000004 	.word	0x20000004
 8004388:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e01e      	b.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0210 	bic.w	r2, r2, #16
 80043ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2205      	movs	r2, #5
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d307      	bcc.n	8004424 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f2      	bne.n	8004408 <HAL_DMA_IRQHandler+0x2cc>
 8004422:	e000      	b.n	8004426 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004424:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	e000      	b.n	800444a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004448:	bf00      	nop
    }
  }
}
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b40      	cmp	r3, #64	; 0x40
 800447c:	d108      	bne.n	8004490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800448e:	e007      	b.n	80044a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	3b10      	subs	r3, #16
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <DMA_CalcBaseAndBitshift+0x64>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044c6:	4a13      	ldr	r2, [pc, #76]	; (8004514 <DMA_CalcBaseAndBitshift+0x68>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d909      	bls.n	80044ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	659a      	str	r2, [r3, #88]	; 0x58
 80044ec:	e007      	b.n	80044fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	aaaaaaab 	.word	0xaaaaaaab
 8004514:	08011a1c 	.word	0x08011a1c

08004518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11f      	bne.n	8004572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d856      	bhi.n	80045e6 <DMA_CheckFifoParam+0xce>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <DMA_CheckFifoParam+0x28>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004563 	.word	0x08004563
 8004548:	08004551 	.word	0x08004551
 800454c:	080045e7 	.word	0x080045e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d046      	beq.n	80045ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e043      	b.n	80045ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800456a:	d140      	bne.n	80045ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004570:	e03d      	b.n	80045ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457a:	d121      	bne.n	80045c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d837      	bhi.n	80045f2 <DMA_CheckFifoParam+0xda>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <DMA_CheckFifoParam+0x70>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004599 	.word	0x08004599
 800458c:	0800459f 	.word	0x0800459f
 8004590:	08004599 	.word	0x08004599
 8004594:	080045b1 	.word	0x080045b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      break;
 800459c:	e030      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d025      	beq.n	80045f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ae:	e022      	b.n	80045f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b8:	d11f      	bne.n	80045fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045be:	e01c      	b.n	80045fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d903      	bls.n	80045ce <DMA_CheckFifoParam+0xb6>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d003      	beq.n	80045d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045cc:	e018      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      break;
 80045d2:	e015      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e00b      	b.n	80045fe <DMA_CheckFifoParam+0xe6>
      break;
 80045e6:	bf00      	nop
 80045e8:	e00a      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e008      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ee:	bf00      	nop
 80045f0:	e006      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
 80045f4:	e004      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;   
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e165      	b.n	80048f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	f040 8154 	bne.w	80048f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d005      	beq.n	8004662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465e:	2b02      	cmp	r3, #2
 8004660:	d130      	bne.n	80046c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	2203      	movs	r2, #3
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004698:	2201      	movs	r2, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 0201 	and.w	r2, r3, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d017      	beq.n	8004700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d123      	bne.n	8004754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	08da      	lsrs	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0203 	and.w	r2, r3, #3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80ae 	beq.w	80048f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	4b5d      	ldr	r3, [pc, #372]	; (8004910 <HAL_GPIO_Init+0x300>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4a5c      	ldr	r2, [pc, #368]	; (8004910 <HAL_GPIO_Init+0x300>)
 80047a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a4:	6453      	str	r3, [r2, #68]	; 0x44
 80047a6:	4b5a      	ldr	r3, [pc, #360]	; (8004910 <HAL_GPIO_Init+0x300>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047b2:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_GPIO_Init+0x304>)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	3302      	adds	r3, #2
 80047ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4f      	ldr	r2, [pc, #316]	; (8004918 <HAL_GPIO_Init+0x308>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d025      	beq.n	800482a <HAL_GPIO_Init+0x21a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4e      	ldr	r2, [pc, #312]	; (800491c <HAL_GPIO_Init+0x30c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <HAL_GPIO_Init+0x216>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4d      	ldr	r2, [pc, #308]	; (8004920 <HAL_GPIO_Init+0x310>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d019      	beq.n	8004822 <HAL_GPIO_Init+0x212>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4c      	ldr	r2, [pc, #304]	; (8004924 <HAL_GPIO_Init+0x314>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_GPIO_Init+0x20e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4b      	ldr	r2, [pc, #300]	; (8004928 <HAL_GPIO_Init+0x318>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00d      	beq.n	800481a <HAL_GPIO_Init+0x20a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4a      	ldr	r2, [pc, #296]	; (800492c <HAL_GPIO_Init+0x31c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <HAL_GPIO_Init+0x206>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a49      	ldr	r2, [pc, #292]	; (8004930 <HAL_GPIO_Init+0x320>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_GPIO_Init+0x202>
 800480e:	2306      	movs	r3, #6
 8004810:	e00c      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004812:	2307      	movs	r3, #7
 8004814:	e00a      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004816:	2305      	movs	r3, #5
 8004818:	e008      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800481a:	2304      	movs	r3, #4
 800481c:	e006      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800481e:	2303      	movs	r3, #3
 8004820:	e004      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004822:	2302      	movs	r3, #2
 8004824:	e002      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800482a:	2300      	movs	r3, #0
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	f002 0203 	and.w	r2, r2, #3
 8004832:	0092      	lsls	r2, r2, #2
 8004834:	4093      	lsls	r3, r2
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483c:	4935      	ldr	r1, [pc, #212]	; (8004914 <HAL_GPIO_Init+0x304>)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	3302      	adds	r3, #2
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484a:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <HAL_GPIO_Init+0x324>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800486e:	4a31      	ldr	r2, [pc, #196]	; (8004934 <HAL_GPIO_Init+0x324>)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_GPIO_Init+0x324>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_GPIO_Init+0x324>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <HAL_GPIO_Init+0x324>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_GPIO_Init+0x324>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_GPIO_Init+0x324>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_GPIO_Init+0x324>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	f67f ae96 	bls.w	800462c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	40013800 	.word	0x40013800
 8004918:	40020000 	.word	0x40020000
 800491c:	40020400 	.word	0x40020400
 8004920:	40020800 	.word	0x40020800
 8004924:	40020c00 	.word	0x40020c00
 8004928:	40021000 	.word	0x40021000
 800492c:	40021400 	.word	0x40021400
 8004930:	40021800 	.word	0x40021800
 8004934:	40013c00 	.word	0x40013c00

08004938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
 8004944:	4613      	mov	r3, r2
 8004946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004954:	e003      	b.n	800495e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0cc      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b68      	ldr	r3, [pc, #416]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d90c      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b65      	ldr	r3, [pc, #404]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b63      	ldr	r3, [pc, #396]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0b8      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a58      	ldr	r2, [pc, #352]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a52      	ldr	r2, [pc, #328]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494d      	ldr	r1, [pc, #308]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d044      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d119      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e07f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e067      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4934      	ldr	r1, [pc, #208]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fc28 	bl	80032b0 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe fc24 	bl	80032b0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e04f      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20c      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e032      	b.n	8004b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac0:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	4916      	ldr	r1, [pc, #88]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004af2:	f000 fbb1 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8004af6:	4602      	mov	r2, r0
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	490a      	ldr	r1, [pc, #40]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	5ccb      	ldrb	r3, [r1, r3]
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd fc22 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	080119f8 	.word	0x080119f8
 8004b30:	20000004 	.word	0x20000004
 8004b34:	20000008 	.word	0x20000008

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b54:	f7ff fff0 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0a9b      	lsrs	r3, r3, #10
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	08011a08 	.word	0x08011a08

08004b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b7c:	f7ff ffdc 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0b5b      	lsrs	r3, r3, #13
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	08011a08 	.word	0x08011a08

08004ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40023c00 	.word	0x40023c00

08004c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c3c:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	496c      	ldr	r1, [pc, #432]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c6a:	4b64      	ldr	r3, [pc, #400]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	4960      	ldr	r1, [pc, #384]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c98:	4b58      	ldr	r3, [pc, #352]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4955      	ldr	r1, [pc, #340]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cd4:	4b49      	ldr	r3, [pc, #292]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	4946      	ldr	r1, [pc, #280]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004d00:	2301      	movs	r3, #1
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 808a 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a38      	ldr	r2, [pc, #224]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d2e:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a33      	ldr	r2, [pc, #204]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3a:	f7fe fab9 	bl	80032b0 <HAL_GetTick>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe fab5 	bl	80032b0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e278      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d60:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d68:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02f      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d028      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d88:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d114      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fe fa83 	bl	80032b0 <HAL_GetTick>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fe fa7f 	bl	80032b0 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e240      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	4b0d      	ldr	r3, [pc, #52]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ee      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ddc:	d114      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	4902      	ldr	r1, [pc, #8]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]
 8004df8:	e00c      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42470e40 	.word	0x42470e40
 8004e08:	4b4a      	ldr	r3, [pc, #296]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a49      	ldr	r2, [pc, #292]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e20:	4944      	ldr	r1, [pc, #272]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004e38:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e3a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e48:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	4937      	ldr	r1, [pc, #220]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e6a:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e70:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e78:	492e      	ldr	r1, [pc, #184]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d011      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e8c:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	4926      	ldr	r1, [pc, #152]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004eac:	2301      	movs	r3, #1
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	491a      	ldr	r1, [pc, #104]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d011      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	4911      	ldr	r1, [pc, #68]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efc:	d101      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004efe:	2301      	movs	r3, #1
 8004f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d005      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f10:	f040 80ff 	bne.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f1a:	f7fe f9c9 	bl	80032b0 <HAL_GetTick>
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f20:	e00e      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f22:	f7fe f9c5 	bl	80032b0 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d907      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e188      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	424711e0 	.word	0x424711e0
 8004f3c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f40:	4b7e      	ldr	r3, [pc, #504]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ea      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d028      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d124      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f74:	4b71      	ldr	r3, [pc, #452]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	3301      	adds	r3, #1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f86:	4b6d      	ldr	r3, [pc, #436]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	4961      	ldr	r1, [pc, #388]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d035      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe8:	d130      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ffc:	4b4f      	ldr	r3, [pc, #316]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005002:	0f1b      	lsrs	r3, r3, #28
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	019b      	lsls	r3, r3, #6
 8005014:	431a      	orrs	r2, r3
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	3b01      	subs	r3, #1
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	431a      	orrs	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	071b      	lsls	r3, r3, #28
 800502c:	4943      	ldr	r1, [pc, #268]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005034:	4b41      	ldr	r3, [pc, #260]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503a:	f023 021f 	bic.w	r2, r3, #31
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	3b01      	subs	r3, #1
 8005044:	493d      	ldr	r1, [pc, #244]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d029      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005060:	d124      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005074:	4b31      	ldr	r3, [pc, #196]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507a:	0f1b      	lsrs	r3, r3, #28
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	019b      	lsls	r3, r3, #6
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	3b01      	subs	r3, #1
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	071b      	lsls	r3, r3, #28
 80050a4:	4925      	ldr	r1, [pc, #148]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	019b      	lsls	r3, r3, #6
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	085b      	lsrs	r3, r3, #1
 80050ca:	3b01      	subs	r3, #1
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4917      	ldr	r1, [pc, #92]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050e6:	4b16      	ldr	r3, [pc, #88]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ec:	f7fe f8e0 	bl	80032b0 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050f4:	f7fe f8dc 	bl	80032b0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e09f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 8095 	bne.w	8005244 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005120:	f7fe f8c6 	bl	80032b0 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005126:	e00f      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005128:	f7fe f8c2 	bl	80032b0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d908      	bls.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e085      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	42470068 	.word	0x42470068
 8005144:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005148:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005154:	d0e8      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005172:	2b00      	cmp	r3, #0
 8005174:	d02b      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	2b00      	cmp	r3, #0
 800517c:	d127      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800517e:	4b34      	ldr	r3, [pc, #208]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	431a      	orrs	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	3b01      	subs	r3, #1
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	4928      	ldr	r1, [pc, #160]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051b4:	4b26      	ldr	r3, [pc, #152]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	3b01      	subs	r3, #1
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4922      	ldr	r1, [pc, #136]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01d      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e2:	d118      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	0e1b      	lsrs	r3, r3, #24
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	019b      	lsls	r3, r3, #6
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	4910      	ldr	r1, [pc, #64]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800521c:	f7fe f848 	bl	80032b0 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005224:	f7fe f844 	bl	80032b0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e007      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d1ef      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3730      	adds	r7, #48	; 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	42470070 	.word	0x42470070

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b0a6      	sub	sp, #152	; 0x98
 800525e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527e:	4bc8      	ldr	r3, [pc, #800]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b0c      	cmp	r3, #12
 8005288:	f200 817e 	bhi.w	8005588 <HAL_RCC_GetSysClockFreq+0x330>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_RCC_GetSysClockFreq+0x3c>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c9 	.word	0x080052c9
 8005298:	08005589 	.word	0x08005589
 800529c:	08005589 	.word	0x08005589
 80052a0:	08005589 	.word	0x08005589
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	08005589 	.word	0x08005589
 80052ac:	08005589 	.word	0x08005589
 80052b0:	08005589 	.word	0x08005589
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	08005589 	.word	0x08005589
 80052bc:	08005589 	.word	0x08005589
 80052c0:	08005589 	.word	0x08005589
 80052c4:	08005443 	.word	0x08005443
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c8:	4bb6      	ldr	r3, [pc, #728]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80052ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80052ce:	e15f      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d0:	4bb5      	ldr	r3, [pc, #724]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80052d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80052d6:	e15b      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052d8:	4bb1      	ldr	r3, [pc, #708]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e4:	4bae      	ldr	r3, [pc, #696]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d031      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f0:	4bab      	ldr	r3, [pc, #684]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	2200      	movs	r2, #0
 80052f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	663b      	str	r3, [r7, #96]	; 0x60
 8005304:	2300      	movs	r3, #0
 8005306:	667b      	str	r3, [r7, #100]	; 0x64
 8005308:	4ba7      	ldr	r3, [pc, #668]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800530a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800530e:	462a      	mov	r2, r5
 8005310:	fb03 f202 	mul.w	r2, r3, r2
 8005314:	2300      	movs	r3, #0
 8005316:	4621      	mov	r1, r4
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	4aa2      	ldr	r2, [pc, #648]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005320:	4621      	mov	r1, r4
 8005322:	fba1 1202 	umull	r1, r2, r1, r2
 8005326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005328:	460a      	mov	r2, r1
 800532a:	67ba      	str	r2, [r7, #120]	; 0x78
 800532c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800532e:	4413      	add	r3, r2
 8005330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005336:	2200      	movs	r2, #0
 8005338:	65bb      	str	r3, [r7, #88]	; 0x58
 800533a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800533c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005340:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005344:	f7fb fca0 	bl	8000c88 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005352:	e064      	b.n	800541e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005354:	4b92      	ldr	r3, [pc, #584]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	099b      	lsrs	r3, r3, #6
 800535a:	2200      	movs	r2, #0
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
 800535e:	657a      	str	r2, [r7, #84]	; 0x54
 8005360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48
 8005368:	2300      	movs	r3, #0
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005370:	4622      	mov	r2, r4
 8005372:	462b      	mov	r3, r5
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	0159      	lsls	r1, r3, #5
 800537e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005382:	0150      	lsls	r0, r2, #5
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4621      	mov	r1, r4
 800538a:	1a51      	subs	r1, r2, r1
 800538c:	6139      	str	r1, [r7, #16]
 800538e:	4629      	mov	r1, r5
 8005390:	eb63 0301 	sbc.w	r3, r3, r1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a2:	4659      	mov	r1, fp
 80053a4:	018b      	lsls	r3, r1, #6
 80053a6:	4651      	mov	r1, sl
 80053a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ac:	4651      	mov	r1, sl
 80053ae:	018a      	lsls	r2, r1, #6
 80053b0:	4651      	mov	r1, sl
 80053b2:	ebb2 0801 	subs.w	r8, r2, r1
 80053b6:	4659      	mov	r1, fp
 80053b8:	eb63 0901 	sbc.w	r9, r3, r1
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d0:	4690      	mov	r8, r2
 80053d2:	4699      	mov	r9, r3
 80053d4:	4623      	mov	r3, r4
 80053d6:	eb18 0303 	adds.w	r3, r8, r3
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	462b      	mov	r3, r5
 80053de:	eb49 0303 	adc.w	r3, r9, r3
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053f0:	4629      	mov	r1, r5
 80053f2:	028b      	lsls	r3, r1, #10
 80053f4:	4621      	mov	r1, r4
 80053f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053fa:	4621      	mov	r1, r4
 80053fc:	028a      	lsls	r2, r1, #10
 80053fe:	4610      	mov	r0, r2
 8005400:	4619      	mov	r1, r3
 8005402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005406:	2200      	movs	r2, #0
 8005408:	643b      	str	r3, [r7, #64]	; 0x40
 800540a:	647a      	str	r2, [r7, #68]	; 0x44
 800540c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005410:	f7fb fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800541e:	4b60      	ldr	r3, [pc, #384]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	3301      	adds	r3, #1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005430:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005440:	e0a6      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005442:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800544e:	4b54      	ldr	r3, [pc, #336]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02a      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545a:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	099b      	lsrs	r3, r3, #6
 8005460:	2200      	movs	r2, #0
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800546c:	2100      	movs	r1, #0
 800546e:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005470:	fb03 f201 	mul.w	r2, r3, r1
 8005474:	2300      	movs	r3, #0
 8005476:	fb00 f303 	mul.w	r3, r0, r3
 800547a:	4413      	add	r3, r2
 800547c:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800547e:	fba0 1202 	umull	r1, r2, r0, r2
 8005482:	677a      	str	r2, [r7, #116]	; 0x74
 8005484:	460a      	mov	r2, r1
 8005486:	673a      	str	r2, [r7, #112]	; 0x70
 8005488:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800548a:	4413      	add	r3, r2
 800548c:	677b      	str	r3, [r7, #116]	; 0x74
 800548e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005492:	2200      	movs	r2, #0
 8005494:	633b      	str	r3, [r7, #48]	; 0x30
 8005496:	637a      	str	r2, [r7, #52]	; 0x34
 8005498:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800549c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80054a0:	f7fb fbf2 	bl	8000c88 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4613      	mov	r3, r2
 80054aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054ae:	e05b      	b.n	8005568 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b0:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	099b      	lsrs	r3, r3, #6
 80054b6:	2200      	movs	r2, #0
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	2300      	movs	r3, #0
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	f04f 0000 	mov.w	r0, #0
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054de:	0150      	lsls	r0, r2, #5
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4641      	mov	r1, r8
 80054e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80054ea:	4649      	mov	r1, r9
 80054ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005500:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005504:	ebb2 040a 	subs.w	r4, r2, sl
 8005508:	eb63 050b 	sbc.w	r5, r3, fp
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	00eb      	lsls	r3, r5, #3
 8005516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800551a:	00e2      	lsls	r2, r4, #3
 800551c:	4614      	mov	r4, r2
 800551e:	461d      	mov	r5, r3
 8005520:	4643      	mov	r3, r8
 8005522:	18e3      	adds	r3, r4, r3
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	464b      	mov	r3, r9
 8005528:	eb45 0303 	adc.w	r3, r5, r3
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800553a:	4629      	mov	r1, r5
 800553c:	028b      	lsls	r3, r1, #10
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005544:	4621      	mov	r1, r4
 8005546:	028a      	lsls	r2, r1, #10
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005550:	2200      	movs	r2, #0
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800555a:	f7fb fb95 	bl	8000c88 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4613      	mov	r3, r2
 8005564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	0f1b      	lsrs	r3, r3, #28
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800557a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005586:	e003      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800558a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800558e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005594:	4618      	mov	r0, r3
 8005596:	3798      	adds	r7, #152	; 0x98
 8005598:	46bd      	mov	sp, r7
 800559a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	017d7840 	.word	0x017d7840

080055ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e28d      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8083 	beq.w	80056d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055cc:	4b94      	ldr	r3, [pc, #592]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d019      	beq.n	800560c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055d8:	4b91      	ldr	r3, [pc, #580]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d106      	bne.n	80055f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055e4:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f0:	d00c      	beq.n	800560c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f2:	4b8b      	ldr	r3, [pc, #556]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d112      	bne.n	8005624 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fe:	4b88      	ldr	r3, [pc, #544]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800560a:	d10b      	bne.n	8005624 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4b84      	ldr	r3, [pc, #528]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05b      	beq.n	80056d0 <HAL_RCC_OscConfig+0x124>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d157      	bne.n	80056d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e25a      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d106      	bne.n	800563c <HAL_RCC_OscConfig+0x90>
 800562e:	4b7c      	ldr	r3, [pc, #496]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a7b      	ldr	r2, [pc, #492]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e01d      	b.n	8005678 <HAL_RCC_OscConfig+0xcc>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0xb4>
 8005646:	4b76      	ldr	r3, [pc, #472]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a75      	ldr	r2, [pc, #468]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800564c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b73      	ldr	r3, [pc, #460]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a72      	ldr	r2, [pc, #456]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0xcc>
 8005660:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a6e      	ldr	r2, [pc, #440]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b6c      	ldr	r3, [pc, #432]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a6b      	ldr	r2, [pc, #428]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fd fe16 	bl	80032b0 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005688:	f7fd fe12 	bl	80032b0 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e21f      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569a:	4b61      	ldr	r3, [pc, #388]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0xdc>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd fe02 	bl	80032b0 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fd fdfe 	bl	80032b0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e20b      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x104>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d06f      	beq.n	80057be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056de:	4b50      	ldr	r3, [pc, #320]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d017      	beq.n	800571a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056ea:	4b4d      	ldr	r3, [pc, #308]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056f6:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005702:	4b47      	ldr	r3, [pc, #284]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d11c      	bne.n	8005748 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570e:	4b44      	ldr	r3, [pc, #272]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d116      	bne.n	8005748 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	4b41      	ldr	r3, [pc, #260]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_RCC_OscConfig+0x186>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d001      	beq.n	8005732 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e1d3      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4937      	ldr	r1, [pc, #220]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005746:	e03a      	b.n	80057be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005750:	4b34      	ldr	r3, [pc, #208]	; (8005824 <HAL_RCC_OscConfig+0x278>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fd fdab 	bl	80032b0 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575e:	f7fd fda7 	bl	80032b0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e1b4      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4925      	ldr	r1, [pc, #148]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]
 8005790:	e015      	b.n	80057be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <HAL_RCC_OscConfig+0x278>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fd fd8a 	bl	80032b0 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057a0:	f7fd fd86 	bl	80032b0 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e193      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d036      	beq.n	8005838 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fd fd6a 	bl	80032b0 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e0:	f7fd fd66 	bl	80032b0 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e173      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x234>
 80057fe:	e01b      	b.n	8005838 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005800:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fd fd53 	bl	80032b0 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800580c:	e00e      	b.n	800582c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800580e:	f7fd fd4f 	bl	80032b0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d907      	bls.n	800582c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e15c      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
 8005820:	40023800 	.word	0x40023800
 8005824:	42470000 	.word	0x42470000
 8005828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800582c:	4b8a      	ldr	r3, [pc, #552]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800582e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ea      	bne.n	800580e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8097 	beq.w	8005974 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584a:	4b83      	ldr	r3, [pc, #524]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10f      	bne.n	8005876 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	4b7f      	ldr	r3, [pc, #508]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a7e      	ldr	r2, [pc, #504]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
 8005866:	4b7c      	ldr	r3, [pc, #496]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005876:	4b79      	ldr	r3, [pc, #484]	; (8005a5c <HAL_RCC_OscConfig+0x4b0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d118      	bne.n	80058b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005882:	4b76      	ldr	r3, [pc, #472]	; (8005a5c <HAL_RCC_OscConfig+0x4b0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a75      	ldr	r2, [pc, #468]	; (8005a5c <HAL_RCC_OscConfig+0x4b0>)
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588e:	f7fd fd0f 	bl	80032b0 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fd fd0b 	bl	80032b0 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e118      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	4b6c      	ldr	r3, [pc, #432]	; (8005a5c <HAL_RCC_OscConfig+0x4b0>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d106      	bne.n	80058ca <HAL_RCC_OscConfig+0x31e>
 80058bc:	4b66      	ldr	r3, [pc, #408]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	4a65      	ldr	r2, [pc, #404]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x358>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x340>
 80058d2:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a60      	ldr	r2, [pc, #384]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058d8:	f043 0304 	orr.w	r3, r3, #4
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70
 80058de:	4b5e      	ldr	r3, [pc, #376]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a5d      	ldr	r2, [pc, #372]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0x358>
 80058ec:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	4a59      	ldr	r2, [pc, #356]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6713      	str	r3, [r2, #112]	; 0x70
 80058f8:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a56      	ldr	r2, [pc, #344]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80058fe:	f023 0304 	bic.w	r3, r3, #4
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d015      	beq.n	8005938 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fd fcd0 	bl	80032b0 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005912:	e00a      	b.n	800592a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fd fccc 	bl	80032b0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0d7      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592a:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ee      	beq.n	8005914 <HAL_RCC_OscConfig+0x368>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fd fcba 	bl	80032b0 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593e:	e00a      	b.n	8005956 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005940:	f7fd fcb6 	bl	80032b0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e0c1      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005956:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ee      	bne.n	8005940 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 800596e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80ad 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	2b08      	cmp	r3, #8
 8005988:	d060      	beq.n	8005a4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d145      	bne.n	8005a1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005992:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <HAL_RCC_OscConfig+0x4b4>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005998:	f7fd fc8a 	bl	80032b0 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a0:	f7fd fc86 	bl	80032b0 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e093      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	019b      	lsls	r3, r3, #6
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	3b01      	subs	r3, #1
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	061b      	lsls	r3, r3, #24
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	491b      	ldr	r1, [pc, #108]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f0:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <HAL_RCC_OscConfig+0x4b4>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fd fc5b 	bl	80032b0 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fd fc57 	bl	80032b0 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e064      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0f0      	beq.n	80059fe <HAL_RCC_OscConfig+0x452>
 8005a1c:	e05c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCC_OscConfig+0x4b4>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fd fc44 	bl	80032b0 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2c:	f7fd fc40 	bl	80032b0 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e04d      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_RCC_OscConfig+0x4ac>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x480>
 8005a4a:	e045      	b.n	8005ad8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e040      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a64:	4b1f      	ldr	r3, [pc, #124]	; (8005ae4 <HAL_RCC_OscConfig+0x538>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d030      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d129      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d122      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a94:	4013      	ands	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d119      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	3b01      	subs	r3, #1
 8005aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800

08005ae8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e066      	b.n	8005bcc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	7f5b      	ldrb	r3, [r3, #29]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fc f9e6 	bl	8001ee0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	22ca      	movs	r2, #202	; 0xca
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2253      	movs	r2, #83	; 0x53
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f927 	bl	8005d7e <RTC_EnterInitMode>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d12c      	bne.n	8005b94 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6899      	ldr	r1, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68d2      	ldr	r2, [r2, #12]
 8005b74:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6919      	ldr	r1, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f92e 	bl	8005dec <RTC_ExitInitMode>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d113      	bne.n	8005bc2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	22ff      	movs	r2, #255	; 0xff
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	0d9b      	lsrs	r3, r3, #22
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11a      	bne.n	8005c86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f8ee 	bl	8005e36 <RTC_Bcd2ToByte>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f8e5 	bl	8005e36 <RTC_Bcd2ToByte>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	789b      	ldrb	r3, [r3, #2]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f8dc 	bl	8005e36 <RTC_Bcd2ToByte>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	0b5b      	lsrs	r3, r3, #13
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11a      	bne.n	8005d24 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	78db      	ldrb	r3, [r3, #3]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f89f 	bl	8005e36 <RTC_Bcd2ToByte>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f896 	bl	8005e36 <RTC_Bcd2ToByte>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	789b      	ldrb	r3, [r3, #2]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f88d 	bl	8005e36 <RTC_Bcd2ToByte>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d48:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d4a:	f7fd fab1 	bl	80032b0 <HAL_GetTick>
 8005d4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d50:	e009      	b.n	8005d66 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d52:	f7fd faad 	bl	80032b0 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d60:	d901      	bls.n	8005d66 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e007      	b.n	8005d76 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0ee      	beq.n	8005d52 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d122      	bne.n	8005de2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005daa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dac:	f7fd fa80 	bl	80032b0 <HAL_GetTick>
 8005db0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005db2:	e00c      	b.n	8005dce <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005db4:	f7fd fa7c 	bl	80032b0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc2:	d904      	bls.n	8005dce <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <RTC_EnterInitMode+0x64>
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d1e8      	bne.n	8005db4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff ff89 	bl	8005d2e <HAL_RTC_WaitForSynchro>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	0092      	lsls	r2, r2, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	4413      	add	r3, r2
 8005e60:	b2db      	uxtb	r3, r3
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e07b      	b.n	8005f78 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d108      	bne.n	8005e9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e90:	d009      	beq.n	8005ea6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	61da      	str	r2, [r3, #28]
 8005e98:	e005      	b.n	8005ea6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fc f9d7 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005edc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2a:	ea42 0103 	orr.w	r1, r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	0c1b      	lsrs	r3, r3, #16
 8005f44:	f003 0104 	and.w	r1, r3, #4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	f003 0210 	and.w	r2, r3, #16
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SPI_Transmit+0x22>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e126      	b.n	80061f0 <HAL_SPI_Transmit+0x270>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005faa:	f7fd f981 	bl	80032b0 <HAL_GetTick>
 8005fae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d002      	beq.n	8005fc6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc4:	e10b      	b.n	80061de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_SPI_Transmit+0x52>
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fd6:	e102      	b.n	80061de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2203      	movs	r2, #3
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601e:	d10f      	bne.n	8006040 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800603e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d007      	beq.n	800605e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006066:	d14b      	bne.n	8006100 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_SPI_Transmit+0xf6>
 8006070:	8afb      	ldrh	r3, [r7, #22]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d13e      	bne.n	80060f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	881a      	ldrh	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800609a:	e02b      	b.n	80060f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d112      	bne.n	80060d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80060ce:	e011      	b.n	80060f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d0:	f7fd f8ee 	bl	80032b0 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d803      	bhi.n	80060e8 <HAL_SPI_Transmit+0x168>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e6:	d102      	bne.n	80060ee <HAL_SPI_Transmit+0x16e>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060f2:	e074      	b.n	80061de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ce      	bne.n	800609c <HAL_SPI_Transmit+0x11c>
 80060fe:	e04c      	b.n	800619a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_SPI_Transmit+0x18e>
 8006108:	8afb      	ldrh	r3, [r7, #22]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d140      	bne.n	8006190 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006134:	e02c      	b.n	8006190 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b02      	cmp	r3, #2
 8006142:	d113      	bne.n	800616c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	86da      	strh	r2, [r3, #54]	; 0x36
 800616a:	e011      	b.n	8006190 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616c:	f7fd f8a0 	bl	80032b0 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_Transmit+0x204>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006182:	d102      	bne.n	800618a <HAL_SPI_Transmit+0x20a>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800618e:	e026      	b.n	80061de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1cd      	bne.n	8006136 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa54 	bl	800664c <SPI_EndRxTxTransaction>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e000      	b.n	80061de <HAL_SPI_Transmit+0x25e>
  }

error:
 80061dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	; 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006206:	2301      	movs	r3, #1
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_SPI_TransmitReceive+0x26>
 800621a:	2302      	movs	r3, #2
 800621c:	e18a      	b.n	8006534 <HAL_SPI_TransmitReceive+0x33c>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006226:	f7fd f843 	bl	80032b0 <HAL_GetTick>
 800622a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006244:	2b01      	cmp	r3, #1
 8006246:	d00f      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x70>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624e:	d107      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x68>
 8006258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800625c:	2b04      	cmp	r3, #4
 800625e:	d003      	beq.n	8006268 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006260:	2302      	movs	r3, #2
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006266:	e15b      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_SPI_TransmitReceive+0x82>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_SPI_TransmitReceive+0x82>
 8006274:	887b      	ldrh	r3, [r7, #2]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006280:	e14e      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b04      	cmp	r3, #4
 800628c:	d003      	beq.n	8006296 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2205      	movs	r2, #5
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	887a      	ldrh	r2, [r7, #2]
 80062a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	887a      	ldrh	r2, [r7, #2]
 80062ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	887a      	ldrh	r2, [r7, #2]
 80062b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	887a      	ldrh	r2, [r7, #2]
 80062be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d007      	beq.n	80062ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d178      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x10a>
 80062fc:	8b7b      	ldrh	r3, [r7, #26]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d166      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006326:	e053      	b.n	80063d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d11b      	bne.n	800636e <HAL_SPI_TransmitReceive+0x176>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633a:	b29b      	uxth	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d016      	beq.n	800636e <HAL_SPI_TransmitReceive+0x176>
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d113      	bne.n	800636e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	881a      	ldrh	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	1c9a      	adds	r2, r3, #2
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b01      	cmp	r3, #1
 800637a:	d119      	bne.n	80063b0 <HAL_SPI_TransmitReceive+0x1b8>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d014      	beq.n	80063b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	b292      	uxth	r2, r2
 8006392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ac:	2301      	movs	r3, #1
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063b0:	f7fc ff7e 	bl	80032b0 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063bc:	429a      	cmp	r2, r3
 80063be:	d807      	bhi.n	80063d0 <HAL_SPI_TransmitReceive+0x1d8>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c6:	d003      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ce:	e0a7      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1a6      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x130>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1a1      	bne.n	8006328 <HAL_SPI_TransmitReceive+0x130>
 80063e4:	e07c      	b.n	80064e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x1fc>
 80063ee:	8b7b      	ldrh	r3, [r7, #26]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d16b      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800641a:	e057      	b.n	80064cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d11c      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x26c>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d017      	beq.n	8006464 <HAL_SPI_TransmitReceive+0x26c>
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d114      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b01      	cmp	r3, #1
 8006470:	d119      	bne.n	80064a6 <HAL_SPI_TransmitReceive+0x2ae>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d014      	beq.n	80064a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064a2:	2301      	movs	r3, #1
 80064a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064a6:	f7fc ff03 	bl	80032b0 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d803      	bhi.n	80064be <HAL_SPI_TransmitReceive+0x2c6>
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x2cc>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064ca:	e029      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1a2      	bne.n	800641c <HAL_SPI_TransmitReceive+0x224>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d19d      	bne.n	800641c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f8b1 	bl	800664c <SPI_EndRxTxTransaction>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d006      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064fc:	e010      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e000      	b.n	8006520 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800651e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006534:	4618      	mov	r0, r3
 8006536:	3730      	adds	r7, #48	; 0x30
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800654c:	f7fc feb0 	bl	80032b0 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4413      	add	r3, r2
 800655a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800655c:	f7fc fea8 	bl	80032b0 <HAL_GetTick>
 8006560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006562:	4b39      	ldr	r3, [pc, #228]	; (8006648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	015b      	lsls	r3, r3, #5
 8006568:	0d1b      	lsrs	r3, r3, #20
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006572:	e054      	b.n	800661e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800657a:	d050      	beq.n	800661e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800657c:	f7fc fe98 	bl	80032b0 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	429a      	cmp	r2, r3
 800658a:	d902      	bls.n	8006592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d13d      	bne.n	800660e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065aa:	d111      	bne.n	80065d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b4:	d004      	beq.n	80065c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065be:	d107      	bne.n	80065d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d8:	d10f      	bne.n	80065fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e017      	b.n	800663e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3b01      	subs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4013      	ands	r3, r2
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	bf0c      	ite	eq
 800662e:	2301      	moveq	r3, #1
 8006630:	2300      	movne	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	429a      	cmp	r2, r3
 800663a:	d19b      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000004 	.word	0x20000004

0800664c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006658:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <SPI_EndRxTxTransaction+0x7c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <SPI_EndRxTxTransaction+0x80>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	0d5b      	lsrs	r3, r3, #21
 8006664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006676:	d112      	bne.n	800669e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	2180      	movs	r1, #128	; 0x80
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff ff5a 	bl	800653c <SPI_WaitFlagStateUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	f043 0220 	orr.w	r2, r3, #32
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e00f      	b.n	80066be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b80      	cmp	r3, #128	; 0x80
 80066b6:	d0f2      	beq.n	800669e <SPI_EndRxTxTransaction+0x52>
 80066b8:	e000      	b.n	80066bc <SPI_EndRxTxTransaction+0x70>
        break;
 80066ba:	bf00      	nop
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000004 	.word	0x20000004
 80066cc:	165e9f81 	.word	0x165e9f81

080066d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e041      	b.n	8006766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fc fbf6 	bl	8002ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f000 fc5e 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d001      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e04e      	b.n	8006826 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a23      	ldr	r2, [pc, #140]	; (8006834 <HAL_TIM_Base_Start_IT+0xc4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d022      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d01d      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <HAL_TIM_Base_Start_IT+0xc8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d018      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1e      	ldr	r2, [pc, #120]	; (800683c <HAL_TIM_Base_Start_IT+0xcc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_TIM_Base_Start_IT+0xd0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00e      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <HAL_TIM_Base_Start_IT+0xd4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a19      	ldr	r2, [pc, #100]	; (8006848 <HAL_TIM_Base_Start_IT+0xd8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a18      	ldr	r2, [pc, #96]	; (800684c <HAL_TIM_Base_Start_IT+0xdc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d111      	bne.n	8006814 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d010      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0201 	orr.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	e007      	b.n	8006824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40001800 	.word	0x40001800

08006850 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e041      	b.n	80068e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fc fa6c 	bl	8002d54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f000 fb9e 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <HAL_TIM_IC_Start_IT+0x1e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690a:	b2db      	uxtb	r3, r3
 800690c:	e013      	b.n	8006936 <HAL_TIM_IC_Start_IT+0x46>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b04      	cmp	r3, #4
 8006912:	d104      	bne.n	800691e <HAL_TIM_IC_Start_IT+0x2e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800691a:	b2db      	uxtb	r3, r3
 800691c:	e00b      	b.n	8006936 <HAL_TIM_IC_Start_IT+0x46>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d104      	bne.n	800692e <HAL_TIM_IC_Start_IT+0x3e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800692a:	b2db      	uxtb	r3, r3
 800692c:	e003      	b.n	8006936 <HAL_TIM_IC_Start_IT+0x46>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006934:	b2db      	uxtb	r3, r3
 8006936:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <HAL_TIM_IC_Start_IT+0x58>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e013      	b.n	8006970 <HAL_TIM_IC_Start_IT+0x80>
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b04      	cmp	r3, #4
 800694c:	d104      	bne.n	8006958 <HAL_TIM_IC_Start_IT+0x68>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e00b      	b.n	8006970 <HAL_TIM_IC_Start_IT+0x80>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b08      	cmp	r3, #8
 800695c:	d104      	bne.n	8006968 <HAL_TIM_IC_Start_IT+0x78>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e003      	b.n	8006970 <HAL_TIM_IC_Start_IT+0x80>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696e:	b2db      	uxtb	r3, r3
 8006970:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d102      	bne.n	800697e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006978:	7b7b      	ldrb	r3, [r7, #13]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d001      	beq.n	8006982 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0cc      	b.n	8006b1c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_TIM_IC_Start_IT+0xa2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006990:	e013      	b.n	80069ba <HAL_TIM_IC_Start_IT+0xca>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_IC_Start_IT+0xb2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a0:	e00b      	b.n	80069ba <HAL_TIM_IC_Start_IT+0xca>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_IC_Start_IT+0xc2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b0:	e003      	b.n	80069ba <HAL_TIM_IC_Start_IT+0xca>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_TIM_IC_Start_IT+0xda>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c8:	e013      	b.n	80069f2 <HAL_TIM_IC_Start_IT+0x102>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d104      	bne.n	80069da <HAL_TIM_IC_Start_IT+0xea>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069d8:	e00b      	b.n	80069f2 <HAL_TIM_IC_Start_IT+0x102>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d104      	bne.n	80069ea <HAL_TIM_IC_Start_IT+0xfa>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e8:	e003      	b.n	80069f2 <HAL_TIM_IC_Start_IT+0x102>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d841      	bhi.n	8006a7c <HAL_TIM_IC_Start_IT+0x18c>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_IC_Start_IT+0x110>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a7d 	.word	0x08006a7d
 8006a08:	08006a7d 	.word	0x08006a7d
 8006a0c:	08006a7d 	.word	0x08006a7d
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	08006a7d 	.word	0x08006a7d
 8006a1c:	08006a7d 	.word	0x08006a7d
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a6b 	.word	0x08006a6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0202 	orr.w	r2, r2, #2
 8006a42:	60da      	str	r2, [r3, #12]
      break;
 8006a44:	e01d      	b.n	8006a82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0204 	orr.w	r2, r2, #4
 8006a54:	60da      	str	r2, [r3, #12]
      break;
 8006a56:	e014      	b.n	8006a82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0208 	orr.w	r2, r2, #8
 8006a66:	60da      	str	r2, [r3, #12]
      break;
 8006a68:	e00b      	b.n	8006a82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0210 	orr.w	r2, r2, #16
 8006a78:	60da      	str	r2, [r3, #12]
      break;
 8006a7a:	e002      	b.n	8006a82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a80:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d148      	bne.n	8006b1a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fd78 	bl	8007586 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <HAL_TIM_IC_Start_IT+0x234>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	; (8006b28 <HAL_TIM_IC_Start_IT+0x238>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_TIM_IC_Start_IT+0x23c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <HAL_TIM_IC_Start_IT+0x240>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <HAL_TIM_IC_Start_IT+0x244>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <HAL_TIM_IC_Start_IT+0x248>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <HAL_TIM_IC_Start_IT+0x24c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d111      	bne.n	8006b0a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b06      	cmp	r3, #6
 8006af6:	d010      	beq.n	8006b1a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b08:	e007      	b.n	8006b1a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40000c00 	.word	0x40000c00
 8006b34:	40010400 	.word	0x40010400
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40001800 	.word	0x40001800

08006b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d122      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d11b      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f06f 0202 	mvn.w	r2, #2
 8006b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fc fa00 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8006b88:	e005      	b.n	8006b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa02 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa09 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0204 	mvn.w	r2, #4
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f9d6 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9d8 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9df 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0208 	mvn.w	r2, #8
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc f9ac 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9ae 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9b5 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0210 	mvn.w	r2, #16
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fc f982 	bl	8002f88 <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f984 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f98b 	bl	8006fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0201 	mvn.w	r2, #1
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fb f8d0 	bl	8001e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fcf6 	bl	80076dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d107      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f950 	bl	8006fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d10e      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d107      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0220 	mvn.w	r2, #32
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fcc0 	bl	80076c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e088      	b.n	8006e80 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11b      	bne.n	8006db4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f000 fa52 	bl	8007234 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 020c 	bic.w	r2, r2, #12
 8006d9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6999      	ldr	r1, [r3, #24]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	619a      	str	r2, [r3, #24]
 8006db2:	e060      	b.n	8006e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d11c      	bne.n	8006df4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f000 fad6 	bl	800737a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ddc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6999      	ldr	r1, [r3, #24]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	021a      	lsls	r2, r3, #8
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	619a      	str	r2, [r3, #24]
 8006df2:	e040      	b.n	8006e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d11b      	bne.n	8006e32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f000 fb23 	bl	8007454 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 020c 	bic.w	r2, r2, #12
 8006e1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69d9      	ldr	r1, [r3, #28]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	61da      	str	r2, [r3, #28]
 8006e30:	e021      	b.n	8006e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	d11c      	bne.n	8006e72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f000 fb40 	bl	80074cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69da      	ldr	r2, [r3, #28]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69d9      	ldr	r1, [r3, #28]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	61da      	str	r2, [r3, #28]
 8006e70:	e001      	b.n	8006e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e031      	b.n	8006f04 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f92c 	bl	8007110 <TIM_SlaveTimer_SetConfig>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e018      	b.n	8006f04 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ef0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d831      	bhi.n	8006f84 <HAL_TIM_ReadCapturedValue+0x78>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006f7b 	.word	0x08006f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	60fb      	str	r3, [r7, #12]

      break;
 8006f64:	e00f      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	60fb      	str	r3, [r7, #12]

      break;
 8006f6e:	e00a      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	60fb      	str	r3, [r7, #12]

      break;
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	60fb      	str	r3, [r7, #12]

      break;
 8006f82:	e000      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f84:	bf00      	nop
  }

  return tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d00f      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a3d      	ldr	r2, [pc, #244]	; (80070e8 <TIM_Base_SetConfig+0x118>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a3c      	ldr	r2, [pc, #240]	; (80070ec <TIM_Base_SetConfig+0x11c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a3b      	ldr	r2, [pc, #236]	; (80070f0 <TIM_Base_SetConfig+0x120>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0x40>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a3a      	ldr	r2, [pc, #232]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d108      	bne.n	8007022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2f      	ldr	r2, [pc, #188]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d02b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007030:	d027      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <TIM_Base_SetConfig+0x118>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d023      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a2b      	ldr	r2, [pc, #172]	; (80070ec <TIM_Base_SetConfig+0x11c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01f      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <TIM_Base_SetConfig+0x120>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d017      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a28      	ldr	r2, [pc, #160]	; (80070f8 <TIM_Base_SetConfig+0x128>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a27      	ldr	r2, [pc, #156]	; (80070fc <TIM_Base_SetConfig+0x12c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a26      	ldr	r2, [pc, #152]	; (8007100 <TIM_Base_SetConfig+0x130>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a25      	ldr	r2, [pc, #148]	; (8007104 <TIM_Base_SetConfig+0x134>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a24      	ldr	r2, [pc, #144]	; (8007108 <TIM_Base_SetConfig+0x138>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a23      	ldr	r2, [pc, #140]	; (800710c <TIM_Base_SetConfig+0x13c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d108      	bne.n	8007094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <TIM_Base_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0xf8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a0c      	ldr	r2, [pc, #48]	; (80070f4 <TIM_Base_SetConfig+0x124>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d103      	bne.n	80070d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	615a      	str	r2, [r3, #20]
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40010400 	.word	0x40010400
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400
 8007100:	40014800 	.word	0x40014800
 8007104:	40001800 	.word	0x40001800
 8007108:	40001c00 	.word	0x40001c00
 800710c:	40002000 	.word	0x40002000

08007110 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f023 0307 	bic.w	r3, r3, #7
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b70      	cmp	r3, #112	; 0x70
 8007158:	d01a      	beq.n	8007190 <TIM_SlaveTimer_SetConfig+0x80>
 800715a:	2b70      	cmp	r3, #112	; 0x70
 800715c:	d860      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 800715e:	2b60      	cmp	r3, #96	; 0x60
 8007160:	d054      	beq.n	800720c <TIM_SlaveTimer_SetConfig+0xfc>
 8007162:	2b60      	cmp	r3, #96	; 0x60
 8007164:	d85c      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 8007166:	2b50      	cmp	r3, #80	; 0x50
 8007168:	d046      	beq.n	80071f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800716a:	2b50      	cmp	r3, #80	; 0x50
 800716c:	d858      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 800716e:	2b40      	cmp	r3, #64	; 0x40
 8007170:	d019      	beq.n	80071a6 <TIM_SlaveTimer_SetConfig+0x96>
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d854      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 8007176:	2b30      	cmp	r3, #48	; 0x30
 8007178:	d055      	beq.n	8007226 <TIM_SlaveTimer_SetConfig+0x116>
 800717a:	2b30      	cmp	r3, #48	; 0x30
 800717c:	d850      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d051      	beq.n	8007226 <TIM_SlaveTimer_SetConfig+0x116>
 8007182:	2b20      	cmp	r3, #32
 8007184:	d84c      	bhi.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04d      	beq.n	8007226 <TIM_SlaveTimer_SetConfig+0x116>
 800718a:	2b10      	cmp	r3, #16
 800718c:	d04b      	beq.n	8007226 <TIM_SlaveTimer_SetConfig+0x116>
 800718e:	e047      	b.n	8007220 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68d9      	ldr	r1, [r3, #12]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f000 f9d1 	bl	8007546 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80071a4:	e040      	b.n	8007228 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d101      	bne.n	80071b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e03b      	b.n	800722a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	621a      	str	r2, [r3, #32]
      break;
 80071f6:	e017      	b.n	8007228 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6899      	ldr	r1, [r3, #8]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	461a      	mov	r2, r3
 8007206:	f000 f889 	bl	800731c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800720a:	e00d      	b.n	8007228 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	6899      	ldr	r1, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	461a      	mov	r2, r3
 800721a:	f000 f8eb 	bl	80073f4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800721e:	e003      	b.n	8007228 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
      break;
 8007224:	e000      	b.n	8007228 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007226:	bf00      	nop
  }

  return status;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a28      	ldr	r2, [pc, #160]	; (8007300 <TIM_TI1_SetConfig+0xcc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01b      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007268:	d017      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <TIM_TI1_SetConfig+0xd0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a24      	ldr	r2, [pc, #144]	; (8007308 <TIM_TI1_SetConfig+0xd4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00f      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a23      	ldr	r2, [pc, #140]	; (800730c <TIM_TI1_SetConfig+0xd8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a22      	ldr	r2, [pc, #136]	; (8007310 <TIM_TI1_SetConfig+0xdc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <TIM_TI1_SetConfig+0xe0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_TI1_SetConfig+0x66>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a20      	ldr	r2, [pc, #128]	; (8007318 <TIM_TI1_SetConfig+0xe4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <TIM_TI1_SetConfig+0x6a>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <TIM_TI1_SetConfig+0x6c>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e003      	b.n	80072be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f043 0301 	orr.w	r3, r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f023 030a 	bic.w	r3, r3, #10
 80072d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f003 030a 	and.w	r3, r3, #10
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800

0800731c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0201 	bic.w	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f023 030a 	bic.w	r3, r3, #10
 8007358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800737a:	b480      	push	{r7}
 800737c:	b087      	sub	sp, #28
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	f023 0210 	bic.w	r2, r3, #16
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	031b      	lsls	r3, r3, #12
 80073be:	b29b      	uxth	r3, r3
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	621a      	str	r2, [r3, #32]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	f023 0210 	bic.w	r2, r3, #16
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800741e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	031b      	lsls	r3, r3, #12
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	621a      	str	r2, [r3, #32]
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f023 0303 	bic.w	r3, r3, #3
 8007480:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	b2db      	uxtb	r3, r3
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80074a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800750a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	031b      	lsls	r3, r3, #12
 8007510:	b29b      	uxth	r3, r3
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800751e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	031b      	lsls	r3, r3, #12
 8007524:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007546:	b480      	push	{r7}
 8007548:	b087      	sub	sp, #28
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007560:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	021a      	lsls	r2, r3, #8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	431a      	orrs	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4313      	orrs	r3, r2
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	609a      	str	r2, [r3, #8]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007586:	b480      	push	{r7}
 8007588:	b087      	sub	sp, #28
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2201      	movs	r2, #1
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a1a      	ldr	r2, [r3, #32]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	43db      	mvns	r3, r3
 80075a8:	401a      	ands	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a1a      	ldr	r2, [r3, #32]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	fa01 f303 	lsl.w	r3, r1, r3
 80075be:	431a      	orrs	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d101      	bne.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e05a      	b.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a21      	ldr	r2, [pc, #132]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d022      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d01d      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1d      	ldr	r2, [pc, #116]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d018      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1a      	ldr	r2, [pc, #104]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00e      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d009      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a17      	ldr	r2, [pc, #92]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d004      	beq.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a15      	ldr	r2, [pc, #84]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d10c      	bne.n	800768c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	4313      	orrs	r3, r2
 8007682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40010400 	.word	0x40010400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40001800 	.word	0x40001800

080076c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e033      	b.n	800776a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fb fcbe 	bl	8003098 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f90b 	bl	8007940 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007748:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007758:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b08a      	sub	sp, #40	; 0x28
 8007776:	af02      	add	r7, sp, #8
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d17c      	bne.n	8007888 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_USART_Transmit+0x28>
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e075      	b.n	800788a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_USART_Transmit+0x3a>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e06e      	b.n	800788a <HAL_USART_Transmit+0x118>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2212      	movs	r2, #18
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077c2:	f7fb fd75 	bl	80032b0 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077dc:	d108      	bne.n	80077f0 <HAL_USART_Transmit+0x7e>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	e003      	b.n	80077f8 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80077f8:	e02a      	b.n	8007850 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2200      	movs	r2, #0
 8007802:	2180      	movs	r1, #128	; 0x80
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f844 	bl	8007892 <USART_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e03a      	b.n	800788a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007828:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	3302      	adds	r3, #2
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	e007      	b.n	8007842 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	3301      	adds	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1cf      	bne.n	80077fa <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2200      	movs	r2, #0
 8007862:	2140      	movs	r1, #64	; 0x40
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f814 	bl	8007892 <USART_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e00a      	b.n	800788a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80078a2:	e038      	b.n	8007916 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078aa:	d034      	beq.n	8007916 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <USART_WaitOnFlagUntilTimeout+0x30>
 80078b2:	f7fb fcfd 	bl	80032b0 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	69ba      	ldr	r2, [r7, #24]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d229      	bcs.n	8007916 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d0:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0220 	bic.w	r2, r2, #32
 80078e0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695a      	ldr	r2, [r3, #20]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e00f      	b.n	8007936 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0b7      	beq.n	80078a4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007944:	b0c6      	sub	sp, #280	; 0x118
 8007946:	af00      	add	r7, sp, #0
 8007948:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68d9      	ldr	r1, [r3, #12]
 800795a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f021 030c 	bic.w	r3, r1, #12
 8007964:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007976:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800797a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007982:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007988:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800798a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800798c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	431a      	orrs	r2, r3
 8007994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007998:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800799a:	431a      	orrs	r2, r3
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80079aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80079b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079ca:	f023 030c 	bic.w	r3, r3, #12
 80079ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	431a      	orrs	r2, r3
 80079e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80079f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a00:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6959      	ldr	r1, [r3, #20]
 8007a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8007a14:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8007a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	4b8b      	ldr	r3, [pc, #556]	; (8007c4c <USART_SetConfig+0x30c>)
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d006      	beq.n	8007a30 <USART_SetConfig+0xf0>
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	4b89      	ldr	r3, [pc, #548]	; (8007c50 <USART_SetConfig+0x310>)
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f040 8114 	bne.w	8007c58 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a30:	f7fd f8a2 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8007a34:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007a38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a42:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007a46:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	1891      	adds	r1, r2, r2
 8007a50:	6739      	str	r1, [r7, #112]	; 0x70
 8007a52:	415b      	adcs	r3, r3
 8007a54:	677b      	str	r3, [r7, #116]	; 0x74
 8007a56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	eb12 0801 	adds.w	r8, r2, r1
 8007a60:	4629      	mov	r1, r5
 8007a62:	eb43 0901 	adc.w	r9, r3, r1
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a7a:	4690      	mov	r8, r2
 8007a7c:	4699      	mov	r9, r3
 8007a7e:	4623      	mov	r3, r4
 8007a80:	eb18 0303 	adds.w	r3, r8, r3
 8007a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a88:	462b      	mov	r3, r5
 8007a8a:	eb49 0303 	adc.w	r3, r9, r3
 8007a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a9e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007aa2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	18db      	adds	r3, r3, r3
 8007aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aac:	4613      	mov	r3, r2
 8007aae:	eb42 0303 	adc.w	r3, r2, r3
 8007ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007ab8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007abc:	f7f9 f8e4 	bl	8000c88 <__aeabi_uldivmod>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4b63      	ldr	r3, [pc, #396]	; (8007c54 <USART_SetConfig+0x314>)
 8007ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	011c      	lsls	r4, r3, #4
 8007ace:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ad8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007adc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	1891      	adds	r1, r2, r2
 8007ae6:	6639      	str	r1, [r7, #96]	; 0x60
 8007ae8:	415b      	adcs	r3, r3
 8007aea:	667b      	str	r3, [r7, #100]	; 0x64
 8007aec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007af0:	4641      	mov	r1, r8
 8007af2:	1851      	adds	r1, r2, r1
 8007af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007af6:	4649      	mov	r1, r9
 8007af8:	414b      	adcs	r3, r1
 8007afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007b08:	4659      	mov	r1, fp
 8007b0a:	00cb      	lsls	r3, r1, #3
 8007b0c:	4651      	mov	r1, sl
 8007b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b12:	4651      	mov	r1, sl
 8007b14:	00ca      	lsls	r2, r1, #3
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b24:	464b      	mov	r3, r9
 8007b26:	460a      	mov	r2, r1
 8007b28:	eb42 0303 	adc.w	r3, r2, r3
 8007b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b44:	460b      	mov	r3, r1
 8007b46:	18db      	adds	r3, r3, r3
 8007b48:	653b      	str	r3, [r7, #80]	; 0x50
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	eb42 0303 	adc.w	r3, r2, r3
 8007b50:	657b      	str	r3, [r7, #84]	; 0x54
 8007b52:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b56:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b5a:	f7f9 f895 	bl	8000c88 <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	4b3b      	ldr	r3, [pc, #236]	; (8007c54 <USART_SetConfig+0x314>)
 8007b66:	fba3 2301 	umull	r2, r3, r3, r1
 8007b6a:	095b      	lsrs	r3, r3, #5
 8007b6c:	2264      	movs	r2, #100	; 0x64
 8007b6e:	fb02 f303 	mul.w	r3, r2, r3
 8007b72:	1acb      	subs	r3, r1, r3
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b7a:	4b36      	ldr	r3, [pc, #216]	; (8007c54 <USART_SetConfig+0x314>)
 8007b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b88:	441c      	add	r4, r3
 8007b8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	1891      	adds	r1, r2, r2
 8007ba2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ba4:	415b      	adcs	r3, r3
 8007ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bac:	4641      	mov	r1, r8
 8007bae:	1851      	adds	r1, r2, r1
 8007bb0:	6439      	str	r1, [r7, #64]	; 0x40
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	414b      	adcs	r3, r1
 8007bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8007bc4:	4659      	mov	r1, fp
 8007bc6:	00cb      	lsls	r3, r1, #3
 8007bc8:	4651      	mov	r1, sl
 8007bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bce:	4651      	mov	r1, sl
 8007bd0:	00ca      	lsls	r2, r1, #3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4642      	mov	r2, r8
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007be0:	464b      	mov	r3, r9
 8007be2:	460a      	mov	r2, r1
 8007be4:	eb42 0303 	adc.w	r3, r2, r3
 8007be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c00:	460b      	mov	r3, r1
 8007c02:	18db      	adds	r3, r3, r3
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c06:	4613      	mov	r3, r2
 8007c08:	eb42 0303 	adc.w	r3, r2, r3
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c16:	f7f9 f837 	bl	8000c88 <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <USART_SetConfig+0x314>)
 8007c20:	fba3 1302 	umull	r1, r3, r3, r2
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	2164      	movs	r1, #100	; 0x64
 8007c28:	fb01 f303 	mul.w	r3, r1, r3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	3332      	adds	r3, #50	; 0x32
 8007c32:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <USART_SetConfig+0x314>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f003 0207 	and.w	r2, r3, #7
 8007c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4422      	add	r2, r4
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	e109      	b.n	8007e5e <USART_SetConfig+0x51e>
 8007c4a:	bf00      	nop
 8007c4c:	40011000 	.word	0x40011000
 8007c50:	40011400 	.word	0x40011400
 8007c54:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fc ff7a 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007c60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c6a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c6e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c72:	4642      	mov	r2, r8
 8007c74:	464b      	mov	r3, r9
 8007c76:	1891      	adds	r1, r2, r2
 8007c78:	6339      	str	r1, [r7, #48]	; 0x30
 8007c7a:	415b      	adcs	r3, r3
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c82:	4641      	mov	r1, r8
 8007c84:	1854      	adds	r4, r2, r1
 8007c86:	4649      	mov	r1, r9
 8007c88:	eb43 0501 	adc.w	r5, r3, r1
 8007c8c:	f04f 0200 	mov.w	r2, #0
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	00eb      	lsls	r3, r5, #3
 8007c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c9a:	00e2      	lsls	r2, r4, #3
 8007c9c:	4614      	mov	r4, r2
 8007c9e:	461d      	mov	r5, r3
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	18e3      	adds	r3, r4, r3
 8007ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ca8:	464b      	mov	r3, r9
 8007caa:	eb45 0303 	adc.w	r3, r5, r3
 8007cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cbe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cc2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	18db      	adds	r3, r3, r3
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ccc:	4613      	mov	r3, r2
 8007cce:	eb42 0303 	adc.w	r3, r2, r3
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cd8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cdc:	f7f8 ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4b61      	ldr	r3, [pc, #388]	; (8007e6c <USART_SetConfig+0x52c>)
 8007ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	011c      	lsls	r4, r3, #4
 8007cee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cf8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cfc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	1891      	adds	r1, r2, r2
 8007d06:	6239      	str	r1, [r7, #32]
 8007d08:	415b      	adcs	r3, r3
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d10:	4641      	mov	r1, r8
 8007d12:	eb12 0a01 	adds.w	sl, r2, r1
 8007d16:	4649      	mov	r1, r9
 8007d18:	eb43 0b01 	adc.w	fp, r3, r1
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d30:	4692      	mov	sl, r2
 8007d32:	469b      	mov	fp, r3
 8007d34:	4643      	mov	r3, r8
 8007d36:	eb1a 0303 	adds.w	r3, sl, r3
 8007d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d3e:	464b      	mov	r3, r9
 8007d40:	eb4b 0303 	adc.w	r3, fp, r3
 8007d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d58:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	18db      	adds	r3, r3, r3
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	4613      	mov	r3, r2
 8007d64:	eb42 0303 	adc.w	r3, r2, r3
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d6e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d72:	f7f8 ff89 	bl	8000c88 <__aeabi_uldivmod>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4b3b      	ldr	r3, [pc, #236]	; (8007e6c <USART_SetConfig+0x52c>)
 8007d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2264      	movs	r2, #100	; 0x64
 8007d86:	fb02 f303 	mul.w	r3, r2, r3
 8007d8a:	1acb      	subs	r3, r1, r3
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d92:	4b36      	ldr	r3, [pc, #216]	; (8007e6c <USART_SetConfig+0x52c>)
 8007d94:	fba3 2302 	umull	r2, r3, r3, r2
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007da0:	441c      	add	r4, r3
 8007da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	6139      	str	r1, [r7, #16]
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	1851      	adds	r1, r2, r1
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4649      	mov	r1, r9
 8007dcc:	414b      	adcs	r3, r1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ddc:	4659      	mov	r1, fp
 8007dde:	00cb      	lsls	r3, r1, #3
 8007de0:	4651      	mov	r1, sl
 8007de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de6:	4651      	mov	r1, sl
 8007de8:	00ca      	lsls	r2, r1, #3
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	4642      	mov	r2, r8
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007df8:	464b      	mov	r3, r9
 8007dfa:	460a      	mov	r2, r1
 8007dfc:	eb42 0303 	adc.w	r3, r2, r3
 8007e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007e14:	460b      	mov	r3, r1
 8007e16:	18db      	adds	r3, r3, r3
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e2a:	f7f8 ff2d 	bl	8000c88 <__aeabi_uldivmod>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <USART_SetConfig+0x52c>)
 8007e34:	fba3 1302 	umull	r1, r3, r3, r2
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	2164      	movs	r1, #100	; 0x64
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	3332      	adds	r3, #50	; 0x32
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <USART_SetConfig+0x52c>)
 8007e48:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 0207 	and.w	r2, r3, #7
 8007e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4422      	add	r2, r4
 8007e5a:	609a      	str	r2, [r3, #8]
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007e64:	46bd      	mov	sp, r7
 8007e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e6a:	bf00      	nop
 8007e6c:	51eb851f 	.word	0x51eb851f

08007e70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e74:	4904      	ldr	r1, [pc, #16]	; (8007e88 <MX_FATFS_Init+0x18>)
 8007e76:	4805      	ldr	r0, [pc, #20]	; (8007e8c <MX_FATFS_Init+0x1c>)
 8007e78:	f002 ffa2 	bl	800adc0 <FATFS_LinkDriver>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <MX_FATFS_Init+0x20>)
 8007e82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20001ea8 	.word	0x20001ea8
 8007e8c:	20000010 	.word	0x20000010
 8007e90:	20001ea4 	.word	0x20001ea4

08007e94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv);
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f9d7 	bl	8008264 <USER_SPI_initialize>
 8007eb6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_status(pdrv);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fab5 	bl	800843c <USER_SPI_status>
 8007ed2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8007eec:	7bf8      	ldrb	r0, [r7, #15]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	f000 fab8 	bl	8008468 <USER_SPI_read>
 8007ef8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8007f12:	7bf8      	ldrb	r0, [r7, #15]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	f000 fb0b 	bl	8008534 <USER_SPI_write>
 8007f1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	603a      	str	r2, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
 8007f34:	460b      	mov	r3, r1
 8007f36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007f38:	79b9      	ldrb	r1, [r7, #6]
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fb74 	bl	800862c <USER_SPI_ioctl>
 8007f44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007f58:	f7fb f9aa 	bl	80032b0 <HAL_GetTick>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <SPI_Timer_On+0x20>)
 8007f60:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <SPI_Timer_On+0x24>)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20001eb0 	.word	0x20001eb0
 8007f74:	20001eb4 	.word	0x20001eb4

08007f78 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007f7c:	f7fb f998 	bl	80032b0 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <SPI_Timer_Status+0x24>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <SPI_Timer_Status+0x28>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	bf34      	ite	cc
 8007f90:	2301      	movcc	r3, #1
 8007f92:	2300      	movcs	r3, #0
 8007f94:	b2db      	uxtb	r3, r3
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20001eb0 	.word	0x20001eb0
 8007fa0:	20001eb4 	.word	0x20001eb4

08007fa4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007fae:	f107 020f 	add.w	r2, r7, #15
 8007fb2:	1df9      	adds	r1, r7, #7
 8007fb4:	2332      	movs	r3, #50	; 0x32
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4804      	ldr	r0, [pc, #16]	; (8007fcc <xchg_spi+0x28>)
 8007fbc:	f7fe f91c 	bl	80061f8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20001bf0 	.word	0x20001bf0

08007fd0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	e00a      	b.n	8007ff6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	18d4      	adds	r4, r2, r3
 8007fe6:	20ff      	movs	r0, #255	; 0xff
 8007fe8:	f7ff ffdc 	bl	8007fa4 <xchg_spi>
 8007fec:	4603      	mov	r3, r0
 8007fee:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d3f0      	bcc.n	8007fe0 <rcvr_spi_multi+0x10>
	}
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}

08008008 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	b29a      	uxth	r2, r3
 8008016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4803      	ldr	r0, [pc, #12]	; (800802c <xmit_spi_multi+0x24>)
 800801e:	f7fd ffaf 	bl	8005f80 <HAL_SPI_Transmit>
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20001bf0 	.word	0x20001bf0

08008030 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008038:	f7fb f93a 	bl	80032b0 <HAL_GetTick>
 800803c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008042:	20ff      	movs	r0, #255	; 0xff
 8008044:	f7ff ffae 	bl	8007fa4 <xchg_spi>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2bff      	cmp	r3, #255	; 0xff
 8008050:	d007      	beq.n	8008062 <wait_ready+0x32>
 8008052:	f7fb f92d 	bl	80032b0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d8ef      	bhi.n	8008042 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2bff      	cmp	r3, #255	; 0xff
 8008066:	bf0c      	ite	eq
 8008068:	2301      	moveq	r3, #1
 800806a:	2300      	movne	r3, #0
 800806c:	b2db      	uxtb	r3, r3
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800807c:	2201      	movs	r2, #1
 800807e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008082:	4804      	ldr	r0, [pc, #16]	; (8008094 <despiselect+0x1c>)
 8008084:	f7fc fc58 	bl	8004938 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008088:	20ff      	movs	r0, #255	; 0xff
 800808a:	f7ff ff8b 	bl	8007fa4 <xchg_spi>

}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40020400 	.word	0x40020400

08008098 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800809c:	2200      	movs	r2, #0
 800809e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080a2:	480a      	ldr	r0, [pc, #40]	; (80080cc <spiselect+0x34>)
 80080a4:	f7fc fc48 	bl	8004938 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80080a8:	20ff      	movs	r0, #255	; 0xff
 80080aa:	f7ff ff7b 	bl	8007fa4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80080ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080b2:	f7ff ffbd 	bl	8008030 <wait_ready>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <spiselect+0x28>
 80080bc:	2301      	movs	r3, #1
 80080be:	e002      	b.n	80080c6 <spiselect+0x2e>

	despiselect();
 80080c0:	f7ff ffda 	bl	8008078 <despiselect>
	return 0;	/* Timeout */
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	40020400 	.word	0x40020400

080080d0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80080da:	20c8      	movs	r0, #200	; 0xc8
 80080dc:	f7ff ff38 	bl	8007f50 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80080e0:	20ff      	movs	r0, #255	; 0xff
 80080e2:	f7ff ff5f 	bl	8007fa4 <xchg_spi>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	2bff      	cmp	r3, #255	; 0xff
 80080ee:	d104      	bne.n	80080fa <rcvr_datablock+0x2a>
 80080f0:	f7ff ff42 	bl	8007f78 <SPI_Timer_Status>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f2      	bne.n	80080e0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2bfe      	cmp	r3, #254	; 0xfe
 80080fe:	d001      	beq.n	8008104 <rcvr_datablock+0x34>
 8008100:	2300      	movs	r3, #0
 8008102:	e00a      	b.n	800811a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff ff62 	bl	8007fd0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800810c:	20ff      	movs	r0, #255	; 0xff
 800810e:	f7ff ff49 	bl	8007fa4 <xchg_spi>
 8008112:	20ff      	movs	r0, #255	; 0xff
 8008114:	f7ff ff46 	bl	8007fa4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008118:	2301      	movs	r3, #1
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800812e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008132:	f7ff ff7d 	bl	8008030 <wait_ready>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <xmit_datablock+0x1e>
 800813c:	2300      	movs	r3, #0
 800813e:	e01e      	b.n	800817e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff ff2e 	bl	8007fa4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2bfd      	cmp	r3, #253	; 0xfd
 800814c:	d016      	beq.n	800817c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800814e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff ff58 	bl	8008008 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008158:	20ff      	movs	r0, #255	; 0xff
 800815a:	f7ff ff23 	bl	8007fa4 <xchg_spi>
 800815e:	20ff      	movs	r0, #255	; 0xff
 8008160:	f7ff ff20 	bl	8007fa4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008164:	20ff      	movs	r0, #255	; 0xff
 8008166:	f7ff ff1d 	bl	8007fa4 <xchg_spi>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	2b05      	cmp	r3, #5
 8008176:	d001      	beq.n	800817c <xmit_datablock+0x5a>
 8008178:	2300      	movs	r3, #0
 800817a:	e000      	b.n	800817e <xmit_datablock+0x5c>
	}
	return 1;
 800817c:	2301      	movs	r3, #1
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	4603      	mov	r3, r0
 800818e:	6039      	str	r1, [r7, #0]
 8008190:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da0e      	bge.n	80081b8 <send_cmd+0x32>
		cmd &= 0x7F;
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80081a2:	2100      	movs	r1, #0
 80081a4:	2037      	movs	r0, #55	; 0x37
 80081a6:	f7ff ffee 	bl	8008186 <send_cmd>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d901      	bls.n	80081b8 <send_cmd+0x32>
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	e051      	b.n	800825c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80081b8:	79fb      	ldrb	r3, [r7, #7]
 80081ba:	2b0c      	cmp	r3, #12
 80081bc:	d008      	beq.n	80081d0 <send_cmd+0x4a>
		despiselect();
 80081be:	f7ff ff5b 	bl	8008078 <despiselect>
		if (!spiselect()) return 0xFF;
 80081c2:	f7ff ff69 	bl	8008098 <spiselect>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <send_cmd+0x4a>
 80081cc:	23ff      	movs	r3, #255	; 0xff
 80081ce:	e045      	b.n	800825c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fee3 	bl	8007fa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fedd 	bl	8007fa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fed7 	bl	8007fa4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fed1 	bl	8007fa4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fecc 	bl	8007fa4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <send_cmd+0x94>
 8008216:	2395      	movs	r3, #149	; 0x95
 8008218:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d101      	bne.n	8008224 <send_cmd+0x9e>
 8008220:	2387      	movs	r3, #135	; 0x87
 8008222:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff febc 	bl	8007fa4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b0c      	cmp	r3, #12
 8008230:	d102      	bne.n	8008238 <send_cmd+0xb2>
 8008232:	20ff      	movs	r0, #255	; 0xff
 8008234:	f7ff feb6 	bl	8007fa4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008238:	230a      	movs	r3, #10
 800823a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800823c:	20ff      	movs	r0, #255	; 0xff
 800823e:	f7ff feb1 	bl	8007fa4 <xchg_spi>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	da05      	bge.n	800825a <send_cmd+0xd4>
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	3b01      	subs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <send_cmd+0xb6>

	return res;							/* Return received response */
 800825a:	7bbb      	ldrb	r3, [r7, #14]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008264:	b590      	push	{r4, r7, lr}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <USER_SPI_initialize+0x14>
 8008274:	2301      	movs	r3, #1
 8008276:	e0d6      	b.n	8008426 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008278:	4b6d      	ldr	r3, [pc, #436]	; (8008430 <USER_SPI_initialize+0x1cc>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <USER_SPI_initialize+0x2a>
 8008286:	4b6a      	ldr	r3, [pc, #424]	; (8008430 <USER_SPI_initialize+0x1cc>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	e0cb      	b.n	8008426 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800828e:	4b69      	ldr	r3, [pc, #420]	; (8008434 <USER_SPI_initialize+0x1d0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008298:	4b66      	ldr	r3, [pc, #408]	; (8008434 <USER_SPI_initialize+0x1d0>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80082a0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80082a2:	230a      	movs	r3, #10
 80082a4:	73fb      	strb	r3, [r7, #15]
 80082a6:	e005      	b.n	80082b4 <USER_SPI_initialize+0x50>
 80082a8:	20ff      	movs	r0, #255	; 0xff
 80082aa:	f7ff fe7b 	bl	8007fa4 <xchg_spi>
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f6      	bne.n	80082a8 <USER_SPI_initialize+0x44>

	ty = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80082be:	2100      	movs	r1, #0
 80082c0:	2000      	movs	r0, #0
 80082c2:	f7ff ff60 	bl	8008186 <send_cmd>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	f040 808b 	bne.w	80083e4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80082ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082d2:	f7ff fe3d 	bl	8007f50 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80082d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082da:	2008      	movs	r0, #8
 80082dc:	f7ff ff53 	bl	8008186 <send_cmd>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d151      	bne.n	800838a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e00d      	b.n	8008308 <USER_SPI_initialize+0xa4>
 80082ec:	7bfc      	ldrb	r4, [r7, #15]
 80082ee:	20ff      	movs	r0, #255	; 0xff
 80082f0:	f7ff fe58 	bl	8007fa4 <xchg_spi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	f104 0310 	add.w	r3, r4, #16
 80082fc:	443b      	add	r3, r7
 80082fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	3301      	adds	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d9ee      	bls.n	80082ec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800830e:	7abb      	ldrb	r3, [r7, #10]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d167      	bne.n	80083e4 <USER_SPI_initialize+0x180>
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	2baa      	cmp	r3, #170	; 0xaa
 8008318:	d164      	bne.n	80083e4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800831a:	bf00      	nop
 800831c:	f7ff fe2c 	bl	8007f78 <SPI_Timer_Status>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <USER_SPI_initialize+0xd2>
 8008326:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800832a:	20a9      	movs	r0, #169	; 0xa9
 800832c:	f7ff ff2b 	bl	8008186 <send_cmd>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f2      	bne.n	800831c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008336:	f7ff fe1f 	bl	8007f78 <SPI_Timer_Status>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d051      	beq.n	80083e4 <USER_SPI_initialize+0x180>
 8008340:	2100      	movs	r1, #0
 8008342:	203a      	movs	r0, #58	; 0x3a
 8008344:	f7ff ff1f 	bl	8008186 <send_cmd>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14a      	bne.n	80083e4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e00d      	b.n	8008370 <USER_SPI_initialize+0x10c>
 8008354:	7bfc      	ldrb	r4, [r7, #15]
 8008356:	20ff      	movs	r0, #255	; 0xff
 8008358:	f7ff fe24 	bl	8007fa4 <xchg_spi>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	f104 0310 	add.w	r3, r4, #16
 8008364:	443b      	add	r3, r7
 8008366:	f803 2c08 	strb.w	r2, [r3, #-8]
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	3301      	adds	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d9ee      	bls.n	8008354 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008376:	7a3b      	ldrb	r3, [r7, #8]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <USER_SPI_initialize+0x120>
 8008380:	230c      	movs	r3, #12
 8008382:	e000      	b.n	8008386 <USER_SPI_initialize+0x122>
 8008384:	2304      	movs	r3, #4
 8008386:	737b      	strb	r3, [r7, #13]
 8008388:	e02c      	b.n	80083e4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800838a:	2100      	movs	r1, #0
 800838c:	20a9      	movs	r0, #169	; 0xa9
 800838e:	f7ff fefa 	bl	8008186 <send_cmd>
 8008392:	4603      	mov	r3, r0
 8008394:	2b01      	cmp	r3, #1
 8008396:	d804      	bhi.n	80083a2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008398:	2302      	movs	r3, #2
 800839a:	737b      	strb	r3, [r7, #13]
 800839c:	23a9      	movs	r3, #169	; 0xa9
 800839e:	73bb      	strb	r3, [r7, #14]
 80083a0:	e003      	b.n	80083aa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80083a2:	2301      	movs	r3, #1
 80083a4:	737b      	strb	r3, [r7, #13]
 80083a6:	2301      	movs	r3, #1
 80083a8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80083aa:	bf00      	nop
 80083ac:	f7ff fde4 	bl	8007f78 <SPI_Timer_Status>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <USER_SPI_initialize+0x162>
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fee3 	bl	8008186 <send_cmd>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f2      	bne.n	80083ac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80083c6:	f7ff fdd7 	bl	8007f78 <SPI_Timer_Status>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <USER_SPI_initialize+0x17c>
 80083d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083d4:	2010      	movs	r0, #16
 80083d6:	f7ff fed6 	bl	8008186 <send_cmd>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USER_SPI_initialize+0x180>
				ty = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80083e4:	4a14      	ldr	r2, [pc, #80]	; (8008438 <USER_SPI_initialize+0x1d4>)
 80083e6:	7b7b      	ldrb	r3, [r7, #13]
 80083e8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80083ea:	f7ff fe45 	bl	8008078 <despiselect>

	if (ty) {			/* OK */
 80083ee:	7b7b      	ldrb	r3, [r7, #13]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d012      	beq.n	800841a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80083f4:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <USER_SPI_initialize+0x1d0>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80083fe:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <USER_SPI_initialize+0x1d0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0210 	orr.w	r2, r2, #16
 8008406:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008408:	4b09      	ldr	r3, [pc, #36]	; (8008430 <USER_SPI_initialize+0x1cc>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <USER_SPI_initialize+0x1cc>)
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e002      	b.n	8008420 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <USER_SPI_initialize+0x1cc>)
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008420:	4b03      	ldr	r3, [pc, #12]	; (8008430 <USER_SPI_initialize+0x1cc>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b2db      	uxtb	r3, r3
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	bd90      	pop	{r4, r7, pc}
 800842e:	bf00      	nop
 8008430:	20000024 	.word	0x20000024
 8008434:	20001bf0 	.word	0x20001bf0
 8008438:	20001eac 	.word	0x20001eac

0800843c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USER_SPI_status+0x14>
 800844c:	2301      	movs	r3, #1
 800844e:	e002      	b.n	8008456 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <USER_SPI_status+0x28>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b2db      	uxtb	r3, r3
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000024 	.word	0x20000024

08008468 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <USER_SPI_read+0x1c>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <USER_SPI_read+0x20>
 8008484:	2304      	movs	r3, #4
 8008486:	e04d      	b.n	8008524 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008488:	4b28      	ldr	r3, [pc, #160]	; (800852c <USER_SPI_read+0xc4>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <USER_SPI_read+0x32>
 8008496:	2303      	movs	r3, #3
 8008498:	e044      	b.n	8008524 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800849a:	4b25      	ldr	r3, [pc, #148]	; (8008530 <USER_SPI_read+0xc8>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <USER_SPI_read+0x44>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	025b      	lsls	r3, r3, #9
 80084aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d111      	bne.n	80084d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	2011      	movs	r0, #17
 80084b6:	f7ff fe66 	bl	8008186 <send_cmd>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d129      	bne.n	8008514 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80084c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084c4:	68b8      	ldr	r0, [r7, #8]
 80084c6:	f7ff fe03 	bl	80080d0 <rcvr_datablock>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d021      	beq.n	8008514 <USER_SPI_read+0xac>
			count = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	e01e      	b.n	8008514 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	2012      	movs	r0, #18
 80084da:	f7ff fe54 	bl	8008186 <send_cmd>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d117      	bne.n	8008514 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80084e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	f7ff fdf1 	bl	80080d0 <rcvr_datablock>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <USER_SPI_read+0xa2>
				buff += 512;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	3b01      	subs	r3, #1
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ed      	bne.n	80084e4 <USER_SPI_read+0x7c>
 8008508:	e000      	b.n	800850c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800850a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800850c:	2100      	movs	r1, #0
 800850e:	200c      	movs	r0, #12
 8008510:	f7ff fe39 	bl	8008186 <send_cmd>
		}
	}
	despiselect();
 8008514:	f7ff fdb0 	bl	8008078 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bf14      	ite	ne
 800851e:	2301      	movne	r3, #1
 8008520:	2300      	moveq	r3, #0
 8008522:	b2db      	uxtb	r3, r3
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000024 	.word	0x20000024
 8008530:	20001eac 	.word	0x20001eac

08008534 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	607a      	str	r2, [r7, #4]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <USER_SPI_write+0x1c>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <USER_SPI_write+0x20>
 8008550:	2304      	movs	r3, #4
 8008552:	e063      	b.n	800861c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008554:	4b33      	ldr	r3, [pc, #204]	; (8008624 <USER_SPI_write+0xf0>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <USER_SPI_write+0x32>
 8008562:	2303      	movs	r3, #3
 8008564:	e05a      	b.n	800861c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008566:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <USER_SPI_write+0xf0>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USER_SPI_write+0x44>
 8008574:	2302      	movs	r3, #2
 8008576:	e051      	b.n	800861c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008578:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <USER_SPI_write+0xf4>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d102      	bne.n	800858a <USER_SPI_write+0x56>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	025b      	lsls	r3, r3, #9
 8008588:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d110      	bne.n	80085b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	2018      	movs	r0, #24
 8008594:	f7ff fdf7 	bl	8008186 <send_cmd>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d136      	bne.n	800860c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800859e:	21fe      	movs	r1, #254	; 0xfe
 80085a0:	68b8      	ldr	r0, [r7, #8]
 80085a2:	f7ff fdbe 	bl	8008122 <xmit_datablock>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d02f      	beq.n	800860c <USER_SPI_write+0xd8>
			count = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	e02c      	b.n	800860c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80085b2:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <USER_SPI_write+0xf4>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0306 	and.w	r3, r3, #6
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <USER_SPI_write+0x92>
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	2097      	movs	r0, #151	; 0x97
 80085c2:	f7ff fde0 	bl	8008186 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	2019      	movs	r0, #25
 80085ca:	f7ff fddc 	bl	8008186 <send_cmd>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11b      	bne.n	800860c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80085d4:	21fc      	movs	r1, #252	; 0xfc
 80085d6:	68b8      	ldr	r0, [r7, #8]
 80085d8:	f7ff fda3 	bl	8008122 <xmit_datablock>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <USER_SPI_write+0xc4>
				buff += 512;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1ee      	bne.n	80085d4 <USER_SPI_write+0xa0>
 80085f6:	e000      	b.n	80085fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80085f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80085fa:	21fd      	movs	r1, #253	; 0xfd
 80085fc:	2000      	movs	r0, #0
 80085fe:	f7ff fd90 	bl	8008122 <xmit_datablock>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <USER_SPI_write+0xd8>
 8008608:	2301      	movs	r3, #1
 800860a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800860c:	f7ff fd34 	bl	8008078 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	bf14      	ite	ne
 8008616:	2301      	movne	r3, #1
 8008618:	2300      	moveq	r3, #0
 800861a:	b2db      	uxtb	r3, r3
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000024 	.word	0x20000024
 8008628:	20001eac 	.word	0x20001eac

0800862c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	; 0x30
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	603a      	str	r2, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
 8008638:	460b      	mov	r3, r1
 800863a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <USER_SPI_ioctl+0x1a>
 8008642:	2304      	movs	r3, #4
 8008644:	e15a      	b.n	80088fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008646:	4baf      	ldr	r3, [pc, #700]	; (8008904 <USER_SPI_ioctl+0x2d8>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <USER_SPI_ioctl+0x2c>
 8008654:	2303      	movs	r3, #3
 8008656:	e151      	b.n	80088fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800865e:	79bb      	ldrb	r3, [r7, #6]
 8008660:	2b04      	cmp	r3, #4
 8008662:	f200 8136 	bhi.w	80088d2 <USER_SPI_ioctl+0x2a6>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <USER_SPI_ioctl+0x40>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	08008681 	.word	0x08008681
 8008670:	08008695 	.word	0x08008695
 8008674:	080088d3 	.word	0x080088d3
 8008678:	08008741 	.word	0x08008741
 800867c:	08008837 	.word	0x08008837
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008680:	f7ff fd0a 	bl	8008098 <spiselect>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 8127 	beq.w	80088da <USER_SPI_ioctl+0x2ae>
 800868c:	2300      	movs	r3, #0
 800868e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008692:	e122      	b.n	80088da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008694:	2100      	movs	r1, #0
 8008696:	2009      	movs	r0, #9
 8008698:	f7ff fd75 	bl	8008186 <send_cmd>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f040 811d 	bne.w	80088de <USER_SPI_ioctl+0x2b2>
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	2110      	movs	r1, #16
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fd10 	bl	80080d0 <rcvr_datablock>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8113 	beq.w	80088de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80086b8:	7b3b      	ldrb	r3, [r7, #12]
 80086ba:	099b      	lsrs	r3, r3, #6
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d111      	bne.n	80086e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80086c2:	7d7b      	ldrb	r3, [r7, #21]
 80086c4:	461a      	mov	r2, r3
 80086c6:	7d3b      	ldrb	r3, [r7, #20]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	4413      	add	r3, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	7cfb      	ldrb	r3, [r7, #19]
 80086d0:	041b      	lsls	r3, r3, #16
 80086d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80086d6:	4413      	add	r3, r2
 80086d8:	3301      	adds	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	029a      	lsls	r2, r3, #10
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e028      	b.n	8008738 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80086e6:	7c7b      	ldrb	r3, [r7, #17]
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	7dbb      	ldrb	r3, [r7, #22]
 80086f0:	09db      	lsrs	r3, r3, #7
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	7d7b      	ldrb	r3, [r7, #21]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0306 	and.w	r3, r3, #6
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4413      	add	r3, r2
 8008706:	b2db      	uxtb	r3, r3
 8008708:	3302      	adds	r3, #2
 800870a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800870e:	7d3b      	ldrb	r3, [r7, #20]
 8008710:	099b      	lsrs	r3, r3, #6
 8008712:	b2db      	uxtb	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	7cfb      	ldrb	r3, [r7, #19]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	7cbb      	ldrb	r3, [r7, #18]
 800871e:	029b      	lsls	r3, r3, #10
 8008720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008724:	4413      	add	r3, r2
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800872a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800872e:	3b09      	subs	r3, #9
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	409a      	lsls	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800873e:	e0ce      	b.n	80088de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008740:	4b71      	ldr	r3, [pc, #452]	; (8008908 <USER_SPI_ioctl+0x2dc>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d031      	beq.n	80087b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800874c:	2100      	movs	r1, #0
 800874e:	208d      	movs	r0, #141	; 0x8d
 8008750:	f7ff fd19 	bl	8008186 <send_cmd>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	f040 80c3 	bne.w	80088e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800875c:	20ff      	movs	r0, #255	; 0xff
 800875e:	f7ff fc21 	bl	8007fa4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	2110      	movs	r1, #16
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fcb1 	bl	80080d0 <rcvr_datablock>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80b6 	beq.w	80088e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008776:	2330      	movs	r3, #48	; 0x30
 8008778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800877c:	e007      	b.n	800878e <USER_SPI_ioctl+0x162>
 800877e:	20ff      	movs	r0, #255	; 0xff
 8008780:	f7ff fc10 	bl	8007fa4 <xchg_spi>
 8008784:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008788:	3b01      	subs	r3, #1
 800878a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800878e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1f3      	bne.n	800877e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008796:	7dbb      	ldrb	r3, [r7, #22]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	2310      	movs	r3, #16
 80087a0:	fa03 f202 	lsl.w	r2, r3, r2
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80087ae:	e098      	b.n	80088e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80087b0:	2100      	movs	r1, #0
 80087b2:	2009      	movs	r0, #9
 80087b4:	f7ff fce7 	bl	8008186 <send_cmd>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 8091 	bne.w	80088e2 <USER_SPI_ioctl+0x2b6>
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	2110      	movs	r1, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fc82 	bl	80080d0 <rcvr_datablock>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8087 	beq.w	80088e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80087d4:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <USER_SPI_ioctl+0x2dc>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d012      	beq.n	8008806 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80087e0:	7dbb      	ldrb	r3, [r7, #22]
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80087e8:	7dfa      	ldrb	r2, [r7, #23]
 80087ea:	09d2      	lsrs	r2, r2, #7
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	4413      	add	r3, r2
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	7e7b      	ldrb	r3, [r7, #25]
 80087f4:	099b      	lsrs	r3, r3, #6
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	fa02 f303 	lsl.w	r3, r2, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e013      	b.n	800882e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008806:	7dbb      	ldrb	r3, [r7, #22]
 8008808:	109b      	asrs	r3, r3, #2
 800880a:	b29b      	uxth	r3, r3
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	3301      	adds	r3, #1
 8008812:	7dfa      	ldrb	r2, [r7, #23]
 8008814:	00d2      	lsls	r2, r2, #3
 8008816:	f002 0218 	and.w	r2, r2, #24
 800881a:	7df9      	ldrb	r1, [r7, #23]
 800881c:	0949      	lsrs	r1, r1, #5
 800881e:	b2c9      	uxtb	r1, r1
 8008820:	440a      	add	r2, r1
 8008822:	3201      	adds	r2, #1
 8008824:	fb02 f303 	mul.w	r3, r2, r3
 8008828:	461a      	mov	r2, r3
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008834:	e055      	b.n	80088e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008836:	4b34      	ldr	r3, [pc, #208]	; (8008908 <USER_SPI_ioctl+0x2dc>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	f003 0306 	and.w	r3, r3, #6
 800883e:	2b00      	cmp	r3, #0
 8008840:	d051      	beq.n	80088e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008842:	f107 020c 	add.w	r2, r7, #12
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	210b      	movs	r1, #11
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff feee 	bl	800862c <USER_SPI_ioctl>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d149      	bne.n	80088ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008856:	7b3b      	ldrb	r3, [r7, #12]
 8008858:	099b      	lsrs	r3, r3, #6
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <USER_SPI_ioctl+0x23e>
 8008860:	7dbb      	ldrb	r3, [r7, #22]
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d041      	beq.n	80088ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	623b      	str	r3, [r7, #32]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800887a:	4b23      	ldr	r3, [pc, #140]	; (8008908 <USER_SPI_ioctl+0x2dc>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	025b      	lsls	r3, r3, #9
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	025b      	lsls	r3, r3, #9
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008894:	2020      	movs	r0, #32
 8008896:	f7ff fc76 	bl	8008186 <send_cmd>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d128      	bne.n	80088f2 <USER_SPI_ioctl+0x2c6>
 80088a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088a2:	2021      	movs	r0, #33	; 0x21
 80088a4:	f7ff fc6f 	bl	8008186 <send_cmd>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d121      	bne.n	80088f2 <USER_SPI_ioctl+0x2c6>
 80088ae:	2100      	movs	r1, #0
 80088b0:	2026      	movs	r0, #38	; 0x26
 80088b2:	f7ff fc68 	bl	8008186 <send_cmd>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d11a      	bne.n	80088f2 <USER_SPI_ioctl+0x2c6>
 80088bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80088c0:	f7ff fbb6 	bl	8008030 <wait_ready>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d013      	beq.n	80088f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80088ca:	2300      	movs	r3, #0
 80088cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80088d0:	e00f      	b.n	80088f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80088d2:	2304      	movs	r3, #4
 80088d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088d8:	e00c      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		break;
 80088da:	bf00      	nop
 80088dc:	e00a      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		break;
 80088de:	bf00      	nop
 80088e0:	e008      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		break;
 80088e2:	bf00      	nop
 80088e4:	e006      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80088e6:	bf00      	nop
 80088e8:	e004      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80088ea:	bf00      	nop
 80088ec:	e002      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80088ee:	bf00      	nop
 80088f0:	e000      	b.n	80088f4 <USER_SPI_ioctl+0x2c8>
		break;
 80088f2:	bf00      	nop
	}

	despiselect();
 80088f4:	f7ff fbc0 	bl	8008078 <despiselect>

	return res;
 80088f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3730      	adds	r7, #48	; 0x30
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000024 	.word	0x20000024
 8008908:	20001eac 	.word	0x20001eac

0800890c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	4a08      	ldr	r2, [pc, #32]	; (800893c <disk_status+0x30>)
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	79fa      	ldrb	r2, [r7, #7]
 8008924:	4905      	ldr	r1, [pc, #20]	; (800893c <disk_status+0x30>)
 8008926:	440a      	add	r2, r1
 8008928:	7a12      	ldrb	r2, [r2, #8]
 800892a:	4610      	mov	r0, r2
 800892c:	4798      	blx	r3
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	20001ee0 	.word	0x20001ee0

08008940 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	4a0d      	ldr	r2, [pc, #52]	; (8008988 <disk_initialize+0x48>)
 8008952:	5cd3      	ldrb	r3, [r2, r3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d111      	bne.n	800897c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	4a0b      	ldr	r2, [pc, #44]	; (8008988 <disk_initialize+0x48>)
 800895c:	2101      	movs	r1, #1
 800895e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	4a09      	ldr	r2, [pc, #36]	; (8008988 <disk_initialize+0x48>)
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	4906      	ldr	r1, [pc, #24]	; (8008988 <disk_initialize+0x48>)
 8008970:	440a      	add	r2, r1
 8008972:	7a12      	ldrb	r2, [r2, #8]
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20001ee0 	.word	0x20001ee0

0800898c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <disk_read+0x3c>)
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	689c      	ldr	r4, [r3, #8]
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <disk_read+0x3c>)
 80089ac:	4413      	add	r3, r2
 80089ae:	7a18      	ldrb	r0, [r3, #8]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	47a0      	blx	r4
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd90      	pop	{r4, r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20001ee0 	.word	0x20001ee0

080089cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <disk_write+0x3c>)
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	68dc      	ldr	r4, [r3, #12]
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4a07      	ldr	r2, [pc, #28]	; (8008a08 <disk_write+0x3c>)
 80089ec:	4413      	add	r3, r2
 80089ee:	7a18      	ldrb	r0, [r3, #8]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	47a0      	blx	r4
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd90      	pop	{r4, r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20001ee0 	.word	0x20001ee0

08008a0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	603a      	str	r2, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <disk_ioctl+0x38>)
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	79fa      	ldrb	r2, [r7, #7]
 8008a2a:	4906      	ldr	r1, [pc, #24]	; (8008a44 <disk_ioctl+0x38>)
 8008a2c:	440a      	add	r2, r1
 8008a2e:	7a10      	ldrb	r0, [r2, #8]
 8008a30:	79b9      	ldrb	r1, [r7, #6]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4798      	blx	r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20001ee0 	.word	0x20001ee0

08008a48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3301      	adds	r3, #1
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a58:	89fb      	ldrh	r3, [r7, #14]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	b21a      	sxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	b21b      	sxth	r3, r3
 8008a68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3303      	adds	r3, #3
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	021b      	lsls	r3, r3, #8
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	3202      	adds	r2, #2
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	3201      	adds	r2, #1
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7812      	ldrb	r2, [r2, #0]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	887a      	ldrh	r2, [r7, #2]
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	887b      	ldrh	r3, [r7, #2]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	887a      	ldrh	r2, [r7, #2]
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	701a      	strb	r2, [r3, #0]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	b2d2      	uxtb	r2, r2
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	0a1b      	lsrs	r3, r3, #8
 8008b32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00d      	beq.n	8008b82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	1c53      	adds	r3, r2, #1
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	1c59      	adds	r1, r3, #1
 8008b70:	6179      	str	r1, [r7, #20]
 8008b72:	7812      	ldrb	r2, [r2, #0]
 8008b74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f1      	bne.n	8008b66 <mem_cpy+0x1a>
	}
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b8e:	b480      	push	{r7}
 8008b90:	b087      	sub	sp, #28
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	617a      	str	r2, [r7, #20]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	607b      	str	r3, [r7, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f3      	bne.n	8008b9e <mem_set+0x10>
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008bc4:	b480      	push	{r7}
 8008bc6:	b089      	sub	sp, #36	; 0x24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	61fb      	str	r3, [r7, #28]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	61fa      	str	r2, [r7, #28]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4619      	mov	r1, r3
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	61ba      	str	r2, [r7, #24]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	1acb      	subs	r3, r1, r3
 8008bf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	607b      	str	r3, [r7, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <mem_cmp+0x40>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0eb      	beq.n	8008bdc <mem_cmp+0x18>

	return r;
 8008c04:	697b      	ldr	r3, [r7, #20]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3724      	adds	r7, #36	; 0x24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008c1c:	e002      	b.n	8008c24 <chk_chr+0x12>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3301      	adds	r3, #1
 8008c22:	607b      	str	r3, [r7, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <chk_chr+0x26>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d1f2      	bne.n	8008c1e <chk_chr+0xc>
	return *str;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <lock_fs+0x22>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 f8eb 	bl	800ae36 <ff_req_grant>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <lock_fs+0x22>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <lock_fs+0x24>
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <unlock_fs+0x2e>
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	2b0c      	cmp	r3, #12
 8008c8a:	d00a      	beq.n	8008ca2 <unlock_fs+0x2e>
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	2b0b      	cmp	r3, #11
 8008c90:	d007      	beq.n	8008ca2 <unlock_fs+0x2e>
 8008c92:	78fb      	ldrb	r3, [r7, #3]
 8008c94:	2b0f      	cmp	r3, #15
 8008c96:	d004      	beq.n	8008ca2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f002 f8df 	bl	800ae60 <ff_rel_grant>
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	e029      	b.n	8008d14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008cc0:	4a27      	ldr	r2, [pc, #156]	; (8008d60 <chk_lock+0xb4>)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	4413      	add	r3, r2
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01d      	beq.n	8008d0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cce:	4a24      	ldr	r2, [pc, #144]	; (8008d60 <chk_lock+0xb4>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d116      	bne.n	8008d0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ce0:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <chk_lock+0xb4>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	011b      	lsls	r3, r3, #4
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3304      	adds	r3, #4
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d10c      	bne.n	8008d0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008cf4:	4a1a      	ldr	r2, [pc, #104]	; (8008d60 <chk_lock+0xb4>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d102      	bne.n	8008d0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d08:	e007      	b.n	8008d1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d9d2      	bls.n	8008cc0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d109      	bne.n	8008d34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <chk_lock+0x80>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d101      	bne.n	8008d30 <chk_lock+0x84>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e010      	b.n	8008d52 <chk_lock+0xa6>
 8008d30:	2312      	movs	r3, #18
 8008d32:	e00e      	b.n	8008d52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d108      	bne.n	8008d4c <chk_lock+0xa0>
 8008d3a:	4a09      	ldr	r2, [pc, #36]	; (8008d60 <chk_lock+0xb4>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	4413      	add	r3, r2
 8008d42:	330c      	adds	r3, #12
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4a:	d101      	bne.n	8008d50 <chk_lock+0xa4>
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	e000      	b.n	8008d52 <chk_lock+0xa6>
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20001ec0 	.word	0x20001ec0

08008d64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	e002      	b.n	8008d76 <enq_lock+0x12>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3301      	adds	r3, #1
 8008d74:	607b      	str	r3, [r7, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d806      	bhi.n	8008d8a <enq_lock+0x26>
 8008d7c:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <enq_lock+0x40>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	4413      	add	r3, r2
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f2      	bne.n	8008d70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	bf14      	ite	ne
 8008d90:	2301      	movne	r3, #1
 8008d92:	2300      	moveq	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20001ec0 	.word	0x20001ec0

08008da8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e01f      	b.n	8008df8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008db8:	4a41      	ldr	r2, [pc, #260]	; (8008ec0 <inc_lock+0x118>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	4413      	add	r3, r2
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d113      	bne.n	8008df2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008dca:	4a3d      	ldr	r2, [pc, #244]	; (8008ec0 <inc_lock+0x118>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d109      	bne.n	8008df2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008dde:	4a38      	ldr	r2, [pc, #224]	; (8008ec0 <inc_lock+0x118>)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4413      	add	r3, r2
 8008de6:	3308      	adds	r3, #8
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d006      	beq.n	8008e00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3301      	adds	r3, #1
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d9dc      	bls.n	8008db8 <inc_lock+0x10>
 8008dfe:	e000      	b.n	8008e02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d132      	bne.n	8008e6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e002      	b.n	8008e14 <inc_lock+0x6c>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d806      	bhi.n	8008e28 <inc_lock+0x80>
 8008e1a:	4a29      	ldr	r2, [pc, #164]	; (8008ec0 <inc_lock+0x118>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	4413      	add	r3, r2
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f2      	bne.n	8008e0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d101      	bne.n	8008e32 <inc_lock+0x8a>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e040      	b.n	8008eb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4922      	ldr	r1, [pc, #136]	; (8008ec0 <inc_lock+0x118>)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	440b      	add	r3, r1
 8008e3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	491e      	ldr	r1, [pc, #120]	; (8008ec0 <inc_lock+0x118>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	695a      	ldr	r2, [r3, #20]
 8008e54:	491a      	ldr	r1, [pc, #104]	; (8008ec0 <inc_lock+0x118>)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008e60:	4a17      	ldr	r2, [pc, #92]	; (8008ec0 <inc_lock+0x118>)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	4413      	add	r3, r2
 8008e68:	330c      	adds	r3, #12
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d009      	beq.n	8008e88 <inc_lock+0xe0>
 8008e74:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <inc_lock+0x118>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	4413      	add	r3, r2
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <inc_lock+0xe0>
 8008e84:	2300      	movs	r3, #0
 8008e86:	e015      	b.n	8008eb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d108      	bne.n	8008ea0 <inc_lock+0xf8>
 8008e8e:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <inc_lock+0x118>)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	4413      	add	r3, r2
 8008e96:	330c      	adds	r3, #12
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	e001      	b.n	8008ea4 <inc_lock+0xfc>
 8008ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ea4:	4906      	ldr	r1, [pc, #24]	; (8008ec0 <inc_lock+0x118>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	440b      	add	r3, r1
 8008eac:	330c      	adds	r3, #12
 8008eae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20001ec0 	.word	0x20001ec0

08008ec4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d825      	bhi.n	8008f24 <dec_lock+0x60>
		n = Files[i].ctr;
 8008ed8:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <dec_lock+0x74>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	4413      	add	r3, r2
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008ee6:	89fb      	ldrh	r3, [r7, #14]
 8008ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eec:	d101      	bne.n	8008ef2 <dec_lock+0x2e>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <dec_lock+0x3a>
 8008ef8:	89fb      	ldrh	r3, [r7, #14]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008efe:	4a0e      	ldr	r2, [pc, #56]	; (8008f38 <dec_lock+0x74>)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	4413      	add	r3, r2
 8008f06:	330c      	adds	r3, #12
 8008f08:	89fa      	ldrh	r2, [r7, #14]
 8008f0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f0c:	89fb      	ldrh	r3, [r7, #14]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <dec_lock+0x5a>
 8008f12:	4a09      	ldr	r2, [pc, #36]	; (8008f38 <dec_lock+0x74>)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	011b      	lsls	r3, r3, #4
 8008f18:	4413      	add	r3, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	737b      	strb	r3, [r7, #13]
 8008f22:	e001      	b.n	8008f28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008f24:	2302      	movs	r3, #2
 8008f26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008f28:	7b7b      	ldrb	r3, [r7, #13]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20001ec0 	.word	0x20001ec0

08008f3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e010      	b.n	8008f6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f4a:	4a0d      	ldr	r2, [pc, #52]	; (8008f80 <clear_lock+0x44>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	4413      	add	r3, r2
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d105      	bne.n	8008f66 <clear_lock+0x2a>
 8008f5a:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <clear_lock+0x44>)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d9eb      	bls.n	8008f4a <clear_lock+0xe>
	}
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	20001ec0 	.word	0x20001ec0

08008f84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	78db      	ldrb	r3, [r3, #3]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d034      	beq.n	8009002 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7858      	ldrb	r0, [r3, #1]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008fa8:	2301      	movs	r3, #1
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	f7ff fd0e 	bl	80089cc <disk_write>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	73fb      	strb	r3, [r7, #15]
 8008fba:	e022      	b.n	8009002 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	1ad2      	subs	r2, r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d217      	bcs.n	8009002 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	789b      	ldrb	r3, [r3, #2]
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	e010      	b.n	8008ffc <sync_window+0x78>
					wsect += fs->fsize;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7858      	ldrb	r0, [r3, #1]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008fee:	2301      	movs	r3, #1
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	f7ff fceb 	bl	80089cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d8eb      	bhi.n	8008fda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d01b      	beq.n	800905c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ffad 	bl	8008f84 <sync_window>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d113      	bne.n	800905c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	7858      	ldrb	r0, [r3, #1]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800903e:	2301      	movs	r3, #1
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	f7ff fca3 	bl	800898c <disk_read>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800904c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009050:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009052:	2301      	movs	r3, #1
 8009054:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff87 	bl	8008f84 <sync_window>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d158      	bne.n	8009132 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d148      	bne.n	800911a <sync_fs+0xb2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	791b      	ldrb	r3, [r3, #4]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d144      	bne.n	800911a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	3334      	adds	r3, #52	; 0x34
 8009094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009098:	2100      	movs	r1, #0
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff fd77 	bl	8008b8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3334      	adds	r3, #52	; 0x34
 80090a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fd06 	bl	8008abe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3334      	adds	r3, #52	; 0x34
 80090b6:	4921      	ldr	r1, [pc, #132]	; (800913c <sync_fs+0xd4>)
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff fd1b 	bl	8008af4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3334      	adds	r3, #52	; 0x34
 80090c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80090c6:	491e      	ldr	r1, [pc, #120]	; (8009140 <sync_fs+0xd8>)
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff fd13 	bl	8008af4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3334      	adds	r3, #52	; 0x34
 80090d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7ff fd09 	bl	8008af4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3334      	adds	r3, #52	; 0x34
 80090e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7ff fcff 	bl	8008af4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7858      	ldrb	r0, [r3, #1]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800910e:	2301      	movs	r3, #1
 8009110:	f7ff fc5c 	bl	80089cc <disk_write>
			fs->fsi_flag = 0;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2200      	movs	r2, #0
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fc72 	bl	8008a0c <disk_ioctl>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <sync_fs+0xca>
 800912e:	2301      	movs	r3, #1
 8009130:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	41615252 	.word	0x41615252
 8009140:	61417272 	.word	0x61417272

08009144 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3b02      	subs	r3, #2
 8009152:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	3b02      	subs	r3, #2
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d301      	bcc.n	8009164 <clust2sect+0x20>
 8009160:	2300      	movs	r3, #0
 8009162:	e008      	b.n	8009176 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	895b      	ldrh	r3, [r3, #10]
 8009168:	461a      	mov	r2, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	fb03 f202 	mul.w	r2, r3, r2
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4413      	add	r3, r2
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d904      	bls.n	80091a2 <get_fat+0x20>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d302      	bcc.n	80091a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80091a2:	2301      	movs	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	e08f      	b.n	80092c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80091a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d062      	beq.n	800927c <get_fat+0xfa>
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	dc7c      	bgt.n	80092b4 <get_fat+0x132>
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <get_fat+0x42>
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d042      	beq.n	8009248 <get_fat+0xc6>
 80091c2:	e077      	b.n	80092b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	0a5b      	lsrs	r3, r3, #9
 80091da:	4413      	add	r3, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	6938      	ldr	r0, [r7, #16]
 80091e0:	f7ff ff14 	bl	800900c <move_window>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d167      	bne.n	80092ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	60fa      	str	r2, [r7, #12]
 80091f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	0a5b      	lsrs	r3, r3, #9
 8009206:	4413      	add	r3, r2
 8009208:	4619      	mov	r1, r3
 800920a:	6938      	ldr	r0, [r7, #16]
 800920c:	f7ff fefe 	bl	800900c <move_window>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d153      	bne.n	80092be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4413      	add	r3, r2
 8009220:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	461a      	mov	r2, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4313      	orrs	r3, r2
 800922c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <get_fat+0xbc>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	091b      	lsrs	r3, r3, #4
 800923c:	e002      	b.n	8009244 <get_fat+0xc2>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009244:	617b      	str	r3, [r7, #20]
			break;
 8009246:	e03f      	b.n	80092c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	4413      	add	r3, r2
 8009252:	4619      	mov	r1, r3
 8009254:	6938      	ldr	r0, [r7, #16]
 8009256:	f7ff fed9 	bl	800900c <move_window>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d130      	bne.n	80092c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800926e:	4413      	add	r3, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fbe9 	bl	8008a48 <ld_word>
 8009276:	4603      	mov	r3, r0
 8009278:	617b      	str	r3, [r7, #20]
			break;
 800927a:	e025      	b.n	80092c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	09db      	lsrs	r3, r3, #7
 8009284:	4413      	add	r3, r2
 8009286:	4619      	mov	r1, r3
 8009288:	6938      	ldr	r0, [r7, #16]
 800928a:	f7ff febf 	bl	800900c <move_window>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d118      	bne.n	80092c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80092a2:	4413      	add	r3, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fbe7 	bl	8008a78 <ld_dword>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092b0:	617b      	str	r3, [r7, #20]
			break;
 80092b2:	e009      	b.n	80092c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80092b4:	2301      	movs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e006      	b.n	80092c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ba:	bf00      	nop
 80092bc:	e004      	b.n	80092c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092c6:	bf00      	nop
		}
	}

	return val;
 80092c8:	697b      	ldr	r3, [r7, #20]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80092d2:	b590      	push	{r4, r7, lr}
 80092d4:	b089      	sub	sp, #36	; 0x24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80092de:	2302      	movs	r3, #2
 80092e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	f240 80d9 	bls.w	800949c <put_fat+0x1ca>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	f080 80d3 	bcs.w	800949c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	f000 8096 	beq.w	800942c <put_fat+0x15a>
 8009300:	2b03      	cmp	r3, #3
 8009302:	f300 80cb 	bgt.w	800949c <put_fat+0x1ca>
 8009306:	2b01      	cmp	r3, #1
 8009308:	d002      	beq.n	8009310 <put_fat+0x3e>
 800930a:	2b02      	cmp	r3, #2
 800930c:	d06e      	beq.n	80093ec <put_fat+0x11a>
 800930e:	e0c5      	b.n	800949c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61bb      	str	r3, [r7, #24]
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	085b      	lsrs	r3, r3, #1
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	4413      	add	r3, r2
 800931c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	0a5b      	lsrs	r3, r3, #9
 8009326:	4413      	add	r3, r2
 8009328:	4619      	mov	r1, r3
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff fe6e 	bl	800900c <move_window>
 8009330:	4603      	mov	r3, r0
 8009332:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009334:	7ffb      	ldrb	r3, [r7, #31]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f040 80a9 	bne.w	800948e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	1c59      	adds	r1, r3, #1
 8009346:	61b9      	str	r1, [r7, #24]
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	4413      	add	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00d      	beq.n	8009376 <put_fat+0xa4>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b25b      	sxtb	r3, r3
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	b25a      	sxtb	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	b25b      	sxtb	r3, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	b25b      	sxtb	r3, r3
 8009372:	b2db      	uxtb	r3, r3
 8009374:	e001      	b.n	800937a <put_fat+0xa8>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	0a5b      	lsrs	r3, r3, #9
 800938c:	4413      	add	r3, r2
 800938e:	4619      	mov	r1, r3
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff fe3b 	bl	800900c <move_window>
 8009396:	4603      	mov	r3, r0
 8009398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800939a:	7ffb      	ldrb	r3, [r7, #31]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d178      	bne.n	8009492 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ac:	4413      	add	r3, r2
 80093ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <put_fat+0xf0>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	e00e      	b.n	80093e0 <put_fat+0x10e>
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	b25b      	sxtb	r3, r3
 80093c8:	f023 030f 	bic.w	r3, r3, #15
 80093cc:	b25a      	sxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	b25b      	sxtb	r3, r3
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	4313      	orrs	r3, r2
 80093dc:	b25b      	sxtb	r3, r3
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	70da      	strb	r2, [r3, #3]
			break;
 80093ea:	e057      	b.n	800949c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	4413      	add	r3, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff fe07 	bl	800900c <move_window>
 80093fe:	4603      	mov	r3, r0
 8009400:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009402:	7ffb      	ldrb	r3, [r7, #31]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d146      	bne.n	8009496 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009416:	4413      	add	r3, r2
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	b292      	uxth	r2, r2
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff fb4d 	bl	8008abe <st_word>
			fs->wflag = 1;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2201      	movs	r2, #1
 8009428:	70da      	strb	r2, [r3, #3]
			break;
 800942a:	e037      	b.n	800949c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	09db      	lsrs	r3, r3, #7
 8009434:	4413      	add	r3, r2
 8009436:	4619      	mov	r1, r3
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff fde7 	bl	800900c <move_window>
 800943e:	4603      	mov	r3, r0
 8009440:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009442:	7ffb      	ldrb	r3, [r7, #31]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d128      	bne.n	800949a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800945c:	4413      	add	r3, r2
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fb0a 	bl	8008a78 <ld_dword>
 8009464:	4603      	mov	r3, r0
 8009466:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800946a:	4323      	orrs	r3, r4
 800946c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800947c:	4413      	add	r3, r2
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff fb37 	bl	8008af4 <st_dword>
			fs->wflag = 1;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	70da      	strb	r2, [r3, #3]
			break;
 800948c:	e006      	b.n	800949c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800948e:	bf00      	nop
 8009490:	e004      	b.n	800949c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009496:	bf00      	nop
 8009498:	e000      	b.n	800949c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800949a:	bf00      	nop
		}
	}
	return res;
 800949c:	7ffb      	ldrb	r3, [r7, #31]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3724      	adds	r7, #36	; 0x24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd90      	pop	{r4, r7, pc}

080094a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b088      	sub	sp, #32
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d904      	bls.n	80094cc <remove_chain+0x26>
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d301      	bcc.n	80094d0 <remove_chain+0x2a>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e04b      	b.n	8009568 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00c      	beq.n	80094f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80094d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	69b8      	ldr	r0, [r7, #24]
 80094de:	f7ff fef8 	bl	80092d2 <put_fat>
 80094e2:	4603      	mov	r3, r0
 80094e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80094e6:	7ffb      	ldrb	r3, [r7, #31]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <remove_chain+0x4a>
 80094ec:	7ffb      	ldrb	r3, [r7, #31]
 80094ee:	e03b      	b.n	8009568 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f7ff fe45 	bl	8009182 <get_fat>
 80094f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d031      	beq.n	8009564 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <remove_chain+0x64>
 8009506:	2302      	movs	r3, #2
 8009508:	e02e      	b.n	8009568 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009510:	d101      	bne.n	8009516 <remove_chain+0x70>
 8009512:	2301      	movs	r3, #1
 8009514:	e028      	b.n	8009568 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009516:	2200      	movs	r2, #0
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	69b8      	ldr	r0, [r7, #24]
 800951c:	f7ff fed9 	bl	80092d2 <put_fat>
 8009520:	4603      	mov	r3, r0
 8009522:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009524:	7ffb      	ldrb	r3, [r7, #31]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <remove_chain+0x88>
 800952a:	7ffb      	ldrb	r3, [r7, #31]
 800952c:	e01c      	b.n	8009568 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	695a      	ldr	r2, [r3, #20]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	3b02      	subs	r3, #2
 8009538:	429a      	cmp	r2, r3
 800953a:	d20b      	bcs.n	8009554 <remove_chain+0xae>
			fs->free_clst++;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	791b      	ldrb	r3, [r3, #4]
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	b2da      	uxtb	r2, r3
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	429a      	cmp	r2, r3
 8009560:	d3c6      	bcc.n	80094f0 <remove_chain+0x4a>
 8009562:	e000      	b.n	8009566 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009564:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10d      	bne.n	80095a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <create_chain+0x2c>
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	429a      	cmp	r2, r3
 800959a:	d31b      	bcc.n	80095d4 <create_chain+0x64>
 800959c:	2301      	movs	r3, #1
 800959e:	61bb      	str	r3, [r7, #24]
 80095a0:	e018      	b.n	80095d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80095a2:	6839      	ldr	r1, [r7, #0]
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff fdec 	bl	8009182 <get_fat>
 80095aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d801      	bhi.n	80095b6 <create_chain+0x46>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e070      	b.n	8009698 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095bc:	d101      	bne.n	80095c2 <create_chain+0x52>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	e06a      	b.n	8009698 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d201      	bcs.n	80095d0 <create_chain+0x60>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e063      	b.n	8009698 <create_chain+0x128>
		scl = clst;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	3301      	adds	r3, #1
 80095dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d307      	bcc.n	80095f8 <create_chain+0x88>
				ncl = 2;
 80095e8:	2302      	movs	r3, #2
 80095ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d901      	bls.n	80095f8 <create_chain+0x88>
 80095f4:	2300      	movs	r3, #0
 80095f6:	e04f      	b.n	8009698 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80095f8:	69f9      	ldr	r1, [r7, #28]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fdc1 	bl	8009182 <get_fat>
 8009600:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00e      	beq.n	8009626 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d003      	beq.n	8009616 <create_chain+0xa6>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009614:	d101      	bne.n	800961a <create_chain+0xaa>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	e03e      	b.n	8009698 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800961a:	69fa      	ldr	r2, [r7, #28]
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	429a      	cmp	r2, r3
 8009620:	d1da      	bne.n	80095d8 <create_chain+0x68>
 8009622:	2300      	movs	r3, #0
 8009624:	e038      	b.n	8009698 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009626:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	6938      	ldr	r0, [r7, #16]
 8009630:	f7ff fe4f 	bl	80092d2 <put_fat>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <create_chain+0xe2>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d006      	beq.n	8009652 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009644:	69fa      	ldr	r2, [r7, #28]
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6938      	ldr	r0, [r7, #16]
 800964a:	f7ff fe42 	bl	80092d2 <put_fat>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d116      	bne.n	8009686 <create_chain+0x116>
		fs->last_clst = ncl;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	695a      	ldr	r2, [r3, #20]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	3b02      	subs	r3, #2
 8009668:	429a      	cmp	r2, r3
 800966a:	d804      	bhi.n	8009676 <create_chain+0x106>
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	791b      	ldrb	r3, [r3, #4]
 800967a:	f043 0301 	orr.w	r3, r3, #1
 800967e:	b2da      	uxtb	r2, r3
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	711a      	strb	r2, [r3, #4]
 8009684:	e007      	b.n	8009696 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d102      	bne.n	8009692 <create_chain+0x122>
 800968c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009690:	e000      	b.n	8009694 <create_chain+0x124>
 8009692:	2301      	movs	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009696:	69fb      	ldr	r3, [r7, #28]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3720      	adds	r7, #32
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	3304      	adds	r3, #4
 80096b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	0a5b      	lsrs	r3, r3, #9
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	8952      	ldrh	r2, [r2, #10]
 80096c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1d1a      	adds	r2, r3, #4
 80096ca:	613a      	str	r2, [r7, #16]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <clmt_clust+0x3a>
 80096d6:	2300      	movs	r3, #0
 80096d8:	e010      	b.n	80096fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d307      	bcc.n	80096f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3304      	adds	r3, #4
 80096ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80096f0:	e7e9      	b.n	80096c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80096f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	4413      	add	r3, r2
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800971e:	d204      	bcs.n	800972a <dir_sdi+0x22>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	f003 031f 	and.w	r3, r3, #31
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <dir_sdi+0x26>
		return FR_INT_ERR;
 800972a:	2302      	movs	r3, #2
 800972c:	e063      	b.n	80097f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d106      	bne.n	800974e <dir_sdi+0x46>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d902      	bls.n	800974e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10c      	bne.n	800976e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	8912      	ldrh	r2, [r2, #8]
 800975c:	4293      	cmp	r3, r2
 800975e:	d301      	bcc.n	8009764 <dir_sdi+0x5c>
 8009760:	2302      	movs	r3, #2
 8009762:	e048      	b.n	80097f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	61da      	str	r2, [r3, #28]
 800976c:	e029      	b.n	80097c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	895b      	ldrh	r3, [r3, #10]
 8009772:	025b      	lsls	r3, r3, #9
 8009774:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009776:	e019      	b.n	80097ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6979      	ldr	r1, [r7, #20]
 800977c:	4618      	mov	r0, r3
 800977e:	f7ff fd00 	bl	8009182 <get_fat>
 8009782:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978a:	d101      	bne.n	8009790 <dir_sdi+0x88>
 800978c:	2301      	movs	r3, #1
 800978e:	e032      	b.n	80097f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d904      	bls.n	80097a0 <dir_sdi+0x98>
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	429a      	cmp	r2, r3
 800979e:	d301      	bcc.n	80097a4 <dir_sdi+0x9c>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e028      	b.n	80097f6 <dir_sdi+0xee>
			ofs -= csz;
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d2e1      	bcs.n	8009778 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80097b4:	6979      	ldr	r1, [r7, #20]
 80097b6:	6938      	ldr	r0, [r7, #16]
 80097b8:	f7ff fcc4 	bl	8009144 <clust2sect>
 80097bc:	4602      	mov	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <dir_sdi+0xcc>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e010      	b.n	80097f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	0a5b      	lsrs	r3, r3, #9
 80097dc:	441a      	add	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	441a      	add	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b086      	sub	sp, #24
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	3320      	adds	r3, #32
 8009814:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <dir_next+0x28>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009824:	d301      	bcc.n	800982a <dir_next+0x2c>
 8009826:	2304      	movs	r3, #4
 8009828:	e0aa      	b.n	8009980 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009830:	2b00      	cmp	r3, #0
 8009832:	f040 8098 	bne.w	8009966 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	095b      	lsrs	r3, r3, #5
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	8912      	ldrh	r2, [r2, #8]
 8009850:	4293      	cmp	r3, r2
 8009852:	f0c0 8088 	bcc.w	8009966 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	61da      	str	r2, [r3, #28]
 800985c:	2304      	movs	r3, #4
 800985e:	e08f      	b.n	8009980 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	0a5b      	lsrs	r3, r3, #9
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	8952      	ldrh	r2, [r2, #10]
 8009868:	3a01      	subs	r2, #1
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d17a      	bne.n	8009966 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7ff fc82 	bl	8009182 <get_fat>
 800987e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d801      	bhi.n	800988a <dir_next+0x8c>
 8009886:	2302      	movs	r3, #2
 8009888:	e07a      	b.n	8009980 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009890:	d101      	bne.n	8009896 <dir_next+0x98>
 8009892:	2301      	movs	r3, #1
 8009894:	e074      	b.n	8009980 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	429a      	cmp	r2, r3
 800989e:	d358      	bcc.n	8009952 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d104      	bne.n	80098b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	61da      	str	r2, [r3, #28]
 80098ac:	2304      	movs	r3, #4
 80098ae:	e067      	b.n	8009980 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7ff fe59 	bl	8009570 <create_chain>
 80098be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <dir_next+0xcc>
 80098c6:	2307      	movs	r3, #7
 80098c8:	e05a      	b.n	8009980 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <dir_next+0xd6>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e055      	b.n	8009980 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098da:	d101      	bne.n	80098e0 <dir_next+0xe2>
 80098dc:	2301      	movs	r3, #1
 80098de:	e04f      	b.n	8009980 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff fb4f 	bl	8008f84 <sync_window>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <dir_next+0xf2>
 80098ec:	2301      	movs	r3, #1
 80098ee:	e047      	b.n	8009980 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3334      	adds	r3, #52	; 0x34
 80098f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f947 	bl	8008b8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009900:	2300      	movs	r3, #0
 8009902:	613b      	str	r3, [r7, #16]
 8009904:	6979      	ldr	r1, [r7, #20]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff fc1c 	bl	8009144 <clust2sect>
 800990c:	4602      	mov	r2, r0
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	631a      	str	r2, [r3, #48]	; 0x30
 8009912:	e012      	b.n	800993a <dir_next+0x13c>
						fs->wflag = 1;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fb32 	bl	8008f84 <sync_window>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <dir_next+0x12c>
 8009926:	2301      	movs	r3, #1
 8009928:	e02a      	b.n	8009980 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	3301      	adds	r3, #1
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	631a      	str	r2, [r3, #48]	; 0x30
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	895b      	ldrh	r3, [r3, #10]
 800993e:	461a      	mov	r2, r3
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	4293      	cmp	r3, r2
 8009944:	d3e6      	bcc.n	8009914 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	1ad2      	subs	r2, r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fbf2 	bl	8009144 <clust2sect>
 8009960:	4602      	mov	r2, r0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009978:	441a      	add	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009998:	2100      	movs	r1, #0
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff feb4 	bl	8009708 <dir_sdi>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d12b      	bne.n	8009a02 <dir_alloc+0x7a>
		n = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	4619      	mov	r1, r3
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7ff fb29 	bl	800900c <move_window>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d11d      	bne.n	8009a00 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2be5      	cmp	r3, #229	; 0xe5
 80099cc:	d004      	beq.n	80099d8 <dir_alloc+0x50>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d107      	bne.n	80099e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d102      	bne.n	80099ec <dir_alloc+0x64>
 80099e6:	e00c      	b.n	8009a02 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff ff05 	bl	80097fe <dir_next>
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0d7      	beq.n	80099ae <dir_alloc+0x26>
 80099fe:	e000      	b.n	8009a02 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009a00:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d101      	bne.n	8009a0c <dir_alloc+0x84>
 8009a08:	2307      	movs	r3, #7
 8009a0a:	75fb      	strb	r3, [r7, #23]
	return res;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	331a      	adds	r3, #26
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff f80f 	bl	8008a48 <ld_word>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d109      	bne.n	8009a4a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	3314      	adds	r3, #20
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff f804 	bl	8008a48 <ld_word>
 8009a40:	4603      	mov	r3, r0
 8009a42:	041b      	lsls	r3, r3, #16
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	331a      	adds	r3, #26
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	b292      	uxth	r2, r2
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff f827 	bl	8008abe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d109      	bne.n	8009a8c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f103 0214 	add.w	r2, r3, #20
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	0c1b      	lsrs	r3, r3, #16
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f7ff f819 	bl	8008abe <st_word>
	}
}
 8009a8c:	bf00      	nop
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fe2f 	bl	8009708 <dir_sdi>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <dir_find+0x24>
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	e03e      	b.n	8009b36 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f7ff faa4 	bl	800900c <move_window>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d12f      	bne.n	8009b2e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <dir_find+0x4e>
 8009adc:	2304      	movs	r3, #4
 8009ade:	75fb      	strb	r3, [r7, #23]
 8009ae0:	e028      	b.n	8009b34 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	330b      	adds	r3, #11
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	330b      	adds	r3, #11
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <dir_find+0x86>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a18      	ldr	r0, [r3, #32]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3324      	adds	r3, #36	; 0x24
 8009b0c:	220b      	movs	r2, #11
 8009b0e:	4619      	mov	r1, r3
 8009b10:	f7ff f858 	bl	8008bc4 <mem_cmp>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7ff fe6e 	bl	80097fe <dir_next>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0c5      	beq.n	8009ab8 <dir_find+0x24>
 8009b2c:	e002      	b.n	8009b34 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009b2e:	bf00      	nop
 8009b30:	e000      	b.n	8009b34 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b32:	bf00      	nop

	return res;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff1a 	bl	8009988 <dir_alloc>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d11c      	bne.n	8009b98 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	4619      	mov	r1, r3
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7ff fa51 	bl	800900c <move_window>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d111      	bne.n	8009b98 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff f806 	bl	8008b8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a18      	ldr	r0, [r3, #32]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3324      	adds	r3, #36	; 0x24
 8009b8a:	220b      	movs	r2, #11
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	f7fe ffdd 	bl	8008b4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2201      	movs	r2, #1
 8009b96:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3324      	adds	r3, #36	; 0x24
 8009bb8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009bba:	220b      	movs	r2, #11
 8009bbc:	2120      	movs	r1, #32
 8009bbe:	68b8      	ldr	r0, [r7, #8]
 8009bc0:	f7fe ffe5 	bl	8008b8e <mem_set>
	si = i = 0; ni = 8;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	61fb      	str	r3, [r7, #28]
 8009bcc:	2308      	movs	r3, #8
 8009bce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009bde:	7efb      	ldrb	r3, [r7, #27]
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d94e      	bls.n	8009c82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009be4:	7efb      	ldrb	r3, [r7, #27]
 8009be6:	2b2f      	cmp	r3, #47	; 0x2f
 8009be8:	d006      	beq.n	8009bf8 <create_name+0x54>
 8009bea:	7efb      	ldrb	r3, [r7, #27]
 8009bec:	2b5c      	cmp	r3, #92	; 0x5c
 8009bee:	d110      	bne.n	8009c12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009bf0:	e002      	b.n	8009bf8 <create_name+0x54>
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b2f      	cmp	r3, #47	; 0x2f
 8009c02:	d0f6      	beq.n	8009bf2 <create_name+0x4e>
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c0e:	d0f0      	beq.n	8009bf2 <create_name+0x4e>
			break;
 8009c10:	e038      	b.n	8009c84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009c12:	7efb      	ldrb	r3, [r7, #27]
 8009c14:	2b2e      	cmp	r3, #46	; 0x2e
 8009c16:	d003      	beq.n	8009c20 <create_name+0x7c>
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d30c      	bcc.n	8009c3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b0b      	cmp	r3, #11
 8009c24:	d002      	beq.n	8009c2c <create_name+0x88>
 8009c26:	7efb      	ldrb	r3, [r7, #27]
 8009c28:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2a:	d001      	beq.n	8009c30 <create_name+0x8c>
 8009c2c:	2306      	movs	r3, #6
 8009c2e:	e044      	b.n	8009cba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009c30:	2308      	movs	r3, #8
 8009c32:	613b      	str	r3, [r7, #16]
 8009c34:	230b      	movs	r3, #11
 8009c36:	617b      	str	r3, [r7, #20]
			continue;
 8009c38:	e022      	b.n	8009c80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009c3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da04      	bge.n	8009c4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009c42:	7efb      	ldrb	r3, [r7, #27]
 8009c44:	3b80      	subs	r3, #128	; 0x80
 8009c46:	4a1f      	ldr	r2, [pc, #124]	; (8009cc4 <create_name+0x120>)
 8009c48:	5cd3      	ldrb	r3, [r2, r3]
 8009c4a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009c4c:	7efb      	ldrb	r3, [r7, #27]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	481d      	ldr	r0, [pc, #116]	; (8009cc8 <create_name+0x124>)
 8009c52:	f7fe ffde 	bl	8008c12 <chk_chr>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <create_name+0xbc>
 8009c5c:	2306      	movs	r3, #6
 8009c5e:	e02c      	b.n	8009cba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009c60:	7efb      	ldrb	r3, [r7, #27]
 8009c62:	2b60      	cmp	r3, #96	; 0x60
 8009c64:	d905      	bls.n	8009c72 <create_name+0xce>
 8009c66:	7efb      	ldrb	r3, [r7, #27]
 8009c68:	2b7a      	cmp	r3, #122	; 0x7a
 8009c6a:	d802      	bhi.n	8009c72 <create_name+0xce>
 8009c6c:	7efb      	ldrb	r3, [r7, #27]
 8009c6e:	3b20      	subs	r3, #32
 8009c70:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	613a      	str	r2, [r7, #16]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	7efa      	ldrb	r2, [r7, #27]
 8009c7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009c80:	e7a6      	b.n	8009bd0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009c82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	441a      	add	r2, r3
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <create_name+0xf4>
 8009c94:	2306      	movs	r3, #6
 8009c96:	e010      	b.n	8009cba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2be5      	cmp	r3, #229	; 0xe5
 8009c9e:	d102      	bne.n	8009ca6 <create_name+0x102>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2205      	movs	r2, #5
 8009ca4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ca6:	7efb      	ldrb	r3, [r7, #27]
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d801      	bhi.n	8009cb0 <create_name+0x10c>
 8009cac:	2204      	movs	r2, #4
 8009cae:	e000      	b.n	8009cb2 <create_name+0x10e>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	330b      	adds	r3, #11
 8009cb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009cb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	08011a24 	.word	0x08011a24
 8009cc8:	080119ac 	.word	0x080119ac

08009ccc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009ce0:	e002      	b.n	8009ce8 <follow_path+0x1c>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b2f      	cmp	r3, #47	; 0x2f
 8009cee:	d0f8      	beq.n	8009ce2 <follow_path+0x16>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8009cf6:	d0f4      	beq.n	8009ce2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b1f      	cmp	r3, #31
 8009d04:	d80a      	bhi.n	8009d1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2280      	movs	r2, #128	; 0x80
 8009d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009d0e:	2100      	movs	r1, #0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff fcf9 	bl	8009708 <dir_sdi>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]
 8009d1a:	e043      	b.n	8009da4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7ff ff3f 	bl	8009ba4 <create_name>
 8009d26:	4603      	mov	r3, r0
 8009d28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d134      	bne.n	8009d9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff feaf 	bl	8009a94 <dir_find>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d127      	bne.n	8009d9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d122      	bne.n	8009d9e <follow_path+0xd2>
 8009d58:	2305      	movs	r3, #5
 8009d5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009d5c:	e01f      	b.n	8009d9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11c      	bne.n	8009da2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	799b      	ldrb	r3, [r3, #6]
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d74:	2305      	movs	r3, #5
 8009d76:	75fb      	strb	r3, [r7, #23]
 8009d78:	e014      	b.n	8009da4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d88:	4413      	add	r3, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7ff fe42 	bl	8009a16 <ld_clust>
 8009d92:	4602      	mov	r2, r0
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d98:	e7c0      	b.n	8009d1c <follow_path+0x50>
			if (res != FR_OK) break;
 8009d9a:	bf00      	nop
 8009d9c:	e002      	b.n	8009da4 <follow_path+0xd8>
				break;
 8009d9e:	bf00      	nop
 8009da0:	e000      	b.n	8009da4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009da2:	bf00      	nop
			}
		}
	}

	return res;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d031      	beq.n	8009e28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e002      	b.n	8009dd2 <get_ldnumber+0x24>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d903      	bls.n	8009de2 <get_ldnumber+0x34>
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b3a      	cmp	r3, #58	; 0x3a
 8009de0:	d1f4      	bne.n	8009dcc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	2b3a      	cmp	r3, #58	; 0x3a
 8009de8:	d11c      	bne.n	8009e24 <get_ldnumber+0x76>
			tp = *path;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	60fa      	str	r2, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	3b30      	subs	r3, #48	; 0x30
 8009dfa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b09      	cmp	r3, #9
 8009e00:	d80e      	bhi.n	8009e20 <get_ldnumber+0x72>
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d10a      	bne.n	8009e20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d107      	bne.n	8009e20 <get_ldnumber+0x72>
					vol = (int)i;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	3301      	adds	r3, #1
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	e002      	b.n	8009e2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009e28:	693b      	ldr	r3, [r7, #16]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	371c      	adds	r7, #28
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	70da      	strb	r2, [r3, #3]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff f8da 	bl	800900c <move_window>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <check_fs+0x2a>
 8009e5e:	2304      	movs	r3, #4
 8009e60:	e038      	b.n	8009ed4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3334      	adds	r3, #52	; 0x34
 8009e66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fdec 	bl	8008a48 <ld_word>
 8009e70:	4603      	mov	r3, r0
 8009e72:	461a      	mov	r2, r3
 8009e74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d001      	beq.n	8009e80 <check_fs+0x48>
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e029      	b.n	8009ed4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e86:	2be9      	cmp	r3, #233	; 0xe9
 8009e88:	d009      	beq.n	8009e9e <check_fs+0x66>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e90:	2beb      	cmp	r3, #235	; 0xeb
 8009e92:	d11e      	bne.n	8009ed2 <check_fs+0x9a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009e9a:	2b90      	cmp	r3, #144	; 0x90
 8009e9c:	d119      	bne.n	8009ed2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3334      	adds	r3, #52	; 0x34
 8009ea2:	3336      	adds	r3, #54	; 0x36
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe fde7 	bl	8008a78 <ld_dword>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <check_fs+0xa4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d101      	bne.n	8009eba <check_fs+0x82>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e00c      	b.n	8009ed4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3334      	adds	r3, #52	; 0x34
 8009ebe:	3352      	adds	r3, #82	; 0x52
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fdd9 	bl	8008a78 <ld_dword>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a05      	ldr	r2, [pc, #20]	; (8009ee0 <check_fs+0xa8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d101      	bne.n	8009ed2 <check_fs+0x9a>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009ed2:	2302      	movs	r3, #2
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	00544146 	.word	0x00544146
 8009ee0:	33544146 	.word	0x33544146

08009ee4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b096      	sub	sp, #88	; 0x58
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff ff58 	bl	8009dae <get_ldnumber>
 8009efe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	da01      	bge.n	8009f0a <find_volume+0x26>
 8009f06:	230b      	movs	r3, #11
 8009f08:	e235      	b.n	800a376 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009f0a:	4aa5      	ldr	r2, [pc, #660]	; (800a1a0 <find_volume+0x2bc>)
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <find_volume+0x3a>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	e22b      	b.n	800a376 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f20:	f7fe fe92 	bl	8008c48 <lock_fs>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <find_volume+0x4a>
 8009f2a:	230f      	movs	r3, #15
 8009f2c:	e223      	b.n	800a376 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	f023 0301 	bic.w	r3, r3, #1
 8009f3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01a      	beq.n	8009f7a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fcdf 	bl	800890c <disk_status>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10c      	bne.n	8009f7a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <find_volume+0x92>
 8009f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009f72:	230a      	movs	r3, #10
 8009f74:	e1ff      	b.n	800a376 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009f76:	2300      	movs	r3, #0
 8009f78:	e1fd      	b.n	800a376 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fcd7 	bl	8008940 <disk_initialize>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e1e6      	b.n	800a376 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <find_volume+0xda>
 8009fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009fba:	230a      	movs	r3, #10
 8009fbc:	e1db      	b.n	800a376 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009fc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fc6:	f7ff ff37 	bl	8009e38 <check_fs>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d149      	bne.n	800a06c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fd8:	2300      	movs	r3, #0
 8009fda:	643b      	str	r3, [r7, #64]	; 0x40
 8009fdc:	e01e      	b.n	800a01c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe6:	011b      	lsls	r3, r3, #4
 8009fe8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009fec:	4413      	add	r3, r2
 8009fee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d006      	beq.n	800a008 <find_volume+0x124>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fd3a 	bl	8008a78 <ld_dword>
 800a004:	4602      	mov	r2, r0
 800a006:	e000      	b.n	800a00a <find_volume+0x126>
 800a008:	2200      	movs	r2, #0
 800a00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	3358      	adds	r3, #88	; 0x58
 800a010:	443b      	add	r3, r7
 800a012:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a018:	3301      	adds	r3, #1
 800a01a:	643b      	str	r3, [r7, #64]	; 0x40
 800a01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d9dd      	bls.n	8009fde <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a022:	2300      	movs	r3, #0
 800a024:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <find_volume+0x14e>
 800a02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a02e:	3b01      	subs	r3, #1
 800a030:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	3358      	adds	r3, #88	; 0x58
 800a038:	443b      	add	r3, r7
 800a03a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a03e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a042:	2b00      	cmp	r3, #0
 800a044:	d005      	beq.n	800a052 <find_volume+0x16e>
 800a046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a04a:	f7ff fef5 	bl	8009e38 <check_fs>
 800a04e:	4603      	mov	r3, r0
 800a050:	e000      	b.n	800a054 <find_volume+0x170>
 800a052:	2303      	movs	r3, #3
 800a054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d905      	bls.n	800a06c <find_volume+0x188>
 800a060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a062:	3301      	adds	r3, #1
 800a064:	643b      	str	r3, [r7, #64]	; 0x40
 800a066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d9e2      	bls.n	800a032 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a070:	2b04      	cmp	r3, #4
 800a072:	d101      	bne.n	800a078 <find_volume+0x194>
 800a074:	2301      	movs	r3, #1
 800a076:	e17e      	b.n	800a376 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d901      	bls.n	800a084 <find_volume+0x1a0>
 800a080:	230d      	movs	r3, #13
 800a082:	e178      	b.n	800a376 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	3334      	adds	r3, #52	; 0x34
 800a088:	330b      	adds	r3, #11
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fcdc 	bl	8008a48 <ld_word>
 800a090:	4603      	mov	r3, r0
 800a092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a096:	d001      	beq.n	800a09c <find_volume+0x1b8>
 800a098:	230d      	movs	r3, #13
 800a09a:	e16c      	b.n	800a376 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	3334      	adds	r3, #52	; 0x34
 800a0a0:	3316      	adds	r3, #22
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fcd0 	bl	8008a48 <ld_word>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <find_volume+0x1dc>
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	3334      	adds	r3, #52	; 0x34
 800a0b6:	3324      	adds	r3, #36	; 0x24
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fcdd 	bl	8008a78 <ld_dword>
 800a0be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	789b      	ldrb	r3, [r3, #2]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d005      	beq.n	800a0e4 <find_volume+0x200>
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	789b      	ldrb	r3, [r3, #2]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d001      	beq.n	800a0e4 <find_volume+0x200>
 800a0e0:	230d      	movs	r3, #13
 800a0e2:	e148      	b.n	800a376 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	789b      	ldrb	r3, [r3, #2]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ec:	fb02 f303 	mul.w	r3, r2, r3
 800a0f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a100:	895b      	ldrh	r3, [r3, #10]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d008      	beq.n	800a118 <find_volume+0x234>
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	895b      	ldrh	r3, [r3, #10]
 800a10a:	461a      	mov	r2, r3
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	895b      	ldrh	r3, [r3, #10]
 800a110:	3b01      	subs	r3, #1
 800a112:	4013      	ands	r3, r2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <find_volume+0x238>
 800a118:	230d      	movs	r3, #13
 800a11a:	e12c      	b.n	800a376 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	3334      	adds	r3, #52	; 0x34
 800a120:	3311      	adds	r3, #17
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fc90 	bl	8008a48 <ld_word>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	891b      	ldrh	r3, [r3, #8]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <find_volume+0x25e>
 800a13e:	230d      	movs	r3, #13
 800a140:	e119      	b.n	800a376 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	3334      	adds	r3, #52	; 0x34
 800a146:	3313      	adds	r3, #19
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fc7d 	bl	8008a48 <ld_word>
 800a14e:	4603      	mov	r3, r0
 800a150:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <find_volume+0x282>
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	3334      	adds	r3, #52	; 0x34
 800a15c:	3320      	adds	r3, #32
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fc8a 	bl	8008a78 <ld_dword>
 800a164:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	3334      	adds	r3, #52	; 0x34
 800a16a:	330e      	adds	r3, #14
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fc6b 	bl	8008a48 <ld_word>
 800a172:	4603      	mov	r3, r0
 800a174:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <find_volume+0x29c>
 800a17c:	230d      	movs	r3, #13
 800a17e:	e0fa      	b.n	800a376 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a180:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a184:	4413      	add	r3, r2
 800a186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a188:	8912      	ldrh	r2, [r2, #8]
 800a18a:	0912      	lsrs	r2, r2, #4
 800a18c:	b292      	uxth	r2, r2
 800a18e:	4413      	add	r3, r2
 800a190:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	429a      	cmp	r2, r3
 800a198:	d204      	bcs.n	800a1a4 <find_volume+0x2c0>
 800a19a:	230d      	movs	r3, #13
 800a19c:	e0eb      	b.n	800a376 <find_volume+0x492>
 800a19e:	bf00      	nop
 800a1a0:	20001eb8 	.word	0x20001eb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ac:	8952      	ldrh	r2, [r2, #10]
 800a1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <find_volume+0x2da>
 800a1ba:	230d      	movs	r3, #13
 800a1bc:	e0db      	b.n	800a376 <find_volume+0x492>
		fmt = FS_FAT32;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d802      	bhi.n	800a1d4 <find_volume+0x2f0>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d802      	bhi.n	800a1e4 <find_volume+0x300>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	1c9a      	adds	r2, r3, #2
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1f0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f6:	441a      	add	r2, r3
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a1fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	441a      	add	r2, r3
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d11e      	bne.n	800a24c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	3334      	adds	r3, #52	; 0x34
 800a212:	332a      	adds	r3, #42	; 0x2a
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fc17 	bl	8008a48 <ld_word>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <find_volume+0x340>
 800a220:	230d      	movs	r3, #13
 800a222:	e0a8      	b.n	800a376 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	891b      	ldrh	r3, [r3, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <find_volume+0x34c>
 800a22c:	230d      	movs	r3, #13
 800a22e:	e0a2      	b.n	800a376 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	3334      	adds	r3, #52	; 0x34
 800a234:	332c      	adds	r3, #44	; 0x2c
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fc1e 	bl	8008a78 <ld_dword>
 800a23c:	4602      	mov	r2, r0
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	647b      	str	r3, [r7, #68]	; 0x44
 800a24a:	e01f      	b.n	800a28c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <find_volume+0x374>
 800a254:	230d      	movs	r3, #13
 800a256:	e08e      	b.n	800a376 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25e:	441a      	add	r2, r3
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d103      	bne.n	800a274 <find_volume+0x390>
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	e00a      	b.n	800a28a <find_volume+0x3a6>
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	699a      	ldr	r2, [r3, #24]
 800a278:	4613      	mov	r3, r2
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	4413      	add	r3, r2
 800a27e:	085a      	lsrs	r2, r3, #1
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a28a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	69da      	ldr	r2, [r3, #28]
 800a290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a292:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a296:	0a5b      	lsrs	r3, r3, #9
 800a298:	429a      	cmp	r2, r3
 800a29a:	d201      	bcs.n	800a2a0 <find_volume+0x3bc>
 800a29c:	230d      	movs	r3, #13
 800a29e:	e06a      	b.n	800a376 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a6:	615a      	str	r2, [r3, #20]
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	695a      	ldr	r2, [r3, #20]
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	2280      	movs	r2, #128	; 0x80
 800a2b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a2b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d149      	bne.n	800a352 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	3334      	adds	r3, #52	; 0x34
 800a2c2:	3330      	adds	r3, #48	; 0x30
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fbbf 	bl	8008a48 <ld_word>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d140      	bne.n	800a352 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2d8:	f7fe fe98 	bl	800900c <move_window>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d137      	bne.n	800a352 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	3334      	adds	r3, #52	; 0x34
 800a2ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe fba9 	bl	8008a48 <ld_word>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d127      	bne.n	800a352 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	3334      	adds	r3, #52	; 0x34
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe fbb6 	bl	8008a78 <ld_dword>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4a1c      	ldr	r2, [pc, #112]	; (800a380 <find_volume+0x49c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d11e      	bne.n	800a352 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	3334      	adds	r3, #52	; 0x34
 800a318:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe fbab 	bl	8008a78 <ld_dword>
 800a322:	4603      	mov	r3, r0
 800a324:	4a17      	ldr	r2, [pc, #92]	; (800a384 <find_volume+0x4a0>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d113      	bne.n	800a352 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	3334      	adds	r3, #52	; 0x34
 800a32e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fba0 	bl	8008a78 <ld_dword>
 800a338:	4602      	mov	r2, r0
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	3334      	adds	r3, #52	; 0x34
 800a342:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fb96 	bl	8008a78 <ld_dword>
 800a34c:	4602      	mov	r2, r0
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a358:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a35a:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <find_volume+0x4a4>)
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	3301      	adds	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <find_volume+0x4a4>)
 800a364:	801a      	strh	r2, [r3, #0]
 800a366:	4b08      	ldr	r3, [pc, #32]	; (800a388 <find_volume+0x4a4>)
 800a368:	881a      	ldrh	r2, [r3, #0]
 800a36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a36e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a370:	f7fe fde4 	bl	8008f3c <clear_lock>
#endif
	return FR_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3758      	adds	r7, #88	; 0x58
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	41615252 	.word	0x41615252
 800a384:	61417272 	.word	0x61417272
 800a388:	20001ebc 	.word	0x20001ebc

0800a38c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a396:	2309      	movs	r3, #9
 800a398:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d02e      	beq.n	800a3fe <validate+0x72>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02a      	beq.n	800a3fe <validate+0x72>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d025      	beq.n	800a3fe <validate+0x72>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	889a      	ldrh	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	88db      	ldrh	r3, [r3, #6]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d11e      	bne.n	800a3fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fc3f 	bl	8008c48 <lock_fs>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d014      	beq.n	800a3fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	785b      	ldrb	r3, [r3, #1]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fa98 	bl	800890c <disk_status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <validate+0x60>
				res = FR_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e008      	b.n	800a3fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fc3e 	bl	8008c74 <unlock_fs>
 800a3f8:	e001      	b.n	800a3fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a3fa:	230f      	movs	r3, #15
 800a3fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <validate+0x7e>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	e000      	b.n	800a40c <validate+0x80>
 800a40a:	2300      	movs	r3, #0
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	6013      	str	r3, [r2, #0]
	return res;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a42e:	f107 0310 	add.w	r3, r7, #16
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fcbb 	bl	8009dae <get_ldnumber>
 800a438:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da01      	bge.n	800a444 <f_mount+0x28>
 800a440:	230b      	movs	r3, #11
 800a442:	e048      	b.n	800a4d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a444:	4a26      	ldr	r2, [pc, #152]	; (800a4e0 <f_mount+0xc4>)
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a44c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00f      	beq.n	800a474 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a454:	69b8      	ldr	r0, [r7, #24]
 800a456:	f7fe fd71 	bl	8008f3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fcdd 	bl	800ae1e <ff_del_syncobj>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <f_mount+0x52>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e033      	b.n	800a4d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00f      	beq.n	800a49a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	330c      	adds	r3, #12
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f000 fca7 	bl	800adde <ff_cre_syncobj>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <f_mount+0x7e>
 800a496:	2302      	movs	r3, #2
 800a498:	e01d      	b.n	800a4d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4910      	ldr	r1, [pc, #64]	; (800a4e0 <f_mount+0xc4>)
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <f_mount+0x94>
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d001      	beq.n	800a4b4 <f_mount+0x98>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e010      	b.n	800a4d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a4b4:	f107 010c 	add.w	r1, r7, #12
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fd10 	bl	8009ee4 <find_volume>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7dfa      	ldrb	r2, [r7, #23]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fbd0 	bl	8008c74 <unlock_fs>
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20001eb8 	.word	0x20001eb8

0800a4e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b098      	sub	sp, #96	; 0x60
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <f_open+0x18>
 800a4f8:	2309      	movs	r3, #9
 800a4fa:	e1b4      	b.n	800a866 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a502:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a504:	79fa      	ldrb	r2, [r7, #7]
 800a506:	f107 0110 	add.w	r1, r7, #16
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fce8 	bl	8009ee4 <find_volume>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a51a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f040 8191 	bne.w	800a846 <f_open+0x362>
		dj.obj.fs = fs;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	f107 0314 	add.w	r3, r7, #20
 800a52e:	4611      	mov	r1, r2
 800a530:	4618      	mov	r0, r3
 800a532:	f7ff fbcb 	bl	8009ccc <follow_path>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a53c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a540:	2b00      	cmp	r3, #0
 800a542:	d11a      	bne.n	800a57a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a544:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a548:	b25b      	sxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	da03      	bge.n	800a556 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a54e:	2306      	movs	r3, #6
 800a550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a554:	e011      	b.n	800a57a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	f023 0301 	bic.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bf14      	ite	ne
 800a560:	2301      	movne	r3, #1
 800a562:	2300      	moveq	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	f107 0314 	add.w	r3, r7, #20
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fb9c 	bl	8008cac <chk_lock>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f003 031c 	and.w	r3, r3, #28
 800a580:	2b00      	cmp	r3, #0
 800a582:	d07f      	beq.n	800a684 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d017      	beq.n	800a5bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a590:	2b04      	cmp	r3, #4
 800a592:	d10e      	bne.n	800a5b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a594:	f7fe fbe6 	bl	8008d64 <enq_lock>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d006      	beq.n	800a5ac <f_open+0xc8>
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff facb 	bl	8009b3e <dir_register>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	e000      	b.n	800a5ae <f_open+0xca>
 800a5ac:	2312      	movs	r3, #18
 800a5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f043 0308 	orr.w	r3, r3, #8
 800a5b8:	71fb      	strb	r3, [r7, #7]
 800a5ba:	e010      	b.n	800a5de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a5bc:	7ebb      	ldrb	r3, [r7, #26]
 800a5be:	f003 0311 	and.w	r3, r3, #17
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <f_open+0xea>
					res = FR_DENIED;
 800a5c6:	2307      	movs	r3, #7
 800a5c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a5cc:	e007      	b.n	800a5de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <f_open+0xfa>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a5de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d168      	bne.n	800a6b8 <f_open+0x1d4>
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d063      	beq.n	800a6b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a5f0:	f7fd fc50 	bl	8007e94 <get_fattime>
 800a5f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f8:	330e      	adds	r3, #14
 800a5fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fa79 	bl	8008af4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	3316      	adds	r3, #22
 800a606:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe fa73 	bl	8008af4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a610:	330b      	adds	r3, #11
 800a612:	2220      	movs	r2, #32
 800a614:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff f9fa 	bl	8009a16 <ld_clust>
 800a622:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a628:	2200      	movs	r2, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fa12 	bl	8009a54 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a632:	331c      	adds	r3, #28
 800a634:	2100      	movs	r1, #0
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fa5c 	bl	8008af4 <st_dword>
					fs->wflag = 1;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	2201      	movs	r2, #1
 800a640:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d037      	beq.n	800a6b8 <f_open+0x1d4>
						dw = fs->winsect;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a64e:	f107 0314 	add.w	r3, r7, #20
 800a652:	2200      	movs	r2, #0
 800a654:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe ff25 	bl	80094a6 <remove_chain>
 800a65c:	4603      	mov	r3, r0
 800a65e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a666:	2b00      	cmp	r3, #0
 800a668:	d126      	bne.n	800a6b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fccc 	bl	800900c <move_window>
 800a674:	4603      	mov	r3, r0
 800a676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a67e:	3a01      	subs	r2, #1
 800a680:	611a      	str	r2, [r3, #16]
 800a682:	e019      	b.n	800a6b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d115      	bne.n	800a6b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a68c:	7ebb      	ldrb	r3, [r7, #26]
 800a68e:	f003 0310 	and.w	r3, r3, #16
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a696:	2304      	movs	r3, #4
 800a698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a69c:	e00c      	b.n	800a6b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <f_open+0x1d4>
 800a6a8:	7ebb      	ldrb	r3, [r7, #26]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <f_open+0x1d4>
						res = FR_DENIED;
 800a6b2:	2307      	movs	r3, #7
 800a6b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a6b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d128      	bne.n	800a712 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a6da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	f023 0301 	bic.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf14      	ite	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	2300      	moveq	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	f107 0314 	add.w	r3, r7, #20
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fb55 	bl	8008da8 <inc_lock>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <f_open+0x22e>
 800a70c:	2302      	movs	r3, #2
 800a70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 8095 	bne.w	800a846 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff f977 	bl	8009a16 <ld_clust>
 800a728:	4602      	mov	r2, r0
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a730:	331c      	adds	r3, #28
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe f9a0 	bl	8008a78 <ld_dword>
 800a738:	4602      	mov	r2, r0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	88da      	ldrh	r2, [r3, #6]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	79fa      	ldrb	r2, [r7, #7]
 800a756:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3330      	adds	r3, #48	; 0x30
 800a76e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a772:	2100      	movs	r1, #0
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fa0a 	bl	8008b8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a77a:	79fb      	ldrb	r3, [r7, #7]
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b00      	cmp	r3, #0
 800a782:	d060      	beq.n	800a846 <f_open+0x362>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d05c      	beq.n	800a846 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	895b      	ldrh	r3, [r3, #10]
 800a798:	025b      	lsls	r3, r3, #9
 800a79a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7a8:	e016      	b.n	800a7d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fce7 	bl	8009182 <get_fat>
 800a7b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a7b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d802      	bhi.n	800a7c2 <f_open+0x2de>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a7c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c8:	d102      	bne.n	800a7d0 <f_open+0x2ec>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <f_open+0x304>
 800a7e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d8e0      	bhi.n	800a7aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d127      	bne.n	800a846 <f_open+0x362>
 800a7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d022      	beq.n	800a846 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fc9d 	bl	8009144 <clust2sect>
 800a80a:	6478      	str	r0, [r7, #68]	; 0x44
 800a80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d103      	bne.n	800a81a <f_open+0x336>
						res = FR_INT_ERR;
 800a812:	2302      	movs	r3, #2
 800a814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a818:	e015      	b.n	800a846 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a81c:	0a5a      	lsrs	r2, r3, #9
 800a81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	7858      	ldrb	r0, [r3, #1]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1a      	ldr	r2, [r3, #32]
 800a834:	2301      	movs	r3, #1
 800a836:	f7fe f8a9 	bl	800898c <disk_read>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <f_open+0x362>
 800a840:	2301      	movs	r3, #1
 800a842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <f_open+0x370>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fa09 	bl	8008c74 <unlock_fs>
 800a862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a866:	4618      	mov	r0, r3
 800a868:	3760      	adds	r7, #96	; 0x60
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b08c      	sub	sp, #48	; 0x30
 800a872:	af00      	add	r7, sp, #0
 800a874:	60f8      	str	r0, [r7, #12]
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f107 0210 	add.w	r2, r7, #16
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fd7c 	bl	800a38c <validate>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a89a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d107      	bne.n	800a8b2 <f_write+0x44>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	7d5b      	ldrb	r3, [r3, #21]
 800a8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d009      	beq.n	800a8c6 <f_write+0x58>
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe f9da 	bl	8008c74 <unlock_fs>
 800a8c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8c4:	e173      	b.n	800abae <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	7d1b      	ldrb	r3, [r3, #20]
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <f_write+0x72>
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2107      	movs	r1, #7
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe f9cc 	bl	8008c74 <unlock_fs>
 800a8dc:	2307      	movs	r3, #7
 800a8de:	e166      	b.n	800abae <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	441a      	add	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	f080 814b 	bcs.w	800ab88 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	43db      	mvns	r3, r3
 800a8f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a8fa:	e145      	b.n	800ab88 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a904:	2b00      	cmp	r3, #0
 800a906:	f040 8101 	bne.w	800ab0c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	0a5b      	lsrs	r3, r3, #9
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	8952      	ldrh	r2, [r2, #10]
 800a914:	3a01      	subs	r2, #1
 800a916:	4013      	ands	r3, r2
 800a918:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d14d      	bne.n	800a9bc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10c      	bne.n	800a942 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a930:	2b00      	cmp	r3, #0
 800a932:	d11a      	bne.n	800a96a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fe19 	bl	8009570 <create_chain>
 800a93e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a940:	e013      	b.n	800a96a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	4619      	mov	r1, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7fe fea5 	bl	80096a0 <clmt_clust>
 800a956:	62b8      	str	r0, [r7, #40]	; 0x28
 800a958:	e007      	b.n	800a96a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7fe fe04 	bl	8009570 <create_chain>
 800a968:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 8110 	beq.w	800ab92 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	2b01      	cmp	r3, #1
 800a976:	d109      	bne.n	800a98c <f_write+0x11e>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2202      	movs	r2, #2
 800a97c:	755a      	strb	r2, [r3, #21]
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2102      	movs	r1, #2
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe f976 	bl	8008c74 <unlock_fs>
 800a988:	2302      	movs	r3, #2
 800a98a:	e110      	b.n	800abae <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a992:	d109      	bne.n	800a9a8 <f_write+0x13a>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	755a      	strb	r2, [r3, #21]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2101      	movs	r1, #1
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe f968 	bl	8008c74 <unlock_fs>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e102      	b.n	800abae <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9ac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <f_write+0x14e>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9ba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	7d1b      	ldrb	r3, [r3, #20]
 800a9c0:	b25b      	sxtb	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	da1d      	bge.n	800aa02 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	7858      	ldrb	r0, [r3, #1]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6a1a      	ldr	r2, [r3, #32]
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f7fd fff9 	bl	80089cc <disk_write>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d009      	beq.n	800a9f4 <f_write+0x186>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	755a      	strb	r2, [r3, #21]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f942 	bl	8008c74 <unlock_fs>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e0dc      	b.n	800abae <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
 800a9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f7fe fb9a 	bl	8009144 <clust2sect>
 800aa10:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d109      	bne.n	800aa2c <f_write+0x1be>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	755a      	strb	r2, [r3, #21]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2102      	movs	r1, #2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe f926 	bl	8008c74 <unlock_fs>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	e0c0      	b.n	800abae <f_write+0x340>
			sect += csect;
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	4413      	add	r3, r2
 800aa32:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	0a5b      	lsrs	r3, r3, #9
 800aa38:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d041      	beq.n	800aac4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	4413      	add	r3, r2
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	8952      	ldrh	r2, [r2, #10]
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d905      	bls.n	800aa5a <f_write+0x1ec>
					cc = fs->csize - csect;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	895b      	ldrh	r3, [r3, #10]
 800aa52:	461a      	mov	r2, r3
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	7858      	ldrb	r0, [r3, #1]
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	69f9      	ldr	r1, [r7, #28]
 800aa64:	f7fd ffb2 	bl	80089cc <disk_write>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <f_write+0x214>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2201      	movs	r2, #1
 800aa72:	755a      	strb	r2, [r3, #21]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	2101      	movs	r1, #1
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe f8fb 	bl	8008c74 <unlock_fs>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e095      	b.n	800abae <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1a      	ldr	r2, [r3, #32]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	6a3a      	ldr	r2, [r7, #32]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d915      	bls.n	800aabc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	025b      	lsls	r3, r3, #9
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f7fe f84f 	bl	8008b4c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	7d1b      	ldrb	r3, [r3, #20]
 800aab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	025b      	lsls	r3, r3, #9
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aac2:	e044      	b.n	800ab4e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d01b      	beq.n	800ab06 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d215      	bcs.n	800ab06 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	7858      	ldrb	r0, [r3, #1]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aae4:	2301      	movs	r3, #1
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	f7fd ff50 	bl	800898c <disk_read>
 800aaec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d009      	beq.n	800ab06 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	755a      	strb	r2, [r3, #21]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe f8b9 	bl	8008c74 <unlock_fs>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e053      	b.n	800abae <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ab1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d901      	bls.n	800ab26 <f_write+0x2b8>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab34:	4413      	add	r3, r2
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	69f9      	ldr	r1, [r7, #28]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe f806 	bl	8008b4c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	7d1b      	ldrb	r3, [r3, #20]
 800ab44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	4413      	add	r3, r2
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	619a      	str	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	68da      	ldr	r2, [r3, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	bf38      	it	cc
 800ab6e:	461a      	movcc	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	60da      	str	r2, [r3, #12]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	441a      	add	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f47f aeb6 	bne.w	800a8fc <f_write+0x8e>
 800ab90:	e000      	b.n	800ab94 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	7d1b      	ldrb	r3, [r3, #20]
 800ab98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe f864 	bl	8008c74 <unlock_fs>
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3730      	adds	r7, #48	; 0x30
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b086      	sub	sp, #24
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fbe0 	bl	800a38c <validate>
 800abcc:	4603      	mov	r3, r0
 800abce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d16d      	bne.n	800acb2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	7d1b      	ldrb	r3, [r3, #20]
 800abda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d067      	beq.n	800acb2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7d1b      	ldrb	r3, [r3, #20]
 800abe6:	b25b      	sxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da1a      	bge.n	800ac22 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	7858      	ldrb	r0, [r3, #1]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1a      	ldr	r2, [r3, #32]
 800abfa:	2301      	movs	r3, #1
 800abfc:	f7fd fee6 	bl	80089cc <disk_write>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d006      	beq.n	800ac14 <f_sync+0x5e>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2101      	movs	r1, #1
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe f832 	bl	8008c74 <unlock_fs>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e055      	b.n	800acc0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7d1b      	ldrb	r3, [r3, #20]
 800ac18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ac22:	f7fd f937 	bl	8007e94 <get_fattime>
 800ac26:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fe f9eb 	bl	800900c <move_window>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d138      	bne.n	800acb2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac44:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	330b      	adds	r3, #11
 800ac4a:	781a      	ldrb	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	330b      	adds	r3, #11
 800ac50:	f042 0220 	orr.w	r2, r2, #32
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	461a      	mov	r2, r3
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	f7fe fef6 	bl	8009a54 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f103 021c 	add.w	r2, r3, #28
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	4619      	mov	r1, r3
 800ac74:	4610      	mov	r0, r2
 800ac76:	f7fd ff3d 	bl	8008af4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3316      	adds	r3, #22
 800ac7e:	6939      	ldr	r1, [r7, #16]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd ff37 	bl	8008af4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3312      	adds	r3, #18
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd ff16 	bl	8008abe <st_word>
					fs->wflag = 1;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2201      	movs	r2, #1
 800ac96:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe f9e4 	bl	8009068 <sync_fs>
 800aca0:	4603      	mov	r3, r0
 800aca2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acac:	b2da      	uxtb	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	7dfa      	ldrb	r2, [r7, #23]
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fd ffdb 	bl	8008c74 <unlock_fs>
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ff70 	bl	800abb6 <f_sync>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11d      	bne.n	800ad1c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f107 0208 	add.w	r2, r7, #8
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fb4f 	bl	800a38c <validate>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d111      	bne.n	800ad1c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe f8e1 	bl	8008ec4 <dec_lock>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2100      	movs	r1, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd ffac 	bl	8008c74 <unlock_fs>
#endif
		}
	}
	return res;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad3e:	4b1f      	ldr	r3, [pc, #124]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad40:	7a5b      	ldrb	r3, [r3, #9]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d131      	bne.n	800adac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad48:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad4a:	7a5b      	ldrb	r3, [r3, #9]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad52:	2100      	movs	r1, #0
 800ad54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad56:	4b19      	ldr	r3, [pc, #100]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad58:	7a5b      	ldrb	r3, [r3, #9]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	4a17      	ldr	r2, [pc, #92]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad66:	4b15      	ldr	r3, [pc, #84]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad68:	7a5b      	ldrb	r3, [r3, #9]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4b13      	ldr	r3, [pc, #76]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad70:	4413      	add	r3, r2
 800ad72:	79fa      	ldrb	r2, [r7, #7]
 800ad74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad78:	7a5b      	ldrb	r3, [r3, #9]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	b2d1      	uxtb	r1, r2
 800ad80:	4a0e      	ldr	r2, [pc, #56]	; (800adbc <FATFS_LinkDriverEx+0x94>)
 800ad82:	7251      	strb	r1, [r2, #9]
 800ad84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad86:	7dbb      	ldrb	r3, [r7, #22]
 800ad88:	3330      	adds	r3, #48	; 0x30
 800ad8a:	b2da      	uxtb	r2, r3
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	3301      	adds	r3, #1
 800ad94:	223a      	movs	r2, #58	; 0x3a
 800ad96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	3302      	adds	r3, #2
 800ad9c:	222f      	movs	r2, #47	; 0x2f
 800ad9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	3303      	adds	r3, #3
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20001ee0 	.word	0x20001ee0

0800adc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff ffaa 	bl	800ad28 <FATFS_LinkDriverEx>
 800add4:	4603      	mov	r3, r0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	4603      	mov	r3, r0
 800ade6:	6039      	str	r1, [r7, #0]
 800ade8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	2300      	movs	r3, #0
 800adf0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800adf2:	f107 030c 	add.w	r3, r7, #12
 800adf6:	2101      	movs	r1, #1
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 f8cd 	bl	800af98 <osSemaphoreCreate>
 800adfe:	4602      	mov	r2, r0
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2301      	movne	r3, #1
 800ae0e:	2300      	moveq	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	617b      	str	r3, [r7, #20]

    return ret;
 800ae14:	697b      	ldr	r3, [r7, #20]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f96c 	bl	800b104 <osSemaphoreDelete>
#endif
    return 1;
 800ae2c:	2301      	movs	r3, #1
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ae42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8d8 	bl	800affc <osSemaphoreWait>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ae52:	2301      	movs	r3, #1
 800ae54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f915 	bl	800b098 <osSemaphoreRelease>
#endif
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b085      	sub	sp, #20
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ae84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae88:	2b84      	cmp	r3, #132	; 0x84
 800ae8a:	d005      	beq.n	800ae98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ae8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	3303      	adds	r3, #3
 800ae96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ae98:	68fb      	ldr	r3, [r7, #12]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeac:	f3ef 8305 	mrs	r3, IPSR
 800aeb0:	607b      	str	r3, [r7, #4]
  return(result);
 800aeb2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bf14      	ite	ne
 800aeb8:	2301      	movne	r3, #1
 800aeba:	2300      	moveq	r3, #0
 800aebc:	b2db      	uxtb	r3, r3
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aece:	f001 f987 	bl	800c1e0 <vTaskStartScheduler>
  
  return osOK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeda:	b089      	sub	sp, #36	; 0x24
 800aedc:	af04      	add	r7, sp, #16
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d020      	beq.n	800af2c <osThreadCreate+0x54>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d01c      	beq.n	800af2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685c      	ldr	r4, [r3, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691e      	ldr	r6, [r3, #16]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff ffb6 	bl	800ae76 <makeFreeRtosPriority>
 800af0a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af14:	9202      	str	r2, [sp, #8]
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	9100      	str	r1, [sp, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	4632      	mov	r2, r6
 800af1e:	4629      	mov	r1, r5
 800af20:	4620      	mov	r0, r4
 800af22:	f000 ff7f 	bl	800be24 <xTaskCreateStatic>
 800af26:	4603      	mov	r3, r0
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e01c      	b.n	800af66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685c      	ldr	r4, [r3, #4]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af38:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff ff98 	bl	800ae76 <makeFreeRtosPriority>
 800af46:	4602      	mov	r2, r0
 800af48:	f107 030c 	add.w	r3, r7, #12
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	9200      	str	r2, [sp, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	4632      	mov	r2, r6
 800af54:	4629      	mov	r1, r5
 800af56:	4620      	mov	r0, r4
 800af58:	f000 ffc1 	bl	800bede <xTaskCreate>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d001      	beq.n	800af66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800af62:	2300      	movs	r3, #0
 800af64:	e000      	b.n	800af68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800af66:	68fb      	ldr	r3, [r7, #12]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <osDelay+0x16>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	e000      	b.n	800af88 <osDelay+0x18>
 800af86:	2301      	movs	r3, #1
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 f8f5 	bl	800c178 <vTaskDelay>
  
  return osOK;
 800af8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00f      	beq.n	800afca <osSemaphoreCreate+0x32>
    if (count == 1) {
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d10a      	bne.n	800afc6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	2203      	movs	r2, #3
 800afb6:	9200      	str	r2, [sp, #0]
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	2001      	movs	r0, #1
 800afbe:	f000 f9d1 	bl	800b364 <xQueueGenericCreateStatic>
 800afc2:	4603      	mov	r3, r0
 800afc4:	e016      	b.n	800aff4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e014      	b.n	800aff4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d110      	bne.n	800aff2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800afd0:	2203      	movs	r2, #3
 800afd2:	2100      	movs	r1, #0
 800afd4:	2001      	movs	r0, #1
 800afd6:	f000 fa3d 	bl	800b454 <xQueueGenericCreate>
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d005      	beq.n	800afee <osSemaphoreCreate+0x56>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2200      	movs	r2, #0
 800afe6:	2100      	movs	r1, #0
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 fa8d 	bl	800b508 <xQueueGenericSend>
      return sema;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	e000      	b.n	800aff4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800aff2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b006:	2300      	movs	r3, #0
 800b008:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b010:	2380      	movs	r3, #128	; 0x80
 800b012:	e03a      	b.n	800b08a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b01e:	d103      	bne.n	800b028 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b024:	60fb      	str	r3, [r7, #12]
 800b026:	e009      	b.n	800b03c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d006      	beq.n	800b03c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <osSemaphoreWait+0x40>
      ticks = 1;
 800b038:	2301      	movs	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b03c:	f7ff ff33 	bl	800aea6 <inHandlerMode>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d017      	beq.n	800b076 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	461a      	mov	r2, r3
 800b04c:	2100      	movs	r1, #0
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fcf2 	bl	800ba38 <xQueueReceiveFromISR>
 800b054:	4603      	mov	r3, r0
 800b056:	2b01      	cmp	r3, #1
 800b058:	d001      	beq.n	800b05e <osSemaphoreWait+0x62>
      return osErrorOS;
 800b05a:	23ff      	movs	r3, #255	; 0xff
 800b05c:	e015      	b.n	800b08a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d011      	beq.n	800b088 <osSemaphoreWait+0x8c>
 800b064:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <osSemaphoreWait+0x98>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	e008      	b.n	800b088 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b076:	68f9      	ldr	r1, [r7, #12]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fbd1 	bl	800b820 <xQueueSemaphoreTake>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b01      	cmp	r3, #1
 800b082:	d001      	beq.n	800b088 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b084:	23ff      	movs	r3, #255	; 0xff
 800b086:	e000      	b.n	800b08a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	e000ed04 	.word	0xe000ed04

0800b098 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b0a8:	f7ff fefd 	bl	800aea6 <inHandlerMode>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d016      	beq.n	800b0e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b0b2:	f107 0308 	add.w	r3, r7, #8
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fb23 	bl	800b704 <xQueueGiveFromISR>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d001      	beq.n	800b0c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b0c4:	23ff      	movs	r3, #255	; 0xff
 800b0c6:	e017      	b.n	800b0f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d013      	beq.n	800b0f6 <osSemaphoreRelease+0x5e>
 800b0ce:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <osSemaphoreRelease+0x68>)
 800b0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	e00a      	b.n	800b0f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fa0e 	bl	800b508 <xQueueGenericSend>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d001      	beq.n	800b0f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b0f2:	23ff      	movs	r3, #255	; 0xff
 800b0f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b10c:	f7ff fecb 	bl	800aea6 <inHandlerMode>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b116:	2382      	movs	r3, #130	; 0x82
 800b118:	e003      	b.n	800b122 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fd0c 	bl	800bb38 <vQueueDelete>

  return osOK; 
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f103 0208 	add.w	r2, r3, #8
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f103 0208 	add.w	r2, r3, #8
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f103 0208 	add.w	r2, r3, #8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	1c5a      	adds	r2, r3, #1
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	601a      	str	r2, [r3, #0]
}
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1e2:	d103      	bne.n	800b1ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	e00c      	b.n	800b206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	e002      	b.n	800b1fa <vListInsert+0x2e>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	d2f6      	bcs.n	800b1f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
}
 800b232:	bf00      	nop
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6892      	ldr	r2, [r2, #8]
 800b254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6852      	ldr	r2, [r2, #4]
 800b25e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	429a      	cmp	r2, r3
 800b268:	d103      	bne.n	800b272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689a      	ldr	r2, [r3, #8]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
	...

0800b294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2be:	f001 fef1 	bl	800d0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2ce:	fb01 f303 	mul.w	r3, r1, r3
 800b2d2:	441a      	add	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2f4:	fb01 f303 	mul.w	r3, r1, r3
 800b2f8:	441a      	add	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	22ff      	movs	r2, #255	; 0xff
 800b302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	22ff      	movs	r2, #255	; 0xff
 800b30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d114      	bne.n	800b33e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01a      	beq.n	800b352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3310      	adds	r3, #16
 800b320:	4618      	mov	r0, r3
 800b322:	f001 f9af 	bl	800c684 <xTaskRemoveFromEventList>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d012      	beq.n	800b352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b32c:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <xQueueGenericReset+0xcc>)
 800b32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	e009      	b.n	800b352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3310      	adds	r3, #16
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff fef1 	bl	800b12a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3324      	adds	r3, #36	; 0x24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff feec 	bl	800b12a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b352:	f001 fed7 	bl	800d104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b356:	2301      	movs	r3, #1
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	e000ed04 	.word	0xe000ed04

0800b364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08e      	sub	sp, #56	; 0x38
 800b368:	af02      	add	r7, sp, #8
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b38a:	bf00      	nop
 800b38c:	e7fe      	b.n	800b38c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <xQueueGenericCreateStatic+0x52>
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <xQueueGenericCreateStatic+0x56>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <xQueueGenericCreateStatic+0x58>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10a      	bne.n	800b3d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	623b      	str	r3, [r7, #32]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <xQueueGenericCreateStatic+0x7e>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <xQueueGenericCreateStatic+0x82>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueGenericCreateStatic+0x84>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61fb      	str	r3, [r7, #28]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b402:	2348      	movs	r3, #72	; 0x48
 800b404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b48      	cmp	r3, #72	; 0x48
 800b40a:	d00a      	beq.n	800b422 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	61bb      	str	r3, [r7, #24]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b422:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00d      	beq.n	800b44a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4613      	mov	r3, r2
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	68b9      	ldr	r1, [r7, #8]
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f83f 	bl	800b4c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3730      	adds	r7, #48	; 0x30
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08a      	sub	sp, #40	; 0x28
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	4613      	mov	r3, r2
 800b460:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	613b      	str	r3, [r7, #16]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	3348      	adds	r3, #72	; 0x48
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 ff2b 	bl	800d2e8 <pvPortMalloc>
 800b492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d011      	beq.n	800b4be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	3348      	adds	r3, #72	; 0x48
 800b4a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4ac:	79fa      	ldrb	r2, [r7, #7]
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 f805 	bl	800b4c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4be:	69bb      	ldr	r3, [r7, #24]
	}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d103      	bne.n	800b4e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	e002      	b.n	800b4ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	69b8      	ldr	r0, [r7, #24]
 800b4fa:	f7ff fecb 	bl	800b294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08e      	sub	sp, #56	; 0x38
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b516:	2300      	movs	r3, #0
 800b518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xQueueGenericSend+0x32>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d103      	bne.n	800b548 <xQueueGenericSend+0x40>
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <xQueueGenericSend+0x44>
 800b548:	2301      	movs	r3, #1
 800b54a:	e000      	b.n	800b54e <xQueueGenericSend+0x46>
 800b54c:	2300      	movs	r3, #0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10a      	bne.n	800b568 <xQueueGenericSend+0x60>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d103      	bne.n	800b576 <xQueueGenericSend+0x6e>
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b572:	2b01      	cmp	r3, #1
 800b574:	d101      	bne.n	800b57a <xQueueGenericSend+0x72>
 800b576:	2301      	movs	r3, #1
 800b578:	e000      	b.n	800b57c <xQueueGenericSend+0x74>
 800b57a:	2300      	movs	r3, #0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <xQueueGenericSend+0x8e>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	623b      	str	r3, [r7, #32]
}
 800b592:	bf00      	nop
 800b594:	e7fe      	b.n	800b594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b596:	f001 fa35 	bl	800ca04 <xTaskGetSchedulerState>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <xQueueGenericSend+0x9e>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <xQueueGenericSend+0xa2>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e000      	b.n	800b5ac <xQueueGenericSend+0xa4>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	61fb      	str	r3, [r7, #28]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5c6:	f001 fd6d 	bl	800d0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d302      	bcc.n	800b5dc <xQueueGenericSend+0xd4>
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d129      	bne.n	800b630 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5e2:	f000 fae4 	bl	800bbae <prvCopyDataToQueue>
 800b5e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d010      	beq.n	800b612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	3324      	adds	r3, #36	; 0x24
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 f845 	bl	800c684 <xTaskRemoveFromEventList>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d013      	beq.n	800b628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b600:	4b3f      	ldr	r3, [pc, #252]	; (800b700 <xQueueGenericSend+0x1f8>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	e00a      	b.n	800b628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b614:	2b00      	cmp	r3, #0
 800b616:	d007      	beq.n	800b628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b618:	4b39      	ldr	r3, [pc, #228]	; (800b700 <xQueueGenericSend+0x1f8>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b628:	f001 fd6c 	bl	800d104 <vPortExitCritical>
				return pdPASS;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e063      	b.n	800b6f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d103      	bne.n	800b63e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b636:	f001 fd65 	bl	800d104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	e05c      	b.n	800b6f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b644:	f107 0314 	add.w	r3, r7, #20
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 f87d 	bl	800c748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b64e:	2301      	movs	r3, #1
 800b650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b652:	f001 fd57 	bl	800d104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b656:	f000 fe2d 	bl	800c2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b65a:	f001 fd23 	bl	800d0a4 <vPortEnterCritical>
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b664:	b25b      	sxtb	r3, r3
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b66a:	d103      	bne.n	800b674 <xQueueGenericSend+0x16c>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b67a:	b25b      	sxtb	r3, r3
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b680:	d103      	bne.n	800b68a <xQueueGenericSend+0x182>
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b68a:	f001 fd3b 	bl	800d104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b68e:	1d3a      	adds	r2, r7, #4
 800b690:	f107 0314 	add.w	r3, r7, #20
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f001 f86c 	bl	800c774 <xTaskCheckForTimeOut>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d124      	bne.n	800b6ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6a4:	f000 fb7b 	bl	800bd9e <prvIsQueueFull>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d018      	beq.n	800b6e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	3310      	adds	r3, #16
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 ffc0 	bl	800c63c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6be:	f000 fb06 	bl	800bcce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6c2:	f000 fe05 	bl	800c2d0 <xTaskResumeAll>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f47f af7c 	bne.w	800b5c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b6ce:	4b0c      	ldr	r3, [pc, #48]	; (800b700 <xQueueGenericSend+0x1f8>)
 800b6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	e772      	b.n	800b5c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e2:	f000 faf4 	bl	800bcce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6e6:	f000 fdf3 	bl	800c2d0 <xTaskResumeAll>
 800b6ea:	e76c      	b.n	800b5c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ee:	f000 faee 	bl	800bcce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6f2:	f000 fded 	bl	800c2d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b6f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3738      	adds	r7, #56	; 0x38
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b08e      	sub	sp, #56	; 0x38
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71c:	f383 8811 	msr	BASEPRI, r3
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	623b      	str	r3, [r7, #32]
}
 800b72a:	bf00      	nop
 800b72c:	e7fe      	b.n	800b72c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <xQueueGiveFromISR+0x48>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	61fb      	str	r3, [r7, #28]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d103      	bne.n	800b75c <xQueueGiveFromISR+0x58>
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <xQueueGiveFromISR+0x5c>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <xQueueGiveFromISR+0x5e>
 800b760:	2300      	movs	r3, #0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10a      	bne.n	800b77c <xQueueGiveFromISR+0x78>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	61bb      	str	r3, [r7, #24]
}
 800b778:	bf00      	nop
 800b77a:	e7fe      	b.n	800b77a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b77c:	f001 fd74 	bl	800d268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b780:	f3ef 8211 	mrs	r2, BASEPRI
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	617a      	str	r2, [r7, #20]
 800b796:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b798:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d22b      	bcs.n	800b804 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b7be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7c6:	d112      	bne.n	800b7ee <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d016      	beq.n	800b7fe <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	3324      	adds	r3, #36	; 0x24
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 ff55 	bl	800c684 <xTaskRemoveFromEventList>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00e      	beq.n	800b7fe <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00b      	beq.n	800b7fe <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e007      	b.n	800b7fe <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	b25a      	sxtb	r2, r3
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b7fe:	2301      	movs	r3, #1
 800b800:	637b      	str	r3, [r7, #52]	; 0x34
 800b802:	e001      	b.n	800b808 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b804:	2300      	movs	r3, #0
 800b806:	637b      	str	r3, [r7, #52]	; 0x34
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b816:	4618      	mov	r0, r3
 800b818:	3738      	adds	r7, #56	; 0x38
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08e      	sub	sp, #56	; 0x38
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b82a:	2300      	movs	r3, #0
 800b82c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b832:	2300      	movs	r3, #0
 800b834:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	623b      	str	r3, [r7, #32]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	61fb      	str	r3, [r7, #28]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b870:	f001 f8c8 	bl	800ca04 <xTaskGetSchedulerState>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <xQueueSemaphoreTake+0x60>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <xQueueSemaphoreTake+0x64>
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <xQueueSemaphoreTake+0x66>
 800b884:	2300      	movs	r3, #0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	61bb      	str	r3, [r7, #24]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8a0:	f001 fc00 	bl	800d0a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d024      	beq.n	800b8fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	1e5a      	subs	r2, r3, #1
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d104      	bne.n	800b8ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b8c0:	f001 fa48 	bl	800cd54 <pvTaskIncrementMutexHeldCount>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00f      	beq.n	800b8f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	3310      	adds	r3, #16
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fed4 	bl	800c684 <xTaskRemoveFromEventList>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8e2:	4b54      	ldr	r3, [pc, #336]	; (800ba34 <xQueueSemaphoreTake+0x214>)
 800b8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8f2:	f001 fc07 	bl	800d104 <vPortExitCritical>
				return pdPASS;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e097      	b.n	800ba2a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d111      	bne.n	800b924 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	617b      	str	r3, [r7, #20]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b91c:	f001 fbf2 	bl	800d104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b920:	2300      	movs	r3, #0
 800b922:	e082      	b.n	800ba2a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 ff0a 	bl	800c748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b938:	f001 fbe4 	bl	800d104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b93c:	f000 fcba 	bl	800c2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b940:	f001 fbb0 	bl	800d0a4 <vPortEnterCritical>
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b94a:	b25b      	sxtb	r3, r3
 800b94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b950:	d103      	bne.n	800b95a <xQueueSemaphoreTake+0x13a>
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b960:	b25b      	sxtb	r3, r3
 800b962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b966:	d103      	bne.n	800b970 <xQueueSemaphoreTake+0x150>
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b970:	f001 fbc8 	bl	800d104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b974:	463a      	mov	r2, r7
 800b976:	f107 030c 	add.w	r3, r7, #12
 800b97a:	4611      	mov	r1, r2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f000 fef9 	bl	800c774 <xTaskCheckForTimeOut>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d132      	bne.n	800b9ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b98a:	f000 f9f2 	bl	800bd72 <prvIsQueueEmpty>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d026      	beq.n	800b9e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d109      	bne.n	800b9b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b99c:	f001 fb82 	bl	800d0a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f001 f84b 	bl	800ca40 <xTaskPriorityInherit>
 800b9aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b9ac:	f001 fbaa 	bl	800d104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	3324      	adds	r3, #36	; 0x24
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fe3f 	bl	800c63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9c0:	f000 f985 	bl	800bcce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9c4:	f000 fc84 	bl	800c2d0 <xTaskResumeAll>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f47f af68 	bne.w	800b8a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b9d0:	4b18      	ldr	r3, [pc, #96]	; (800ba34 <xQueueSemaphoreTake+0x214>)
 800b9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	e75e      	b.n	800b8a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b9e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9e4:	f000 f973 	bl	800bcce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9e8:	f000 fc72 	bl	800c2d0 <xTaskResumeAll>
 800b9ec:	e758      	b.n	800b8a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b9ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9f0:	f000 f96d 	bl	800bcce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9f4:	f000 fc6c 	bl	800c2d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9fa:	f000 f9ba 	bl	800bd72 <prvIsQueueEmpty>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f43f af4d 	beq.w	800b8a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00d      	beq.n	800ba28 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ba0c:	f001 fb4a 	bl	800d0a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ba10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba12:	f000 f8b4 	bl	800bb7e <prvGetDisinheritPriorityAfterTimeout>
 800ba16:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 f90a 	bl	800cc38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ba24:	f001 fb6e 	bl	800d104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3738      	adds	r7, #56	; 0x38
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08e      	sub	sp, #56	; 0x38
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	623b      	str	r3, [r7, #32]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d103      	bne.n	800ba72 <xQueueReceiveFromISR+0x3a>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <xQueueReceiveFromISR+0x3e>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <xQueueReceiveFromISR+0x40>
 800ba76:	2300      	movs	r3, #0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	61fb      	str	r3, [r7, #28]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba92:	f001 fbe9 	bl	800d268 <vPortValidateInterruptPriority>
	__asm volatile
 800ba96:	f3ef 8211 	mrs	r2, BASEPRI
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	61ba      	str	r2, [r7, #24]
 800baac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800baae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	2b00      	cmp	r3, #0
 800babc:	d02f      	beq.n	800bb1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bacc:	f000 f8d9 	bl	800bc82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	1e5a      	subs	r2, r3, #1
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bae0:	d112      	bne.n	800bb08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d016      	beq.n	800bb18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	3310      	adds	r3, #16
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fdc8 	bl	800c684 <xTaskRemoveFromEventList>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00b      	beq.n	800bb18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	e007      	b.n	800bb18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	b25a      	sxtb	r2, r3
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1c:	e001      	b.n	800bb22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	637b      	str	r3, [r7, #52]	; 0x34
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f383 8811 	msr	BASEPRI, r3
}
 800bb2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3738      	adds	r7, #56	; 0x38
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <vQueueDelete+0x28>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	60bb      	str	r3, [r7, #8]
}
 800bb5c:	bf00      	nop
 800bb5e:	e7fe      	b.n	800bb5e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f000 f935 	bl	800bdd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d102      	bne.n	800bb76 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f001 fc85 	bl	800d480 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb7e:	b480      	push	{r7}
 800bb80:	b085      	sub	sp, #20
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f1c3 0307 	rsb	r3, r3, #7
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e001      	b.n	800bba0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bba0:	68fb      	ldr	r3, [r7, #12]
	}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b086      	sub	sp, #24
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10d      	bne.n	800bbe8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d14d      	bne.n	800bc70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 ffa7 	bl	800cb2c <xTaskPriorityDisinherit>
 800bbde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	609a      	str	r2, [r3, #8]
 800bbe6:	e043      	b.n	800bc70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d119      	bne.n	800bc22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6858      	ldr	r0, [r3, #4]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	68b9      	ldr	r1, [r7, #8]
 800bbfa:	f002 fb7a 	bl	800e2f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	441a      	add	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d32b      	bcc.n	800bc70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	605a      	str	r2, [r3, #4]
 800bc20:	e026      	b.n	800bc70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68d8      	ldr	r0, [r3, #12]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	f002 fb60 	bl	800e2f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	425b      	negs	r3, r3
 800bc3c:	441a      	add	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d207      	bcs.n	800bc5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689a      	ldr	r2, [r3, #8]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	425b      	negs	r3, r3
 800bc58:	441a      	add	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d105      	bne.n	800bc70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc78:	697b      	ldr	r3, [r7, #20]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d018      	beq.n	800bcc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68da      	ldr	r2, [r3, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9c:	441a      	add	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d303      	bcc.n	800bcb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68d9      	ldr	r1, [r3, #12]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6838      	ldr	r0, [r7, #0]
 800bcc2:	f002 fb16 	bl	800e2f2 <memcpy>
	}
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcd6:	f001 f9e5 	bl	800d0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bce0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bce2:	e011      	b.n	800bd08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d012      	beq.n	800bd12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 fcc7 	bl	800c684 <xTaskRemoveFromEventList>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcfc:	f000 fd9c 	bl	800c838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dce9      	bgt.n	800bce4 <prvUnlockQueue+0x16>
 800bd10:	e000      	b.n	800bd14 <prvUnlockQueue+0x46>
					break;
 800bd12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	22ff      	movs	r2, #255	; 0xff
 800bd18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd1c:	f001 f9f2 	bl	800d104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd20:	f001 f9c0 	bl	800d0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd2c:	e011      	b.n	800bd52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d012      	beq.n	800bd5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3310      	adds	r3, #16
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 fca2 	bl	800c684 <xTaskRemoveFromEventList>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd46:	f000 fd77 	bl	800c838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dce9      	bgt.n	800bd2e <prvUnlockQueue+0x60>
 800bd5a:	e000      	b.n	800bd5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	22ff      	movs	r2, #255	; 0xff
 800bd62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd66:	f001 f9cd 	bl	800d104 <vPortExitCritical>
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd7a:	f001 f993 	bl	800d0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d102      	bne.n	800bd8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd86:	2301      	movs	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e001      	b.n	800bd90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd90:	f001 f9b8 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800bd94:	68fb      	ldr	r3, [r7, #12]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bda6:	f001 f97d 	bl	800d0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d102      	bne.n	800bdbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	e001      	b.n	800bdc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bdc0:	f001 f9a0 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e016      	b.n	800be0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bdde:	4a10      	ldr	r2, [pc, #64]	; (800be20 <vQueueUnregisterQueue+0x50>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d10b      	bne.n	800be06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bdee:	4a0c      	ldr	r2, [pc, #48]	; (800be20 <vQueueUnregisterQueue+0x50>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bdf8:	4a09      	ldr	r2, [pc, #36]	; (800be20 <vQueueUnregisterQueue+0x50>)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	4413      	add	r3, r2
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]
				break;
 800be04:	e006      	b.n	800be14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b07      	cmp	r3, #7
 800be10:	d9e5      	bls.n	800bdde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	20001eec 	.word	0x20001eec

0800be24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08e      	sub	sp, #56	; 0x38
 800be28:	af04      	add	r7, sp, #16
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <xTaskCreateStatic+0x2a>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	623b      	str	r3, [r7, #32]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10a      	bne.n	800be6a <xTaskCreateStatic+0x46>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	61fb      	str	r3, [r7, #28]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be6a:	23a0      	movs	r3, #160	; 0xa0
 800be6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	2ba0      	cmp	r3, #160	; 0xa0
 800be72:	d00a      	beq.n	800be8a <xTaskCreateStatic+0x66>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	61bb      	str	r3, [r7, #24]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d01e      	beq.n	800bed0 <xTaskCreateStatic+0xac>
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01b      	beq.n	800bed0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	2202      	movs	r2, #2
 800bea6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800beaa:	2300      	movs	r3, #0
 800beac:	9303      	str	r3, [sp, #12]
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	9302      	str	r3, [sp, #8]
 800beb2:	f107 0314 	add.w	r3, r7, #20
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f850 	bl	800bf68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beca:	f000 f8eb 	bl	800c0a4 <prvAddNewTaskToReadyList>
 800bece:	e001      	b.n	800bed4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bed4:	697b      	ldr	r3, [r7, #20]
	}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3728      	adds	r7, #40	; 0x28
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b08c      	sub	sp, #48	; 0x30
 800bee2:	af04      	add	r7, sp, #16
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	603b      	str	r3, [r7, #0]
 800beea:	4613      	mov	r3, r2
 800beec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beee:	88fb      	ldrh	r3, [r7, #6]
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f001 f9f8 	bl	800d2e8 <pvPortMalloc>
 800bef8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf00:	20a0      	movs	r0, #160	; 0xa0
 800bf02:	f001 f9f1 	bl	800d2e8 <pvPortMalloc>
 800bf06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	631a      	str	r2, [r3, #48]	; 0x30
 800bf14:	e005      	b.n	800bf22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf16:	6978      	ldr	r0, [r7, #20]
 800bf18:	f001 fab2 	bl	800d480 <vPortFree>
 800bf1c:	e001      	b.n	800bf22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d017      	beq.n	800bf58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf30:	88fa      	ldrh	r2, [r7, #6]
 800bf32:	2300      	movs	r3, #0
 800bf34:	9303      	str	r3, [sp, #12]
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f000 f80e 	bl	800bf68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf4c:	69f8      	ldr	r0, [r7, #28]
 800bf4e:	f000 f8a9 	bl	800c0a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf52:	2301      	movs	r3, #1
 800bf54:	61bb      	str	r3, [r7, #24]
 800bf56:	e002      	b.n	800bf5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf5e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3720      	adds	r7, #32
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
 800bf74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf80:	3b01      	subs	r3, #1
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	f023 0307 	bic.w	r3, r3, #7
 800bf8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	617b      	str	r3, [r7, #20]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d01f      	beq.n	800bff6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	e012      	b.n	800bfe2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	7819      	ldrb	r1, [r3, #0]
 800bfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	4413      	add	r3, r2
 800bfca:	3334      	adds	r3, #52	; 0x34
 800bfcc:	460a      	mov	r2, r1
 800bfce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	2b0f      	cmp	r3, #15
 800bfe6:	d9e9      	bls.n	800bfbc <prvInitialiseNewTask+0x54>
 800bfe8:	e000      	b.n	800bfec <prvInitialiseNewTask+0x84>
			{
				break;
 800bfea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bff4:	e003      	b.n	800bffe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	2b06      	cmp	r3, #6
 800c002:	d901      	bls.n	800c008 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c004:	2306      	movs	r3, #6
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c012:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	2200      	movs	r2, #0
 800c018:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff f8a3 	bl	800b16a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	3318      	adds	r3, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff f89e 	bl	800b16a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	f1c3 0207 	rsb	r2, r3, #7
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c042:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	334c      	adds	r3, #76	; 0x4c
 800c058:	224c      	movs	r2, #76	; 0x4c
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f002 f8b8 	bl	800e1d2 <memset>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	4a0c      	ldr	r2, [pc, #48]	; (800c098 <prvInitialiseNewTask+0x130>)
 800c066:	651a      	str	r2, [r3, #80]	; 0x50
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	4a0c      	ldr	r2, [pc, #48]	; (800c09c <prvInitialiseNewTask+0x134>)
 800c06c:	655a      	str	r2, [r3, #84]	; 0x54
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	4a0b      	ldr	r2, [pc, #44]	; (800c0a0 <prvInitialiseNewTask+0x138>)
 800c072:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	68f9      	ldr	r1, [r7, #12]
 800c078:	69b8      	ldr	r0, [r7, #24]
 800c07a:	f000 fee5 	bl	800ce48 <pxPortInitialiseStack>
 800c07e:	4602      	mov	r2, r0
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c08e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c090:	bf00      	nop
 800c092:	3720      	adds	r7, #32
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20005c80 	.word	0x20005c80
 800c09c:	20005ce8 	.word	0x20005ce8
 800c0a0:	20005d50 	.word	0x20005d50

0800c0a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0ac:	f000 fffa 	bl	800d0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0b0:	4b2a      	ldr	r3, [pc, #168]	; (800c15c <prvAddNewTaskToReadyList+0xb8>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	4a29      	ldr	r2, [pc, #164]	; (800c15c <prvAddNewTaskToReadyList+0xb8>)
 800c0b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0ba:	4b29      	ldr	r3, [pc, #164]	; (800c160 <prvAddNewTaskToReadyList+0xbc>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d109      	bne.n	800c0d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0c2:	4a27      	ldr	r2, [pc, #156]	; (800c160 <prvAddNewTaskToReadyList+0xbc>)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0c8:	4b24      	ldr	r3, [pc, #144]	; (800c15c <prvAddNewTaskToReadyList+0xb8>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d110      	bne.n	800c0f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0d0:	f000 fbd6 	bl	800c880 <prvInitialiseTaskLists>
 800c0d4:	e00d      	b.n	800c0f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0d6:	4b23      	ldr	r3, [pc, #140]	; (800c164 <prvAddNewTaskToReadyList+0xc0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d109      	bne.n	800c0f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0de:	4b20      	ldr	r3, [pc, #128]	; (800c160 <prvAddNewTaskToReadyList+0xbc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d802      	bhi.n	800c0f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0ec:	4a1c      	ldr	r2, [pc, #112]	; (800c160 <prvAddNewTaskToReadyList+0xbc>)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0f2:	4b1d      	ldr	r3, [pc, #116]	; (800c168 <prvAddNewTaskToReadyList+0xc4>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <prvAddNewTaskToReadyList+0xc4>)
 800c0fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	2201      	movs	r2, #1
 800c102:	409a      	lsls	r2, r3
 800c104:	4b19      	ldr	r3, [pc, #100]	; (800c16c <prvAddNewTaskToReadyList+0xc8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4313      	orrs	r3, r2
 800c10a:	4a18      	ldr	r2, [pc, #96]	; (800c16c <prvAddNewTaskToReadyList+0xc8>)
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4a15      	ldr	r2, [pc, #84]	; (800c170 <prvAddNewTaskToReadyList+0xcc>)
 800c11c:	441a      	add	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3304      	adds	r3, #4
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f7ff f82d 	bl	800b184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c12a:	f000 ffeb 	bl	800d104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c12e:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <prvAddNewTaskToReadyList+0xc0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00e      	beq.n	800c154 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c136:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <prvAddNewTaskToReadyList+0xbc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	429a      	cmp	r2, r3
 800c142:	d207      	bcs.n	800c154 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <prvAddNewTaskToReadyList+0xd0>)
 800c146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	2000202c 	.word	0x2000202c
 800c160:	20001f2c 	.word	0x20001f2c
 800c164:	20002038 	.word	0x20002038
 800c168:	20002048 	.word	0x20002048
 800c16c:	20002034 	.word	0x20002034
 800c170:	20001f30 	.word	0x20001f30
 800c174:	e000ed04 	.word	0xe000ed04

0800c178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c180:	2300      	movs	r3, #0
 800c182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d017      	beq.n	800c1ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c18a:	4b13      	ldr	r3, [pc, #76]	; (800c1d8 <vTaskDelay+0x60>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00a      	beq.n	800c1a8 <vTaskDelay+0x30>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	60bb      	str	r3, [r7, #8]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1a8:	f000 f884 	bl	800c2b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fde4 	bl	800cd7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1b4:	f000 f88c 	bl	800c2d0 <xTaskResumeAll>
 800c1b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d107      	bne.n	800c1d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1c0:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <vTaskDelay+0x64>)
 800c1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1d0:	bf00      	nop
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	20002054 	.word	0x20002054
 800c1dc:	e000ed04 	.word	0xe000ed04

0800c1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08a      	sub	sp, #40	; 0x28
 800c1e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1ee:	463a      	mov	r2, r7
 800c1f0:	1d39      	adds	r1, r7, #4
 800c1f2:	f107 0308 	add.w	r3, r7, #8
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7f5 fc14 	bl	8001a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	9202      	str	r2, [sp, #8]
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	2300      	movs	r3, #0
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	2300      	movs	r3, #0
 800c20c:	460a      	mov	r2, r1
 800c20e:	4921      	ldr	r1, [pc, #132]	; (800c294 <vTaskStartScheduler+0xb4>)
 800c210:	4821      	ldr	r0, [pc, #132]	; (800c298 <vTaskStartScheduler+0xb8>)
 800c212:	f7ff fe07 	bl	800be24 <xTaskCreateStatic>
 800c216:	4603      	mov	r3, r0
 800c218:	4a20      	ldr	r2, [pc, #128]	; (800c29c <vTaskStartScheduler+0xbc>)
 800c21a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c21c:	4b1f      	ldr	r3, [pc, #124]	; (800c29c <vTaskStartScheduler+0xbc>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c224:	2301      	movs	r3, #1
 800c226:	617b      	str	r3, [r7, #20]
 800c228:	e001      	b.n	800c22e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d11b      	bne.n	800c26c <vTaskStartScheduler+0x8c>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	613b      	str	r3, [r7, #16]
}
 800c246:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <vTaskStartScheduler+0xc0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	334c      	adds	r3, #76	; 0x4c
 800c24e:	4a15      	ldr	r2, [pc, #84]	; (800c2a4 <vTaskStartScheduler+0xc4>)
 800c250:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <vTaskStartScheduler+0xc8>)
 800c254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c25a:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <vTaskStartScheduler+0xcc>)
 800c25c:	2201      	movs	r2, #1
 800c25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c260:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <vTaskStartScheduler+0xd0>)
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c266:	f000 fe7b 	bl	800cf60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c26a:	e00e      	b.n	800c28a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c272:	d10a      	bne.n	800c28a <vTaskStartScheduler+0xaa>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	60fb      	str	r3, [r7, #12]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <vTaskStartScheduler+0xa8>
}
 800c28a:	bf00      	nop
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	080119f0 	.word	0x080119f0
 800c298:	0800c851 	.word	0x0800c851
 800c29c:	20002050 	.word	0x20002050
 800c2a0:	20001f2c 	.word	0x20001f2c
 800c2a4:	20000084 	.word	0x20000084
 800c2a8:	2000204c 	.word	0x2000204c
 800c2ac:	20002038 	.word	0x20002038
 800c2b0:	20002030 	.word	0x20002030

0800c2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <vTaskSuspendAll+0x18>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	4a03      	ldr	r2, [pc, #12]	; (800c2cc <vTaskSuspendAll+0x18>)
 800c2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2c2:	bf00      	nop
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	20002054 	.word	0x20002054

0800c2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2de:	4b41      	ldr	r3, [pc, #260]	; (800c3e4 <xTaskResumeAll+0x114>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xTaskResumeAll+0x2c>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	603b      	str	r3, [r7, #0]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2fc:	f000 fed2 	bl	800d0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c300:	4b38      	ldr	r3, [pc, #224]	; (800c3e4 <xTaskResumeAll+0x114>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3b01      	subs	r3, #1
 800c306:	4a37      	ldr	r2, [pc, #220]	; (800c3e4 <xTaskResumeAll+0x114>)
 800c308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c30a:	4b36      	ldr	r3, [pc, #216]	; (800c3e4 <xTaskResumeAll+0x114>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d161      	bne.n	800c3d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c312:	4b35      	ldr	r3, [pc, #212]	; (800c3e8 <xTaskResumeAll+0x118>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d05d      	beq.n	800c3d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c31a:	e02e      	b.n	800c37a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31c:	4b33      	ldr	r3, [pc, #204]	; (800c3ec <xTaskResumeAll+0x11c>)
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3318      	adds	r3, #24
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fe ff88 	bl	800b23e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3304      	adds	r3, #4
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe ff83 	bl	800b23e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	2201      	movs	r2, #1
 800c33e:	409a      	lsls	r2, r3
 800c340:	4b2b      	ldr	r3, [pc, #172]	; (800c3f0 <xTaskResumeAll+0x120>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4313      	orrs	r3, r2
 800c346:	4a2a      	ldr	r2, [pc, #168]	; (800c3f0 <xTaskResumeAll+0x120>)
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4a27      	ldr	r2, [pc, #156]	; (800c3f4 <xTaskResumeAll+0x124>)
 800c358:	441a      	add	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3304      	adds	r3, #4
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f7fe ff0f 	bl	800b184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <xTaskResumeAll+0x128>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	429a      	cmp	r2, r3
 800c372:	d302      	bcc.n	800c37a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c374:	4b21      	ldr	r3, [pc, #132]	; (800c3fc <xTaskResumeAll+0x12c>)
 800c376:	2201      	movs	r2, #1
 800c378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c37a:	4b1c      	ldr	r3, [pc, #112]	; (800c3ec <xTaskResumeAll+0x11c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1cc      	bne.n	800c31c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d001      	beq.n	800c38c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c388:	f000 fb1c 	bl	800c9c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c38c:	4b1c      	ldr	r3, [pc, #112]	; (800c400 <xTaskResumeAll+0x130>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d010      	beq.n	800c3ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c398:	f000 f836 	bl	800c408 <xTaskIncrementTick>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c3a2:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <xTaskResumeAll+0x12c>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1f1      	bne.n	800c398 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c3b4:	4b12      	ldr	r3, [pc, #72]	; (800c400 <xTaskResumeAll+0x130>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3ba:	4b10      	ldr	r3, [pc, #64]	; (800c3fc <xTaskResumeAll+0x12c>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <xTaskResumeAll+0x134>)
 800c3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3d6:	f000 fe95 	bl	800d104 <vPortExitCritical>

	return xAlreadyYielded;
 800c3da:	68bb      	ldr	r3, [r7, #8]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20002054 	.word	0x20002054
 800c3e8:	2000202c 	.word	0x2000202c
 800c3ec:	20001fec 	.word	0x20001fec
 800c3f0:	20002034 	.word	0x20002034
 800c3f4:	20001f30 	.word	0x20001f30
 800c3f8:	20001f2c 	.word	0x20001f2c
 800c3fc:	20002040 	.word	0x20002040
 800c400:	2000203c 	.word	0x2000203c
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c40e:	2300      	movs	r3, #0
 800c410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c412:	4b4e      	ldr	r3, [pc, #312]	; (800c54c <xTaskIncrementTick+0x144>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f040 808e 	bne.w	800c538 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c41c:	4b4c      	ldr	r3, [pc, #304]	; (800c550 <xTaskIncrementTick+0x148>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3301      	adds	r3, #1
 800c422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c424:	4a4a      	ldr	r2, [pc, #296]	; (800c550 <xTaskIncrementTick+0x148>)
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d120      	bne.n	800c472 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c430:	4b48      	ldr	r3, [pc, #288]	; (800c554 <xTaskIncrementTick+0x14c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <xTaskIncrementTick+0x48>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	603b      	str	r3, [r7, #0]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <xTaskIncrementTick+0x46>
 800c450:	4b40      	ldr	r3, [pc, #256]	; (800c554 <xTaskIncrementTick+0x14c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	4b40      	ldr	r3, [pc, #256]	; (800c558 <xTaskIncrementTick+0x150>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a3e      	ldr	r2, [pc, #248]	; (800c554 <xTaskIncrementTick+0x14c>)
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	4a3e      	ldr	r2, [pc, #248]	; (800c558 <xTaskIncrementTick+0x150>)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6013      	str	r3, [r2, #0]
 800c464:	4b3d      	ldr	r3, [pc, #244]	; (800c55c <xTaskIncrementTick+0x154>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3301      	adds	r3, #1
 800c46a:	4a3c      	ldr	r2, [pc, #240]	; (800c55c <xTaskIncrementTick+0x154>)
 800c46c:	6013      	str	r3, [r2, #0]
 800c46e:	f000 faa9 	bl	800c9c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c472:	4b3b      	ldr	r3, [pc, #236]	; (800c560 <xTaskIncrementTick+0x158>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d348      	bcc.n	800c50e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c47c:	4b35      	ldr	r3, [pc, #212]	; (800c554 <xTaskIncrementTick+0x14c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d104      	bne.n	800c490 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c486:	4b36      	ldr	r3, [pc, #216]	; (800c560 <xTaskIncrementTick+0x158>)
 800c488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c48c:	601a      	str	r2, [r3, #0]
					break;
 800c48e:	e03e      	b.n	800c50e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c490:	4b30      	ldr	r3, [pc, #192]	; (800c554 <xTaskIncrementTick+0x14c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d203      	bcs.n	800c4b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4a8:	4a2d      	ldr	r2, [pc, #180]	; (800c560 <xTaskIncrementTick+0x158>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4ae:	e02e      	b.n	800c50e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7fe fec2 	bl	800b23e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	3318      	adds	r3, #24
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe feb9 	bl	800b23e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	409a      	lsls	r2, r3
 800c4d4:	4b23      	ldr	r3, [pc, #140]	; (800c564 <xTaskIncrementTick+0x15c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	4a22      	ldr	r2, [pc, #136]	; (800c564 <xTaskIncrementTick+0x15c>)
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	4a1f      	ldr	r2, [pc, #124]	; (800c568 <xTaskIncrementTick+0x160>)
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	f7fe fe45 	bl	800b184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fe:	4b1b      	ldr	r3, [pc, #108]	; (800c56c <xTaskIncrementTick+0x164>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	429a      	cmp	r2, r3
 800c506:	d3b9      	bcc.n	800c47c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c50c:	e7b6      	b.n	800c47c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c50e:	4b17      	ldr	r3, [pc, #92]	; (800c56c <xTaskIncrementTick+0x164>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c514:	4914      	ldr	r1, [pc, #80]	; (800c568 <xTaskIncrementTick+0x160>)
 800c516:	4613      	mov	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	440b      	add	r3, r1
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d901      	bls.n	800c52a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c526:	2301      	movs	r3, #1
 800c528:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c52a:	4b11      	ldr	r3, [pc, #68]	; (800c570 <xTaskIncrementTick+0x168>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d007      	beq.n	800c542 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c532:	2301      	movs	r3, #1
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	e004      	b.n	800c542 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c538:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <xTaskIncrementTick+0x16c>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3301      	adds	r3, #1
 800c53e:	4a0d      	ldr	r2, [pc, #52]	; (800c574 <xTaskIncrementTick+0x16c>)
 800c540:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c542:	697b      	ldr	r3, [r7, #20]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3718      	adds	r7, #24
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	20002054 	.word	0x20002054
 800c550:	20002030 	.word	0x20002030
 800c554:	20001fe4 	.word	0x20001fe4
 800c558:	20001fe8 	.word	0x20001fe8
 800c55c:	20002044 	.word	0x20002044
 800c560:	2000204c 	.word	0x2000204c
 800c564:	20002034 	.word	0x20002034
 800c568:	20001f30 	.word	0x20001f30
 800c56c:	20001f2c 	.word	0x20001f2c
 800c570:	20002040 	.word	0x20002040
 800c574:	2000203c 	.word	0x2000203c

0800c578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c57e:	4b29      	ldr	r3, [pc, #164]	; (800c624 <vTaskSwitchContext+0xac>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c586:	4b28      	ldr	r3, [pc, #160]	; (800c628 <vTaskSwitchContext+0xb0>)
 800c588:	2201      	movs	r2, #1
 800c58a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c58c:	e044      	b.n	800c618 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c58e:	4b26      	ldr	r3, [pc, #152]	; (800c628 <vTaskSwitchContext+0xb0>)
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c594:	4b25      	ldr	r3, [pc, #148]	; (800c62c <vTaskSwitchContext+0xb4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	fab3 f383 	clz	r3, r3
 800c5a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	f1c3 031f 	rsb	r3, r3, #31
 800c5a8:	617b      	str	r3, [r7, #20]
 800c5aa:	4921      	ldr	r1, [pc, #132]	; (800c630 <vTaskSwitchContext+0xb8>)
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	440b      	add	r3, r1
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10a      	bne.n	800c5d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vTaskSwitchContext+0x5a>
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4a14      	ldr	r2, [pc, #80]	; (800c630 <vTaskSwitchContext+0xb8>)
 800c5e0:	4413      	add	r3, r2
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	605a      	str	r2, [r3, #4]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d104      	bne.n	800c604 <vTaskSwitchContext+0x8c>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	605a      	str	r2, [r3, #4]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	4a0a      	ldr	r2, [pc, #40]	; (800c634 <vTaskSwitchContext+0xbc>)
 800c60c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c60e:	4b09      	ldr	r3, [pc, #36]	; (800c634 <vTaskSwitchContext+0xbc>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	334c      	adds	r3, #76	; 0x4c
 800c614:	4a08      	ldr	r2, [pc, #32]	; (800c638 <vTaskSwitchContext+0xc0>)
 800c616:	6013      	str	r3, [r2, #0]
}
 800c618:	bf00      	nop
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	20002054 	.word	0x20002054
 800c628:	20002040 	.word	0x20002040
 800c62c:	20002034 	.word	0x20002034
 800c630:	20001f30 	.word	0x20001f30
 800c634:	20001f2c 	.word	0x20001f2c
 800c638:	20000084 	.word	0x20000084

0800c63c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10a      	bne.n	800c662 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	60fb      	str	r3, [r7, #12]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <vTaskPlaceOnEventList+0x44>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3318      	adds	r3, #24
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7fe fdae 	bl	800b1cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c670:	2101      	movs	r1, #1
 800c672:	6838      	ldr	r0, [r7, #0]
 800c674:	f000 fb82 	bl	800cd7c <prvAddCurrentTaskToDelayedList>
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20001f2c 	.word	0x20001f2c

0800c684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	60fb      	str	r3, [r7, #12]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe fdc2 	bl	800b23e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ba:	4b1d      	ldr	r3, [pc, #116]	; (800c730 <xTaskRemoveFromEventList+0xac>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d11c      	bne.n	800c6fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fdb9 	bl	800b23e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	409a      	lsls	r2, r3
 800c6d4:	4b17      	ldr	r3, [pc, #92]	; (800c734 <xTaskRemoveFromEventList+0xb0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	4a16      	ldr	r2, [pc, #88]	; (800c734 <xTaskRemoveFromEventList+0xb0>)
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4a13      	ldr	r2, [pc, #76]	; (800c738 <xTaskRemoveFromEventList+0xb4>)
 800c6ec:	441a      	add	r2, r3
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f7fe fd45 	bl	800b184 <vListInsertEnd>
 800c6fa:	e005      	b.n	800c708 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	3318      	adds	r3, #24
 800c700:	4619      	mov	r1, r3
 800c702:	480e      	ldr	r0, [pc, #56]	; (800c73c <xTaskRemoveFromEventList+0xb8>)
 800c704:	f7fe fd3e 	bl	800b184 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70c:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <xTaskRemoveFromEventList+0xbc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c712:	429a      	cmp	r2, r3
 800c714:	d905      	bls.n	800c722 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c716:	2301      	movs	r3, #1
 800c718:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c71a:	4b0a      	ldr	r3, [pc, #40]	; (800c744 <xTaskRemoveFromEventList+0xc0>)
 800c71c:	2201      	movs	r2, #1
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	e001      	b.n	800c726 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c722:	2300      	movs	r3, #0
 800c724:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c726:	697b      	ldr	r3, [r7, #20]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20002054 	.word	0x20002054
 800c734:	20002034 	.word	0x20002034
 800c738:	20001f30 	.word	0x20001f30
 800c73c:	20001fec 	.word	0x20001fec
 800c740:	20001f2c 	.word	0x20001f2c
 800c744:	20002040 	.word	0x20002040

0800c748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c750:	4b06      	ldr	r3, [pc, #24]	; (800c76c <vTaskInternalSetTimeOutState+0x24>)
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c758:	4b05      	ldr	r3, [pc, #20]	; (800c770 <vTaskInternalSetTimeOutState+0x28>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	605a      	str	r2, [r3, #4]
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	20002044 	.word	0x20002044
 800c770:	20002030 	.word	0x20002030

0800c774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10a      	bne.n	800c79a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	613b      	str	r3, [r7, #16]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	60fb      	str	r3, [r7, #12]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7b6:	f000 fc75 	bl	800d0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7ba:	4b1d      	ldr	r3, [pc, #116]	; (800c830 <xTaskCheckForTimeOut+0xbc>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	69ba      	ldr	r2, [r7, #24]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7d2:	d102      	bne.n	800c7da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	61fb      	str	r3, [r7, #28]
 800c7d8:	e023      	b.n	800c822 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	4b15      	ldr	r3, [pc, #84]	; (800c834 <xTaskCheckForTimeOut+0xc0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d007      	beq.n	800c7f6 <xTaskCheckForTimeOut+0x82>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	69ba      	ldr	r2, [r7, #24]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d302      	bcc.n	800c7f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	61fb      	str	r3, [r7, #28]
 800c7f4:	e015      	b.n	800c822 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d20b      	bcs.n	800c818 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff ff9b 	bl	800c748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
 800c816:	e004      	b.n	800c822 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	2200      	movs	r2, #0
 800c81c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c81e:	2301      	movs	r3, #1
 800c820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c822:	f000 fc6f 	bl	800d104 <vPortExitCritical>

	return xReturn;
 800c826:	69fb      	ldr	r3, [r7, #28]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3720      	adds	r7, #32
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	20002030 	.word	0x20002030
 800c834:	20002044 	.word	0x20002044

0800c838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c838:	b480      	push	{r7}
 800c83a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c83c:	4b03      	ldr	r3, [pc, #12]	; (800c84c <vTaskMissedYield+0x14>)
 800c83e:	2201      	movs	r2, #1
 800c840:	601a      	str	r2, [r3, #0]
}
 800c842:	bf00      	nop
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	20002040 	.word	0x20002040

0800c850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c858:	f000 f852 	bl	800c900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <prvIdleTask+0x28>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d9f9      	bls.n	800c858 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c864:	4b05      	ldr	r3, [pc, #20]	; (800c87c <prvIdleTask+0x2c>)
 800c866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c874:	e7f0      	b.n	800c858 <prvIdleTask+0x8>
 800c876:	bf00      	nop
 800c878:	20001f30 	.word	0x20001f30
 800c87c:	e000ed04 	.word	0xe000ed04

0800c880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c886:	2300      	movs	r3, #0
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	e00c      	b.n	800c8a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4a12      	ldr	r2, [pc, #72]	; (800c8e0 <prvInitialiseTaskLists+0x60>)
 800c898:	4413      	add	r3, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fc45 	bl	800b12a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b06      	cmp	r3, #6
 800c8aa:	d9ef      	bls.n	800c88c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8ac:	480d      	ldr	r0, [pc, #52]	; (800c8e4 <prvInitialiseTaskLists+0x64>)
 800c8ae:	f7fe fc3c 	bl	800b12a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8b2:	480d      	ldr	r0, [pc, #52]	; (800c8e8 <prvInitialiseTaskLists+0x68>)
 800c8b4:	f7fe fc39 	bl	800b12a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8b8:	480c      	ldr	r0, [pc, #48]	; (800c8ec <prvInitialiseTaskLists+0x6c>)
 800c8ba:	f7fe fc36 	bl	800b12a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8be:	480c      	ldr	r0, [pc, #48]	; (800c8f0 <prvInitialiseTaskLists+0x70>)
 800c8c0:	f7fe fc33 	bl	800b12a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8c4:	480b      	ldr	r0, [pc, #44]	; (800c8f4 <prvInitialiseTaskLists+0x74>)
 800c8c6:	f7fe fc30 	bl	800b12a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <prvInitialiseTaskLists+0x78>)
 800c8cc:	4a05      	ldr	r2, [pc, #20]	; (800c8e4 <prvInitialiseTaskLists+0x64>)
 800c8ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <prvInitialiseTaskLists+0x7c>)
 800c8d2:	4a05      	ldr	r2, [pc, #20]	; (800c8e8 <prvInitialiseTaskLists+0x68>)
 800c8d4:	601a      	str	r2, [r3, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20001f30 	.word	0x20001f30
 800c8e4:	20001fbc 	.word	0x20001fbc
 800c8e8:	20001fd0 	.word	0x20001fd0
 800c8ec:	20001fec 	.word	0x20001fec
 800c8f0:	20002000 	.word	0x20002000
 800c8f4:	20002018 	.word	0x20002018
 800c8f8:	20001fe4 	.word	0x20001fe4
 800c8fc:	20001fe8 	.word	0x20001fe8

0800c900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c906:	e019      	b.n	800c93c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c908:	f000 fbcc 	bl	800d0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c90c:	4b10      	ldr	r3, [pc, #64]	; (800c950 <prvCheckTasksWaitingTermination+0x50>)
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3304      	adds	r3, #4
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe fc90 	bl	800b23e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c91e:	4b0d      	ldr	r3, [pc, #52]	; (800c954 <prvCheckTasksWaitingTermination+0x54>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3b01      	subs	r3, #1
 800c924:	4a0b      	ldr	r2, [pc, #44]	; (800c954 <prvCheckTasksWaitingTermination+0x54>)
 800c926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c928:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <prvCheckTasksWaitingTermination+0x58>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3b01      	subs	r3, #1
 800c92e:	4a0a      	ldr	r2, [pc, #40]	; (800c958 <prvCheckTasksWaitingTermination+0x58>)
 800c930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c932:	f000 fbe7 	bl	800d104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f810 	bl	800c95c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c93c:	4b06      	ldr	r3, [pc, #24]	; (800c958 <prvCheckTasksWaitingTermination+0x58>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1e1      	bne.n	800c908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20002000 	.word	0x20002000
 800c954:	2000202c 	.word	0x2000202c
 800c958:	20002014 	.word	0x20002014

0800c95c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	334c      	adds	r3, #76	; 0x4c
 800c968:	4618      	mov	r0, r3
 800c96a:	f001 fc3f 	bl	800e1ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c974:	2b00      	cmp	r3, #0
 800c976:	d108      	bne.n	800c98a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 fd7f 	bl	800d480 <vPortFree>
				vPortFree( pxTCB );
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fd7c 	bl	800d480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c988:	e018      	b.n	800c9bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c990:	2b01      	cmp	r3, #1
 800c992:	d103      	bne.n	800c99c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fd73 	bl	800d480 <vPortFree>
	}
 800c99a:	e00f      	b.n	800c9bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d00a      	beq.n	800c9bc <prvDeleteTCB+0x60>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	60fb      	str	r3, [r7, #12]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <prvDeleteTCB+0x5e>
	}
 800c9bc:	bf00      	nop
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <prvResetNextTaskUnblockTime+0x38>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d104      	bne.n	800c9de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <prvResetNextTaskUnblockTime+0x3c>)
 800c9d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9dc:	e008      	b.n	800c9f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9de:	4b07      	ldr	r3, [pc, #28]	; (800c9fc <prvResetNextTaskUnblockTime+0x38>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	4a04      	ldr	r2, [pc, #16]	; (800ca00 <prvResetNextTaskUnblockTime+0x3c>)
 800c9ee:	6013      	str	r3, [r2, #0]
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20001fe4 	.word	0x20001fe4
 800ca00:	2000204c 	.word	0x2000204c

0800ca04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <xTaskGetSchedulerState+0x34>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca12:	2301      	movs	r3, #1
 800ca14:	607b      	str	r3, [r7, #4]
 800ca16:	e008      	b.n	800ca2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca18:	4b08      	ldr	r3, [pc, #32]	; (800ca3c <xTaskGetSchedulerState+0x38>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d102      	bne.n	800ca26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca20:	2302      	movs	r3, #2
 800ca22:	607b      	str	r3, [r7, #4]
 800ca24:	e001      	b.n	800ca2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca26:	2300      	movs	r3, #0
 800ca28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca2a:	687b      	ldr	r3, [r7, #4]
	}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	20002038 	.word	0x20002038
 800ca3c:	20002054 	.word	0x20002054

0800ca40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d05e      	beq.n	800cb14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5a:	4b31      	ldr	r3, [pc, #196]	; (800cb20 <xTaskPriorityInherit+0xe0>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d24e      	bcs.n	800cb02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	db06      	blt.n	800ca7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca6c:	4b2c      	ldr	r3, [pc, #176]	; (800cb20 <xTaskPriorityInherit+0xe0>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca72:	f1c3 0207 	rsb	r2, r3, #7
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	6959      	ldr	r1, [r3, #20]
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4a26      	ldr	r2, [pc, #152]	; (800cb24 <xTaskPriorityInherit+0xe4>)
 800ca8c:	4413      	add	r3, r2
 800ca8e:	4299      	cmp	r1, r3
 800ca90:	d12f      	bne.n	800caf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fbd1 	bl	800b23e <uxListRemove>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa6:	2201      	movs	r2, #1
 800caa8:	fa02 f303 	lsl.w	r3, r2, r3
 800caac:	43da      	mvns	r2, r3
 800caae:	4b1e      	ldr	r3, [pc, #120]	; (800cb28 <xTaskPriorityInherit+0xe8>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4013      	ands	r3, r2
 800cab4:	4a1c      	ldr	r2, [pc, #112]	; (800cb28 <xTaskPriorityInherit+0xe8>)
 800cab6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cab8:	4b19      	ldr	r3, [pc, #100]	; (800cb20 <xTaskPriorityInherit+0xe0>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac6:	2201      	movs	r2, #1
 800cac8:	409a      	lsls	r2, r3
 800caca:	4b17      	ldr	r3, [pc, #92]	; (800cb28 <xTaskPriorityInherit+0xe8>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4313      	orrs	r3, r2
 800cad0:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <xTaskPriorityInherit+0xe8>)
 800cad2:	6013      	str	r3, [r2, #0]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	4a10      	ldr	r2, [pc, #64]	; (800cb24 <xTaskPriorityInherit+0xe4>)
 800cae2:	441a      	add	r2, r3
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	3304      	adds	r3, #4
 800cae8:	4619      	mov	r1, r3
 800caea:	4610      	mov	r0, r2
 800caec:	f7fe fb4a 	bl	800b184 <vListInsertEnd>
 800caf0:	e004      	b.n	800cafc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caf2:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <xTaskPriorityInherit+0xe0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e008      	b.n	800cb14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb06:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <xTaskPriorityInherit+0xe0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d201      	bcs.n	800cb14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb10:	2301      	movs	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb14:	68fb      	ldr	r3, [r7, #12]
	}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	20001f2c 	.word	0x20001f2c
 800cb24:	20001f30 	.word	0x20001f30
 800cb28:	20002034 	.word	0x20002034

0800cb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d06e      	beq.n	800cc20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb42:	4b3a      	ldr	r3, [pc, #232]	; (800cc2c <xTaskPriorityDisinherit+0x100>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d00a      	beq.n	800cb62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	60fb      	str	r3, [r7, #12]
}
 800cb5e:	bf00      	nop
 800cb60:	e7fe      	b.n	800cb60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10a      	bne.n	800cb80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	60bb      	str	r3, [r7, #8]
}
 800cb7c:	bf00      	nop
 800cb7e:	e7fe      	b.n	800cb7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb84:	1e5a      	subs	r2, r3, #1
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d044      	beq.n	800cc20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d140      	bne.n	800cc20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fb4b 	bl	800b23e <uxListRemove>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d115      	bne.n	800cbda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb2:	491f      	ldr	r1, [pc, #124]	; (800cc30 <xTaskPriorityDisinherit+0x104>)
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	4413      	add	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xTaskPriorityDisinherit+0xae>
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc8:	2201      	movs	r2, #1
 800cbca:	fa02 f303 	lsl.w	r3, r2, r3
 800cbce:	43da      	mvns	r2, r3
 800cbd0:	4b18      	ldr	r3, [pc, #96]	; (800cc34 <xTaskPriorityDisinherit+0x108>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4013      	ands	r3, r2
 800cbd6:	4a17      	ldr	r2, [pc, #92]	; (800cc34 <xTaskPriorityDisinherit+0x108>)
 800cbd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	f1c3 0207 	rsb	r2, r3, #7
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	409a      	lsls	r2, r3
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <xTaskPriorityDisinherit+0x108>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	4a0d      	ldr	r2, [pc, #52]	; (800cc34 <xTaskPriorityDisinherit+0x108>)
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc04:	4613      	mov	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4413      	add	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4a08      	ldr	r2, [pc, #32]	; (800cc30 <xTaskPriorityDisinherit+0x104>)
 800cc0e:	441a      	add	r2, r3
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3304      	adds	r3, #4
 800cc14:	4619      	mov	r1, r3
 800cc16:	4610      	mov	r0, r2
 800cc18:	f7fe fab4 	bl	800b184 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc20:	697b      	ldr	r3, [r7, #20]
	}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20001f2c 	.word	0x20001f2c
 800cc30:	20001f30 	.word	0x20001f30
 800cc34:	20002034 	.word	0x20002034

0800cc38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc46:	2301      	movs	r3, #1
 800cc48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d077      	beq.n	800cd40 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60fb      	str	r3, [r7, #12]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d902      	bls.n	800cc7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	e002      	b.n	800cc84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc88:	69fa      	ldr	r2, [r7, #28]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d058      	beq.n	800cd40 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d153      	bne.n	800cd40 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc98:	4b2b      	ldr	r3, [pc, #172]	; (800cd48 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	69ba      	ldr	r2, [r7, #24]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d10a      	bne.n	800ccb8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60bb      	str	r3, [r7, #8]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	db04      	blt.n	800ccd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	f1c3 0207 	rsb	r2, r3, #7
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	6959      	ldr	r1, [r3, #20]
 800ccda:	693a      	ldr	r2, [r7, #16]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4a19      	ldr	r2, [pc, #100]	; (800cd4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cce6:	4413      	add	r3, r2
 800cce8:	4299      	cmp	r1, r3
 800ccea:	d129      	bne.n	800cd40 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe faa4 	bl	800b23e <uxListRemove>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	2201      	movs	r2, #1
 800cd02:	fa02 f303 	lsl.w	r3, r2, r3
 800cd06:	43da      	mvns	r2, r3
 800cd08:	4b11      	ldr	r3, [pc, #68]	; (800cd50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	4a10      	ldr	r2, [pc, #64]	; (800cd50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cd10:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd16:	2201      	movs	r2, #1
 800cd18:	409a      	lsls	r2, r3
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4a06      	ldr	r2, [pc, #24]	; (800cd4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cd32:	441a      	add	r2, r3
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f7fe fa22 	bl	800b184 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd40:	bf00      	nop
 800cd42:	3720      	adds	r7, #32
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20001f2c 	.word	0x20001f2c
 800cd4c:	20001f30 	.word	0x20001f30
 800cd50:	20002034 	.word	0x20002034

0800cd54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd58:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd60:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd66:	3201      	adds	r2, #1
 800cd68:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cd6a:	4b03      	ldr	r3, [pc, #12]	; (800cd78 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
	}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	20001f2c 	.word	0x20001f2c

0800cd7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd86:	4b29      	ldr	r3, [pc, #164]	; (800ce2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd8c:	4b28      	ldr	r3, [pc, #160]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3304      	adds	r3, #4
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7fe fa53 	bl	800b23e <uxListRemove>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10b      	bne.n	800cdb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cd9e:	4b24      	ldr	r3, [pc, #144]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda4:	2201      	movs	r2, #1
 800cda6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdaa:	43da      	mvns	r2, r3
 800cdac:	4b21      	ldr	r3, [pc, #132]	; (800ce34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	4a20      	ldr	r2, [pc, #128]	; (800ce34 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cdb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdbc:	d10a      	bne.n	800cdd4 <prvAddCurrentTaskToDelayedList+0x58>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d007      	beq.n	800cdd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdc4:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	4619      	mov	r1, r3
 800cdcc:	481a      	ldr	r0, [pc, #104]	; (800ce38 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cdce:	f7fe f9d9 	bl	800b184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cdd2:	e026      	b.n	800ce22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4413      	add	r3, r2
 800cdda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cddc:	4b14      	ldr	r3, [pc, #80]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d209      	bcs.n	800ce00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdec:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <prvAddCurrentTaskToDelayedList+0xc0>)
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f7fe f9e7 	bl	800b1cc <vListInsert>
}
 800cdfe:	e010      	b.n	800ce22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce00:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7fe f9dd 	bl	800b1cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce12:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d202      	bcs.n	800ce22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ce1c:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	6013      	str	r3, [r2, #0]
}
 800ce22:	bf00      	nop
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20002030 	.word	0x20002030
 800ce30:	20001f2c 	.word	0x20001f2c
 800ce34:	20002034 	.word	0x20002034
 800ce38:	20002018 	.word	0x20002018
 800ce3c:	20001fe8 	.word	0x20001fe8
 800ce40:	20001fe4 	.word	0x20001fe4
 800ce44:	2000204c 	.word	0x2000204c

0800ce48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	3b04      	subs	r3, #4
 800ce58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ce60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3b04      	subs	r3, #4
 800ce66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	f023 0201 	bic.w	r2, r3, #1
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3b04      	subs	r3, #4
 800ce76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce78:	4a0c      	ldr	r2, [pc, #48]	; (800ceac <pxPortInitialiseStack+0x64>)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3b14      	subs	r3, #20
 800ce82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3b04      	subs	r3, #4
 800ce8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f06f 0202 	mvn.w	r2, #2
 800ce96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	3b20      	subs	r3, #32
 800ce9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr
 800ceac:	0800ceb1 	.word	0x0800ceb1

0800ceb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ceba:	4b12      	ldr	r3, [pc, #72]	; (800cf04 <prvTaskExitError+0x54>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec2:	d00a      	beq.n	800ceda <prvTaskExitError+0x2a>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	60fb      	str	r3, [r7, #12]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <prvTaskExitError+0x28>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	60bb      	str	r3, [r7, #8]
}
 800ceec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ceee:	bf00      	nop
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0fc      	beq.n	800cef0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cef6:	bf00      	nop
 800cef8:	bf00      	nop
 800cefa:	3714      	adds	r7, #20
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	20000028 	.word	0x20000028
	...

0800cf10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf10:	4b07      	ldr	r3, [pc, #28]	; (800cf30 <pxCurrentTCBConst2>)
 800cf12:	6819      	ldr	r1, [r3, #0]
 800cf14:	6808      	ldr	r0, [r1, #0]
 800cf16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1a:	f380 8809 	msr	PSP, r0
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f04f 0000 	mov.w	r0, #0
 800cf26:	f380 8811 	msr	BASEPRI, r0
 800cf2a:	4770      	bx	lr
 800cf2c:	f3af 8000 	nop.w

0800cf30 <pxCurrentTCBConst2>:
 800cf30:	20001f2c 	.word	0x20001f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop

0800cf38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf38:	4808      	ldr	r0, [pc, #32]	; (800cf5c <prvPortStartFirstTask+0x24>)
 800cf3a:	6800      	ldr	r0, [r0, #0]
 800cf3c:	6800      	ldr	r0, [r0, #0]
 800cf3e:	f380 8808 	msr	MSP, r0
 800cf42:	f04f 0000 	mov.w	r0, #0
 800cf46:	f380 8814 	msr	CONTROL, r0
 800cf4a:	b662      	cpsie	i
 800cf4c:	b661      	cpsie	f
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	df00      	svc	0
 800cf58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf5a:	bf00      	nop
 800cf5c:	e000ed08 	.word	0xe000ed08

0800cf60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf66:	4b46      	ldr	r3, [pc, #280]	; (800d080 <xPortStartScheduler+0x120>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a46      	ldr	r2, [pc, #280]	; (800d084 <xPortStartScheduler+0x124>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d10a      	bne.n	800cf86 <xPortStartScheduler+0x26>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	613b      	str	r3, [r7, #16]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf86:	4b3e      	ldr	r3, [pc, #248]	; (800d080 <xPortStartScheduler+0x120>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a3f      	ldr	r2, [pc, #252]	; (800d088 <xPortStartScheduler+0x128>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d10a      	bne.n	800cfa6 <xPortStartScheduler+0x46>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60fb      	str	r3, [r7, #12]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cfa6:	4b39      	ldr	r3, [pc, #228]	; (800d08c <xPortStartScheduler+0x12c>)
 800cfa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	22ff      	movs	r2, #255	; 0xff
 800cfb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b31      	ldr	r3, [pc, #196]	; (800d090 <xPortStartScheduler+0x130>)
 800cfcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfce:	4b31      	ldr	r3, [pc, #196]	; (800d094 <xPortStartScheduler+0x134>)
 800cfd0:	2207      	movs	r2, #7
 800cfd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfd4:	e009      	b.n	800cfea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cfd6:	4b2f      	ldr	r3, [pc, #188]	; (800d094 <xPortStartScheduler+0x134>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	4a2d      	ldr	r2, [pc, #180]	; (800d094 <xPortStartScheduler+0x134>)
 800cfde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d0ef      	beq.n	800cfd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cff6:	4b27      	ldr	r3, [pc, #156]	; (800d094 <xPortStartScheduler+0x134>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f1c3 0307 	rsb	r3, r3, #7
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d00a      	beq.n	800d018 <xPortStartScheduler+0xb8>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	60bb      	str	r3, [r7, #8]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d018:	4b1e      	ldr	r3, [pc, #120]	; (800d094 <xPortStartScheduler+0x134>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	021b      	lsls	r3, r3, #8
 800d01e:	4a1d      	ldr	r2, [pc, #116]	; (800d094 <xPortStartScheduler+0x134>)
 800d020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d022:	4b1c      	ldr	r3, [pc, #112]	; (800d094 <xPortStartScheduler+0x134>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d02a:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <xPortStartScheduler+0x134>)
 800d02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	b2da      	uxtb	r2, r3
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d036:	4b18      	ldr	r3, [pc, #96]	; (800d098 <xPortStartScheduler+0x138>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a17      	ldr	r2, [pc, #92]	; (800d098 <xPortStartScheduler+0x138>)
 800d03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d042:	4b15      	ldr	r3, [pc, #84]	; (800d098 <xPortStartScheduler+0x138>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a14      	ldr	r2, [pc, #80]	; (800d098 <xPortStartScheduler+0x138>)
 800d048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d04e:	f000 f8dd 	bl	800d20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d052:	4b12      	ldr	r3, [pc, #72]	; (800d09c <xPortStartScheduler+0x13c>)
 800d054:	2200      	movs	r2, #0
 800d056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d058:	f000 f8fc 	bl	800d254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <xPortStartScheduler+0x140>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a0f      	ldr	r2, [pc, #60]	; (800d0a0 <xPortStartScheduler+0x140>)
 800d062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d068:	f7ff ff66 	bl	800cf38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d06c:	f7ff fa84 	bl	800c578 <vTaskSwitchContext>
	prvTaskExitError();
 800d070:	f7ff ff1e 	bl	800ceb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	e000ed00 	.word	0xe000ed00
 800d084:	410fc271 	.word	0x410fc271
 800d088:	410fc270 	.word	0x410fc270
 800d08c:	e000e400 	.word	0xe000e400
 800d090:	20002058 	.word	0x20002058
 800d094:	2000205c 	.word	0x2000205c
 800d098:	e000ed20 	.word	0xe000ed20
 800d09c:	20000028 	.word	0x20000028
 800d0a0:	e000ef34 	.word	0xe000ef34

0800d0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	607b      	str	r3, [r7, #4]
}
 800d0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0be:	4b0f      	ldr	r3, [pc, #60]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0c8:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <vPortEnterCritical+0x58>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d10f      	bne.n	800d0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0d0:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <vPortEnterCritical+0x5c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00a      	beq.n	800d0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	603b      	str	r3, [r7, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <vPortEnterCritical+0x4a>
	}
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	20000028 	.word	0x20000028
 800d100:	e000ed04 	.word	0xe000ed04

0800d104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d10a:	4b12      	ldr	r3, [pc, #72]	; (800d154 <vPortExitCritical+0x50>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <vPortExitCritical+0x24>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	607b      	str	r3, [r7, #4]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d128:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <vPortExitCritical+0x50>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	4a09      	ldr	r2, [pc, #36]	; (800d154 <vPortExitCritical+0x50>)
 800d130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <vPortExitCritical+0x50>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <vPortExitCritical+0x42>
 800d13a:	2300      	movs	r3, #0
 800d13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f383 8811 	msr	BASEPRI, r3
}
 800d144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20000028 	.word	0x20000028
	...

0800d160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d160:	f3ef 8009 	mrs	r0, PSP
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <pxCurrentTCBConst>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	f01e 0f10 	tst.w	lr, #16
 800d170:	bf08      	it	eq
 800d172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	6010      	str	r0, [r2, #0]
 800d17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d184:	f380 8811 	msr	BASEPRI, r0
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f7ff f9f2 	bl	800c578 <vTaskSwitchContext>
 800d194:	f04f 0000 	mov.w	r0, #0
 800d198:	f380 8811 	msr	BASEPRI, r0
 800d19c:	bc09      	pop	{r0, r3}
 800d19e:	6819      	ldr	r1, [r3, #0]
 800d1a0:	6808      	ldr	r0, [r1, #0]
 800d1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a6:	f01e 0f10 	tst.w	lr, #16
 800d1aa:	bf08      	it	eq
 800d1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1b0:	f380 8809 	msr	PSP, r0
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	f3af 8000 	nop.w

0800d1c0 <pxCurrentTCBConst>:
 800d1c0:	20001f2c 	.word	0x20001f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop

0800d1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	607b      	str	r3, [r7, #4]
}
 800d1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1e2:	f7ff f911 	bl	800c408 <xTaskIncrementTick>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <SysTick_Handler+0x40>)
 800d1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	f383 8811 	msr	BASEPRI, r3
}
 800d1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	e000ed04 	.word	0xe000ed04

0800d20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <vPortSetupTimerInterrupt+0x34>)
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d216:	4b0b      	ldr	r3, [pc, #44]	; (800d244 <vPortSetupTimerInterrupt+0x38>)
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d21c:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <vPortSetupTimerInterrupt+0x3c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a0a      	ldr	r2, [pc, #40]	; (800d24c <vPortSetupTimerInterrupt+0x40>)
 800d222:	fba2 2303 	umull	r2, r3, r2, r3
 800d226:	099b      	lsrs	r3, r3, #6
 800d228:	4a09      	ldr	r2, [pc, #36]	; (800d250 <vPortSetupTimerInterrupt+0x44>)
 800d22a:	3b01      	subs	r3, #1
 800d22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d22e:	4b04      	ldr	r3, [pc, #16]	; (800d240 <vPortSetupTimerInterrupt+0x34>)
 800d230:	2207      	movs	r2, #7
 800d232:	601a      	str	r2, [r3, #0]
}
 800d234:	bf00      	nop
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	e000e010 	.word	0xe000e010
 800d244:	e000e018 	.word	0xe000e018
 800d248:	20000004 	.word	0x20000004
 800d24c:	10624dd3 	.word	0x10624dd3
 800d250:	e000e014 	.word	0xe000e014

0800d254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d264 <vPortEnableVFP+0x10>
 800d258:	6801      	ldr	r1, [r0, #0]
 800d25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d25e:	6001      	str	r1, [r0, #0]
 800d260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d262:	bf00      	nop
 800d264:	e000ed88 	.word	0xe000ed88

0800d268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d26e:	f3ef 8305 	mrs	r3, IPSR
 800d272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b0f      	cmp	r3, #15
 800d278:	d914      	bls.n	800d2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d27a:	4a17      	ldr	r2, [pc, #92]	; (800d2d8 <vPortValidateInterruptPriority+0x70>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d284:	4b15      	ldr	r3, [pc, #84]	; (800d2dc <vPortValidateInterruptPriority+0x74>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	7afa      	ldrb	r2, [r7, #11]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d20a      	bcs.n	800d2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	607b      	str	r3, [r7, #4]
}
 800d2a0:	bf00      	nop
 800d2a2:	e7fe      	b.n	800d2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <vPortValidateInterruptPriority+0x78>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d2ac:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <vPortValidateInterruptPriority+0x7c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d90a      	bls.n	800d2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	603b      	str	r3, [r7, #0]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <vPortValidateInterruptPriority+0x60>
	}
 800d2ca:	bf00      	nop
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	e000e3f0 	.word	0xe000e3f0
 800d2dc:	20002058 	.word	0x20002058
 800d2e0:	e000ed0c 	.word	0xe000ed0c
 800d2e4:	2000205c 	.word	0x2000205c

0800d2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08a      	sub	sp, #40	; 0x28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d2f4:	f7fe ffde 	bl	800c2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d2f8:	4b5b      	ldr	r3, [pc, #364]	; (800d468 <pvPortMalloc+0x180>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d300:	f000 f920 	bl	800d544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d304:	4b59      	ldr	r3, [pc, #356]	; (800d46c <pvPortMalloc+0x184>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4013      	ands	r3, r2
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f040 8093 	bne.w	800d438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01d      	beq.n	800d354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d318:	2208      	movs	r2, #8
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4413      	add	r3, r2
 800d31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b00      	cmp	r3, #0
 800d328:	d014      	beq.n	800d354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f023 0307 	bic.w	r3, r3, #7
 800d330:	3308      	adds	r3, #8
 800d332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f003 0307 	and.w	r3, r3, #7
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00a      	beq.n	800d354 <pvPortMalloc+0x6c>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	617b      	str	r3, [r7, #20]
}
 800d350:	bf00      	nop
 800d352:	e7fe      	b.n	800d352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d06e      	beq.n	800d438 <pvPortMalloc+0x150>
 800d35a:	4b45      	ldr	r3, [pc, #276]	; (800d470 <pvPortMalloc+0x188>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	429a      	cmp	r2, r3
 800d362:	d869      	bhi.n	800d438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d364:	4b43      	ldr	r3, [pc, #268]	; (800d474 <pvPortMalloc+0x18c>)
 800d366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d368:	4b42      	ldr	r3, [pc, #264]	; (800d474 <pvPortMalloc+0x18c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d36e:	e004      	b.n	800d37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d903      	bls.n	800d38c <pvPortMalloc+0xa4>
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1f1      	bne.n	800d370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d38c:	4b36      	ldr	r3, [pc, #216]	; (800d468 <pvPortMalloc+0x180>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d392:	429a      	cmp	r2, r3
 800d394:	d050      	beq.n	800d438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2208      	movs	r2, #8
 800d39c:	4413      	add	r3, r2
 800d39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	1ad2      	subs	r2, r2, r3
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d91f      	bls.n	800d3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00a      	beq.n	800d3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	613b      	str	r3, [r7, #16]
}
 800d3dc:	bf00      	nop
 800d3de:	e7fe      	b.n	800d3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	1ad2      	subs	r2, r2, r3
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d3f2:	69b8      	ldr	r0, [r7, #24]
 800d3f4:	f000 f908 	bl	800d608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3f8:	4b1d      	ldr	r3, [pc, #116]	; (800d470 <pvPortMalloc+0x188>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <pvPortMalloc+0x188>)
 800d404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d406:	4b1a      	ldr	r3, [pc, #104]	; (800d470 <pvPortMalloc+0x188>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	4b1b      	ldr	r3, [pc, #108]	; (800d478 <pvPortMalloc+0x190>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d203      	bcs.n	800d41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d412:	4b17      	ldr	r3, [pc, #92]	; (800d470 <pvPortMalloc+0x188>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a18      	ldr	r2, [pc, #96]	; (800d478 <pvPortMalloc+0x190>)
 800d418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	4b13      	ldr	r3, [pc, #76]	; (800d46c <pvPortMalloc+0x184>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	431a      	orrs	r2, r3
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2200      	movs	r2, #0
 800d42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <pvPortMalloc+0x194>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3301      	adds	r3, #1
 800d434:	4a11      	ldr	r2, [pc, #68]	; (800d47c <pvPortMalloc+0x194>)
 800d436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d438:	f7fe ff4a 	bl	800c2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <pvPortMalloc+0x174>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <pvPortMalloc+0x172>
	return pvReturn;
 800d45c:	69fb      	ldr	r3, [r7, #28]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3728      	adds	r7, #40	; 0x28
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20005c68 	.word	0x20005c68
 800d46c:	20005c7c 	.word	0x20005c7c
 800d470:	20005c6c 	.word	0x20005c6c
 800d474:	20005c60 	.word	0x20005c60
 800d478:	20005c70 	.word	0x20005c70
 800d47c:	20005c74 	.word	0x20005c74

0800d480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d04d      	beq.n	800d52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d492:	2308      	movs	r3, #8
 800d494:	425b      	negs	r3, r3
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	4413      	add	r3, r2
 800d49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	4b24      	ldr	r3, [pc, #144]	; (800d538 <vPortFree+0xb8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10a      	bne.n	800d4c4 <vPortFree+0x44>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60fb      	str	r3, [r7, #12]
}
 800d4c0:	bf00      	nop
 800d4c2:	e7fe      	b.n	800d4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00a      	beq.n	800d4e2 <vPortFree+0x62>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	60bb      	str	r3, [r7, #8]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	4b14      	ldr	r3, [pc, #80]	; (800d538 <vPortFree+0xb8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d01e      	beq.n	800d52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d11a      	bne.n	800d52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <vPortFree+0xb8>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	43db      	mvns	r3, r3
 800d502:	401a      	ands	r2, r3
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d508:	f7fe fed4 	bl	800c2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	4b0a      	ldr	r3, [pc, #40]	; (800d53c <vPortFree+0xbc>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4413      	add	r3, r2
 800d516:	4a09      	ldr	r2, [pc, #36]	; (800d53c <vPortFree+0xbc>)
 800d518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d51a:	6938      	ldr	r0, [r7, #16]
 800d51c:	f000 f874 	bl	800d608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <vPortFree+0xc0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	4a06      	ldr	r2, [pc, #24]	; (800d540 <vPortFree+0xc0>)
 800d528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d52a:	f7fe fed1 	bl	800c2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d52e:	bf00      	nop
 800d530:	3718      	adds	r7, #24
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20005c7c 	.word	0x20005c7c
 800d53c:	20005c6c 	.word	0x20005c6c
 800d540:	20005c78 	.word	0x20005c78

0800d544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d54a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d550:	4b27      	ldr	r3, [pc, #156]	; (800d5f0 <prvHeapInit+0xac>)
 800d552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f003 0307 	and.w	r3, r3, #7
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00c      	beq.n	800d578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3307      	adds	r3, #7
 800d562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f023 0307 	bic.w	r3, r3, #7
 800d56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	4a1f      	ldr	r2, [pc, #124]	; (800d5f0 <prvHeapInit+0xac>)
 800d574:	4413      	add	r3, r2
 800d576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d57c:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <prvHeapInit+0xb0>)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d582:	4b1c      	ldr	r3, [pc, #112]	; (800d5f4 <prvHeapInit+0xb0>)
 800d584:	2200      	movs	r2, #0
 800d586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	4413      	add	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d590:	2208      	movs	r2, #8
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0307 	bic.w	r3, r3, #7
 800d59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4a15      	ldr	r2, [pc, #84]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5a6:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5ae:	4b12      	ldr	r3, [pc, #72]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5c4:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <prvHeapInit+0xb4>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <prvHeapInit+0xb8>)
 800d5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4a09      	ldr	r2, [pc, #36]	; (800d600 <prvHeapInit+0xbc>)
 800d5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5dc:	4b09      	ldr	r3, [pc, #36]	; (800d604 <prvHeapInit+0xc0>)
 800d5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5e2:	601a      	str	r2, [r3, #0]
}
 800d5e4:	bf00      	nop
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	20002060 	.word	0x20002060
 800d5f4:	20005c60 	.word	0x20005c60
 800d5f8:	20005c68 	.word	0x20005c68
 800d5fc:	20005c70 	.word	0x20005c70
 800d600:	20005c6c 	.word	0x20005c6c
 800d604:	20005c7c 	.word	0x20005c7c

0800d608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d610:	4b28      	ldr	r3, [pc, #160]	; (800d6b4 <prvInsertBlockIntoFreeList+0xac>)
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	e002      	b.n	800d61c <prvInsertBlockIntoFreeList+0x14>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	429a      	cmp	r2, r3
 800d624:	d8f7      	bhi.n	800d616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	4413      	add	r3, r2
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	429a      	cmp	r2, r3
 800d636:	d108      	bne.n	800d64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	441a      	add	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	68ba      	ldr	r2, [r7, #8]
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d118      	bne.n	800d690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d00d      	beq.n	800d686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	441a      	add	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	e008      	b.n	800d698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d686:	4b0c      	ldr	r3, [pc, #48]	; (800d6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	e003      	b.n	800d698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d002      	beq.n	800d6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6a6:	bf00      	nop
 800d6a8:	3714      	adds	r7, #20
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	20005c60 	.word	0x20005c60
 800d6b8:	20005c68 	.word	0x20005c68

0800d6bc <__cvt>:
 800d6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c0:	ec55 4b10 	vmov	r4, r5, d0
 800d6c4:	2d00      	cmp	r5, #0
 800d6c6:	460e      	mov	r6, r1
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	462b      	mov	r3, r5
 800d6cc:	bfbb      	ittet	lt
 800d6ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d6d2:	461d      	movlt	r5, r3
 800d6d4:	2300      	movge	r3, #0
 800d6d6:	232d      	movlt	r3, #45	; 0x2d
 800d6d8:	700b      	strb	r3, [r1, #0]
 800d6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d6e0:	4691      	mov	r9, r2
 800d6e2:	f023 0820 	bic.w	r8, r3, #32
 800d6e6:	bfbc      	itt	lt
 800d6e8:	4622      	movlt	r2, r4
 800d6ea:	4614      	movlt	r4, r2
 800d6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6f0:	d005      	beq.n	800d6fe <__cvt+0x42>
 800d6f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d6f6:	d100      	bne.n	800d6fa <__cvt+0x3e>
 800d6f8:	3601      	adds	r6, #1
 800d6fa:	2102      	movs	r1, #2
 800d6fc:	e000      	b.n	800d700 <__cvt+0x44>
 800d6fe:	2103      	movs	r1, #3
 800d700:	ab03      	add	r3, sp, #12
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	ab02      	add	r3, sp, #8
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	ec45 4b10 	vmov	d0, r4, r5
 800d70c:	4653      	mov	r3, sl
 800d70e:	4632      	mov	r2, r6
 800d710:	f000 fe86 	bl	800e420 <_dtoa_r>
 800d714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d718:	4607      	mov	r7, r0
 800d71a:	d102      	bne.n	800d722 <__cvt+0x66>
 800d71c:	f019 0f01 	tst.w	r9, #1
 800d720:	d022      	beq.n	800d768 <__cvt+0xac>
 800d722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d726:	eb07 0906 	add.w	r9, r7, r6
 800d72a:	d110      	bne.n	800d74e <__cvt+0x92>
 800d72c:	783b      	ldrb	r3, [r7, #0]
 800d72e:	2b30      	cmp	r3, #48	; 0x30
 800d730:	d10a      	bne.n	800d748 <__cvt+0x8c>
 800d732:	2200      	movs	r2, #0
 800d734:	2300      	movs	r3, #0
 800d736:	4620      	mov	r0, r4
 800d738:	4629      	mov	r1, r5
 800d73a:	f7f3 f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800d73e:	b918      	cbnz	r0, 800d748 <__cvt+0x8c>
 800d740:	f1c6 0601 	rsb	r6, r6, #1
 800d744:	f8ca 6000 	str.w	r6, [sl]
 800d748:	f8da 3000 	ldr.w	r3, [sl]
 800d74c:	4499      	add	r9, r3
 800d74e:	2200      	movs	r2, #0
 800d750:	2300      	movs	r3, #0
 800d752:	4620      	mov	r0, r4
 800d754:	4629      	mov	r1, r5
 800d756:	f7f3 f9d7 	bl	8000b08 <__aeabi_dcmpeq>
 800d75a:	b108      	cbz	r0, 800d760 <__cvt+0xa4>
 800d75c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d760:	2230      	movs	r2, #48	; 0x30
 800d762:	9b03      	ldr	r3, [sp, #12]
 800d764:	454b      	cmp	r3, r9
 800d766:	d307      	bcc.n	800d778 <__cvt+0xbc>
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d76c:	1bdb      	subs	r3, r3, r7
 800d76e:	4638      	mov	r0, r7
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	b004      	add	sp, #16
 800d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d778:	1c59      	adds	r1, r3, #1
 800d77a:	9103      	str	r1, [sp, #12]
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e7f0      	b.n	800d762 <__cvt+0xa6>

0800d780 <__exponent>:
 800d780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d782:	4603      	mov	r3, r0
 800d784:	2900      	cmp	r1, #0
 800d786:	bfb8      	it	lt
 800d788:	4249      	neglt	r1, r1
 800d78a:	f803 2b02 	strb.w	r2, [r3], #2
 800d78e:	bfb4      	ite	lt
 800d790:	222d      	movlt	r2, #45	; 0x2d
 800d792:	222b      	movge	r2, #43	; 0x2b
 800d794:	2909      	cmp	r1, #9
 800d796:	7042      	strb	r2, [r0, #1]
 800d798:	dd2a      	ble.n	800d7f0 <__exponent+0x70>
 800d79a:	f10d 0207 	add.w	r2, sp, #7
 800d79e:	4617      	mov	r7, r2
 800d7a0:	260a      	movs	r6, #10
 800d7a2:	4694      	mov	ip, r2
 800d7a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7a8:	fb06 1415 	mls	r4, r6, r5, r1
 800d7ac:	3430      	adds	r4, #48	; 0x30
 800d7ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	2c63      	cmp	r4, #99	; 0x63
 800d7b6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	dcf1      	bgt.n	800d7a2 <__exponent+0x22>
 800d7be:	3130      	adds	r1, #48	; 0x30
 800d7c0:	f1ac 0402 	sub.w	r4, ip, #2
 800d7c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d7c8:	1c41      	adds	r1, r0, #1
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	42ba      	cmp	r2, r7
 800d7ce:	d30a      	bcc.n	800d7e6 <__exponent+0x66>
 800d7d0:	f10d 0209 	add.w	r2, sp, #9
 800d7d4:	eba2 020c 	sub.w	r2, r2, ip
 800d7d8:	42bc      	cmp	r4, r7
 800d7da:	bf88      	it	hi
 800d7dc:	2200      	movhi	r2, #0
 800d7de:	4413      	add	r3, r2
 800d7e0:	1a18      	subs	r0, r3, r0
 800d7e2:	b003      	add	sp, #12
 800d7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d7ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d7ee:	e7ed      	b.n	800d7cc <__exponent+0x4c>
 800d7f0:	2330      	movs	r3, #48	; 0x30
 800d7f2:	3130      	adds	r1, #48	; 0x30
 800d7f4:	7083      	strb	r3, [r0, #2]
 800d7f6:	70c1      	strb	r1, [r0, #3]
 800d7f8:	1d03      	adds	r3, r0, #4
 800d7fa:	e7f1      	b.n	800d7e0 <__exponent+0x60>

0800d7fc <_printf_float>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	ed2d 8b02 	vpush	{d8}
 800d804:	b08d      	sub	sp, #52	; 0x34
 800d806:	460c      	mov	r4, r1
 800d808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d80c:	4616      	mov	r6, r2
 800d80e:	461f      	mov	r7, r3
 800d810:	4605      	mov	r5, r0
 800d812:	f000 fce7 	bl	800e1e4 <_localeconv_r>
 800d816:	f8d0 a000 	ldr.w	sl, [r0]
 800d81a:	4650      	mov	r0, sl
 800d81c:	f7f2 fd48 	bl	80002b0 <strlen>
 800d820:	2300      	movs	r3, #0
 800d822:	930a      	str	r3, [sp, #40]	; 0x28
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	9305      	str	r3, [sp, #20]
 800d828:	f8d8 3000 	ldr.w	r3, [r8]
 800d82c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d830:	3307      	adds	r3, #7
 800d832:	f023 0307 	bic.w	r3, r3, #7
 800d836:	f103 0208 	add.w	r2, r3, #8
 800d83a:	f8c8 2000 	str.w	r2, [r8]
 800d83e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	f8cd 8018 	str.w	r8, [sp, #24]
 800d84c:	ee08 0a10 	vmov	s16, r0
 800d850:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d858:	4b9e      	ldr	r3, [pc, #632]	; (800dad4 <_printf_float+0x2d8>)
 800d85a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d85e:	f7f3 f985 	bl	8000b6c <__aeabi_dcmpun>
 800d862:	bb88      	cbnz	r0, 800d8c8 <_printf_float+0xcc>
 800d864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d868:	4b9a      	ldr	r3, [pc, #616]	; (800dad4 <_printf_float+0x2d8>)
 800d86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d86e:	f7f3 f95f 	bl	8000b30 <__aeabi_dcmple>
 800d872:	bb48      	cbnz	r0, 800d8c8 <_printf_float+0xcc>
 800d874:	2200      	movs	r2, #0
 800d876:	2300      	movs	r3, #0
 800d878:	4640      	mov	r0, r8
 800d87a:	4649      	mov	r1, r9
 800d87c:	f7f3 f94e 	bl	8000b1c <__aeabi_dcmplt>
 800d880:	b110      	cbz	r0, 800d888 <_printf_float+0x8c>
 800d882:	232d      	movs	r3, #45	; 0x2d
 800d884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d888:	4a93      	ldr	r2, [pc, #588]	; (800dad8 <_printf_float+0x2dc>)
 800d88a:	4b94      	ldr	r3, [pc, #592]	; (800dadc <_printf_float+0x2e0>)
 800d88c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d890:	bf94      	ite	ls
 800d892:	4690      	movls	r8, r2
 800d894:	4698      	movhi	r8, r3
 800d896:	2303      	movs	r3, #3
 800d898:	6123      	str	r3, [r4, #16]
 800d89a:	9b05      	ldr	r3, [sp, #20]
 800d89c:	f023 0304 	bic.w	r3, r3, #4
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	f04f 0900 	mov.w	r9, #0
 800d8a6:	9700      	str	r7, [sp, #0]
 800d8a8:	4633      	mov	r3, r6
 800d8aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 f9da 	bl	800dc68 <_printf_common>
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f040 8090 	bne.w	800d9da <_printf_float+0x1de>
 800d8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8be:	b00d      	add	sp, #52	; 0x34
 800d8c0:	ecbd 8b02 	vpop	{d8}
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	4642      	mov	r2, r8
 800d8ca:	464b      	mov	r3, r9
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	f7f3 f94c 	bl	8000b6c <__aeabi_dcmpun>
 800d8d4:	b140      	cbz	r0, 800d8e8 <_printf_float+0xec>
 800d8d6:	464b      	mov	r3, r9
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	bfbc      	itt	lt
 800d8dc:	232d      	movlt	r3, #45	; 0x2d
 800d8de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d8e2:	4a7f      	ldr	r2, [pc, #508]	; (800dae0 <_printf_float+0x2e4>)
 800d8e4:	4b7f      	ldr	r3, [pc, #508]	; (800dae4 <_printf_float+0x2e8>)
 800d8e6:	e7d1      	b.n	800d88c <_printf_float+0x90>
 800d8e8:	6863      	ldr	r3, [r4, #4]
 800d8ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d8ee:	9206      	str	r2, [sp, #24]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	d13f      	bne.n	800d974 <_printf_float+0x178>
 800d8f4:	2306      	movs	r3, #6
 800d8f6:	6063      	str	r3, [r4, #4]
 800d8f8:	9b05      	ldr	r3, [sp, #20]
 800d8fa:	6861      	ldr	r1, [r4, #4]
 800d8fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d900:	2300      	movs	r3, #0
 800d902:	9303      	str	r3, [sp, #12]
 800d904:	ab0a      	add	r3, sp, #40	; 0x28
 800d906:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d90a:	ab09      	add	r3, sp, #36	; 0x24
 800d90c:	ec49 8b10 	vmov	d0, r8, r9
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	6022      	str	r2, [r4, #0]
 800d914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d918:	4628      	mov	r0, r5
 800d91a:	f7ff fecf 	bl	800d6bc <__cvt>
 800d91e:	9b06      	ldr	r3, [sp, #24]
 800d920:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d922:	2b47      	cmp	r3, #71	; 0x47
 800d924:	4680      	mov	r8, r0
 800d926:	d108      	bne.n	800d93a <_printf_float+0x13e>
 800d928:	1cc8      	adds	r0, r1, #3
 800d92a:	db02      	blt.n	800d932 <_printf_float+0x136>
 800d92c:	6863      	ldr	r3, [r4, #4]
 800d92e:	4299      	cmp	r1, r3
 800d930:	dd41      	ble.n	800d9b6 <_printf_float+0x1ba>
 800d932:	f1ab 0302 	sub.w	r3, fp, #2
 800d936:	fa5f fb83 	uxtb.w	fp, r3
 800d93a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d93e:	d820      	bhi.n	800d982 <_printf_float+0x186>
 800d940:	3901      	subs	r1, #1
 800d942:	465a      	mov	r2, fp
 800d944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d948:	9109      	str	r1, [sp, #36]	; 0x24
 800d94a:	f7ff ff19 	bl	800d780 <__exponent>
 800d94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d950:	1813      	adds	r3, r2, r0
 800d952:	2a01      	cmp	r2, #1
 800d954:	4681      	mov	r9, r0
 800d956:	6123      	str	r3, [r4, #16]
 800d958:	dc02      	bgt.n	800d960 <_printf_float+0x164>
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	07d2      	lsls	r2, r2, #31
 800d95e:	d501      	bpl.n	800d964 <_printf_float+0x168>
 800d960:	3301      	adds	r3, #1
 800d962:	6123      	str	r3, [r4, #16]
 800d964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d09c      	beq.n	800d8a6 <_printf_float+0xaa>
 800d96c:	232d      	movs	r3, #45	; 0x2d
 800d96e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d972:	e798      	b.n	800d8a6 <_printf_float+0xaa>
 800d974:	9a06      	ldr	r2, [sp, #24]
 800d976:	2a47      	cmp	r2, #71	; 0x47
 800d978:	d1be      	bne.n	800d8f8 <_printf_float+0xfc>
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1bc      	bne.n	800d8f8 <_printf_float+0xfc>
 800d97e:	2301      	movs	r3, #1
 800d980:	e7b9      	b.n	800d8f6 <_printf_float+0xfa>
 800d982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d986:	d118      	bne.n	800d9ba <_printf_float+0x1be>
 800d988:	2900      	cmp	r1, #0
 800d98a:	6863      	ldr	r3, [r4, #4]
 800d98c:	dd0b      	ble.n	800d9a6 <_printf_float+0x1aa>
 800d98e:	6121      	str	r1, [r4, #16]
 800d990:	b913      	cbnz	r3, 800d998 <_printf_float+0x19c>
 800d992:	6822      	ldr	r2, [r4, #0]
 800d994:	07d0      	lsls	r0, r2, #31
 800d996:	d502      	bpl.n	800d99e <_printf_float+0x1a2>
 800d998:	3301      	adds	r3, #1
 800d99a:	440b      	add	r3, r1
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9a0:	f04f 0900 	mov.w	r9, #0
 800d9a4:	e7de      	b.n	800d964 <_printf_float+0x168>
 800d9a6:	b913      	cbnz	r3, 800d9ae <_printf_float+0x1b2>
 800d9a8:	6822      	ldr	r2, [r4, #0]
 800d9aa:	07d2      	lsls	r2, r2, #31
 800d9ac:	d501      	bpl.n	800d9b2 <_printf_float+0x1b6>
 800d9ae:	3302      	adds	r3, #2
 800d9b0:	e7f4      	b.n	800d99c <_printf_float+0x1a0>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e7f2      	b.n	800d99c <_printf_float+0x1a0>
 800d9b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9bc:	4299      	cmp	r1, r3
 800d9be:	db05      	blt.n	800d9cc <_printf_float+0x1d0>
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	6121      	str	r1, [r4, #16]
 800d9c4:	07d8      	lsls	r0, r3, #31
 800d9c6:	d5ea      	bpl.n	800d99e <_printf_float+0x1a2>
 800d9c8:	1c4b      	adds	r3, r1, #1
 800d9ca:	e7e7      	b.n	800d99c <_printf_float+0x1a0>
 800d9cc:	2900      	cmp	r1, #0
 800d9ce:	bfd4      	ite	le
 800d9d0:	f1c1 0202 	rsble	r2, r1, #2
 800d9d4:	2201      	movgt	r2, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	e7e0      	b.n	800d99c <_printf_float+0x1a0>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	055a      	lsls	r2, r3, #21
 800d9de:	d407      	bmi.n	800d9f0 <_printf_float+0x1f4>
 800d9e0:	6923      	ldr	r3, [r4, #16]
 800d9e2:	4642      	mov	r2, r8
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	47b8      	blx	r7
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d12c      	bne.n	800da48 <_printf_float+0x24c>
 800d9ee:	e764      	b.n	800d8ba <_printf_float+0xbe>
 800d9f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9f4:	f240 80e0 	bls.w	800dbb8 <_printf_float+0x3bc>
 800d9f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2300      	movs	r3, #0
 800da00:	f7f3 f882 	bl	8000b08 <__aeabi_dcmpeq>
 800da04:	2800      	cmp	r0, #0
 800da06:	d034      	beq.n	800da72 <_printf_float+0x276>
 800da08:	4a37      	ldr	r2, [pc, #220]	; (800dae8 <_printf_float+0x2ec>)
 800da0a:	2301      	movs	r3, #1
 800da0c:	4631      	mov	r1, r6
 800da0e:	4628      	mov	r0, r5
 800da10:	47b8      	blx	r7
 800da12:	3001      	adds	r0, #1
 800da14:	f43f af51 	beq.w	800d8ba <_printf_float+0xbe>
 800da18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da1c:	429a      	cmp	r2, r3
 800da1e:	db02      	blt.n	800da26 <_printf_float+0x22a>
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	07d8      	lsls	r0, r3, #31
 800da24:	d510      	bpl.n	800da48 <_printf_float+0x24c>
 800da26:	ee18 3a10 	vmov	r3, s16
 800da2a:	4652      	mov	r2, sl
 800da2c:	4631      	mov	r1, r6
 800da2e:	4628      	mov	r0, r5
 800da30:	47b8      	blx	r7
 800da32:	3001      	adds	r0, #1
 800da34:	f43f af41 	beq.w	800d8ba <_printf_float+0xbe>
 800da38:	f04f 0800 	mov.w	r8, #0
 800da3c:	f104 091a 	add.w	r9, r4, #26
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	3b01      	subs	r3, #1
 800da44:	4543      	cmp	r3, r8
 800da46:	dc09      	bgt.n	800da5c <_printf_float+0x260>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	079b      	lsls	r3, r3, #30
 800da4c:	f100 8107 	bmi.w	800dc5e <_printf_float+0x462>
 800da50:	68e0      	ldr	r0, [r4, #12]
 800da52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da54:	4298      	cmp	r0, r3
 800da56:	bfb8      	it	lt
 800da58:	4618      	movlt	r0, r3
 800da5a:	e730      	b.n	800d8be <_printf_float+0xc2>
 800da5c:	2301      	movs	r3, #1
 800da5e:	464a      	mov	r2, r9
 800da60:	4631      	mov	r1, r6
 800da62:	4628      	mov	r0, r5
 800da64:	47b8      	blx	r7
 800da66:	3001      	adds	r0, #1
 800da68:	f43f af27 	beq.w	800d8ba <_printf_float+0xbe>
 800da6c:	f108 0801 	add.w	r8, r8, #1
 800da70:	e7e6      	b.n	800da40 <_printf_float+0x244>
 800da72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da74:	2b00      	cmp	r3, #0
 800da76:	dc39      	bgt.n	800daec <_printf_float+0x2f0>
 800da78:	4a1b      	ldr	r2, [pc, #108]	; (800dae8 <_printf_float+0x2ec>)
 800da7a:	2301      	movs	r3, #1
 800da7c:	4631      	mov	r1, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	47b8      	blx	r7
 800da82:	3001      	adds	r0, #1
 800da84:	f43f af19 	beq.w	800d8ba <_printf_float+0xbe>
 800da88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da8c:	4313      	orrs	r3, r2
 800da8e:	d102      	bne.n	800da96 <_printf_float+0x29a>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	07d9      	lsls	r1, r3, #31
 800da94:	d5d8      	bpl.n	800da48 <_printf_float+0x24c>
 800da96:	ee18 3a10 	vmov	r3, s16
 800da9a:	4652      	mov	r2, sl
 800da9c:	4631      	mov	r1, r6
 800da9e:	4628      	mov	r0, r5
 800daa0:	47b8      	blx	r7
 800daa2:	3001      	adds	r0, #1
 800daa4:	f43f af09 	beq.w	800d8ba <_printf_float+0xbe>
 800daa8:	f04f 0900 	mov.w	r9, #0
 800daac:	f104 0a1a 	add.w	sl, r4, #26
 800dab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab2:	425b      	negs	r3, r3
 800dab4:	454b      	cmp	r3, r9
 800dab6:	dc01      	bgt.n	800dabc <_printf_float+0x2c0>
 800dab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daba:	e792      	b.n	800d9e2 <_printf_float+0x1e6>
 800dabc:	2301      	movs	r3, #1
 800dabe:	4652      	mov	r2, sl
 800dac0:	4631      	mov	r1, r6
 800dac2:	4628      	mov	r0, r5
 800dac4:	47b8      	blx	r7
 800dac6:	3001      	adds	r0, #1
 800dac8:	f43f aef7 	beq.w	800d8ba <_printf_float+0xbe>
 800dacc:	f109 0901 	add.w	r9, r9, #1
 800dad0:	e7ee      	b.n	800dab0 <_printf_float+0x2b4>
 800dad2:	bf00      	nop
 800dad4:	7fefffff 	.word	0x7fefffff
 800dad8:	08011aa4 	.word	0x08011aa4
 800dadc:	08011aa8 	.word	0x08011aa8
 800dae0:	08011aac 	.word	0x08011aac
 800dae4:	08011ab0 	.word	0x08011ab0
 800dae8:	08011ab4 	.word	0x08011ab4
 800daec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800daf0:	429a      	cmp	r2, r3
 800daf2:	bfa8      	it	ge
 800daf4:	461a      	movge	r2, r3
 800daf6:	2a00      	cmp	r2, #0
 800daf8:	4691      	mov	r9, r2
 800dafa:	dc37      	bgt.n	800db6c <_printf_float+0x370>
 800dafc:	f04f 0b00 	mov.w	fp, #0
 800db00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db04:	f104 021a 	add.w	r2, r4, #26
 800db08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db0a:	9305      	str	r3, [sp, #20]
 800db0c:	eba3 0309 	sub.w	r3, r3, r9
 800db10:	455b      	cmp	r3, fp
 800db12:	dc33      	bgt.n	800db7c <_printf_float+0x380>
 800db14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db18:	429a      	cmp	r2, r3
 800db1a:	db3b      	blt.n	800db94 <_printf_float+0x398>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	07da      	lsls	r2, r3, #31
 800db20:	d438      	bmi.n	800db94 <_printf_float+0x398>
 800db22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800db26:	eba2 0903 	sub.w	r9, r2, r3
 800db2a:	9b05      	ldr	r3, [sp, #20]
 800db2c:	1ad2      	subs	r2, r2, r3
 800db2e:	4591      	cmp	r9, r2
 800db30:	bfa8      	it	ge
 800db32:	4691      	movge	r9, r2
 800db34:	f1b9 0f00 	cmp.w	r9, #0
 800db38:	dc35      	bgt.n	800dba6 <_printf_float+0x3aa>
 800db3a:	f04f 0800 	mov.w	r8, #0
 800db3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db42:	f104 0a1a 	add.w	sl, r4, #26
 800db46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	eba3 0309 	sub.w	r3, r3, r9
 800db50:	4543      	cmp	r3, r8
 800db52:	f77f af79 	ble.w	800da48 <_printf_float+0x24c>
 800db56:	2301      	movs	r3, #1
 800db58:	4652      	mov	r2, sl
 800db5a:	4631      	mov	r1, r6
 800db5c:	4628      	mov	r0, r5
 800db5e:	47b8      	blx	r7
 800db60:	3001      	adds	r0, #1
 800db62:	f43f aeaa 	beq.w	800d8ba <_printf_float+0xbe>
 800db66:	f108 0801 	add.w	r8, r8, #1
 800db6a:	e7ec      	b.n	800db46 <_printf_float+0x34a>
 800db6c:	4613      	mov	r3, r2
 800db6e:	4631      	mov	r1, r6
 800db70:	4642      	mov	r2, r8
 800db72:	4628      	mov	r0, r5
 800db74:	47b8      	blx	r7
 800db76:	3001      	adds	r0, #1
 800db78:	d1c0      	bne.n	800dafc <_printf_float+0x300>
 800db7a:	e69e      	b.n	800d8ba <_printf_float+0xbe>
 800db7c:	2301      	movs	r3, #1
 800db7e:	4631      	mov	r1, r6
 800db80:	4628      	mov	r0, r5
 800db82:	9205      	str	r2, [sp, #20]
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	f43f ae97 	beq.w	800d8ba <_printf_float+0xbe>
 800db8c:	9a05      	ldr	r2, [sp, #20]
 800db8e:	f10b 0b01 	add.w	fp, fp, #1
 800db92:	e7b9      	b.n	800db08 <_printf_float+0x30c>
 800db94:	ee18 3a10 	vmov	r3, s16
 800db98:	4652      	mov	r2, sl
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	d1be      	bne.n	800db22 <_printf_float+0x326>
 800dba4:	e689      	b.n	800d8ba <_printf_float+0xbe>
 800dba6:	9a05      	ldr	r2, [sp, #20]
 800dba8:	464b      	mov	r3, r9
 800dbaa:	4442      	add	r2, r8
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d1c1      	bne.n	800db3a <_printf_float+0x33e>
 800dbb6:	e680      	b.n	800d8ba <_printf_float+0xbe>
 800dbb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbba:	2a01      	cmp	r2, #1
 800dbbc:	dc01      	bgt.n	800dbc2 <_printf_float+0x3c6>
 800dbbe:	07db      	lsls	r3, r3, #31
 800dbc0:	d53a      	bpl.n	800dc38 <_printf_float+0x43c>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	4642      	mov	r2, r8
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	4628      	mov	r0, r5
 800dbca:	47b8      	blx	r7
 800dbcc:	3001      	adds	r0, #1
 800dbce:	f43f ae74 	beq.w	800d8ba <_printf_float+0xbe>
 800dbd2:	ee18 3a10 	vmov	r3, s16
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4628      	mov	r0, r5
 800dbdc:	47b8      	blx	r7
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f43f ae6b 	beq.w	800d8ba <_printf_float+0xbe>
 800dbe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2300      	movs	r3, #0
 800dbec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dbf0:	f7f2 ff8a 	bl	8000b08 <__aeabi_dcmpeq>
 800dbf4:	b9d8      	cbnz	r0, 800dc2e <_printf_float+0x432>
 800dbf6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dbfa:	f108 0201 	add.w	r2, r8, #1
 800dbfe:	4631      	mov	r1, r6
 800dc00:	4628      	mov	r0, r5
 800dc02:	47b8      	blx	r7
 800dc04:	3001      	adds	r0, #1
 800dc06:	d10e      	bne.n	800dc26 <_printf_float+0x42a>
 800dc08:	e657      	b.n	800d8ba <_printf_float+0xbe>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	4652      	mov	r2, sl
 800dc0e:	4631      	mov	r1, r6
 800dc10:	4628      	mov	r0, r5
 800dc12:	47b8      	blx	r7
 800dc14:	3001      	adds	r0, #1
 800dc16:	f43f ae50 	beq.w	800d8ba <_printf_float+0xbe>
 800dc1a:	f108 0801 	add.w	r8, r8, #1
 800dc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc20:	3b01      	subs	r3, #1
 800dc22:	4543      	cmp	r3, r8
 800dc24:	dcf1      	bgt.n	800dc0a <_printf_float+0x40e>
 800dc26:	464b      	mov	r3, r9
 800dc28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc2c:	e6da      	b.n	800d9e4 <_printf_float+0x1e8>
 800dc2e:	f04f 0800 	mov.w	r8, #0
 800dc32:	f104 0a1a 	add.w	sl, r4, #26
 800dc36:	e7f2      	b.n	800dc1e <_printf_float+0x422>
 800dc38:	2301      	movs	r3, #1
 800dc3a:	4642      	mov	r2, r8
 800dc3c:	e7df      	b.n	800dbfe <_printf_float+0x402>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	464a      	mov	r2, r9
 800dc42:	4631      	mov	r1, r6
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b8      	blx	r7
 800dc48:	3001      	adds	r0, #1
 800dc4a:	f43f ae36 	beq.w	800d8ba <_printf_float+0xbe>
 800dc4e:	f108 0801 	add.w	r8, r8, #1
 800dc52:	68e3      	ldr	r3, [r4, #12]
 800dc54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc56:	1a5b      	subs	r3, r3, r1
 800dc58:	4543      	cmp	r3, r8
 800dc5a:	dcf0      	bgt.n	800dc3e <_printf_float+0x442>
 800dc5c:	e6f8      	b.n	800da50 <_printf_float+0x254>
 800dc5e:	f04f 0800 	mov.w	r8, #0
 800dc62:	f104 0919 	add.w	r9, r4, #25
 800dc66:	e7f4      	b.n	800dc52 <_printf_float+0x456>

0800dc68 <_printf_common>:
 800dc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6c:	4616      	mov	r6, r2
 800dc6e:	4699      	mov	r9, r3
 800dc70:	688a      	ldr	r2, [r1, #8]
 800dc72:	690b      	ldr	r3, [r1, #16]
 800dc74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	bfb8      	it	lt
 800dc7c:	4613      	movlt	r3, r2
 800dc7e:	6033      	str	r3, [r6, #0]
 800dc80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc84:	4607      	mov	r7, r0
 800dc86:	460c      	mov	r4, r1
 800dc88:	b10a      	cbz	r2, 800dc8e <_printf_common+0x26>
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	6033      	str	r3, [r6, #0]
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	0699      	lsls	r1, r3, #26
 800dc92:	bf42      	ittt	mi
 800dc94:	6833      	ldrmi	r3, [r6, #0]
 800dc96:	3302      	addmi	r3, #2
 800dc98:	6033      	strmi	r3, [r6, #0]
 800dc9a:	6825      	ldr	r5, [r4, #0]
 800dc9c:	f015 0506 	ands.w	r5, r5, #6
 800dca0:	d106      	bne.n	800dcb0 <_printf_common+0x48>
 800dca2:	f104 0a19 	add.w	sl, r4, #25
 800dca6:	68e3      	ldr	r3, [r4, #12]
 800dca8:	6832      	ldr	r2, [r6, #0]
 800dcaa:	1a9b      	subs	r3, r3, r2
 800dcac:	42ab      	cmp	r3, r5
 800dcae:	dc26      	bgt.n	800dcfe <_printf_common+0x96>
 800dcb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcb4:	1e13      	subs	r3, r2, #0
 800dcb6:	6822      	ldr	r2, [r4, #0]
 800dcb8:	bf18      	it	ne
 800dcba:	2301      	movne	r3, #1
 800dcbc:	0692      	lsls	r2, r2, #26
 800dcbe:	d42b      	bmi.n	800dd18 <_printf_common+0xb0>
 800dcc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	47c0      	blx	r8
 800dcca:	3001      	adds	r0, #1
 800dccc:	d01e      	beq.n	800dd0c <_printf_common+0xa4>
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	6922      	ldr	r2, [r4, #16]
 800dcd2:	f003 0306 	and.w	r3, r3, #6
 800dcd6:	2b04      	cmp	r3, #4
 800dcd8:	bf02      	ittt	eq
 800dcda:	68e5      	ldreq	r5, [r4, #12]
 800dcdc:	6833      	ldreq	r3, [r6, #0]
 800dcde:	1aed      	subeq	r5, r5, r3
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	bf0c      	ite	eq
 800dce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dce8:	2500      	movne	r5, #0
 800dcea:	4293      	cmp	r3, r2
 800dcec:	bfc4      	itt	gt
 800dcee:	1a9b      	subgt	r3, r3, r2
 800dcf0:	18ed      	addgt	r5, r5, r3
 800dcf2:	2600      	movs	r6, #0
 800dcf4:	341a      	adds	r4, #26
 800dcf6:	42b5      	cmp	r5, r6
 800dcf8:	d11a      	bne.n	800dd30 <_printf_common+0xc8>
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	e008      	b.n	800dd10 <_printf_common+0xa8>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	4652      	mov	r2, sl
 800dd02:	4649      	mov	r1, r9
 800dd04:	4638      	mov	r0, r7
 800dd06:	47c0      	blx	r8
 800dd08:	3001      	adds	r0, #1
 800dd0a:	d103      	bne.n	800dd14 <_printf_common+0xac>
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd14:	3501      	adds	r5, #1
 800dd16:	e7c6      	b.n	800dca6 <_printf_common+0x3e>
 800dd18:	18e1      	adds	r1, r4, r3
 800dd1a:	1c5a      	adds	r2, r3, #1
 800dd1c:	2030      	movs	r0, #48	; 0x30
 800dd1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd22:	4422      	add	r2, r4
 800dd24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd2c:	3302      	adds	r3, #2
 800dd2e:	e7c7      	b.n	800dcc0 <_printf_common+0x58>
 800dd30:	2301      	movs	r3, #1
 800dd32:	4622      	mov	r2, r4
 800dd34:	4649      	mov	r1, r9
 800dd36:	4638      	mov	r0, r7
 800dd38:	47c0      	blx	r8
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d0e6      	beq.n	800dd0c <_printf_common+0xa4>
 800dd3e:	3601      	adds	r6, #1
 800dd40:	e7d9      	b.n	800dcf6 <_printf_common+0x8e>
	...

0800dd44 <_printf_i>:
 800dd44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd48:	7e0f      	ldrb	r7, [r1, #24]
 800dd4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd4c:	2f78      	cmp	r7, #120	; 0x78
 800dd4e:	4691      	mov	r9, r2
 800dd50:	4680      	mov	r8, r0
 800dd52:	460c      	mov	r4, r1
 800dd54:	469a      	mov	sl, r3
 800dd56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd5a:	d807      	bhi.n	800dd6c <_printf_i+0x28>
 800dd5c:	2f62      	cmp	r7, #98	; 0x62
 800dd5e:	d80a      	bhi.n	800dd76 <_printf_i+0x32>
 800dd60:	2f00      	cmp	r7, #0
 800dd62:	f000 80d4 	beq.w	800df0e <_printf_i+0x1ca>
 800dd66:	2f58      	cmp	r7, #88	; 0x58
 800dd68:	f000 80c0 	beq.w	800deec <_printf_i+0x1a8>
 800dd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd74:	e03a      	b.n	800ddec <_printf_i+0xa8>
 800dd76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd7a:	2b15      	cmp	r3, #21
 800dd7c:	d8f6      	bhi.n	800dd6c <_printf_i+0x28>
 800dd7e:	a101      	add	r1, pc, #4	; (adr r1, 800dd84 <_printf_i+0x40>)
 800dd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd84:	0800dddd 	.word	0x0800dddd
 800dd88:	0800ddf1 	.word	0x0800ddf1
 800dd8c:	0800dd6d 	.word	0x0800dd6d
 800dd90:	0800dd6d 	.word	0x0800dd6d
 800dd94:	0800dd6d 	.word	0x0800dd6d
 800dd98:	0800dd6d 	.word	0x0800dd6d
 800dd9c:	0800ddf1 	.word	0x0800ddf1
 800dda0:	0800dd6d 	.word	0x0800dd6d
 800dda4:	0800dd6d 	.word	0x0800dd6d
 800dda8:	0800dd6d 	.word	0x0800dd6d
 800ddac:	0800dd6d 	.word	0x0800dd6d
 800ddb0:	0800def5 	.word	0x0800def5
 800ddb4:	0800de1d 	.word	0x0800de1d
 800ddb8:	0800deaf 	.word	0x0800deaf
 800ddbc:	0800dd6d 	.word	0x0800dd6d
 800ddc0:	0800dd6d 	.word	0x0800dd6d
 800ddc4:	0800df17 	.word	0x0800df17
 800ddc8:	0800dd6d 	.word	0x0800dd6d
 800ddcc:	0800de1d 	.word	0x0800de1d
 800ddd0:	0800dd6d 	.word	0x0800dd6d
 800ddd4:	0800dd6d 	.word	0x0800dd6d
 800ddd8:	0800deb7 	.word	0x0800deb7
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	1d1a      	adds	r2, r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	602a      	str	r2, [r5, #0]
 800dde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddec:	2301      	movs	r3, #1
 800ddee:	e09f      	b.n	800df30 <_printf_i+0x1ec>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	0607      	lsls	r7, r0, #24
 800ddf6:	f103 0104 	add.w	r1, r3, #4
 800ddfa:	6029      	str	r1, [r5, #0]
 800ddfc:	d501      	bpl.n	800de02 <_printf_i+0xbe>
 800ddfe:	681e      	ldr	r6, [r3, #0]
 800de00:	e003      	b.n	800de0a <_printf_i+0xc6>
 800de02:	0646      	lsls	r6, r0, #25
 800de04:	d5fb      	bpl.n	800ddfe <_printf_i+0xba>
 800de06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de0a:	2e00      	cmp	r6, #0
 800de0c:	da03      	bge.n	800de16 <_printf_i+0xd2>
 800de0e:	232d      	movs	r3, #45	; 0x2d
 800de10:	4276      	negs	r6, r6
 800de12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de16:	485a      	ldr	r0, [pc, #360]	; (800df80 <_printf_i+0x23c>)
 800de18:	230a      	movs	r3, #10
 800de1a:	e012      	b.n	800de42 <_printf_i+0xfe>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	6820      	ldr	r0, [r4, #0]
 800de20:	1d19      	adds	r1, r3, #4
 800de22:	6029      	str	r1, [r5, #0]
 800de24:	0605      	lsls	r5, r0, #24
 800de26:	d501      	bpl.n	800de2c <_printf_i+0xe8>
 800de28:	681e      	ldr	r6, [r3, #0]
 800de2a:	e002      	b.n	800de32 <_printf_i+0xee>
 800de2c:	0641      	lsls	r1, r0, #25
 800de2e:	d5fb      	bpl.n	800de28 <_printf_i+0xe4>
 800de30:	881e      	ldrh	r6, [r3, #0]
 800de32:	4853      	ldr	r0, [pc, #332]	; (800df80 <_printf_i+0x23c>)
 800de34:	2f6f      	cmp	r7, #111	; 0x6f
 800de36:	bf0c      	ite	eq
 800de38:	2308      	moveq	r3, #8
 800de3a:	230a      	movne	r3, #10
 800de3c:	2100      	movs	r1, #0
 800de3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de42:	6865      	ldr	r5, [r4, #4]
 800de44:	60a5      	str	r5, [r4, #8]
 800de46:	2d00      	cmp	r5, #0
 800de48:	bfa2      	ittt	ge
 800de4a:	6821      	ldrge	r1, [r4, #0]
 800de4c:	f021 0104 	bicge.w	r1, r1, #4
 800de50:	6021      	strge	r1, [r4, #0]
 800de52:	b90e      	cbnz	r6, 800de58 <_printf_i+0x114>
 800de54:	2d00      	cmp	r5, #0
 800de56:	d04b      	beq.n	800def0 <_printf_i+0x1ac>
 800de58:	4615      	mov	r5, r2
 800de5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800de5e:	fb03 6711 	mls	r7, r3, r1, r6
 800de62:	5dc7      	ldrb	r7, [r0, r7]
 800de64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de68:	4637      	mov	r7, r6
 800de6a:	42bb      	cmp	r3, r7
 800de6c:	460e      	mov	r6, r1
 800de6e:	d9f4      	bls.n	800de5a <_printf_i+0x116>
 800de70:	2b08      	cmp	r3, #8
 800de72:	d10b      	bne.n	800de8c <_printf_i+0x148>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	07de      	lsls	r6, r3, #31
 800de78:	d508      	bpl.n	800de8c <_printf_i+0x148>
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	6861      	ldr	r1, [r4, #4]
 800de7e:	4299      	cmp	r1, r3
 800de80:	bfde      	ittt	le
 800de82:	2330      	movle	r3, #48	; 0x30
 800de84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800de8c:	1b52      	subs	r2, r2, r5
 800de8e:	6122      	str	r2, [r4, #16]
 800de90:	f8cd a000 	str.w	sl, [sp]
 800de94:	464b      	mov	r3, r9
 800de96:	aa03      	add	r2, sp, #12
 800de98:	4621      	mov	r1, r4
 800de9a:	4640      	mov	r0, r8
 800de9c:	f7ff fee4 	bl	800dc68 <_printf_common>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d14a      	bne.n	800df3a <_printf_i+0x1f6>
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dea8:	b004      	add	sp, #16
 800deaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	f043 0320 	orr.w	r3, r3, #32
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	4833      	ldr	r0, [pc, #204]	; (800df84 <_printf_i+0x240>)
 800deb8:	2778      	movs	r7, #120	; 0x78
 800deba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	6829      	ldr	r1, [r5, #0]
 800dec2:	061f      	lsls	r7, r3, #24
 800dec4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dec8:	d402      	bmi.n	800ded0 <_printf_i+0x18c>
 800deca:	065f      	lsls	r7, r3, #25
 800decc:	bf48      	it	mi
 800dece:	b2b6      	uxthmi	r6, r6
 800ded0:	07df      	lsls	r7, r3, #31
 800ded2:	bf48      	it	mi
 800ded4:	f043 0320 	orrmi.w	r3, r3, #32
 800ded8:	6029      	str	r1, [r5, #0]
 800deda:	bf48      	it	mi
 800dedc:	6023      	strmi	r3, [r4, #0]
 800dede:	b91e      	cbnz	r6, 800dee8 <_printf_i+0x1a4>
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	f023 0320 	bic.w	r3, r3, #32
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	2310      	movs	r3, #16
 800deea:	e7a7      	b.n	800de3c <_printf_i+0xf8>
 800deec:	4824      	ldr	r0, [pc, #144]	; (800df80 <_printf_i+0x23c>)
 800deee:	e7e4      	b.n	800deba <_printf_i+0x176>
 800def0:	4615      	mov	r5, r2
 800def2:	e7bd      	b.n	800de70 <_printf_i+0x12c>
 800def4:	682b      	ldr	r3, [r5, #0]
 800def6:	6826      	ldr	r6, [r4, #0]
 800def8:	6961      	ldr	r1, [r4, #20]
 800defa:	1d18      	adds	r0, r3, #4
 800defc:	6028      	str	r0, [r5, #0]
 800defe:	0635      	lsls	r5, r6, #24
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	d501      	bpl.n	800df08 <_printf_i+0x1c4>
 800df04:	6019      	str	r1, [r3, #0]
 800df06:	e002      	b.n	800df0e <_printf_i+0x1ca>
 800df08:	0670      	lsls	r0, r6, #25
 800df0a:	d5fb      	bpl.n	800df04 <_printf_i+0x1c0>
 800df0c:	8019      	strh	r1, [r3, #0]
 800df0e:	2300      	movs	r3, #0
 800df10:	6123      	str	r3, [r4, #16]
 800df12:	4615      	mov	r5, r2
 800df14:	e7bc      	b.n	800de90 <_printf_i+0x14c>
 800df16:	682b      	ldr	r3, [r5, #0]
 800df18:	1d1a      	adds	r2, r3, #4
 800df1a:	602a      	str	r2, [r5, #0]
 800df1c:	681d      	ldr	r5, [r3, #0]
 800df1e:	6862      	ldr	r2, [r4, #4]
 800df20:	2100      	movs	r1, #0
 800df22:	4628      	mov	r0, r5
 800df24:	f7f2 f974 	bl	8000210 <memchr>
 800df28:	b108      	cbz	r0, 800df2e <_printf_i+0x1ea>
 800df2a:	1b40      	subs	r0, r0, r5
 800df2c:	6060      	str	r0, [r4, #4]
 800df2e:	6863      	ldr	r3, [r4, #4]
 800df30:	6123      	str	r3, [r4, #16]
 800df32:	2300      	movs	r3, #0
 800df34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df38:	e7aa      	b.n	800de90 <_printf_i+0x14c>
 800df3a:	6923      	ldr	r3, [r4, #16]
 800df3c:	462a      	mov	r2, r5
 800df3e:	4649      	mov	r1, r9
 800df40:	4640      	mov	r0, r8
 800df42:	47d0      	blx	sl
 800df44:	3001      	adds	r0, #1
 800df46:	d0ad      	beq.n	800dea4 <_printf_i+0x160>
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	079b      	lsls	r3, r3, #30
 800df4c:	d413      	bmi.n	800df76 <_printf_i+0x232>
 800df4e:	68e0      	ldr	r0, [r4, #12]
 800df50:	9b03      	ldr	r3, [sp, #12]
 800df52:	4298      	cmp	r0, r3
 800df54:	bfb8      	it	lt
 800df56:	4618      	movlt	r0, r3
 800df58:	e7a6      	b.n	800dea8 <_printf_i+0x164>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4632      	mov	r2, r6
 800df5e:	4649      	mov	r1, r9
 800df60:	4640      	mov	r0, r8
 800df62:	47d0      	blx	sl
 800df64:	3001      	adds	r0, #1
 800df66:	d09d      	beq.n	800dea4 <_printf_i+0x160>
 800df68:	3501      	adds	r5, #1
 800df6a:	68e3      	ldr	r3, [r4, #12]
 800df6c:	9903      	ldr	r1, [sp, #12]
 800df6e:	1a5b      	subs	r3, r3, r1
 800df70:	42ab      	cmp	r3, r5
 800df72:	dcf2      	bgt.n	800df5a <_printf_i+0x216>
 800df74:	e7eb      	b.n	800df4e <_printf_i+0x20a>
 800df76:	2500      	movs	r5, #0
 800df78:	f104 0619 	add.w	r6, r4, #25
 800df7c:	e7f5      	b.n	800df6a <_printf_i+0x226>
 800df7e:	bf00      	nop
 800df80:	08011ab6 	.word	0x08011ab6
 800df84:	08011ac7 	.word	0x08011ac7

0800df88 <sniprintf>:
 800df88:	b40c      	push	{r2, r3}
 800df8a:	b530      	push	{r4, r5, lr}
 800df8c:	4b17      	ldr	r3, [pc, #92]	; (800dfec <sniprintf+0x64>)
 800df8e:	1e0c      	subs	r4, r1, #0
 800df90:	681d      	ldr	r5, [r3, #0]
 800df92:	b09d      	sub	sp, #116	; 0x74
 800df94:	da08      	bge.n	800dfa8 <sniprintf+0x20>
 800df96:	238b      	movs	r3, #139	; 0x8b
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df9e:	b01d      	add	sp, #116	; 0x74
 800dfa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfa4:	b002      	add	sp, #8
 800dfa6:	4770      	bx	lr
 800dfa8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dfac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dfb0:	bf14      	ite	ne
 800dfb2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800dfb6:	4623      	moveq	r3, r4
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	9307      	str	r3, [sp, #28]
 800dfbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfc0:	9002      	str	r0, [sp, #8]
 800dfc2:	9006      	str	r0, [sp, #24]
 800dfc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dfc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dfca:	ab21      	add	r3, sp, #132	; 0x84
 800dfcc:	a902      	add	r1, sp, #8
 800dfce:	4628      	mov	r0, r5
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	f001 f8bd 	bl	800f150 <_svfiprintf_r>
 800dfd6:	1c43      	adds	r3, r0, #1
 800dfd8:	bfbc      	itt	lt
 800dfda:	238b      	movlt	r3, #139	; 0x8b
 800dfdc:	602b      	strlt	r3, [r5, #0]
 800dfde:	2c00      	cmp	r4, #0
 800dfe0:	d0dd      	beq.n	800df9e <sniprintf+0x16>
 800dfe2:	9b02      	ldr	r3, [sp, #8]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e7d9      	b.n	800df9e <sniprintf+0x16>
 800dfea:	bf00      	nop
 800dfec:	20000084 	.word	0x20000084

0800dff0 <siprintf>:
 800dff0:	b40e      	push	{r1, r2, r3}
 800dff2:	b500      	push	{lr}
 800dff4:	b09c      	sub	sp, #112	; 0x70
 800dff6:	ab1d      	add	r3, sp, #116	; 0x74
 800dff8:	9002      	str	r0, [sp, #8]
 800dffa:	9006      	str	r0, [sp, #24]
 800dffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e000:	4809      	ldr	r0, [pc, #36]	; (800e028 <siprintf+0x38>)
 800e002:	9107      	str	r1, [sp, #28]
 800e004:	9104      	str	r1, [sp, #16]
 800e006:	4909      	ldr	r1, [pc, #36]	; (800e02c <siprintf+0x3c>)
 800e008:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00c:	9105      	str	r1, [sp, #20]
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	a902      	add	r1, sp, #8
 800e014:	f001 f89c 	bl	800f150 <_svfiprintf_r>
 800e018:	9b02      	ldr	r3, [sp, #8]
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	b01c      	add	sp, #112	; 0x70
 800e020:	f85d eb04 	ldr.w	lr, [sp], #4
 800e024:	b003      	add	sp, #12
 800e026:	4770      	bx	lr
 800e028:	20000084 	.word	0x20000084
 800e02c:	ffff0208 	.word	0xffff0208

0800e030 <std>:
 800e030:	2300      	movs	r3, #0
 800e032:	b510      	push	{r4, lr}
 800e034:	4604      	mov	r4, r0
 800e036:	e9c0 3300 	strd	r3, r3, [r0]
 800e03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e03e:	6083      	str	r3, [r0, #8]
 800e040:	8181      	strh	r1, [r0, #12]
 800e042:	6643      	str	r3, [r0, #100]	; 0x64
 800e044:	81c2      	strh	r2, [r0, #14]
 800e046:	6183      	str	r3, [r0, #24]
 800e048:	4619      	mov	r1, r3
 800e04a:	2208      	movs	r2, #8
 800e04c:	305c      	adds	r0, #92	; 0x5c
 800e04e:	f000 f8c0 	bl	800e1d2 <memset>
 800e052:	4b0d      	ldr	r3, [pc, #52]	; (800e088 <std+0x58>)
 800e054:	6263      	str	r3, [r4, #36]	; 0x24
 800e056:	4b0d      	ldr	r3, [pc, #52]	; (800e08c <std+0x5c>)
 800e058:	62a3      	str	r3, [r4, #40]	; 0x28
 800e05a:	4b0d      	ldr	r3, [pc, #52]	; (800e090 <std+0x60>)
 800e05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e05e:	4b0d      	ldr	r3, [pc, #52]	; (800e094 <std+0x64>)
 800e060:	6323      	str	r3, [r4, #48]	; 0x30
 800e062:	4b0d      	ldr	r3, [pc, #52]	; (800e098 <std+0x68>)
 800e064:	6224      	str	r4, [r4, #32]
 800e066:	429c      	cmp	r4, r3
 800e068:	d006      	beq.n	800e078 <std+0x48>
 800e06a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e06e:	4294      	cmp	r4, r2
 800e070:	d002      	beq.n	800e078 <std+0x48>
 800e072:	33d0      	adds	r3, #208	; 0xd0
 800e074:	429c      	cmp	r4, r3
 800e076:	d105      	bne.n	800e084 <std+0x54>
 800e078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e080:	f000 b934 	b.w	800e2ec <__retarget_lock_init_recursive>
 800e084:	bd10      	pop	{r4, pc}
 800e086:	bf00      	nop
 800e088:	0800fd09 	.word	0x0800fd09
 800e08c:	0800fd2b 	.word	0x0800fd2b
 800e090:	0800fd63 	.word	0x0800fd63
 800e094:	0800fd87 	.word	0x0800fd87
 800e098:	20005c80 	.word	0x20005c80

0800e09c <stdio_exit_handler>:
 800e09c:	4a02      	ldr	r2, [pc, #8]	; (800e0a8 <stdio_exit_handler+0xc>)
 800e09e:	4903      	ldr	r1, [pc, #12]	; (800e0ac <stdio_exit_handler+0x10>)
 800e0a0:	4803      	ldr	r0, [pc, #12]	; (800e0b0 <stdio_exit_handler+0x14>)
 800e0a2:	f000 b869 	b.w	800e178 <_fwalk_sglue>
 800e0a6:	bf00      	nop
 800e0a8:	2000002c 	.word	0x2000002c
 800e0ac:	0800f5a9 	.word	0x0800f5a9
 800e0b0:	20000038 	.word	0x20000038

0800e0b4 <cleanup_stdio>:
 800e0b4:	6841      	ldr	r1, [r0, #4]
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <cleanup_stdio+0x34>)
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	4604      	mov	r4, r0
 800e0be:	d001      	beq.n	800e0c4 <cleanup_stdio+0x10>
 800e0c0:	f001 fa72 	bl	800f5a8 <_fflush_r>
 800e0c4:	68a1      	ldr	r1, [r4, #8]
 800e0c6:	4b09      	ldr	r3, [pc, #36]	; (800e0ec <cleanup_stdio+0x38>)
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d002      	beq.n	800e0d2 <cleanup_stdio+0x1e>
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f001 fa6b 	bl	800f5a8 <_fflush_r>
 800e0d2:	68e1      	ldr	r1, [r4, #12]
 800e0d4:	4b06      	ldr	r3, [pc, #24]	; (800e0f0 <cleanup_stdio+0x3c>)
 800e0d6:	4299      	cmp	r1, r3
 800e0d8:	d004      	beq.n	800e0e4 <cleanup_stdio+0x30>
 800e0da:	4620      	mov	r0, r4
 800e0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0e0:	f001 ba62 	b.w	800f5a8 <_fflush_r>
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20005c80 	.word	0x20005c80
 800e0ec:	20005ce8 	.word	0x20005ce8
 800e0f0:	20005d50 	.word	0x20005d50

0800e0f4 <global_stdio_init.part.0>:
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <global_stdio_init.part.0+0x30>)
 800e0f8:	4c0b      	ldr	r4, [pc, #44]	; (800e128 <global_stdio_init.part.0+0x34>)
 800e0fa:	4a0c      	ldr	r2, [pc, #48]	; (800e12c <global_stdio_init.part.0+0x38>)
 800e0fc:	601a      	str	r2, [r3, #0]
 800e0fe:	4620      	mov	r0, r4
 800e100:	2200      	movs	r2, #0
 800e102:	2104      	movs	r1, #4
 800e104:	f7ff ff94 	bl	800e030 <std>
 800e108:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e10c:	2201      	movs	r2, #1
 800e10e:	2109      	movs	r1, #9
 800e110:	f7ff ff8e 	bl	800e030 <std>
 800e114:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e118:	2202      	movs	r2, #2
 800e11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e11e:	2112      	movs	r1, #18
 800e120:	f7ff bf86 	b.w	800e030 <std>
 800e124:	20005db8 	.word	0x20005db8
 800e128:	20005c80 	.word	0x20005c80
 800e12c:	0800e09d 	.word	0x0800e09d

0800e130 <__sfp_lock_acquire>:
 800e130:	4801      	ldr	r0, [pc, #4]	; (800e138 <__sfp_lock_acquire+0x8>)
 800e132:	f000 b8dc 	b.w	800e2ee <__retarget_lock_acquire_recursive>
 800e136:	bf00      	nop
 800e138:	20005dc1 	.word	0x20005dc1

0800e13c <__sfp_lock_release>:
 800e13c:	4801      	ldr	r0, [pc, #4]	; (800e144 <__sfp_lock_release+0x8>)
 800e13e:	f000 b8d7 	b.w	800e2f0 <__retarget_lock_release_recursive>
 800e142:	bf00      	nop
 800e144:	20005dc1 	.word	0x20005dc1

0800e148 <__sinit>:
 800e148:	b510      	push	{r4, lr}
 800e14a:	4604      	mov	r4, r0
 800e14c:	f7ff fff0 	bl	800e130 <__sfp_lock_acquire>
 800e150:	6a23      	ldr	r3, [r4, #32]
 800e152:	b11b      	cbz	r3, 800e15c <__sinit+0x14>
 800e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e158:	f7ff bff0 	b.w	800e13c <__sfp_lock_release>
 800e15c:	4b04      	ldr	r3, [pc, #16]	; (800e170 <__sinit+0x28>)
 800e15e:	6223      	str	r3, [r4, #32]
 800e160:	4b04      	ldr	r3, [pc, #16]	; (800e174 <__sinit+0x2c>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1f5      	bne.n	800e154 <__sinit+0xc>
 800e168:	f7ff ffc4 	bl	800e0f4 <global_stdio_init.part.0>
 800e16c:	e7f2      	b.n	800e154 <__sinit+0xc>
 800e16e:	bf00      	nop
 800e170:	0800e0b5 	.word	0x0800e0b5
 800e174:	20005db8 	.word	0x20005db8

0800e178 <_fwalk_sglue>:
 800e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	4607      	mov	r7, r0
 800e17e:	4688      	mov	r8, r1
 800e180:	4614      	mov	r4, r2
 800e182:	2600      	movs	r6, #0
 800e184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e188:	f1b9 0901 	subs.w	r9, r9, #1
 800e18c:	d505      	bpl.n	800e19a <_fwalk_sglue+0x22>
 800e18e:	6824      	ldr	r4, [r4, #0]
 800e190:	2c00      	cmp	r4, #0
 800e192:	d1f7      	bne.n	800e184 <_fwalk_sglue+0xc>
 800e194:	4630      	mov	r0, r6
 800e196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19a:	89ab      	ldrh	r3, [r5, #12]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d907      	bls.n	800e1b0 <_fwalk_sglue+0x38>
 800e1a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	d003      	beq.n	800e1b0 <_fwalk_sglue+0x38>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	47c0      	blx	r8
 800e1ae:	4306      	orrs	r6, r0
 800e1b0:	3568      	adds	r5, #104	; 0x68
 800e1b2:	e7e9      	b.n	800e188 <_fwalk_sglue+0x10>

0800e1b4 <strcat>:
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	7814      	ldrb	r4, [r2, #0]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	3201      	adds	r2, #1
 800e1be:	2c00      	cmp	r4, #0
 800e1c0:	d1fa      	bne.n	800e1b8 <strcat+0x4>
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1cc:	2a00      	cmp	r2, #0
 800e1ce:	d1f9      	bne.n	800e1c4 <strcat+0x10>
 800e1d0:	bd10      	pop	{r4, pc}

0800e1d2 <memset>:
 800e1d2:	4402      	add	r2, r0
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d100      	bne.n	800e1dc <memset+0xa>
 800e1da:	4770      	bx	lr
 800e1dc:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e0:	e7f9      	b.n	800e1d6 <memset+0x4>
	...

0800e1e4 <_localeconv_r>:
 800e1e4:	4800      	ldr	r0, [pc, #0]	; (800e1e8 <_localeconv_r+0x4>)
 800e1e6:	4770      	bx	lr
 800e1e8:	20000178 	.word	0x20000178

0800e1ec <_reclaim_reent>:
 800e1ec:	4b29      	ldr	r3, [pc, #164]	; (800e294 <_reclaim_reent+0xa8>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4283      	cmp	r3, r0
 800e1f2:	b570      	push	{r4, r5, r6, lr}
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	d04b      	beq.n	800e290 <_reclaim_reent+0xa4>
 800e1f8:	69c3      	ldr	r3, [r0, #28]
 800e1fa:	b143      	cbz	r3, 800e20e <_reclaim_reent+0x22>
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d144      	bne.n	800e28c <_reclaim_reent+0xa0>
 800e202:	69e3      	ldr	r3, [r4, #28]
 800e204:	6819      	ldr	r1, [r3, #0]
 800e206:	b111      	cbz	r1, 800e20e <_reclaim_reent+0x22>
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 fefb 	bl	800f004 <_free_r>
 800e20e:	6961      	ldr	r1, [r4, #20]
 800e210:	b111      	cbz	r1, 800e218 <_reclaim_reent+0x2c>
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fef6 	bl	800f004 <_free_r>
 800e218:	69e1      	ldr	r1, [r4, #28]
 800e21a:	b111      	cbz	r1, 800e222 <_reclaim_reent+0x36>
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 fef1 	bl	800f004 <_free_r>
 800e222:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e224:	b111      	cbz	r1, 800e22c <_reclaim_reent+0x40>
 800e226:	4620      	mov	r0, r4
 800e228:	f000 feec 	bl	800f004 <_free_r>
 800e22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e22e:	b111      	cbz	r1, 800e236 <_reclaim_reent+0x4a>
 800e230:	4620      	mov	r0, r4
 800e232:	f000 fee7 	bl	800f004 <_free_r>
 800e236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e238:	b111      	cbz	r1, 800e240 <_reclaim_reent+0x54>
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 fee2 	bl	800f004 <_free_r>
 800e240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e242:	b111      	cbz	r1, 800e24a <_reclaim_reent+0x5e>
 800e244:	4620      	mov	r0, r4
 800e246:	f000 fedd 	bl	800f004 <_free_r>
 800e24a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e24c:	b111      	cbz	r1, 800e254 <_reclaim_reent+0x68>
 800e24e:	4620      	mov	r0, r4
 800e250:	f000 fed8 	bl	800f004 <_free_r>
 800e254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e256:	b111      	cbz	r1, 800e25e <_reclaim_reent+0x72>
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fed3 	bl	800f004 <_free_r>
 800e25e:	6a23      	ldr	r3, [r4, #32]
 800e260:	b1b3      	cbz	r3, 800e290 <_reclaim_reent+0xa4>
 800e262:	4620      	mov	r0, r4
 800e264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e268:	4718      	bx	r3
 800e26a:	5949      	ldr	r1, [r1, r5]
 800e26c:	b941      	cbnz	r1, 800e280 <_reclaim_reent+0x94>
 800e26e:	3504      	adds	r5, #4
 800e270:	69e3      	ldr	r3, [r4, #28]
 800e272:	2d80      	cmp	r5, #128	; 0x80
 800e274:	68d9      	ldr	r1, [r3, #12]
 800e276:	d1f8      	bne.n	800e26a <_reclaim_reent+0x7e>
 800e278:	4620      	mov	r0, r4
 800e27a:	f000 fec3 	bl	800f004 <_free_r>
 800e27e:	e7c0      	b.n	800e202 <_reclaim_reent+0x16>
 800e280:	680e      	ldr	r6, [r1, #0]
 800e282:	4620      	mov	r0, r4
 800e284:	f000 febe 	bl	800f004 <_free_r>
 800e288:	4631      	mov	r1, r6
 800e28a:	e7ef      	b.n	800e26c <_reclaim_reent+0x80>
 800e28c:	2500      	movs	r5, #0
 800e28e:	e7ef      	b.n	800e270 <_reclaim_reent+0x84>
 800e290:	bd70      	pop	{r4, r5, r6, pc}
 800e292:	bf00      	nop
 800e294:	20000084 	.word	0x20000084

0800e298 <__errno>:
 800e298:	4b01      	ldr	r3, [pc, #4]	; (800e2a0 <__errno+0x8>)
 800e29a:	6818      	ldr	r0, [r3, #0]
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	20000084 	.word	0x20000084

0800e2a4 <__libc_init_array>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	4d0d      	ldr	r5, [pc, #52]	; (800e2dc <__libc_init_array+0x38>)
 800e2a8:	4c0d      	ldr	r4, [pc, #52]	; (800e2e0 <__libc_init_array+0x3c>)
 800e2aa:	1b64      	subs	r4, r4, r5
 800e2ac:	10a4      	asrs	r4, r4, #2
 800e2ae:	2600      	movs	r6, #0
 800e2b0:	42a6      	cmp	r6, r4
 800e2b2:	d109      	bne.n	800e2c8 <__libc_init_array+0x24>
 800e2b4:	4d0b      	ldr	r5, [pc, #44]	; (800e2e4 <__libc_init_array+0x40>)
 800e2b6:	4c0c      	ldr	r4, [pc, #48]	; (800e2e8 <__libc_init_array+0x44>)
 800e2b8:	f003 fa5a 	bl	8011770 <_init>
 800e2bc:	1b64      	subs	r4, r4, r5
 800e2be:	10a4      	asrs	r4, r4, #2
 800e2c0:	2600      	movs	r6, #0
 800e2c2:	42a6      	cmp	r6, r4
 800e2c4:	d105      	bne.n	800e2d2 <__libc_init_array+0x2e>
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2cc:	4798      	blx	r3
 800e2ce:	3601      	adds	r6, #1
 800e2d0:	e7ee      	b.n	800e2b0 <__libc_init_array+0xc>
 800e2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d6:	4798      	blx	r3
 800e2d8:	3601      	adds	r6, #1
 800e2da:	e7f2      	b.n	800e2c2 <__libc_init_array+0x1e>
 800e2dc:	08011e50 	.word	0x08011e50
 800e2e0:	08011e50 	.word	0x08011e50
 800e2e4:	08011e50 	.word	0x08011e50
 800e2e8:	08011e54 	.word	0x08011e54

0800e2ec <__retarget_lock_init_recursive>:
 800e2ec:	4770      	bx	lr

0800e2ee <__retarget_lock_acquire_recursive>:
 800e2ee:	4770      	bx	lr

0800e2f0 <__retarget_lock_release_recursive>:
 800e2f0:	4770      	bx	lr

0800e2f2 <memcpy>:
 800e2f2:	440a      	add	r2, r1
 800e2f4:	4291      	cmp	r1, r2
 800e2f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e2fa:	d100      	bne.n	800e2fe <memcpy+0xc>
 800e2fc:	4770      	bx	lr
 800e2fe:	b510      	push	{r4, lr}
 800e300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e308:	4291      	cmp	r1, r2
 800e30a:	d1f9      	bne.n	800e300 <memcpy+0xe>
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <quorem>:
 800e30e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e312:	6903      	ldr	r3, [r0, #16]
 800e314:	690c      	ldr	r4, [r1, #16]
 800e316:	42a3      	cmp	r3, r4
 800e318:	4607      	mov	r7, r0
 800e31a:	db7e      	blt.n	800e41a <quorem+0x10c>
 800e31c:	3c01      	subs	r4, #1
 800e31e:	f101 0814 	add.w	r8, r1, #20
 800e322:	f100 0514 	add.w	r5, r0, #20
 800e326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e334:	3301      	adds	r3, #1
 800e336:	429a      	cmp	r2, r3
 800e338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e33c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e340:	fbb2 f6f3 	udiv	r6, r2, r3
 800e344:	d331      	bcc.n	800e3aa <quorem+0x9c>
 800e346:	f04f 0e00 	mov.w	lr, #0
 800e34a:	4640      	mov	r0, r8
 800e34c:	46ac      	mov	ip, r5
 800e34e:	46f2      	mov	sl, lr
 800e350:	f850 2b04 	ldr.w	r2, [r0], #4
 800e354:	b293      	uxth	r3, r2
 800e356:	fb06 e303 	mla	r3, r6, r3, lr
 800e35a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e35e:	0c1a      	lsrs	r2, r3, #16
 800e360:	b29b      	uxth	r3, r3
 800e362:	ebaa 0303 	sub.w	r3, sl, r3
 800e366:	f8dc a000 	ldr.w	sl, [ip]
 800e36a:	fa13 f38a 	uxtah	r3, r3, sl
 800e36e:	fb06 220e 	mla	r2, r6, lr, r2
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e37a:	b292      	uxth	r2, r2
 800e37c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e384:	f8bd 3000 	ldrh.w	r3, [sp]
 800e388:	4581      	cmp	r9, r0
 800e38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e38e:	f84c 3b04 	str.w	r3, [ip], #4
 800e392:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e396:	d2db      	bcs.n	800e350 <quorem+0x42>
 800e398:	f855 300b 	ldr.w	r3, [r5, fp]
 800e39c:	b92b      	cbnz	r3, 800e3aa <quorem+0x9c>
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	3b04      	subs	r3, #4
 800e3a2:	429d      	cmp	r5, r3
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	d32c      	bcc.n	800e402 <quorem+0xf4>
 800e3a8:	613c      	str	r4, [r7, #16]
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	f001 fbac 	bl	800fb08 <__mcmp>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	db22      	blt.n	800e3fa <quorem+0xec>
 800e3b4:	3601      	adds	r6, #1
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3be:	f8d1 c000 	ldr.w	ip, [r1]
 800e3c2:	b293      	uxth	r3, r2
 800e3c4:	1ac3      	subs	r3, r0, r3
 800e3c6:	0c12      	lsrs	r2, r2, #16
 800e3c8:	fa13 f38c 	uxtah	r3, r3, ip
 800e3cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e3d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3da:	45c1      	cmp	r9, r8
 800e3dc:	f841 3b04 	str.w	r3, [r1], #4
 800e3e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3e4:	d2e9      	bcs.n	800e3ba <quorem+0xac>
 800e3e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3ee:	b922      	cbnz	r2, 800e3fa <quorem+0xec>
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	429d      	cmp	r5, r3
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	d30a      	bcc.n	800e40e <quorem+0x100>
 800e3f8:	613c      	str	r4, [r7, #16]
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	b003      	add	sp, #12
 800e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e402:	6812      	ldr	r2, [r2, #0]
 800e404:	3b04      	subs	r3, #4
 800e406:	2a00      	cmp	r2, #0
 800e408:	d1ce      	bne.n	800e3a8 <quorem+0x9a>
 800e40a:	3c01      	subs	r4, #1
 800e40c:	e7c9      	b.n	800e3a2 <quorem+0x94>
 800e40e:	6812      	ldr	r2, [r2, #0]
 800e410:	3b04      	subs	r3, #4
 800e412:	2a00      	cmp	r2, #0
 800e414:	d1f0      	bne.n	800e3f8 <quorem+0xea>
 800e416:	3c01      	subs	r4, #1
 800e418:	e7eb      	b.n	800e3f2 <quorem+0xe4>
 800e41a:	2000      	movs	r0, #0
 800e41c:	e7ee      	b.n	800e3fc <quorem+0xee>
	...

0800e420 <_dtoa_r>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	ed2d 8b04 	vpush	{d8-d9}
 800e428:	69c5      	ldr	r5, [r0, #28]
 800e42a:	b093      	sub	sp, #76	; 0x4c
 800e42c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e430:	ec57 6b10 	vmov	r6, r7, d0
 800e434:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e438:	9107      	str	r1, [sp, #28]
 800e43a:	4604      	mov	r4, r0
 800e43c:	920a      	str	r2, [sp, #40]	; 0x28
 800e43e:	930d      	str	r3, [sp, #52]	; 0x34
 800e440:	b975      	cbnz	r5, 800e460 <_dtoa_r+0x40>
 800e442:	2010      	movs	r0, #16
 800e444:	f000 ff82 	bl	800f34c <malloc>
 800e448:	4602      	mov	r2, r0
 800e44a:	61e0      	str	r0, [r4, #28]
 800e44c:	b920      	cbnz	r0, 800e458 <_dtoa_r+0x38>
 800e44e:	4bae      	ldr	r3, [pc, #696]	; (800e708 <_dtoa_r+0x2e8>)
 800e450:	21ef      	movs	r1, #239	; 0xef
 800e452:	48ae      	ldr	r0, [pc, #696]	; (800e70c <_dtoa_r+0x2ec>)
 800e454:	f001 fd3a 	bl	800fecc <__assert_func>
 800e458:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e45c:	6005      	str	r5, [r0, #0]
 800e45e:	60c5      	str	r5, [r0, #12]
 800e460:	69e3      	ldr	r3, [r4, #28]
 800e462:	6819      	ldr	r1, [r3, #0]
 800e464:	b151      	cbz	r1, 800e47c <_dtoa_r+0x5c>
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	604a      	str	r2, [r1, #4]
 800e46a:	2301      	movs	r3, #1
 800e46c:	4093      	lsls	r3, r2
 800e46e:	608b      	str	r3, [r1, #8]
 800e470:	4620      	mov	r0, r4
 800e472:	f001 f90d 	bl	800f690 <_Bfree>
 800e476:	69e3      	ldr	r3, [r4, #28]
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	1e3b      	subs	r3, r7, #0
 800e47e:	bfbb      	ittet	lt
 800e480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e484:	9303      	strlt	r3, [sp, #12]
 800e486:	2300      	movge	r3, #0
 800e488:	2201      	movlt	r2, #1
 800e48a:	bfac      	ite	ge
 800e48c:	f8c8 3000 	strge.w	r3, [r8]
 800e490:	f8c8 2000 	strlt.w	r2, [r8]
 800e494:	4b9e      	ldr	r3, [pc, #632]	; (800e710 <_dtoa_r+0x2f0>)
 800e496:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e49a:	ea33 0308 	bics.w	r3, r3, r8
 800e49e:	d11b      	bne.n	800e4d8 <_dtoa_r+0xb8>
 800e4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e4ac:	4333      	orrs	r3, r6
 800e4ae:	f000 8593 	beq.w	800efd8 <_dtoa_r+0xbb8>
 800e4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4b4:	b963      	cbnz	r3, 800e4d0 <_dtoa_r+0xb0>
 800e4b6:	4b97      	ldr	r3, [pc, #604]	; (800e714 <_dtoa_r+0x2f4>)
 800e4b8:	e027      	b.n	800e50a <_dtoa_r+0xea>
 800e4ba:	4b97      	ldr	r3, [pc, #604]	; (800e718 <_dtoa_r+0x2f8>)
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	9800      	ldr	r0, [sp, #0]
 800e4c6:	b013      	add	sp, #76	; 0x4c
 800e4c8:	ecbd 8b04 	vpop	{d8-d9}
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	4b90      	ldr	r3, [pc, #576]	; (800e714 <_dtoa_r+0x2f4>)
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	3303      	adds	r3, #3
 800e4d6:	e7f3      	b.n	800e4c0 <_dtoa_r+0xa0>
 800e4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	ec51 0b17 	vmov	r0, r1, d7
 800e4e2:	eeb0 8a47 	vmov.f32	s16, s14
 800e4e6:	eef0 8a67 	vmov.f32	s17, s15
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f7f2 fb0c 	bl	8000b08 <__aeabi_dcmpeq>
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	b160      	cbz	r0, 800e50e <_dtoa_r+0xee>
 800e4f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 8568 	beq.w	800efd2 <_dtoa_r+0xbb2>
 800e502:	4b86      	ldr	r3, [pc, #536]	; (800e71c <_dtoa_r+0x2fc>)
 800e504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	3b01      	subs	r3, #1
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	e7da      	b.n	800e4c4 <_dtoa_r+0xa4>
 800e50e:	aa10      	add	r2, sp, #64	; 0x40
 800e510:	a911      	add	r1, sp, #68	; 0x44
 800e512:	4620      	mov	r0, r4
 800e514:	eeb0 0a48 	vmov.f32	s0, s16
 800e518:	eef0 0a68 	vmov.f32	s1, s17
 800e51c:	f001 fb9a 	bl	800fc54 <__d2b>
 800e520:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e524:	4682      	mov	sl, r0
 800e526:	2d00      	cmp	r5, #0
 800e528:	d07f      	beq.n	800e62a <_dtoa_r+0x20a>
 800e52a:	ee18 3a90 	vmov	r3, s17
 800e52e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e532:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e536:	ec51 0b18 	vmov	r0, r1, d8
 800e53a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e542:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e546:	4619      	mov	r1, r3
 800e548:	2200      	movs	r2, #0
 800e54a:	4b75      	ldr	r3, [pc, #468]	; (800e720 <_dtoa_r+0x300>)
 800e54c:	f7f1 febc 	bl	80002c8 <__aeabi_dsub>
 800e550:	a367      	add	r3, pc, #412	; (adr r3, 800e6f0 <_dtoa_r+0x2d0>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	f7f2 f86f 	bl	8000638 <__aeabi_dmul>
 800e55a:	a367      	add	r3, pc, #412	; (adr r3, 800e6f8 <_dtoa_r+0x2d8>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f1 feb4 	bl	80002cc <__adddf3>
 800e564:	4606      	mov	r6, r0
 800e566:	4628      	mov	r0, r5
 800e568:	460f      	mov	r7, r1
 800e56a:	f7f1 fffb 	bl	8000564 <__aeabi_i2d>
 800e56e:	a364      	add	r3, pc, #400	; (adr r3, 800e700 <_dtoa_r+0x2e0>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	f7f2 f860 	bl	8000638 <__aeabi_dmul>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	4630      	mov	r0, r6
 800e57e:	4639      	mov	r1, r7
 800e580:	f7f1 fea4 	bl	80002cc <__adddf3>
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	f7f2 fb06 	bl	8000b98 <__aeabi_d2iz>
 800e58c:	2200      	movs	r2, #0
 800e58e:	4683      	mov	fp, r0
 800e590:	2300      	movs	r3, #0
 800e592:	4630      	mov	r0, r6
 800e594:	4639      	mov	r1, r7
 800e596:	f7f2 fac1 	bl	8000b1c <__aeabi_dcmplt>
 800e59a:	b148      	cbz	r0, 800e5b0 <_dtoa_r+0x190>
 800e59c:	4658      	mov	r0, fp
 800e59e:	f7f1 ffe1 	bl	8000564 <__aeabi_i2d>
 800e5a2:	4632      	mov	r2, r6
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	f7f2 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 800e5aa:	b908      	cbnz	r0, 800e5b0 <_dtoa_r+0x190>
 800e5ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5b0:	f1bb 0f16 	cmp.w	fp, #22
 800e5b4:	d857      	bhi.n	800e666 <_dtoa_r+0x246>
 800e5b6:	4b5b      	ldr	r3, [pc, #364]	; (800e724 <_dtoa_r+0x304>)
 800e5b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	ec51 0b18 	vmov	r0, r1, d8
 800e5c4:	f7f2 faaa 	bl	8000b1c <__aeabi_dcmplt>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d04e      	beq.n	800e66a <_dtoa_r+0x24a>
 800e5cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	930c      	str	r3, [sp, #48]	; 0x30
 800e5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5d6:	1b5b      	subs	r3, r3, r5
 800e5d8:	1e5a      	subs	r2, r3, #1
 800e5da:	bf45      	ittet	mi
 800e5dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800e5e0:	9305      	strmi	r3, [sp, #20]
 800e5e2:	2300      	movpl	r3, #0
 800e5e4:	2300      	movmi	r3, #0
 800e5e6:	9206      	str	r2, [sp, #24]
 800e5e8:	bf54      	ite	pl
 800e5ea:	9305      	strpl	r3, [sp, #20]
 800e5ec:	9306      	strmi	r3, [sp, #24]
 800e5ee:	f1bb 0f00 	cmp.w	fp, #0
 800e5f2:	db3c      	blt.n	800e66e <_dtoa_r+0x24e>
 800e5f4:	9b06      	ldr	r3, [sp, #24]
 800e5f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e5fa:	445b      	add	r3, fp
 800e5fc:	9306      	str	r3, [sp, #24]
 800e5fe:	2300      	movs	r3, #0
 800e600:	9308      	str	r3, [sp, #32]
 800e602:	9b07      	ldr	r3, [sp, #28]
 800e604:	2b09      	cmp	r3, #9
 800e606:	d868      	bhi.n	800e6da <_dtoa_r+0x2ba>
 800e608:	2b05      	cmp	r3, #5
 800e60a:	bfc4      	itt	gt
 800e60c:	3b04      	subgt	r3, #4
 800e60e:	9307      	strgt	r3, [sp, #28]
 800e610:	9b07      	ldr	r3, [sp, #28]
 800e612:	f1a3 0302 	sub.w	r3, r3, #2
 800e616:	bfcc      	ite	gt
 800e618:	2500      	movgt	r5, #0
 800e61a:	2501      	movle	r5, #1
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	f200 8085 	bhi.w	800e72c <_dtoa_r+0x30c>
 800e622:	e8df f003 	tbb	[pc, r3]
 800e626:	3b2e      	.short	0x3b2e
 800e628:	5839      	.short	0x5839
 800e62a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e62e:	441d      	add	r5, r3
 800e630:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e634:	2b20      	cmp	r3, #32
 800e636:	bfc1      	itttt	gt
 800e638:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e63c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e640:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e644:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e648:	bfd6      	itet	le
 800e64a:	f1c3 0320 	rsble	r3, r3, #32
 800e64e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e652:	fa06 f003 	lslle.w	r0, r6, r3
 800e656:	f7f1 ff75 	bl	8000544 <__aeabi_ui2d>
 800e65a:	2201      	movs	r2, #1
 800e65c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e660:	3d01      	subs	r5, #1
 800e662:	920e      	str	r2, [sp, #56]	; 0x38
 800e664:	e76f      	b.n	800e546 <_dtoa_r+0x126>
 800e666:	2301      	movs	r3, #1
 800e668:	e7b3      	b.n	800e5d2 <_dtoa_r+0x1b2>
 800e66a:	900c      	str	r0, [sp, #48]	; 0x30
 800e66c:	e7b2      	b.n	800e5d4 <_dtoa_r+0x1b4>
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	eba3 030b 	sub.w	r3, r3, fp
 800e674:	9305      	str	r3, [sp, #20]
 800e676:	f1cb 0300 	rsb	r3, fp, #0
 800e67a:	9308      	str	r3, [sp, #32]
 800e67c:	2300      	movs	r3, #0
 800e67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e680:	e7bf      	b.n	800e602 <_dtoa_r+0x1e2>
 800e682:	2300      	movs	r3, #0
 800e684:	9309      	str	r3, [sp, #36]	; 0x24
 800e686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dc52      	bgt.n	800e732 <_dtoa_r+0x312>
 800e68c:	2301      	movs	r3, #1
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	461a      	mov	r2, r3
 800e694:	920a      	str	r2, [sp, #40]	; 0x28
 800e696:	e00b      	b.n	800e6b0 <_dtoa_r+0x290>
 800e698:	2301      	movs	r3, #1
 800e69a:	e7f3      	b.n	800e684 <_dtoa_r+0x264>
 800e69c:	2300      	movs	r3, #0
 800e69e:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a2:	445b      	add	r3, fp
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	9304      	str	r3, [sp, #16]
 800e6ac:	bfb8      	it	lt
 800e6ae:	2301      	movlt	r3, #1
 800e6b0:	69e0      	ldr	r0, [r4, #28]
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	2204      	movs	r2, #4
 800e6b6:	f102 0614 	add.w	r6, r2, #20
 800e6ba:	429e      	cmp	r6, r3
 800e6bc:	d93d      	bls.n	800e73a <_dtoa_r+0x31a>
 800e6be:	6041      	str	r1, [r0, #4]
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 ffa5 	bl	800f610 <_Balloc>
 800e6c6:	9000      	str	r0, [sp, #0]
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d139      	bne.n	800e740 <_dtoa_r+0x320>
 800e6cc:	4b16      	ldr	r3, [pc, #88]	; (800e728 <_dtoa_r+0x308>)
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	f240 11af 	movw	r1, #431	; 0x1af
 800e6d4:	e6bd      	b.n	800e452 <_dtoa_r+0x32>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e7e1      	b.n	800e69e <_dtoa_r+0x27e>
 800e6da:	2501      	movs	r5, #1
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	9509      	str	r5, [sp, #36]	; 0x24
 800e6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6e6:	9301      	str	r3, [sp, #4]
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	2312      	movs	r3, #18
 800e6ee:	e7d1      	b.n	800e694 <_dtoa_r+0x274>
 800e6f0:	636f4361 	.word	0x636f4361
 800e6f4:	3fd287a7 	.word	0x3fd287a7
 800e6f8:	8b60c8b3 	.word	0x8b60c8b3
 800e6fc:	3fc68a28 	.word	0x3fc68a28
 800e700:	509f79fb 	.word	0x509f79fb
 800e704:	3fd34413 	.word	0x3fd34413
 800e708:	08011ae5 	.word	0x08011ae5
 800e70c:	08011afc 	.word	0x08011afc
 800e710:	7ff00000 	.word	0x7ff00000
 800e714:	08011ae1 	.word	0x08011ae1
 800e718:	08011ad8 	.word	0x08011ad8
 800e71c:	08011ab5 	.word	0x08011ab5
 800e720:	3ff80000 	.word	0x3ff80000
 800e724:	08011bf8 	.word	0x08011bf8
 800e728:	08011b54 	.word	0x08011b54
 800e72c:	2301      	movs	r3, #1
 800e72e:	9309      	str	r3, [sp, #36]	; 0x24
 800e730:	e7d7      	b.n	800e6e2 <_dtoa_r+0x2c2>
 800e732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	e7ba      	b.n	800e6b0 <_dtoa_r+0x290>
 800e73a:	3101      	adds	r1, #1
 800e73c:	0052      	lsls	r2, r2, #1
 800e73e:	e7ba      	b.n	800e6b6 <_dtoa_r+0x296>
 800e740:	69e3      	ldr	r3, [r4, #28]
 800e742:	9a00      	ldr	r2, [sp, #0]
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	9b04      	ldr	r3, [sp, #16]
 800e748:	2b0e      	cmp	r3, #14
 800e74a:	f200 80a8 	bhi.w	800e89e <_dtoa_r+0x47e>
 800e74e:	2d00      	cmp	r5, #0
 800e750:	f000 80a5 	beq.w	800e89e <_dtoa_r+0x47e>
 800e754:	f1bb 0f00 	cmp.w	fp, #0
 800e758:	dd38      	ble.n	800e7cc <_dtoa_r+0x3ac>
 800e75a:	4bc0      	ldr	r3, [pc, #768]	; (800ea5c <_dtoa_r+0x63c>)
 800e75c:	f00b 020f 	and.w	r2, fp, #15
 800e760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e764:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e768:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e76c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e770:	d019      	beq.n	800e7a6 <_dtoa_r+0x386>
 800e772:	4bbb      	ldr	r3, [pc, #748]	; (800ea60 <_dtoa_r+0x640>)
 800e774:	ec51 0b18 	vmov	r0, r1, d8
 800e778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e77c:	f7f2 f886 	bl	800088c <__aeabi_ddiv>
 800e780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e784:	f008 080f 	and.w	r8, r8, #15
 800e788:	2503      	movs	r5, #3
 800e78a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ea60 <_dtoa_r+0x640>
 800e78e:	f1b8 0f00 	cmp.w	r8, #0
 800e792:	d10a      	bne.n	800e7aa <_dtoa_r+0x38a>
 800e794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e798:	4632      	mov	r2, r6
 800e79a:	463b      	mov	r3, r7
 800e79c:	f7f2 f876 	bl	800088c <__aeabi_ddiv>
 800e7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7a4:	e02b      	b.n	800e7fe <_dtoa_r+0x3de>
 800e7a6:	2502      	movs	r5, #2
 800e7a8:	e7ef      	b.n	800e78a <_dtoa_r+0x36a>
 800e7aa:	f018 0f01 	tst.w	r8, #1
 800e7ae:	d008      	beq.n	800e7c2 <_dtoa_r+0x3a2>
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7b8:	f7f1 ff3e 	bl	8000638 <__aeabi_dmul>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7c6:	f109 0908 	add.w	r9, r9, #8
 800e7ca:	e7e0      	b.n	800e78e <_dtoa_r+0x36e>
 800e7cc:	f000 809f 	beq.w	800e90e <_dtoa_r+0x4ee>
 800e7d0:	f1cb 0600 	rsb	r6, fp, #0
 800e7d4:	4ba1      	ldr	r3, [pc, #644]	; (800ea5c <_dtoa_r+0x63c>)
 800e7d6:	4fa2      	ldr	r7, [pc, #648]	; (800ea60 <_dtoa_r+0x640>)
 800e7d8:	f006 020f 	and.w	r2, r6, #15
 800e7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	ec51 0b18 	vmov	r0, r1, d8
 800e7e8:	f7f1 ff26 	bl	8000638 <__aeabi_dmul>
 800e7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7f0:	1136      	asrs	r6, r6, #4
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	2502      	movs	r5, #2
 800e7f6:	2e00      	cmp	r6, #0
 800e7f8:	d17e      	bne.n	800e8f8 <_dtoa_r+0x4d8>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1d0      	bne.n	800e7a0 <_dtoa_r+0x380>
 800e7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e800:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 8084 	beq.w	800e912 <_dtoa_r+0x4f2>
 800e80a:	4b96      	ldr	r3, [pc, #600]	; (800ea64 <_dtoa_r+0x644>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	4640      	mov	r0, r8
 800e810:	4649      	mov	r1, r9
 800e812:	f7f2 f983 	bl	8000b1c <__aeabi_dcmplt>
 800e816:	2800      	cmp	r0, #0
 800e818:	d07b      	beq.n	800e912 <_dtoa_r+0x4f2>
 800e81a:	9b04      	ldr	r3, [sp, #16]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d078      	beq.n	800e912 <_dtoa_r+0x4f2>
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	dd39      	ble.n	800e89a <_dtoa_r+0x47a>
 800e826:	4b90      	ldr	r3, [pc, #576]	; (800ea68 <_dtoa_r+0x648>)
 800e828:	2200      	movs	r2, #0
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f1 ff03 	bl	8000638 <__aeabi_dmul>
 800e832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e836:	9e01      	ldr	r6, [sp, #4]
 800e838:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e83c:	3501      	adds	r5, #1
 800e83e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e842:	4628      	mov	r0, r5
 800e844:	f7f1 fe8e 	bl	8000564 <__aeabi_i2d>
 800e848:	4642      	mov	r2, r8
 800e84a:	464b      	mov	r3, r9
 800e84c:	f7f1 fef4 	bl	8000638 <__aeabi_dmul>
 800e850:	4b86      	ldr	r3, [pc, #536]	; (800ea6c <_dtoa_r+0x64c>)
 800e852:	2200      	movs	r2, #0
 800e854:	f7f1 fd3a 	bl	80002cc <__adddf3>
 800e858:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e860:	9303      	str	r3, [sp, #12]
 800e862:	2e00      	cmp	r6, #0
 800e864:	d158      	bne.n	800e918 <_dtoa_r+0x4f8>
 800e866:	4b82      	ldr	r3, [pc, #520]	; (800ea70 <_dtoa_r+0x650>)
 800e868:	2200      	movs	r2, #0
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7f1 fd2b 	bl	80002c8 <__aeabi_dsub>
 800e872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e876:	4680      	mov	r8, r0
 800e878:	4689      	mov	r9, r1
 800e87a:	f7f2 f96d 	bl	8000b58 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	f040 8296 	bne.w	800edb0 <_dtoa_r+0x990>
 800e884:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e888:	4640      	mov	r0, r8
 800e88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e88e:	4649      	mov	r1, r9
 800e890:	f7f2 f944 	bl	8000b1c <__aeabi_dcmplt>
 800e894:	2800      	cmp	r0, #0
 800e896:	f040 8289 	bne.w	800edac <_dtoa_r+0x98c>
 800e89a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f2c0 814e 	blt.w	800eb42 <_dtoa_r+0x722>
 800e8a6:	f1bb 0f0e 	cmp.w	fp, #14
 800e8aa:	f300 814a 	bgt.w	800eb42 <_dtoa_r+0x722>
 800e8ae:	4b6b      	ldr	r3, [pc, #428]	; (800ea5c <_dtoa_r+0x63c>)
 800e8b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f280 80dc 	bge.w	800ea78 <_dtoa_r+0x658>
 800e8c0:	9b04      	ldr	r3, [sp, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f300 80d8 	bgt.w	800ea78 <_dtoa_r+0x658>
 800e8c8:	f040 826f 	bne.w	800edaa <_dtoa_r+0x98a>
 800e8cc:	4b68      	ldr	r3, [pc, #416]	; (800ea70 <_dtoa_r+0x650>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	f7f1 feb0 	bl	8000638 <__aeabi_dmul>
 800e8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8dc:	f7f2 f932 	bl	8000b44 <__aeabi_dcmpge>
 800e8e0:	9e04      	ldr	r6, [sp, #16]
 800e8e2:	4637      	mov	r7, r6
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f040 8245 	bne.w	800ed74 <_dtoa_r+0x954>
 800e8ea:	9d00      	ldr	r5, [sp, #0]
 800e8ec:	2331      	movs	r3, #49	; 0x31
 800e8ee:	f805 3b01 	strb.w	r3, [r5], #1
 800e8f2:	f10b 0b01 	add.w	fp, fp, #1
 800e8f6:	e241      	b.n	800ed7c <_dtoa_r+0x95c>
 800e8f8:	07f2      	lsls	r2, r6, #31
 800e8fa:	d505      	bpl.n	800e908 <_dtoa_r+0x4e8>
 800e8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e900:	f7f1 fe9a 	bl	8000638 <__aeabi_dmul>
 800e904:	3501      	adds	r5, #1
 800e906:	2301      	movs	r3, #1
 800e908:	1076      	asrs	r6, r6, #1
 800e90a:	3708      	adds	r7, #8
 800e90c:	e773      	b.n	800e7f6 <_dtoa_r+0x3d6>
 800e90e:	2502      	movs	r5, #2
 800e910:	e775      	b.n	800e7fe <_dtoa_r+0x3de>
 800e912:	9e04      	ldr	r6, [sp, #16]
 800e914:	465f      	mov	r7, fp
 800e916:	e792      	b.n	800e83e <_dtoa_r+0x41e>
 800e918:	9900      	ldr	r1, [sp, #0]
 800e91a:	4b50      	ldr	r3, [pc, #320]	; (800ea5c <_dtoa_r+0x63c>)
 800e91c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e920:	4431      	add	r1, r6
 800e922:	9102      	str	r1, [sp, #8]
 800e924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e926:	eeb0 9a47 	vmov.f32	s18, s14
 800e92a:	eef0 9a67 	vmov.f32	s19, s15
 800e92e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e932:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e936:	2900      	cmp	r1, #0
 800e938:	d044      	beq.n	800e9c4 <_dtoa_r+0x5a4>
 800e93a:	494e      	ldr	r1, [pc, #312]	; (800ea74 <_dtoa_r+0x654>)
 800e93c:	2000      	movs	r0, #0
 800e93e:	f7f1 ffa5 	bl	800088c <__aeabi_ddiv>
 800e942:	ec53 2b19 	vmov	r2, r3, d9
 800e946:	f7f1 fcbf 	bl	80002c8 <__aeabi_dsub>
 800e94a:	9d00      	ldr	r5, [sp, #0]
 800e94c:	ec41 0b19 	vmov	d9, r0, r1
 800e950:	4649      	mov	r1, r9
 800e952:	4640      	mov	r0, r8
 800e954:	f7f2 f920 	bl	8000b98 <__aeabi_d2iz>
 800e958:	4606      	mov	r6, r0
 800e95a:	f7f1 fe03 	bl	8000564 <__aeabi_i2d>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4640      	mov	r0, r8
 800e964:	4649      	mov	r1, r9
 800e966:	f7f1 fcaf 	bl	80002c8 <__aeabi_dsub>
 800e96a:	3630      	adds	r6, #48	; 0x30
 800e96c:	f805 6b01 	strb.w	r6, [r5], #1
 800e970:	ec53 2b19 	vmov	r2, r3, d9
 800e974:	4680      	mov	r8, r0
 800e976:	4689      	mov	r9, r1
 800e978:	f7f2 f8d0 	bl	8000b1c <__aeabi_dcmplt>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d164      	bne.n	800ea4a <_dtoa_r+0x62a>
 800e980:	4642      	mov	r2, r8
 800e982:	464b      	mov	r3, r9
 800e984:	4937      	ldr	r1, [pc, #220]	; (800ea64 <_dtoa_r+0x644>)
 800e986:	2000      	movs	r0, #0
 800e988:	f7f1 fc9e 	bl	80002c8 <__aeabi_dsub>
 800e98c:	ec53 2b19 	vmov	r2, r3, d9
 800e990:	f7f2 f8c4 	bl	8000b1c <__aeabi_dcmplt>
 800e994:	2800      	cmp	r0, #0
 800e996:	f040 80b6 	bne.w	800eb06 <_dtoa_r+0x6e6>
 800e99a:	9b02      	ldr	r3, [sp, #8]
 800e99c:	429d      	cmp	r5, r3
 800e99e:	f43f af7c 	beq.w	800e89a <_dtoa_r+0x47a>
 800e9a2:	4b31      	ldr	r3, [pc, #196]	; (800ea68 <_dtoa_r+0x648>)
 800e9a4:	ec51 0b19 	vmov	r0, r1, d9
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f7f1 fe45 	bl	8000638 <__aeabi_dmul>
 800e9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ea68 <_dtoa_r+0x648>)
 800e9b0:	ec41 0b19 	vmov	d9, r0, r1
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f1 fe3d 	bl	8000638 <__aeabi_dmul>
 800e9be:	4680      	mov	r8, r0
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	e7c5      	b.n	800e950 <_dtoa_r+0x530>
 800e9c4:	ec51 0b17 	vmov	r0, r1, d7
 800e9c8:	f7f1 fe36 	bl	8000638 <__aeabi_dmul>
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	9d00      	ldr	r5, [sp, #0]
 800e9d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9d2:	ec41 0b19 	vmov	d9, r0, r1
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f7f2 f8dd 	bl	8000b98 <__aeabi_d2iz>
 800e9de:	4606      	mov	r6, r0
 800e9e0:	f7f1 fdc0 	bl	8000564 <__aeabi_i2d>
 800e9e4:	3630      	adds	r6, #48	; 0x30
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	f7f1 fc6b 	bl	80002c8 <__aeabi_dsub>
 800e9f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e9f6:	9b02      	ldr	r3, [sp, #8]
 800e9f8:	429d      	cmp	r5, r3
 800e9fa:	4680      	mov	r8, r0
 800e9fc:	4689      	mov	r9, r1
 800e9fe:	f04f 0200 	mov.w	r2, #0
 800ea02:	d124      	bne.n	800ea4e <_dtoa_r+0x62e>
 800ea04:	4b1b      	ldr	r3, [pc, #108]	; (800ea74 <_dtoa_r+0x654>)
 800ea06:	ec51 0b19 	vmov	r0, r1, d9
 800ea0a:	f7f1 fc5f 	bl	80002cc <__adddf3>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	f7f2 f89f 	bl	8000b58 <__aeabi_dcmpgt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d173      	bne.n	800eb06 <_dtoa_r+0x6e6>
 800ea1e:	ec53 2b19 	vmov	r2, r3, d9
 800ea22:	4914      	ldr	r1, [pc, #80]	; (800ea74 <_dtoa_r+0x654>)
 800ea24:	2000      	movs	r0, #0
 800ea26:	f7f1 fc4f 	bl	80002c8 <__aeabi_dsub>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4640      	mov	r0, r8
 800ea30:	4649      	mov	r1, r9
 800ea32:	f7f2 f873 	bl	8000b1c <__aeabi_dcmplt>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	f43f af2f 	beq.w	800e89a <_dtoa_r+0x47a>
 800ea3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea3e:	1e6b      	subs	r3, r5, #1
 800ea40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea46:	2b30      	cmp	r3, #48	; 0x30
 800ea48:	d0f8      	beq.n	800ea3c <_dtoa_r+0x61c>
 800ea4a:	46bb      	mov	fp, r7
 800ea4c:	e04a      	b.n	800eae4 <_dtoa_r+0x6c4>
 800ea4e:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <_dtoa_r+0x648>)
 800ea50:	f7f1 fdf2 	bl	8000638 <__aeabi_dmul>
 800ea54:	4680      	mov	r8, r0
 800ea56:	4689      	mov	r9, r1
 800ea58:	e7bd      	b.n	800e9d6 <_dtoa_r+0x5b6>
 800ea5a:	bf00      	nop
 800ea5c:	08011bf8 	.word	0x08011bf8
 800ea60:	08011bd0 	.word	0x08011bd0
 800ea64:	3ff00000 	.word	0x3ff00000
 800ea68:	40240000 	.word	0x40240000
 800ea6c:	401c0000 	.word	0x401c0000
 800ea70:	40140000 	.word	0x40140000
 800ea74:	3fe00000 	.word	0x3fe00000
 800ea78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea7c:	9d00      	ldr	r5, [sp, #0]
 800ea7e:	4642      	mov	r2, r8
 800ea80:	464b      	mov	r3, r9
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f1 ff01 	bl	800088c <__aeabi_ddiv>
 800ea8a:	f7f2 f885 	bl	8000b98 <__aeabi_d2iz>
 800ea8e:	9001      	str	r0, [sp, #4]
 800ea90:	f7f1 fd68 	bl	8000564 <__aeabi_i2d>
 800ea94:	4642      	mov	r2, r8
 800ea96:	464b      	mov	r3, r9
 800ea98:	f7f1 fdce 	bl	8000638 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fc10 	bl	80002c8 <__aeabi_dsub>
 800eaa8:	9e01      	ldr	r6, [sp, #4]
 800eaaa:	9f04      	ldr	r7, [sp, #16]
 800eaac:	3630      	adds	r6, #48	; 0x30
 800eaae:	f805 6b01 	strb.w	r6, [r5], #1
 800eab2:	9e00      	ldr	r6, [sp, #0]
 800eab4:	1bae      	subs	r6, r5, r6
 800eab6:	42b7      	cmp	r7, r6
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	d134      	bne.n	800eb28 <_dtoa_r+0x708>
 800eabe:	f7f1 fc05 	bl	80002cc <__adddf3>
 800eac2:	4642      	mov	r2, r8
 800eac4:	464b      	mov	r3, r9
 800eac6:	4606      	mov	r6, r0
 800eac8:	460f      	mov	r7, r1
 800eaca:	f7f2 f845 	bl	8000b58 <__aeabi_dcmpgt>
 800eace:	b9c8      	cbnz	r0, 800eb04 <_dtoa_r+0x6e4>
 800ead0:	4642      	mov	r2, r8
 800ead2:	464b      	mov	r3, r9
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f2 f816 	bl	8000b08 <__aeabi_dcmpeq>
 800eadc:	b110      	cbz	r0, 800eae4 <_dtoa_r+0x6c4>
 800eade:	9b01      	ldr	r3, [sp, #4]
 800eae0:	07db      	lsls	r3, r3, #31
 800eae2:	d40f      	bmi.n	800eb04 <_dtoa_r+0x6e4>
 800eae4:	4651      	mov	r1, sl
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 fdd2 	bl	800f690 <_Bfree>
 800eaec:	2300      	movs	r3, #0
 800eaee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eaf0:	702b      	strb	r3, [r5, #0]
 800eaf2:	f10b 0301 	add.w	r3, fp, #1
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f43f ace2 	beq.w	800e4c4 <_dtoa_r+0xa4>
 800eb00:	601d      	str	r5, [r3, #0]
 800eb02:	e4df      	b.n	800e4c4 <_dtoa_r+0xa4>
 800eb04:	465f      	mov	r7, fp
 800eb06:	462b      	mov	r3, r5
 800eb08:	461d      	mov	r5, r3
 800eb0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb0e:	2a39      	cmp	r2, #57	; 0x39
 800eb10:	d106      	bne.n	800eb20 <_dtoa_r+0x700>
 800eb12:	9a00      	ldr	r2, [sp, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d1f7      	bne.n	800eb08 <_dtoa_r+0x6e8>
 800eb18:	9900      	ldr	r1, [sp, #0]
 800eb1a:	2230      	movs	r2, #48	; 0x30
 800eb1c:	3701      	adds	r7, #1
 800eb1e:	700a      	strb	r2, [r1, #0]
 800eb20:	781a      	ldrb	r2, [r3, #0]
 800eb22:	3201      	adds	r2, #1
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	e790      	b.n	800ea4a <_dtoa_r+0x62a>
 800eb28:	4ba3      	ldr	r3, [pc, #652]	; (800edb8 <_dtoa_r+0x998>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f7f1 fd84 	bl	8000638 <__aeabi_dmul>
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	4606      	mov	r6, r0
 800eb36:	460f      	mov	r7, r1
 800eb38:	f7f1 ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d09e      	beq.n	800ea7e <_dtoa_r+0x65e>
 800eb40:	e7d0      	b.n	800eae4 <_dtoa_r+0x6c4>
 800eb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	f000 80ca 	beq.w	800ecde <_dtoa_r+0x8be>
 800eb4a:	9a07      	ldr	r2, [sp, #28]
 800eb4c:	2a01      	cmp	r2, #1
 800eb4e:	f300 80ad 	bgt.w	800ecac <_dtoa_r+0x88c>
 800eb52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	f000 80a5 	beq.w	800eca4 <_dtoa_r+0x884>
 800eb5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb5e:	9e08      	ldr	r6, [sp, #32]
 800eb60:	9d05      	ldr	r5, [sp, #20]
 800eb62:	9a05      	ldr	r2, [sp, #20]
 800eb64:	441a      	add	r2, r3
 800eb66:	9205      	str	r2, [sp, #20]
 800eb68:	9a06      	ldr	r2, [sp, #24]
 800eb6a:	2101      	movs	r1, #1
 800eb6c:	441a      	add	r2, r3
 800eb6e:	4620      	mov	r0, r4
 800eb70:	9206      	str	r2, [sp, #24]
 800eb72:	f000 fe43 	bl	800f7fc <__i2b>
 800eb76:	4607      	mov	r7, r0
 800eb78:	b165      	cbz	r5, 800eb94 <_dtoa_r+0x774>
 800eb7a:	9b06      	ldr	r3, [sp, #24]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	dd09      	ble.n	800eb94 <_dtoa_r+0x774>
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	9a05      	ldr	r2, [sp, #20]
 800eb84:	bfa8      	it	ge
 800eb86:	462b      	movge	r3, r5
 800eb88:	1ad2      	subs	r2, r2, r3
 800eb8a:	9205      	str	r2, [sp, #20]
 800eb8c:	9a06      	ldr	r2, [sp, #24]
 800eb8e:	1aed      	subs	r5, r5, r3
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	9306      	str	r3, [sp, #24]
 800eb94:	9b08      	ldr	r3, [sp, #32]
 800eb96:	b1f3      	cbz	r3, 800ebd6 <_dtoa_r+0x7b6>
 800eb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 80a3 	beq.w	800ece6 <_dtoa_r+0x8c6>
 800eba0:	2e00      	cmp	r6, #0
 800eba2:	dd10      	ble.n	800ebc6 <_dtoa_r+0x7a6>
 800eba4:	4639      	mov	r1, r7
 800eba6:	4632      	mov	r2, r6
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f000 fee7 	bl	800f97c <__pow5mult>
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4601      	mov	r1, r0
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f000 fe37 	bl	800f828 <__multiply>
 800ebba:	4651      	mov	r1, sl
 800ebbc:	4680      	mov	r8, r0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fd66 	bl	800f690 <_Bfree>
 800ebc4:	46c2      	mov	sl, r8
 800ebc6:	9b08      	ldr	r3, [sp, #32]
 800ebc8:	1b9a      	subs	r2, r3, r6
 800ebca:	d004      	beq.n	800ebd6 <_dtoa_r+0x7b6>
 800ebcc:	4651      	mov	r1, sl
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 fed4 	bl	800f97c <__pow5mult>
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	2101      	movs	r1, #1
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f000 fe0f 	bl	800f7fc <__i2b>
 800ebde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	f340 8081 	ble.w	800ecea <_dtoa_r+0x8ca>
 800ebe8:	461a      	mov	r2, r3
 800ebea:	4601      	mov	r1, r0
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 fec5 	bl	800f97c <__pow5mult>
 800ebf2:	9b07      	ldr	r3, [sp, #28]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	dd7a      	ble.n	800ecf0 <_dtoa_r+0x8d0>
 800ebfa:	f04f 0800 	mov.w	r8, #0
 800ebfe:	6933      	ldr	r3, [r6, #16]
 800ec00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec04:	6918      	ldr	r0, [r3, #16]
 800ec06:	f000 fdab 	bl	800f760 <__hi0bits>
 800ec0a:	f1c0 0020 	rsb	r0, r0, #32
 800ec0e:	9b06      	ldr	r3, [sp, #24]
 800ec10:	4418      	add	r0, r3
 800ec12:	f010 001f 	ands.w	r0, r0, #31
 800ec16:	f000 8094 	beq.w	800ed42 <_dtoa_r+0x922>
 800ec1a:	f1c0 0320 	rsb	r3, r0, #32
 800ec1e:	2b04      	cmp	r3, #4
 800ec20:	f340 8085 	ble.w	800ed2e <_dtoa_r+0x90e>
 800ec24:	9b05      	ldr	r3, [sp, #20]
 800ec26:	f1c0 001c 	rsb	r0, r0, #28
 800ec2a:	4403      	add	r3, r0
 800ec2c:	9305      	str	r3, [sp, #20]
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	4403      	add	r3, r0
 800ec32:	4405      	add	r5, r0
 800ec34:	9306      	str	r3, [sp, #24]
 800ec36:	9b05      	ldr	r3, [sp, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	dd05      	ble.n	800ec48 <_dtoa_r+0x828>
 800ec3c:	4651      	mov	r1, sl
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 fef5 	bl	800fa30 <__lshift>
 800ec46:	4682      	mov	sl, r0
 800ec48:	9b06      	ldr	r3, [sp, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dd05      	ble.n	800ec5a <_dtoa_r+0x83a>
 800ec4e:	4631      	mov	r1, r6
 800ec50:	461a      	mov	r2, r3
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 feec 	bl	800fa30 <__lshift>
 800ec58:	4606      	mov	r6, r0
 800ec5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d072      	beq.n	800ed46 <_dtoa_r+0x926>
 800ec60:	4631      	mov	r1, r6
 800ec62:	4650      	mov	r0, sl
 800ec64:	f000 ff50 	bl	800fb08 <__mcmp>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	da6c      	bge.n	800ed46 <_dtoa_r+0x926>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4651      	mov	r1, sl
 800ec70:	220a      	movs	r2, #10
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 fd2e 	bl	800f6d4 <__multadd>
 800ec78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ec7e:	4682      	mov	sl, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 81b0 	beq.w	800efe6 <_dtoa_r+0xbc6>
 800ec86:	2300      	movs	r3, #0
 800ec88:	4639      	mov	r1, r7
 800ec8a:	220a      	movs	r2, #10
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fd21 	bl	800f6d4 <__multadd>
 800ec92:	9b01      	ldr	r3, [sp, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	4607      	mov	r7, r0
 800ec98:	f300 8096 	bgt.w	800edc8 <_dtoa_r+0x9a8>
 800ec9c:	9b07      	ldr	r3, [sp, #28]
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	dc59      	bgt.n	800ed56 <_dtoa_r+0x936>
 800eca2:	e091      	b.n	800edc8 <_dtoa_r+0x9a8>
 800eca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecaa:	e758      	b.n	800eb5e <_dtoa_r+0x73e>
 800ecac:	9b04      	ldr	r3, [sp, #16]
 800ecae:	1e5e      	subs	r6, r3, #1
 800ecb0:	9b08      	ldr	r3, [sp, #32]
 800ecb2:	42b3      	cmp	r3, r6
 800ecb4:	bfbf      	itttt	lt
 800ecb6:	9b08      	ldrlt	r3, [sp, #32]
 800ecb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ecba:	9608      	strlt	r6, [sp, #32]
 800ecbc:	1af3      	sublt	r3, r6, r3
 800ecbe:	bfb4      	ite	lt
 800ecc0:	18d2      	addlt	r2, r2, r3
 800ecc2:	1b9e      	subge	r6, r3, r6
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	bfbc      	itt	lt
 800ecc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ecca:	2600      	movlt	r6, #0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	bfb7      	itett	lt
 800ecd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ecd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ecd8:	1a9d      	sublt	r5, r3, r2
 800ecda:	2300      	movlt	r3, #0
 800ecdc:	e741      	b.n	800eb62 <_dtoa_r+0x742>
 800ecde:	9e08      	ldr	r6, [sp, #32]
 800ece0:	9d05      	ldr	r5, [sp, #20]
 800ece2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ece4:	e748      	b.n	800eb78 <_dtoa_r+0x758>
 800ece6:	9a08      	ldr	r2, [sp, #32]
 800ece8:	e770      	b.n	800ebcc <_dtoa_r+0x7ac>
 800ecea:	9b07      	ldr	r3, [sp, #28]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	dc19      	bgt.n	800ed24 <_dtoa_r+0x904>
 800ecf0:	9b02      	ldr	r3, [sp, #8]
 800ecf2:	b9bb      	cbnz	r3, 800ed24 <_dtoa_r+0x904>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecfa:	b99b      	cbnz	r3, 800ed24 <_dtoa_r+0x904>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	b183      	cbz	r3, 800ed2a <_dtoa_r+0x90a>
 800ed08:	9b05      	ldr	r3, [sp, #20]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	9305      	str	r3, [sp, #20]
 800ed0e:	9b06      	ldr	r3, [sp, #24]
 800ed10:	3301      	adds	r3, #1
 800ed12:	9306      	str	r3, [sp, #24]
 800ed14:	f04f 0801 	mov.w	r8, #1
 800ed18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f47f af6f 	bne.w	800ebfe <_dtoa_r+0x7de>
 800ed20:	2001      	movs	r0, #1
 800ed22:	e774      	b.n	800ec0e <_dtoa_r+0x7ee>
 800ed24:	f04f 0800 	mov.w	r8, #0
 800ed28:	e7f6      	b.n	800ed18 <_dtoa_r+0x8f8>
 800ed2a:	4698      	mov	r8, r3
 800ed2c:	e7f4      	b.n	800ed18 <_dtoa_r+0x8f8>
 800ed2e:	d082      	beq.n	800ec36 <_dtoa_r+0x816>
 800ed30:	9a05      	ldr	r2, [sp, #20]
 800ed32:	331c      	adds	r3, #28
 800ed34:	441a      	add	r2, r3
 800ed36:	9205      	str	r2, [sp, #20]
 800ed38:	9a06      	ldr	r2, [sp, #24]
 800ed3a:	441a      	add	r2, r3
 800ed3c:	441d      	add	r5, r3
 800ed3e:	9206      	str	r2, [sp, #24]
 800ed40:	e779      	b.n	800ec36 <_dtoa_r+0x816>
 800ed42:	4603      	mov	r3, r0
 800ed44:	e7f4      	b.n	800ed30 <_dtoa_r+0x910>
 800ed46:	9b04      	ldr	r3, [sp, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dc37      	bgt.n	800edbc <_dtoa_r+0x99c>
 800ed4c:	9b07      	ldr	r3, [sp, #28]
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	dd34      	ble.n	800edbc <_dtoa_r+0x99c>
 800ed52:	9b04      	ldr	r3, [sp, #16]
 800ed54:	9301      	str	r3, [sp, #4]
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	b963      	cbnz	r3, 800ed74 <_dtoa_r+0x954>
 800ed5a:	4631      	mov	r1, r6
 800ed5c:	2205      	movs	r2, #5
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 fcb8 	bl	800f6d4 <__multadd>
 800ed64:	4601      	mov	r1, r0
 800ed66:	4606      	mov	r6, r0
 800ed68:	4650      	mov	r0, sl
 800ed6a:	f000 fecd 	bl	800fb08 <__mcmp>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f73f adbb 	bgt.w	800e8ea <_dtoa_r+0x4ca>
 800ed74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed76:	9d00      	ldr	r5, [sp, #0]
 800ed78:	ea6f 0b03 	mvn.w	fp, r3
 800ed7c:	f04f 0800 	mov.w	r8, #0
 800ed80:	4631      	mov	r1, r6
 800ed82:	4620      	mov	r0, r4
 800ed84:	f000 fc84 	bl	800f690 <_Bfree>
 800ed88:	2f00      	cmp	r7, #0
 800ed8a:	f43f aeab 	beq.w	800eae4 <_dtoa_r+0x6c4>
 800ed8e:	f1b8 0f00 	cmp.w	r8, #0
 800ed92:	d005      	beq.n	800eda0 <_dtoa_r+0x980>
 800ed94:	45b8      	cmp	r8, r7
 800ed96:	d003      	beq.n	800eda0 <_dtoa_r+0x980>
 800ed98:	4641      	mov	r1, r8
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fc78 	bl	800f690 <_Bfree>
 800eda0:	4639      	mov	r1, r7
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fc74 	bl	800f690 <_Bfree>
 800eda8:	e69c      	b.n	800eae4 <_dtoa_r+0x6c4>
 800edaa:	2600      	movs	r6, #0
 800edac:	4637      	mov	r7, r6
 800edae:	e7e1      	b.n	800ed74 <_dtoa_r+0x954>
 800edb0:	46bb      	mov	fp, r7
 800edb2:	4637      	mov	r7, r6
 800edb4:	e599      	b.n	800e8ea <_dtoa_r+0x4ca>
 800edb6:	bf00      	nop
 800edb8:	40240000 	.word	0x40240000
 800edbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 80c8 	beq.w	800ef54 <_dtoa_r+0xb34>
 800edc4:	9b04      	ldr	r3, [sp, #16]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	2d00      	cmp	r5, #0
 800edca:	dd05      	ble.n	800edd8 <_dtoa_r+0x9b8>
 800edcc:	4639      	mov	r1, r7
 800edce:	462a      	mov	r2, r5
 800edd0:	4620      	mov	r0, r4
 800edd2:	f000 fe2d 	bl	800fa30 <__lshift>
 800edd6:	4607      	mov	r7, r0
 800edd8:	f1b8 0f00 	cmp.w	r8, #0
 800eddc:	d05b      	beq.n	800ee96 <_dtoa_r+0xa76>
 800edde:	6879      	ldr	r1, [r7, #4]
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fc15 	bl	800f610 <_Balloc>
 800ede6:	4605      	mov	r5, r0
 800ede8:	b928      	cbnz	r0, 800edf6 <_dtoa_r+0x9d6>
 800edea:	4b83      	ldr	r3, [pc, #524]	; (800eff8 <_dtoa_r+0xbd8>)
 800edec:	4602      	mov	r2, r0
 800edee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800edf2:	f7ff bb2e 	b.w	800e452 <_dtoa_r+0x32>
 800edf6:	693a      	ldr	r2, [r7, #16]
 800edf8:	3202      	adds	r2, #2
 800edfa:	0092      	lsls	r2, r2, #2
 800edfc:	f107 010c 	add.w	r1, r7, #12
 800ee00:	300c      	adds	r0, #12
 800ee02:	f7ff fa76 	bl	800e2f2 <memcpy>
 800ee06:	2201      	movs	r2, #1
 800ee08:	4629      	mov	r1, r5
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 fe10 	bl	800fa30 <__lshift>
 800ee10:	9b00      	ldr	r3, [sp, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	9304      	str	r3, [sp, #16]
 800ee16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	9308      	str	r3, [sp, #32]
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	46b8      	mov	r8, r7
 800ee26:	9306      	str	r3, [sp, #24]
 800ee28:	4607      	mov	r7, r0
 800ee2a:	9b04      	ldr	r3, [sp, #16]
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	4650      	mov	r0, sl
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	f7ff fa6b 	bl	800e30e <quorem>
 800ee38:	4641      	mov	r1, r8
 800ee3a:	9002      	str	r0, [sp, #8]
 800ee3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee40:	4650      	mov	r0, sl
 800ee42:	f000 fe61 	bl	800fb08 <__mcmp>
 800ee46:	463a      	mov	r2, r7
 800ee48:	9005      	str	r0, [sp, #20]
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 fe77 	bl	800fb40 <__mdiff>
 800ee52:	68c2      	ldr	r2, [r0, #12]
 800ee54:	4605      	mov	r5, r0
 800ee56:	bb02      	cbnz	r2, 800ee9a <_dtoa_r+0xa7a>
 800ee58:	4601      	mov	r1, r0
 800ee5a:	4650      	mov	r0, sl
 800ee5c:	f000 fe54 	bl	800fb08 <__mcmp>
 800ee60:	4602      	mov	r2, r0
 800ee62:	4629      	mov	r1, r5
 800ee64:	4620      	mov	r0, r4
 800ee66:	9209      	str	r2, [sp, #36]	; 0x24
 800ee68:	f000 fc12 	bl	800f690 <_Bfree>
 800ee6c:	9b07      	ldr	r3, [sp, #28]
 800ee6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee70:	9d04      	ldr	r5, [sp, #16]
 800ee72:	ea43 0102 	orr.w	r1, r3, r2
 800ee76:	9b06      	ldr	r3, [sp, #24]
 800ee78:	4319      	orrs	r1, r3
 800ee7a:	d110      	bne.n	800ee9e <_dtoa_r+0xa7e>
 800ee7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee80:	d029      	beq.n	800eed6 <_dtoa_r+0xab6>
 800ee82:	9b05      	ldr	r3, [sp, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dd02      	ble.n	800ee8e <_dtoa_r+0xa6e>
 800ee88:	9b02      	ldr	r3, [sp, #8]
 800ee8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	f883 9000 	strb.w	r9, [r3]
 800ee94:	e774      	b.n	800ed80 <_dtoa_r+0x960>
 800ee96:	4638      	mov	r0, r7
 800ee98:	e7ba      	b.n	800ee10 <_dtoa_r+0x9f0>
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	e7e1      	b.n	800ee62 <_dtoa_r+0xa42>
 800ee9e:	9b05      	ldr	r3, [sp, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	db04      	blt.n	800eeae <_dtoa_r+0xa8e>
 800eea4:	9907      	ldr	r1, [sp, #28]
 800eea6:	430b      	orrs	r3, r1
 800eea8:	9906      	ldr	r1, [sp, #24]
 800eeaa:	430b      	orrs	r3, r1
 800eeac:	d120      	bne.n	800eef0 <_dtoa_r+0xad0>
 800eeae:	2a00      	cmp	r2, #0
 800eeb0:	dded      	ble.n	800ee8e <_dtoa_r+0xa6e>
 800eeb2:	4651      	mov	r1, sl
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 fdba 	bl	800fa30 <__lshift>
 800eebc:	4631      	mov	r1, r6
 800eebe:	4682      	mov	sl, r0
 800eec0:	f000 fe22 	bl	800fb08 <__mcmp>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	dc03      	bgt.n	800eed0 <_dtoa_r+0xab0>
 800eec8:	d1e1      	bne.n	800ee8e <_dtoa_r+0xa6e>
 800eeca:	f019 0f01 	tst.w	r9, #1
 800eece:	d0de      	beq.n	800ee8e <_dtoa_r+0xa6e>
 800eed0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eed4:	d1d8      	bne.n	800ee88 <_dtoa_r+0xa68>
 800eed6:	9a01      	ldr	r2, [sp, #4]
 800eed8:	2339      	movs	r3, #57	; 0x39
 800eeda:	7013      	strb	r3, [r2, #0]
 800eedc:	462b      	mov	r3, r5
 800eede:	461d      	mov	r5, r3
 800eee0:	3b01      	subs	r3, #1
 800eee2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eee6:	2a39      	cmp	r2, #57	; 0x39
 800eee8:	d06c      	beq.n	800efc4 <_dtoa_r+0xba4>
 800eeea:	3201      	adds	r2, #1
 800eeec:	701a      	strb	r2, [r3, #0]
 800eeee:	e747      	b.n	800ed80 <_dtoa_r+0x960>
 800eef0:	2a00      	cmp	r2, #0
 800eef2:	dd07      	ble.n	800ef04 <_dtoa_r+0xae4>
 800eef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eef8:	d0ed      	beq.n	800eed6 <_dtoa_r+0xab6>
 800eefa:	9a01      	ldr	r2, [sp, #4]
 800eefc:	f109 0301 	add.w	r3, r9, #1
 800ef00:	7013      	strb	r3, [r2, #0]
 800ef02:	e73d      	b.n	800ed80 <_dtoa_r+0x960>
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	9a08      	ldr	r2, [sp, #32]
 800ef08:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d043      	beq.n	800ef98 <_dtoa_r+0xb78>
 800ef10:	4651      	mov	r1, sl
 800ef12:	2300      	movs	r3, #0
 800ef14:	220a      	movs	r2, #10
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 fbdc 	bl	800f6d4 <__multadd>
 800ef1c:	45b8      	cmp	r8, r7
 800ef1e:	4682      	mov	sl, r0
 800ef20:	f04f 0300 	mov.w	r3, #0
 800ef24:	f04f 020a 	mov.w	r2, #10
 800ef28:	4641      	mov	r1, r8
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	d107      	bne.n	800ef3e <_dtoa_r+0xb1e>
 800ef2e:	f000 fbd1 	bl	800f6d4 <__multadd>
 800ef32:	4680      	mov	r8, r0
 800ef34:	4607      	mov	r7, r0
 800ef36:	9b04      	ldr	r3, [sp, #16]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	9304      	str	r3, [sp, #16]
 800ef3c:	e775      	b.n	800ee2a <_dtoa_r+0xa0a>
 800ef3e:	f000 fbc9 	bl	800f6d4 <__multadd>
 800ef42:	4639      	mov	r1, r7
 800ef44:	4680      	mov	r8, r0
 800ef46:	2300      	movs	r3, #0
 800ef48:	220a      	movs	r2, #10
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fbc2 	bl	800f6d4 <__multadd>
 800ef50:	4607      	mov	r7, r0
 800ef52:	e7f0      	b.n	800ef36 <_dtoa_r+0xb16>
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	9301      	str	r3, [sp, #4]
 800ef58:	9d00      	ldr	r5, [sp, #0]
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4650      	mov	r0, sl
 800ef5e:	f7ff f9d6 	bl	800e30e <quorem>
 800ef62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	f805 9b01 	strb.w	r9, [r5], #1
 800ef6c:	1aea      	subs	r2, r5, r3
 800ef6e:	9b01      	ldr	r3, [sp, #4]
 800ef70:	4293      	cmp	r3, r2
 800ef72:	dd07      	ble.n	800ef84 <_dtoa_r+0xb64>
 800ef74:	4651      	mov	r1, sl
 800ef76:	2300      	movs	r3, #0
 800ef78:	220a      	movs	r2, #10
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fbaa 	bl	800f6d4 <__multadd>
 800ef80:	4682      	mov	sl, r0
 800ef82:	e7ea      	b.n	800ef5a <_dtoa_r+0xb3a>
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	bfc8      	it	gt
 800ef8a:	461d      	movgt	r5, r3
 800ef8c:	9b00      	ldr	r3, [sp, #0]
 800ef8e:	bfd8      	it	le
 800ef90:	2501      	movle	r5, #1
 800ef92:	441d      	add	r5, r3
 800ef94:	f04f 0800 	mov.w	r8, #0
 800ef98:	4651      	mov	r1, sl
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 fd47 	bl	800fa30 <__lshift>
 800efa2:	4631      	mov	r1, r6
 800efa4:	4682      	mov	sl, r0
 800efa6:	f000 fdaf 	bl	800fb08 <__mcmp>
 800efaa:	2800      	cmp	r0, #0
 800efac:	dc96      	bgt.n	800eedc <_dtoa_r+0xabc>
 800efae:	d102      	bne.n	800efb6 <_dtoa_r+0xb96>
 800efb0:	f019 0f01 	tst.w	r9, #1
 800efb4:	d192      	bne.n	800eedc <_dtoa_r+0xabc>
 800efb6:	462b      	mov	r3, r5
 800efb8:	461d      	mov	r5, r3
 800efba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efbe:	2a30      	cmp	r2, #48	; 0x30
 800efc0:	d0fa      	beq.n	800efb8 <_dtoa_r+0xb98>
 800efc2:	e6dd      	b.n	800ed80 <_dtoa_r+0x960>
 800efc4:	9a00      	ldr	r2, [sp, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d189      	bne.n	800eede <_dtoa_r+0xabe>
 800efca:	f10b 0b01 	add.w	fp, fp, #1
 800efce:	2331      	movs	r3, #49	; 0x31
 800efd0:	e796      	b.n	800ef00 <_dtoa_r+0xae0>
 800efd2:	4b0a      	ldr	r3, [pc, #40]	; (800effc <_dtoa_r+0xbdc>)
 800efd4:	f7ff ba99 	b.w	800e50a <_dtoa_r+0xea>
 800efd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f47f aa6d 	bne.w	800e4ba <_dtoa_r+0x9a>
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <_dtoa_r+0xbe0>)
 800efe2:	f7ff ba92 	b.w	800e50a <_dtoa_r+0xea>
 800efe6:	9b01      	ldr	r3, [sp, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dcb5      	bgt.n	800ef58 <_dtoa_r+0xb38>
 800efec:	9b07      	ldr	r3, [sp, #28]
 800efee:	2b02      	cmp	r3, #2
 800eff0:	f73f aeb1 	bgt.w	800ed56 <_dtoa_r+0x936>
 800eff4:	e7b0      	b.n	800ef58 <_dtoa_r+0xb38>
 800eff6:	bf00      	nop
 800eff8:	08011b54 	.word	0x08011b54
 800effc:	08011ab4 	.word	0x08011ab4
 800f000:	08011ad8 	.word	0x08011ad8

0800f004 <_free_r>:
 800f004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f006:	2900      	cmp	r1, #0
 800f008:	d044      	beq.n	800f094 <_free_r+0x90>
 800f00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f00e:	9001      	str	r0, [sp, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	f1a1 0404 	sub.w	r4, r1, #4
 800f016:	bfb8      	it	lt
 800f018:	18e4      	addlt	r4, r4, r3
 800f01a:	f000 faed 	bl	800f5f8 <__malloc_lock>
 800f01e:	4a1e      	ldr	r2, [pc, #120]	; (800f098 <_free_r+0x94>)
 800f020:	9801      	ldr	r0, [sp, #4]
 800f022:	6813      	ldr	r3, [r2, #0]
 800f024:	b933      	cbnz	r3, 800f034 <_free_r+0x30>
 800f026:	6063      	str	r3, [r4, #4]
 800f028:	6014      	str	r4, [r2, #0]
 800f02a:	b003      	add	sp, #12
 800f02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f030:	f000 bae8 	b.w	800f604 <__malloc_unlock>
 800f034:	42a3      	cmp	r3, r4
 800f036:	d908      	bls.n	800f04a <_free_r+0x46>
 800f038:	6825      	ldr	r5, [r4, #0]
 800f03a:	1961      	adds	r1, r4, r5
 800f03c:	428b      	cmp	r3, r1
 800f03e:	bf01      	itttt	eq
 800f040:	6819      	ldreq	r1, [r3, #0]
 800f042:	685b      	ldreq	r3, [r3, #4]
 800f044:	1949      	addeq	r1, r1, r5
 800f046:	6021      	streq	r1, [r4, #0]
 800f048:	e7ed      	b.n	800f026 <_free_r+0x22>
 800f04a:	461a      	mov	r2, r3
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	b10b      	cbz	r3, 800f054 <_free_r+0x50>
 800f050:	42a3      	cmp	r3, r4
 800f052:	d9fa      	bls.n	800f04a <_free_r+0x46>
 800f054:	6811      	ldr	r1, [r2, #0]
 800f056:	1855      	adds	r5, r2, r1
 800f058:	42a5      	cmp	r5, r4
 800f05a:	d10b      	bne.n	800f074 <_free_r+0x70>
 800f05c:	6824      	ldr	r4, [r4, #0]
 800f05e:	4421      	add	r1, r4
 800f060:	1854      	adds	r4, r2, r1
 800f062:	42a3      	cmp	r3, r4
 800f064:	6011      	str	r1, [r2, #0]
 800f066:	d1e0      	bne.n	800f02a <_free_r+0x26>
 800f068:	681c      	ldr	r4, [r3, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	6053      	str	r3, [r2, #4]
 800f06e:	440c      	add	r4, r1
 800f070:	6014      	str	r4, [r2, #0]
 800f072:	e7da      	b.n	800f02a <_free_r+0x26>
 800f074:	d902      	bls.n	800f07c <_free_r+0x78>
 800f076:	230c      	movs	r3, #12
 800f078:	6003      	str	r3, [r0, #0]
 800f07a:	e7d6      	b.n	800f02a <_free_r+0x26>
 800f07c:	6825      	ldr	r5, [r4, #0]
 800f07e:	1961      	adds	r1, r4, r5
 800f080:	428b      	cmp	r3, r1
 800f082:	bf04      	itt	eq
 800f084:	6819      	ldreq	r1, [r3, #0]
 800f086:	685b      	ldreq	r3, [r3, #4]
 800f088:	6063      	str	r3, [r4, #4]
 800f08a:	bf04      	itt	eq
 800f08c:	1949      	addeq	r1, r1, r5
 800f08e:	6021      	streq	r1, [r4, #0]
 800f090:	6054      	str	r4, [r2, #4]
 800f092:	e7ca      	b.n	800f02a <_free_r+0x26>
 800f094:	b003      	add	sp, #12
 800f096:	bd30      	pop	{r4, r5, pc}
 800f098:	20005dc4 	.word	0x20005dc4

0800f09c <__ssputs_r>:
 800f09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a0:	688e      	ldr	r6, [r1, #8]
 800f0a2:	461f      	mov	r7, r3
 800f0a4:	42be      	cmp	r6, r7
 800f0a6:	680b      	ldr	r3, [r1, #0]
 800f0a8:	4682      	mov	sl, r0
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	4690      	mov	r8, r2
 800f0ae:	d82c      	bhi.n	800f10a <__ssputs_r+0x6e>
 800f0b0:	898a      	ldrh	r2, [r1, #12]
 800f0b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0b6:	d026      	beq.n	800f106 <__ssputs_r+0x6a>
 800f0b8:	6965      	ldr	r5, [r4, #20]
 800f0ba:	6909      	ldr	r1, [r1, #16]
 800f0bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0c0:	eba3 0901 	sub.w	r9, r3, r1
 800f0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0c8:	1c7b      	adds	r3, r7, #1
 800f0ca:	444b      	add	r3, r9
 800f0cc:	106d      	asrs	r5, r5, #1
 800f0ce:	429d      	cmp	r5, r3
 800f0d0:	bf38      	it	cc
 800f0d2:	461d      	movcc	r5, r3
 800f0d4:	0553      	lsls	r3, r2, #21
 800f0d6:	d527      	bpl.n	800f128 <__ssputs_r+0x8c>
 800f0d8:	4629      	mov	r1, r5
 800f0da:	f000 f95f 	bl	800f39c <_malloc_r>
 800f0de:	4606      	mov	r6, r0
 800f0e0:	b360      	cbz	r0, 800f13c <__ssputs_r+0xa0>
 800f0e2:	6921      	ldr	r1, [r4, #16]
 800f0e4:	464a      	mov	r2, r9
 800f0e6:	f7ff f904 	bl	800e2f2 <memcpy>
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0f4:	81a3      	strh	r3, [r4, #12]
 800f0f6:	6126      	str	r6, [r4, #16]
 800f0f8:	6165      	str	r5, [r4, #20]
 800f0fa:	444e      	add	r6, r9
 800f0fc:	eba5 0509 	sub.w	r5, r5, r9
 800f100:	6026      	str	r6, [r4, #0]
 800f102:	60a5      	str	r5, [r4, #8]
 800f104:	463e      	mov	r6, r7
 800f106:	42be      	cmp	r6, r7
 800f108:	d900      	bls.n	800f10c <__ssputs_r+0x70>
 800f10a:	463e      	mov	r6, r7
 800f10c:	6820      	ldr	r0, [r4, #0]
 800f10e:	4632      	mov	r2, r6
 800f110:	4641      	mov	r1, r8
 800f112:	f000 fe6b 	bl	800fdec <memmove>
 800f116:	68a3      	ldr	r3, [r4, #8]
 800f118:	1b9b      	subs	r3, r3, r6
 800f11a:	60a3      	str	r3, [r4, #8]
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	4433      	add	r3, r6
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	2000      	movs	r0, #0
 800f124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f128:	462a      	mov	r2, r5
 800f12a:	f000 fe30 	bl	800fd8e <_realloc_r>
 800f12e:	4606      	mov	r6, r0
 800f130:	2800      	cmp	r0, #0
 800f132:	d1e0      	bne.n	800f0f6 <__ssputs_r+0x5a>
 800f134:	6921      	ldr	r1, [r4, #16]
 800f136:	4650      	mov	r0, sl
 800f138:	f7ff ff64 	bl	800f004 <_free_r>
 800f13c:	230c      	movs	r3, #12
 800f13e:	f8ca 3000 	str.w	r3, [sl]
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f148:	81a3      	strh	r3, [r4, #12]
 800f14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f14e:	e7e9      	b.n	800f124 <__ssputs_r+0x88>

0800f150 <_svfiprintf_r>:
 800f150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f154:	4698      	mov	r8, r3
 800f156:	898b      	ldrh	r3, [r1, #12]
 800f158:	061b      	lsls	r3, r3, #24
 800f15a:	b09d      	sub	sp, #116	; 0x74
 800f15c:	4607      	mov	r7, r0
 800f15e:	460d      	mov	r5, r1
 800f160:	4614      	mov	r4, r2
 800f162:	d50e      	bpl.n	800f182 <_svfiprintf_r+0x32>
 800f164:	690b      	ldr	r3, [r1, #16]
 800f166:	b963      	cbnz	r3, 800f182 <_svfiprintf_r+0x32>
 800f168:	2140      	movs	r1, #64	; 0x40
 800f16a:	f000 f917 	bl	800f39c <_malloc_r>
 800f16e:	6028      	str	r0, [r5, #0]
 800f170:	6128      	str	r0, [r5, #16]
 800f172:	b920      	cbnz	r0, 800f17e <_svfiprintf_r+0x2e>
 800f174:	230c      	movs	r3, #12
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f17c:	e0d0      	b.n	800f320 <_svfiprintf_r+0x1d0>
 800f17e:	2340      	movs	r3, #64	; 0x40
 800f180:	616b      	str	r3, [r5, #20]
 800f182:	2300      	movs	r3, #0
 800f184:	9309      	str	r3, [sp, #36]	; 0x24
 800f186:	2320      	movs	r3, #32
 800f188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f190:	2330      	movs	r3, #48	; 0x30
 800f192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f338 <_svfiprintf_r+0x1e8>
 800f196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f19a:	f04f 0901 	mov.w	r9, #1
 800f19e:	4623      	mov	r3, r4
 800f1a0:	469a      	mov	sl, r3
 800f1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1a6:	b10a      	cbz	r2, 800f1ac <_svfiprintf_r+0x5c>
 800f1a8:	2a25      	cmp	r2, #37	; 0x25
 800f1aa:	d1f9      	bne.n	800f1a0 <_svfiprintf_r+0x50>
 800f1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800f1b0:	d00b      	beq.n	800f1ca <_svfiprintf_r+0x7a>
 800f1b2:	465b      	mov	r3, fp
 800f1b4:	4622      	mov	r2, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4638      	mov	r0, r7
 800f1ba:	f7ff ff6f 	bl	800f09c <__ssputs_r>
 800f1be:	3001      	adds	r0, #1
 800f1c0:	f000 80a9 	beq.w	800f316 <_svfiprintf_r+0x1c6>
 800f1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1c6:	445a      	add	r2, fp
 800f1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800f1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 80a1 	beq.w	800f316 <_svfiprintf_r+0x1c6>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1de:	f10a 0a01 	add.w	sl, sl, #1
 800f1e2:	9304      	str	r3, [sp, #16]
 800f1e4:	9307      	str	r3, [sp, #28]
 800f1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800f1ec:	4654      	mov	r4, sl
 800f1ee:	2205      	movs	r2, #5
 800f1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f4:	4850      	ldr	r0, [pc, #320]	; (800f338 <_svfiprintf_r+0x1e8>)
 800f1f6:	f7f1 f80b 	bl	8000210 <memchr>
 800f1fa:	9a04      	ldr	r2, [sp, #16]
 800f1fc:	b9d8      	cbnz	r0, 800f236 <_svfiprintf_r+0xe6>
 800f1fe:	06d0      	lsls	r0, r2, #27
 800f200:	bf44      	itt	mi
 800f202:	2320      	movmi	r3, #32
 800f204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f208:	0711      	lsls	r1, r2, #28
 800f20a:	bf44      	itt	mi
 800f20c:	232b      	movmi	r3, #43	; 0x2b
 800f20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f212:	f89a 3000 	ldrb.w	r3, [sl]
 800f216:	2b2a      	cmp	r3, #42	; 0x2a
 800f218:	d015      	beq.n	800f246 <_svfiprintf_r+0xf6>
 800f21a:	9a07      	ldr	r2, [sp, #28]
 800f21c:	4654      	mov	r4, sl
 800f21e:	2000      	movs	r0, #0
 800f220:	f04f 0c0a 	mov.w	ip, #10
 800f224:	4621      	mov	r1, r4
 800f226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f22a:	3b30      	subs	r3, #48	; 0x30
 800f22c:	2b09      	cmp	r3, #9
 800f22e:	d94d      	bls.n	800f2cc <_svfiprintf_r+0x17c>
 800f230:	b1b0      	cbz	r0, 800f260 <_svfiprintf_r+0x110>
 800f232:	9207      	str	r2, [sp, #28]
 800f234:	e014      	b.n	800f260 <_svfiprintf_r+0x110>
 800f236:	eba0 0308 	sub.w	r3, r0, r8
 800f23a:	fa09 f303 	lsl.w	r3, r9, r3
 800f23e:	4313      	orrs	r3, r2
 800f240:	9304      	str	r3, [sp, #16]
 800f242:	46a2      	mov	sl, r4
 800f244:	e7d2      	b.n	800f1ec <_svfiprintf_r+0x9c>
 800f246:	9b03      	ldr	r3, [sp, #12]
 800f248:	1d19      	adds	r1, r3, #4
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	9103      	str	r1, [sp, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	bfbb      	ittet	lt
 800f252:	425b      	neglt	r3, r3
 800f254:	f042 0202 	orrlt.w	r2, r2, #2
 800f258:	9307      	strge	r3, [sp, #28]
 800f25a:	9307      	strlt	r3, [sp, #28]
 800f25c:	bfb8      	it	lt
 800f25e:	9204      	strlt	r2, [sp, #16]
 800f260:	7823      	ldrb	r3, [r4, #0]
 800f262:	2b2e      	cmp	r3, #46	; 0x2e
 800f264:	d10c      	bne.n	800f280 <_svfiprintf_r+0x130>
 800f266:	7863      	ldrb	r3, [r4, #1]
 800f268:	2b2a      	cmp	r3, #42	; 0x2a
 800f26a:	d134      	bne.n	800f2d6 <_svfiprintf_r+0x186>
 800f26c:	9b03      	ldr	r3, [sp, #12]
 800f26e:	1d1a      	adds	r2, r3, #4
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	9203      	str	r2, [sp, #12]
 800f274:	2b00      	cmp	r3, #0
 800f276:	bfb8      	it	lt
 800f278:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f27c:	3402      	adds	r4, #2
 800f27e:	9305      	str	r3, [sp, #20]
 800f280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f348 <_svfiprintf_r+0x1f8>
 800f284:	7821      	ldrb	r1, [r4, #0]
 800f286:	2203      	movs	r2, #3
 800f288:	4650      	mov	r0, sl
 800f28a:	f7f0 ffc1 	bl	8000210 <memchr>
 800f28e:	b138      	cbz	r0, 800f2a0 <_svfiprintf_r+0x150>
 800f290:	9b04      	ldr	r3, [sp, #16]
 800f292:	eba0 000a 	sub.w	r0, r0, sl
 800f296:	2240      	movs	r2, #64	; 0x40
 800f298:	4082      	lsls	r2, r0
 800f29a:	4313      	orrs	r3, r2
 800f29c:	3401      	adds	r4, #1
 800f29e:	9304      	str	r3, [sp, #16]
 800f2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2a4:	4825      	ldr	r0, [pc, #148]	; (800f33c <_svfiprintf_r+0x1ec>)
 800f2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2aa:	2206      	movs	r2, #6
 800f2ac:	f7f0 ffb0 	bl	8000210 <memchr>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d038      	beq.n	800f326 <_svfiprintf_r+0x1d6>
 800f2b4:	4b22      	ldr	r3, [pc, #136]	; (800f340 <_svfiprintf_r+0x1f0>)
 800f2b6:	bb1b      	cbnz	r3, 800f300 <_svfiprintf_r+0x1b0>
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	3307      	adds	r3, #7
 800f2bc:	f023 0307 	bic.w	r3, r3, #7
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	9303      	str	r3, [sp, #12]
 800f2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c6:	4433      	add	r3, r6
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	e768      	b.n	800f19e <_svfiprintf_r+0x4e>
 800f2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	2001      	movs	r0, #1
 800f2d4:	e7a6      	b.n	800f224 <_svfiprintf_r+0xd4>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	3401      	adds	r4, #1
 800f2da:	9305      	str	r3, [sp, #20]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f04f 0c0a 	mov.w	ip, #10
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2e8:	3a30      	subs	r2, #48	; 0x30
 800f2ea:	2a09      	cmp	r2, #9
 800f2ec:	d903      	bls.n	800f2f6 <_svfiprintf_r+0x1a6>
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0c6      	beq.n	800f280 <_svfiprintf_r+0x130>
 800f2f2:	9105      	str	r1, [sp, #20]
 800f2f4:	e7c4      	b.n	800f280 <_svfiprintf_r+0x130>
 800f2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e7f0      	b.n	800f2e2 <_svfiprintf_r+0x192>
 800f300:	ab03      	add	r3, sp, #12
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	462a      	mov	r2, r5
 800f306:	4b0f      	ldr	r3, [pc, #60]	; (800f344 <_svfiprintf_r+0x1f4>)
 800f308:	a904      	add	r1, sp, #16
 800f30a:	4638      	mov	r0, r7
 800f30c:	f7fe fa76 	bl	800d7fc <_printf_float>
 800f310:	1c42      	adds	r2, r0, #1
 800f312:	4606      	mov	r6, r0
 800f314:	d1d6      	bne.n	800f2c4 <_svfiprintf_r+0x174>
 800f316:	89ab      	ldrh	r3, [r5, #12]
 800f318:	065b      	lsls	r3, r3, #25
 800f31a:	f53f af2d 	bmi.w	800f178 <_svfiprintf_r+0x28>
 800f31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f320:	b01d      	add	sp, #116	; 0x74
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f326:	ab03      	add	r3, sp, #12
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	462a      	mov	r2, r5
 800f32c:	4b05      	ldr	r3, [pc, #20]	; (800f344 <_svfiprintf_r+0x1f4>)
 800f32e:	a904      	add	r1, sp, #16
 800f330:	4638      	mov	r0, r7
 800f332:	f7fe fd07 	bl	800dd44 <_printf_i>
 800f336:	e7eb      	b.n	800f310 <_svfiprintf_r+0x1c0>
 800f338:	08011b65 	.word	0x08011b65
 800f33c:	08011b6f 	.word	0x08011b6f
 800f340:	0800d7fd 	.word	0x0800d7fd
 800f344:	0800f09d 	.word	0x0800f09d
 800f348:	08011b6b 	.word	0x08011b6b

0800f34c <malloc>:
 800f34c:	4b02      	ldr	r3, [pc, #8]	; (800f358 <malloc+0xc>)
 800f34e:	4601      	mov	r1, r0
 800f350:	6818      	ldr	r0, [r3, #0]
 800f352:	f000 b823 	b.w	800f39c <_malloc_r>
 800f356:	bf00      	nop
 800f358:	20000084 	.word	0x20000084

0800f35c <sbrk_aligned>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	4e0e      	ldr	r6, [pc, #56]	; (800f398 <sbrk_aligned+0x3c>)
 800f360:	460c      	mov	r4, r1
 800f362:	6831      	ldr	r1, [r6, #0]
 800f364:	4605      	mov	r5, r0
 800f366:	b911      	cbnz	r1, 800f36e <sbrk_aligned+0x12>
 800f368:	f000 fd8e 	bl	800fe88 <_sbrk_r>
 800f36c:	6030      	str	r0, [r6, #0]
 800f36e:	4621      	mov	r1, r4
 800f370:	4628      	mov	r0, r5
 800f372:	f000 fd89 	bl	800fe88 <_sbrk_r>
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	d00a      	beq.n	800f390 <sbrk_aligned+0x34>
 800f37a:	1cc4      	adds	r4, r0, #3
 800f37c:	f024 0403 	bic.w	r4, r4, #3
 800f380:	42a0      	cmp	r0, r4
 800f382:	d007      	beq.n	800f394 <sbrk_aligned+0x38>
 800f384:	1a21      	subs	r1, r4, r0
 800f386:	4628      	mov	r0, r5
 800f388:	f000 fd7e 	bl	800fe88 <_sbrk_r>
 800f38c:	3001      	adds	r0, #1
 800f38e:	d101      	bne.n	800f394 <sbrk_aligned+0x38>
 800f390:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f394:	4620      	mov	r0, r4
 800f396:	bd70      	pop	{r4, r5, r6, pc}
 800f398:	20005dc8 	.word	0x20005dc8

0800f39c <_malloc_r>:
 800f39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3a0:	1ccd      	adds	r5, r1, #3
 800f3a2:	f025 0503 	bic.w	r5, r5, #3
 800f3a6:	3508      	adds	r5, #8
 800f3a8:	2d0c      	cmp	r5, #12
 800f3aa:	bf38      	it	cc
 800f3ac:	250c      	movcc	r5, #12
 800f3ae:	2d00      	cmp	r5, #0
 800f3b0:	4607      	mov	r7, r0
 800f3b2:	db01      	blt.n	800f3b8 <_malloc_r+0x1c>
 800f3b4:	42a9      	cmp	r1, r5
 800f3b6:	d905      	bls.n	800f3c4 <_malloc_r+0x28>
 800f3b8:	230c      	movs	r3, #12
 800f3ba:	603b      	str	r3, [r7, #0]
 800f3bc:	2600      	movs	r6, #0
 800f3be:	4630      	mov	r0, r6
 800f3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f498 <_malloc_r+0xfc>
 800f3c8:	f000 f916 	bl	800f5f8 <__malloc_lock>
 800f3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3d0:	461c      	mov	r4, r3
 800f3d2:	bb5c      	cbnz	r4, 800f42c <_malloc_r+0x90>
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	f7ff ffc0 	bl	800f35c <sbrk_aligned>
 800f3dc:	1c43      	adds	r3, r0, #1
 800f3de:	4604      	mov	r4, r0
 800f3e0:	d155      	bne.n	800f48e <_malloc_r+0xf2>
 800f3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800f3e6:	4626      	mov	r6, r4
 800f3e8:	2e00      	cmp	r6, #0
 800f3ea:	d145      	bne.n	800f478 <_malloc_r+0xdc>
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	d048      	beq.n	800f482 <_malloc_r+0xe6>
 800f3f0:	6823      	ldr	r3, [r4, #0]
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	eb04 0903 	add.w	r9, r4, r3
 800f3fa:	f000 fd45 	bl	800fe88 <_sbrk_r>
 800f3fe:	4581      	cmp	r9, r0
 800f400:	d13f      	bne.n	800f482 <_malloc_r+0xe6>
 800f402:	6821      	ldr	r1, [r4, #0]
 800f404:	1a6d      	subs	r5, r5, r1
 800f406:	4629      	mov	r1, r5
 800f408:	4638      	mov	r0, r7
 800f40a:	f7ff ffa7 	bl	800f35c <sbrk_aligned>
 800f40e:	3001      	adds	r0, #1
 800f410:	d037      	beq.n	800f482 <_malloc_r+0xe6>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	442b      	add	r3, r5
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	f8d8 3000 	ldr.w	r3, [r8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d038      	beq.n	800f492 <_malloc_r+0xf6>
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	42a2      	cmp	r2, r4
 800f424:	d12b      	bne.n	800f47e <_malloc_r+0xe2>
 800f426:	2200      	movs	r2, #0
 800f428:	605a      	str	r2, [r3, #4]
 800f42a:	e00f      	b.n	800f44c <_malloc_r+0xb0>
 800f42c:	6822      	ldr	r2, [r4, #0]
 800f42e:	1b52      	subs	r2, r2, r5
 800f430:	d41f      	bmi.n	800f472 <_malloc_r+0xd6>
 800f432:	2a0b      	cmp	r2, #11
 800f434:	d917      	bls.n	800f466 <_malloc_r+0xca>
 800f436:	1961      	adds	r1, r4, r5
 800f438:	42a3      	cmp	r3, r4
 800f43a:	6025      	str	r5, [r4, #0]
 800f43c:	bf18      	it	ne
 800f43e:	6059      	strne	r1, [r3, #4]
 800f440:	6863      	ldr	r3, [r4, #4]
 800f442:	bf08      	it	eq
 800f444:	f8c8 1000 	streq.w	r1, [r8]
 800f448:	5162      	str	r2, [r4, r5]
 800f44a:	604b      	str	r3, [r1, #4]
 800f44c:	4638      	mov	r0, r7
 800f44e:	f104 060b 	add.w	r6, r4, #11
 800f452:	f000 f8d7 	bl	800f604 <__malloc_unlock>
 800f456:	f026 0607 	bic.w	r6, r6, #7
 800f45a:	1d23      	adds	r3, r4, #4
 800f45c:	1af2      	subs	r2, r6, r3
 800f45e:	d0ae      	beq.n	800f3be <_malloc_r+0x22>
 800f460:	1b9b      	subs	r3, r3, r6
 800f462:	50a3      	str	r3, [r4, r2]
 800f464:	e7ab      	b.n	800f3be <_malloc_r+0x22>
 800f466:	42a3      	cmp	r3, r4
 800f468:	6862      	ldr	r2, [r4, #4]
 800f46a:	d1dd      	bne.n	800f428 <_malloc_r+0x8c>
 800f46c:	f8c8 2000 	str.w	r2, [r8]
 800f470:	e7ec      	b.n	800f44c <_malloc_r+0xb0>
 800f472:	4623      	mov	r3, r4
 800f474:	6864      	ldr	r4, [r4, #4]
 800f476:	e7ac      	b.n	800f3d2 <_malloc_r+0x36>
 800f478:	4634      	mov	r4, r6
 800f47a:	6876      	ldr	r6, [r6, #4]
 800f47c:	e7b4      	b.n	800f3e8 <_malloc_r+0x4c>
 800f47e:	4613      	mov	r3, r2
 800f480:	e7cc      	b.n	800f41c <_malloc_r+0x80>
 800f482:	230c      	movs	r3, #12
 800f484:	603b      	str	r3, [r7, #0]
 800f486:	4638      	mov	r0, r7
 800f488:	f000 f8bc 	bl	800f604 <__malloc_unlock>
 800f48c:	e797      	b.n	800f3be <_malloc_r+0x22>
 800f48e:	6025      	str	r5, [r4, #0]
 800f490:	e7dc      	b.n	800f44c <_malloc_r+0xb0>
 800f492:	605b      	str	r3, [r3, #4]
 800f494:	deff      	udf	#255	; 0xff
 800f496:	bf00      	nop
 800f498:	20005dc4 	.word	0x20005dc4

0800f49c <__sflush_r>:
 800f49c:	898a      	ldrh	r2, [r1, #12]
 800f49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	0710      	lsls	r0, r2, #28
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	d458      	bmi.n	800f55c <__sflush_r+0xc0>
 800f4aa:	684b      	ldr	r3, [r1, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	dc05      	bgt.n	800f4bc <__sflush_r+0x20>
 800f4b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dc02      	bgt.n	800f4bc <__sflush_r+0x20>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	d0f9      	beq.n	800f4b6 <__sflush_r+0x1a>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4c8:	682f      	ldr	r7, [r5, #0]
 800f4ca:	6a21      	ldr	r1, [r4, #32]
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	d032      	beq.n	800f536 <__sflush_r+0x9a>
 800f4d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	075a      	lsls	r2, r3, #29
 800f4d6:	d505      	bpl.n	800f4e4 <__sflush_r+0x48>
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	1ac0      	subs	r0, r0, r3
 800f4dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4de:	b10b      	cbz	r3, 800f4e4 <__sflush_r+0x48>
 800f4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4e2:	1ac0      	subs	r0, r0, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ea:	6a21      	ldr	r1, [r4, #32]
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	47b0      	blx	r6
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	89a3      	ldrh	r3, [r4, #12]
 800f4f4:	d106      	bne.n	800f504 <__sflush_r+0x68>
 800f4f6:	6829      	ldr	r1, [r5, #0]
 800f4f8:	291d      	cmp	r1, #29
 800f4fa:	d82b      	bhi.n	800f554 <__sflush_r+0xb8>
 800f4fc:	4a29      	ldr	r2, [pc, #164]	; (800f5a4 <__sflush_r+0x108>)
 800f4fe:	410a      	asrs	r2, r1
 800f500:	07d6      	lsls	r6, r2, #31
 800f502:	d427      	bmi.n	800f554 <__sflush_r+0xb8>
 800f504:	2200      	movs	r2, #0
 800f506:	6062      	str	r2, [r4, #4]
 800f508:	04d9      	lsls	r1, r3, #19
 800f50a:	6922      	ldr	r2, [r4, #16]
 800f50c:	6022      	str	r2, [r4, #0]
 800f50e:	d504      	bpl.n	800f51a <__sflush_r+0x7e>
 800f510:	1c42      	adds	r2, r0, #1
 800f512:	d101      	bne.n	800f518 <__sflush_r+0x7c>
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	b903      	cbnz	r3, 800f51a <__sflush_r+0x7e>
 800f518:	6560      	str	r0, [r4, #84]	; 0x54
 800f51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f51c:	602f      	str	r7, [r5, #0]
 800f51e:	2900      	cmp	r1, #0
 800f520:	d0c9      	beq.n	800f4b6 <__sflush_r+0x1a>
 800f522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f526:	4299      	cmp	r1, r3
 800f528:	d002      	beq.n	800f530 <__sflush_r+0x94>
 800f52a:	4628      	mov	r0, r5
 800f52c:	f7ff fd6a 	bl	800f004 <_free_r>
 800f530:	2000      	movs	r0, #0
 800f532:	6360      	str	r0, [r4, #52]	; 0x34
 800f534:	e7c0      	b.n	800f4b8 <__sflush_r+0x1c>
 800f536:	2301      	movs	r3, #1
 800f538:	4628      	mov	r0, r5
 800f53a:	47b0      	blx	r6
 800f53c:	1c41      	adds	r1, r0, #1
 800f53e:	d1c8      	bne.n	800f4d2 <__sflush_r+0x36>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d0c5      	beq.n	800f4d2 <__sflush_r+0x36>
 800f546:	2b1d      	cmp	r3, #29
 800f548:	d001      	beq.n	800f54e <__sflush_r+0xb2>
 800f54a:	2b16      	cmp	r3, #22
 800f54c:	d101      	bne.n	800f552 <__sflush_r+0xb6>
 800f54e:	602f      	str	r7, [r5, #0]
 800f550:	e7b1      	b.n	800f4b6 <__sflush_r+0x1a>
 800f552:	89a3      	ldrh	r3, [r4, #12]
 800f554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f558:	81a3      	strh	r3, [r4, #12]
 800f55a:	e7ad      	b.n	800f4b8 <__sflush_r+0x1c>
 800f55c:	690f      	ldr	r7, [r1, #16]
 800f55e:	2f00      	cmp	r7, #0
 800f560:	d0a9      	beq.n	800f4b6 <__sflush_r+0x1a>
 800f562:	0793      	lsls	r3, r2, #30
 800f564:	680e      	ldr	r6, [r1, #0]
 800f566:	bf08      	it	eq
 800f568:	694b      	ldreq	r3, [r1, #20]
 800f56a:	600f      	str	r7, [r1, #0]
 800f56c:	bf18      	it	ne
 800f56e:	2300      	movne	r3, #0
 800f570:	eba6 0807 	sub.w	r8, r6, r7
 800f574:	608b      	str	r3, [r1, #8]
 800f576:	f1b8 0f00 	cmp.w	r8, #0
 800f57a:	dd9c      	ble.n	800f4b6 <__sflush_r+0x1a>
 800f57c:	6a21      	ldr	r1, [r4, #32]
 800f57e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f580:	4643      	mov	r3, r8
 800f582:	463a      	mov	r2, r7
 800f584:	4628      	mov	r0, r5
 800f586:	47b0      	blx	r6
 800f588:	2800      	cmp	r0, #0
 800f58a:	dc06      	bgt.n	800f59a <__sflush_r+0xfe>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f592:	81a3      	strh	r3, [r4, #12]
 800f594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f598:	e78e      	b.n	800f4b8 <__sflush_r+0x1c>
 800f59a:	4407      	add	r7, r0
 800f59c:	eba8 0800 	sub.w	r8, r8, r0
 800f5a0:	e7e9      	b.n	800f576 <__sflush_r+0xda>
 800f5a2:	bf00      	nop
 800f5a4:	dfbffffe 	.word	0xdfbffffe

0800f5a8 <_fflush_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	690b      	ldr	r3, [r1, #16]
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b913      	cbnz	r3, 800f5b8 <_fflush_r+0x10>
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	bd38      	pop	{r3, r4, r5, pc}
 800f5b8:	b118      	cbz	r0, 800f5c2 <_fflush_r+0x1a>
 800f5ba:	6a03      	ldr	r3, [r0, #32]
 800f5bc:	b90b      	cbnz	r3, 800f5c2 <_fflush_r+0x1a>
 800f5be:	f7fe fdc3 	bl	800e148 <__sinit>
 800f5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0f3      	beq.n	800f5b2 <_fflush_r+0xa>
 800f5ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5cc:	07d0      	lsls	r0, r2, #31
 800f5ce:	d404      	bmi.n	800f5da <_fflush_r+0x32>
 800f5d0:	0599      	lsls	r1, r3, #22
 800f5d2:	d402      	bmi.n	800f5da <_fflush_r+0x32>
 800f5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5d6:	f7fe fe8a 	bl	800e2ee <__retarget_lock_acquire_recursive>
 800f5da:	4628      	mov	r0, r5
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f7ff ff5d 	bl	800f49c <__sflush_r>
 800f5e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5e4:	07da      	lsls	r2, r3, #31
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	d4e4      	bmi.n	800f5b4 <_fflush_r+0xc>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	059b      	lsls	r3, r3, #22
 800f5ee:	d4e1      	bmi.n	800f5b4 <_fflush_r+0xc>
 800f5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5f2:	f7fe fe7d 	bl	800e2f0 <__retarget_lock_release_recursive>
 800f5f6:	e7dd      	b.n	800f5b4 <_fflush_r+0xc>

0800f5f8 <__malloc_lock>:
 800f5f8:	4801      	ldr	r0, [pc, #4]	; (800f600 <__malloc_lock+0x8>)
 800f5fa:	f7fe be78 	b.w	800e2ee <__retarget_lock_acquire_recursive>
 800f5fe:	bf00      	nop
 800f600:	20005dc0 	.word	0x20005dc0

0800f604 <__malloc_unlock>:
 800f604:	4801      	ldr	r0, [pc, #4]	; (800f60c <__malloc_unlock+0x8>)
 800f606:	f7fe be73 	b.w	800e2f0 <__retarget_lock_release_recursive>
 800f60a:	bf00      	nop
 800f60c:	20005dc0 	.word	0x20005dc0

0800f610 <_Balloc>:
 800f610:	b570      	push	{r4, r5, r6, lr}
 800f612:	69c6      	ldr	r6, [r0, #28]
 800f614:	4604      	mov	r4, r0
 800f616:	460d      	mov	r5, r1
 800f618:	b976      	cbnz	r6, 800f638 <_Balloc+0x28>
 800f61a:	2010      	movs	r0, #16
 800f61c:	f7ff fe96 	bl	800f34c <malloc>
 800f620:	4602      	mov	r2, r0
 800f622:	61e0      	str	r0, [r4, #28]
 800f624:	b920      	cbnz	r0, 800f630 <_Balloc+0x20>
 800f626:	4b18      	ldr	r3, [pc, #96]	; (800f688 <_Balloc+0x78>)
 800f628:	4818      	ldr	r0, [pc, #96]	; (800f68c <_Balloc+0x7c>)
 800f62a:	216b      	movs	r1, #107	; 0x6b
 800f62c:	f000 fc4e 	bl	800fecc <__assert_func>
 800f630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f634:	6006      	str	r6, [r0, #0]
 800f636:	60c6      	str	r6, [r0, #12]
 800f638:	69e6      	ldr	r6, [r4, #28]
 800f63a:	68f3      	ldr	r3, [r6, #12]
 800f63c:	b183      	cbz	r3, 800f660 <_Balloc+0x50>
 800f63e:	69e3      	ldr	r3, [r4, #28]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f646:	b9b8      	cbnz	r0, 800f678 <_Balloc+0x68>
 800f648:	2101      	movs	r1, #1
 800f64a:	fa01 f605 	lsl.w	r6, r1, r5
 800f64e:	1d72      	adds	r2, r6, #5
 800f650:	0092      	lsls	r2, r2, #2
 800f652:	4620      	mov	r0, r4
 800f654:	f000 fc58 	bl	800ff08 <_calloc_r>
 800f658:	b160      	cbz	r0, 800f674 <_Balloc+0x64>
 800f65a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f65e:	e00e      	b.n	800f67e <_Balloc+0x6e>
 800f660:	2221      	movs	r2, #33	; 0x21
 800f662:	2104      	movs	r1, #4
 800f664:	4620      	mov	r0, r4
 800f666:	f000 fc4f 	bl	800ff08 <_calloc_r>
 800f66a:	69e3      	ldr	r3, [r4, #28]
 800f66c:	60f0      	str	r0, [r6, #12]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e4      	bne.n	800f63e <_Balloc+0x2e>
 800f674:	2000      	movs	r0, #0
 800f676:	bd70      	pop	{r4, r5, r6, pc}
 800f678:	6802      	ldr	r2, [r0, #0]
 800f67a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f67e:	2300      	movs	r3, #0
 800f680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f684:	e7f7      	b.n	800f676 <_Balloc+0x66>
 800f686:	bf00      	nop
 800f688:	08011ae5 	.word	0x08011ae5
 800f68c:	08011b76 	.word	0x08011b76

0800f690 <_Bfree>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	69c6      	ldr	r6, [r0, #28]
 800f694:	4605      	mov	r5, r0
 800f696:	460c      	mov	r4, r1
 800f698:	b976      	cbnz	r6, 800f6b8 <_Bfree+0x28>
 800f69a:	2010      	movs	r0, #16
 800f69c:	f7ff fe56 	bl	800f34c <malloc>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	61e8      	str	r0, [r5, #28]
 800f6a4:	b920      	cbnz	r0, 800f6b0 <_Bfree+0x20>
 800f6a6:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <_Bfree+0x3c>)
 800f6a8:	4809      	ldr	r0, [pc, #36]	; (800f6d0 <_Bfree+0x40>)
 800f6aa:	218f      	movs	r1, #143	; 0x8f
 800f6ac:	f000 fc0e 	bl	800fecc <__assert_func>
 800f6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6b4:	6006      	str	r6, [r0, #0]
 800f6b6:	60c6      	str	r6, [r0, #12]
 800f6b8:	b13c      	cbz	r4, 800f6ca <_Bfree+0x3a>
 800f6ba:	69eb      	ldr	r3, [r5, #28]
 800f6bc:	6862      	ldr	r2, [r4, #4]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6c4:	6021      	str	r1, [r4, #0]
 800f6c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6ca:	bd70      	pop	{r4, r5, r6, pc}
 800f6cc:	08011ae5 	.word	0x08011ae5
 800f6d0:	08011b76 	.word	0x08011b76

0800f6d4 <__multadd>:
 800f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	690d      	ldr	r5, [r1, #16]
 800f6da:	4607      	mov	r7, r0
 800f6dc:	460c      	mov	r4, r1
 800f6de:	461e      	mov	r6, r3
 800f6e0:	f101 0c14 	add.w	ip, r1, #20
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f6ea:	b299      	uxth	r1, r3
 800f6ec:	fb02 6101 	mla	r1, r2, r1, r6
 800f6f0:	0c1e      	lsrs	r6, r3, #16
 800f6f2:	0c0b      	lsrs	r3, r1, #16
 800f6f4:	fb02 3306 	mla	r3, r2, r6, r3
 800f6f8:	b289      	uxth	r1, r1
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f700:	4285      	cmp	r5, r0
 800f702:	f84c 1b04 	str.w	r1, [ip], #4
 800f706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f70a:	dcec      	bgt.n	800f6e6 <__multadd+0x12>
 800f70c:	b30e      	cbz	r6, 800f752 <__multadd+0x7e>
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	42ab      	cmp	r3, r5
 800f712:	dc19      	bgt.n	800f748 <__multadd+0x74>
 800f714:	6861      	ldr	r1, [r4, #4]
 800f716:	4638      	mov	r0, r7
 800f718:	3101      	adds	r1, #1
 800f71a:	f7ff ff79 	bl	800f610 <_Balloc>
 800f71e:	4680      	mov	r8, r0
 800f720:	b928      	cbnz	r0, 800f72e <__multadd+0x5a>
 800f722:	4602      	mov	r2, r0
 800f724:	4b0c      	ldr	r3, [pc, #48]	; (800f758 <__multadd+0x84>)
 800f726:	480d      	ldr	r0, [pc, #52]	; (800f75c <__multadd+0x88>)
 800f728:	21ba      	movs	r1, #186	; 0xba
 800f72a:	f000 fbcf 	bl	800fecc <__assert_func>
 800f72e:	6922      	ldr	r2, [r4, #16]
 800f730:	3202      	adds	r2, #2
 800f732:	f104 010c 	add.w	r1, r4, #12
 800f736:	0092      	lsls	r2, r2, #2
 800f738:	300c      	adds	r0, #12
 800f73a:	f7fe fdda 	bl	800e2f2 <memcpy>
 800f73e:	4621      	mov	r1, r4
 800f740:	4638      	mov	r0, r7
 800f742:	f7ff ffa5 	bl	800f690 <_Bfree>
 800f746:	4644      	mov	r4, r8
 800f748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f74c:	3501      	adds	r5, #1
 800f74e:	615e      	str	r6, [r3, #20]
 800f750:	6125      	str	r5, [r4, #16]
 800f752:	4620      	mov	r0, r4
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	08011b54 	.word	0x08011b54
 800f75c:	08011b76 	.word	0x08011b76

0800f760 <__hi0bits>:
 800f760:	0c03      	lsrs	r3, r0, #16
 800f762:	041b      	lsls	r3, r3, #16
 800f764:	b9d3      	cbnz	r3, 800f79c <__hi0bits+0x3c>
 800f766:	0400      	lsls	r0, r0, #16
 800f768:	2310      	movs	r3, #16
 800f76a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f76e:	bf04      	itt	eq
 800f770:	0200      	lsleq	r0, r0, #8
 800f772:	3308      	addeq	r3, #8
 800f774:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f778:	bf04      	itt	eq
 800f77a:	0100      	lsleq	r0, r0, #4
 800f77c:	3304      	addeq	r3, #4
 800f77e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f782:	bf04      	itt	eq
 800f784:	0080      	lsleq	r0, r0, #2
 800f786:	3302      	addeq	r3, #2
 800f788:	2800      	cmp	r0, #0
 800f78a:	db05      	blt.n	800f798 <__hi0bits+0x38>
 800f78c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f790:	f103 0301 	add.w	r3, r3, #1
 800f794:	bf08      	it	eq
 800f796:	2320      	moveq	r3, #32
 800f798:	4618      	mov	r0, r3
 800f79a:	4770      	bx	lr
 800f79c:	2300      	movs	r3, #0
 800f79e:	e7e4      	b.n	800f76a <__hi0bits+0xa>

0800f7a0 <__lo0bits>:
 800f7a0:	6803      	ldr	r3, [r0, #0]
 800f7a2:	f013 0207 	ands.w	r2, r3, #7
 800f7a6:	d00c      	beq.n	800f7c2 <__lo0bits+0x22>
 800f7a8:	07d9      	lsls	r1, r3, #31
 800f7aa:	d422      	bmi.n	800f7f2 <__lo0bits+0x52>
 800f7ac:	079a      	lsls	r2, r3, #30
 800f7ae:	bf49      	itett	mi
 800f7b0:	085b      	lsrmi	r3, r3, #1
 800f7b2:	089b      	lsrpl	r3, r3, #2
 800f7b4:	6003      	strmi	r3, [r0, #0]
 800f7b6:	2201      	movmi	r2, #1
 800f7b8:	bf5c      	itt	pl
 800f7ba:	6003      	strpl	r3, [r0, #0]
 800f7bc:	2202      	movpl	r2, #2
 800f7be:	4610      	mov	r0, r2
 800f7c0:	4770      	bx	lr
 800f7c2:	b299      	uxth	r1, r3
 800f7c4:	b909      	cbnz	r1, 800f7ca <__lo0bits+0x2a>
 800f7c6:	0c1b      	lsrs	r3, r3, #16
 800f7c8:	2210      	movs	r2, #16
 800f7ca:	b2d9      	uxtb	r1, r3
 800f7cc:	b909      	cbnz	r1, 800f7d2 <__lo0bits+0x32>
 800f7ce:	3208      	adds	r2, #8
 800f7d0:	0a1b      	lsrs	r3, r3, #8
 800f7d2:	0719      	lsls	r1, r3, #28
 800f7d4:	bf04      	itt	eq
 800f7d6:	091b      	lsreq	r3, r3, #4
 800f7d8:	3204      	addeq	r2, #4
 800f7da:	0799      	lsls	r1, r3, #30
 800f7dc:	bf04      	itt	eq
 800f7de:	089b      	lsreq	r3, r3, #2
 800f7e0:	3202      	addeq	r2, #2
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d403      	bmi.n	800f7ee <__lo0bits+0x4e>
 800f7e6:	085b      	lsrs	r3, r3, #1
 800f7e8:	f102 0201 	add.w	r2, r2, #1
 800f7ec:	d003      	beq.n	800f7f6 <__lo0bits+0x56>
 800f7ee:	6003      	str	r3, [r0, #0]
 800f7f0:	e7e5      	b.n	800f7be <__lo0bits+0x1e>
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	e7e3      	b.n	800f7be <__lo0bits+0x1e>
 800f7f6:	2220      	movs	r2, #32
 800f7f8:	e7e1      	b.n	800f7be <__lo0bits+0x1e>
	...

0800f7fc <__i2b>:
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	460c      	mov	r4, r1
 800f800:	2101      	movs	r1, #1
 800f802:	f7ff ff05 	bl	800f610 <_Balloc>
 800f806:	4602      	mov	r2, r0
 800f808:	b928      	cbnz	r0, 800f816 <__i2b+0x1a>
 800f80a:	4b05      	ldr	r3, [pc, #20]	; (800f820 <__i2b+0x24>)
 800f80c:	4805      	ldr	r0, [pc, #20]	; (800f824 <__i2b+0x28>)
 800f80e:	f240 1145 	movw	r1, #325	; 0x145
 800f812:	f000 fb5b 	bl	800fecc <__assert_func>
 800f816:	2301      	movs	r3, #1
 800f818:	6144      	str	r4, [r0, #20]
 800f81a:	6103      	str	r3, [r0, #16]
 800f81c:	bd10      	pop	{r4, pc}
 800f81e:	bf00      	nop
 800f820:	08011b54 	.word	0x08011b54
 800f824:	08011b76 	.word	0x08011b76

0800f828 <__multiply>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	4691      	mov	r9, r2
 800f82e:	690a      	ldr	r2, [r1, #16]
 800f830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f834:	429a      	cmp	r2, r3
 800f836:	bfb8      	it	lt
 800f838:	460b      	movlt	r3, r1
 800f83a:	460c      	mov	r4, r1
 800f83c:	bfbc      	itt	lt
 800f83e:	464c      	movlt	r4, r9
 800f840:	4699      	movlt	r9, r3
 800f842:	6927      	ldr	r7, [r4, #16]
 800f844:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	6861      	ldr	r1, [r4, #4]
 800f84c:	eb07 060a 	add.w	r6, r7, sl
 800f850:	42b3      	cmp	r3, r6
 800f852:	b085      	sub	sp, #20
 800f854:	bfb8      	it	lt
 800f856:	3101      	addlt	r1, #1
 800f858:	f7ff feda 	bl	800f610 <_Balloc>
 800f85c:	b930      	cbnz	r0, 800f86c <__multiply+0x44>
 800f85e:	4602      	mov	r2, r0
 800f860:	4b44      	ldr	r3, [pc, #272]	; (800f974 <__multiply+0x14c>)
 800f862:	4845      	ldr	r0, [pc, #276]	; (800f978 <__multiply+0x150>)
 800f864:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f868:	f000 fb30 	bl	800fecc <__assert_func>
 800f86c:	f100 0514 	add.w	r5, r0, #20
 800f870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f874:	462b      	mov	r3, r5
 800f876:	2200      	movs	r2, #0
 800f878:	4543      	cmp	r3, r8
 800f87a:	d321      	bcc.n	800f8c0 <__multiply+0x98>
 800f87c:	f104 0314 	add.w	r3, r4, #20
 800f880:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f884:	f109 0314 	add.w	r3, r9, #20
 800f888:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f88c:	9202      	str	r2, [sp, #8]
 800f88e:	1b3a      	subs	r2, r7, r4
 800f890:	3a15      	subs	r2, #21
 800f892:	f022 0203 	bic.w	r2, r2, #3
 800f896:	3204      	adds	r2, #4
 800f898:	f104 0115 	add.w	r1, r4, #21
 800f89c:	428f      	cmp	r7, r1
 800f89e:	bf38      	it	cc
 800f8a0:	2204      	movcc	r2, #4
 800f8a2:	9201      	str	r2, [sp, #4]
 800f8a4:	9a02      	ldr	r2, [sp, #8]
 800f8a6:	9303      	str	r3, [sp, #12]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d80c      	bhi.n	800f8c6 <__multiply+0x9e>
 800f8ac:	2e00      	cmp	r6, #0
 800f8ae:	dd03      	ble.n	800f8b8 <__multiply+0x90>
 800f8b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d05b      	beq.n	800f970 <__multiply+0x148>
 800f8b8:	6106      	str	r6, [r0, #16]
 800f8ba:	b005      	add	sp, #20
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c0:	f843 2b04 	str.w	r2, [r3], #4
 800f8c4:	e7d8      	b.n	800f878 <__multiply+0x50>
 800f8c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8ca:	f1ba 0f00 	cmp.w	sl, #0
 800f8ce:	d024      	beq.n	800f91a <__multiply+0xf2>
 800f8d0:	f104 0e14 	add.w	lr, r4, #20
 800f8d4:	46a9      	mov	r9, r5
 800f8d6:	f04f 0c00 	mov.w	ip, #0
 800f8da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f8de:	f8d9 1000 	ldr.w	r1, [r9]
 800f8e2:	fa1f fb82 	uxth.w	fp, r2
 800f8e6:	b289      	uxth	r1, r1
 800f8e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f8ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800f8f4:	4461      	add	r1, ip
 800f8f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800f8fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f902:	b289      	uxth	r1, r1
 800f904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f908:	4577      	cmp	r7, lr
 800f90a:	f849 1b04 	str.w	r1, [r9], #4
 800f90e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f912:	d8e2      	bhi.n	800f8da <__multiply+0xb2>
 800f914:	9a01      	ldr	r2, [sp, #4]
 800f916:	f845 c002 	str.w	ip, [r5, r2]
 800f91a:	9a03      	ldr	r2, [sp, #12]
 800f91c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f920:	3304      	adds	r3, #4
 800f922:	f1b9 0f00 	cmp.w	r9, #0
 800f926:	d021      	beq.n	800f96c <__multiply+0x144>
 800f928:	6829      	ldr	r1, [r5, #0]
 800f92a:	f104 0c14 	add.w	ip, r4, #20
 800f92e:	46ae      	mov	lr, r5
 800f930:	f04f 0a00 	mov.w	sl, #0
 800f934:	f8bc b000 	ldrh.w	fp, [ip]
 800f938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f93c:	fb09 220b 	mla	r2, r9, fp, r2
 800f940:	4452      	add	r2, sl
 800f942:	b289      	uxth	r1, r1
 800f944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f948:	f84e 1b04 	str.w	r1, [lr], #4
 800f94c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f954:	f8be 1000 	ldrh.w	r1, [lr]
 800f958:	fb09 110a 	mla	r1, r9, sl, r1
 800f95c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f960:	4567      	cmp	r7, ip
 800f962:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f966:	d8e5      	bhi.n	800f934 <__multiply+0x10c>
 800f968:	9a01      	ldr	r2, [sp, #4]
 800f96a:	50a9      	str	r1, [r5, r2]
 800f96c:	3504      	adds	r5, #4
 800f96e:	e799      	b.n	800f8a4 <__multiply+0x7c>
 800f970:	3e01      	subs	r6, #1
 800f972:	e79b      	b.n	800f8ac <__multiply+0x84>
 800f974:	08011b54 	.word	0x08011b54
 800f978:	08011b76 	.word	0x08011b76

0800f97c <__pow5mult>:
 800f97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f980:	4615      	mov	r5, r2
 800f982:	f012 0203 	ands.w	r2, r2, #3
 800f986:	4606      	mov	r6, r0
 800f988:	460f      	mov	r7, r1
 800f98a:	d007      	beq.n	800f99c <__pow5mult+0x20>
 800f98c:	4c25      	ldr	r4, [pc, #148]	; (800fa24 <__pow5mult+0xa8>)
 800f98e:	3a01      	subs	r2, #1
 800f990:	2300      	movs	r3, #0
 800f992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f996:	f7ff fe9d 	bl	800f6d4 <__multadd>
 800f99a:	4607      	mov	r7, r0
 800f99c:	10ad      	asrs	r5, r5, #2
 800f99e:	d03d      	beq.n	800fa1c <__pow5mult+0xa0>
 800f9a0:	69f4      	ldr	r4, [r6, #28]
 800f9a2:	b97c      	cbnz	r4, 800f9c4 <__pow5mult+0x48>
 800f9a4:	2010      	movs	r0, #16
 800f9a6:	f7ff fcd1 	bl	800f34c <malloc>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	61f0      	str	r0, [r6, #28]
 800f9ae:	b928      	cbnz	r0, 800f9bc <__pow5mult+0x40>
 800f9b0:	4b1d      	ldr	r3, [pc, #116]	; (800fa28 <__pow5mult+0xac>)
 800f9b2:	481e      	ldr	r0, [pc, #120]	; (800fa2c <__pow5mult+0xb0>)
 800f9b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f9b8:	f000 fa88 	bl	800fecc <__assert_func>
 800f9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9c0:	6004      	str	r4, [r0, #0]
 800f9c2:	60c4      	str	r4, [r0, #12]
 800f9c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9cc:	b94c      	cbnz	r4, 800f9e2 <__pow5mult+0x66>
 800f9ce:	f240 2171 	movw	r1, #625	; 0x271
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f7ff ff12 	bl	800f7fc <__i2b>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9de:	4604      	mov	r4, r0
 800f9e0:	6003      	str	r3, [r0, #0]
 800f9e2:	f04f 0900 	mov.w	r9, #0
 800f9e6:	07eb      	lsls	r3, r5, #31
 800f9e8:	d50a      	bpl.n	800fa00 <__pow5mult+0x84>
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7ff ff1a 	bl	800f828 <__multiply>
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7ff fe49 	bl	800f690 <_Bfree>
 800f9fe:	4647      	mov	r7, r8
 800fa00:	106d      	asrs	r5, r5, #1
 800fa02:	d00b      	beq.n	800fa1c <__pow5mult+0xa0>
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	b938      	cbnz	r0, 800fa18 <__pow5mult+0x9c>
 800fa08:	4622      	mov	r2, r4
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f7ff ff0b 	bl	800f828 <__multiply>
 800fa12:	6020      	str	r0, [r4, #0]
 800fa14:	f8c0 9000 	str.w	r9, [r0]
 800fa18:	4604      	mov	r4, r0
 800fa1a:	e7e4      	b.n	800f9e6 <__pow5mult+0x6a>
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa22:	bf00      	nop
 800fa24:	08011cc0 	.word	0x08011cc0
 800fa28:	08011ae5 	.word	0x08011ae5
 800fa2c:	08011b76 	.word	0x08011b76

0800fa30 <__lshift>:
 800fa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa34:	460c      	mov	r4, r1
 800fa36:	6849      	ldr	r1, [r1, #4]
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa3e:	68a3      	ldr	r3, [r4, #8]
 800fa40:	4607      	mov	r7, r0
 800fa42:	4691      	mov	r9, r2
 800fa44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa48:	f108 0601 	add.w	r6, r8, #1
 800fa4c:	42b3      	cmp	r3, r6
 800fa4e:	db0b      	blt.n	800fa68 <__lshift+0x38>
 800fa50:	4638      	mov	r0, r7
 800fa52:	f7ff fddd 	bl	800f610 <_Balloc>
 800fa56:	4605      	mov	r5, r0
 800fa58:	b948      	cbnz	r0, 800fa6e <__lshift+0x3e>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	4b28      	ldr	r3, [pc, #160]	; (800fb00 <__lshift+0xd0>)
 800fa5e:	4829      	ldr	r0, [pc, #164]	; (800fb04 <__lshift+0xd4>)
 800fa60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa64:	f000 fa32 	bl	800fecc <__assert_func>
 800fa68:	3101      	adds	r1, #1
 800fa6a:	005b      	lsls	r3, r3, #1
 800fa6c:	e7ee      	b.n	800fa4c <__lshift+0x1c>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	f100 0114 	add.w	r1, r0, #20
 800fa74:	f100 0210 	add.w	r2, r0, #16
 800fa78:	4618      	mov	r0, r3
 800fa7a:	4553      	cmp	r3, sl
 800fa7c:	db33      	blt.n	800fae6 <__lshift+0xb6>
 800fa7e:	6920      	ldr	r0, [r4, #16]
 800fa80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa84:	f104 0314 	add.w	r3, r4, #20
 800fa88:	f019 091f 	ands.w	r9, r9, #31
 800fa8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa94:	d02b      	beq.n	800faee <__lshift+0xbe>
 800fa96:	f1c9 0e20 	rsb	lr, r9, #32
 800fa9a:	468a      	mov	sl, r1
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	6818      	ldr	r0, [r3, #0]
 800faa0:	fa00 f009 	lsl.w	r0, r0, r9
 800faa4:	4310      	orrs	r0, r2
 800faa6:	f84a 0b04 	str.w	r0, [sl], #4
 800faaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800faae:	459c      	cmp	ip, r3
 800fab0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fab4:	d8f3      	bhi.n	800fa9e <__lshift+0x6e>
 800fab6:	ebac 0304 	sub.w	r3, ip, r4
 800faba:	3b15      	subs	r3, #21
 800fabc:	f023 0303 	bic.w	r3, r3, #3
 800fac0:	3304      	adds	r3, #4
 800fac2:	f104 0015 	add.w	r0, r4, #21
 800fac6:	4584      	cmp	ip, r0
 800fac8:	bf38      	it	cc
 800faca:	2304      	movcc	r3, #4
 800facc:	50ca      	str	r2, [r1, r3]
 800face:	b10a      	cbz	r2, 800fad4 <__lshift+0xa4>
 800fad0:	f108 0602 	add.w	r6, r8, #2
 800fad4:	3e01      	subs	r6, #1
 800fad6:	4638      	mov	r0, r7
 800fad8:	612e      	str	r6, [r5, #16]
 800fada:	4621      	mov	r1, r4
 800fadc:	f7ff fdd8 	bl	800f690 <_Bfree>
 800fae0:	4628      	mov	r0, r5
 800fae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fae6:	f842 0f04 	str.w	r0, [r2, #4]!
 800faea:	3301      	adds	r3, #1
 800faec:	e7c5      	b.n	800fa7a <__lshift+0x4a>
 800faee:	3904      	subs	r1, #4
 800faf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800faf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800faf8:	459c      	cmp	ip, r3
 800fafa:	d8f9      	bhi.n	800faf0 <__lshift+0xc0>
 800fafc:	e7ea      	b.n	800fad4 <__lshift+0xa4>
 800fafe:	bf00      	nop
 800fb00:	08011b54 	.word	0x08011b54
 800fb04:	08011b76 	.word	0x08011b76

0800fb08 <__mcmp>:
 800fb08:	b530      	push	{r4, r5, lr}
 800fb0a:	6902      	ldr	r2, [r0, #16]
 800fb0c:	690c      	ldr	r4, [r1, #16]
 800fb0e:	1b12      	subs	r2, r2, r4
 800fb10:	d10e      	bne.n	800fb30 <__mcmp+0x28>
 800fb12:	f100 0314 	add.w	r3, r0, #20
 800fb16:	3114      	adds	r1, #20
 800fb18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb28:	42a5      	cmp	r5, r4
 800fb2a:	d003      	beq.n	800fb34 <__mcmp+0x2c>
 800fb2c:	d305      	bcc.n	800fb3a <__mcmp+0x32>
 800fb2e:	2201      	movs	r2, #1
 800fb30:	4610      	mov	r0, r2
 800fb32:	bd30      	pop	{r4, r5, pc}
 800fb34:	4283      	cmp	r3, r0
 800fb36:	d3f3      	bcc.n	800fb20 <__mcmp+0x18>
 800fb38:	e7fa      	b.n	800fb30 <__mcmp+0x28>
 800fb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb3e:	e7f7      	b.n	800fb30 <__mcmp+0x28>

0800fb40 <__mdiff>:
 800fb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	4606      	mov	r6, r0
 800fb48:	4611      	mov	r1, r2
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	4690      	mov	r8, r2
 800fb4e:	f7ff ffdb 	bl	800fb08 <__mcmp>
 800fb52:	1e05      	subs	r5, r0, #0
 800fb54:	d110      	bne.n	800fb78 <__mdiff+0x38>
 800fb56:	4629      	mov	r1, r5
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7ff fd59 	bl	800f610 <_Balloc>
 800fb5e:	b930      	cbnz	r0, 800fb6e <__mdiff+0x2e>
 800fb60:	4b3a      	ldr	r3, [pc, #232]	; (800fc4c <__mdiff+0x10c>)
 800fb62:	4602      	mov	r2, r0
 800fb64:	f240 2137 	movw	r1, #567	; 0x237
 800fb68:	4839      	ldr	r0, [pc, #228]	; (800fc50 <__mdiff+0x110>)
 800fb6a:	f000 f9af 	bl	800fecc <__assert_func>
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb78:	bfa4      	itt	ge
 800fb7a:	4643      	movge	r3, r8
 800fb7c:	46a0      	movge	r8, r4
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb84:	bfa6      	itte	ge
 800fb86:	461c      	movge	r4, r3
 800fb88:	2500      	movge	r5, #0
 800fb8a:	2501      	movlt	r5, #1
 800fb8c:	f7ff fd40 	bl	800f610 <_Balloc>
 800fb90:	b920      	cbnz	r0, 800fb9c <__mdiff+0x5c>
 800fb92:	4b2e      	ldr	r3, [pc, #184]	; (800fc4c <__mdiff+0x10c>)
 800fb94:	4602      	mov	r2, r0
 800fb96:	f240 2145 	movw	r1, #581	; 0x245
 800fb9a:	e7e5      	b.n	800fb68 <__mdiff+0x28>
 800fb9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fba0:	6926      	ldr	r6, [r4, #16]
 800fba2:	60c5      	str	r5, [r0, #12]
 800fba4:	f104 0914 	add.w	r9, r4, #20
 800fba8:	f108 0514 	add.w	r5, r8, #20
 800fbac:	f100 0e14 	add.w	lr, r0, #20
 800fbb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fbb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbb8:	f108 0210 	add.w	r2, r8, #16
 800fbbc:	46f2      	mov	sl, lr
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fbc8:	fa11 f88b 	uxtah	r8, r1, fp
 800fbcc:	b299      	uxth	r1, r3
 800fbce:	0c1b      	lsrs	r3, r3, #16
 800fbd0:	eba8 0801 	sub.w	r8, r8, r1
 800fbd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fbd8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fbdc:	fa1f f888 	uxth.w	r8, r8
 800fbe0:	1419      	asrs	r1, r3, #16
 800fbe2:	454e      	cmp	r6, r9
 800fbe4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fbe8:	f84a 3b04 	str.w	r3, [sl], #4
 800fbec:	d8e8      	bhi.n	800fbc0 <__mdiff+0x80>
 800fbee:	1b33      	subs	r3, r6, r4
 800fbf0:	3b15      	subs	r3, #21
 800fbf2:	f023 0303 	bic.w	r3, r3, #3
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	3415      	adds	r4, #21
 800fbfa:	42a6      	cmp	r6, r4
 800fbfc:	bf38      	it	cc
 800fbfe:	2304      	movcc	r3, #4
 800fc00:	441d      	add	r5, r3
 800fc02:	4473      	add	r3, lr
 800fc04:	469e      	mov	lr, r3
 800fc06:	462e      	mov	r6, r5
 800fc08:	4566      	cmp	r6, ip
 800fc0a:	d30e      	bcc.n	800fc2a <__mdiff+0xea>
 800fc0c:	f10c 0203 	add.w	r2, ip, #3
 800fc10:	1b52      	subs	r2, r2, r5
 800fc12:	f022 0203 	bic.w	r2, r2, #3
 800fc16:	3d03      	subs	r5, #3
 800fc18:	45ac      	cmp	ip, r5
 800fc1a:	bf38      	it	cc
 800fc1c:	2200      	movcc	r2, #0
 800fc1e:	4413      	add	r3, r2
 800fc20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc24:	b17a      	cbz	r2, 800fc46 <__mdiff+0x106>
 800fc26:	6107      	str	r7, [r0, #16]
 800fc28:	e7a4      	b.n	800fb74 <__mdiff+0x34>
 800fc2a:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc2e:	fa11 f288 	uxtah	r2, r1, r8
 800fc32:	1414      	asrs	r4, r2, #16
 800fc34:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc38:	b292      	uxth	r2, r2
 800fc3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc3e:	f84e 2b04 	str.w	r2, [lr], #4
 800fc42:	1421      	asrs	r1, r4, #16
 800fc44:	e7e0      	b.n	800fc08 <__mdiff+0xc8>
 800fc46:	3f01      	subs	r7, #1
 800fc48:	e7ea      	b.n	800fc20 <__mdiff+0xe0>
 800fc4a:	bf00      	nop
 800fc4c:	08011b54 	.word	0x08011b54
 800fc50:	08011b76 	.word	0x08011b76

0800fc54 <__d2b>:
 800fc54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc58:	460f      	mov	r7, r1
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	ec59 8b10 	vmov	r8, r9, d0
 800fc60:	4616      	mov	r6, r2
 800fc62:	f7ff fcd5 	bl	800f610 <_Balloc>
 800fc66:	4604      	mov	r4, r0
 800fc68:	b930      	cbnz	r0, 800fc78 <__d2b+0x24>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	4b24      	ldr	r3, [pc, #144]	; (800fd00 <__d2b+0xac>)
 800fc6e:	4825      	ldr	r0, [pc, #148]	; (800fd04 <__d2b+0xb0>)
 800fc70:	f240 310f 	movw	r1, #783	; 0x30f
 800fc74:	f000 f92a 	bl	800fecc <__assert_func>
 800fc78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc80:	bb2d      	cbnz	r5, 800fcce <__d2b+0x7a>
 800fc82:	9301      	str	r3, [sp, #4]
 800fc84:	f1b8 0300 	subs.w	r3, r8, #0
 800fc88:	d026      	beq.n	800fcd8 <__d2b+0x84>
 800fc8a:	4668      	mov	r0, sp
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	f7ff fd87 	bl	800f7a0 <__lo0bits>
 800fc92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc96:	b1e8      	cbz	r0, 800fcd4 <__d2b+0x80>
 800fc98:	f1c0 0320 	rsb	r3, r0, #32
 800fc9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fca0:	430b      	orrs	r3, r1
 800fca2:	40c2      	lsrs	r2, r0
 800fca4:	6163      	str	r3, [r4, #20]
 800fca6:	9201      	str	r2, [sp, #4]
 800fca8:	9b01      	ldr	r3, [sp, #4]
 800fcaa:	61a3      	str	r3, [r4, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	bf14      	ite	ne
 800fcb0:	2202      	movne	r2, #2
 800fcb2:	2201      	moveq	r2, #1
 800fcb4:	6122      	str	r2, [r4, #16]
 800fcb6:	b1bd      	cbz	r5, 800fce8 <__d2b+0x94>
 800fcb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcbc:	4405      	add	r5, r0
 800fcbe:	603d      	str	r5, [r7, #0]
 800fcc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcc4:	6030      	str	r0, [r6, #0]
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	b003      	add	sp, #12
 800fcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcd2:	e7d6      	b.n	800fc82 <__d2b+0x2e>
 800fcd4:	6161      	str	r1, [r4, #20]
 800fcd6:	e7e7      	b.n	800fca8 <__d2b+0x54>
 800fcd8:	a801      	add	r0, sp, #4
 800fcda:	f7ff fd61 	bl	800f7a0 <__lo0bits>
 800fcde:	9b01      	ldr	r3, [sp, #4]
 800fce0:	6163      	str	r3, [r4, #20]
 800fce2:	3020      	adds	r0, #32
 800fce4:	2201      	movs	r2, #1
 800fce6:	e7e5      	b.n	800fcb4 <__d2b+0x60>
 800fce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fcec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcf0:	6038      	str	r0, [r7, #0]
 800fcf2:	6918      	ldr	r0, [r3, #16]
 800fcf4:	f7ff fd34 	bl	800f760 <__hi0bits>
 800fcf8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fcfc:	e7e2      	b.n	800fcc4 <__d2b+0x70>
 800fcfe:	bf00      	nop
 800fd00:	08011b54 	.word	0x08011b54
 800fd04:	08011b76 	.word	0x08011b76

0800fd08 <__sread>:
 800fd08:	b510      	push	{r4, lr}
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd10:	f000 f8a8 	bl	800fe64 <_read_r>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	bfab      	itete	ge
 800fd18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd1a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd1c:	181b      	addge	r3, r3, r0
 800fd1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd22:	bfac      	ite	ge
 800fd24:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd26:	81a3      	strhlt	r3, [r4, #12]
 800fd28:	bd10      	pop	{r4, pc}

0800fd2a <__swrite>:
 800fd2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2e:	461f      	mov	r7, r3
 800fd30:	898b      	ldrh	r3, [r1, #12]
 800fd32:	05db      	lsls	r3, r3, #23
 800fd34:	4605      	mov	r5, r0
 800fd36:	460c      	mov	r4, r1
 800fd38:	4616      	mov	r6, r2
 800fd3a:	d505      	bpl.n	800fd48 <__swrite+0x1e>
 800fd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd40:	2302      	movs	r3, #2
 800fd42:	2200      	movs	r2, #0
 800fd44:	f000 f87c 	bl	800fe40 <_lseek_r>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd52:	81a3      	strh	r3, [r4, #12]
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	4628      	mov	r0, r5
 800fd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5e:	f000 b8a3 	b.w	800fea8 <_write_r>

0800fd62 <__sseek>:
 800fd62:	b510      	push	{r4, lr}
 800fd64:	460c      	mov	r4, r1
 800fd66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd6a:	f000 f869 	bl	800fe40 <_lseek_r>
 800fd6e:	1c43      	adds	r3, r0, #1
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	bf15      	itete	ne
 800fd74:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd7e:	81a3      	strheq	r3, [r4, #12]
 800fd80:	bf18      	it	ne
 800fd82:	81a3      	strhne	r3, [r4, #12]
 800fd84:	bd10      	pop	{r4, pc}

0800fd86 <__sclose>:
 800fd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8a:	f000 b849 	b.w	800fe20 <_close_r>

0800fd8e <_realloc_r>:
 800fd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd92:	4680      	mov	r8, r0
 800fd94:	4614      	mov	r4, r2
 800fd96:	460e      	mov	r6, r1
 800fd98:	b921      	cbnz	r1, 800fda4 <_realloc_r+0x16>
 800fd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9e:	4611      	mov	r1, r2
 800fda0:	f7ff bafc 	b.w	800f39c <_malloc_r>
 800fda4:	b92a      	cbnz	r2, 800fdb2 <_realloc_r+0x24>
 800fda6:	f7ff f92d 	bl	800f004 <_free_r>
 800fdaa:	4625      	mov	r5, r4
 800fdac:	4628      	mov	r0, r5
 800fdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb2:	f000 f8d1 	bl	800ff58 <_malloc_usable_size_r>
 800fdb6:	4284      	cmp	r4, r0
 800fdb8:	4607      	mov	r7, r0
 800fdba:	d802      	bhi.n	800fdc2 <_realloc_r+0x34>
 800fdbc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdc0:	d812      	bhi.n	800fde8 <_realloc_r+0x5a>
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	f7ff fae9 	bl	800f39c <_malloc_r>
 800fdca:	4605      	mov	r5, r0
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d0ed      	beq.n	800fdac <_realloc_r+0x1e>
 800fdd0:	42bc      	cmp	r4, r7
 800fdd2:	4622      	mov	r2, r4
 800fdd4:	4631      	mov	r1, r6
 800fdd6:	bf28      	it	cs
 800fdd8:	463a      	movcs	r2, r7
 800fdda:	f7fe fa8a 	bl	800e2f2 <memcpy>
 800fdde:	4631      	mov	r1, r6
 800fde0:	4640      	mov	r0, r8
 800fde2:	f7ff f90f 	bl	800f004 <_free_r>
 800fde6:	e7e1      	b.n	800fdac <_realloc_r+0x1e>
 800fde8:	4635      	mov	r5, r6
 800fdea:	e7df      	b.n	800fdac <_realloc_r+0x1e>

0800fdec <memmove>:
 800fdec:	4288      	cmp	r0, r1
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	eb01 0402 	add.w	r4, r1, r2
 800fdf4:	d902      	bls.n	800fdfc <memmove+0x10>
 800fdf6:	4284      	cmp	r4, r0
 800fdf8:	4623      	mov	r3, r4
 800fdfa:	d807      	bhi.n	800fe0c <memmove+0x20>
 800fdfc:	1e43      	subs	r3, r0, #1
 800fdfe:	42a1      	cmp	r1, r4
 800fe00:	d008      	beq.n	800fe14 <memmove+0x28>
 800fe02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe0a:	e7f8      	b.n	800fdfe <memmove+0x12>
 800fe0c:	4402      	add	r2, r0
 800fe0e:	4601      	mov	r1, r0
 800fe10:	428a      	cmp	r2, r1
 800fe12:	d100      	bne.n	800fe16 <memmove+0x2a>
 800fe14:	bd10      	pop	{r4, pc}
 800fe16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe1e:	e7f7      	b.n	800fe10 <memmove+0x24>

0800fe20 <_close_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4d06      	ldr	r5, [pc, #24]	; (800fe3c <_close_r+0x1c>)
 800fe24:	2300      	movs	r3, #0
 800fe26:	4604      	mov	r4, r0
 800fe28:	4608      	mov	r0, r1
 800fe2a:	602b      	str	r3, [r5, #0]
 800fe2c:	f7f2 fbb5 	bl	800259a <_close>
 800fe30:	1c43      	adds	r3, r0, #1
 800fe32:	d102      	bne.n	800fe3a <_close_r+0x1a>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	b103      	cbz	r3, 800fe3a <_close_r+0x1a>
 800fe38:	6023      	str	r3, [r4, #0]
 800fe3a:	bd38      	pop	{r3, r4, r5, pc}
 800fe3c:	20005dbc 	.word	0x20005dbc

0800fe40 <_lseek_r>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4d07      	ldr	r5, [pc, #28]	; (800fe60 <_lseek_r+0x20>)
 800fe44:	4604      	mov	r4, r0
 800fe46:	4608      	mov	r0, r1
 800fe48:	4611      	mov	r1, r2
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	602a      	str	r2, [r5, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	f7f2 fbca 	bl	80025e8 <_lseek>
 800fe54:	1c43      	adds	r3, r0, #1
 800fe56:	d102      	bne.n	800fe5e <_lseek_r+0x1e>
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	b103      	cbz	r3, 800fe5e <_lseek_r+0x1e>
 800fe5c:	6023      	str	r3, [r4, #0]
 800fe5e:	bd38      	pop	{r3, r4, r5, pc}
 800fe60:	20005dbc 	.word	0x20005dbc

0800fe64 <_read_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d07      	ldr	r5, [pc, #28]	; (800fe84 <_read_r+0x20>)
 800fe68:	4604      	mov	r4, r0
 800fe6a:	4608      	mov	r0, r1
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	2200      	movs	r2, #0
 800fe70:	602a      	str	r2, [r5, #0]
 800fe72:	461a      	mov	r2, r3
 800fe74:	f7f2 fb58 	bl	8002528 <_read>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_read_r+0x1e>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_read_r+0x1e>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	20005dbc 	.word	0x20005dbc

0800fe88 <_sbrk_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d06      	ldr	r5, [pc, #24]	; (800fea4 <_sbrk_r+0x1c>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f7f2 fbb6 	bl	8002604 <_sbrk>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_sbrk_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_sbrk_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	20005dbc 	.word	0x20005dbc

0800fea8 <_write_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d07      	ldr	r5, [pc, #28]	; (800fec8 <_write_r+0x20>)
 800feac:	4604      	mov	r4, r0
 800feae:	4608      	mov	r0, r1
 800feb0:	4611      	mov	r1, r2
 800feb2:	2200      	movs	r2, #0
 800feb4:	602a      	str	r2, [r5, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	f7f2 fb53 	bl	8002562 <_write>
 800febc:	1c43      	adds	r3, r0, #1
 800febe:	d102      	bne.n	800fec6 <_write_r+0x1e>
 800fec0:	682b      	ldr	r3, [r5, #0]
 800fec2:	b103      	cbz	r3, 800fec6 <_write_r+0x1e>
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	bd38      	pop	{r3, r4, r5, pc}
 800fec8:	20005dbc 	.word	0x20005dbc

0800fecc <__assert_func>:
 800fecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fece:	4614      	mov	r4, r2
 800fed0:	461a      	mov	r2, r3
 800fed2:	4b09      	ldr	r3, [pc, #36]	; (800fef8 <__assert_func+0x2c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4605      	mov	r5, r0
 800fed8:	68d8      	ldr	r0, [r3, #12]
 800feda:	b14c      	cbz	r4, 800fef0 <__assert_func+0x24>
 800fedc:	4b07      	ldr	r3, [pc, #28]	; (800fefc <__assert_func+0x30>)
 800fede:	9100      	str	r1, [sp, #0]
 800fee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fee4:	4906      	ldr	r1, [pc, #24]	; (800ff00 <__assert_func+0x34>)
 800fee6:	462b      	mov	r3, r5
 800fee8:	f000 f83e 	bl	800ff68 <fiprintf>
 800feec:	f000 f85b 	bl	800ffa6 <abort>
 800fef0:	4b04      	ldr	r3, [pc, #16]	; (800ff04 <__assert_func+0x38>)
 800fef2:	461c      	mov	r4, r3
 800fef4:	e7f3      	b.n	800fede <__assert_func+0x12>
 800fef6:	bf00      	nop
 800fef8:	20000084 	.word	0x20000084
 800fefc:	08011dd7 	.word	0x08011dd7
 800ff00:	08011de4 	.word	0x08011de4
 800ff04:	08011e12 	.word	0x08011e12

0800ff08 <_calloc_r>:
 800ff08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff0a:	fba1 2402 	umull	r2, r4, r1, r2
 800ff0e:	b94c      	cbnz	r4, 800ff24 <_calloc_r+0x1c>
 800ff10:	4611      	mov	r1, r2
 800ff12:	9201      	str	r2, [sp, #4]
 800ff14:	f7ff fa42 	bl	800f39c <_malloc_r>
 800ff18:	9a01      	ldr	r2, [sp, #4]
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	b930      	cbnz	r0, 800ff2c <_calloc_r+0x24>
 800ff1e:	4628      	mov	r0, r5
 800ff20:	b003      	add	sp, #12
 800ff22:	bd30      	pop	{r4, r5, pc}
 800ff24:	220c      	movs	r2, #12
 800ff26:	6002      	str	r2, [r0, #0]
 800ff28:	2500      	movs	r5, #0
 800ff2a:	e7f8      	b.n	800ff1e <_calloc_r+0x16>
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7fe f950 	bl	800e1d2 <memset>
 800ff32:	e7f4      	b.n	800ff1e <_calloc_r+0x16>

0800ff34 <__ascii_mbtowc>:
 800ff34:	b082      	sub	sp, #8
 800ff36:	b901      	cbnz	r1, 800ff3a <__ascii_mbtowc+0x6>
 800ff38:	a901      	add	r1, sp, #4
 800ff3a:	b142      	cbz	r2, 800ff4e <__ascii_mbtowc+0x1a>
 800ff3c:	b14b      	cbz	r3, 800ff52 <__ascii_mbtowc+0x1e>
 800ff3e:	7813      	ldrb	r3, [r2, #0]
 800ff40:	600b      	str	r3, [r1, #0]
 800ff42:	7812      	ldrb	r2, [r2, #0]
 800ff44:	1e10      	subs	r0, r2, #0
 800ff46:	bf18      	it	ne
 800ff48:	2001      	movne	r0, #1
 800ff4a:	b002      	add	sp, #8
 800ff4c:	4770      	bx	lr
 800ff4e:	4610      	mov	r0, r2
 800ff50:	e7fb      	b.n	800ff4a <__ascii_mbtowc+0x16>
 800ff52:	f06f 0001 	mvn.w	r0, #1
 800ff56:	e7f8      	b.n	800ff4a <__ascii_mbtowc+0x16>

0800ff58 <_malloc_usable_size_r>:
 800ff58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff5c:	1f18      	subs	r0, r3, #4
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	bfbc      	itt	lt
 800ff62:	580b      	ldrlt	r3, [r1, r0]
 800ff64:	18c0      	addlt	r0, r0, r3
 800ff66:	4770      	bx	lr

0800ff68 <fiprintf>:
 800ff68:	b40e      	push	{r1, r2, r3}
 800ff6a:	b503      	push	{r0, r1, lr}
 800ff6c:	4601      	mov	r1, r0
 800ff6e:	ab03      	add	r3, sp, #12
 800ff70:	4805      	ldr	r0, [pc, #20]	; (800ff88 <fiprintf+0x20>)
 800ff72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff76:	6800      	ldr	r0, [r0, #0]
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	f000 f845 	bl	8010008 <_vfiprintf_r>
 800ff7e:	b002      	add	sp, #8
 800ff80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff84:	b003      	add	sp, #12
 800ff86:	4770      	bx	lr
 800ff88:	20000084 	.word	0x20000084

0800ff8c <__ascii_wctomb>:
 800ff8c:	b149      	cbz	r1, 800ffa2 <__ascii_wctomb+0x16>
 800ff8e:	2aff      	cmp	r2, #255	; 0xff
 800ff90:	bf85      	ittet	hi
 800ff92:	238a      	movhi	r3, #138	; 0x8a
 800ff94:	6003      	strhi	r3, [r0, #0]
 800ff96:	700a      	strbls	r2, [r1, #0]
 800ff98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ff9c:	bf98      	it	ls
 800ff9e:	2001      	movls	r0, #1
 800ffa0:	4770      	bx	lr
 800ffa2:	4608      	mov	r0, r1
 800ffa4:	4770      	bx	lr

0800ffa6 <abort>:
 800ffa6:	b508      	push	{r3, lr}
 800ffa8:	2006      	movs	r0, #6
 800ffaa:	f000 fa89 	bl	80104c0 <raise>
 800ffae:	2001      	movs	r0, #1
 800ffb0:	f7f2 fab0 	bl	8002514 <_exit>

0800ffb4 <__sfputc_r>:
 800ffb4:	6893      	ldr	r3, [r2, #8]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	b410      	push	{r4}
 800ffbc:	6093      	str	r3, [r2, #8]
 800ffbe:	da08      	bge.n	800ffd2 <__sfputc_r+0x1e>
 800ffc0:	6994      	ldr	r4, [r2, #24]
 800ffc2:	42a3      	cmp	r3, r4
 800ffc4:	db01      	blt.n	800ffca <__sfputc_r+0x16>
 800ffc6:	290a      	cmp	r1, #10
 800ffc8:	d103      	bne.n	800ffd2 <__sfputc_r+0x1e>
 800ffca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffce:	f000 b935 	b.w	801023c <__swbuf_r>
 800ffd2:	6813      	ldr	r3, [r2, #0]
 800ffd4:	1c58      	adds	r0, r3, #1
 800ffd6:	6010      	str	r0, [r2, #0]
 800ffd8:	7019      	strb	r1, [r3, #0]
 800ffda:	4608      	mov	r0, r1
 800ffdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <__sfputs_r>:
 800ffe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffe4:	4606      	mov	r6, r0
 800ffe6:	460f      	mov	r7, r1
 800ffe8:	4614      	mov	r4, r2
 800ffea:	18d5      	adds	r5, r2, r3
 800ffec:	42ac      	cmp	r4, r5
 800ffee:	d101      	bne.n	800fff4 <__sfputs_r+0x12>
 800fff0:	2000      	movs	r0, #0
 800fff2:	e007      	b.n	8010004 <__sfputs_r+0x22>
 800fff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff8:	463a      	mov	r2, r7
 800fffa:	4630      	mov	r0, r6
 800fffc:	f7ff ffda 	bl	800ffb4 <__sfputc_r>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d1f3      	bne.n	800ffec <__sfputs_r+0xa>
 8010004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010008 <_vfiprintf_r>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	460d      	mov	r5, r1
 801000e:	b09d      	sub	sp, #116	; 0x74
 8010010:	4614      	mov	r4, r2
 8010012:	4698      	mov	r8, r3
 8010014:	4606      	mov	r6, r0
 8010016:	b118      	cbz	r0, 8010020 <_vfiprintf_r+0x18>
 8010018:	6a03      	ldr	r3, [r0, #32]
 801001a:	b90b      	cbnz	r3, 8010020 <_vfiprintf_r+0x18>
 801001c:	f7fe f894 	bl	800e148 <__sinit>
 8010020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010022:	07d9      	lsls	r1, r3, #31
 8010024:	d405      	bmi.n	8010032 <_vfiprintf_r+0x2a>
 8010026:	89ab      	ldrh	r3, [r5, #12]
 8010028:	059a      	lsls	r2, r3, #22
 801002a:	d402      	bmi.n	8010032 <_vfiprintf_r+0x2a>
 801002c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801002e:	f7fe f95e 	bl	800e2ee <__retarget_lock_acquire_recursive>
 8010032:	89ab      	ldrh	r3, [r5, #12]
 8010034:	071b      	lsls	r3, r3, #28
 8010036:	d501      	bpl.n	801003c <_vfiprintf_r+0x34>
 8010038:	692b      	ldr	r3, [r5, #16]
 801003a:	b99b      	cbnz	r3, 8010064 <_vfiprintf_r+0x5c>
 801003c:	4629      	mov	r1, r5
 801003e:	4630      	mov	r0, r6
 8010040:	f000 f93a 	bl	80102b8 <__swsetup_r>
 8010044:	b170      	cbz	r0, 8010064 <_vfiprintf_r+0x5c>
 8010046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010048:	07dc      	lsls	r4, r3, #31
 801004a:	d504      	bpl.n	8010056 <_vfiprintf_r+0x4e>
 801004c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010050:	b01d      	add	sp, #116	; 0x74
 8010052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010056:	89ab      	ldrh	r3, [r5, #12]
 8010058:	0598      	lsls	r0, r3, #22
 801005a:	d4f7      	bmi.n	801004c <_vfiprintf_r+0x44>
 801005c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801005e:	f7fe f947 	bl	800e2f0 <__retarget_lock_release_recursive>
 8010062:	e7f3      	b.n	801004c <_vfiprintf_r+0x44>
 8010064:	2300      	movs	r3, #0
 8010066:	9309      	str	r3, [sp, #36]	; 0x24
 8010068:	2320      	movs	r3, #32
 801006a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801006e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010072:	2330      	movs	r3, #48	; 0x30
 8010074:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010228 <_vfiprintf_r+0x220>
 8010078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801007c:	f04f 0901 	mov.w	r9, #1
 8010080:	4623      	mov	r3, r4
 8010082:	469a      	mov	sl, r3
 8010084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010088:	b10a      	cbz	r2, 801008e <_vfiprintf_r+0x86>
 801008a:	2a25      	cmp	r2, #37	; 0x25
 801008c:	d1f9      	bne.n	8010082 <_vfiprintf_r+0x7a>
 801008e:	ebba 0b04 	subs.w	fp, sl, r4
 8010092:	d00b      	beq.n	80100ac <_vfiprintf_r+0xa4>
 8010094:	465b      	mov	r3, fp
 8010096:	4622      	mov	r2, r4
 8010098:	4629      	mov	r1, r5
 801009a:	4630      	mov	r0, r6
 801009c:	f7ff ffa1 	bl	800ffe2 <__sfputs_r>
 80100a0:	3001      	adds	r0, #1
 80100a2:	f000 80a9 	beq.w	80101f8 <_vfiprintf_r+0x1f0>
 80100a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100a8:	445a      	add	r2, fp
 80100aa:	9209      	str	r2, [sp, #36]	; 0x24
 80100ac:	f89a 3000 	ldrb.w	r3, [sl]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 80a1 	beq.w	80101f8 <_vfiprintf_r+0x1f0>
 80100b6:	2300      	movs	r3, #0
 80100b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100c0:	f10a 0a01 	add.w	sl, sl, #1
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	9307      	str	r3, [sp, #28]
 80100c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100cc:	931a      	str	r3, [sp, #104]	; 0x68
 80100ce:	4654      	mov	r4, sl
 80100d0:	2205      	movs	r2, #5
 80100d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100d6:	4854      	ldr	r0, [pc, #336]	; (8010228 <_vfiprintf_r+0x220>)
 80100d8:	f7f0 f89a 	bl	8000210 <memchr>
 80100dc:	9a04      	ldr	r2, [sp, #16]
 80100de:	b9d8      	cbnz	r0, 8010118 <_vfiprintf_r+0x110>
 80100e0:	06d1      	lsls	r1, r2, #27
 80100e2:	bf44      	itt	mi
 80100e4:	2320      	movmi	r3, #32
 80100e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100ea:	0713      	lsls	r3, r2, #28
 80100ec:	bf44      	itt	mi
 80100ee:	232b      	movmi	r3, #43	; 0x2b
 80100f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100f4:	f89a 3000 	ldrb.w	r3, [sl]
 80100f8:	2b2a      	cmp	r3, #42	; 0x2a
 80100fa:	d015      	beq.n	8010128 <_vfiprintf_r+0x120>
 80100fc:	9a07      	ldr	r2, [sp, #28]
 80100fe:	4654      	mov	r4, sl
 8010100:	2000      	movs	r0, #0
 8010102:	f04f 0c0a 	mov.w	ip, #10
 8010106:	4621      	mov	r1, r4
 8010108:	f811 3b01 	ldrb.w	r3, [r1], #1
 801010c:	3b30      	subs	r3, #48	; 0x30
 801010e:	2b09      	cmp	r3, #9
 8010110:	d94d      	bls.n	80101ae <_vfiprintf_r+0x1a6>
 8010112:	b1b0      	cbz	r0, 8010142 <_vfiprintf_r+0x13a>
 8010114:	9207      	str	r2, [sp, #28]
 8010116:	e014      	b.n	8010142 <_vfiprintf_r+0x13a>
 8010118:	eba0 0308 	sub.w	r3, r0, r8
 801011c:	fa09 f303 	lsl.w	r3, r9, r3
 8010120:	4313      	orrs	r3, r2
 8010122:	9304      	str	r3, [sp, #16]
 8010124:	46a2      	mov	sl, r4
 8010126:	e7d2      	b.n	80100ce <_vfiprintf_r+0xc6>
 8010128:	9b03      	ldr	r3, [sp, #12]
 801012a:	1d19      	adds	r1, r3, #4
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	9103      	str	r1, [sp, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	bfbb      	ittet	lt
 8010134:	425b      	neglt	r3, r3
 8010136:	f042 0202 	orrlt.w	r2, r2, #2
 801013a:	9307      	strge	r3, [sp, #28]
 801013c:	9307      	strlt	r3, [sp, #28]
 801013e:	bfb8      	it	lt
 8010140:	9204      	strlt	r2, [sp, #16]
 8010142:	7823      	ldrb	r3, [r4, #0]
 8010144:	2b2e      	cmp	r3, #46	; 0x2e
 8010146:	d10c      	bne.n	8010162 <_vfiprintf_r+0x15a>
 8010148:	7863      	ldrb	r3, [r4, #1]
 801014a:	2b2a      	cmp	r3, #42	; 0x2a
 801014c:	d134      	bne.n	80101b8 <_vfiprintf_r+0x1b0>
 801014e:	9b03      	ldr	r3, [sp, #12]
 8010150:	1d1a      	adds	r2, r3, #4
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	9203      	str	r2, [sp, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	bfb8      	it	lt
 801015a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801015e:	3402      	adds	r4, #2
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010238 <_vfiprintf_r+0x230>
 8010166:	7821      	ldrb	r1, [r4, #0]
 8010168:	2203      	movs	r2, #3
 801016a:	4650      	mov	r0, sl
 801016c:	f7f0 f850 	bl	8000210 <memchr>
 8010170:	b138      	cbz	r0, 8010182 <_vfiprintf_r+0x17a>
 8010172:	9b04      	ldr	r3, [sp, #16]
 8010174:	eba0 000a 	sub.w	r0, r0, sl
 8010178:	2240      	movs	r2, #64	; 0x40
 801017a:	4082      	lsls	r2, r0
 801017c:	4313      	orrs	r3, r2
 801017e:	3401      	adds	r4, #1
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010186:	4829      	ldr	r0, [pc, #164]	; (801022c <_vfiprintf_r+0x224>)
 8010188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801018c:	2206      	movs	r2, #6
 801018e:	f7f0 f83f 	bl	8000210 <memchr>
 8010192:	2800      	cmp	r0, #0
 8010194:	d03f      	beq.n	8010216 <_vfiprintf_r+0x20e>
 8010196:	4b26      	ldr	r3, [pc, #152]	; (8010230 <_vfiprintf_r+0x228>)
 8010198:	bb1b      	cbnz	r3, 80101e2 <_vfiprintf_r+0x1da>
 801019a:	9b03      	ldr	r3, [sp, #12]
 801019c:	3307      	adds	r3, #7
 801019e:	f023 0307 	bic.w	r3, r3, #7
 80101a2:	3308      	adds	r3, #8
 80101a4:	9303      	str	r3, [sp, #12]
 80101a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101a8:	443b      	add	r3, r7
 80101aa:	9309      	str	r3, [sp, #36]	; 0x24
 80101ac:	e768      	b.n	8010080 <_vfiprintf_r+0x78>
 80101ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80101b2:	460c      	mov	r4, r1
 80101b4:	2001      	movs	r0, #1
 80101b6:	e7a6      	b.n	8010106 <_vfiprintf_r+0xfe>
 80101b8:	2300      	movs	r3, #0
 80101ba:	3401      	adds	r4, #1
 80101bc:	9305      	str	r3, [sp, #20]
 80101be:	4619      	mov	r1, r3
 80101c0:	f04f 0c0a 	mov.w	ip, #10
 80101c4:	4620      	mov	r0, r4
 80101c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101ca:	3a30      	subs	r2, #48	; 0x30
 80101cc:	2a09      	cmp	r2, #9
 80101ce:	d903      	bls.n	80101d8 <_vfiprintf_r+0x1d0>
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d0c6      	beq.n	8010162 <_vfiprintf_r+0x15a>
 80101d4:	9105      	str	r1, [sp, #20]
 80101d6:	e7c4      	b.n	8010162 <_vfiprintf_r+0x15a>
 80101d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80101dc:	4604      	mov	r4, r0
 80101de:	2301      	movs	r3, #1
 80101e0:	e7f0      	b.n	80101c4 <_vfiprintf_r+0x1bc>
 80101e2:	ab03      	add	r3, sp, #12
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	462a      	mov	r2, r5
 80101e8:	4b12      	ldr	r3, [pc, #72]	; (8010234 <_vfiprintf_r+0x22c>)
 80101ea:	a904      	add	r1, sp, #16
 80101ec:	4630      	mov	r0, r6
 80101ee:	f7fd fb05 	bl	800d7fc <_printf_float>
 80101f2:	4607      	mov	r7, r0
 80101f4:	1c78      	adds	r0, r7, #1
 80101f6:	d1d6      	bne.n	80101a6 <_vfiprintf_r+0x19e>
 80101f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101fa:	07d9      	lsls	r1, r3, #31
 80101fc:	d405      	bmi.n	801020a <_vfiprintf_r+0x202>
 80101fe:	89ab      	ldrh	r3, [r5, #12]
 8010200:	059a      	lsls	r2, r3, #22
 8010202:	d402      	bmi.n	801020a <_vfiprintf_r+0x202>
 8010204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010206:	f7fe f873 	bl	800e2f0 <__retarget_lock_release_recursive>
 801020a:	89ab      	ldrh	r3, [r5, #12]
 801020c:	065b      	lsls	r3, r3, #25
 801020e:	f53f af1d 	bmi.w	801004c <_vfiprintf_r+0x44>
 8010212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010214:	e71c      	b.n	8010050 <_vfiprintf_r+0x48>
 8010216:	ab03      	add	r3, sp, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	462a      	mov	r2, r5
 801021c:	4b05      	ldr	r3, [pc, #20]	; (8010234 <_vfiprintf_r+0x22c>)
 801021e:	a904      	add	r1, sp, #16
 8010220:	4630      	mov	r0, r6
 8010222:	f7fd fd8f 	bl	800dd44 <_printf_i>
 8010226:	e7e4      	b.n	80101f2 <_vfiprintf_r+0x1ea>
 8010228:	08011b65 	.word	0x08011b65
 801022c:	08011b6f 	.word	0x08011b6f
 8010230:	0800d7fd 	.word	0x0800d7fd
 8010234:	0800ffe3 	.word	0x0800ffe3
 8010238:	08011b6b 	.word	0x08011b6b

0801023c <__swbuf_r>:
 801023c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801023e:	460e      	mov	r6, r1
 8010240:	4614      	mov	r4, r2
 8010242:	4605      	mov	r5, r0
 8010244:	b118      	cbz	r0, 801024e <__swbuf_r+0x12>
 8010246:	6a03      	ldr	r3, [r0, #32]
 8010248:	b90b      	cbnz	r3, 801024e <__swbuf_r+0x12>
 801024a:	f7fd ff7d 	bl	800e148 <__sinit>
 801024e:	69a3      	ldr	r3, [r4, #24]
 8010250:	60a3      	str	r3, [r4, #8]
 8010252:	89a3      	ldrh	r3, [r4, #12]
 8010254:	071a      	lsls	r2, r3, #28
 8010256:	d525      	bpl.n	80102a4 <__swbuf_r+0x68>
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	b31b      	cbz	r3, 80102a4 <__swbuf_r+0x68>
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	6922      	ldr	r2, [r4, #16]
 8010260:	1a98      	subs	r0, r3, r2
 8010262:	6963      	ldr	r3, [r4, #20]
 8010264:	b2f6      	uxtb	r6, r6
 8010266:	4283      	cmp	r3, r0
 8010268:	4637      	mov	r7, r6
 801026a:	dc04      	bgt.n	8010276 <__swbuf_r+0x3a>
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f7ff f99a 	bl	800f5a8 <_fflush_r>
 8010274:	b9e0      	cbnz	r0, 80102b0 <__swbuf_r+0x74>
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	3b01      	subs	r3, #1
 801027a:	60a3      	str	r3, [r4, #8]
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	6022      	str	r2, [r4, #0]
 8010282:	701e      	strb	r6, [r3, #0]
 8010284:	6962      	ldr	r2, [r4, #20]
 8010286:	1c43      	adds	r3, r0, #1
 8010288:	429a      	cmp	r2, r3
 801028a:	d004      	beq.n	8010296 <__swbuf_r+0x5a>
 801028c:	89a3      	ldrh	r3, [r4, #12]
 801028e:	07db      	lsls	r3, r3, #31
 8010290:	d506      	bpl.n	80102a0 <__swbuf_r+0x64>
 8010292:	2e0a      	cmp	r6, #10
 8010294:	d104      	bne.n	80102a0 <__swbuf_r+0x64>
 8010296:	4621      	mov	r1, r4
 8010298:	4628      	mov	r0, r5
 801029a:	f7ff f985 	bl	800f5a8 <_fflush_r>
 801029e:	b938      	cbnz	r0, 80102b0 <__swbuf_r+0x74>
 80102a0:	4638      	mov	r0, r7
 80102a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102a4:	4621      	mov	r1, r4
 80102a6:	4628      	mov	r0, r5
 80102a8:	f000 f806 	bl	80102b8 <__swsetup_r>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d0d5      	beq.n	801025c <__swbuf_r+0x20>
 80102b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80102b4:	e7f4      	b.n	80102a0 <__swbuf_r+0x64>
	...

080102b8 <__swsetup_r>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4b2a      	ldr	r3, [pc, #168]	; (8010364 <__swsetup_r+0xac>)
 80102bc:	4605      	mov	r5, r0
 80102be:	6818      	ldr	r0, [r3, #0]
 80102c0:	460c      	mov	r4, r1
 80102c2:	b118      	cbz	r0, 80102cc <__swsetup_r+0x14>
 80102c4:	6a03      	ldr	r3, [r0, #32]
 80102c6:	b90b      	cbnz	r3, 80102cc <__swsetup_r+0x14>
 80102c8:	f7fd ff3e 	bl	800e148 <__sinit>
 80102cc:	89a3      	ldrh	r3, [r4, #12]
 80102ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102d2:	0718      	lsls	r0, r3, #28
 80102d4:	d422      	bmi.n	801031c <__swsetup_r+0x64>
 80102d6:	06d9      	lsls	r1, r3, #27
 80102d8:	d407      	bmi.n	80102ea <__swsetup_r+0x32>
 80102da:	2309      	movs	r3, #9
 80102dc:	602b      	str	r3, [r5, #0]
 80102de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102e2:	81a3      	strh	r3, [r4, #12]
 80102e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102e8:	e034      	b.n	8010354 <__swsetup_r+0x9c>
 80102ea:	0758      	lsls	r0, r3, #29
 80102ec:	d512      	bpl.n	8010314 <__swsetup_r+0x5c>
 80102ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102f0:	b141      	cbz	r1, 8010304 <__swsetup_r+0x4c>
 80102f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102f6:	4299      	cmp	r1, r3
 80102f8:	d002      	beq.n	8010300 <__swsetup_r+0x48>
 80102fa:	4628      	mov	r0, r5
 80102fc:	f7fe fe82 	bl	800f004 <_free_r>
 8010300:	2300      	movs	r3, #0
 8010302:	6363      	str	r3, [r4, #52]	; 0x34
 8010304:	89a3      	ldrh	r3, [r4, #12]
 8010306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801030a:	81a3      	strh	r3, [r4, #12]
 801030c:	2300      	movs	r3, #0
 801030e:	6063      	str	r3, [r4, #4]
 8010310:	6923      	ldr	r3, [r4, #16]
 8010312:	6023      	str	r3, [r4, #0]
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f043 0308 	orr.w	r3, r3, #8
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	6923      	ldr	r3, [r4, #16]
 801031e:	b94b      	cbnz	r3, 8010334 <__swsetup_r+0x7c>
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801032a:	d003      	beq.n	8010334 <__swsetup_r+0x7c>
 801032c:	4621      	mov	r1, r4
 801032e:	4628      	mov	r0, r5
 8010330:	f000 f840 	bl	80103b4 <__smakebuf_r>
 8010334:	89a0      	ldrh	r0, [r4, #12]
 8010336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801033a:	f010 0301 	ands.w	r3, r0, #1
 801033e:	d00a      	beq.n	8010356 <__swsetup_r+0x9e>
 8010340:	2300      	movs	r3, #0
 8010342:	60a3      	str	r3, [r4, #8]
 8010344:	6963      	ldr	r3, [r4, #20]
 8010346:	425b      	negs	r3, r3
 8010348:	61a3      	str	r3, [r4, #24]
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	b943      	cbnz	r3, 8010360 <__swsetup_r+0xa8>
 801034e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010352:	d1c4      	bne.n	80102de <__swsetup_r+0x26>
 8010354:	bd38      	pop	{r3, r4, r5, pc}
 8010356:	0781      	lsls	r1, r0, #30
 8010358:	bf58      	it	pl
 801035a:	6963      	ldrpl	r3, [r4, #20]
 801035c:	60a3      	str	r3, [r4, #8]
 801035e:	e7f4      	b.n	801034a <__swsetup_r+0x92>
 8010360:	2000      	movs	r0, #0
 8010362:	e7f7      	b.n	8010354 <__swsetup_r+0x9c>
 8010364:	20000084 	.word	0x20000084

08010368 <__swhatbuf_r>:
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	460c      	mov	r4, r1
 801036c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010370:	2900      	cmp	r1, #0
 8010372:	b096      	sub	sp, #88	; 0x58
 8010374:	4615      	mov	r5, r2
 8010376:	461e      	mov	r6, r3
 8010378:	da0d      	bge.n	8010396 <__swhatbuf_r+0x2e>
 801037a:	89a3      	ldrh	r3, [r4, #12]
 801037c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010380:	f04f 0100 	mov.w	r1, #0
 8010384:	bf0c      	ite	eq
 8010386:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801038a:	2340      	movne	r3, #64	; 0x40
 801038c:	2000      	movs	r0, #0
 801038e:	6031      	str	r1, [r6, #0]
 8010390:	602b      	str	r3, [r5, #0]
 8010392:	b016      	add	sp, #88	; 0x58
 8010394:	bd70      	pop	{r4, r5, r6, pc}
 8010396:	466a      	mov	r2, sp
 8010398:	f000 f848 	bl	801042c <_fstat_r>
 801039c:	2800      	cmp	r0, #0
 801039e:	dbec      	blt.n	801037a <__swhatbuf_r+0x12>
 80103a0:	9901      	ldr	r1, [sp, #4]
 80103a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80103a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80103aa:	4259      	negs	r1, r3
 80103ac:	4159      	adcs	r1, r3
 80103ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b2:	e7eb      	b.n	801038c <__swhatbuf_r+0x24>

080103b4 <__smakebuf_r>:
 80103b4:	898b      	ldrh	r3, [r1, #12]
 80103b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103b8:	079d      	lsls	r5, r3, #30
 80103ba:	4606      	mov	r6, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	d507      	bpl.n	80103d0 <__smakebuf_r+0x1c>
 80103c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	6123      	str	r3, [r4, #16]
 80103c8:	2301      	movs	r3, #1
 80103ca:	6163      	str	r3, [r4, #20]
 80103cc:	b002      	add	sp, #8
 80103ce:	bd70      	pop	{r4, r5, r6, pc}
 80103d0:	ab01      	add	r3, sp, #4
 80103d2:	466a      	mov	r2, sp
 80103d4:	f7ff ffc8 	bl	8010368 <__swhatbuf_r>
 80103d8:	9900      	ldr	r1, [sp, #0]
 80103da:	4605      	mov	r5, r0
 80103dc:	4630      	mov	r0, r6
 80103de:	f7fe ffdd 	bl	800f39c <_malloc_r>
 80103e2:	b948      	cbnz	r0, 80103f8 <__smakebuf_r+0x44>
 80103e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103e8:	059a      	lsls	r2, r3, #22
 80103ea:	d4ef      	bmi.n	80103cc <__smakebuf_r+0x18>
 80103ec:	f023 0303 	bic.w	r3, r3, #3
 80103f0:	f043 0302 	orr.w	r3, r3, #2
 80103f4:	81a3      	strh	r3, [r4, #12]
 80103f6:	e7e3      	b.n	80103c0 <__smakebuf_r+0xc>
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	6163      	str	r3, [r4, #20]
 8010406:	9b01      	ldr	r3, [sp, #4]
 8010408:	6120      	str	r0, [r4, #16]
 801040a:	b15b      	cbz	r3, 8010424 <__smakebuf_r+0x70>
 801040c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010410:	4630      	mov	r0, r6
 8010412:	f000 f81d 	bl	8010450 <_isatty_r>
 8010416:	b128      	cbz	r0, 8010424 <__smakebuf_r+0x70>
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	f023 0303 	bic.w	r3, r3, #3
 801041e:	f043 0301 	orr.w	r3, r3, #1
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	431d      	orrs	r5, r3
 8010428:	81a5      	strh	r5, [r4, #12]
 801042a:	e7cf      	b.n	80103cc <__smakebuf_r+0x18>

0801042c <_fstat_r>:
 801042c:	b538      	push	{r3, r4, r5, lr}
 801042e:	4d07      	ldr	r5, [pc, #28]	; (801044c <_fstat_r+0x20>)
 8010430:	2300      	movs	r3, #0
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	4611      	mov	r1, r2
 8010438:	602b      	str	r3, [r5, #0]
 801043a:	f7f2 f8ba 	bl	80025b2 <_fstat>
 801043e:	1c43      	adds	r3, r0, #1
 8010440:	d102      	bne.n	8010448 <_fstat_r+0x1c>
 8010442:	682b      	ldr	r3, [r5, #0]
 8010444:	b103      	cbz	r3, 8010448 <_fstat_r+0x1c>
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	bd38      	pop	{r3, r4, r5, pc}
 801044a:	bf00      	nop
 801044c:	20005dbc 	.word	0x20005dbc

08010450 <_isatty_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4d06      	ldr	r5, [pc, #24]	; (801046c <_isatty_r+0x1c>)
 8010454:	2300      	movs	r3, #0
 8010456:	4604      	mov	r4, r0
 8010458:	4608      	mov	r0, r1
 801045a:	602b      	str	r3, [r5, #0]
 801045c:	f7f2 f8b9 	bl	80025d2 <_isatty>
 8010460:	1c43      	adds	r3, r0, #1
 8010462:	d102      	bne.n	801046a <_isatty_r+0x1a>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	b103      	cbz	r3, 801046a <_isatty_r+0x1a>
 8010468:	6023      	str	r3, [r4, #0]
 801046a:	bd38      	pop	{r3, r4, r5, pc}
 801046c:	20005dbc 	.word	0x20005dbc

08010470 <_raise_r>:
 8010470:	291f      	cmp	r1, #31
 8010472:	b538      	push	{r3, r4, r5, lr}
 8010474:	4604      	mov	r4, r0
 8010476:	460d      	mov	r5, r1
 8010478:	d904      	bls.n	8010484 <_raise_r+0x14>
 801047a:	2316      	movs	r3, #22
 801047c:	6003      	str	r3, [r0, #0]
 801047e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010482:	bd38      	pop	{r3, r4, r5, pc}
 8010484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010486:	b112      	cbz	r2, 801048e <_raise_r+0x1e>
 8010488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801048c:	b94b      	cbnz	r3, 80104a2 <_raise_r+0x32>
 801048e:	4620      	mov	r0, r4
 8010490:	f000 f830 	bl	80104f4 <_getpid_r>
 8010494:	462a      	mov	r2, r5
 8010496:	4601      	mov	r1, r0
 8010498:	4620      	mov	r0, r4
 801049a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801049e:	f000 b817 	b.w	80104d0 <_kill_r>
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d00a      	beq.n	80104bc <_raise_r+0x4c>
 80104a6:	1c59      	adds	r1, r3, #1
 80104a8:	d103      	bne.n	80104b2 <_raise_r+0x42>
 80104aa:	2316      	movs	r3, #22
 80104ac:	6003      	str	r3, [r0, #0]
 80104ae:	2001      	movs	r0, #1
 80104b0:	e7e7      	b.n	8010482 <_raise_r+0x12>
 80104b2:	2400      	movs	r4, #0
 80104b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104b8:	4628      	mov	r0, r5
 80104ba:	4798      	blx	r3
 80104bc:	2000      	movs	r0, #0
 80104be:	e7e0      	b.n	8010482 <_raise_r+0x12>

080104c0 <raise>:
 80104c0:	4b02      	ldr	r3, [pc, #8]	; (80104cc <raise+0xc>)
 80104c2:	4601      	mov	r1, r0
 80104c4:	6818      	ldr	r0, [r3, #0]
 80104c6:	f7ff bfd3 	b.w	8010470 <_raise_r>
 80104ca:	bf00      	nop
 80104cc:	20000084 	.word	0x20000084

080104d0 <_kill_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d07      	ldr	r5, [pc, #28]	; (80104f0 <_kill_r+0x20>)
 80104d4:	2300      	movs	r3, #0
 80104d6:	4604      	mov	r4, r0
 80104d8:	4608      	mov	r0, r1
 80104da:	4611      	mov	r1, r2
 80104dc:	602b      	str	r3, [r5, #0]
 80104de:	f7f2 f809 	bl	80024f4 <_kill>
 80104e2:	1c43      	adds	r3, r0, #1
 80104e4:	d102      	bne.n	80104ec <_kill_r+0x1c>
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	b103      	cbz	r3, 80104ec <_kill_r+0x1c>
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	bd38      	pop	{r3, r4, r5, pc}
 80104ee:	bf00      	nop
 80104f0:	20005dbc 	.word	0x20005dbc

080104f4 <_getpid_r>:
 80104f4:	f7f1 bff6 	b.w	80024e4 <_getpid>

080104f8 <log>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	ed2d 8b02 	vpush	{d8}
 80104fe:	ec55 4b10 	vmov	r4, r5, d0
 8010502:	f000 f8bd 	bl	8010680 <__ieee754_log>
 8010506:	4622      	mov	r2, r4
 8010508:	462b      	mov	r3, r5
 801050a:	4620      	mov	r0, r4
 801050c:	4629      	mov	r1, r5
 801050e:	eeb0 8a40 	vmov.f32	s16, s0
 8010512:	eef0 8a60 	vmov.f32	s17, s1
 8010516:	f7f0 fb29 	bl	8000b6c <__aeabi_dcmpun>
 801051a:	b998      	cbnz	r0, 8010544 <log+0x4c>
 801051c:	2200      	movs	r2, #0
 801051e:	2300      	movs	r3, #0
 8010520:	4620      	mov	r0, r4
 8010522:	4629      	mov	r1, r5
 8010524:	f7f0 fb18 	bl	8000b58 <__aeabi_dcmpgt>
 8010528:	b960      	cbnz	r0, 8010544 <log+0x4c>
 801052a:	2200      	movs	r2, #0
 801052c:	2300      	movs	r3, #0
 801052e:	4620      	mov	r0, r4
 8010530:	4629      	mov	r1, r5
 8010532:	f7f0 fae9 	bl	8000b08 <__aeabi_dcmpeq>
 8010536:	b160      	cbz	r0, 8010552 <log+0x5a>
 8010538:	f7fd feae 	bl	800e298 <__errno>
 801053c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8010568 <log+0x70>
 8010540:	2322      	movs	r3, #34	; 0x22
 8010542:	6003      	str	r3, [r0, #0]
 8010544:	eeb0 0a48 	vmov.f32	s0, s16
 8010548:	eef0 0a68 	vmov.f32	s1, s17
 801054c:	ecbd 8b02 	vpop	{d8}
 8010550:	bd38      	pop	{r3, r4, r5, pc}
 8010552:	f7fd fea1 	bl	800e298 <__errno>
 8010556:	ecbd 8b02 	vpop	{d8}
 801055a:	2321      	movs	r3, #33	; 0x21
 801055c:	6003      	str	r3, [r0, #0]
 801055e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010562:	4803      	ldr	r0, [pc, #12]	; (8010570 <log+0x78>)
 8010564:	f000 b884 	b.w	8010670 <nan>
 8010568:	00000000 	.word	0x00000000
 801056c:	fff00000 	.word	0xfff00000
 8010570:	08011e12 	.word	0x08011e12

08010574 <pow>:
 8010574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010576:	ed2d 8b02 	vpush	{d8}
 801057a:	eeb0 8a40 	vmov.f32	s16, s0
 801057e:	eef0 8a60 	vmov.f32	s17, s1
 8010582:	ec55 4b11 	vmov	r4, r5, d1
 8010586:	f000 fa37 	bl	80109f8 <__ieee754_pow>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	4620      	mov	r0, r4
 8010590:	4629      	mov	r1, r5
 8010592:	ec57 6b10 	vmov	r6, r7, d0
 8010596:	f7f0 fae9 	bl	8000b6c <__aeabi_dcmpun>
 801059a:	2800      	cmp	r0, #0
 801059c:	d13b      	bne.n	8010616 <pow+0xa2>
 801059e:	ec51 0b18 	vmov	r0, r1, d8
 80105a2:	2200      	movs	r2, #0
 80105a4:	2300      	movs	r3, #0
 80105a6:	f7f0 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80105aa:	b1b8      	cbz	r0, 80105dc <pow+0x68>
 80105ac:	2200      	movs	r2, #0
 80105ae:	2300      	movs	r3, #0
 80105b0:	4620      	mov	r0, r4
 80105b2:	4629      	mov	r1, r5
 80105b4:	f7f0 faa8 	bl	8000b08 <__aeabi_dcmpeq>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d146      	bne.n	801064a <pow+0xd6>
 80105bc:	ec45 4b10 	vmov	d0, r4, r5
 80105c0:	f000 f848 	bl	8010654 <finite>
 80105c4:	b338      	cbz	r0, 8010616 <pow+0xa2>
 80105c6:	2200      	movs	r2, #0
 80105c8:	2300      	movs	r3, #0
 80105ca:	4620      	mov	r0, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	f7f0 faa5 	bl	8000b1c <__aeabi_dcmplt>
 80105d2:	b300      	cbz	r0, 8010616 <pow+0xa2>
 80105d4:	f7fd fe60 	bl	800e298 <__errno>
 80105d8:	2322      	movs	r3, #34	; 0x22
 80105da:	e01b      	b.n	8010614 <pow+0xa0>
 80105dc:	ec47 6b10 	vmov	d0, r6, r7
 80105e0:	f000 f838 	bl	8010654 <finite>
 80105e4:	b9e0      	cbnz	r0, 8010620 <pow+0xac>
 80105e6:	eeb0 0a48 	vmov.f32	s0, s16
 80105ea:	eef0 0a68 	vmov.f32	s1, s17
 80105ee:	f000 f831 	bl	8010654 <finite>
 80105f2:	b1a8      	cbz	r0, 8010620 <pow+0xac>
 80105f4:	ec45 4b10 	vmov	d0, r4, r5
 80105f8:	f000 f82c 	bl	8010654 <finite>
 80105fc:	b180      	cbz	r0, 8010620 <pow+0xac>
 80105fe:	4632      	mov	r2, r6
 8010600:	463b      	mov	r3, r7
 8010602:	4630      	mov	r0, r6
 8010604:	4639      	mov	r1, r7
 8010606:	f7f0 fab1 	bl	8000b6c <__aeabi_dcmpun>
 801060a:	2800      	cmp	r0, #0
 801060c:	d0e2      	beq.n	80105d4 <pow+0x60>
 801060e:	f7fd fe43 	bl	800e298 <__errno>
 8010612:	2321      	movs	r3, #33	; 0x21
 8010614:	6003      	str	r3, [r0, #0]
 8010616:	ecbd 8b02 	vpop	{d8}
 801061a:	ec47 6b10 	vmov	d0, r6, r7
 801061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010620:	2200      	movs	r2, #0
 8010622:	2300      	movs	r3, #0
 8010624:	4630      	mov	r0, r6
 8010626:	4639      	mov	r1, r7
 8010628:	f7f0 fa6e 	bl	8000b08 <__aeabi_dcmpeq>
 801062c:	2800      	cmp	r0, #0
 801062e:	d0f2      	beq.n	8010616 <pow+0xa2>
 8010630:	eeb0 0a48 	vmov.f32	s0, s16
 8010634:	eef0 0a68 	vmov.f32	s1, s17
 8010638:	f000 f80c 	bl	8010654 <finite>
 801063c:	2800      	cmp	r0, #0
 801063e:	d0ea      	beq.n	8010616 <pow+0xa2>
 8010640:	ec45 4b10 	vmov	d0, r4, r5
 8010644:	f000 f806 	bl	8010654 <finite>
 8010648:	e7c3      	b.n	80105d2 <pow+0x5e>
 801064a:	4f01      	ldr	r7, [pc, #4]	; (8010650 <pow+0xdc>)
 801064c:	2600      	movs	r6, #0
 801064e:	e7e2      	b.n	8010616 <pow+0xa2>
 8010650:	3ff00000 	.word	0x3ff00000

08010654 <finite>:
 8010654:	b082      	sub	sp, #8
 8010656:	ed8d 0b00 	vstr	d0, [sp]
 801065a:	9801      	ldr	r0, [sp, #4]
 801065c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010660:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010664:	0fc0      	lsrs	r0, r0, #31
 8010666:	b002      	add	sp, #8
 8010668:	4770      	bx	lr
 801066a:	0000      	movs	r0, r0
 801066c:	0000      	movs	r0, r0
	...

08010670 <nan>:
 8010670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010678 <nan+0x8>
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	00000000 	.word	0x00000000
 801067c:	7ff80000 	.word	0x7ff80000

08010680 <__ieee754_log>:
 8010680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010684:	ec51 0b10 	vmov	r0, r1, d0
 8010688:	ed2d 8b04 	vpush	{d8-d9}
 801068c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010690:	b083      	sub	sp, #12
 8010692:	460d      	mov	r5, r1
 8010694:	da29      	bge.n	80106ea <__ieee754_log+0x6a>
 8010696:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801069a:	4303      	orrs	r3, r0
 801069c:	ee10 2a10 	vmov	r2, s0
 80106a0:	d10c      	bne.n	80106bc <__ieee754_log+0x3c>
 80106a2:	49cf      	ldr	r1, [pc, #828]	; (80109e0 <__ieee754_log+0x360>)
 80106a4:	2200      	movs	r2, #0
 80106a6:	2300      	movs	r3, #0
 80106a8:	2000      	movs	r0, #0
 80106aa:	f7f0 f8ef 	bl	800088c <__aeabi_ddiv>
 80106ae:	ec41 0b10 	vmov	d0, r0, r1
 80106b2:	b003      	add	sp, #12
 80106b4:	ecbd 8b04 	vpop	{d8-d9}
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	2900      	cmp	r1, #0
 80106be:	da05      	bge.n	80106cc <__ieee754_log+0x4c>
 80106c0:	460b      	mov	r3, r1
 80106c2:	f7ef fe01 	bl	80002c8 <__aeabi_dsub>
 80106c6:	2200      	movs	r2, #0
 80106c8:	2300      	movs	r3, #0
 80106ca:	e7ee      	b.n	80106aa <__ieee754_log+0x2a>
 80106cc:	4bc5      	ldr	r3, [pc, #788]	; (80109e4 <__ieee754_log+0x364>)
 80106ce:	2200      	movs	r2, #0
 80106d0:	f7ef ffb2 	bl	8000638 <__aeabi_dmul>
 80106d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80106d8:	460d      	mov	r5, r1
 80106da:	4ac3      	ldr	r2, [pc, #780]	; (80109e8 <__ieee754_log+0x368>)
 80106dc:	4295      	cmp	r5, r2
 80106de:	dd06      	ble.n	80106ee <__ieee754_log+0x6e>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	f7ef fdf2 	bl	80002cc <__adddf3>
 80106e8:	e7e1      	b.n	80106ae <__ieee754_log+0x2e>
 80106ea:	2300      	movs	r3, #0
 80106ec:	e7f5      	b.n	80106da <__ieee754_log+0x5a>
 80106ee:	152c      	asrs	r4, r5, #20
 80106f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80106f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80106f8:	441c      	add	r4, r3
 80106fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80106fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010706:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801070a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801070e:	ea42 0105 	orr.w	r1, r2, r5
 8010712:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010716:	2200      	movs	r2, #0
 8010718:	4bb4      	ldr	r3, [pc, #720]	; (80109ec <__ieee754_log+0x36c>)
 801071a:	f7ef fdd5 	bl	80002c8 <__aeabi_dsub>
 801071e:	1cab      	adds	r3, r5, #2
 8010720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010724:	2b02      	cmp	r3, #2
 8010726:	4682      	mov	sl, r0
 8010728:	468b      	mov	fp, r1
 801072a:	f04f 0200 	mov.w	r2, #0
 801072e:	dc53      	bgt.n	80107d8 <__ieee754_log+0x158>
 8010730:	2300      	movs	r3, #0
 8010732:	f7f0 f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8010736:	b1d0      	cbz	r0, 801076e <__ieee754_log+0xee>
 8010738:	2c00      	cmp	r4, #0
 801073a:	f000 8122 	beq.w	8010982 <__ieee754_log+0x302>
 801073e:	4620      	mov	r0, r4
 8010740:	f7ef ff10 	bl	8000564 <__aeabi_i2d>
 8010744:	a390      	add	r3, pc, #576	; (adr r3, 8010988 <__ieee754_log+0x308>)
 8010746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	f7ef ff73 	bl	8000638 <__aeabi_dmul>
 8010752:	a38f      	add	r3, pc, #572	; (adr r3, 8010990 <__ieee754_log+0x310>)
 8010754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010758:	4604      	mov	r4, r0
 801075a:	460d      	mov	r5, r1
 801075c:	4630      	mov	r0, r6
 801075e:	4639      	mov	r1, r7
 8010760:	f7ef ff6a 	bl	8000638 <__aeabi_dmul>
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	4620      	mov	r0, r4
 801076a:	4629      	mov	r1, r5
 801076c:	e7ba      	b.n	80106e4 <__ieee754_log+0x64>
 801076e:	a38a      	add	r3, pc, #552	; (adr r3, 8010998 <__ieee754_log+0x318>)
 8010770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010774:	4650      	mov	r0, sl
 8010776:	4659      	mov	r1, fp
 8010778:	f7ef ff5e 	bl	8000638 <__aeabi_dmul>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	2000      	movs	r0, #0
 8010782:	499b      	ldr	r1, [pc, #620]	; (80109f0 <__ieee754_log+0x370>)
 8010784:	f7ef fda0 	bl	80002c8 <__aeabi_dsub>
 8010788:	4652      	mov	r2, sl
 801078a:	4606      	mov	r6, r0
 801078c:	460f      	mov	r7, r1
 801078e:	465b      	mov	r3, fp
 8010790:	4650      	mov	r0, sl
 8010792:	4659      	mov	r1, fp
 8010794:	f7ef ff50 	bl	8000638 <__aeabi_dmul>
 8010798:	4602      	mov	r2, r0
 801079a:	460b      	mov	r3, r1
 801079c:	4630      	mov	r0, r6
 801079e:	4639      	mov	r1, r7
 80107a0:	f7ef ff4a 	bl	8000638 <__aeabi_dmul>
 80107a4:	4606      	mov	r6, r0
 80107a6:	460f      	mov	r7, r1
 80107a8:	b914      	cbnz	r4, 80107b0 <__ieee754_log+0x130>
 80107aa:	4632      	mov	r2, r6
 80107ac:	463b      	mov	r3, r7
 80107ae:	e0a2      	b.n	80108f6 <__ieee754_log+0x276>
 80107b0:	4620      	mov	r0, r4
 80107b2:	f7ef fed7 	bl	8000564 <__aeabi_i2d>
 80107b6:	a374      	add	r3, pc, #464	; (adr r3, 8010988 <__ieee754_log+0x308>)
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	4680      	mov	r8, r0
 80107be:	4689      	mov	r9, r1
 80107c0:	f7ef ff3a 	bl	8000638 <__aeabi_dmul>
 80107c4:	a372      	add	r3, pc, #456	; (adr r3, 8010990 <__ieee754_log+0x310>)
 80107c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ca:	4604      	mov	r4, r0
 80107cc:	460d      	mov	r5, r1
 80107ce:	4640      	mov	r0, r8
 80107d0:	4649      	mov	r1, r9
 80107d2:	f7ef ff31 	bl	8000638 <__aeabi_dmul>
 80107d6:	e0a7      	b.n	8010928 <__ieee754_log+0x2a8>
 80107d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107dc:	f7ef fd76 	bl	80002cc <__adddf3>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	4650      	mov	r0, sl
 80107e6:	4659      	mov	r1, fp
 80107e8:	f7f0 f850 	bl	800088c <__aeabi_ddiv>
 80107ec:	ec41 0b18 	vmov	d8, r0, r1
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7ef feb7 	bl	8000564 <__aeabi_i2d>
 80107f6:	ec53 2b18 	vmov	r2, r3, d8
 80107fa:	ec41 0b19 	vmov	d9, r0, r1
 80107fe:	ec51 0b18 	vmov	r0, r1, d8
 8010802:	f7ef ff19 	bl	8000638 <__aeabi_dmul>
 8010806:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801080a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4680      	mov	r8, r0
 8010816:	4689      	mov	r9, r1
 8010818:	f7ef ff0e 	bl	8000638 <__aeabi_dmul>
 801081c:	a360      	add	r3, pc, #384	; (adr r3, 80109a0 <__ieee754_log+0x320>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	4606      	mov	r6, r0
 8010824:	460f      	mov	r7, r1
 8010826:	f7ef ff07 	bl	8000638 <__aeabi_dmul>
 801082a:	a35f      	add	r3, pc, #380	; (adr r3, 80109a8 <__ieee754_log+0x328>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	f7ef fd4c 	bl	80002cc <__adddf3>
 8010834:	4632      	mov	r2, r6
 8010836:	463b      	mov	r3, r7
 8010838:	f7ef fefe 	bl	8000638 <__aeabi_dmul>
 801083c:	a35c      	add	r3, pc, #368	; (adr r3, 80109b0 <__ieee754_log+0x330>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	f7ef fd43 	bl	80002cc <__adddf3>
 8010846:	4632      	mov	r2, r6
 8010848:	463b      	mov	r3, r7
 801084a:	f7ef fef5 	bl	8000638 <__aeabi_dmul>
 801084e:	a35a      	add	r3, pc, #360	; (adr r3, 80109b8 <__ieee754_log+0x338>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	f7ef fd3a 	bl	80002cc <__adddf3>
 8010858:	4642      	mov	r2, r8
 801085a:	464b      	mov	r3, r9
 801085c:	f7ef feec 	bl	8000638 <__aeabi_dmul>
 8010860:	a357      	add	r3, pc, #348	; (adr r3, 80109c0 <__ieee754_log+0x340>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	4680      	mov	r8, r0
 8010868:	4689      	mov	r9, r1
 801086a:	4630      	mov	r0, r6
 801086c:	4639      	mov	r1, r7
 801086e:	f7ef fee3 	bl	8000638 <__aeabi_dmul>
 8010872:	a355      	add	r3, pc, #340	; (adr r3, 80109c8 <__ieee754_log+0x348>)
 8010874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010878:	f7ef fd28 	bl	80002cc <__adddf3>
 801087c:	4632      	mov	r2, r6
 801087e:	463b      	mov	r3, r7
 8010880:	f7ef feda 	bl	8000638 <__aeabi_dmul>
 8010884:	a352      	add	r3, pc, #328	; (adr r3, 80109d0 <__ieee754_log+0x350>)
 8010886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088a:	f7ef fd1f 	bl	80002cc <__adddf3>
 801088e:	4632      	mov	r2, r6
 8010890:	463b      	mov	r3, r7
 8010892:	f7ef fed1 	bl	8000638 <__aeabi_dmul>
 8010896:	460b      	mov	r3, r1
 8010898:	4602      	mov	r2, r0
 801089a:	4649      	mov	r1, r9
 801089c:	4640      	mov	r0, r8
 801089e:	f7ef fd15 	bl	80002cc <__adddf3>
 80108a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	3551      	adds	r5, #81	; 0x51
 80108aa:	431d      	orrs	r5, r3
 80108ac:	2d00      	cmp	r5, #0
 80108ae:	4680      	mov	r8, r0
 80108b0:	4689      	mov	r9, r1
 80108b2:	dd48      	ble.n	8010946 <__ieee754_log+0x2c6>
 80108b4:	4b4e      	ldr	r3, [pc, #312]	; (80109f0 <__ieee754_log+0x370>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	4650      	mov	r0, sl
 80108ba:	4659      	mov	r1, fp
 80108bc:	f7ef febc 	bl	8000638 <__aeabi_dmul>
 80108c0:	4652      	mov	r2, sl
 80108c2:	465b      	mov	r3, fp
 80108c4:	f7ef feb8 	bl	8000638 <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4606      	mov	r6, r0
 80108ce:	460f      	mov	r7, r1
 80108d0:	4640      	mov	r0, r8
 80108d2:	4649      	mov	r1, r9
 80108d4:	f7ef fcfa 	bl	80002cc <__adddf3>
 80108d8:	ec53 2b18 	vmov	r2, r3, d8
 80108dc:	f7ef feac 	bl	8000638 <__aeabi_dmul>
 80108e0:	4680      	mov	r8, r0
 80108e2:	4689      	mov	r9, r1
 80108e4:	b964      	cbnz	r4, 8010900 <__ieee754_log+0x280>
 80108e6:	4602      	mov	r2, r0
 80108e8:	460b      	mov	r3, r1
 80108ea:	4630      	mov	r0, r6
 80108ec:	4639      	mov	r1, r7
 80108ee:	f7ef fceb 	bl	80002c8 <__aeabi_dsub>
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4650      	mov	r0, sl
 80108f8:	4659      	mov	r1, fp
 80108fa:	f7ef fce5 	bl	80002c8 <__aeabi_dsub>
 80108fe:	e6d6      	b.n	80106ae <__ieee754_log+0x2e>
 8010900:	a321      	add	r3, pc, #132	; (adr r3, 8010988 <__ieee754_log+0x308>)
 8010902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010906:	ec51 0b19 	vmov	r0, r1, d9
 801090a:	f7ef fe95 	bl	8000638 <__aeabi_dmul>
 801090e:	a320      	add	r3, pc, #128	; (adr r3, 8010990 <__ieee754_log+0x310>)
 8010910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010914:	4604      	mov	r4, r0
 8010916:	460d      	mov	r5, r1
 8010918:	ec51 0b19 	vmov	r0, r1, d9
 801091c:	f7ef fe8c 	bl	8000638 <__aeabi_dmul>
 8010920:	4642      	mov	r2, r8
 8010922:	464b      	mov	r3, r9
 8010924:	f7ef fcd2 	bl	80002cc <__adddf3>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4630      	mov	r0, r6
 801092e:	4639      	mov	r1, r7
 8010930:	f7ef fcca 	bl	80002c8 <__aeabi_dsub>
 8010934:	4652      	mov	r2, sl
 8010936:	465b      	mov	r3, fp
 8010938:	f7ef fcc6 	bl	80002c8 <__aeabi_dsub>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	4620      	mov	r0, r4
 8010942:	4629      	mov	r1, r5
 8010944:	e7d9      	b.n	80108fa <__ieee754_log+0x27a>
 8010946:	4602      	mov	r2, r0
 8010948:	460b      	mov	r3, r1
 801094a:	4650      	mov	r0, sl
 801094c:	4659      	mov	r1, fp
 801094e:	f7ef fcbb 	bl	80002c8 <__aeabi_dsub>
 8010952:	ec53 2b18 	vmov	r2, r3, d8
 8010956:	f7ef fe6f 	bl	8000638 <__aeabi_dmul>
 801095a:	4606      	mov	r6, r0
 801095c:	460f      	mov	r7, r1
 801095e:	2c00      	cmp	r4, #0
 8010960:	f43f af23 	beq.w	80107aa <__ieee754_log+0x12a>
 8010964:	a308      	add	r3, pc, #32	; (adr r3, 8010988 <__ieee754_log+0x308>)
 8010966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096a:	ec51 0b19 	vmov	r0, r1, d9
 801096e:	f7ef fe63 	bl	8000638 <__aeabi_dmul>
 8010972:	a307      	add	r3, pc, #28	; (adr r3, 8010990 <__ieee754_log+0x310>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	4604      	mov	r4, r0
 801097a:	460d      	mov	r5, r1
 801097c:	ec51 0b19 	vmov	r0, r1, d9
 8010980:	e727      	b.n	80107d2 <__ieee754_log+0x152>
 8010982:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80109d8 <__ieee754_log+0x358>
 8010986:	e694      	b.n	80106b2 <__ieee754_log+0x32>
 8010988:	fee00000 	.word	0xfee00000
 801098c:	3fe62e42 	.word	0x3fe62e42
 8010990:	35793c76 	.word	0x35793c76
 8010994:	3dea39ef 	.word	0x3dea39ef
 8010998:	55555555 	.word	0x55555555
 801099c:	3fd55555 	.word	0x3fd55555
 80109a0:	df3e5244 	.word	0xdf3e5244
 80109a4:	3fc2f112 	.word	0x3fc2f112
 80109a8:	96cb03de 	.word	0x96cb03de
 80109ac:	3fc74664 	.word	0x3fc74664
 80109b0:	94229359 	.word	0x94229359
 80109b4:	3fd24924 	.word	0x3fd24924
 80109b8:	55555593 	.word	0x55555593
 80109bc:	3fe55555 	.word	0x3fe55555
 80109c0:	d078c69f 	.word	0xd078c69f
 80109c4:	3fc39a09 	.word	0x3fc39a09
 80109c8:	1d8e78af 	.word	0x1d8e78af
 80109cc:	3fcc71c5 	.word	0x3fcc71c5
 80109d0:	9997fa04 	.word	0x9997fa04
 80109d4:	3fd99999 	.word	0x3fd99999
	...
 80109e0:	c3500000 	.word	0xc3500000
 80109e4:	43500000 	.word	0x43500000
 80109e8:	7fefffff 	.word	0x7fefffff
 80109ec:	3ff00000 	.word	0x3ff00000
 80109f0:	3fe00000 	.word	0x3fe00000
 80109f4:	00000000 	.word	0x00000000

080109f8 <__ieee754_pow>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	ed2d 8b06 	vpush	{d8-d10}
 8010a00:	b089      	sub	sp, #36	; 0x24
 8010a02:	ed8d 1b00 	vstr	d1, [sp]
 8010a06:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010a0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010a0e:	ea58 0102 	orrs.w	r1, r8, r2
 8010a12:	ec57 6b10 	vmov	r6, r7, d0
 8010a16:	d115      	bne.n	8010a44 <__ieee754_pow+0x4c>
 8010a18:	19b3      	adds	r3, r6, r6
 8010a1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010a1e:	4152      	adcs	r2, r2
 8010a20:	4299      	cmp	r1, r3
 8010a22:	4b89      	ldr	r3, [pc, #548]	; (8010c48 <__ieee754_pow+0x250>)
 8010a24:	4193      	sbcs	r3, r2
 8010a26:	f080 84d1 	bcs.w	80113cc <__ieee754_pow+0x9d4>
 8010a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a2e:	4630      	mov	r0, r6
 8010a30:	4639      	mov	r1, r7
 8010a32:	f7ef fc4b 	bl	80002cc <__adddf3>
 8010a36:	ec41 0b10 	vmov	d0, r0, r1
 8010a3a:	b009      	add	sp, #36	; 0x24
 8010a3c:	ecbd 8b06 	vpop	{d8-d10}
 8010a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a44:	4b81      	ldr	r3, [pc, #516]	; (8010c4c <__ieee754_pow+0x254>)
 8010a46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010a4a:	429c      	cmp	r4, r3
 8010a4c:	ee10 aa10 	vmov	sl, s0
 8010a50:	463d      	mov	r5, r7
 8010a52:	dc06      	bgt.n	8010a62 <__ieee754_pow+0x6a>
 8010a54:	d101      	bne.n	8010a5a <__ieee754_pow+0x62>
 8010a56:	2e00      	cmp	r6, #0
 8010a58:	d1e7      	bne.n	8010a2a <__ieee754_pow+0x32>
 8010a5a:	4598      	cmp	r8, r3
 8010a5c:	dc01      	bgt.n	8010a62 <__ieee754_pow+0x6a>
 8010a5e:	d10f      	bne.n	8010a80 <__ieee754_pow+0x88>
 8010a60:	b172      	cbz	r2, 8010a80 <__ieee754_pow+0x88>
 8010a62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010a66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010a6a:	ea55 050a 	orrs.w	r5, r5, sl
 8010a6e:	d1dc      	bne.n	8010a2a <__ieee754_pow+0x32>
 8010a70:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a74:	18db      	adds	r3, r3, r3
 8010a76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010a7a:	4152      	adcs	r2, r2
 8010a7c:	429d      	cmp	r5, r3
 8010a7e:	e7d0      	b.n	8010a22 <__ieee754_pow+0x2a>
 8010a80:	2d00      	cmp	r5, #0
 8010a82:	da3b      	bge.n	8010afc <__ieee754_pow+0x104>
 8010a84:	4b72      	ldr	r3, [pc, #456]	; (8010c50 <__ieee754_pow+0x258>)
 8010a86:	4598      	cmp	r8, r3
 8010a88:	dc51      	bgt.n	8010b2e <__ieee754_pow+0x136>
 8010a8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010a8e:	4598      	cmp	r8, r3
 8010a90:	f340 84ab 	ble.w	80113ea <__ieee754_pow+0x9f2>
 8010a94:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010a9c:	2b14      	cmp	r3, #20
 8010a9e:	dd0f      	ble.n	8010ac0 <__ieee754_pow+0xc8>
 8010aa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010aa4:	fa22 f103 	lsr.w	r1, r2, r3
 8010aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8010aac:	4293      	cmp	r3, r2
 8010aae:	f040 849c 	bne.w	80113ea <__ieee754_pow+0x9f2>
 8010ab2:	f001 0101 	and.w	r1, r1, #1
 8010ab6:	f1c1 0302 	rsb	r3, r1, #2
 8010aba:	9304      	str	r3, [sp, #16]
 8010abc:	b182      	cbz	r2, 8010ae0 <__ieee754_pow+0xe8>
 8010abe:	e05f      	b.n	8010b80 <__ieee754_pow+0x188>
 8010ac0:	2a00      	cmp	r2, #0
 8010ac2:	d15b      	bne.n	8010b7c <__ieee754_pow+0x184>
 8010ac4:	f1c3 0314 	rsb	r3, r3, #20
 8010ac8:	fa48 f103 	asr.w	r1, r8, r3
 8010acc:	fa01 f303 	lsl.w	r3, r1, r3
 8010ad0:	4543      	cmp	r3, r8
 8010ad2:	f040 8487 	bne.w	80113e4 <__ieee754_pow+0x9ec>
 8010ad6:	f001 0101 	and.w	r1, r1, #1
 8010ada:	f1c1 0302 	rsb	r3, r1, #2
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	4b5c      	ldr	r3, [pc, #368]	; (8010c54 <__ieee754_pow+0x25c>)
 8010ae2:	4598      	cmp	r8, r3
 8010ae4:	d132      	bne.n	8010b4c <__ieee754_pow+0x154>
 8010ae6:	f1b9 0f00 	cmp.w	r9, #0
 8010aea:	f280 8477 	bge.w	80113dc <__ieee754_pow+0x9e4>
 8010aee:	4959      	ldr	r1, [pc, #356]	; (8010c54 <__ieee754_pow+0x25c>)
 8010af0:	4632      	mov	r2, r6
 8010af2:	463b      	mov	r3, r7
 8010af4:	2000      	movs	r0, #0
 8010af6:	f7ef fec9 	bl	800088c <__aeabi_ddiv>
 8010afa:	e79c      	b.n	8010a36 <__ieee754_pow+0x3e>
 8010afc:	2300      	movs	r3, #0
 8010afe:	9304      	str	r3, [sp, #16]
 8010b00:	2a00      	cmp	r2, #0
 8010b02:	d13d      	bne.n	8010b80 <__ieee754_pow+0x188>
 8010b04:	4b51      	ldr	r3, [pc, #324]	; (8010c4c <__ieee754_pow+0x254>)
 8010b06:	4598      	cmp	r8, r3
 8010b08:	d1ea      	bne.n	8010ae0 <__ieee754_pow+0xe8>
 8010b0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010b0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010b12:	ea53 030a 	orrs.w	r3, r3, sl
 8010b16:	f000 8459 	beq.w	80113cc <__ieee754_pow+0x9d4>
 8010b1a:	4b4f      	ldr	r3, [pc, #316]	; (8010c58 <__ieee754_pow+0x260>)
 8010b1c:	429c      	cmp	r4, r3
 8010b1e:	dd08      	ble.n	8010b32 <__ieee754_pow+0x13a>
 8010b20:	f1b9 0f00 	cmp.w	r9, #0
 8010b24:	f2c0 8456 	blt.w	80113d4 <__ieee754_pow+0x9dc>
 8010b28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b2c:	e783      	b.n	8010a36 <__ieee754_pow+0x3e>
 8010b2e:	2302      	movs	r3, #2
 8010b30:	e7e5      	b.n	8010afe <__ieee754_pow+0x106>
 8010b32:	f1b9 0f00 	cmp.w	r9, #0
 8010b36:	f04f 0000 	mov.w	r0, #0
 8010b3a:	f04f 0100 	mov.w	r1, #0
 8010b3e:	f6bf af7a 	bge.w	8010a36 <__ieee754_pow+0x3e>
 8010b42:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010b46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010b4a:	e774      	b.n	8010a36 <__ieee754_pow+0x3e>
 8010b4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010b50:	d106      	bne.n	8010b60 <__ieee754_pow+0x168>
 8010b52:	4632      	mov	r2, r6
 8010b54:	463b      	mov	r3, r7
 8010b56:	4630      	mov	r0, r6
 8010b58:	4639      	mov	r1, r7
 8010b5a:	f7ef fd6d 	bl	8000638 <__aeabi_dmul>
 8010b5e:	e76a      	b.n	8010a36 <__ieee754_pow+0x3e>
 8010b60:	4b3e      	ldr	r3, [pc, #248]	; (8010c5c <__ieee754_pow+0x264>)
 8010b62:	4599      	cmp	r9, r3
 8010b64:	d10c      	bne.n	8010b80 <__ieee754_pow+0x188>
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	db0a      	blt.n	8010b80 <__ieee754_pow+0x188>
 8010b6a:	ec47 6b10 	vmov	d0, r6, r7
 8010b6e:	b009      	add	sp, #36	; 0x24
 8010b70:	ecbd 8b06 	vpop	{d8-d10}
 8010b74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b78:	f000 bd20 	b.w	80115bc <__ieee754_sqrt>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	ec47 6b10 	vmov	d0, r6, r7
 8010b84:	f000 fc92 	bl	80114ac <fabs>
 8010b88:	ec51 0b10 	vmov	r0, r1, d0
 8010b8c:	f1ba 0f00 	cmp.w	sl, #0
 8010b90:	d129      	bne.n	8010be6 <__ieee754_pow+0x1ee>
 8010b92:	b124      	cbz	r4, 8010b9e <__ieee754_pow+0x1a6>
 8010b94:	4b2f      	ldr	r3, [pc, #188]	; (8010c54 <__ieee754_pow+0x25c>)
 8010b96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d123      	bne.n	8010be6 <__ieee754_pow+0x1ee>
 8010b9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ba2:	da05      	bge.n	8010bb0 <__ieee754_pow+0x1b8>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	460b      	mov	r3, r1
 8010ba8:	2000      	movs	r0, #0
 8010baa:	492a      	ldr	r1, [pc, #168]	; (8010c54 <__ieee754_pow+0x25c>)
 8010bac:	f7ef fe6e 	bl	800088c <__aeabi_ddiv>
 8010bb0:	2d00      	cmp	r5, #0
 8010bb2:	f6bf af40 	bge.w	8010a36 <__ieee754_pow+0x3e>
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010bbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010bc0:	431c      	orrs	r4, r3
 8010bc2:	d108      	bne.n	8010bd6 <__ieee754_pow+0x1de>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	4610      	mov	r0, r2
 8010bca:	4619      	mov	r1, r3
 8010bcc:	f7ef fb7c 	bl	80002c8 <__aeabi_dsub>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	e78f      	b.n	8010af6 <__ieee754_pow+0xfe>
 8010bd6:	9b04      	ldr	r3, [sp, #16]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	f47f af2c 	bne.w	8010a36 <__ieee754_pow+0x3e>
 8010bde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010be2:	4619      	mov	r1, r3
 8010be4:	e727      	b.n	8010a36 <__ieee754_pow+0x3e>
 8010be6:	0feb      	lsrs	r3, r5, #31
 8010be8:	3b01      	subs	r3, #1
 8010bea:	9306      	str	r3, [sp, #24]
 8010bec:	9a06      	ldr	r2, [sp, #24]
 8010bee:	9b04      	ldr	r3, [sp, #16]
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	d102      	bne.n	8010bfa <__ieee754_pow+0x202>
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	e7e6      	b.n	8010bc8 <__ieee754_pow+0x1d0>
 8010bfa:	4b19      	ldr	r3, [pc, #100]	; (8010c60 <__ieee754_pow+0x268>)
 8010bfc:	4598      	cmp	r8, r3
 8010bfe:	f340 80fb 	ble.w	8010df8 <__ieee754_pow+0x400>
 8010c02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010c06:	4598      	cmp	r8, r3
 8010c08:	4b13      	ldr	r3, [pc, #76]	; (8010c58 <__ieee754_pow+0x260>)
 8010c0a:	dd0c      	ble.n	8010c26 <__ieee754_pow+0x22e>
 8010c0c:	429c      	cmp	r4, r3
 8010c0e:	dc0f      	bgt.n	8010c30 <__ieee754_pow+0x238>
 8010c10:	f1b9 0f00 	cmp.w	r9, #0
 8010c14:	da0f      	bge.n	8010c36 <__ieee754_pow+0x23e>
 8010c16:	2000      	movs	r0, #0
 8010c18:	b009      	add	sp, #36	; 0x24
 8010c1a:	ecbd 8b06 	vpop	{d8-d10}
 8010c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c22:	f000 bc3a 	b.w	801149a <__math_oflow>
 8010c26:	429c      	cmp	r4, r3
 8010c28:	dbf2      	blt.n	8010c10 <__ieee754_pow+0x218>
 8010c2a:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <__ieee754_pow+0x25c>)
 8010c2c:	429c      	cmp	r4, r3
 8010c2e:	dd19      	ble.n	8010c64 <__ieee754_pow+0x26c>
 8010c30:	f1b9 0f00 	cmp.w	r9, #0
 8010c34:	dcef      	bgt.n	8010c16 <__ieee754_pow+0x21e>
 8010c36:	2000      	movs	r0, #0
 8010c38:	b009      	add	sp, #36	; 0x24
 8010c3a:	ecbd 8b06 	vpop	{d8-d10}
 8010c3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c42:	f000 bc21 	b.w	8011488 <__math_uflow>
 8010c46:	bf00      	nop
 8010c48:	fff00000 	.word	0xfff00000
 8010c4c:	7ff00000 	.word	0x7ff00000
 8010c50:	433fffff 	.word	0x433fffff
 8010c54:	3ff00000 	.word	0x3ff00000
 8010c58:	3fefffff 	.word	0x3fefffff
 8010c5c:	3fe00000 	.word	0x3fe00000
 8010c60:	41e00000 	.word	0x41e00000
 8010c64:	4b60      	ldr	r3, [pc, #384]	; (8010de8 <__ieee754_pow+0x3f0>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	f7ef fb2e 	bl	80002c8 <__aeabi_dsub>
 8010c6c:	a354      	add	r3, pc, #336	; (adr r3, 8010dc0 <__ieee754_pow+0x3c8>)
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	4604      	mov	r4, r0
 8010c74:	460d      	mov	r5, r1
 8010c76:	f7ef fcdf 	bl	8000638 <__aeabi_dmul>
 8010c7a:	a353      	add	r3, pc, #332	; (adr r3, 8010dc8 <__ieee754_pow+0x3d0>)
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	4606      	mov	r6, r0
 8010c82:	460f      	mov	r7, r1
 8010c84:	4620      	mov	r0, r4
 8010c86:	4629      	mov	r1, r5
 8010c88:	f7ef fcd6 	bl	8000638 <__aeabi_dmul>
 8010c8c:	4b57      	ldr	r3, [pc, #348]	; (8010dec <__ieee754_pow+0x3f4>)
 8010c8e:	4682      	mov	sl, r0
 8010c90:	468b      	mov	fp, r1
 8010c92:	2200      	movs	r2, #0
 8010c94:	4620      	mov	r0, r4
 8010c96:	4629      	mov	r1, r5
 8010c98:	f7ef fcce 	bl	8000638 <__aeabi_dmul>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	a14b      	add	r1, pc, #300	; (adr r1, 8010dd0 <__ieee754_pow+0x3d8>)
 8010ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ca6:	f7ef fb0f 	bl	80002c8 <__aeabi_dsub>
 8010caa:	4622      	mov	r2, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	f7ef fcc3 	bl	8000638 <__aeabi_dmul>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	494d      	ldr	r1, [pc, #308]	; (8010df0 <__ieee754_pow+0x3f8>)
 8010cba:	f7ef fb05 	bl	80002c8 <__aeabi_dsub>
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	4680      	mov	r8, r0
 8010cc2:	4689      	mov	r9, r1
 8010cc4:	462b      	mov	r3, r5
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	4629      	mov	r1, r5
 8010cca:	f7ef fcb5 	bl	8000638 <__aeabi_dmul>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	4649      	mov	r1, r9
 8010cd6:	f7ef fcaf 	bl	8000638 <__aeabi_dmul>
 8010cda:	a33f      	add	r3, pc, #252	; (adr r3, 8010dd8 <__ieee754_pow+0x3e0>)
 8010cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce0:	f7ef fcaa 	bl	8000638 <__aeabi_dmul>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4650      	mov	r0, sl
 8010cea:	4659      	mov	r1, fp
 8010cec:	f7ef faec 	bl	80002c8 <__aeabi_dsub>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4680      	mov	r8, r0
 8010cf6:	4689      	mov	r9, r1
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	4639      	mov	r1, r7
 8010cfc:	f7ef fae6 	bl	80002cc <__adddf3>
 8010d00:	2000      	movs	r0, #0
 8010d02:	4632      	mov	r2, r6
 8010d04:	463b      	mov	r3, r7
 8010d06:	4604      	mov	r4, r0
 8010d08:	460d      	mov	r5, r1
 8010d0a:	f7ef fadd 	bl	80002c8 <__aeabi_dsub>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	460b      	mov	r3, r1
 8010d12:	4640      	mov	r0, r8
 8010d14:	4649      	mov	r1, r9
 8010d16:	f7ef fad7 	bl	80002c8 <__aeabi_dsub>
 8010d1a:	9b04      	ldr	r3, [sp, #16]
 8010d1c:	9a06      	ldr	r2, [sp, #24]
 8010d1e:	3b01      	subs	r3, #1
 8010d20:	4313      	orrs	r3, r2
 8010d22:	4682      	mov	sl, r0
 8010d24:	468b      	mov	fp, r1
 8010d26:	f040 81e7 	bne.w	80110f8 <__ieee754_pow+0x700>
 8010d2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010de0 <__ieee754_pow+0x3e8>
 8010d2e:	eeb0 8a47 	vmov.f32	s16, s14
 8010d32:	eef0 8a67 	vmov.f32	s17, s15
 8010d36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d3a:	2600      	movs	r6, #0
 8010d3c:	4632      	mov	r2, r6
 8010d3e:	463b      	mov	r3, r7
 8010d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d44:	f7ef fac0 	bl	80002c8 <__aeabi_dsub>
 8010d48:	4622      	mov	r2, r4
 8010d4a:	462b      	mov	r3, r5
 8010d4c:	f7ef fc74 	bl	8000638 <__aeabi_dmul>
 8010d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d54:	4680      	mov	r8, r0
 8010d56:	4689      	mov	r9, r1
 8010d58:	4650      	mov	r0, sl
 8010d5a:	4659      	mov	r1, fp
 8010d5c:	f7ef fc6c 	bl	8000638 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4640      	mov	r0, r8
 8010d66:	4649      	mov	r1, r9
 8010d68:	f7ef fab0 	bl	80002cc <__adddf3>
 8010d6c:	4632      	mov	r2, r6
 8010d6e:	463b      	mov	r3, r7
 8010d70:	4680      	mov	r8, r0
 8010d72:	4689      	mov	r9, r1
 8010d74:	4620      	mov	r0, r4
 8010d76:	4629      	mov	r1, r5
 8010d78:	f7ef fc5e 	bl	8000638 <__aeabi_dmul>
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	4604      	mov	r4, r0
 8010d80:	460d      	mov	r5, r1
 8010d82:	4602      	mov	r2, r0
 8010d84:	4649      	mov	r1, r9
 8010d86:	4640      	mov	r0, r8
 8010d88:	f7ef faa0 	bl	80002cc <__adddf3>
 8010d8c:	4b19      	ldr	r3, [pc, #100]	; (8010df4 <__ieee754_pow+0x3fc>)
 8010d8e:	4299      	cmp	r1, r3
 8010d90:	ec45 4b19 	vmov	d9, r4, r5
 8010d94:	4606      	mov	r6, r0
 8010d96:	460f      	mov	r7, r1
 8010d98:	468b      	mov	fp, r1
 8010d9a:	f340 82f0 	ble.w	801137e <__ieee754_pow+0x986>
 8010d9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010da2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010da6:	4303      	orrs	r3, r0
 8010da8:	f000 81e4 	beq.w	8011174 <__ieee754_pow+0x77c>
 8010dac:	ec51 0b18 	vmov	r0, r1, d8
 8010db0:	2200      	movs	r2, #0
 8010db2:	2300      	movs	r3, #0
 8010db4:	f7ef feb2 	bl	8000b1c <__aeabi_dcmplt>
 8010db8:	3800      	subs	r0, #0
 8010dba:	bf18      	it	ne
 8010dbc:	2001      	movne	r0, #1
 8010dbe:	e72b      	b.n	8010c18 <__ieee754_pow+0x220>
 8010dc0:	60000000 	.word	0x60000000
 8010dc4:	3ff71547 	.word	0x3ff71547
 8010dc8:	f85ddf44 	.word	0xf85ddf44
 8010dcc:	3e54ae0b 	.word	0x3e54ae0b
 8010dd0:	55555555 	.word	0x55555555
 8010dd4:	3fd55555 	.word	0x3fd55555
 8010dd8:	652b82fe 	.word	0x652b82fe
 8010ddc:	3ff71547 	.word	0x3ff71547
 8010de0:	00000000 	.word	0x00000000
 8010de4:	bff00000 	.word	0xbff00000
 8010de8:	3ff00000 	.word	0x3ff00000
 8010dec:	3fd00000 	.word	0x3fd00000
 8010df0:	3fe00000 	.word	0x3fe00000
 8010df4:	408fffff 	.word	0x408fffff
 8010df8:	4bd5      	ldr	r3, [pc, #852]	; (8011150 <__ieee754_pow+0x758>)
 8010dfa:	402b      	ands	r3, r5
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	b92b      	cbnz	r3, 8010e0c <__ieee754_pow+0x414>
 8010e00:	4bd4      	ldr	r3, [pc, #848]	; (8011154 <__ieee754_pow+0x75c>)
 8010e02:	f7ef fc19 	bl	8000638 <__aeabi_dmul>
 8010e06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	1523      	asrs	r3, r4, #20
 8010e0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e12:	4413      	add	r3, r2
 8010e14:	9305      	str	r3, [sp, #20]
 8010e16:	4bd0      	ldr	r3, [pc, #832]	; (8011158 <__ieee754_pow+0x760>)
 8010e18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010e1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010e20:	429c      	cmp	r4, r3
 8010e22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010e26:	dd08      	ble.n	8010e3a <__ieee754_pow+0x442>
 8010e28:	4bcc      	ldr	r3, [pc, #816]	; (801115c <__ieee754_pow+0x764>)
 8010e2a:	429c      	cmp	r4, r3
 8010e2c:	f340 8162 	ble.w	80110f4 <__ieee754_pow+0x6fc>
 8010e30:	9b05      	ldr	r3, [sp, #20]
 8010e32:	3301      	adds	r3, #1
 8010e34:	9305      	str	r3, [sp, #20]
 8010e36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010e3a:	2400      	movs	r4, #0
 8010e3c:	00e3      	lsls	r3, r4, #3
 8010e3e:	9307      	str	r3, [sp, #28]
 8010e40:	4bc7      	ldr	r3, [pc, #796]	; (8011160 <__ieee754_pow+0x768>)
 8010e42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e46:	ed93 7b00 	vldr	d7, [r3]
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	ec53 2b17 	vmov	r2, r3, d7
 8010e50:	eeb0 9a47 	vmov.f32	s18, s14
 8010e54:	eef0 9a67 	vmov.f32	s19, s15
 8010e58:	4682      	mov	sl, r0
 8010e5a:	f7ef fa35 	bl	80002c8 <__aeabi_dsub>
 8010e5e:	4652      	mov	r2, sl
 8010e60:	4606      	mov	r6, r0
 8010e62:	460f      	mov	r7, r1
 8010e64:	462b      	mov	r3, r5
 8010e66:	ec51 0b19 	vmov	r0, r1, d9
 8010e6a:	f7ef fa2f 	bl	80002cc <__adddf3>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	460b      	mov	r3, r1
 8010e72:	2000      	movs	r0, #0
 8010e74:	49bb      	ldr	r1, [pc, #748]	; (8011164 <__ieee754_pow+0x76c>)
 8010e76:	f7ef fd09 	bl	800088c <__aeabi_ddiv>
 8010e7a:	ec41 0b1a 	vmov	d10, r0, r1
 8010e7e:	4602      	mov	r2, r0
 8010e80:	460b      	mov	r3, r1
 8010e82:	4630      	mov	r0, r6
 8010e84:	4639      	mov	r1, r7
 8010e86:	f7ef fbd7 	bl	8000638 <__aeabi_dmul>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e90:	9302      	str	r3, [sp, #8]
 8010e92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010e96:	46ab      	mov	fp, r5
 8010e98:	106d      	asrs	r5, r5, #1
 8010e9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010e9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010ea2:	ec41 0b18 	vmov	d8, r0, r1
 8010ea6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010eaa:	2200      	movs	r2, #0
 8010eac:	4640      	mov	r0, r8
 8010eae:	4649      	mov	r1, r9
 8010eb0:	4614      	mov	r4, r2
 8010eb2:	461d      	mov	r5, r3
 8010eb4:	f7ef fbc0 	bl	8000638 <__aeabi_dmul>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	4639      	mov	r1, r7
 8010ec0:	f7ef fa02 	bl	80002c8 <__aeabi_dsub>
 8010ec4:	ec53 2b19 	vmov	r2, r3, d9
 8010ec8:	4606      	mov	r6, r0
 8010eca:	460f      	mov	r7, r1
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef f9fa 	bl	80002c8 <__aeabi_dsub>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	4650      	mov	r0, sl
 8010eda:	4659      	mov	r1, fp
 8010edc:	f7ef f9f4 	bl	80002c8 <__aeabi_dsub>
 8010ee0:	4642      	mov	r2, r8
 8010ee2:	464b      	mov	r3, r9
 8010ee4:	f7ef fba8 	bl	8000638 <__aeabi_dmul>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	4630      	mov	r0, r6
 8010eee:	4639      	mov	r1, r7
 8010ef0:	f7ef f9ea 	bl	80002c8 <__aeabi_dsub>
 8010ef4:	ec53 2b1a 	vmov	r2, r3, d10
 8010ef8:	f7ef fb9e 	bl	8000638 <__aeabi_dmul>
 8010efc:	ec53 2b18 	vmov	r2, r3, d8
 8010f00:	ec41 0b19 	vmov	d9, r0, r1
 8010f04:	ec51 0b18 	vmov	r0, r1, d8
 8010f08:	f7ef fb96 	bl	8000638 <__aeabi_dmul>
 8010f0c:	a37c      	add	r3, pc, #496	; (adr r3, 8011100 <__ieee754_pow+0x708>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	4604      	mov	r4, r0
 8010f14:	460d      	mov	r5, r1
 8010f16:	f7ef fb8f 	bl	8000638 <__aeabi_dmul>
 8010f1a:	a37b      	add	r3, pc, #492	; (adr r3, 8011108 <__ieee754_pow+0x710>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	f7ef f9d4 	bl	80002cc <__adddf3>
 8010f24:	4622      	mov	r2, r4
 8010f26:	462b      	mov	r3, r5
 8010f28:	f7ef fb86 	bl	8000638 <__aeabi_dmul>
 8010f2c:	a378      	add	r3, pc, #480	; (adr r3, 8011110 <__ieee754_pow+0x718>)
 8010f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f32:	f7ef f9cb 	bl	80002cc <__adddf3>
 8010f36:	4622      	mov	r2, r4
 8010f38:	462b      	mov	r3, r5
 8010f3a:	f7ef fb7d 	bl	8000638 <__aeabi_dmul>
 8010f3e:	a376      	add	r3, pc, #472	; (adr r3, 8011118 <__ieee754_pow+0x720>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	f7ef f9c2 	bl	80002cc <__adddf3>
 8010f48:	4622      	mov	r2, r4
 8010f4a:	462b      	mov	r3, r5
 8010f4c:	f7ef fb74 	bl	8000638 <__aeabi_dmul>
 8010f50:	a373      	add	r3, pc, #460	; (adr r3, 8011120 <__ieee754_pow+0x728>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	f7ef f9b9 	bl	80002cc <__adddf3>
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	462b      	mov	r3, r5
 8010f5e:	f7ef fb6b 	bl	8000638 <__aeabi_dmul>
 8010f62:	a371      	add	r3, pc, #452	; (adr r3, 8011128 <__ieee754_pow+0x730>)
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	f7ef f9b0 	bl	80002cc <__adddf3>
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	4606      	mov	r6, r0
 8010f70:	460f      	mov	r7, r1
 8010f72:	462b      	mov	r3, r5
 8010f74:	4620      	mov	r0, r4
 8010f76:	4629      	mov	r1, r5
 8010f78:	f7ef fb5e 	bl	8000638 <__aeabi_dmul>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	4630      	mov	r0, r6
 8010f82:	4639      	mov	r1, r7
 8010f84:	f7ef fb58 	bl	8000638 <__aeabi_dmul>
 8010f88:	4642      	mov	r2, r8
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	460d      	mov	r5, r1
 8010f8e:	464b      	mov	r3, r9
 8010f90:	ec51 0b18 	vmov	r0, r1, d8
 8010f94:	f7ef f99a 	bl	80002cc <__adddf3>
 8010f98:	ec53 2b19 	vmov	r2, r3, d9
 8010f9c:	f7ef fb4c 	bl	8000638 <__aeabi_dmul>
 8010fa0:	4622      	mov	r2, r4
 8010fa2:	462b      	mov	r3, r5
 8010fa4:	f7ef f992 	bl	80002cc <__adddf3>
 8010fa8:	4642      	mov	r2, r8
 8010faa:	4682      	mov	sl, r0
 8010fac:	468b      	mov	fp, r1
 8010fae:	464b      	mov	r3, r9
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	4649      	mov	r1, r9
 8010fb4:	f7ef fb40 	bl	8000638 <__aeabi_dmul>
 8010fb8:	4b6b      	ldr	r3, [pc, #428]	; (8011168 <__ieee754_pow+0x770>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4606      	mov	r6, r0
 8010fbe:	460f      	mov	r7, r1
 8010fc0:	f7ef f984 	bl	80002cc <__adddf3>
 8010fc4:	4652      	mov	r2, sl
 8010fc6:	465b      	mov	r3, fp
 8010fc8:	f7ef f980 	bl	80002cc <__adddf3>
 8010fcc:	2000      	movs	r0, #0
 8010fce:	4604      	mov	r4, r0
 8010fd0:	460d      	mov	r5, r1
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	4649      	mov	r1, r9
 8010fda:	f7ef fb2d 	bl	8000638 <__aeabi_dmul>
 8010fde:	4b62      	ldr	r3, [pc, #392]	; (8011168 <__ieee754_pow+0x770>)
 8010fe0:	4680      	mov	r8, r0
 8010fe2:	4689      	mov	r9, r1
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	4629      	mov	r1, r5
 8010fea:	f7ef f96d 	bl	80002c8 <__aeabi_dsub>
 8010fee:	4632      	mov	r2, r6
 8010ff0:	463b      	mov	r3, r7
 8010ff2:	f7ef f969 	bl	80002c8 <__aeabi_dsub>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4650      	mov	r0, sl
 8010ffc:	4659      	mov	r1, fp
 8010ffe:	f7ef f963 	bl	80002c8 <__aeabi_dsub>
 8011002:	ec53 2b18 	vmov	r2, r3, d8
 8011006:	f7ef fb17 	bl	8000638 <__aeabi_dmul>
 801100a:	4622      	mov	r2, r4
 801100c:	4606      	mov	r6, r0
 801100e:	460f      	mov	r7, r1
 8011010:	462b      	mov	r3, r5
 8011012:	ec51 0b19 	vmov	r0, r1, d9
 8011016:	f7ef fb0f 	bl	8000638 <__aeabi_dmul>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	4630      	mov	r0, r6
 8011020:	4639      	mov	r1, r7
 8011022:	f7ef f953 	bl	80002cc <__adddf3>
 8011026:	4606      	mov	r6, r0
 8011028:	460f      	mov	r7, r1
 801102a:	4602      	mov	r2, r0
 801102c:	460b      	mov	r3, r1
 801102e:	4640      	mov	r0, r8
 8011030:	4649      	mov	r1, r9
 8011032:	f7ef f94b 	bl	80002cc <__adddf3>
 8011036:	a33e      	add	r3, pc, #248	; (adr r3, 8011130 <__ieee754_pow+0x738>)
 8011038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103c:	2000      	movs	r0, #0
 801103e:	4604      	mov	r4, r0
 8011040:	460d      	mov	r5, r1
 8011042:	f7ef faf9 	bl	8000638 <__aeabi_dmul>
 8011046:	4642      	mov	r2, r8
 8011048:	ec41 0b18 	vmov	d8, r0, r1
 801104c:	464b      	mov	r3, r9
 801104e:	4620      	mov	r0, r4
 8011050:	4629      	mov	r1, r5
 8011052:	f7ef f939 	bl	80002c8 <__aeabi_dsub>
 8011056:	4602      	mov	r2, r0
 8011058:	460b      	mov	r3, r1
 801105a:	4630      	mov	r0, r6
 801105c:	4639      	mov	r1, r7
 801105e:	f7ef f933 	bl	80002c8 <__aeabi_dsub>
 8011062:	a335      	add	r3, pc, #212	; (adr r3, 8011138 <__ieee754_pow+0x740>)
 8011064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011068:	f7ef fae6 	bl	8000638 <__aeabi_dmul>
 801106c:	a334      	add	r3, pc, #208	; (adr r3, 8011140 <__ieee754_pow+0x748>)
 801106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011072:	4606      	mov	r6, r0
 8011074:	460f      	mov	r7, r1
 8011076:	4620      	mov	r0, r4
 8011078:	4629      	mov	r1, r5
 801107a:	f7ef fadd 	bl	8000638 <__aeabi_dmul>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	4630      	mov	r0, r6
 8011084:	4639      	mov	r1, r7
 8011086:	f7ef f921 	bl	80002cc <__adddf3>
 801108a:	9a07      	ldr	r2, [sp, #28]
 801108c:	4b37      	ldr	r3, [pc, #220]	; (801116c <__ieee754_pow+0x774>)
 801108e:	4413      	add	r3, r2
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	f7ef f91a 	bl	80002cc <__adddf3>
 8011098:	4682      	mov	sl, r0
 801109a:	9805      	ldr	r0, [sp, #20]
 801109c:	468b      	mov	fp, r1
 801109e:	f7ef fa61 	bl	8000564 <__aeabi_i2d>
 80110a2:	9a07      	ldr	r2, [sp, #28]
 80110a4:	4b32      	ldr	r3, [pc, #200]	; (8011170 <__ieee754_pow+0x778>)
 80110a6:	4413      	add	r3, r2
 80110a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110ac:	4606      	mov	r6, r0
 80110ae:	460f      	mov	r7, r1
 80110b0:	4652      	mov	r2, sl
 80110b2:	465b      	mov	r3, fp
 80110b4:	ec51 0b18 	vmov	r0, r1, d8
 80110b8:	f7ef f908 	bl	80002cc <__adddf3>
 80110bc:	4642      	mov	r2, r8
 80110be:	464b      	mov	r3, r9
 80110c0:	f7ef f904 	bl	80002cc <__adddf3>
 80110c4:	4632      	mov	r2, r6
 80110c6:	463b      	mov	r3, r7
 80110c8:	f7ef f900 	bl	80002cc <__adddf3>
 80110cc:	2000      	movs	r0, #0
 80110ce:	4632      	mov	r2, r6
 80110d0:	463b      	mov	r3, r7
 80110d2:	4604      	mov	r4, r0
 80110d4:	460d      	mov	r5, r1
 80110d6:	f7ef f8f7 	bl	80002c8 <__aeabi_dsub>
 80110da:	4642      	mov	r2, r8
 80110dc:	464b      	mov	r3, r9
 80110de:	f7ef f8f3 	bl	80002c8 <__aeabi_dsub>
 80110e2:	ec53 2b18 	vmov	r2, r3, d8
 80110e6:	f7ef f8ef 	bl	80002c8 <__aeabi_dsub>
 80110ea:	4602      	mov	r2, r0
 80110ec:	460b      	mov	r3, r1
 80110ee:	4650      	mov	r0, sl
 80110f0:	4659      	mov	r1, fp
 80110f2:	e610      	b.n	8010d16 <__ieee754_pow+0x31e>
 80110f4:	2401      	movs	r4, #1
 80110f6:	e6a1      	b.n	8010e3c <__ieee754_pow+0x444>
 80110f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011148 <__ieee754_pow+0x750>
 80110fc:	e617      	b.n	8010d2e <__ieee754_pow+0x336>
 80110fe:	bf00      	nop
 8011100:	4a454eef 	.word	0x4a454eef
 8011104:	3fca7e28 	.word	0x3fca7e28
 8011108:	93c9db65 	.word	0x93c9db65
 801110c:	3fcd864a 	.word	0x3fcd864a
 8011110:	a91d4101 	.word	0xa91d4101
 8011114:	3fd17460 	.word	0x3fd17460
 8011118:	518f264d 	.word	0x518f264d
 801111c:	3fd55555 	.word	0x3fd55555
 8011120:	db6fabff 	.word	0xdb6fabff
 8011124:	3fdb6db6 	.word	0x3fdb6db6
 8011128:	33333303 	.word	0x33333303
 801112c:	3fe33333 	.word	0x3fe33333
 8011130:	e0000000 	.word	0xe0000000
 8011134:	3feec709 	.word	0x3feec709
 8011138:	dc3a03fd 	.word	0xdc3a03fd
 801113c:	3feec709 	.word	0x3feec709
 8011140:	145b01f5 	.word	0x145b01f5
 8011144:	be3e2fe0 	.word	0xbe3e2fe0
 8011148:	00000000 	.word	0x00000000
 801114c:	3ff00000 	.word	0x3ff00000
 8011150:	7ff00000 	.word	0x7ff00000
 8011154:	43400000 	.word	0x43400000
 8011158:	0003988e 	.word	0x0003988e
 801115c:	000bb679 	.word	0x000bb679
 8011160:	08011e18 	.word	0x08011e18
 8011164:	3ff00000 	.word	0x3ff00000
 8011168:	40080000 	.word	0x40080000
 801116c:	08011e38 	.word	0x08011e38
 8011170:	08011e28 	.word	0x08011e28
 8011174:	a3b3      	add	r3, pc, #716	; (adr r3, 8011444 <__ieee754_pow+0xa4c>)
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	4640      	mov	r0, r8
 801117c:	4649      	mov	r1, r9
 801117e:	f7ef f8a5 	bl	80002cc <__adddf3>
 8011182:	4622      	mov	r2, r4
 8011184:	ec41 0b1a 	vmov	d10, r0, r1
 8011188:	462b      	mov	r3, r5
 801118a:	4630      	mov	r0, r6
 801118c:	4639      	mov	r1, r7
 801118e:	f7ef f89b 	bl	80002c8 <__aeabi_dsub>
 8011192:	4602      	mov	r2, r0
 8011194:	460b      	mov	r3, r1
 8011196:	ec51 0b1a 	vmov	r0, r1, d10
 801119a:	f7ef fcdd 	bl	8000b58 <__aeabi_dcmpgt>
 801119e:	2800      	cmp	r0, #0
 80111a0:	f47f ae04 	bne.w	8010dac <__ieee754_pow+0x3b4>
 80111a4:	4aa2      	ldr	r2, [pc, #648]	; (8011430 <__ieee754_pow+0xa38>)
 80111a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111aa:	4293      	cmp	r3, r2
 80111ac:	f340 8107 	ble.w	80113be <__ieee754_pow+0x9c6>
 80111b0:	151b      	asrs	r3, r3, #20
 80111b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80111b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80111ba:	fa4a fa03 	asr.w	sl, sl, r3
 80111be:	44da      	add	sl, fp
 80111c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80111c4:	489b      	ldr	r0, [pc, #620]	; (8011434 <__ieee754_pow+0xa3c>)
 80111c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80111ca:	4108      	asrs	r0, r1
 80111cc:	ea00 030a 	and.w	r3, r0, sl
 80111d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80111d4:	f1c1 0114 	rsb	r1, r1, #20
 80111d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80111dc:	fa4a fa01 	asr.w	sl, sl, r1
 80111e0:	f1bb 0f00 	cmp.w	fp, #0
 80111e4:	f04f 0200 	mov.w	r2, #0
 80111e8:	4620      	mov	r0, r4
 80111ea:	4629      	mov	r1, r5
 80111ec:	bfb8      	it	lt
 80111ee:	f1ca 0a00 	rsblt	sl, sl, #0
 80111f2:	f7ef f869 	bl	80002c8 <__aeabi_dsub>
 80111f6:	ec41 0b19 	vmov	d9, r0, r1
 80111fa:	4642      	mov	r2, r8
 80111fc:	464b      	mov	r3, r9
 80111fe:	ec51 0b19 	vmov	r0, r1, d9
 8011202:	f7ef f863 	bl	80002cc <__adddf3>
 8011206:	a37a      	add	r3, pc, #488	; (adr r3, 80113f0 <__ieee754_pow+0x9f8>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	2000      	movs	r0, #0
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	f7ef fa11 	bl	8000638 <__aeabi_dmul>
 8011216:	ec53 2b19 	vmov	r2, r3, d9
 801121a:	4606      	mov	r6, r0
 801121c:	460f      	mov	r7, r1
 801121e:	4620      	mov	r0, r4
 8011220:	4629      	mov	r1, r5
 8011222:	f7ef f851 	bl	80002c8 <__aeabi_dsub>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	4640      	mov	r0, r8
 801122c:	4649      	mov	r1, r9
 801122e:	f7ef f84b 	bl	80002c8 <__aeabi_dsub>
 8011232:	a371      	add	r3, pc, #452	; (adr r3, 80113f8 <__ieee754_pow+0xa00>)
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	f7ef f9fe 	bl	8000638 <__aeabi_dmul>
 801123c:	a370      	add	r3, pc, #448	; (adr r3, 8011400 <__ieee754_pow+0xa08>)
 801123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011242:	4680      	mov	r8, r0
 8011244:	4689      	mov	r9, r1
 8011246:	4620      	mov	r0, r4
 8011248:	4629      	mov	r1, r5
 801124a:	f7ef f9f5 	bl	8000638 <__aeabi_dmul>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	4640      	mov	r0, r8
 8011254:	4649      	mov	r1, r9
 8011256:	f7ef f839 	bl	80002cc <__adddf3>
 801125a:	4604      	mov	r4, r0
 801125c:	460d      	mov	r5, r1
 801125e:	4602      	mov	r2, r0
 8011260:	460b      	mov	r3, r1
 8011262:	4630      	mov	r0, r6
 8011264:	4639      	mov	r1, r7
 8011266:	f7ef f831 	bl	80002cc <__adddf3>
 801126a:	4632      	mov	r2, r6
 801126c:	463b      	mov	r3, r7
 801126e:	4680      	mov	r8, r0
 8011270:	4689      	mov	r9, r1
 8011272:	f7ef f829 	bl	80002c8 <__aeabi_dsub>
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	4620      	mov	r0, r4
 801127c:	4629      	mov	r1, r5
 801127e:	f7ef f823 	bl	80002c8 <__aeabi_dsub>
 8011282:	4642      	mov	r2, r8
 8011284:	4606      	mov	r6, r0
 8011286:	460f      	mov	r7, r1
 8011288:	464b      	mov	r3, r9
 801128a:	4640      	mov	r0, r8
 801128c:	4649      	mov	r1, r9
 801128e:	f7ef f9d3 	bl	8000638 <__aeabi_dmul>
 8011292:	a35d      	add	r3, pc, #372	; (adr r3, 8011408 <__ieee754_pow+0xa10>)
 8011294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011298:	4604      	mov	r4, r0
 801129a:	460d      	mov	r5, r1
 801129c:	f7ef f9cc 	bl	8000638 <__aeabi_dmul>
 80112a0:	a35b      	add	r3, pc, #364	; (adr r3, 8011410 <__ieee754_pow+0xa18>)
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	f7ef f80f 	bl	80002c8 <__aeabi_dsub>
 80112aa:	4622      	mov	r2, r4
 80112ac:	462b      	mov	r3, r5
 80112ae:	f7ef f9c3 	bl	8000638 <__aeabi_dmul>
 80112b2:	a359      	add	r3, pc, #356	; (adr r3, 8011418 <__ieee754_pow+0xa20>)
 80112b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b8:	f7ef f808 	bl	80002cc <__adddf3>
 80112bc:	4622      	mov	r2, r4
 80112be:	462b      	mov	r3, r5
 80112c0:	f7ef f9ba 	bl	8000638 <__aeabi_dmul>
 80112c4:	a356      	add	r3, pc, #344	; (adr r3, 8011420 <__ieee754_pow+0xa28>)
 80112c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ca:	f7ee fffd 	bl	80002c8 <__aeabi_dsub>
 80112ce:	4622      	mov	r2, r4
 80112d0:	462b      	mov	r3, r5
 80112d2:	f7ef f9b1 	bl	8000638 <__aeabi_dmul>
 80112d6:	a354      	add	r3, pc, #336	; (adr r3, 8011428 <__ieee754_pow+0xa30>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee fff6 	bl	80002cc <__adddf3>
 80112e0:	4622      	mov	r2, r4
 80112e2:	462b      	mov	r3, r5
 80112e4:	f7ef f9a8 	bl	8000638 <__aeabi_dmul>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	4640      	mov	r0, r8
 80112ee:	4649      	mov	r1, r9
 80112f0:	f7ee ffea 	bl	80002c8 <__aeabi_dsub>
 80112f4:	4604      	mov	r4, r0
 80112f6:	460d      	mov	r5, r1
 80112f8:	4602      	mov	r2, r0
 80112fa:	460b      	mov	r3, r1
 80112fc:	4640      	mov	r0, r8
 80112fe:	4649      	mov	r1, r9
 8011300:	f7ef f99a 	bl	8000638 <__aeabi_dmul>
 8011304:	2200      	movs	r2, #0
 8011306:	ec41 0b19 	vmov	d9, r0, r1
 801130a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801130e:	4620      	mov	r0, r4
 8011310:	4629      	mov	r1, r5
 8011312:	f7ee ffd9 	bl	80002c8 <__aeabi_dsub>
 8011316:	4602      	mov	r2, r0
 8011318:	460b      	mov	r3, r1
 801131a:	ec51 0b19 	vmov	r0, r1, d9
 801131e:	f7ef fab5 	bl	800088c <__aeabi_ddiv>
 8011322:	4632      	mov	r2, r6
 8011324:	4604      	mov	r4, r0
 8011326:	460d      	mov	r5, r1
 8011328:	463b      	mov	r3, r7
 801132a:	4640      	mov	r0, r8
 801132c:	4649      	mov	r1, r9
 801132e:	f7ef f983 	bl	8000638 <__aeabi_dmul>
 8011332:	4632      	mov	r2, r6
 8011334:	463b      	mov	r3, r7
 8011336:	f7ee ffc9 	bl	80002cc <__adddf3>
 801133a:	4602      	mov	r2, r0
 801133c:	460b      	mov	r3, r1
 801133e:	4620      	mov	r0, r4
 8011340:	4629      	mov	r1, r5
 8011342:	f7ee ffc1 	bl	80002c8 <__aeabi_dsub>
 8011346:	4642      	mov	r2, r8
 8011348:	464b      	mov	r3, r9
 801134a:	f7ee ffbd 	bl	80002c8 <__aeabi_dsub>
 801134e:	460b      	mov	r3, r1
 8011350:	4602      	mov	r2, r0
 8011352:	4939      	ldr	r1, [pc, #228]	; (8011438 <__ieee754_pow+0xa40>)
 8011354:	2000      	movs	r0, #0
 8011356:	f7ee ffb7 	bl	80002c8 <__aeabi_dsub>
 801135a:	ec41 0b10 	vmov	d0, r0, r1
 801135e:	ee10 3a90 	vmov	r3, s1
 8011362:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801136a:	da2b      	bge.n	80113c4 <__ieee754_pow+0x9cc>
 801136c:	4650      	mov	r0, sl
 801136e:	f000 f8a7 	bl	80114c0 <scalbn>
 8011372:	ec51 0b10 	vmov	r0, r1, d0
 8011376:	ec53 2b18 	vmov	r2, r3, d8
 801137a:	f7ff bbee 	b.w	8010b5a <__ieee754_pow+0x162>
 801137e:	4b2f      	ldr	r3, [pc, #188]	; (801143c <__ieee754_pow+0xa44>)
 8011380:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011384:	429e      	cmp	r6, r3
 8011386:	f77f af0d 	ble.w	80111a4 <__ieee754_pow+0x7ac>
 801138a:	4b2d      	ldr	r3, [pc, #180]	; (8011440 <__ieee754_pow+0xa48>)
 801138c:	440b      	add	r3, r1
 801138e:	4303      	orrs	r3, r0
 8011390:	d009      	beq.n	80113a6 <__ieee754_pow+0x9ae>
 8011392:	ec51 0b18 	vmov	r0, r1, d8
 8011396:	2200      	movs	r2, #0
 8011398:	2300      	movs	r3, #0
 801139a:	f7ef fbbf 	bl	8000b1c <__aeabi_dcmplt>
 801139e:	3800      	subs	r0, #0
 80113a0:	bf18      	it	ne
 80113a2:	2001      	movne	r0, #1
 80113a4:	e448      	b.n	8010c38 <__ieee754_pow+0x240>
 80113a6:	4622      	mov	r2, r4
 80113a8:	462b      	mov	r3, r5
 80113aa:	f7ee ff8d 	bl	80002c8 <__aeabi_dsub>
 80113ae:	4642      	mov	r2, r8
 80113b0:	464b      	mov	r3, r9
 80113b2:	f7ef fbc7 	bl	8000b44 <__aeabi_dcmpge>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f43f aef4 	beq.w	80111a4 <__ieee754_pow+0x7ac>
 80113bc:	e7e9      	b.n	8011392 <__ieee754_pow+0x99a>
 80113be:	f04f 0a00 	mov.w	sl, #0
 80113c2:	e71a      	b.n	80111fa <__ieee754_pow+0x802>
 80113c4:	ec51 0b10 	vmov	r0, r1, d0
 80113c8:	4619      	mov	r1, r3
 80113ca:	e7d4      	b.n	8011376 <__ieee754_pow+0x97e>
 80113cc:	491a      	ldr	r1, [pc, #104]	; (8011438 <__ieee754_pow+0xa40>)
 80113ce:	2000      	movs	r0, #0
 80113d0:	f7ff bb31 	b.w	8010a36 <__ieee754_pow+0x3e>
 80113d4:	2000      	movs	r0, #0
 80113d6:	2100      	movs	r1, #0
 80113d8:	f7ff bb2d 	b.w	8010a36 <__ieee754_pow+0x3e>
 80113dc:	4630      	mov	r0, r6
 80113de:	4639      	mov	r1, r7
 80113e0:	f7ff bb29 	b.w	8010a36 <__ieee754_pow+0x3e>
 80113e4:	9204      	str	r2, [sp, #16]
 80113e6:	f7ff bb7b 	b.w	8010ae0 <__ieee754_pow+0xe8>
 80113ea:	2300      	movs	r3, #0
 80113ec:	f7ff bb65 	b.w	8010aba <__ieee754_pow+0xc2>
 80113f0:	00000000 	.word	0x00000000
 80113f4:	3fe62e43 	.word	0x3fe62e43
 80113f8:	fefa39ef 	.word	0xfefa39ef
 80113fc:	3fe62e42 	.word	0x3fe62e42
 8011400:	0ca86c39 	.word	0x0ca86c39
 8011404:	be205c61 	.word	0xbe205c61
 8011408:	72bea4d0 	.word	0x72bea4d0
 801140c:	3e663769 	.word	0x3e663769
 8011410:	c5d26bf1 	.word	0xc5d26bf1
 8011414:	3ebbbd41 	.word	0x3ebbbd41
 8011418:	af25de2c 	.word	0xaf25de2c
 801141c:	3f11566a 	.word	0x3f11566a
 8011420:	16bebd93 	.word	0x16bebd93
 8011424:	3f66c16c 	.word	0x3f66c16c
 8011428:	5555553e 	.word	0x5555553e
 801142c:	3fc55555 	.word	0x3fc55555
 8011430:	3fe00000 	.word	0x3fe00000
 8011434:	fff00000 	.word	0xfff00000
 8011438:	3ff00000 	.word	0x3ff00000
 801143c:	4090cbff 	.word	0x4090cbff
 8011440:	3f6f3400 	.word	0x3f6f3400
 8011444:	652b82fe 	.word	0x652b82fe
 8011448:	3c971547 	.word	0x3c971547

0801144c <with_errno>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	4604      	mov	r4, r0
 8011450:	460d      	mov	r5, r1
 8011452:	4616      	mov	r6, r2
 8011454:	f7fc ff20 	bl	800e298 <__errno>
 8011458:	4629      	mov	r1, r5
 801145a:	6006      	str	r6, [r0, #0]
 801145c:	4620      	mov	r0, r4
 801145e:	bd70      	pop	{r4, r5, r6, pc}

08011460 <xflow>:
 8011460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011462:	4614      	mov	r4, r2
 8011464:	461d      	mov	r5, r3
 8011466:	b108      	cbz	r0, 801146c <xflow+0xc>
 8011468:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801146c:	e9cd 2300 	strd	r2, r3, [sp]
 8011470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ef f8de 	bl	8000638 <__aeabi_dmul>
 801147c:	2222      	movs	r2, #34	; 0x22
 801147e:	b003      	add	sp, #12
 8011480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011484:	f7ff bfe2 	b.w	801144c <with_errno>

08011488 <__math_uflow>:
 8011488:	b508      	push	{r3, lr}
 801148a:	2200      	movs	r2, #0
 801148c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011490:	f7ff ffe6 	bl	8011460 <xflow>
 8011494:	ec41 0b10 	vmov	d0, r0, r1
 8011498:	bd08      	pop	{r3, pc}

0801149a <__math_oflow>:
 801149a:	b508      	push	{r3, lr}
 801149c:	2200      	movs	r2, #0
 801149e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80114a2:	f7ff ffdd 	bl	8011460 <xflow>
 80114a6:	ec41 0b10 	vmov	d0, r0, r1
 80114aa:	bd08      	pop	{r3, pc}

080114ac <fabs>:
 80114ac:	ec51 0b10 	vmov	r0, r1, d0
 80114b0:	ee10 2a10 	vmov	r2, s0
 80114b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114b8:	ec43 2b10 	vmov	d0, r2, r3
 80114bc:	4770      	bx	lr
	...

080114c0 <scalbn>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	ec55 4b10 	vmov	r4, r5, d0
 80114c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80114ca:	4606      	mov	r6, r0
 80114cc:	462b      	mov	r3, r5
 80114ce:	b999      	cbnz	r1, 80114f8 <scalbn+0x38>
 80114d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80114d4:	4323      	orrs	r3, r4
 80114d6:	d03f      	beq.n	8011558 <scalbn+0x98>
 80114d8:	4b35      	ldr	r3, [pc, #212]	; (80115b0 <scalbn+0xf0>)
 80114da:	4629      	mov	r1, r5
 80114dc:	ee10 0a10 	vmov	r0, s0
 80114e0:	2200      	movs	r2, #0
 80114e2:	f7ef f8a9 	bl	8000638 <__aeabi_dmul>
 80114e6:	4b33      	ldr	r3, [pc, #204]	; (80115b4 <scalbn+0xf4>)
 80114e8:	429e      	cmp	r6, r3
 80114ea:	4604      	mov	r4, r0
 80114ec:	460d      	mov	r5, r1
 80114ee:	da10      	bge.n	8011512 <scalbn+0x52>
 80114f0:	a327      	add	r3, pc, #156	; (adr r3, 8011590 <scalbn+0xd0>)
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	e01f      	b.n	8011538 <scalbn+0x78>
 80114f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80114fc:	4291      	cmp	r1, r2
 80114fe:	d10c      	bne.n	801151a <scalbn+0x5a>
 8011500:	ee10 2a10 	vmov	r2, s0
 8011504:	4620      	mov	r0, r4
 8011506:	4629      	mov	r1, r5
 8011508:	f7ee fee0 	bl	80002cc <__adddf3>
 801150c:	4604      	mov	r4, r0
 801150e:	460d      	mov	r5, r1
 8011510:	e022      	b.n	8011558 <scalbn+0x98>
 8011512:	460b      	mov	r3, r1
 8011514:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011518:	3936      	subs	r1, #54	; 0x36
 801151a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801151e:	4296      	cmp	r6, r2
 8011520:	dd0d      	ble.n	801153e <scalbn+0x7e>
 8011522:	2d00      	cmp	r5, #0
 8011524:	a11c      	add	r1, pc, #112	; (adr r1, 8011598 <scalbn+0xd8>)
 8011526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801152a:	da02      	bge.n	8011532 <scalbn+0x72>
 801152c:	a11c      	add	r1, pc, #112	; (adr r1, 80115a0 <scalbn+0xe0>)
 801152e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011532:	a319      	add	r3, pc, #100	; (adr r3, 8011598 <scalbn+0xd8>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ef f87e 	bl	8000638 <__aeabi_dmul>
 801153c:	e7e6      	b.n	801150c <scalbn+0x4c>
 801153e:	1872      	adds	r2, r6, r1
 8011540:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011544:	428a      	cmp	r2, r1
 8011546:	dcec      	bgt.n	8011522 <scalbn+0x62>
 8011548:	2a00      	cmp	r2, #0
 801154a:	dd08      	ble.n	801155e <scalbn+0x9e>
 801154c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011550:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011554:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011558:	ec45 4b10 	vmov	d0, r4, r5
 801155c:	bd70      	pop	{r4, r5, r6, pc}
 801155e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011562:	da08      	bge.n	8011576 <scalbn+0xb6>
 8011564:	2d00      	cmp	r5, #0
 8011566:	a10a      	add	r1, pc, #40	; (adr r1, 8011590 <scalbn+0xd0>)
 8011568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801156c:	dac0      	bge.n	80114f0 <scalbn+0x30>
 801156e:	a10e      	add	r1, pc, #56	; (adr r1, 80115a8 <scalbn+0xe8>)
 8011570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011574:	e7bc      	b.n	80114f0 <scalbn+0x30>
 8011576:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801157a:	3236      	adds	r2, #54	; 0x36
 801157c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011580:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011584:	4620      	mov	r0, r4
 8011586:	4b0c      	ldr	r3, [pc, #48]	; (80115b8 <scalbn+0xf8>)
 8011588:	2200      	movs	r2, #0
 801158a:	e7d5      	b.n	8011538 <scalbn+0x78>
 801158c:	f3af 8000 	nop.w
 8011590:	c2f8f359 	.word	0xc2f8f359
 8011594:	01a56e1f 	.word	0x01a56e1f
 8011598:	8800759c 	.word	0x8800759c
 801159c:	7e37e43c 	.word	0x7e37e43c
 80115a0:	8800759c 	.word	0x8800759c
 80115a4:	fe37e43c 	.word	0xfe37e43c
 80115a8:	c2f8f359 	.word	0xc2f8f359
 80115ac:	81a56e1f 	.word	0x81a56e1f
 80115b0:	43500000 	.word	0x43500000
 80115b4:	ffff3cb0 	.word	0xffff3cb0
 80115b8:	3c900000 	.word	0x3c900000

080115bc <__ieee754_sqrt>:
 80115bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	ec55 4b10 	vmov	r4, r5, d0
 80115c4:	4e67      	ldr	r6, [pc, #412]	; (8011764 <__ieee754_sqrt+0x1a8>)
 80115c6:	43ae      	bics	r6, r5
 80115c8:	ee10 0a10 	vmov	r0, s0
 80115cc:	ee10 2a10 	vmov	r2, s0
 80115d0:	4629      	mov	r1, r5
 80115d2:	462b      	mov	r3, r5
 80115d4:	d10d      	bne.n	80115f2 <__ieee754_sqrt+0x36>
 80115d6:	f7ef f82f 	bl	8000638 <__aeabi_dmul>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	4620      	mov	r0, r4
 80115e0:	4629      	mov	r1, r5
 80115e2:	f7ee fe73 	bl	80002cc <__adddf3>
 80115e6:	4604      	mov	r4, r0
 80115e8:	460d      	mov	r5, r1
 80115ea:	ec45 4b10 	vmov	d0, r4, r5
 80115ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f2:	2d00      	cmp	r5, #0
 80115f4:	dc0b      	bgt.n	801160e <__ieee754_sqrt+0x52>
 80115f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80115fa:	4326      	orrs	r6, r4
 80115fc:	d0f5      	beq.n	80115ea <__ieee754_sqrt+0x2e>
 80115fe:	b135      	cbz	r5, 801160e <__ieee754_sqrt+0x52>
 8011600:	f7ee fe62 	bl	80002c8 <__aeabi_dsub>
 8011604:	4602      	mov	r2, r0
 8011606:	460b      	mov	r3, r1
 8011608:	f7ef f940 	bl	800088c <__aeabi_ddiv>
 801160c:	e7eb      	b.n	80115e6 <__ieee754_sqrt+0x2a>
 801160e:	1509      	asrs	r1, r1, #20
 8011610:	f000 808d 	beq.w	801172e <__ieee754_sqrt+0x172>
 8011614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011618:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801161c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011620:	07c9      	lsls	r1, r1, #31
 8011622:	bf5c      	itt	pl
 8011624:	005b      	lslpl	r3, r3, #1
 8011626:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801162a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801162e:	bf58      	it	pl
 8011630:	0052      	lslpl	r2, r2, #1
 8011632:	2500      	movs	r5, #0
 8011634:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011638:	1076      	asrs	r6, r6, #1
 801163a:	0052      	lsls	r2, r2, #1
 801163c:	f04f 0e16 	mov.w	lr, #22
 8011640:	46ac      	mov	ip, r5
 8011642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011646:	eb0c 0001 	add.w	r0, ip, r1
 801164a:	4298      	cmp	r0, r3
 801164c:	bfde      	ittt	le
 801164e:	1a1b      	suble	r3, r3, r0
 8011650:	eb00 0c01 	addle.w	ip, r0, r1
 8011654:	186d      	addle	r5, r5, r1
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	f1be 0e01 	subs.w	lr, lr, #1
 801165c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011660:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011664:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011668:	d1ed      	bne.n	8011646 <__ieee754_sqrt+0x8a>
 801166a:	4674      	mov	r4, lr
 801166c:	2720      	movs	r7, #32
 801166e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011672:	4563      	cmp	r3, ip
 8011674:	eb01 000e 	add.w	r0, r1, lr
 8011678:	dc02      	bgt.n	8011680 <__ieee754_sqrt+0xc4>
 801167a:	d113      	bne.n	80116a4 <__ieee754_sqrt+0xe8>
 801167c:	4290      	cmp	r0, r2
 801167e:	d811      	bhi.n	80116a4 <__ieee754_sqrt+0xe8>
 8011680:	2800      	cmp	r0, #0
 8011682:	eb00 0e01 	add.w	lr, r0, r1
 8011686:	da57      	bge.n	8011738 <__ieee754_sqrt+0x17c>
 8011688:	f1be 0f00 	cmp.w	lr, #0
 801168c:	db54      	blt.n	8011738 <__ieee754_sqrt+0x17c>
 801168e:	f10c 0801 	add.w	r8, ip, #1
 8011692:	eba3 030c 	sub.w	r3, r3, ip
 8011696:	4290      	cmp	r0, r2
 8011698:	bf88      	it	hi
 801169a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801169e:	1a12      	subs	r2, r2, r0
 80116a0:	440c      	add	r4, r1
 80116a2:	46c4      	mov	ip, r8
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	3f01      	subs	r7, #1
 80116a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80116ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80116b4:	d1dd      	bne.n	8011672 <__ieee754_sqrt+0xb6>
 80116b6:	4313      	orrs	r3, r2
 80116b8:	d01b      	beq.n	80116f2 <__ieee754_sqrt+0x136>
 80116ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011768 <__ieee754_sqrt+0x1ac>
 80116be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801176c <__ieee754_sqrt+0x1b0>
 80116c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80116c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80116ca:	f7ee fdfd 	bl	80002c8 <__aeabi_dsub>
 80116ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4640      	mov	r0, r8
 80116d8:	4649      	mov	r1, r9
 80116da:	f7ef fa29 	bl	8000b30 <__aeabi_dcmple>
 80116de:	b140      	cbz	r0, 80116f2 <__ieee754_sqrt+0x136>
 80116e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80116e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80116e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80116ec:	d126      	bne.n	801173c <__ieee754_sqrt+0x180>
 80116ee:	3501      	adds	r5, #1
 80116f0:	463c      	mov	r4, r7
 80116f2:	106a      	asrs	r2, r5, #1
 80116f4:	0863      	lsrs	r3, r4, #1
 80116f6:	07e9      	lsls	r1, r5, #31
 80116f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80116fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011700:	bf48      	it	mi
 8011702:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011706:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801170a:	461c      	mov	r4, r3
 801170c:	e76d      	b.n	80115ea <__ieee754_sqrt+0x2e>
 801170e:	0ad3      	lsrs	r3, r2, #11
 8011710:	3815      	subs	r0, #21
 8011712:	0552      	lsls	r2, r2, #21
 8011714:	2b00      	cmp	r3, #0
 8011716:	d0fa      	beq.n	801170e <__ieee754_sqrt+0x152>
 8011718:	02dc      	lsls	r4, r3, #11
 801171a:	d50a      	bpl.n	8011732 <__ieee754_sqrt+0x176>
 801171c:	f1c1 0420 	rsb	r4, r1, #32
 8011720:	fa22 f404 	lsr.w	r4, r2, r4
 8011724:	1e4d      	subs	r5, r1, #1
 8011726:	408a      	lsls	r2, r1
 8011728:	4323      	orrs	r3, r4
 801172a:	1b41      	subs	r1, r0, r5
 801172c:	e772      	b.n	8011614 <__ieee754_sqrt+0x58>
 801172e:	4608      	mov	r0, r1
 8011730:	e7f0      	b.n	8011714 <__ieee754_sqrt+0x158>
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	3101      	adds	r1, #1
 8011736:	e7ef      	b.n	8011718 <__ieee754_sqrt+0x15c>
 8011738:	46e0      	mov	r8, ip
 801173a:	e7aa      	b.n	8011692 <__ieee754_sqrt+0xd6>
 801173c:	f7ee fdc6 	bl	80002cc <__adddf3>
 8011740:	e9da 8900 	ldrd	r8, r9, [sl]
 8011744:	4602      	mov	r2, r0
 8011746:	460b      	mov	r3, r1
 8011748:	4640      	mov	r0, r8
 801174a:	4649      	mov	r1, r9
 801174c:	f7ef f9e6 	bl	8000b1c <__aeabi_dcmplt>
 8011750:	b120      	cbz	r0, 801175c <__ieee754_sqrt+0x1a0>
 8011752:	1ca0      	adds	r0, r4, #2
 8011754:	bf08      	it	eq
 8011756:	3501      	addeq	r5, #1
 8011758:	3402      	adds	r4, #2
 801175a:	e7ca      	b.n	80116f2 <__ieee754_sqrt+0x136>
 801175c:	3401      	adds	r4, #1
 801175e:	f024 0401 	bic.w	r4, r4, #1
 8011762:	e7c6      	b.n	80116f2 <__ieee754_sqrt+0x136>
 8011764:	7ff00000 	.word	0x7ff00000
 8011768:	200001f8 	.word	0x200001f8
 801176c:	20000200 	.word	0x20000200

08011770 <_init>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	bf00      	nop
 8011774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011776:	bc08      	pop	{r3}
 8011778:	469e      	mov	lr, r3
 801177a:	4770      	bx	lr

0801177c <_fini>:
 801177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177e:	bf00      	nop
 8011780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011782:	bc08      	pop	{r3}
 8011784:	469e      	mov	lr, r3
 8011786:	4770      	bx	lr

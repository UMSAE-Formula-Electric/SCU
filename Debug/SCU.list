
SCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08010aa0  08010aa0  00020aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011138  08011138  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011138  08011138  00021138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011140  08011140  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011140  08011140  00021140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011144  08011144  00021144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011148  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b44  20000208  08011350  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d4c  08011350  00035d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021733  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006251  00000000  00000000  000519ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d68  00000000  00000000  00057c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001655  00000000  00000000  00059968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c337  00000000  00000000  0005afbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a4c0  00000000  00000000  000872f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef043  00000000  00000000  000b17b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b60  00000000  00000000  001a07f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001a9358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010a88 	.word	0x08010a88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08010a88 	.word	0x08010a88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <queueAccelerationPacket>:
	angular_rate_buffer.buf_wrap		= false;
}


int queueAccelerationPacket(uint8_t data[])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f8e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <queueAccelerationPacket+0x22>
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f98:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f9e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30f      	bcc.n	8000fc6 <queueAccelerationPacket+0x42>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fa8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d035      	beq.n	8001022 <queueAccelerationPacket+0x9e>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fb8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fbe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d32d      	bcc.n	8001022 <queueAccelerationPacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		acceleration_buffer.queue[acceleration_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fc8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4401      	add	r1, r0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		acceleration_buffer.buf_end_pos++;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fe0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(acceleration_buffer.buf_end_pos % BUFFER_SIZE < acceleration_buffer.buf_end_pos)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ff0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ffc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001000:	429a      	cmp	r2, r3
 8001002:	d20c      	bcs.n	800101e <queueAccelerationPacket+0x9a>
		{
			acceleration_buffer.buf_end_pos = acceleration_buffer.buf_end_pos % BUFFER_SIZE;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001006:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001012:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			acceleration_buffer.buf_wrap = true;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <queueAccelerationPacket+0xa2>
	}

	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000228 	.word	0x20000228

08001038 <queueAngularRatePacket>:

int queueAngularRatePacket(uint8_t data[])
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001042:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <queueAngularRatePacket+0x22>
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800104c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001052:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001056:	429a      	cmp	r2, r3
 8001058:	d30f      	bcc.n	800107a <queueAngularRatePacket+0x42>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800105c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d035      	beq.n	80010d6 <queueAngularRatePacket+0x9e>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800106c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001072:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001076:	429a      	cmp	r2, r3
 8001078:	d32d      	bcc.n	80010d6 <queueAngularRatePacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		angular_rate_buffer.queue[angular_rate_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800107c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001080:	4619      	mov	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800108a:	00c9      	lsls	r1, r1, #3
 800108c:	4401      	add	r1, r0
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		angular_rate_buffer.buf_end_pos++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001094:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800109e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(angular_rate_buffer.buf_end_pos % BUFFER_SIZE < angular_rate_buffer.buf_end_pos)
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010a4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010b0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20c      	bcs.n	80010d2 <queueAngularRatePacket+0x9a>
		{
			angular_rate_buffer.buf_end_pos = angular_rate_buffer.buf_end_pos % BUFFER_SIZE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010ba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010c6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			angular_rate_buffer.buf_wrap = true;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <queueAngularRatePacket+0xa2>
	}

	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000630 	.word	0x20000630

080010ec <dequeueAccelerationPacket>:

uint64_t dequeueAccelerationPacket()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!acceleration_buffer.buf_wrap && acceleration_buffer.buf_start_pos == acceleration_buffer.buf_end_pos)
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <dequeueAccelerationPacket+0x98>)
 80010f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <dequeueAccelerationPacket+0x30>
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001104:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800110a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800110e:	429a      	cmp	r2, r3
 8001110:	d104      	bne.n	800111c <dequeueAccelerationPacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e02b      	b.n	8001174 <dequeueAccelerationPacket+0x88>
	}

	// get data value
	temp = acceleration_buffer.queue[acceleration_buffer.buf_start_pos];
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800111e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]

	acceleration_buffer.buf_start_pos++;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001132:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800113c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (acceleration_buffer.buf_start_pos % BUFFER_SIZE < acceleration_buffer.buf_start_pos)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800114e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <dequeueAccelerationPacket+0x84>
	{
		acceleration_buffer.buf_start_pos = acceleration_buffer.buf_start_pos % BUFFER_SIZE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001158:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001164:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		acceleration_buffer.buf_wrap = false;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000228 	.word	0x20000228

08001188 <dequeueAngularRatePacket>:

uint64_t dequeueAngularRatePacket()
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_start_pos == angular_rate_buffer.buf_end_pos)
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001190:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <dequeueAngularRatePacket+0x30>
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <dequeueAngularRatePacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e02b      	b.n	8001210 <dequeueAngularRatePacket+0x88>
	}

	// get data value
	temp = angular_rate_buffer.queue[angular_rate_buffer.buf_start_pos];
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]

	angular_rate_buffer.buf_start_pos++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ce:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (angular_rate_buffer.buf_start_pos % BUFFER_SIZE < angular_rate_buffer.buf_start_pos)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011de:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <dequeueAngularRatePacket+0x84>
	{
		angular_rate_buffer.buf_start_pos = angular_rate_buffer.buf_start_pos % BUFFER_SIZE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011f4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001200:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		angular_rate_buffer.buf_wrap = false;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000630 	.word	0x20000630

08001224 <processAccelerationPacket>:

void processAccelerationPacket(uint64_t packet)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	float x_acceleration;
	float y_acceleration;
	float z_acceleration;

	data = (uint16_t*) &packet;
 8001232:	463b      	mov	r3, r7
 8001234:	617b      	str	r3, [r7, #20]

	y_acceleration = ((float)data[0] / 100) - 320;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012b4 <processAccelerationPacket+0x90>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012b8 <processAccelerationPacket+0x94>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	x_acceleration = ((float)data[1] / 100) - 320;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012b4 <processAccelerationPacket+0x90>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012b8 <processAccelerationPacket+0x94>
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	z_acceleration = ((float)data[2] / 100) - 320;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012b4 <processAccelerationPacket+0x90>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <processAccelerationPacket+0x94>
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Acceleration", x_acceleration, y_acceleration, z_acceleration);
 800129a:	ed97 1a02 	vldr	s2, [r7, #8]
 800129e:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <processAccelerationPacket+0x98>)
 80012a8:	f000 f858 	bl	800135c <printPacket>
	/* Logging Ends */
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	43a00000 	.word	0x43a00000
 80012bc:	08010aa0 	.word	0x08010aa0

080012c0 <processAngularRatePacket>:

void processAngularRatePacket(uint64_t packet)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	float x_angular_rate;
	float y_angular_rate;
	float z_angular_rate;

	data = (uint16_t*) &packet;
 80012ce:	463b      	mov	r3, r7
 80012d0:	617b      	str	r3, [r7, #20]

	y_angular_rate = ((float)data[0] / 128) - 250;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001350 <processAngularRatePacket+0x90>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001354 <processAngularRatePacket+0x94>
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
	x_angular_rate = ((float)data[1] / 128) - 250;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001350 <processAngularRatePacket+0x90>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001354 <processAngularRatePacket+0x94>
 800130c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	z_angular_rate = ((float)data[2] / 128) - 250;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3304      	adds	r3, #4
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001322:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001350 <processAngularRatePacket+0x90>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001354 <processAngularRatePacket+0x94>
 800132e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001332:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Angular Rate", x_angular_rate, y_angular_rate, z_angular_rate);
 8001336:	ed97 1a02 	vldr	s2, [r7, #8]
 800133a:	edd7 0a04 	vldr	s1, [r7, #16]
 800133e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <processAngularRatePacket+0x98>)
 8001344:	f000 f80a 	bl	800135c <printPacket>
	/* Logging Ends */
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43000000 	.word	0x43000000
 8001354:	437a0000 	.word	0x437a0000
 8001358:	08010ab0 	.word	0x08010ab0

0800135c <printPacket>:

void printPacket(char *data_name, float x, float y, float z)
{
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001364:	af0a      	add	r7, sp, #40	; 0x28
 8001366:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001378:	ed83 0a00 	vstr	s0, [r3]
 800137c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001384:	edc3 0a00 	vstr	s1, [r3]
 8001388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001390:	ed83 1a00 	vstr	s2, [r3]
	char tempMsg[512];

	sprintf(tempMsg, "%s X: %f\r\n%s Y: %f\r\n%s Z: %f\r\n", data_name, x, data_name, y, data_name, z);
 8001394:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001398:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013ce:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 80013d2:	f107 0010 	add.w	r0, r7, #16
 80013d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	680a      	ldr	r2, [r1, #0]
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <printPacket+0xcc>)
 80013fe:	f00c f845 	bl	800d48c <siprintf>

	HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 20);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	2314      	movs	r3, #20
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <printPacket+0xd0>)
 8001418:	f005 fb69 	bl	8006aee <HAL_USART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	08010ac0 	.word	0x08010ac0
 800142c:	20001ddc 	.word	0x20001ddc

08001430 <StartIMUPacketProcessTask>:

void StartIMUPacketProcessTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint64_t packet;
	for (;;)
	{
		// should probably check to make sure queues are in valid state
		packet = dequeueAccelerationPacket();
 8001438:	f7ff fe58 	bl	80010ec <dequeueAccelerationPacket>
 800143c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAccelerationPacket(packet);
 8001440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001444:	f7ff feee 	bl	8001224 <processAccelerationPacket>

		packet = dequeueAngularRatePacket();
 8001448:	f7ff fe9e 	bl	8001188 <dequeueAngularRatePacket>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAngularRatePacket(packet);
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff ff34 	bl	80012c0 <processAngularRatePacket>

		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f008 ff46 	bl	800a2ec <osDelay>
		packet = dequeueAccelerationPacket();
 8001460:	e7ea      	b.n	8001438 <StartIMUPacketProcessTask+0x8>
	...

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001478:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_ADC1_Init+0x240>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <MX_ADC1_Init+0x244>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4876      	ldr	r0, [pc, #472]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c6:	f001 fd9f 	bl	8003008 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fcae 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014dc:	2303      	movs	r3, #3
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	486e      	ldr	r0, [pc, #440]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014e6:	f001 fef7 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fc9e 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001502:	f001 fee9 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fc90 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001510:	2302      	movs	r3, #2
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800151e:	f001 fedb 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fc82 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800152c:	2303      	movs	r3, #3
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800153a:	f001 fecd 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fc74 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001548:	2304      	movs	r3, #4
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4852      	ldr	r0, [pc, #328]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001556:	f001 febf 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fc66 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001564:	2305      	movs	r3, #5
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001572:	f001 feb1 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fc58 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800158e:	f001 fea3 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001598:	f000 fc4a 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800159c:	2307      	movs	r3, #7
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	483d      	ldr	r0, [pc, #244]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015aa:	f001 fe95 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015b4:	f000 fc3c 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015bc:	2309      	movs	r3, #9
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015c6:	f001 fe87 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d0:	f000 fc2e 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d4:	2309      	movs	r3, #9
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015e2:	f001 fe79 	bl	80032d8 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015ec:	f000 fc20 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015f4:	230b      	movs	r3, #11
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015fe:	f001 fe6b 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 fc12 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001610:	230c      	movs	r3, #12
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800161a:	f001 fe5d 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001624:	f000 fc04 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800162c:	230d      	movs	r3, #13
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001636:	f001 fe4f 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001640:	f000 fbf6 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001644:	230d      	movs	r3, #13
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001648:	230e      	movs	r3, #14
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001652:	f001 fe41 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800165c:	f000 fbe8 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001660:	230e      	movs	r3, #14
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800166e:	f001 fe33 	bl	80032d8 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001678:	f000 fbda 	bl	8001e30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001680:	2310      	movs	r3, #16
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800168a:	f001 fe25 	bl	80032d8 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001694:	f000 fbcc 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a80 	.word	0x20000a80
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001754:	f002 fdfc 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_ADC_MspInit+0x150>)
 800176c:	f002 fdf0 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x154>)
 8001784:	f002 fde4 	bl	8004350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_ADC_MspInit+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017cc:	f002 fa50 	bl	8003c70 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80017d6:	f000 fb2b 	bl	8001e30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	20000ac8 	.word	0x20000ac8
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	newData_thermistor = 1;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_ADC_ConvCpltCallback+0x20>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	newData_shock_pot = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_ADC_ConvCpltCallback+0x24>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000a7c 	.word	0x20000a7c
 8001830:	20000a78 	.word	0x20000a78

08001834 <StartAdcDma>:

void StartAdcDma(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	const int DELAY = 500;
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <StartAdcDma+0x28>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4905      	ldr	r1, [pc, #20]	; (8001860 <StartAdcDma+0x2c>)
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <StartAdcDma+0x30>)
 800184c:	f001 fc20 	bl	8003090 <HAL_ADC_Start_DMA>

	osDelay(DELAY);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fd4a 	bl	800a2ec <osDelay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001858:	e7f3      	b.n	8001842 <StartAdcDma+0xe>
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000
 8001860:	20000a38 	.word	0x20000a38
 8001864:	20000a80 	.word	0x20000a80

08001868 <CAN_Polling>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Polling(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	int a = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800186e:	2100      	movs	r1, #0
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <CAN_Polling+0x3c>)
 8001872:	f002 f8f3 	bl	8003a5c <HAL_CAN_GetRxFifoFillLevel>
 8001876:	4603      	mov	r3, r0
 8001878:	607b      	str	r3, [r7, #4]
	if (a < 1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dc01      	bgt.n	8001884 <CAN_Polling+0x1c>
	{
		return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e00b      	b.n	800189c <CAN_Polling+0x34>
	}

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <CAN_Polling+0x40>)
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <CAN_Polling+0x44>)
 8001888:	2100      	movs	r1, #0
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <CAN_Polling+0x3c>)
 800188c:	f001 ffd4 	bl	8003838 <HAL_CAN_GetRxMessage>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <CAN_Polling+0x32>
	{
		return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <CAN_Polling+0x34>
	}

	return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000b4c 	.word	0x20000b4c
 80018a8:	20000b44 	.word	0x20000b44
 80018ac:	20000b28 	.word	0x20000b28

080018b0 <StartCanTask>:

void StartCanTask(void const * argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
//	imuState state;
//	char canMsg[40];
	for (;;)
	{
		if (CAN_Polling() == HAL_OK)
 80018b8:	f7ff ffd6 	bl	8001868 <CAN_Polling>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d114      	bne.n	80018ec <StartCanTask+0x3c>
		{
			if (RxHeader.IDE == CAN_ID_EXT)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <StartCanTask+0x48>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d110      	bne.n	80018ec <StartCanTask+0x3c>
			{
				switch (RxHeader.ExtId)
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <StartCanTask+0x48>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <StartCanTask+0x4c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d003      	beq.n	80018dc <StartCanTask+0x2c>
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <StartCanTask+0x50>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d004      	beq.n	80018e4 <StartCanTask+0x34>
 80018da:	e007      	b.n	80018ec <StartCanTask+0x3c>
				{
					case IMU_ACCELERATION_CAN_EXT_ID:
						queueAccelerationPacket(RxData);
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <StartCanTask+0x54>)
 80018de:	f7ff fb51 	bl	8000f84 <queueAccelerationPacket>
//						imuProcessAccelerationPacket(&state, RxData);
//						sprintf(canMsg, "IMU Acceleration Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018e2:	e003      	b.n	80018ec <StartCanTask+0x3c>
					case IMU_ANGULAR_RATE_CAN_EXT_ID:
						queueAngularRatePacket(RxData);
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <StartCanTask+0x54>)
 80018e6:	f7ff fba7 	bl	8001038 <queueAngularRatePacket>
//						imuProcessAngularRatePacket(&state, RxData);
//						sprintf(canMsg, "IMU Angular Rate Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018ea:	bf00      	nop
				/* Logging Starts */

				/* Logging Ends */
			}
		}
		osDelay(500);
 80018ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f0:	f008 fcfc 	bl	800a2ec <osDelay>
		if (CAN_Polling() == HAL_OK)
 80018f4:	e7e0      	b.n	80018b8 <StartCanTask+0x8>
 80018f6:	bf00      	nop
 80018f8:	20000b28 	.word	0x20000b28
 80018fc:	08f02d80 	.word	0x08f02d80
 8001900:	0cf02a80 	.word	0x0cf02a80
 8001904:	20000b44 	.word	0x20000b44

08001908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_DMA_Init+0x3c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <MX_DMA_Init+0x3c>)
 8001918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_DMA_Init+0x3c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2038      	movs	r0, #56	; 0x38
 8001930:	f002 f974 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001934:	2038      	movs	r0, #56	; 0x38
 8001936:	f002 f98d 	bl	8003c54 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <log_error>:
		return log_info(log_type, data_type, can_bytes);
		break;
	}
}

bool log_error(ERR_TABLE error_type, DataType data_type, uint8_t *data) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	603a      	str	r2, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	460b      	mov	r3, r1
 8001956:	71bb      	strb	r3, [r7, #6]
	LogLevel log_level = Error;	// Error
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

	char *test_log = "Testing";
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <log_error+0x2c>)
 800195e:	60bb      	str	r3, [r7, #8]
	sd_log_to_file(test_log, 8);
 8001960:	2108      	movs	r1, #8
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f000 faa4 	bl	8001eb0 <sd_log_to_file>

	return true;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08010ae0 	.word	0x08010ae0

08001978 <calculateFlowrate>:
const int DELAY = 500;													// time in ms
static const double conversionFactor = (1000/DELAY)*(1.0/1000.0);		// convert L/s to m^3/s
extern volatile int flowmeter_pulse_count;

// gets flowrate as m^3/s
double calculateFlowrate(){
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	volatile double flowrate;

	flowrate = flowmeter_pulse_count*conversionFactor/PPL;	// calculate flowrate
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <calculateFlowrate+0x68>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fdee 	bl	8000564 <__aeabi_i2d>
 8001988:	a313      	add	r3, pc, #76	; (adr r3, 80019d8 <calculateFlowrate+0x60>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fe53 	bl	8000638 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	f640 0398 	movw	r3, #2200	; 0x898
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fde0 	bl	8000564 <__aeabi_i2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe ff6e 	bl	800088c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9c7 2300 	strd	r2, r3, [r7]
	flowmeter_pulse_count = 0;								// reset pulse_count
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <calculateFlowrate+0x68>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

	return flowrate;
 80019be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80019c6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ca:	eef0 0a67 	vmov.f32	s1, s15
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019dc:	3f60624d 	.word	0x3f60624d
 80019e0:	20001cf8 	.word	0x20001cf8

080019e4 <StartGetFlowrateTask>:

// calculates flowrate every DELAY ms
void StartGetFlowrateTask(void const * argument){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b094      	sub	sp, #80	; 0x50
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	volatile double flowrate;
	char tempMsg[50];
	char* time;

	for (;;){
		flowrate = calculateFlowrate();		// calculates flowrate
 80019ec:	f7ff ffc4 	bl	8001978 <calculateFlowrate>
 80019f0:	eeb0 7a40 	vmov.f32	s14, s0
 80019f4:	eef0 7a60 	vmov.f32	s15, s1
 80019f8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

		/* TODO SCU#35 */
		/* Logging Starts */
		time = get_time();
 80019fc:	f000 fa24 	bl	8001e48 <get_time>
 8001a00:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 8001a02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a04:	f7fe fc54 	bl	80002b0 <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a10:	480e      	ldr	r0, [pc, #56]	; (8001a4c <StartGetFlowrateTask+0x68>)
 8001a12:	f005 f86c 	bl	8006aee <HAL_USART_Transmit>

		sprintf(tempMsg, ",%f,,,,\r\n", flowrate);
 8001a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a1a:	f107 000c 	add.w	r0, r7, #12
 8001a1e:	490c      	ldr	r1, [pc, #48]	; (8001a50 <StartGetFlowrateTask+0x6c>)
 8001a20:	f00b fd34 	bl	800d48c <siprintf>
		HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fc41 	bl	80002b0 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f107 010c 	add.w	r1, r7, #12
 8001a36:	230a      	movs	r3, #10
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <StartGetFlowrateTask+0x68>)
 8001a3a:	f005 f858 	bl	8006aee <HAL_USART_Transmit>
		/* Logging Ends */

		osDelay(DELAY);
 8001a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f008 fc52 	bl	800a2ec <osDelay>
		flowrate = calculateFlowrate();		// calculates flowrate
 8001a48:	e7d0      	b.n	80019ec <StartGetFlowrateTask+0x8>
 8001a4a:	bf00      	nop
 8001a4c:	20001ddc 	.word	0x20001ddc
 8001a50:	08010ae8 	.word	0x08010ae8

08001a54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <vApplicationGetIdleTaskMemory+0x30>)
 8001a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20001430 	.word	0x20001430
 8001a84:	200014d0 	.word	0x200014d0

08001a88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b0b8      	sub	sp, #224	; 0xe0
 8001a8c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <MX_FREERTOS_Init+0x13c>)
 8001a90:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001a94:	461d      	mov	r5, r3
 8001a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001aa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f008 fbd3 	bl	800a254 <osThreadCreate>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <MX_FREERTOS_Init+0x140>)
 8001ab2:	6013      	str	r3, [r2, #0]

  /* definition and creation of readAdcTask */
  osThreadStaticDef(readAdcTask, StartAdcDma, osPriorityNormal, 0, 512, readAdcTaskBuffer, &readAdcTaskControlBlock);
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <MX_FREERTOS_Init+0x144>)
 8001ab6:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001aba:	461d      	mov	r5, r3
 8001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ac4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAdcTaskHandle = osThreadCreate(osThread(readAdcTask), NULL);
 8001ac8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 fbc0 	bl	800a254 <osThreadCreate>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_FREERTOS_Init+0x148>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 512);
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <MX_FREERTOS_Init+0x14c>)
 8001adc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8001aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f008 fbad 	bl	800a254 <osThreadCreate>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <MX_FREERTOS_Init+0x150>)
 8001afe:	6013      	str	r3, [r2, #0]

  // Shock Pot Reading Thread
  osThreadDef(readDistTask, StartReadDistTask, osPriorityNormal, 0, 512);
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <MX_FREERTOS_Init+0x154>)
 8001b02:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001b06:	461d      	mov	r5, r3
 8001b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readDistTask), NULL);
 8001b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f008 fb9a 	bl	800a254 <osThreadCreate>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <MX_FREERTOS_Init+0x150>)
 8001b24:	6013      	str	r3, [r2, #0]

  // Flow Meter Reading Thread
  osThreadDef(readFlowmeterTask, StartGetFlowrateTask, osPriorityNormal, 0, 512);
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <MX_FREERTOS_Init+0x158>)
 8001b28:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readFlowmeterTaskHandle = osThreadCreate(osThread(readFlowmeterTask), NULL);
 8001b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 fb87 	bl	800a254 <osThreadCreate>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <MX_FREERTOS_Init+0x15c>)
 8001b4a:	6013      	str	r3, [r2, #0]

  // CAN Receiver Thread
  osThreadDef(canReceiverTask, StartCanTask, osPriorityNormal, 0, 512);
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_FREERTOS_Init+0x160>)
 8001b4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b52:	461d      	mov	r5, r3
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 fb74 	bl	800a254 <osThreadCreate>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <MX_FREERTOS_Init+0x164>)
 8001b70:	6013      	str	r3, [r2, #0]

  // IMU Packet Processing Thread
  osThreadDef(imuPacketProcessTask, StartIMUPacketProcessTask, osPriorityNormal, 0, 512);
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_FREERTOS_Init+0x168>)
 8001b74:	f107 041c 	add.w	r4, r7, #28
 8001b78:	461d      	mov	r5, r3
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuPacketProcessHandle = osThreadCreate(osThread(imuPacketProcessTask), NULL);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f008 fb61 	bl	800a254 <osThreadCreate>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <MX_FREERTOS_Init+0x16c>)
 8001b96:	6013      	str	r3, [r2, #0]

  // Wheel Speed Reading Thread
  osThreadDef(readWheelSpeedsTask, StartGetWheelSpeedTask, osPriorityNormal, 0, 512);
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_FREERTOS_Init+0x170>)
 8001b9a:	463c      	mov	r4, r7
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readWheelSpeedsHandle = osThreadCreate(osThread(readWheelSpeedsTask), NULL);
 8001baa:	463b      	mov	r3, r7
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f008 fb50 	bl	800a254 <osThreadCreate>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <MX_FREERTOS_Init+0x174>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001bba:	bf00      	nop
 8001bbc:	37e0      	adds	r7, #224	; 0xe0
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08010b00 	.word	0x08010b00
 8001bc8:	20000b88 	.word	0x20000b88
 8001bcc:	08010b28 	.word	0x08010b28
 8001bd0:	20000b8c 	.word	0x20000b8c
 8001bd4:	08010b54 	.word	0x08010b54
 8001bd8:	20000b74 	.word	0x20000b74
 8001bdc:	08010b80 	.word	0x08010b80
 8001be0:	08010bb0 	.word	0x08010bb0
 8001be4:	20000b78 	.word	0x20000b78
 8001be8:	08010bdc 	.word	0x08010bdc
 8001bec:	20000b7c 	.word	0x20000b7c
 8001bf0:	08010c10 	.word	0x08010c10
 8001bf4:	20000b80 	.word	0x20000b80
 8001bf8:	08010c40 	.word	0x08010c40
 8001bfc:	20000b84 	.word	0x20000b84

08001c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f008 fb6f 	bl	800a2ec <osDelay>
 8001c0e:	e7fb      	b.n	8001c08 <StartDefaultTask+0x8>

08001c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_GPIO_Init+0xb4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c82:	f002 fcf9 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c86:	2304      	movs	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4619      	mov	r1, r3
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001c9a:	f002 fb59 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_GPIO_Init+0xb8>)
 8001cb8:	f002 fb4a 	bl	8004350 <HAL_GPIO_Init>

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020400 	.word	0x40020400

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f001 f958 	bl	8002f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f836 	bl	8001d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f7ff ff9a 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cdc:	f7ff fe14 	bl	8001908 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ce0:	f7ff fbc0 	bl	8001464 <MX_ADC1_Init>
  MX_USART1_Init();
 8001ce4:	f001 f84a 	bl	8002d7c <MX_USART1_Init>
  MX_TIM12_Init();
 8001ce8:	f000 fec8 	bl	8002a7c <MX_TIM12_Init>
  // MX_CAN1_Init();
  MX_TIM3_Init();
 8001cec:	f000 fdc6 	bl	800287c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cf0:	f000 fe44 	bl	800297c <MX_TIM4_Init>
  MX_RTC_Init();
 8001cf4:	f000 f8a1 	bl	8001e3a <MX_RTC_Init>
  MX_FATFS_Init();
 8001cf8:	f005 fa78 	bl	80071ec <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cfc:	f000 f9d8 	bl	80020b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8001d00:	2100      	movs	r1, #0
 8001d02:	480d      	ldr	r0, [pc, #52]	; (8001d38 <main+0x6c>)
 8001d04:	f003 ffb2 	bl	8005c6c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); 		// Start input capture
 8001d08:	2100      	movs	r1, #0
 8001d0a:	480c      	ldr	r0, [pc, #48]	; (8001d3c <main+0x70>)
 8001d0c:	f003 ffae 	bl	8005c6c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1); 		// Start input capture
 8001d10:	2100      	movs	r1, #0
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <main+0x74>)
 8001d14:	f003 ffaa 	bl	8005c6c <HAL_TIM_IC_Start_IT>
  // Init_SD_Card();

  sd_mount();
 8001d18:	f000 f8a6 	bl	8001e68 <sd_mount>

  sd_open_log_file();
 8001d1c:	f000 f8b2 	bl	8001e84 <sd_open_log_file>

	  sd_log_to_file(buff, BUF_LEN);
  }
  */

  log_error(BATTERY_VOLTAGE_LOW, NONE, NULL);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2110      	movs	r1, #16
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff fe0f 	bl	8001948 <log_error>


  sd_eject();
 8001d2a:	f000 f8d7 	bl	8001edc <sd_eject>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d2e:	f7ff feab 	bl	8001a88 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d32:	f008 fa88 	bl	800a246 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <main+0x6a>
 8001d38:	20001d04 	.word	0x20001d04
 8001d3c:	20001d4c 	.word	0x20001d4c
 8001d40:	20001d94 	.word	0x20001d94

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	; 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	2234      	movs	r2, #52	; 0x34
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00b fbfd 	bl	800d552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 0308 	add.w	r3, r7, #8
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <SystemClock_Config+0xc0>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <SystemClock_Config+0xc0>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <SystemClock_Config+0xc0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <SystemClock_Config+0xc4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <SystemClock_Config+0xc4>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <SystemClock_Config+0xc4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001da4:	230a      	movs	r3, #10
 8001da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db0:	2310      	movs	r3, #16
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f002 ff69 	bl	8004c98 <HAL_RCC_OscConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dcc:	f000 f830 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 fc5e 	bl	80046ac <HAL_RCC_ClockConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001df6:	f000 f81b 	bl	8001e30 <Error_Handler>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3750      	adds	r7, #80	; 0x50
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e1e:	f001 f8d3 	bl	8002fc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40014400 	.word	0x40014400

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <Error_Handler+0x8>

08001e3a <MX_RTC_Init>:
///* USER CODE END 0 */
//
//RTC_HandleTypeDef hrtc;
//
///* RTC init function */
void MX_RTC_Init(void) {
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
	return;
 8001e3e:	bf00      	nop
}
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <get_time>:
//  }
//}
//
///* USER CODE BEGIN 1 */

char* get_time(void) {
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	static char time[2];
	time[0] = 'a';
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <get_time+0x1c>)
 8001e4e:	2261      	movs	r2, #97	; 0x61
 8001e50:	701a      	strb	r2, [r3, #0]
	time[1] = '\0';
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <get_time+0x1c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	705a      	strb	r2, [r3, #1]
	return time;
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <get_time+0x1c>)
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	200016d0 	.word	0x200016d0

08001e68 <sd_mount>:
#define LOG_FILE "LOG.txt"

FATFS FatFs; 	//Fatfs handle
FIL logFile; 	//File handle

FRESULT sd_mount(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	return f_mount(&FatFs, "", 1);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4903      	ldr	r1, [pc, #12]	; (8001e7c <sd_mount+0x14>)
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <sd_mount+0x18>)
 8001e72:	f007 fc91 	bl	8009798 <f_mount>
 8001e76:	4603      	mov	r3, r0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	08010c5c 	.word	0x08010c5c
 8001e80:	200016d4 	.word	0x200016d4

08001e84 <sd_open_log_file>:

FRESULT sd_open_log_file(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	FRESULT fres = FR_NOT_READY;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	71fb      	strb	r3, [r7, #7]
	fres = f_open(&logFile, LOG_FILE, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001e8e:	221a      	movs	r2, #26
 8001e90:	4905      	ldr	r1, [pc, #20]	; (8001ea8 <sd_open_log_file+0x24>)
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <sd_open_log_file+0x28>)
 8001e94:	f007 fce4 	bl	8009860 <f_open>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
	return fres;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	08010c60 	.word	0x08010c60
 8001eac:	20001908 	.word	0x20001908

08001eb0 <sd_log_to_file>:

FRESULT sd_log_to_file(char *buff, UINT n) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	UINT bytesWritten;
	FRESULT fres = f_write(&logFile, buff, n, &bytesWritten);
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <sd_log_to_file+0x28>)
 8001ec4:	f007 fe91 	bl	8009bea <f_write>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
	return fres;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20001908 	.word	0x20001908

08001edc <sd_eject>:

FRESULT sd_eject(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
	FRESULT fres = f_close(&logFile);
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <sd_eject+0x30>)
 8001ee4:	f008 f8ae 	bl	800a044 <f_close>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]

	if(fres == FR_OK) {
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <sd_eject+0x24>
		fres = f_mount(NULL, "", 0); // unmount fat fs
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4906      	ldr	r1, [pc, #24]	; (8001f10 <sd_eject+0x34>)
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f007 fc4e 	bl	8009798 <f_mount>
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
	}

	return fres;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001908 	.word	0x20001908
 8001f10:	08010c5c 	.word	0x08010c5c

08001f14 <getDistance>:
// INPUT PARAMTERS:
//			voltage - voltage measured across the shock pot
//
// RETURN:	distance in mm of type double
//*********************************************************************
double getDistance(double voltage){
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	ed87 0b00 	vstr	d0, [r7]
	double dist = MAX_DIST * voltage / vDD;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <getDistance+0x58>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb31 	bl	8000588 <__aeabi_f2d>
 8001f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2a:	f7fe fb85 	bl	8000638 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <getDistance+0x5c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb24 	bl	8000588 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe fca0 	bl	800088c <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return dist;
 8001f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f58:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f60:	eef0 0a67 	vmov.f32	s1, s15
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	42480000 	.word	0x42480000
 8001f70:	08010d08 	.word	0x08010d08

08001f74 <StartReadDistTask>:
// readDist_task
//
// PURPOSE: Main loop for freeRTOS thread. Waits for ADC conversion and
//			translates voltages into distance
//*********************************************************************
void StartReadDistTask(void const * argument){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001f80:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001f84:	6018      	str	r0, [r3, #0]
	char msgDist[20];
	float voltages[16];
	char distMsg[50];

	for (;;){
		if (newData_shock_pot == 1){
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <StartReadDistTask+0x120>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d17d      	bne.n	800208a <StartReadDistTask+0x116>
			// calculate distances for each ADC channel
			for(int i = 0; i < 16; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8001f94:	e05d      	b.n	8002052 <StartReadDistTask+0xde>
				  voltages[i] = ADC_TO_Voltage * ADC_Readings[i];
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <StartReadDistTask+0x124>)
 8001f98:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe facf 	bl	8000544 <__aeabi_ui2d>
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <StartReadDistTask+0x128>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fb44 	bl	8000638 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fe16 	bl	8000be8 <__aeabi_d2f>
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001fc2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8001fc6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	6019      	str	r1, [r3, #0]
				  dist[i] = getDistance(voltages[i]);
 8001fd0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001fd4:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8001fd8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fad0 	bl	8000588 <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	ec43 2b10 	vmov	d0, r2, r3
 8001ff0:	f7ff ff90 	bl	8001f14 <getDistance>
 8001ff4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff8:	eef0 7a60 	vmov.f32	s15, s1
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <StartReadDistTask+0x12c>)
 8001ffe:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	ed83 7b00 	vstr	d7, [r3]
				  sprintf(msgDist, "ADC %d %.5f \n", i, voltages[i]);
 800200a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800200e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002012:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fab3 	bl	8000588 <__aeabi_f2d>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800202a:	e9cd 2300 	strd	r2, r3, [sp]
 800202e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002032:	491c      	ldr	r1, [pc, #112]	; (80020a4 <StartReadDistTask+0x130>)
 8002034:	f00b fa2a 	bl	800d48c <siprintf>
				  strcat(msg,msgDist);
 8002038:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800203c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f00b fa8d 	bl	800d562 <strcat>
			for(int i = 0; i < 16; i++) {
 8002048:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800204c:	3301      	adds	r3, #1
 800204e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002052:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002056:	2b0f      	cmp	r3, #15
 8002058:	dd9d      	ble.n	8001f96 <StartReadDistTask+0x22>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			// add ADC channel 0 to message
			sprintf(distMsg, "Distance: %f\r\n", dist[0]);
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <StartReadDistTask+0x12c>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f107 000c 	add.w	r0, r7, #12
 8002064:	4910      	ldr	r1, [pc, #64]	; (80020a8 <StartReadDistTask+0x134>)
 8002066:	f00b fa11 	bl	800d48c <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) distMsg, strlen(distMsg), 10);
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f91e 	bl	80002b0 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	b29a      	uxth	r2, r3
 8002078:	f107 010c 	add.w	r1, r7, #12
 800207c:	230a      	movs	r3, #10
 800207e:	480b      	ldr	r0, [pc, #44]	; (80020ac <StartReadDistTask+0x138>)
 8002080:	f004 fd35 	bl	8006aee <HAL_USART_Transmit>
			/* Logging Ends */

			newData_shock_pot = 0;					// reset ADC conversion flag
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <StartReadDistTask+0x120>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
		}

		// wait 500ms
		osDelay(500);
 800208a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800208e:	f008 f92d 	bl	800a2ec <osDelay>
		if (newData_shock_pot == 1){
 8002092:	e778      	b.n	8001f86 <StartReadDistTask+0x12>
 8002094:	20000a78 	.word	0x20000a78
 8002098:	20000a38 	.word	0x20000a38
 800209c:	08010d00 	.word	0x08010d00
 80020a0:	20001b38 	.word	0x20001b38
 80020a4:	08010c68 	.word	0x08010c68
 80020a8:	08010c78 	.word	0x08010c78
 80020ac:	20001ddc 	.word	0x20001ddc

080020b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_SPI1_Init+0x64>)
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <MX_SPI1_Init+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <MX_SPI1_Init+0x64>)
 80020bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_SPI1_Init+0x64>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_SPI1_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_SPI1_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_SPI1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_SPI1_Init+0x64>)
 80020dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_SPI1_Init+0x64>)
 80020e4:	2230      	movs	r2, #48	; 0x30
 80020e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MX_SPI1_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_SPI1_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <MX_SPI1_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_SPI1_Init+0x64>)
 80020fc:	220a      	movs	r2, #10
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_SPI1_Init+0x64>)
 8002102:	f003 f867 	bl	80051d4 <HAL_SPI_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800210c:	f7ff fe90 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20001bb8 	.word	0x20001bb8
 8002118:	40013000 	.word	0x40013000

0800211c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_SPI_MspInit+0x84>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12b      	bne.n	8002196 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 8002148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_SPI_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002176:	2338      	movs	r3, #56	; 0x38
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002186:	2305      	movs	r3, #5
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_SPI_MspInit+0x8c>)
 8002192:	f002 f8dd 	bl	8004350 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002196:	bf00      	nop
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40013000 	.word	0x40013000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_MspInit+0x54>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_MspInit+0x54>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x54>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_MspInit+0x54>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_MspInit+0x54>)
 80021d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_MspInit+0x54>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	210f      	movs	r1, #15
 80021ee:	f06f 0001 	mvn.w	r0, #1
 80021f2:	f001 fd13 	bl	8003c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_InitTick+0xd0>)
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_InitTick+0xd0>)
 800221e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002222:	6453      	str	r3, [r2, #68]	; 0x44
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_InitTick+0xd0>)
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002230:	f107 020c 	add.w	r2, r7, #12
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fb50 	bl	80048e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002240:	f002 fb3a 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8002244:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <HAL_InitTick+0xd4>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	3b01      	subs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_InitTick+0xd8>)
 8002256:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <HAL_InitTick+0xdc>)
 8002258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_InitTick+0xd8>)
 800225c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002260:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <HAL_InitTick+0xd8>)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_InitTick+0xd8>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_InitTick+0xd8>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_InitTick+0xd8>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800227a:	4818      	ldr	r0, [pc, #96]	; (80022dc <HAL_InitTick+0xd8>)
 800227c:	f003 fbdc 	bl	8005a38 <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11b      	bne.n	80022c6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800228e:	4813      	ldr	r0, [pc, #76]	; (80022dc <HAL_InitTick+0xd8>)
 8002290:	f003 fc2c 	bl	8005aec <HAL_TIM_Base_Start_IT>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800229a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d111      	bne.n	80022c6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022a2:	2019      	movs	r0, #25
 80022a4:	f001 fcd6 	bl	8003c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	d808      	bhi.n	80022c0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80022ae:	2200      	movs	r2, #0
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	2019      	movs	r0, #25
 80022b4:	f001 fcb2 	bl	8003c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_InitTick+0xe0>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e002      	b.n	80022c6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3730      	adds	r7, #48	; 0x30
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	20001c10 	.word	0x20001c10
 80022e0:	40014400 	.word	0x40014400
 80022e4:	20000008 	.word	0x20000008

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <NMI_Handler+0x4>

080022ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler+0x4>

080022fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <UsageFault_Handler+0x4>

08002306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800231a:	f003 fdcf 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20001c10 	.word	0x20001c10

08002328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM3_IRQHandler+0x10>)
 800232e:	f003 fdc5 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20001d04 	.word	0x20001d04

0800233c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM4_IRQHandler+0x10>)
 8002342:	f003 fdbb 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20001d4c 	.word	0x20001d4c

08002350 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002356:	f003 fdb1 	bl	8005ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20001d94 	.word	0x20001d94

08002364 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA2_Stream0_IRQHandler+0x10>)
 800236a:	f001 fd87 	bl	8003e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000ac8 	.word	0x20000ac8

08002378 <_getpid>:
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
 800237c:	2301      	movs	r3, #1
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_kill>:
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	f00b f995 	bl	800d6c0 <__errno>
 8002396:	4603      	mov	r3, r0
 8002398:	2216      	movs	r2, #22
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_exit>:
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ffe7 	bl	8002388 <_kill>
 80023ba:	e7fe      	b.n	80023ba <_exit+0x12>

080023bc <_read>:
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_write>:
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e009      	b.n	800241c <_write+0x26>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f3af 8000 	nop.w
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf1      	blt.n	8002408 <_write+0x12>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_close>:
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_fstat>:
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	2300      	movs	r3, #0
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_isatty>:
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	2301      	movs	r3, #1
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_lseek>:
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	2300      	movs	r3, #0
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_sbrk>:
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <_sbrk+0x5c>)
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_sbrk+0x60>)
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
 80024c8:	f00b f8fa 	bl	800d6c0 <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20020000 	.word	0x20020000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	20001c58 	.word	0x20001c58
 8002500:	20005d50 	.word	0x20005d50

08002504 <SystemInit>:
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <SystemInit+0x20>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <SystemInit+0x20>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <get_NTC_Resistance>:
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	ed87 0b00 	vstr	d0, [r7]
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <get_NTC_Resistance+0xb0>)
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f827 	bl	8000588 <__aeabi_f2d>
 800253a:	a325      	add	r3, pc, #148	; (adr r3, 80025d0 <get_NTC_Resistance+0xa8>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fd fec2 	bl	80002c8 <__aeabi_dsub>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800254c:	f7fe fafa 	bl	8000b44 <__aeabi_dcmpge>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <get_NTC_Resistance+0x44>
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002562:	f7fe fae5 	bl	8000b30 <__aeabi_dcmple>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <get_NTC_Resistance+0x54>
 800256c:	491b      	ldr	r1, [pc, #108]	; (80025dc <get_NTC_Resistance+0xb4>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9c1 2300 	strd	r2, r3, [r1]
 800257a:	e025      	b.n	80025c8 <get_NTC_Resistance+0xa0>
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <get_NTC_Resistance+0xb0>)
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f802 	bl	8000588 <__aeabi_f2d>
 8002584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002588:	f7fe f980 	bl	800088c <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <get_NTC_Resistance+0xb8>)
 800259a:	f7fd fe95 	bl	80002c8 <__aeabi_dsub>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	461d      	mov	r5, r3
 80025a6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffca 	bl	8000544 <__aeabi_ui2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fe f83e 	bl	8000638 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4906      	ldr	r1, [pc, #24]	; (80025dc <get_NTC_Resistance+0xb4>)
 80025c2:	e9c1 2300 	strd	r2, r3, [r1]
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	3fb99999 	.word	0x3fb99999
 80025d8:	40533333 	.word	0x40533333
 80025dc:	20001cf0 	.word	0x20001cf0
 80025e0:	3ff00000 	.word	0x3ff00000
 80025e4:	00000000 	.word	0x00000000

080025e8 <getTemperature>:
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	ed87 0b00 	vstr	d0, [r7]
 80025f2:	ed97 0b00 	vldr	d0, [r7]
 80025f6:	f7ff ff97 	bl	8002528 <get_NTC_Resistance>
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <getTemperature+0x120>)
 80025fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <getTemperature+0x124>)
 8002606:	f7fe fa89 	bl	8000b1c <__aeabi_dcmplt>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <getTemperature+0x36>
 8002610:	493f      	ldr	r1, [pc, #252]	; (8002710 <getTemperature+0x128>)
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <getTemperature+0x12c>)
 8002618:	e9c1 2300 	strd	r2, r3, [r1]
 800261c:	e051      	b.n	80026c2 <getTemperature+0xda>
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <getTemperature+0x120>)
 8002620:	ed93 7b00 	vldr	d7, [r3]
 8002624:	eeb0 0a47 	vmov.f32	s0, s14
 8002628:	eef0 0a67 	vmov.f32	s1, s15
 800262c:	f00d f8f0 	bl	800f810 <log>
 8002630:	eeb0 7a40 	vmov.f32	s14, s0
 8002634:	eef0 7a60 	vmov.f32	s15, s1
 8002638:	4b37      	ldr	r3, [pc, #220]	; (8002718 <getTemperature+0x130>)
 800263a:	ed83 7b00 	vstr	d7, [r3]
 800263e:	a128      	add	r1, pc, #160	; (adr r1, 80026e0 <getTemperature+0xf8>)
 8002640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <getTemperature+0x130>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd fff5 	bl	8000638 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	a324      	add	r3, pc, #144	; (adr r3, 80026e8 <getTemperature+0x100>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fd fe36 	bl	80002cc <__adddf3>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <getTemperature+0x130>)
 800266a:	ed93 7b00 	vldr	d7, [r3]
 800266e:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80026f0 <getTemperature+0x108>
 8002672:	eeb0 0a47 	vmov.f32	s0, s14
 8002676:	eef0 0a67 	vmov.f32	s1, s15
 800267a:	f00d f907 	bl	800f88c <pow>
 800267e:	ec51 0b10 	vmov	r0, r1, d0
 8002682:	a31d      	add	r3, pc, #116	; (adr r3, 80026f8 <getTemperature+0x110>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ffd6 	bl	8000638 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd fe1a 	bl	80002cc <__adddf3>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	f04f 0000 	mov.w	r0, #0
 80026a0:	491a      	ldr	r1, [pc, #104]	; (800270c <getTemperature+0x124>)
 80026a2:	f7fe f8f3 	bl	800088c <__aeabi_ddiv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	a314      	add	r3, pc, #80	; (adr r3, 8002700 <getTemperature+0x118>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fd fe08 	bl	80002c8 <__aeabi_dsub>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4914      	ldr	r1, [pc, #80]	; (8002710 <getTemperature+0x128>)
 80026be:	e9c1 2300 	strd	r2, r3, [r1]
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <getTemperature+0x128>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	ec43 2b17 	vmov	d7, r2, r3
 80026cc:	eeb0 0a47 	vmov.f32	s0, s14
 80026d0:	eef0 0a67 	vmov.f32	s1, s15
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bdb0      	pop	{r4, r5, r7, pc}
 80026da:	bf00      	nop
 80026dc:	f3af 8000 	nop.w
 80026e0:	ac3ea183 	.word	0xac3ea183
 80026e4:	3f314eaa 	.word	0x3f314eaa
 80026e8:	f0bcee5a 	.word	0xf0bcee5a
 80026ec:	3f54f675 	.word	0x3f54f675
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40080000 	.word	0x40080000
 80026f8:	61e3fc4e 	.word	0x61e3fc4e
 80026fc:	3e825c55 	.word	0x3e825c55
 8002700:	66666666 	.word	0x66666666
 8002704:	40711266 	.word	0x40711266
 8002708:	20001cf0 	.word	0x20001cf0
 800270c:	3ff00000 	.word	0x3ff00000
 8002710:	20001ce8 	.word	0x20001ce8
 8002714:	bff00000 	.word	0xbff00000
 8002718:	20001ce0 	.word	0x20001ce0
 800271c:	00000000 	.word	0x00000000

08002720 <StartReadTempTask>:
 8002720:	b580      	push	{r7, lr}
 8002722:	b092      	sub	sp, #72	; 0x48
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <StartReadTempTask+0x140>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 808a 	bne.w	8002846 <StartReadTempTask+0x126>
 8002732:	2300      	movs	r3, #0
 8002734:	647b      	str	r3, [r7, #68]	; 0x44
 8002736:	e022      	b.n	800277e <StartReadTempTask+0x5e>
 8002738:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <StartReadTempTask+0x144>)
 800273a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feff 	bl	8000544 <__aeabi_ui2d>
 8002746:	a344      	add	r3, pc, #272	; (adr r3, 8002858 <StartReadTempTask+0x138>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd ff74 	bl	8000638 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b17 	vmov	d7, r2, r3
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	f7ff ff42 	bl	80025e8 <getTemperature>
 8002764:	eeb0 7a40 	vmov.f32	s14, s0
 8002768:	eef0 7a60 	vmov.f32	s15, s1
 800276c:	4a3e      	ldr	r2, [pc, #248]	; (8002868 <StartReadTempTask+0x148>)
 800276e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	ed83 7b00 	vstr	d7, [r3]
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	3301      	adds	r3, #1
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
 800277e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002780:	2b0f      	cmp	r3, #15
 8002782:	ddd9      	ble.n	8002738 <StartReadTempTask+0x18>
 8002784:	f7ff fb60 	bl	8001e48 <get_time>
 8002788:	6438      	str	r0, [r7, #64]	; 0x40
 800278a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800278c:	f7fd fd90 	bl	80002b0 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	b29a      	uxth	r2, r3
 8002794:	230a      	movs	r3, #10
 8002796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002798:	4834      	ldr	r0, [pc, #208]	; (800286c <StartReadTempTask+0x14c>)
 800279a:	f004 f9a8 	bl	8006aee <HAL_USART_Transmit>
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <StartReadTempTask+0x148>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f107 000c 	add.w	r0, r7, #12
 80027a8:	4931      	ldr	r1, [pc, #196]	; (8002870 <StartReadTempTask+0x150>)
 80027aa:	f00a fe6f 	bl	800d48c <siprintf>
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fd7c 	bl	80002b0 <strlen>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	f107 010c 	add.w	r1, r7, #12
 80027c0:	230a      	movs	r3, #10
 80027c2:	482a      	ldr	r0, [pc, #168]	; (800286c <StartReadTempTask+0x14c>)
 80027c4:	f004 f993 	bl	8006aee <HAL_USART_Transmit>
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <StartReadTempTask+0x148>)
 80027ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027ce:	f107 000c 	add.w	r0, r7, #12
 80027d2:	4928      	ldr	r1, [pc, #160]	; (8002874 <StartReadTempTask+0x154>)
 80027d4:	f00a fe5a 	bl	800d48c <siprintf>
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fd67 	bl	80002b0 <strlen>
 80027e2:	4603      	mov	r3, r0
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f107 010c 	add.w	r1, r7, #12
 80027ea:	230a      	movs	r3, #10
 80027ec:	481f      	ldr	r0, [pc, #124]	; (800286c <StartReadTempTask+0x14c>)
 80027ee:	f004 f97e 	bl	8006aee <HAL_USART_Transmit>
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <StartReadTempTask+0x148>)
 80027f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027f8:	f107 000c 	add.w	r0, r7, #12
 80027fc:	491d      	ldr	r1, [pc, #116]	; (8002874 <StartReadTempTask+0x154>)
 80027fe:	f00a fe45 	bl	800d48c <siprintf>
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fd52 	bl	80002b0 <strlen>
 800280c:	4603      	mov	r3, r0
 800280e:	b29a      	uxth	r2, r3
 8002810:	f107 010c 	add.w	r1, r7, #12
 8002814:	230a      	movs	r3, #10
 8002816:	4815      	ldr	r0, [pc, #84]	; (800286c <StartReadTempTask+0x14c>)
 8002818:	f004 f969 	bl	8006aee <HAL_USART_Transmit>
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <StartReadTempTask+0x148>)
 800281e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002822:	f107 000c 	add.w	r0, r7, #12
 8002826:	4914      	ldr	r1, [pc, #80]	; (8002878 <StartReadTempTask+0x158>)
 8002828:	f00a fe30 	bl	800d48c <siprintf>
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fd3d 	bl	80002b0 <strlen>
 8002836:	4603      	mov	r3, r0
 8002838:	b29a      	uxth	r2, r3
 800283a:	f107 010c 	add.w	r1, r7, #12
 800283e:	230a      	movs	r3, #10
 8002840:	480a      	ldr	r0, [pc, #40]	; (800286c <StartReadTempTask+0x14c>)
 8002842:	f004 f954 	bl	8006aee <HAL_USART_Transmit>
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <StartReadTempTask+0x140>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002850:	f007 fd4c 	bl	800a2ec <osDelay>
 8002854:	e768      	b.n	8002728 <StartReadTempTask+0x8>
 8002856:	bf00      	nop
 8002858:	e734d9b4 	.word	0xe734d9b4
 800285c:	3f4a680c 	.word	0x3f4a680c
 8002860:	20000a7c 	.word	0x20000a7c
 8002864:	20000a38 	.word	0x20000a38
 8002868:	20001c60 	.word	0x20001c60
 800286c:	20001ddc 	.word	0x20001ddc
 8002870:	08010c88 	.word	0x08010c88
 8002874:	08010c90 	.word	0x08010c90
 8002878:	08010c94 	.word	0x08010c94

0800287c <MX_TIM3_Init>:
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028aa:	4a33      	ldr	r2, [pc, #204]	; (8002978 <MX_TIM3_Init+0xfc>)
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	4829      	ldr	r0, [pc, #164]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028d0:	f003 f97c 	bl	8005bcc <HAL_TIM_IC_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM3_Init+0x62>
 80028da:	f7ff faa9 	bl	8001e30 <Error_Handler>
 80028de:	2304      	movs	r3, #4
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	2350      	movs	r3, #80	; 0x50
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f2:	f107 031c 	add.w	r3, r7, #28
 80028f6:	4619      	mov	r1, r3
 80028f8:	481e      	ldr	r0, [pc, #120]	; (8002974 <MX_TIM3_Init+0xf8>)
 80028fa:	f003 fc83 	bl	8006204 <HAL_TIM_SlaveConfigSynchro>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM3_Init+0x8c>
 8002904:	f7ff fa94 	bl	8001e30 <Error_Handler>
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	2200      	movs	r2, #0
 800291e:	4619      	mov	r1, r3
 8002920:	4814      	ldr	r0, [pc, #80]	; (8002974 <MX_TIM3_Init+0xf8>)
 8002922:	f003 fbd3 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM3_Init+0xb4>
 800292c:	f7ff fa80 	bl	8001e30 <Error_Handler>
 8002930:	2302      	movs	r3, #2
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	2302      	movs	r3, #2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	2204      	movs	r2, #4
 800293e:	4619      	mov	r1, r3
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <MX_TIM3_Init+0xf8>)
 8002942:	f003 fbc3 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM3_Init+0xd4>
 800294c:	f7ff fa70 	bl	8001e30 <Error_Handler>
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_TIM3_Init+0xf8>)
 800295e:	f003 fff5 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM3_Init+0xf0>
 8002968:	f7ff fa62 	bl	8001e30 <Error_Handler>
 800296c:	bf00      	nop
 800296e:	3730      	adds	r7, #48	; 0x30
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20001d04 	.word	0x20001d04
 8002978:	40000400 	.word	0x40000400

0800297c <MX_TIM4_Init>:
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <MX_TIM4_Init+0xfc>)
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
 80029ce:	4829      	ldr	r0, [pc, #164]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029d0:	f003 f8fc 	bl	8005bcc <HAL_TIM_IC_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM4_Init+0x62>
 80029da:	f7ff fa29 	bl	8001e30 <Error_Handler>
 80029de:	2304      	movs	r3, #4
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2350      	movs	r3, #80	; 0x50
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	4619      	mov	r1, r3
 80029f8:	481e      	ldr	r0, [pc, #120]	; (8002a74 <MX_TIM4_Init+0xf8>)
 80029fa:	f003 fc03 	bl	8006204 <HAL_TIM_SlaveConfigSynchro>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM4_Init+0x8c>
 8002a04:	f7ff fa14 	bl	8001e30 <Error_Handler>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <MX_TIM4_Init+0xf8>)
 8002a22:	f003 fb53 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM4_Init+0xb4>
 8002a2c:	f7ff fa00 	bl	8001e30 <Error_Handler>
 8002a30:	2302      	movs	r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	2302      	movs	r3, #2
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_TIM4_Init+0xf8>)
 8002a42:	f003 fb43 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM4_Init+0xd4>
 8002a4c:	f7ff f9f0 	bl	8001e30 <Error_Handler>
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_TIM4_Init+0xf8>)
 8002a5e:	f003 ff75 	bl	800694c <HAL_TIMEx_MasterConfigSynchronization>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM4_Init+0xf0>
 8002a68:	f7ff f9e2 	bl	8001e30 <Error_Handler>
 8002a6c:	bf00      	nop
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20001d4c 	.word	0x20001d4c
 8002a78:	40000800 	.word	0x40000800

08002a7c <MX_TIM12_Init>:
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <MX_TIM12_Init+0xd4>)
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	4b28      	ldr	r3, [pc, #160]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
 8002ac4:	4821      	ldr	r0, [pc, #132]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002ac6:	f003 f881 	bl	8005bcc <HAL_TIM_IC_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM12_Init+0x58>
 8002ad0:	f7ff f9ae 	bl	8001e30 <Error_Handler>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	2350      	movs	r3, #80	; 0x50
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002af0:	f003 fb88 	bl	8006204 <HAL_TIM_SlaveConfigSynchro>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM12_Init+0x82>
 8002afa:	f7ff f999 	bl	8001e30 <Error_Handler>
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	2301      	movs	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	4619      	mov	r1, r3
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002b16:	f003 fad9 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM12_Init+0xa8>
 8002b20:	f7ff f986 	bl	8001e30 <Error_Handler>
 8002b24:	2302      	movs	r3, #2
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	2302      	movs	r3, #2
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <MX_TIM12_Init+0xd0>)
 8002b34:	f003 faca 	bl	80060cc <HAL_TIM_IC_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM12_Init+0xc6>
 8002b3e:	f7ff f977 	bl	8001e30 <Error_Handler>
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20001d94 	.word	0x20001d94
 8002b50:	40001800 	.word	0x40001800

08002b54 <HAL_TIM_IC_MspInit>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_TIM_IC_MspInit+0x17c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d134      	bne.n	8002be0 <HAL_TIM_IC_MspInit+0x8c>
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a4e      	ldr	r2, [pc, #312]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4843      	ldr	r0, [pc, #268]	; (8002cd8 <HAL_TIM_IC_MspInit+0x184>)
 8002bca:	f001 fbc1 	bl	8004350 <HAL_GPIO_Init>
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2105      	movs	r1, #5
 8002bd2:	201d      	movs	r0, #29
 8002bd4:	f001 f822 	bl	8003c1c <HAL_NVIC_SetPriority>
 8002bd8:	201d      	movs	r0, #29
 8002bda:	f001 f83b 	bl	8003c54 <HAL_NVIC_EnableIRQ>
 8002bde:	e073      	b.n	8002cc8 <HAL_TIM_IC_MspInit+0x174>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <HAL_TIM_IC_MspInit+0x188>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d134      	bne.n	8002c54 <HAL_TIM_IC_MspInit+0x100>
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	4b32      	ldr	r3, [pc, #200]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a31      	ldr	r2, [pc, #196]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2340      	movs	r3, #64	; 0x40
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2e:	2300      	movs	r3, #0
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
 8002c32:	2302      	movs	r3, #2
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
 8002c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4828      	ldr	r0, [pc, #160]	; (8002ce0 <HAL_TIM_IC_MspInit+0x18c>)
 8002c3e:	f001 fb87 	bl	8004350 <HAL_GPIO_Init>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2105      	movs	r1, #5
 8002c46:	201e      	movs	r0, #30
 8002c48:	f000 ffe8 	bl	8003c1c <HAL_NVIC_SetPriority>
 8002c4c:	201e      	movs	r0, #30
 8002c4e:	f001 f801 	bl	8003c54 <HAL_NVIC_EnableIRQ>
 8002c52:	e039      	b.n	8002cc8 <HAL_TIM_IC_MspInit+0x174>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <HAL_TIM_IC_MspInit+0x190>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d134      	bne.n	8002cc8 <HAL_TIM_IC_MspInit+0x174>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_TIM_IC_MspInit+0x180>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca8:	2309      	movs	r3, #9
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <HAL_TIM_IC_MspInit+0x18c>)
 8002cb4:	f001 fb4c 	bl	8004350 <HAL_GPIO_Init>
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2105      	movs	r1, #5
 8002cbc:	202b      	movs	r0, #43	; 0x2b
 8002cbe:	f000 ffad 	bl	8003c1c <HAL_NVIC_SetPriority>
 8002cc2:	202b      	movs	r0, #43	; 0x2b
 8002cc4:	f000 ffc6 	bl	8003c54 <HAL_NVIC_EnableIRQ>
 8002cc8:	bf00      	nop
 8002cca:	3738      	adds	r7, #56	; 0x38
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40001800 	.word	0x40001800

08002ce8 <HAL_TIM_IC_CaptureCallback>:
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10c      	bne.n	8002d14 <HAL_TIM_IC_CaptureCallback+0x2c>
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f003 fac3 	bl	8006288 <HAL_TIM_ReadCapturedValue>
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_TIM_IC_CaptureCallback+0x2c>
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_TIM_IC_CaptureCallback+0x84>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10c      	bne.n	8002d38 <HAL_TIM_IC_CaptureCallback+0x50>
 8002d1e:	2100      	movs	r1, #0
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f003 fab1 	bl	8006288 <HAL_TIM_ReadCapturedValue>
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIM_IC_CaptureCallback+0x50>
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d10c      	bne.n	8002d5c <HAL_TIM_IC_CaptureCallback+0x74>
 8002d42:	2100      	movs	r1, #0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f003 fa9f 	bl	8006288 <HAL_TIM_ReadCapturedValue>
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_TIM_IC_CaptureCallback+0x74>
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40000400 	.word	0x40000400
 8002d68:	20001cfc 	.word	0x20001cfc
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	20001d00 	.word	0x20001d00
 8002d74:	40001800 	.word	0x40001800
 8002d78:	20001cf8 	.word	0x20001cf8

08002d7c <MX_USART1_Init>:
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <MX_USART1_Init+0x50>)
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <MX_USART1_Init+0x54>)
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_USART1_Init+0x50>)
 8002d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_USART1_Init+0x50>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <MX_USART1_Init+0x50>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_USART1_Init+0x50>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <MX_USART1_Init+0x50>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_USART1_Init+0x50>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <MX_USART1_Init+0x50>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_USART1_Init+0x50>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_USART1_Init+0x50>)
 8002dba:	f003 fe57 	bl	8006a6c <HAL_USART_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART1_Init+0x4c>
 8002dc4:	f7ff f834 	bl	8001e30 <Error_Handler>
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20001ddc 	.word	0x20001ddc
 8002dd0:	40011000 	.word	0x40011000

08002dd4 <HAL_USART_MspInit>:
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_USART_MspInit+0x84>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12c      	bne.n	8002e50 <HAL_USART_MspInit+0x7c>
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_USART_MspInit+0x88>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	2307      	movs	r3, #7
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <HAL_USART_MspInit+0x8c>)
 8002e4c:	f001 fa80 	bl	8004350 <HAL_GPIO_Init>
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40011000 	.word	0x40011000
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	00000000 	.word	0x00000000

08002e68 <calculateWheelSpeed>:
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fd fb77 	bl	8000564 <__aeabi_i2d>
 8002e76:	a315      	add	r3, pc, #84	; (adr r3, 8002ecc <calculateWheelSpeed+0x64>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fbdc 	bl	8000638 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	a312      	add	r3, pc, #72	; (adr r3, 8002ed4 <calculateWheelSpeed+0x6c>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fbd3 	bl	8000638 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <calculateWheelSpeed+0x60>)
 8002ea0:	f7fd fcf4 	bl	800088c <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb0:	ec43 2b17 	vmov	d7, r2, r3
 8002eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb8:	eef0 0a67 	vmov.f32	s1, s15
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	40240000 	.word	0x40240000
 8002ecc:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ed0:	3f60624d 	.word	0x3f60624d
 8002ed4:	f01b866e 	.word	0xf01b866e
 8002ed8:	400921f9 	.word	0x400921f9

08002edc <StartGetWheelSpeedTask>:
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee8:	f007 fa00 	bl	800a2ec <osDelay>
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <StartGetWheelSpeedTask+0x4c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ffb9 	bl	8002e68 <calculateWheelSpeed>
 8002ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8002efa:	eef0 7a60 	vmov.f32	s15, s1
 8002efe:	ed87 7b04 	vstr	d7, [r7, #16]
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <StartGetWheelSpeedTask+0x50>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffae 	bl	8002e68 <calculateWheelSpeed>
 8002f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f10:	eef0 7a60 	vmov.f32	s15, s1
 8002f14:	ed87 7b02 	vstr	d7, [r7, #8]
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <StartGetWheelSpeedTask+0x4c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <StartGetWheelSpeedTask+0x50>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e7de      	b.n	8002ee4 <StartGetWheelSpeedTask+0x8>
 8002f26:	bf00      	nop
 8002f28:	20001cfc 	.word	0x20001cfc
 8002f2c:	20001d00 	.word	0x20001d00

08002f30 <Reset_Handler>:
 8002f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f68 <LoopFillZerobss+0x12>
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <LoopFillZerobss+0x16>)
 8002f36:	490e      	ldr	r1, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1a>)
 8002f38:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <LoopFillZerobss+0x1e>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:
 8002f3e:	58d4      	ldr	r4, [r2, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:
 8002f44:	18c4      	adds	r4, r0, r3
 8002f46:	428c      	cmp	r4, r1
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
 8002f4a:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <LoopFillZerobss+0x22>)
 8002f4c:	4c0b      	ldr	r4, [pc, #44]	; (8002f7c <LoopFillZerobss+0x26>)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:
 8002f56:	42a2      	cmp	r2, r4
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>
 8002f5a:	f7ff fad3 	bl	8002504 <SystemInit>
 8002f5e:	f00a fbb5 	bl	800d6cc <__libc_init_array>
 8002f62:	f7fe feb3 	bl	8001ccc <main>
 8002f66:	4770      	bx	lr
 8002f68:	20020000 	.word	0x20020000
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000208 	.word	0x20000208
 8002f74:	08011148 	.word	0x08011148
 8002f78:	20000208 	.word	0x20000208
 8002f7c:	20005d4c 	.word	0x20005d4c

08002f80 <ADC_IRQHandler>:
 8002f80:	e7fe      	b.n	8002f80 <ADC_IRQHandler>
	...

08002f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <HAL_Init+0x40>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_Init+0x40>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_Init+0x40>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 fe2a 	bl	8003c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f7ff f926 	bl	8002204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7ff f8f8 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00

08002fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_IncTick+0x20>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <HAL_IncTick+0x24>)
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	20001e20 	.word	0x20001e20

08002ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <HAL_GetTick+0x14>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20001e20 	.word	0x20001e20

08003008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e033      	b.n	8003086 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fb40 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	f043 0202 	orr.w	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fa6e 	bl	800353c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
 8003076:	e001      	b.n	800307c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Start_DMA+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0e9      	b.n	8003282 <HAL_ADC_Start_DMA+0x1f2>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d018      	beq.n	80030f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d4:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_ADC_Start_DMA+0x1fc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a6d      	ldr	r2, [pc, #436]	; (8003290 <HAL_ADC_Start_DMA+0x200>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9a      	lsrs	r2, r3, #18
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030e8:	e002      	b.n	80030f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f9      	bne.n	80030ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003104:	d107      	bne.n	8003116 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003114:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 80a1 	bne.w	8003268 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003164:	d106      	bne.n	8003174 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f023 0206 	bic.w	r2, r3, #6
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
 8003172:	e002      	b.n	800317a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003182:	4b44      	ldr	r3, [pc, #272]	; (8003294 <HAL_ADC_Start_DMA+0x204>)
 8003184:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4a43      	ldr	r2, [pc, #268]	; (8003298 <HAL_ADC_Start_DMA+0x208>)
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4a42      	ldr	r2, [pc, #264]	; (800329c <HAL_ADC_Start_DMA+0x20c>)
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <HAL_ADC_Start_DMA+0x210>)
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	334c      	adds	r3, #76	; 0x4c
 80031d2:	4619      	mov	r1, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f000 fdf8 	bl	8003dcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d12a      	bne.n	800323e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_ADC_Start_DMA+0x214>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d015      	beq.n	800321e <HAL_ADC_Start_DMA+0x18e>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <HAL_ADC_Start_DMA+0x218>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_Start_DMA+0x178>
 80031fc:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_ADC_Start_DMA+0x204>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_ADC_Start_DMA+0x21c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d136      	bne.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_ADC_Start_DMA+0x204>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d130      	bne.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d129      	bne.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	e020      	b.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_ADC_Start_DMA+0x214>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d11b      	bne.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d114      	bne.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	e00b      	b.n	8003280 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000004 	.word	0x20000004
 8003290:	431bde83 	.word	0x431bde83
 8003294:	40012300 	.word	0x40012300
 8003298:	08003735 	.word	0x08003735
 800329c:	080037ef 	.word	0x080037ef
 80032a0:	0800380b 	.word	0x0800380b
 80032a4:	40012000 	.word	0x40012000
 80032a8:	40012100 	.word	0x40012100
 80032ac:	40012200 	.word	0x40012200

080032b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x1c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e113      	b.n	800351c <HAL_ADC_ConfigChannel+0x244>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b09      	cmp	r3, #9
 8003302:	d925      	bls.n	8003350 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	3b1e      	subs	r3, #30
 800331a:	2207      	movs	r2, #7
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43da      	mvns	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	400a      	ands	r2, r1
 8003328:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	4603      	mov	r3, r0
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4403      	add	r3, r0
 8003342:	3b1e      	subs	r3, #30
 8003344:	409a      	lsls	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	e022      	b.n	8003396 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	2207      	movs	r2, #7
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6919      	ldr	r1, [r3, #16]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	4603      	mov	r3, r0
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4403      	add	r3, r0
 800338c:	409a      	lsls	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d824      	bhi.n	80033e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	3b05      	subs	r3, #5
 80033b0:	221f      	movs	r2, #31
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	400a      	ands	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	3b05      	subs	r3, #5
 80033da:	fa00 f203 	lsl.w	r2, r0, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34
 80033e6:	e04c      	b.n	8003482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d824      	bhi.n	800343a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	3b23      	subs	r3, #35	; 0x23
 8003402:	221f      	movs	r2, #31
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43da      	mvns	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	400a      	ands	r2, r1
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	4618      	mov	r0, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	3b23      	subs	r3, #35	; 0x23
 800342c:	fa00 f203 	lsl.w	r2, r0, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
 8003438:	e023      	b.n	8003482 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3b41      	subs	r3, #65	; 0x41
 800344c:	221f      	movs	r2, #31
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	400a      	ands	r2, r1
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	3b41      	subs	r3, #65	; 0x41
 8003476:	fa00 f203 	lsl.w	r2, r0, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003482:	4b29      	ldr	r3, [pc, #164]	; (8003528 <HAL_ADC_ConfigChannel+0x250>)
 8003484:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a28      	ldr	r2, [pc, #160]	; (800352c <HAL_ADC_ConfigChannel+0x254>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d10f      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b12      	cmp	r3, #18
 8003496:	d10b      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_ADC_ConfigChannel+0x254>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d12b      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x23a>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_ADC_ConfigChannel+0x258>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d003      	beq.n	80034cc <HAL_ADC_ConfigChannel+0x1f4>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b11      	cmp	r3, #17
 80034ca:	d122      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a11      	ldr	r2, [pc, #68]	; (8003530 <HAL_ADC_ConfigChannel+0x258>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d111      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_ADC_ConfigChannel+0x25c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_ADC_ConfigChannel+0x260>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	0c9a      	lsrs	r2, r3, #18
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003504:	e002      	b.n	800350c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3b01      	subs	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f9      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012300 	.word	0x40012300
 800352c:	40012000 	.word	0x40012000
 8003530:	10000012 	.word	0x10000012
 8003534:	20000004 	.word	0x20000004
 8003538:	431bde83 	.word	0x431bde83

0800353c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003544:	4b79      	ldr	r3, [pc, #484]	; (800372c <ADC_Init+0x1f0>)
 8003546:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	021a      	lsls	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	4a58      	ldr	r2, [pc, #352]	; (8003730 <ADC_Init+0x1f4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e00f      	b.n	800363a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003638:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0202 	bic.w	r2, r2, #2
 8003648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7e1b      	ldrb	r3, [r3, #24]
 8003654:	005a      	lsls	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01b      	beq.n	80036a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003676:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	3b01      	subs	r3, #1
 8003694:	035a      	lsls	r2, r3, #13
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	e007      	b.n	80036b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	051a      	lsls	r2, r3, #20
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6899      	ldr	r1, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036f2:	025a      	lsls	r2, r3, #9
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	029a      	lsls	r2, r3, #10
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40012300 	.word	0x40012300
 8003730:	0f000001 	.word	0x0f000001

08003734 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800374a:	2b00      	cmp	r3, #0
 800374c:	d13c      	bne.n	80037c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d12b      	bne.n	80037c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800376c:	2b00      	cmp	r3, #0
 800376e:	d127      	bne.n	80037c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003788:	2b00      	cmp	r3, #0
 800378a:	d119      	bne.n	80037c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0220 	bic.w	r2, r2, #32
 800379a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7fe f823 	bl	800180c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037c6:	e00e      	b.n	80037e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff fd75 	bl	80032c4 <HAL_ADC_ErrorCallback>
}
 80037da:	e004      	b.n	80037e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fd57 	bl	80032b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fd4a 	bl	80032c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d003      	beq.n	800385c <HAL_CAN_GetRxMessage+0x24>
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b02      	cmp	r3, #2
 8003858:	f040 80f3 	bne.w	8003a42 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0e7      	b.n	8003a50 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0d8      	b.n	8003a50 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	331b      	adds	r3, #27
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0204 	and.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	331b      	adds	r3, #27
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	4413      	add	r3, r2
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0d5b      	lsrs	r3, r3, #21
 80038cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e00b      	b.n	80038ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	331b      	adds	r3, #27
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	4413      	add	r3, r2
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	331b      	adds	r3, #27
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0202 	and.w	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	331b      	adds	r3, #27
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	331b      	adds	r3, #27
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	331b      	adds	r3, #27
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	4413      	add	r3, r2
 8003956:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4413      	add	r3, r2
 800396c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	0a1a      	lsrs	r2, r3, #8
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	4413      	add	r3, r2
 8003986:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0c1a      	lsrs	r2, r3, #16
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3302      	adds	r3, #2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	4413      	add	r3, r2
 80039a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e1a      	lsrs	r2, r3, #24
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	3303      	adds	r3, #3
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0a1a      	lsrs	r2, r3, #8
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3305      	adds	r3, #5
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0c1a      	lsrs	r2, r3, #16
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	3306      	adds	r3, #6
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e1a      	lsrs	r2, r3, #24
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	3307      	adds	r3, #7
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	e007      	b.n	8003a3e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e006      	b.n	8003a50 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a72:	7afb      	ldrb	r3, [r7, #11]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d002      	beq.n	8003a7e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d10f      	bne.n	8003a9e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e005      	b.n	8003a9e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <__NVIC_SetPriorityGrouping+0x44>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	60d3      	str	r3, [r2, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <__NVIC_GetPriorityGrouping+0x18>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	f003 0307 	and.w	r3, r3, #7
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db0b      	blt.n	8003b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4907      	ldr	r1, [pc, #28]	; (8003b48 <__NVIC_EnableIRQ+0x38>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000e100 	.word	0xe000e100

08003b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db0a      	blt.n	8003b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	490c      	ldr	r1, [pc, #48]	; (8003b98 <__NVIC_SetPriority+0x4c>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b74:	e00a      	b.n	8003b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4908      	ldr	r1, [pc, #32]	; (8003b9c <__NVIC_SetPriority+0x50>)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	3b04      	subs	r3, #4
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	440b      	add	r3, r1
 8003b8a:	761a      	strb	r2, [r3, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	bf28      	it	cs
 8003bbe:	2304      	movcs	r3, #4
 8003bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d902      	bls.n	8003bd0 <NVIC_EncodePriority+0x30>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3b03      	subs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <NVIC_EncodePriority+0x32>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	401a      	ands	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	43d9      	mvns	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	4313      	orrs	r3, r2
         );
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3724      	adds	r7, #36	; 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ff4c 	bl	8003aac <__NVIC_SetPriorityGrouping>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2e:	f7ff ff61 	bl	8003af4 <__NVIC_GetPriorityGrouping>
 8003c32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6978      	ldr	r0, [r7, #20]
 8003c3a:	f7ff ffb1 	bl	8003ba0 <NVIC_EncodePriority>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ff80 	bl	8003b4c <__NVIC_SetPriority>
}
 8003c4c:	bf00      	nop
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff54 	bl	8003b10 <__NVIC_EnableIRQ>
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7ff f9b8 	bl	8002ff0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e099      	b.n	8003dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cac:	e00f      	b.n	8003cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cae:	f7ff f99f 	bl	8002ff0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d908      	bls.n	8003cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e078      	b.n	8003dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e8      	bne.n	8003cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_DMA_Init+0x158>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d107      	bne.n	8003d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4313      	orrs	r3, r2
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0307 	bic.w	r3, r3, #7
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d117      	bne.n	8003d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fa6f 	bl	8004258 <DMA_CheckFifoParam>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e016      	b.n	8003dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa26 	bl	80041ec <DMA_CalcBaseAndBitshift>
 8003da0:	4603      	mov	r3, r0
 8003da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	223f      	movs	r2, #63	; 0x3f
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	f010803f 	.word	0xf010803f

08003dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Start_IT+0x26>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e040      	b.n	8003e74 <HAL_DMA_Start_IT+0xa8>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d12f      	bne.n	8003e66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9b8 	bl	8004190 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0216 	orr.w	r2, r2, #22
 8003e3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0208 	orr.w	r2, r2, #8
 8003e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e005      	b.n	8003e72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e88:	4b8e      	ldr	r3, [pc, #568]	; (80040c4 <HAL_DMA_IRQHandler+0x248>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a8e      	ldr	r2, [pc, #568]	; (80040c8 <HAL_DMA_IRQHandler+0x24c>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0a9b      	lsrs	r3, r3, #10
 8003e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2204      	movs	r2, #4
 8003f24:	409a      	lsls	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	2204      	movs	r2, #4
 8003f42:	409a      	lsls	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2210      	movs	r2, #16
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d043      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d03c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f76:	2210      	movs	r2, #16
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d018      	beq.n	8003fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d024      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
 8003faa:	e01f      	b.n	8003fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
 8003fbc:	e016      	b.n	8003fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0208 	bic.w	r2, r2, #8
 8003fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 808f 	beq.w	800411c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8087 	beq.w	800411c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	2220      	movs	r2, #32
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b05      	cmp	r3, #5
 8004024:	d136      	bne.n	8004094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0216 	bic.w	r2, r2, #22
 8004034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_DMA_IRQHandler+0x1da>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0208 	bic.w	r2, r2, #8
 8004064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	223f      	movs	r2, #63	; 0x3f
 800406c:	409a      	lsls	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
        }
        return;
 8004092:	e079      	b.n	8004188 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01d      	beq.n	80040de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d031      	beq.n	800411c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
 80040c0:	e02c      	b.n	800411c <HAL_DMA_IRQHandler+0x2a0>
 80040c2:	bf00      	nop
 80040c4:	20000004 	.word	0x20000004
 80040c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d023      	beq.n	800411c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
 80040dc:	e01e      	b.n	800411c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10f      	bne.n	800410c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0210 	bic.w	r2, r2, #16
 80040fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	2b00      	cmp	r3, #0
 8004122:	d032      	beq.n	800418a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2205      	movs	r2, #5
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3301      	adds	r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	429a      	cmp	r2, r3
 8004152:	d307      	bcc.n	8004164 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f2      	bne.n	8004148 <HAL_DMA_IRQHandler+0x2cc>
 8004162:	e000      	b.n	8004166 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004164:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e000      	b.n	800418a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004188:	bf00      	nop
    }
  }
}
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d108      	bne.n	80041d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ce:	e007      	b.n	80041e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3b10      	subs	r3, #16
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <DMA_CalcBaseAndBitshift+0x64>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004206:	4a13      	ldr	r2, [pc, #76]	; (8004254 <DMA_CalcBaseAndBitshift+0x68>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d909      	bls.n	800422e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	659a      	str	r2, [r3, #88]	; 0x58
 800422c:	e007      	b.n	800423e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	aaaaaaab 	.word	0xaaaaaaab
 8004254:	08010d0c 	.word	0x08010d0c

08004258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11f      	bne.n	80042b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d856      	bhi.n	8004326 <DMA_CheckFifoParam+0xce>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <DMA_CheckFifoParam+0x28>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	080042a3 	.word	0x080042a3
 8004288:	08004291 	.word	0x08004291
 800428c:	08004327 	.word	0x08004327
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d046      	beq.n	800432a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e043      	b.n	800432a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042aa:	d140      	bne.n	800432e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b0:	e03d      	b.n	800432e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d121      	bne.n	8004300 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d837      	bhi.n	8004332 <DMA_CheckFifoParam+0xda>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <DMA_CheckFifoParam+0x70>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042df 	.word	0x080042df
 80042d0:	080042d9 	.word	0x080042d9
 80042d4:	080042f1 	.word	0x080042f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e030      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d025      	beq.n	8004336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ee:	e022      	b.n	8004336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042f8:	d11f      	bne.n	800433a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042fe:	e01c      	b.n	800433a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d903      	bls.n	800430e <DMA_CheckFifoParam+0xb6>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b03      	cmp	r3, #3
 800430a:	d003      	beq.n	8004314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800430c:	e018      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      break;
 8004312:	e015      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      break;
 8004324:	e00b      	b.n	800433e <DMA_CheckFifoParam+0xe6>
      break;
 8004326:	bf00      	nop
 8004328:	e00a      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;
 800432a:	bf00      	nop
 800432c:	e008      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;
 800432e:	bf00      	nop
 8004330:	e006      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;
 8004332:	bf00      	nop
 8004334:	e004      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;   
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <DMA_CheckFifoParam+0xe8>
      break;
 800433e:	bf00      	nop
    }
  } 
  
  return status; 
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e165      	b.n	8004638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800436c:	2201      	movs	r2, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	f040 8154 	bne.w	8004632 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d005      	beq.n	80043a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d130      	bne.n	8004404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	2203      	movs	r2, #3
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4013      	ands	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d8:	2201      	movs	r2, #1
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 0201 	and.w	r2, r3, #1
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b03      	cmp	r3, #3
 800440e:	d017      	beq.n	8004440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d123      	bne.n	8004494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	220f      	movs	r2, #15
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4013      	ands	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4313      	orrs	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80ae 	beq.w	8004632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <HAL_GPIO_Init+0x300>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <HAL_GPIO_Init+0x300>)
 80044e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e4:	6453      	str	r3, [r2, #68]	; 0x44
 80044e6:	4b5a      	ldr	r3, [pc, #360]	; (8004650 <HAL_GPIO_Init+0x300>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044f2:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_GPIO_Init+0x304>)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	220f      	movs	r2, #15
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4f      	ldr	r2, [pc, #316]	; (8004658 <HAL_GPIO_Init+0x308>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d025      	beq.n	800456a <HAL_GPIO_Init+0x21a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4e      	ldr	r2, [pc, #312]	; (800465c <HAL_GPIO_Init+0x30c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01f      	beq.n	8004566 <HAL_GPIO_Init+0x216>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4d      	ldr	r2, [pc, #308]	; (8004660 <HAL_GPIO_Init+0x310>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d019      	beq.n	8004562 <HAL_GPIO_Init+0x212>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4c      	ldr	r2, [pc, #304]	; (8004664 <HAL_GPIO_Init+0x314>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_GPIO_Init+0x20e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4b      	ldr	r2, [pc, #300]	; (8004668 <HAL_GPIO_Init+0x318>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00d      	beq.n	800455a <HAL_GPIO_Init+0x20a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <HAL_GPIO_Init+0x31c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <HAL_GPIO_Init+0x206>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a49      	ldr	r2, [pc, #292]	; (8004670 <HAL_GPIO_Init+0x320>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_GPIO_Init+0x202>
 800454e:	2306      	movs	r3, #6
 8004550:	e00c      	b.n	800456c <HAL_GPIO_Init+0x21c>
 8004552:	2307      	movs	r3, #7
 8004554:	e00a      	b.n	800456c <HAL_GPIO_Init+0x21c>
 8004556:	2305      	movs	r3, #5
 8004558:	e008      	b.n	800456c <HAL_GPIO_Init+0x21c>
 800455a:	2304      	movs	r3, #4
 800455c:	e006      	b.n	800456c <HAL_GPIO_Init+0x21c>
 800455e:	2303      	movs	r3, #3
 8004560:	e004      	b.n	800456c <HAL_GPIO_Init+0x21c>
 8004562:	2302      	movs	r3, #2
 8004564:	e002      	b.n	800456c <HAL_GPIO_Init+0x21c>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_GPIO_Init+0x21c>
 800456a:	2300      	movs	r3, #0
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	f002 0203 	and.w	r2, r2, #3
 8004572:	0092      	lsls	r2, r2, #2
 8004574:	4093      	lsls	r3, r2
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800457c:	4935      	ldr	r1, [pc, #212]	; (8004654 <HAL_GPIO_Init+0x304>)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800458a:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <HAL_GPIO_Init+0x324>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ae:	4a31      	ldr	r2, [pc, #196]	; (8004674 <HAL_GPIO_Init+0x324>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_GPIO_Init+0x324>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <HAL_GPIO_Init+0x324>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045de:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_GPIO_Init+0x324>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_GPIO_Init+0x324>)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_GPIO_Init+0x324>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	43db      	mvns	r3, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4013      	ands	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800462c:	4a11      	ldr	r2, [pc, #68]	; (8004674 <HAL_GPIO_Init+0x324>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	f67f ae96 	bls.w	800436c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40013800 	.word	0x40013800
 8004658:	40020000 	.word	0x40020000
 800465c:	40020400 	.word	0x40020400
 8004660:	40020800 	.word	0x40020800
 8004664:	40020c00 	.word	0x40020c00
 8004668:	40021000 	.word	0x40021000
 800466c:	40021400 	.word	0x40021400
 8004670:	40021800 	.word	0x40021800
 8004674:	40013c00 	.word	0x40013c00

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004694:	e003      	b.n	800469e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	041a      	lsls	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0cc      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b68      	ldr	r3, [pc, #416]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d90c      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b65      	ldr	r3, [pc, #404]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b8      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004700:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004718:	4b53      	ldr	r3, [pc, #332]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a52      	ldr	r2, [pc, #328]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	494d      	ldr	r1, [pc, #308]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d044      	beq.n	80047cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d119      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e07f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d003      	beq.n	800476a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	2b03      	cmp	r3, #3
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e06f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e067      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4934      	ldr	r1, [pc, #208]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fe fc28 	bl	8002ff0 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fe fc24 	bl	8002ff0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e04f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d20c      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e032      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4916      	ldr	r1, [pc, #88]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f887 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fcd6 	bl	8002204 <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40023c00 	.word	0x40023c00
 8004868:	40023800 	.word	0x40023800
 800486c:	08010ce8 	.word	0x08010ce8
 8004870:	20000004 	.word	0x20000004
 8004874:	20000008 	.word	0x20000008

08004878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000004 	.word	0x20000004

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	08010cf8 	.word	0x08010cf8

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048bc:	f7ff ffdc 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0b5b      	lsrs	r3, r3, #13
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	08010cf8 	.word	0x08010cf8

080048e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	220f      	movs	r2, #15
 80048ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <HAL_RCC_GetClockConfig+0x5c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0203 	and.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_RCC_GetClockConfig+0x5c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004908:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	08db      	lsrs	r3, r3, #3
 800491a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_RCC_GetClockConfig+0x60>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	601a      	str	r2, [r3, #0]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	40023c00 	.word	0x40023c00

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b0a6      	sub	sp, #152	; 0x98
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4bc8      	ldr	r3, [pc, #800]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b0c      	cmp	r3, #12
 8004974:	f200 817e 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x330>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_RCC_GetSysClockFreq+0x3c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004c75 	.word	0x08004c75
 8004988:	08004c75 	.word	0x08004c75
 800498c:	08004c75 	.word	0x08004c75
 8004990:	080049bd 	.word	0x080049bd
 8004994:	08004c75 	.word	0x08004c75
 8004998:	08004c75 	.word	0x08004c75
 800499c:	08004c75 	.word	0x08004c75
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	08004c75 	.word	0x08004c75
 80049a8:	08004c75 	.word	0x08004c75
 80049ac:	08004c75 	.word	0x08004c75
 80049b0:	08004b2f 	.word	0x08004b2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4bb6      	ldr	r3, [pc, #728]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80049ba:	e15f      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049bc:	4bb5      	ldr	r3, [pc, #724]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80049be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049c2:	e15b      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c4:	4bb1      	ldr	r3, [pc, #708]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d0:	4bae      	ldr	r3, [pc, #696]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d031      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049dc:	4bab      	ldr	r3, [pc, #684]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	2200      	movs	r2, #0
 80049e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ee:	663b      	str	r3, [r7, #96]	; 0x60
 80049f0:	2300      	movs	r3, #0
 80049f2:	667b      	str	r3, [r7, #100]	; 0x64
 80049f4:	4ba7      	ldr	r3, [pc, #668]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 80049f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049fa:	462a      	mov	r2, r5
 80049fc:	fb03 f202 	mul.w	r2, r3, r2
 8004a00:	2300      	movs	r3, #0
 8004a02:	4621      	mov	r1, r4
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	4aa2      	ldr	r2, [pc, #648]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	fba1 1202 	umull	r1, r2, r1, r2
 8004a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a14:	460a      	mov	r2, r1
 8004a16:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a1a:	4413      	add	r3, r2
 8004a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a22:	2200      	movs	r2, #0
 8004a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004a30:	f7fc f92a 	bl	8000c88 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a3e:	e064      	b.n	8004b0a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	2200      	movs	r2, #0
 8004a48:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4a:	657a      	str	r2, [r7, #84]	; 0x54
 8004a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	2300      	movs	r3, #0
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a58:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	462b      	mov	r3, r5
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4621      	mov	r1, r4
 8004a76:	1a51      	subs	r1, r2, r1
 8004a78:	6139      	str	r1, [r7, #16]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a8e:	4659      	mov	r1, fp
 8004a90:	018b      	lsls	r3, r1, #6
 8004a92:	4651      	mov	r1, sl
 8004a94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a98:	4651      	mov	r1, sl
 8004a9a:	018a      	lsls	r2, r1, #6
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ebb2 0801 	subs.w	r8, r2, r1
 8004aa2:	4659      	mov	r1, fp
 8004aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004abc:	4690      	mov	r8, r2
 8004abe:	4699      	mov	r9, r3
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	eb18 0303 	adds.w	r3, r8, r3
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	462b      	mov	r3, r5
 8004aca:	eb49 0303 	adc.w	r3, r9, r3
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004adc:	4629      	mov	r1, r5
 8004ade:	028b      	lsls	r3, r1, #10
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	028a      	lsls	r2, r1, #10
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	2200      	movs	r2, #0
 8004af4:	643b      	str	r3, [r7, #64]	; 0x40
 8004af6:	647a      	str	r2, [r7, #68]	; 0x44
 8004af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004afc:	f7fc f8c4 	bl	8000c88 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b0a:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b2c:	e0a6      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b2e:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b3a:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02a      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	099b      	lsrs	r3, r3, #6
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b5c:	fb03 f201 	mul.w	r2, r3, r1
 8004b60:	2300      	movs	r3, #0
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	4a4a      	ldr	r2, [pc, #296]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b6e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b70:	460a      	mov	r2, r1
 8004b72:	673a      	str	r2, [r7, #112]	; 0x70
 8004b74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b76:	4413      	add	r3, r2
 8004b78:	677b      	str	r3, [r7, #116]	; 0x74
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30
 8004b82:	637a      	str	r2, [r7, #52]	; 0x34
 8004b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b88:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b8c:	f7fc f87c 	bl	8000c88 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4613      	mov	r3, r2
 8004b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b9a:	e05b      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bca:	0150      	lsls	r0, r2, #5
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	00eb      	lsls	r3, r5, #3
 8004c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c06:	00e2      	lsls	r2, r4, #3
 8004c08:	4614      	mov	r4, r2
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	18e3      	adds	r3, r4, r3
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	464b      	mov	r3, r9
 8004c14:	eb45 0303 	adc.w	r3, r5, r3
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c26:	4629      	mov	r1, r5
 8004c28:	028b      	lsls	r3, r1, #10
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c30:	4621      	mov	r1, r4
 8004c32:	028a      	lsls	r2, r1, #10
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c46:	f7fc f81f 	bl	8000c88 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4613      	mov	r3, r2
 8004c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0f1b      	lsrs	r3, r3, #28
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c72:	e003      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3798      	adds	r7, #152	; 0x98
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	017d7840 	.word	0x017d7840

08004c98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e28d      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8083 	beq.w	8004dbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cb8:	4b94      	ldr	r3, [pc, #592]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cc4:	4b91      	ldr	r3, [pc, #580]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d106      	bne.n	8004cde <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cd0:	4b8e      	ldr	r3, [pc, #568]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b8b      	ldr	r3, [pc, #556]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ce6:	2b0c      	cmp	r3, #12
 8004ce8:	d112      	bne.n	8004d10 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cea:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05b      	beq.n	8004dbc <HAL_RCC_OscConfig+0x124>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d157      	bne.n	8004dbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e25a      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x90>
 8004d1a:	4b7c      	ldr	r3, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a7b      	ldr	r2, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e01d      	b.n	8004d64 <HAL_RCC_OscConfig+0xcc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0xb4>
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	4b73      	ldr	r3, [pc, #460]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a72      	ldr	r2, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0xcc>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f940 	bl	8002ff0 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe f93c 	bl	8002ff0 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e21f      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0xdc>
 8004d92:	e014      	b.n	8004dbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe f92c 	bl	8002ff0 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fe f928 	bl	8002ff0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e20b      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x104>
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d06f      	beq.n	8004eaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dca:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d017      	beq.n	8004e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dd6:	4b4d      	ldr	r3, [pc, #308]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004de2:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dee:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004df6:	2b0c      	cmp	r3, #12
 8004df8:	d11c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfa:	4b44      	ldr	r3, [pc, #272]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d116      	bne.n	8004e34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e06:	4b41      	ldr	r3, [pc, #260]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_RCC_OscConfig+0x186>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e1d3      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4937      	ldr	r1, [pc, #220]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e32:	e03a      	b.n	8004eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d020      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e3c:	4b34      	ldr	r3, [pc, #208]	; (8004f10 <HAL_RCC_OscConfig+0x278>)
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fe f8d5 	bl	8002ff0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fe f8d1 	bl	8002ff0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e1b4      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4925      	ldr	r1, [pc, #148]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]
 8004e7c:	e015      	b.n	8004eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_RCC_OscConfig+0x278>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe f8b4 	bl	8002ff0 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8c:	f7fe f8b0 	bl	8002ff0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e193      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d036      	beq.n	8004f24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fe f894 	bl	8002ff0 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ecc:	f7fe f890 	bl	8002ff0 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e173      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x234>
 8004eea:	e01b      	b.n	8004f24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fe f87d 	bl	8002ff0 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	e00e      	b.n	8004f18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004efa:	f7fe f879 	bl	8002ff0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d907      	bls.n	8004f18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e15c      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	42470000 	.word	0x42470000
 8004f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	4b8a      	ldr	r3, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ea      	bne.n	8004efa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8097 	beq.w	8005060 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f36:	4b83      	ldr	r3, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	4a7e      	ldr	r2, [pc, #504]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	; 0x40
 8004f52:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f62:	4b79      	ldr	r3, [pc, #484]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d118      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a75      	ldr	r2, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7a:	f7fe f839 	bl	8002ff0 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fe f835 	bl	8002ff0 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e118      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x4b0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d106      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x31e>
 8004fa8:	4b66      	ldr	r3, [pc, #408]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a65      	ldr	r2, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	e01c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x358>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x340>
 8004fbe:	4b61      	ldr	r3, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a60      	ldr	r2, [pc, #384]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	f043 0304 	orr.w	r3, r3, #4
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a5d      	ldr	r2, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x358>
 8004fd8:	4b5a      	ldr	r3, [pc, #360]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a59      	ldr	r2, [pc, #356]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe4:	4b57      	ldr	r3, [pc, #348]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	4a56      	ldr	r2, [pc, #344]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	f023 0304 	bic.w	r3, r3, #4
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fd fffa 	bl	8002ff0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005000:	f7fd fff6 	bl	8002ff0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f241 3288 	movw	r2, #5000	; 0x1388
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0d7      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005016:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0ee      	beq.n	8005000 <HAL_RCC_OscConfig+0x368>
 8005022:	e014      	b.n	800504e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fd ffe4 	bl	8002ff0 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502a:	e00a      	b.n	8005042 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fd ffe0 	bl	8002ff0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0c1      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ee      	bne.n	800502c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005054:	4b3b      	ldr	r3, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800505a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80ad 	beq.w	80051c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800506a:	4b36      	ldr	r3, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b08      	cmp	r3, #8
 8005074:	d060      	beq.n	8005138 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d145      	bne.n	800510a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507e:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd ffb4 	bl	8002ff0 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508c:	f7fd ffb0 	bl	8002ff0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e093      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	071b      	lsls	r3, r3, #28
 80050d6:	491b      	ldr	r1, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fd ff85 	bl	8002ff0 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fd ff81 	bl	8002ff0 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e064      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x452>
 8005108:	e05c      	b.n	80051c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x4b4>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fd ff6e 	bl	8002ff0 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005118:	f7fd ff6a 	bl	8002ff0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e04d      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x480>
 8005136:	e045      	b.n	80051c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e040      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 8005144:	40023800 	.word	0x40023800
 8005148:	40007000 	.word	0x40007000
 800514c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005150:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <HAL_RCC_OscConfig+0x538>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d030      	beq.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d129      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d122      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005188:	4293      	cmp	r3, r2
 800518a:	d119      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	3b01      	subs	r3, #1
 800519a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d10f      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07b      	b.n	80052de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d108      	bne.n	8005200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f6:	d009      	beq.n	800520c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	61da      	str	r2, [r3, #28]
 80051fe:	e005      	b.n	800520c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc ff78 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	ea42 0103 	orr.w	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	f003 0104 	and.w	r1, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0210 	and.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b088      	sub	sp, #32
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_SPI_Transmit+0x22>
 8005304:	2302      	movs	r3, #2
 8005306:	e126      	b.n	8005556 <HAL_SPI_Transmit+0x270>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005310:	f7fd fe6e 	bl	8002ff0 <HAL_GetTick>
 8005314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d002      	beq.n	800532c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800532a:	e10b      	b.n	8005544 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Transmit+0x52>
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800533c:	e102      	b.n	8005544 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2203      	movs	r2, #3
 8005342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d10f      	bne.n	80053a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d14b      	bne.n	8005466 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_SPI_Transmit+0xf6>
 80053d6:	8afb      	ldrh	r3, [r7, #22]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d13e      	bne.n	800545a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	881a      	ldrh	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005400:	e02b      	b.n	800545a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b02      	cmp	r3, #2
 800540e:	d112      	bne.n	8005436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	881a      	ldrh	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	1c9a      	adds	r2, r3, #2
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	86da      	strh	r2, [r3, #54]	; 0x36
 8005434:	e011      	b.n	800545a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005436:	f7fd fddb 	bl	8002ff0 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d803      	bhi.n	800544e <HAL_SPI_Transmit+0x168>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800544c:	d102      	bne.n	8005454 <HAL_SPI_Transmit+0x16e>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005458:	e074      	b.n	8005544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ce      	bne.n	8005402 <HAL_SPI_Transmit+0x11c>
 8005464:	e04c      	b.n	8005500 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_SPI_Transmit+0x18e>
 800546e:	8afb      	ldrh	r3, [r7, #22]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d140      	bne.n	80054f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800549a:	e02c      	b.n	80054f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d113      	bne.n	80054d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80054d0:	e011      	b.n	80054f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d2:	f7fd fd8d 	bl	8002ff0 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d803      	bhi.n	80054ea <HAL_SPI_Transmit+0x204>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e8:	d102      	bne.n	80054f0 <HAL_SPI_Transmit+0x20a>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054f4:	e026      	b.n	8005544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1cd      	bne.n	800549c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fa55 	bl	80059b4 <SPI_EndRxTxTransaction>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e000      	b.n	8005544 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08c      	sub	sp, #48	; 0x30
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800556c:	2301      	movs	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x26>
 8005580:	2302      	movs	r3, #2
 8005582:	e18a      	b.n	800589a <HAL_SPI_TransmitReceive+0x33c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800558c:	f7fd fd30 	bl	8002ff0 <HAL_GetTick>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d00f      	beq.n	80055ce <HAL_SPI_TransmitReceive+0x70>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b4:	d107      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x68>
 80055be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d003      	beq.n	80055ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055cc:	e15b      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x82>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x82>
 80055da:	887b      	ldrh	r3, [r7, #2]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055e6:	e14e      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d003      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2205      	movs	r2, #5
 80055f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	887a      	ldrh	r2, [r7, #2]
 800560c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	887a      	ldrh	r2, [r7, #2]
 8005612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d007      	beq.n	8005650 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005658:	d178      	bne.n	800574c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x10a>
 8005662:	8b7b      	ldrh	r3, [r7, #26]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d166      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568c:	e053      	b.n	8005736 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b02      	cmp	r3, #2
 800569a:	d11b      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x176>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d016      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x176>
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d113      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d119      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x1b8>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d014      	beq.n	8005716 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	b292      	uxth	r2, r2
 80056f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	1c9a      	adds	r2, r3, #2
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005712:	2301      	movs	r3, #1
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005716:	f7fd fc6b 	bl	8002ff0 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005722:	429a      	cmp	r2, r3
 8005724:	d807      	bhi.n	8005736 <HAL_SPI_TransmitReceive+0x1d8>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572c:	d003      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005734:	e0a7      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1a6      	bne.n	800568e <HAL_SPI_TransmitReceive+0x130>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1a1      	bne.n	800568e <HAL_SPI_TransmitReceive+0x130>
 800574a:	e07c      	b.n	8005846 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_SPI_TransmitReceive+0x1fc>
 8005754:	8b7b      	ldrh	r3, [r7, #26]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d16b      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	7812      	ldrb	r2, [r2, #0]
 8005766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005780:	e057      	b.n	8005832 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d11c      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x26c>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d017      	beq.n	80057ca <HAL_SPI_TransmitReceive+0x26c>
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d114      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d119      	bne.n	800580c <HAL_SPI_TransmitReceive+0x2ae>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d014      	beq.n	800580c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005808:	2301      	movs	r3, #1
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800580c:	f7fd fbf0 	bl	8002ff0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_TransmitReceive+0x2c6>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005822:	d102      	bne.n	800582a <HAL_SPI_TransmitReceive+0x2cc>
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005830:	e029      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1a2      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x224>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d19d      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f8b2 	bl	80059b4 <SPI_EndRxTxTransaction>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005862:	e010      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	e000      	b.n	8005886 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005884:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800589a:	4618      	mov	r0, r3
 800589c:	3730      	adds	r7, #48	; 0x30
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058b4:	f7fd fb9c 	bl	8002ff0 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	4413      	add	r3, r2
 80058c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058c4:	f7fd fb94 	bl	8002ff0 <HAL_GetTick>
 80058c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ca:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	015b      	lsls	r3, r3, #5
 80058d0:	0d1b      	lsrs	r3, r3, #20
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058da:	e054      	b.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e2:	d050      	beq.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058e4:	f7fd fb84 	bl	8002ff0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d902      	bls.n	80058fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d13d      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005912:	d111      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591c:	d004      	beq.n	8005928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005926:	d107      	bne.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005940:	d10f      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e017      	b.n	80059a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	3b01      	subs	r3, #1
 8005984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d19b      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000004 	.word	0x20000004

080059b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <SPI_EndRxTxTransaction+0x7c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <SPI_EndRxTxTransaction+0x80>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0d5b      	lsrs	r3, r3, #21
 80059cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059de:	d112      	bne.n	8005a06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff ff5a 	bl	80058a4 <SPI_WaitFlagStateUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e00f      	b.n	8005a26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b80      	cmp	r3, #128	; 0x80
 8005a1e:	d0f2      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x52>
 8005a20:	e000      	b.n	8005a24 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a22:	bf00      	nop
  }

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000004 	.word	0x20000004
 8005a34:	165e9f81 	.word	0x165e9f81

08005a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e041      	b.n	8005ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f839 	bl	8005ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fc68 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e04e      	b.n	8005ba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d01d      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d111      	bne.n	8005b90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d010      	beq.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8e:	e007      	b.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc ffae 	bl	8002b54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fb9e 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_IC_Start_IT+0x1e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e013      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_IT+0x2e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e00b      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_IC_Start_IT+0x3e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	e003      	b.n	8005cb2 <HAL_TIM_IC_Start_IT+0x46>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <HAL_TIM_IC_Start_IT+0x58>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e013      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d104      	bne.n	8005cd4 <HAL_TIM_IC_Start_IT+0x68>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e00b      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d104      	bne.n	8005ce4 <HAL_TIM_IC_Start_IT+0x78>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e003      	b.n	8005cec <HAL_TIM_IC_Start_IT+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d102      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cf4:	7b7b      	ldrb	r3, [r7, #13]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e0cc      	b.n	8005e98 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_IC_Start_IT+0xa2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	e013      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_IC_Start_IT+0xb2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d1c:	e00b      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_IC_Start_IT+0xc2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2c:	e003      	b.n	8005d36 <HAL_TIM_IC_Start_IT+0xca>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_IC_Start_IT+0xda>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	e013      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_IC_Start_IT+0xea>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d54:	e00b      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_IC_Start_IT+0xfa>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	e003      	b.n	8005d6e <HAL_TIM_IC_Start_IT+0x102>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d841      	bhi.n	8005df8 <HAL_TIM_IC_Start_IT+0x18c>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_TIM_IC_Start_IT+0x110>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005db1 	.word	0x08005db1
 8005d80:	08005df9 	.word	0x08005df9
 8005d84:	08005df9 	.word	0x08005df9
 8005d88:	08005df9 	.word	0x08005df9
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005df9 	.word	0x08005df9
 8005d98:	08005df9 	.word	0x08005df9
 8005d9c:	08005dd5 	.word	0x08005dd5
 8005da0:	08005df9 	.word	0x08005df9
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005df9 	.word	0x08005df9
 8005dac:	08005de7 	.word	0x08005de7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0202 	orr.w	r2, r2, #2
 8005dbe:	60da      	str	r2, [r3, #12]
      break;
 8005dc0:	e01d      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0204 	orr.w	r2, r2, #4
 8005dd0:	60da      	str	r2, [r3, #12]
      break;
 8005dd2:	e014      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0208 	orr.w	r2, r2, #8
 8005de2:	60da      	str	r2, [r3, #12]
      break;
 8005de4:	e00b      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0210 	orr.w	r2, r2, #16
 8005df4:	60da      	str	r2, [r3, #12]
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d148      	bne.n	8005e96 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fd78 	bl	8006902 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <HAL_TIM_IC_Start_IT+0x234>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d022      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d01d      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <HAL_TIM_IC_Start_IT+0x238>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <HAL_TIM_IC_Start_IT+0x23c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_TIM_IC_Start_IT+0x240>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <HAL_TIM_IC_Start_IT+0x244>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <HAL_TIM_IC_Start_IT+0x248>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <HAL_TIM_IC_Start_IT+0x24c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b06      	cmp	r3, #6
 8005e72:	d010      	beq.n	8005e96 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	e007      	b.n	8005e96 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40001800 	.word	0x40001800

08005ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d122      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11b      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0202 	mvn.w	r2, #2
 8005ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fef2 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8005f04:	e005      	b.n	8005f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa02 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa09 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0204 	mvn.w	r2, #4
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc fec8 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9d8 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9df 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc fe9e 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9ae 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9b5 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b10      	cmp	r3, #16
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0210 	mvn.w	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fc fe74 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f984 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f98b 	bl	8006324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10e      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0201 	mvn.w	r2, #1
 8006038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fb fee6 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d10e      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d107      	bne.n	800606c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fcf6 	bl	8006a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d10e      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d107      	bne.n	8006098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f950 	bl	8006338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d10e      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d107      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0220 	mvn.w	r2, #32
 80060bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fcc0 	bl	8006a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e088      	b.n	80061fc <HAL_TIM_IC_ConfigChannel+0x130>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11b      	bne.n	8006130 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6819      	ldr	r1, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f000 fa52 	bl	80065b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 020c 	bic.w	r2, r2, #12
 800611a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
 800612e:	e060      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d11c      	bne.n	8006170 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f000 fad6 	bl	80066f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006158:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6999      	ldr	r1, [r3, #24]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	021a      	lsls	r2, r3, #8
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	619a      	str	r2, [r3, #24]
 800616e:	e040      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d11b      	bne.n	80061ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f000 fb23 	bl	80067d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 020c 	bic.w	r2, r2, #12
 8006198:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	61da      	str	r2, [r3, #28]
 80061ac:	e021      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	d11c      	bne.n	80061ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f000 fb40 	bl	8006848 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69d9      	ldr	r1, [r3, #28]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	61da      	str	r2, [r3, #28]
 80061ec:	e001      	b.n	80061f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006218:	2302      	movs	r3, #2
 800621a:	e031      	b.n	8006280 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f92c 	bl	800648c <TIM_SlaveTimer_SetConfig>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e018      	b.n	8006280 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800626c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b0c      	cmp	r3, #12
 800629a:	d831      	bhi.n	8006300 <HAL_TIM_ReadCapturedValue+0x78>
 800629c:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a2:	bf00      	nop
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	08006301 	.word	0x08006301
 80062ac:	08006301 	.word	0x08006301
 80062b0:	08006301 	.word	0x08006301
 80062b4:	080062e3 	.word	0x080062e3
 80062b8:	08006301 	.word	0x08006301
 80062bc:	08006301 	.word	0x08006301
 80062c0:	08006301 	.word	0x08006301
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	08006301 	.word	0x08006301
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006301 	.word	0x08006301
 80062d4:	080062f7 	.word	0x080062f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	60fb      	str	r3, [r7, #12]

      break;
 80062e0:	e00f      	b.n	8006302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	60fb      	str	r3, [r7, #12]

      break;
 80062ea:	e00a      	b.n	8006302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	60fb      	str	r3, [r7, #12]

      break;
 80062f4:	e005      	b.n	8006302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	60fb      	str	r3, [r7, #12]

      break;
 80062fe:	e000      	b.n	8006302 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006300:	bf00      	nop
  }

  return tmpreg;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a40      	ldr	r2, [pc, #256]	; (8006460 <TIM_Base_SetConfig+0x114>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d013      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d00f      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a3d      	ldr	r2, [pc, #244]	; (8006464 <TIM_Base_SetConfig+0x118>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a3c      	ldr	r2, [pc, #240]	; (8006468 <TIM_Base_SetConfig+0x11c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a3b      	ldr	r2, [pc, #236]	; (800646c <TIM_Base_SetConfig+0x120>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <TIM_Base_SetConfig+0x124>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d108      	bne.n	800639e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <TIM_Base_SetConfig+0x114>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ac:	d027      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2c      	ldr	r2, [pc, #176]	; (8006464 <TIM_Base_SetConfig+0x118>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d023      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2b      	ldr	r2, [pc, #172]	; (8006468 <TIM_Base_SetConfig+0x11c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	; (800646c <TIM_Base_SetConfig+0x120>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <TIM_Base_SetConfig+0x124>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d017      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a28      	ldr	r2, [pc, #160]	; (8006474 <TIM_Base_SetConfig+0x128>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a27      	ldr	r2, [pc, #156]	; (8006478 <TIM_Base_SetConfig+0x12c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a26      	ldr	r2, [pc, #152]	; (800647c <TIM_Base_SetConfig+0x130>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a25      	ldr	r2, [pc, #148]	; (8006480 <TIM_Base_SetConfig+0x134>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a24      	ldr	r2, [pc, #144]	; (8006484 <TIM_Base_SetConfig+0x138>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a23      	ldr	r2, [pc, #140]	; (8006488 <TIM_Base_SetConfig+0x13c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <TIM_Base_SetConfig+0x114>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xf8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <TIM_Base_SetConfig+0x124>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]
}
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40000c00 	.word	0x40000c00
 8006470:	40010400 	.word	0x40010400
 8006474:	40014000 	.word	0x40014000
 8006478:	40014400 	.word	0x40014400
 800647c:	40014800 	.word	0x40014800
 8006480:	40001800 	.word	0x40001800
 8006484:	40001c00 	.word	0x40001c00
 8006488:	40002000 	.word	0x40002000

0800648c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b70      	cmp	r3, #112	; 0x70
 80064d4:	d01a      	beq.n	800650c <TIM_SlaveTimer_SetConfig+0x80>
 80064d6:	2b70      	cmp	r3, #112	; 0x70
 80064d8:	d860      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 80064da:	2b60      	cmp	r3, #96	; 0x60
 80064dc:	d054      	beq.n	8006588 <TIM_SlaveTimer_SetConfig+0xfc>
 80064de:	2b60      	cmp	r3, #96	; 0x60
 80064e0:	d85c      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 80064e2:	2b50      	cmp	r3, #80	; 0x50
 80064e4:	d046      	beq.n	8006574 <TIM_SlaveTimer_SetConfig+0xe8>
 80064e6:	2b50      	cmp	r3, #80	; 0x50
 80064e8:	d858      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d019      	beq.n	8006522 <TIM_SlaveTimer_SetConfig+0x96>
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d854      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 80064f2:	2b30      	cmp	r3, #48	; 0x30
 80064f4:	d055      	beq.n	80065a2 <TIM_SlaveTimer_SetConfig+0x116>
 80064f6:	2b30      	cmp	r3, #48	; 0x30
 80064f8:	d850      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d051      	beq.n	80065a2 <TIM_SlaveTimer_SetConfig+0x116>
 80064fe:	2b20      	cmp	r3, #32
 8006500:	d84c      	bhi.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04d      	beq.n	80065a2 <TIM_SlaveTimer_SetConfig+0x116>
 8006506:	2b10      	cmp	r3, #16
 8006508:	d04b      	beq.n	80065a2 <TIM_SlaveTimer_SetConfig+0x116>
 800650a:	e047      	b.n	800659c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68d9      	ldr	r1, [r3, #12]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f000 f9d1 	bl	80068c2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006520:	e040      	b.n	80065a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b05      	cmp	r3, #5
 8006528:	d101      	bne.n	800652e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e03b      	b.n	80065a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006554:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
      break;
 8006572:	e017      	b.n	80065a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	461a      	mov	r2, r3
 8006582:	f000 f889 	bl	8006698 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006586:	e00d      	b.n	80065a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6899      	ldr	r1, [r3, #8]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	461a      	mov	r2, r3
 8006596:	f000 f8eb 	bl	8006770 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800659a:	e003      	b.n	80065a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	e000      	b.n	80065a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80065a2:	bf00      	nop
  }

  return status;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <TIM_TI1_SetConfig+0xcc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01b      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d017      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <TIM_TI1_SetConfig+0xd0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a24      	ldr	r2, [pc, #144]	; (8006684 <TIM_TI1_SetConfig+0xd4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a23      	ldr	r2, [pc, #140]	; (8006688 <TIM_TI1_SetConfig+0xd8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <TIM_TI1_SetConfig+0xdc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <TIM_TI1_SetConfig+0xe0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_TI1_SetConfig+0x66>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a20      	ldr	r2, [pc, #128]	; (8006694 <TIM_TI1_SetConfig+0xe4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <TIM_TI1_SetConfig+0x6a>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <TIM_TI1_SetConfig+0x6c>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e003      	b.n	800663a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	b2db      	uxtb	r3, r3
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f023 030a 	bic.w	r3, r3, #10
 8006654:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f003 030a 	and.w	r3, r3, #10
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40001800 	.word	0x40001800

08006698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0201 	bic.w	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 030a 	bic.w	r3, r3, #10
 80066d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f023 0210 	bic.w	r2, r3, #16
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	031b      	lsls	r3, r3, #12
 800673a:	b29b      	uxth	r3, r3
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006748:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f023 0210 	bic.w	r2, r3, #16
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800679a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	031b      	lsls	r3, r3, #12
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 0303 	bic.w	r3, r3, #3
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800680c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	b2db      	uxtb	r3, r3
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006820:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006886:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	031b      	lsls	r3, r3, #12
 800688c:	b29b      	uxth	r3, r3
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800689a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	031b      	lsls	r3, r3, #12
 80068a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	021a      	lsls	r2, r3, #8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	609a      	str	r2, [r3, #8]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006902:	b480      	push	{r7}
 8006904:	b087      	sub	sp, #28
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2201      	movs	r2, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	43db      	mvns	r3, r3
 8006924:	401a      	ands	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	431a      	orrs	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006960:	2302      	movs	r3, #2
 8006962:	e05a      	b.n	8006a1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a21      	ldr	r2, [pc, #132]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d022      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d01d      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d018      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00e      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d10c      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40010400 	.word	0x40010400
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40001800 	.word	0x40001800

08006a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_USART_Init>:
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_USART_Init+0x12>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e033      	b.n	8006ae6 <HAL_USART_Init+0x7a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_USART_Init+0x2c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc f99e 	bl	8002dd4 <HAL_USART_MspInit>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f90b 	bl	8006cbc <USART_SetConfig>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab4:	611a      	str	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ac4:	615a      	str	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_USART_Transmit>:
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b08a      	sub	sp, #40	; 0x28
 8006af2:	af02      	add	r7, sp, #8
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d17c      	bne.n	8006c04 <HAL_USART_Transmit+0x116>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_USART_Transmit+0x28>
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_USART_Transmit+0x2c>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e075      	b.n	8006c06 <HAL_USART_Transmit+0x118>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_USART_Transmit+0x3a>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e06e      	b.n	8006c06 <HAL_USART_Transmit+0x118>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2212      	movs	r2, #18
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b3e:	f7fc fa57 	bl	8002ff0 <HAL_GetTick>
 8006b42:	6178      	str	r0, [r7, #20]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	88fa      	ldrh	r2, [r7, #6]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b58:	d108      	bne.n	8006b6c <HAL_USART_Transmit+0x7e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d104      	bne.n	8006b6c <HAL_USART_Transmit+0x7e>
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e003      	b.n	8006b74 <HAL_USART_Transmit+0x86>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e02a      	b.n	8006bcc <HAL_USART_Transmit+0xde>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f844 	bl	8006c0e <USART_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_USART_Transmit+0xa2>
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e03a      	b.n	8006c06 <HAL_USART_Transmit+0x118>
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_USART_Transmit+0xc0>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	e007      	b.n	8006bbe <HAL_USART_Transmit+0xd0>
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1cf      	bne.n	8006b76 <HAL_USART_Transmit+0x88>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2140      	movs	r1, #64	; 0x40
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f814 	bl	8006c0e <USART_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_USART_Transmit+0x102>
 8006bec:	2303      	movs	r3, #3
 8006bee:	e00a      	b.n	8006c06 <HAL_USART_Transmit+0x118>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_USART_Transmit+0x118>
 8006c04:	2302      	movs	r3, #2
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USART_WaitOnFlagUntilTimeout>:
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	603b      	str	r3, [r7, #0]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	71fb      	strb	r3, [r7, #7]
 8006c1e:	e038      	b.n	8006c92 <USART_WaitOnFlagUntilTimeout+0x84>
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c26:	d034      	beq.n	8006c92 <USART_WaitOnFlagUntilTimeout+0x84>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <USART_WaitOnFlagUntilTimeout+0x30>
 8006c2e:	f7fc f9df 	bl	8002ff0 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d229      	bcs.n	8006c92 <USART_WaitOnFlagUntilTimeout+0x84>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0220 	bic.w	r2, r2, #32
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e00f      	b.n	8006cb2 <USART_WaitOnFlagUntilTimeout+0xa4>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	bf0c      	ite	eq
 8006ca2:	2301      	moveq	r3, #1
 8006ca4:	2300      	movne	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d0b7      	beq.n	8006c20 <USART_WaitOnFlagUntilTimeout+0x12>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USART_SetConfig>:
 8006cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc0:	b0c6      	sub	sp, #280	; 0x118
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68d9      	ldr	r1, [r3, #12]
 8006cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f021 030c 	bic.w	r3, r1, #12
 8006ce0:	60d3      	str	r3, [r2, #12]
 8006ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d30:	6113      	str	r3, [r2, #16]
 8006d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d46:	f023 030c 	bic.w	r3, r3, #12
 8006d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7c:	60d3      	str	r3, [r2, #12]
 8006d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6959      	ldr	r1, [r3, #20]
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8006d90:	6153      	str	r3, [r2, #20]
 8006d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b8b      	ldr	r3, [pc, #556]	; (8006fc8 <USART_SetConfig+0x30c>)
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d006      	beq.n	8006dac <USART_SetConfig+0xf0>
 8006d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b89      	ldr	r3, [pc, #548]	; (8006fcc <USART_SetConfig+0x310>)
 8006da6:	429a      	cmp	r2, r3
 8006da8:	f040 8114 	bne.w	8006fd4 <USART_SetConfig+0x318>
 8006dac:	f7fd fd84 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8006db0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8006db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dbe:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006dc2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	1891      	adds	r1, r2, r2
 8006dcc:	6739      	str	r1, [r7, #112]	; 0x70
 8006dce:	415b      	adcs	r3, r3
 8006dd0:	677b      	str	r3, [r7, #116]	; 0x74
 8006dd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	eb12 0801 	adds.w	r8, r2, r1
 8006ddc:	4629      	mov	r1, r5
 8006dde:	eb43 0901 	adc.w	r9, r3, r1
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	eb18 0303 	adds.w	r3, r8, r3
 8006e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e04:	462b      	mov	r3, r5
 8006e06:	eb49 0303 	adc.w	r3, r9, r3
 8006e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e1a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006e1e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006e22:	460b      	mov	r3, r1
 8006e24:	18db      	adds	r3, r3, r3
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	4613      	mov	r3, r2
 8006e2a:	eb42 0303 	adc.w	r3, r2, r3
 8006e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006e34:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006e38:	f7f9 ff26 	bl	8000c88 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4b63      	ldr	r3, [pc, #396]	; (8006fd0 <USART_SetConfig+0x314>)
 8006e42:	fba3 2302 	umull	r2, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	011c      	lsls	r4, r3, #4
 8006e4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e54:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	6639      	str	r1, [r7, #96]	; 0x60
 8006e64:	415b      	adcs	r3, r3
 8006e66:	667b      	str	r3, [r7, #100]	; 0x64
 8006e68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	1851      	adds	r1, r2, r1
 8006e70:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e72:	4649      	mov	r1, r9
 8006e74:	414b      	adcs	r3, r1
 8006e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8006e84:	4659      	mov	r1, fp
 8006e86:	00cb      	lsls	r3, r1, #3
 8006e88:	4651      	mov	r1, sl
 8006e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e8e:	4651      	mov	r1, sl
 8006e90:	00ca      	lsls	r2, r1, #3
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	4642      	mov	r2, r8
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	eb42 0303 	adc.w	r3, r2, r3
 8006ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eb8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ebc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	18db      	adds	r3, r3, r3
 8006ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	eb42 0303 	adc.w	r3, r2, r3
 8006ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8006ece:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ed2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ed6:	f7f9 fed7 	bl	8000c88 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4b3b      	ldr	r3, [pc, #236]	; (8006fd0 <USART_SetConfig+0x314>)
 8006ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	2264      	movs	r2, #100	; 0x64
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	1acb      	subs	r3, r1, r3
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ef6:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <USART_SetConfig+0x314>)
 8006ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f04:	441c      	add	r4, r3
 8006f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f20:	415b      	adcs	r3, r3
 8006f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	6439      	str	r1, [r7, #64]	; 0x40
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	647b      	str	r3, [r7, #68]	; 0x44
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	18db      	adds	r3, r3, r3
 8006f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f82:	4613      	mov	r3, r2
 8006f84:	eb42 0303 	adc.w	r3, r2, r3
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f92:	f7f9 fe79 	bl	8000c88 <__aeabi_uldivmod>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <USART_SetConfig+0x314>)
 8006f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	2164      	movs	r1, #100	; 0x64
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	3332      	adds	r3, #50	; 0x32
 8006fae:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <USART_SetConfig+0x314>)
 8006fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f003 0207 	and.w	r2, r3, #7
 8006fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4422      	add	r2, r4
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	e109      	b.n	80071da <USART_SetConfig+0x51e>
 8006fc6:	bf00      	nop
 8006fc8:	40011000 	.word	0x40011000
 8006fcc:	40011400 	.word	0x40011400
 8006fd0:	51eb851f 	.word	0x51eb851f
 8006fd4:	f7fd fc5c 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8006fdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fe6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fea:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	1891      	adds	r1, r2, r2
 8006ff4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ff6:	415b      	adcs	r3, r3
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ffe:	4641      	mov	r1, r8
 8007000:	1854      	adds	r4, r2, r1
 8007002:	4649      	mov	r1, r9
 8007004:	eb43 0501 	adc.w	r5, r3, r1
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	00eb      	lsls	r3, r5, #3
 8007012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007016:	00e2      	lsls	r2, r4, #3
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	4643      	mov	r3, r8
 800701e:	18e3      	adds	r3, r4, r3
 8007020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007024:	464b      	mov	r3, r9
 8007026:	eb45 0303 	adc.w	r3, r5, r3
 800702a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800702e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800703a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800703e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007042:	460b      	mov	r3, r1
 8007044:	18db      	adds	r3, r3, r3
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
 8007048:	4613      	mov	r3, r2
 800704a:	eb42 0303 	adc.w	r3, r2, r3
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007054:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007058:	f7f9 fe16 	bl	8000c88 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <USART_SetConfig+0x52c>)
 8007062:	fba3 2302 	umull	r2, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	011c      	lsls	r4, r3, #4
 800706a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007074:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007078:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	1891      	adds	r1, r2, r2
 8007082:	6239      	str	r1, [r7, #32]
 8007084:	415b      	adcs	r3, r3
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
 8007088:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800708c:	4641      	mov	r1, r8
 800708e:	eb12 0a01 	adds.w	sl, r2, r1
 8007092:	4649      	mov	r1, r9
 8007094:	eb43 0b01 	adc.w	fp, r3, r1
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ac:	4692      	mov	sl, r2
 80070ae:	469b      	mov	fp, r3
 80070b0:	4643      	mov	r3, r8
 80070b2:	eb1a 0303 	adds.w	r3, sl, r3
 80070b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070ba:	464b      	mov	r3, r9
 80070bc:	eb4b 0303 	adc.w	r3, fp, r3
 80070c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070d4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80070d8:	460b      	mov	r3, r1
 80070da:	18db      	adds	r3, r3, r3
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	4613      	mov	r3, r2
 80070e0:	eb42 0303 	adc.w	r3, r2, r3
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070ea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070ee:	f7f9 fdcb 	bl	8000c88 <__aeabi_uldivmod>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	4b3b      	ldr	r3, [pc, #236]	; (80071e8 <USART_SetConfig+0x52c>)
 80070fa:	fba3 2301 	umull	r2, r3, r3, r1
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2264      	movs	r2, #100	; 0x64
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	1acb      	subs	r3, r1, r3
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <USART_SetConfig+0x52c>)
 8007110:	fba3 2302 	umull	r2, r3, r3, r2
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800711c:	441c      	add	r4, r3
 800711e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800712c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	6139      	str	r1, [r7, #16]
 8007138:	415b      	adcs	r3, r3
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	67bb      	str	r3, [r7, #120]	; 0x78
 800718a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800718c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007190:	460b      	mov	r3, r1
 8007192:	18db      	adds	r3, r3, r3
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	eb42 0303 	adc.w	r3, r2, r3
 800719c:	607b      	str	r3, [r7, #4]
 800719e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071a6:	f7f9 fd6f 	bl	8000c88 <__aeabi_uldivmod>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <USART_SetConfig+0x52c>)
 80071b0:	fba3 1302 	umull	r1, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	2164      	movs	r1, #100	; 0x64
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	3332      	adds	r3, #50	; 0x32
 80071c2:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <USART_SetConfig+0x52c>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f003 0207 	and.w	r2, r3, #7
 80071ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4422      	add	r2, r4
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80071e0:	46bd      	mov	sp, r7
 80071e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071e6:	bf00      	nop
 80071e8:	51eb851f 	.word	0x51eb851f

080071ec <MX_FATFS_Init>:
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <MX_FATFS_Init+0x18>)
 80071f2:	4805      	ldr	r0, [pc, #20]	; (8007208 <MX_FATFS_Init+0x1c>)
 80071f4:	f002 ffa2 	bl	800a13c <FATFS_LinkDriver>
 80071f8:	4603      	mov	r3, r0
 80071fa:	461a      	mov	r2, r3
 80071fc:	4b03      	ldr	r3, [pc, #12]	; (800720c <MX_FATFS_Init+0x20>)
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	bf00      	nop
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20001e28 	.word	0x20001e28
 8007208:	20000010 	.word	0x20000010
 800720c:	20001e24 	.word	0x20001e24

08007210 <get_fattime>:
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4618      	mov	r0, r3
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USER_initialize>:
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f9d7 	bl	80075e0 <USER_SPI_initialize>
 8007232:	4603      	mov	r3, r0
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USER_status>:
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fab5 	bl	80077b8 <USER_SPI_status>
 800724e:	4603      	mov	r3, r0
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USER_read>:
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	7bf8      	ldrb	r0, [r7, #15]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	f000 fab8 	bl	80077e4 <USER_SPI_read>
 8007274:	4603      	mov	r3, r0
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USER_write>:
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]
 800728e:	7bf8      	ldrb	r0, [r7, #15]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	f000 fb0b 	bl	80078b0 <USER_SPI_write>
 800729a:	4603      	mov	r3, r0
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USER_ioctl>:
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	603a      	str	r2, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
 80072b0:	460b      	mov	r3, r1
 80072b2:	71bb      	strb	r3, [r7, #6]
 80072b4:	79b9      	ldrb	r1, [r7, #6]
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fb74 	bl	80079a8 <USER_SPI_ioctl>
 80072c0:	4603      	mov	r3, r0
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <SPI_Timer_On>:
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	f7fb fe8c 	bl	8002ff0 <HAL_GetTick>
 80072d8:	4603      	mov	r3, r0
 80072da:	4a04      	ldr	r2, [pc, #16]	; (80072ec <SPI_Timer_On+0x20>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4a04      	ldr	r2, [pc, #16]	; (80072f0 <SPI_Timer_On+0x24>)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20001e30 	.word	0x20001e30
 80072f0:	20001e34 	.word	0x20001e34

080072f4 <SPI_Timer_Status>:
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	f7fb fe7a 	bl	8002ff0 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <SPI_Timer_Status+0x24>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <SPI_Timer_Status+0x28>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	bf34      	ite	cc
 800730c:	2301      	movcc	r3, #1
 800730e:	2300      	movcs	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	4618      	mov	r0, r3
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20001e30 	.word	0x20001e30
 800731c:	20001e34 	.word	0x20001e34

08007320 <xchg_spi>:
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	4603      	mov	r3, r0
 8007328:	71fb      	strb	r3, [r7, #7]
 800732a:	f107 020f 	add.w	r2, r7, #15
 800732e:	1df9      	adds	r1, r7, #7
 8007330:	2332      	movs	r3, #50	; 0x32
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	2301      	movs	r3, #1
 8007336:	4804      	ldr	r0, [pc, #16]	; (8007348 <xchg_spi+0x28>)
 8007338:	f7fe f911 	bl	800555e <HAL_SPI_TransmitReceive>
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20001bb8 	.word	0x20001bb8

0800734c <rcvr_spi_multi>:
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e00a      	b.n	8007372 <rcvr_spi_multi+0x26>
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	18d4      	adds	r4, r2, r3
 8007362:	20ff      	movs	r0, #255	; 0xff
 8007364:	f7ff ffdc 	bl	8007320 <xchg_spi>
 8007368:	4603      	mov	r3, r0
 800736a:	7023      	strb	r3, [r4, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d3f0      	bcc.n	800735c <rcvr_spi_multi+0x10>
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	bd90      	pop	{r4, r7, pc}

08007384 <xmit_spi_multi>:
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	b29a      	uxth	r2, r3
 8007392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4803      	ldr	r0, [pc, #12]	; (80073a8 <xmit_spi_multi+0x24>)
 800739a:	f7fd ffa4 	bl	80052e6 <HAL_SPI_Transmit>
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20001bb8 	.word	0x20001bb8

080073ac <wait_ready>:
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	f7fb fe1c 	bl	8002ff0 <HAL_GetTick>
 80073b8:	6178      	str	r0, [r7, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	20ff      	movs	r0, #255	; 0xff
 80073c0:	f7ff ffae 	bl	8007320 <xchg_spi>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d007      	beq.n	80073de <wait_ready+0x32>
 80073ce:	f7fb fe0f 	bl	8002ff0 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d8ef      	bhi.n	80073be <wait_ready+0x12>
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <despiselect>:
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	2201      	movs	r2, #1
 80073fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073fe:	4804      	ldr	r0, [pc, #16]	; (8007410 <despiselect+0x1c>)
 8007400:	f7fd f93a 	bl	8004678 <HAL_GPIO_WritePin>
 8007404:	20ff      	movs	r0, #255	; 0xff
 8007406:	f7ff ff8b 	bl	8007320 <xchg_spi>
 800740a:	bf00      	nop
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40020400 	.word	0x40020400

08007414 <spiselect>:
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
 8007418:	2200      	movs	r2, #0
 800741a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800741e:	480a      	ldr	r0, [pc, #40]	; (8007448 <spiselect+0x34>)
 8007420:	f7fd f92a 	bl	8004678 <HAL_GPIO_WritePin>
 8007424:	20ff      	movs	r0, #255	; 0xff
 8007426:	f7ff ff7b 	bl	8007320 <xchg_spi>
 800742a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800742e:	f7ff ffbd 	bl	80073ac <wait_ready>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <spiselect+0x28>
 8007438:	2301      	movs	r3, #1
 800743a:	e002      	b.n	8007442 <spiselect+0x2e>
 800743c:	f7ff ffda 	bl	80073f4 <despiselect>
 8007440:	2300      	movs	r3, #0
 8007442:	4618      	mov	r0, r3
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40020400 	.word	0x40020400

0800744c <rcvr_datablock>:
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	20c8      	movs	r0, #200	; 0xc8
 8007458:	f7ff ff38 	bl	80072cc <SPI_Timer_On>
 800745c:	20ff      	movs	r0, #255	; 0xff
 800745e:	f7ff ff5f 	bl	8007320 <xchg_spi>
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2bff      	cmp	r3, #255	; 0xff
 800746a:	d104      	bne.n	8007476 <rcvr_datablock+0x2a>
 800746c:	f7ff ff42 	bl	80072f4 <SPI_Timer_Status>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f2      	bne.n	800745c <rcvr_datablock+0x10>
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2bfe      	cmp	r3, #254	; 0xfe
 800747a:	d001      	beq.n	8007480 <rcvr_datablock+0x34>
 800747c:	2300      	movs	r3, #0
 800747e:	e00a      	b.n	8007496 <rcvr_datablock+0x4a>
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff ff62 	bl	800734c <rcvr_spi_multi>
 8007488:	20ff      	movs	r0, #255	; 0xff
 800748a:	f7ff ff49 	bl	8007320 <xchg_spi>
 800748e:	20ff      	movs	r0, #255	; 0xff
 8007490:	f7ff ff46 	bl	8007320 <xchg_spi>
 8007494:	2301      	movs	r3, #1
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <xmit_datablock>:
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
 80074aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074ae:	f7ff ff7d 	bl	80073ac <wait_ready>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <xmit_datablock+0x1e>
 80074b8:	2300      	movs	r3, #0
 80074ba:	e01e      	b.n	80074fa <xmit_datablock+0x5c>
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff2e 	bl	8007320 <xchg_spi>
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	2bfd      	cmp	r3, #253	; 0xfd
 80074c8:	d016      	beq.n	80074f8 <xmit_datablock+0x5a>
 80074ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff ff58 	bl	8007384 <xmit_spi_multi>
 80074d4:	20ff      	movs	r0, #255	; 0xff
 80074d6:	f7ff ff23 	bl	8007320 <xchg_spi>
 80074da:	20ff      	movs	r0, #255	; 0xff
 80074dc:	f7ff ff20 	bl	8007320 <xchg_spi>
 80074e0:	20ff      	movs	r0, #255	; 0xff
 80074e2:	f7ff ff1d 	bl	8007320 <xchg_spi>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d001      	beq.n	80074f8 <xmit_datablock+0x5a>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <xmit_datablock+0x5c>
 80074f8:	2301      	movs	r3, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <send_cmd>:
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	4603      	mov	r3, r0
 800750a:	6039      	str	r1, [r7, #0]
 800750c:	71fb      	strb	r3, [r7, #7]
 800750e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da0e      	bge.n	8007534 <send_cmd+0x32>
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751c:	71fb      	strb	r3, [r7, #7]
 800751e:	2100      	movs	r1, #0
 8007520:	2037      	movs	r0, #55	; 0x37
 8007522:	f7ff ffee 	bl	8007502 <send_cmd>
 8007526:	4603      	mov	r3, r0
 8007528:	73bb      	strb	r3, [r7, #14]
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d901      	bls.n	8007534 <send_cmd+0x32>
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	e051      	b.n	80075d8 <send_cmd+0xd6>
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b0c      	cmp	r3, #12
 8007538:	d008      	beq.n	800754c <send_cmd+0x4a>
 800753a:	f7ff ff5b 	bl	80073f4 <despiselect>
 800753e:	f7ff ff69 	bl	8007414 <spiselect>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <send_cmd+0x4a>
 8007548:	23ff      	movs	r3, #255	; 0xff
 800754a:	e045      	b.n	80075d8 <send_cmd+0xd6>
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007552:	b2db      	uxtb	r3, r3
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fee3 	bl	8007320 <xchg_spi>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	0e1b      	lsrs	r3, r3, #24
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff fedd 	bl	8007320 <xchg_spi>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	0c1b      	lsrs	r3, r3, #16
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fed7 	bl	8007320 <xchg_spi>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	b2db      	uxtb	r3, r3
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fed1 	bl	8007320 <xchg_spi>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fecc 	bl	8007320 <xchg_spi>
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <send_cmd+0x94>
 8007592:	2395      	movs	r3, #149	; 0x95
 8007594:	73fb      	strb	r3, [r7, #15]
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d101      	bne.n	80075a0 <send_cmd+0x9e>
 800759c:	2387      	movs	r3, #135	; 0x87
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff febc 	bl	8007320 <xchg_spi>
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b0c      	cmp	r3, #12
 80075ac:	d102      	bne.n	80075b4 <send_cmd+0xb2>
 80075ae:	20ff      	movs	r0, #255	; 0xff
 80075b0:	f7ff feb6 	bl	8007320 <xchg_spi>
 80075b4:	230a      	movs	r3, #10
 80075b6:	73fb      	strb	r3, [r7, #15]
 80075b8:	20ff      	movs	r0, #255	; 0xff
 80075ba:	f7ff feb1 	bl	8007320 <xchg_spi>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]
 80075c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da05      	bge.n	80075d6 <send_cmd+0xd4>
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <send_cmd+0xb6>
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USER_SPI_initialize>:
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	71fb      	strb	r3, [r7, #7]
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USER_SPI_initialize+0x14>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0d6      	b.n	80077a2 <USER_SPI_initialize+0x1c2>
 80075f4:	4b6d      	ldr	r3, [pc, #436]	; (80077ac <USER_SPI_initialize+0x1cc>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <USER_SPI_initialize+0x2a>
 8007602:	4b6a      	ldr	r3, [pc, #424]	; (80077ac <USER_SPI_initialize+0x1cc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e0cb      	b.n	80077a2 <USER_SPI_initialize+0x1c2>
 800760a:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <USER_SPI_initialize+0x1d0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007614:	4b66      	ldr	r3, [pc, #408]	; (80077b0 <USER_SPI_initialize+0x1d0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	230a      	movs	r3, #10
 8007620:	73fb      	strb	r3, [r7, #15]
 8007622:	e005      	b.n	8007630 <USER_SPI_initialize+0x50>
 8007624:	20ff      	movs	r0, #255	; 0xff
 8007626:	f7ff fe7b 	bl	8007320 <xchg_spi>
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	3b01      	subs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f6      	bne.n	8007624 <USER_SPI_initialize+0x44>
 8007636:	2300      	movs	r3, #0
 8007638:	737b      	strb	r3, [r7, #13]
 800763a:	2100      	movs	r1, #0
 800763c:	2000      	movs	r0, #0
 800763e:	f7ff ff60 	bl	8007502 <send_cmd>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 808b 	bne.w	8007760 <USER_SPI_initialize+0x180>
 800764a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800764e:	f7ff fe3d 	bl	80072cc <SPI_Timer_On>
 8007652:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007656:	2008      	movs	r0, #8
 8007658:	f7ff ff53 	bl	8007502 <send_cmd>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d151      	bne.n	8007706 <USER_SPI_initialize+0x126>
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	e00d      	b.n	8007684 <USER_SPI_initialize+0xa4>
 8007668:	7bfc      	ldrb	r4, [r7, #15]
 800766a:	20ff      	movs	r0, #255	; 0xff
 800766c:	f7ff fe58 	bl	8007320 <xchg_spi>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	f104 0310 	add.w	r3, r4, #16
 8007678:	443b      	add	r3, r7
 800767a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	3301      	adds	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b03      	cmp	r3, #3
 8007688:	d9ee      	bls.n	8007668 <USER_SPI_initialize+0x88>
 800768a:	7abb      	ldrb	r3, [r7, #10]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d167      	bne.n	8007760 <USER_SPI_initialize+0x180>
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	2baa      	cmp	r3, #170	; 0xaa
 8007694:	d164      	bne.n	8007760 <USER_SPI_initialize+0x180>
 8007696:	bf00      	nop
 8007698:	f7ff fe2c 	bl	80072f4 <SPI_Timer_Status>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <USER_SPI_initialize+0xd2>
 80076a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80076a6:	20a9      	movs	r0, #169	; 0xa9
 80076a8:	f7ff ff2b 	bl	8007502 <send_cmd>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f2      	bne.n	8007698 <USER_SPI_initialize+0xb8>
 80076b2:	f7ff fe1f 	bl	80072f4 <SPI_Timer_Status>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d051      	beq.n	8007760 <USER_SPI_initialize+0x180>
 80076bc:	2100      	movs	r1, #0
 80076be:	203a      	movs	r0, #58	; 0x3a
 80076c0:	f7ff ff1f 	bl	8007502 <send_cmd>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d14a      	bne.n	8007760 <USER_SPI_initialize+0x180>
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e00d      	b.n	80076ec <USER_SPI_initialize+0x10c>
 80076d0:	7bfc      	ldrb	r4, [r7, #15]
 80076d2:	20ff      	movs	r0, #255	; 0xff
 80076d4:	f7ff fe24 	bl	8007320 <xchg_spi>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	f104 0310 	add.w	r3, r4, #16
 80076e0:	443b      	add	r3, r7
 80076e2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	3301      	adds	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d9ee      	bls.n	80076d0 <USER_SPI_initialize+0xf0>
 80076f2:	7a3b      	ldrb	r3, [r7, #8]
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USER_SPI_initialize+0x120>
 80076fc:	230c      	movs	r3, #12
 80076fe:	e000      	b.n	8007702 <USER_SPI_initialize+0x122>
 8007700:	2304      	movs	r3, #4
 8007702:	737b      	strb	r3, [r7, #13]
 8007704:	e02c      	b.n	8007760 <USER_SPI_initialize+0x180>
 8007706:	2100      	movs	r1, #0
 8007708:	20a9      	movs	r0, #169	; 0xa9
 800770a:	f7ff fefa 	bl	8007502 <send_cmd>
 800770e:	4603      	mov	r3, r0
 8007710:	2b01      	cmp	r3, #1
 8007712:	d804      	bhi.n	800771e <USER_SPI_initialize+0x13e>
 8007714:	2302      	movs	r3, #2
 8007716:	737b      	strb	r3, [r7, #13]
 8007718:	23a9      	movs	r3, #169	; 0xa9
 800771a:	73bb      	strb	r3, [r7, #14]
 800771c:	e003      	b.n	8007726 <USER_SPI_initialize+0x146>
 800771e:	2301      	movs	r3, #1
 8007720:	737b      	strb	r3, [r7, #13]
 8007722:	2301      	movs	r3, #1
 8007724:	73bb      	strb	r3, [r7, #14]
 8007726:	bf00      	nop
 8007728:	f7ff fde4 	bl	80072f4 <SPI_Timer_Status>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <USER_SPI_initialize+0x162>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fee3 	bl	8007502 <send_cmd>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f2      	bne.n	8007728 <USER_SPI_initialize+0x148>
 8007742:	f7ff fdd7 	bl	80072f4 <SPI_Timer_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <USER_SPI_initialize+0x17c>
 800774c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007750:	2010      	movs	r0, #16
 8007752:	f7ff fed6 	bl	8007502 <send_cmd>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USER_SPI_initialize+0x180>
 800775c:	2300      	movs	r3, #0
 800775e:	737b      	strb	r3, [r7, #13]
 8007760:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <USER_SPI_initialize+0x1d4>)
 8007762:	7b7b      	ldrb	r3, [r7, #13]
 8007764:	7013      	strb	r3, [r2, #0]
 8007766:	f7ff fe45 	bl	80073f4 <despiselect>
 800776a:	7b7b      	ldrb	r3, [r7, #13]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d012      	beq.n	8007796 <USER_SPI_initialize+0x1b6>
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <USER_SPI_initialize+0x1d0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <USER_SPI_initialize+0x1d0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0210 	orr.w	r2, r2, #16
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	4b09      	ldr	r3, [pc, #36]	; (80077ac <USER_SPI_initialize+0x1cc>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	f023 0301 	bic.w	r3, r3, #1
 800778e:	b2da      	uxtb	r2, r3
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <USER_SPI_initialize+0x1cc>)
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e002      	b.n	800779c <USER_SPI_initialize+0x1bc>
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <USER_SPI_initialize+0x1cc>)
 8007798:	2201      	movs	r2, #1
 800779a:	701a      	strb	r2, [r3, #0]
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <USER_SPI_initialize+0x1cc>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd90      	pop	{r4, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000024 	.word	0x20000024
 80077b0:	20001bb8 	.word	0x20001bb8
 80077b4:	20001e2c 	.word	0x20001e2c

080077b8 <USER_SPI_status>:
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	71fb      	strb	r3, [r7, #7]
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USER_SPI_status+0x14>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e002      	b.n	80077d2 <USER_SPI_status+0x1a>
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <USER_SPI_status+0x28>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000024 	.word	0x20000024

080077e4 <USER_SPI_read>:
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <USER_SPI_read+0x1c>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USER_SPI_read+0x20>
 8007800:	2304      	movs	r3, #4
 8007802:	e04d      	b.n	80078a0 <USER_SPI_read+0xbc>
 8007804:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <USER_SPI_read+0xc4>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <USER_SPI_read+0x32>
 8007812:	2303      	movs	r3, #3
 8007814:	e044      	b.n	80078a0 <USER_SPI_read+0xbc>
 8007816:	4b25      	ldr	r3, [pc, #148]	; (80078ac <USER_SPI_read+0xc8>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f003 0308 	and.w	r3, r3, #8
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <USER_SPI_read+0x44>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	025b      	lsls	r3, r3, #9
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d111      	bne.n	8007852 <USER_SPI_read+0x6e>
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	2011      	movs	r0, #17
 8007832:	f7ff fe66 	bl	8007502 <send_cmd>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d129      	bne.n	8007890 <USER_SPI_read+0xac>
 800783c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f7ff fe03 	bl	800744c <rcvr_datablock>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d021      	beq.n	8007890 <USER_SPI_read+0xac>
 800784c:	2300      	movs	r3, #0
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	e01e      	b.n	8007890 <USER_SPI_read+0xac>
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	2012      	movs	r0, #18
 8007856:	f7ff fe54 	bl	8007502 <send_cmd>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d117      	bne.n	8007890 <USER_SPI_read+0xac>
 8007860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007864:	68b8      	ldr	r0, [r7, #8]
 8007866:	f7ff fdf1 	bl	800744c <rcvr_datablock>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <USER_SPI_read+0xa2>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007876:	60bb      	str	r3, [r7, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ed      	bne.n	8007860 <USER_SPI_read+0x7c>
 8007884:	e000      	b.n	8007888 <USER_SPI_read+0xa4>
 8007886:	bf00      	nop
 8007888:	2100      	movs	r1, #0
 800788a:	200c      	movs	r0, #12
 800788c:	f7ff fe39 	bl	8007502 <send_cmd>
 8007890:	f7ff fdb0 	bl	80073f4 <despiselect>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000024 	.word	0x20000024
 80078ac:	20001e2c 	.word	0x20001e2c

080078b0 <USER_SPI_write>:
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <USER_SPI_write+0x1c>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <USER_SPI_write+0x20>
 80078cc:	2304      	movs	r3, #4
 80078ce:	e063      	b.n	8007998 <USER_SPI_write+0xe8>
 80078d0:	4b33      	ldr	r3, [pc, #204]	; (80079a0 <USER_SPI_write+0xf0>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <USER_SPI_write+0x32>
 80078de:	2303      	movs	r3, #3
 80078e0:	e05a      	b.n	8007998 <USER_SPI_write+0xe8>
 80078e2:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <USER_SPI_write+0xf0>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <USER_SPI_write+0x44>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e051      	b.n	8007998 <USER_SPI_write+0xe8>
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <USER_SPI_write+0xf4>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <USER_SPI_write+0x56>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	025b      	lsls	r3, r3, #9
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d110      	bne.n	800792e <USER_SPI_write+0x7e>
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	2018      	movs	r0, #24
 8007910:	f7ff fdf7 	bl	8007502 <send_cmd>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d136      	bne.n	8007988 <USER_SPI_write+0xd8>
 800791a:	21fe      	movs	r1, #254	; 0xfe
 800791c:	68b8      	ldr	r0, [r7, #8]
 800791e:	f7ff fdbe 	bl	800749e <xmit_datablock>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d02f      	beq.n	8007988 <USER_SPI_write+0xd8>
 8007928:	2300      	movs	r3, #0
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	e02c      	b.n	8007988 <USER_SPI_write+0xd8>
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <USER_SPI_write+0xf4>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f003 0306 	and.w	r3, r3, #6
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <USER_SPI_write+0x92>
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	2097      	movs	r0, #151	; 0x97
 800793e:	f7ff fde0 	bl	8007502 <send_cmd>
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	2019      	movs	r0, #25
 8007946:	f7ff fddc 	bl	8007502 <send_cmd>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11b      	bne.n	8007988 <USER_SPI_write+0xd8>
 8007950:	21fc      	movs	r1, #252	; 0xfc
 8007952:	68b8      	ldr	r0, [r7, #8]
 8007954:	f7ff fda3 	bl	800749e <xmit_datablock>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USER_SPI_write+0xc4>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	3b01      	subs	r3, #1
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1ee      	bne.n	8007950 <USER_SPI_write+0xa0>
 8007972:	e000      	b.n	8007976 <USER_SPI_write+0xc6>
 8007974:	bf00      	nop
 8007976:	21fd      	movs	r1, #253	; 0xfd
 8007978:	2000      	movs	r0, #0
 800797a:	f7ff fd90 	bl	800749e <xmit_datablock>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USER_SPI_write+0xd8>
 8007984:	2301      	movs	r3, #1
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	f7ff fd34 	bl	80073f4 <despiselect>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	bf14      	ite	ne
 8007992:	2301      	movne	r3, #1
 8007994:	2300      	moveq	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20000024 	.word	0x20000024
 80079a4:	20001e2c 	.word	0x20001e2c

080079a8 <USER_SPI_ioctl>:
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	; 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	603a      	str	r2, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
 80079b4:	460b      	mov	r3, r1
 80079b6:	71bb      	strb	r3, [r7, #6]
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <USER_SPI_ioctl+0x1a>
 80079be:	2304      	movs	r3, #4
 80079c0:	e15a      	b.n	8007c78 <USER_SPI_ioctl+0x2d0>
 80079c2:	4baf      	ldr	r3, [pc, #700]	; (8007c80 <USER_SPI_ioctl+0x2d8>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <USER_SPI_ioctl+0x2c>
 80079d0:	2303      	movs	r3, #3
 80079d2:	e151      	b.n	8007c78 <USER_SPI_ioctl+0x2d0>
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80079da:	79bb      	ldrb	r3, [r7, #6]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	f200 8136 	bhi.w	8007c4e <USER_SPI_ioctl+0x2a6>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USER_SPI_ioctl+0x40>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	080079fd 	.word	0x080079fd
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007c4f 	.word	0x08007c4f
 80079f4:	08007abd 	.word	0x08007abd
 80079f8:	08007bb3 	.word	0x08007bb3
 80079fc:	f7ff fd0a 	bl	8007414 <spiselect>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8127 	beq.w	8007c56 <USER_SPI_ioctl+0x2ae>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a0e:	e122      	b.n	8007c56 <USER_SPI_ioctl+0x2ae>
 8007a10:	2100      	movs	r1, #0
 8007a12:	2009      	movs	r0, #9
 8007a14:	f7ff fd75 	bl	8007502 <send_cmd>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 811d 	bne.w	8007c5a <USER_SPI_ioctl+0x2b2>
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	2110      	movs	r1, #16
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fd10 	bl	800744c <rcvr_datablock>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8113 	beq.w	8007c5a <USER_SPI_ioctl+0x2b2>
 8007a34:	7b3b      	ldrb	r3, [r7, #12]
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d111      	bne.n	8007a62 <USER_SPI_ioctl+0xba>
 8007a3e:	7d7b      	ldrb	r3, [r7, #21]
 8007a40:	461a      	mov	r2, r3
 8007a42:	7d3b      	ldrb	r3, [r7, #20]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	4413      	add	r3, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	7cfb      	ldrb	r3, [r7, #19]
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007a52:	4413      	add	r3, r2
 8007a54:	3301      	adds	r3, #1
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	029a      	lsls	r2, r3, #10
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	e028      	b.n	8007ab4 <USER_SPI_ioctl+0x10c>
 8007a62:	7c7b      	ldrb	r3, [r7, #17]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	7dbb      	ldrb	r3, [r7, #22]
 8007a6c:	09db      	lsrs	r3, r3, #7
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	4413      	add	r3, r2
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	7d7b      	ldrb	r3, [r7, #21]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 0306 	and.w	r3, r3, #6
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	3302      	adds	r3, #2
 8007a86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007a8a:	7d3b      	ldrb	r3, [r7, #20]
 8007a8c:	099b      	lsrs	r3, r3, #6
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	7cbb      	ldrb	r3, [r7, #18]
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
 8007aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007aaa:	3b09      	subs	r3, #9
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	409a      	lsls	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007aba:	e0ce      	b.n	8007c5a <USER_SPI_ioctl+0x2b2>
 8007abc:	4b71      	ldr	r3, [pc, #452]	; (8007c84 <USER_SPI_ioctl+0x2dc>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d031      	beq.n	8007b2c <USER_SPI_ioctl+0x184>
 8007ac8:	2100      	movs	r1, #0
 8007aca:	208d      	movs	r0, #141	; 0x8d
 8007acc:	f7ff fd19 	bl	8007502 <send_cmd>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 80c3 	bne.w	8007c5e <USER_SPI_ioctl+0x2b6>
 8007ad8:	20ff      	movs	r0, #255	; 0xff
 8007ada:	f7ff fc21 	bl	8007320 <xchg_spi>
 8007ade:	f107 030c 	add.w	r3, r7, #12
 8007ae2:	2110      	movs	r1, #16
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fcb1 	bl	800744c <rcvr_datablock>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80b6 	beq.w	8007c5e <USER_SPI_ioctl+0x2b6>
 8007af2:	2330      	movs	r3, #48	; 0x30
 8007af4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007af8:	e007      	b.n	8007b0a <USER_SPI_ioctl+0x162>
 8007afa:	20ff      	movs	r0, #255	; 0xff
 8007afc:	f7ff fc10 	bl	8007320 <xchg_spi>
 8007b00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b04:	3b01      	subs	r3, #1
 8007b06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007b0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f3      	bne.n	8007afa <USER_SPI_ioctl+0x152>
 8007b12:	7dbb      	ldrb	r3, [r7, #22]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2310      	movs	r3, #16
 8007b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b2a:	e098      	b.n	8007c5e <USER_SPI_ioctl+0x2b6>
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	2009      	movs	r0, #9
 8007b30:	f7ff fce7 	bl	8007502 <send_cmd>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8091 	bne.w	8007c5e <USER_SPI_ioctl+0x2b6>
 8007b3c:	f107 030c 	add.w	r3, r7, #12
 8007b40:	2110      	movs	r1, #16
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fc82 	bl	800744c <rcvr_datablock>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8087 	beq.w	8007c5e <USER_SPI_ioctl+0x2b6>
 8007b50:	4b4c      	ldr	r3, [pc, #304]	; (8007c84 <USER_SPI_ioctl+0x2dc>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d012      	beq.n	8007b82 <USER_SPI_ioctl+0x1da>
 8007b5c:	7dbb      	ldrb	r3, [r7, #22]
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007b64:	7dfa      	ldrb	r2, [r7, #23]
 8007b66:	09d2      	lsrs	r2, r2, #7
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	7e7b      	ldrb	r3, [r7, #25]
 8007b70:	099b      	lsrs	r3, r3, #6
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e013      	b.n	8007baa <USER_SPI_ioctl+0x202>
 8007b82:	7dbb      	ldrb	r3, [r7, #22]
 8007b84:	109b      	asrs	r3, r3, #2
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	7dfa      	ldrb	r2, [r7, #23]
 8007b90:	00d2      	lsls	r2, r2, #3
 8007b92:	f002 0218 	and.w	r2, r2, #24
 8007b96:	7df9      	ldrb	r1, [r7, #23]
 8007b98:	0949      	lsrs	r1, r1, #5
 8007b9a:	b2c9      	uxtb	r1, r1
 8007b9c:	440a      	add	r2, r1
 8007b9e:	3201      	adds	r2, #1
 8007ba0:	fb02 f303 	mul.w	r3, r2, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007bb0:	e055      	b.n	8007c5e <USER_SPI_ioctl+0x2b6>
 8007bb2:	4b34      	ldr	r3, [pc, #208]	; (8007c84 <USER_SPI_ioctl+0x2dc>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 0306 	and.w	r3, r3, #6
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d051      	beq.n	8007c62 <USER_SPI_ioctl+0x2ba>
 8007bbe:	f107 020c 	add.w	r2, r7, #12
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	210b      	movs	r1, #11
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff feee 	bl	80079a8 <USER_SPI_ioctl>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d149      	bne.n	8007c66 <USER_SPI_ioctl+0x2be>
 8007bd2:	7b3b      	ldrb	r3, [r7, #12]
 8007bd4:	099b      	lsrs	r3, r3, #6
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <USER_SPI_ioctl+0x23e>
 8007bdc:	7dbb      	ldrb	r3, [r7, #22]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d041      	beq.n	8007c6a <USER_SPI_ioctl+0x2c2>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	4b23      	ldr	r3, [pc, #140]	; (8007c84 <USER_SPI_ioctl+0x2dc>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USER_SPI_ioctl+0x266>
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	025b      	lsls	r3, r3, #9
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	025b      	lsls	r3, r3, #9
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c10:	2020      	movs	r0, #32
 8007c12:	f7ff fc76 	bl	8007502 <send_cmd>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d128      	bne.n	8007c6e <USER_SPI_ioctl+0x2c6>
 8007c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c1e:	2021      	movs	r0, #33	; 0x21
 8007c20:	f7ff fc6f 	bl	8007502 <send_cmd>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d121      	bne.n	8007c6e <USER_SPI_ioctl+0x2c6>
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	2026      	movs	r0, #38	; 0x26
 8007c2e:	f7ff fc68 	bl	8007502 <send_cmd>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11a      	bne.n	8007c6e <USER_SPI_ioctl+0x2c6>
 8007c38:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c3c:	f7ff fbb6 	bl	80073ac <wait_ready>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d013      	beq.n	8007c6e <USER_SPI_ioctl+0x2c6>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c4c:	e00f      	b.n	8007c6e <USER_SPI_ioctl+0x2c6>
 8007c4e:	2304      	movs	r3, #4
 8007c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c54:	e00c      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c56:	bf00      	nop
 8007c58:	e00a      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c5a:	bf00      	nop
 8007c5c:	e008      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c5e:	bf00      	nop
 8007c60:	e006      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c62:	bf00      	nop
 8007c64:	e004      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c66:	bf00      	nop
 8007c68:	e002      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <USER_SPI_ioctl+0x2c8>
 8007c6e:	bf00      	nop
 8007c70:	f7ff fbc0 	bl	80073f4 <despiselect>
 8007c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3730      	adds	r7, #48	; 0x30
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000024 	.word	0x20000024
 8007c84:	20001e2c 	.word	0x20001e2c

08007c88 <disk_status>:
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <disk_status+0x30>)
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	79fa      	ldrb	r2, [r7, #7]
 8007ca0:	4905      	ldr	r1, [pc, #20]	; (8007cb8 <disk_status+0x30>)
 8007ca2:	440a      	add	r2, r1
 8007ca4:	7a12      	ldrb	r2, [r2, #8]
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20001e60 	.word	0x20001e60

08007cbc <disk_initialize>:
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	71fb      	strb	r3, [r7, #7]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	4a0d      	ldr	r2, [pc, #52]	; (8007d04 <disk_initialize+0x48>)
 8007cce:	5cd3      	ldrb	r3, [r2, r3]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d111      	bne.n	8007cf8 <disk_initialize+0x3c>
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <disk_initialize+0x48>)
 8007cd8:	2101      	movs	r1, #1
 8007cda:	54d1      	strb	r1, [r2, r3]
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <disk_initialize+0x48>)
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	79fa      	ldrb	r2, [r7, #7]
 8007cea:	4906      	ldr	r1, [pc, #24]	; (8007d04 <disk_initialize+0x48>)
 8007cec:	440a      	add	r2, r1
 8007cee:	7a12      	ldrb	r2, [r2, #8]
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20001e60 	.word	0x20001e60

08007d08 <disk_read>:
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <disk_read+0x3c>)
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	689c      	ldr	r4, [r3, #8]
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <disk_read+0x3c>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	7a18      	ldrb	r0, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	47a0      	blx	r4
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001e60 	.word	0x20001e60

08007d48 <disk_write>:
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	4a0a      	ldr	r2, [pc, #40]	; (8007d84 <disk_write+0x3c>)
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	68dc      	ldr	r4, [r3, #12]
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	4a07      	ldr	r2, [pc, #28]	; (8007d84 <disk_write+0x3c>)
 8007d68:	4413      	add	r3, r2
 8007d6a:	7a18      	ldrb	r0, [r3, #8]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	47a0      	blx	r4
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd90      	pop	{r4, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001e60 	.word	0x20001e60

08007d88 <disk_ioctl>:
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	603a      	str	r2, [r7, #0]
 8007d92:	71fb      	strb	r3, [r7, #7]
 8007d94:	460b      	mov	r3, r1
 8007d96:	71bb      	strb	r3, [r7, #6]
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <disk_ioctl+0x38>)
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	79fa      	ldrb	r2, [r7, #7]
 8007da6:	4906      	ldr	r1, [pc, #24]	; (8007dc0 <disk_ioctl+0x38>)
 8007da8:	440a      	add	r2, r1
 8007daa:	7a10      	ldrb	r0, [r2, #8]
 8007dac:	79b9      	ldrb	r1, [r7, #6]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20001e60 	.word	0x20001e60

08007dc4 <ld_word>:
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	81fb      	strh	r3, [r7, #14]
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	b21a      	sxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b21b      	sxth	r3, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	b21b      	sxth	r3, r3
 8007de4:	81fb      	strh	r3, [r7, #14]
 8007de6:	89fb      	ldrh	r3, [r7, #14]
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <ld_dword>:
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3303      	adds	r3, #3
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	3202      	adds	r2, #2
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	3201      	adds	r2, #1
 8007e1a:	7812      	ldrb	r2, [r2, #0]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7812      	ldrb	r2, [r2, #0]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <st_word>:
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	807b      	strh	r3, [r7, #2]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	887a      	ldrh	r2, [r7, #2]
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	887b      	ldrh	r3, [r7, #2]
 8007e54:	0a1b      	lsrs	r3, r3, #8
 8007e56:	807b      	strh	r3, [r7, #2]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <st_dword>:
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	0a1b      	lsrs	r3, r3, #8
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <mem_cpy>:
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00d      	beq.n	8007efe <mem_cpy+0x36>
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	1c53      	adds	r3, r2, #1
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	6179      	str	r1, [r7, #20]
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f1      	bne.n	8007ee2 <mem_cpy+0x1a>
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <mem_set>:
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	617a      	str	r2, [r7, #20]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f3      	bne.n	8007f1a <mem_set+0x10>
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <mem_cmp>:
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	; 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	61bb      	str	r3, [r7, #24]
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	61fa      	str	r2, [r7, #28]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	4619      	mov	r1, r3
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	61ba      	str	r2, [r7, #24]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	1acb      	subs	r3, r1, r3
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <mem_cmp+0x40>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0eb      	beq.n	8007f58 <mem_cmp+0x18>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <chk_chr>:
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
 8007f98:	e002      	b.n	8007fa0 <chk_chr+0x12>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	607b      	str	r3, [r7, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <chk_chr+0x26>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d1f2      	bne.n	8007f9a <chk_chr+0xc>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <lock_fs>:
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <lock_fs+0x22>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f002 f8eb 	bl	800a1b2 <ff_req_grant>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <lock_fs+0x22>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <lock_fs+0x24>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <unlock_fs>:
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <unlock_fs+0x2e>
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b0c      	cmp	r3, #12
 8008006:	d00a      	beq.n	800801e <unlock_fs+0x2e>
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	2b0b      	cmp	r3, #11
 800800c:	d007      	beq.n	800801e <unlock_fs+0x2e>
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	2b0f      	cmp	r3, #15
 8008012:	d004      	beq.n	800801e <unlock_fs+0x2e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	4618      	mov	r0, r3
 800801a:	f002 f8df 	bl	800a1dc <ff_rel_grant>
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <chk_lock>:
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	60bb      	str	r3, [r7, #8]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	e029      	b.n	8008090 <chk_lock+0x68>
 800803c:	4a27      	ldr	r2, [pc, #156]	; (80080dc <chk_lock+0xb4>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	4413      	add	r3, r2
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01d      	beq.n	8008086 <chk_lock+0x5e>
 800804a:	4a24      	ldr	r2, [pc, #144]	; (80080dc <chk_lock+0xb4>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	4413      	add	r3, r2
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d116      	bne.n	800808a <chk_lock+0x62>
 800805c:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <chk_lock+0xb4>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	4413      	add	r3, r2
 8008064:	3304      	adds	r3, #4
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d10c      	bne.n	800808a <chk_lock+0x62>
 8008070:	4a1a      	ldr	r2, [pc, #104]	; (80080dc <chk_lock+0xb4>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	4413      	add	r3, r2
 8008078:	3308      	adds	r3, #8
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	429a      	cmp	r2, r3
 8008082:	d102      	bne.n	800808a <chk_lock+0x62>
 8008084:	e007      	b.n	8008096 <chk_lock+0x6e>
 8008086:	2301      	movs	r3, #1
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d9d2      	bls.n	800803c <chk_lock+0x14>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d109      	bne.n	80080b0 <chk_lock+0x88>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <chk_lock+0x80>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d101      	bne.n	80080ac <chk_lock+0x84>
 80080a8:	2300      	movs	r3, #0
 80080aa:	e010      	b.n	80080ce <chk_lock+0xa6>
 80080ac:	2312      	movs	r3, #18
 80080ae:	e00e      	b.n	80080ce <chk_lock+0xa6>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d108      	bne.n	80080c8 <chk_lock+0xa0>
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <chk_lock+0xb4>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	4413      	add	r3, r2
 80080be:	330c      	adds	r3, #12
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c6:	d101      	bne.n	80080cc <chk_lock+0xa4>
 80080c8:	2310      	movs	r3, #16
 80080ca:	e000      	b.n	80080ce <chk_lock+0xa6>
 80080cc:	2300      	movs	r3, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20001e40 	.word	0x20001e40

080080e0 <enq_lock>:
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	607b      	str	r3, [r7, #4]
 80080ea:	e002      	b.n	80080f2 <enq_lock+0x12>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3301      	adds	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d806      	bhi.n	8008106 <enq_lock+0x26>
 80080f8:	4a09      	ldr	r2, [pc, #36]	; (8008120 <enq_lock+0x40>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	4413      	add	r3, r2
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f2      	bne.n	80080ec <enq_lock+0xc>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b02      	cmp	r3, #2
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20001e40 	.word	0x20001e40

08008124 <inc_lock>:
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	e01f      	b.n	8008174 <inc_lock+0x50>
 8008134:	4a41      	ldr	r2, [pc, #260]	; (800823c <inc_lock+0x118>)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	4413      	add	r3, r2
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d113      	bne.n	800816e <inc_lock+0x4a>
 8008146:	4a3d      	ldr	r2, [pc, #244]	; (800823c <inc_lock+0x118>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	429a      	cmp	r2, r3
 8008158:	d109      	bne.n	800816e <inc_lock+0x4a>
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <inc_lock+0x118>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	4413      	add	r3, r2
 8008162:	3308      	adds	r3, #8
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	429a      	cmp	r2, r3
 800816c:	d006      	beq.n	800817c <inc_lock+0x58>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3301      	adds	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d9dc      	bls.n	8008134 <inc_lock+0x10>
 800817a:	e000      	b.n	800817e <inc_lock+0x5a>
 800817c:	bf00      	nop
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d132      	bne.n	80081ea <inc_lock+0xc6>
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e002      	b.n	8008190 <inc_lock+0x6c>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d806      	bhi.n	80081a4 <inc_lock+0x80>
 8008196:	4a29      	ldr	r2, [pc, #164]	; (800823c <inc_lock+0x118>)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	4413      	add	r3, r2
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1f2      	bne.n	800818a <inc_lock+0x66>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d101      	bne.n	80081ae <inc_lock+0x8a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	e040      	b.n	8008230 <inc_lock+0x10c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4922      	ldr	r1, [pc, #136]	; (800823c <inc_lock+0x118>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	440b      	add	r3, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	491e      	ldr	r1, [pc, #120]	; (800823c <inc_lock+0x118>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	440b      	add	r3, r1
 80081c8:	3304      	adds	r3, #4
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	695a      	ldr	r2, [r3, #20]
 80081d0:	491a      	ldr	r1, [pc, #104]	; (800823c <inc_lock+0x118>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	440b      	add	r3, r1
 80081d8:	3308      	adds	r3, #8
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	4a17      	ldr	r2, [pc, #92]	; (800823c <inc_lock+0x118>)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	4413      	add	r3, r2
 80081e4:	330c      	adds	r3, #12
 80081e6:	2200      	movs	r2, #0
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d009      	beq.n	8008204 <inc_lock+0xe0>
 80081f0:	4a12      	ldr	r2, [pc, #72]	; (800823c <inc_lock+0x118>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	4413      	add	r3, r2
 80081f8:	330c      	adds	r3, #12
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <inc_lock+0xe0>
 8008200:	2300      	movs	r3, #0
 8008202:	e015      	b.n	8008230 <inc_lock+0x10c>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d108      	bne.n	800821c <inc_lock+0xf8>
 800820a:	4a0c      	ldr	r2, [pc, #48]	; (800823c <inc_lock+0x118>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	4413      	add	r3, r2
 8008212:	330c      	adds	r3, #12
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	e001      	b.n	8008220 <inc_lock+0xfc>
 800821c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008220:	4906      	ldr	r1, [pc, #24]	; (800823c <inc_lock+0x118>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	440b      	add	r3, r1
 8008228:	330c      	adds	r3, #12
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20001e40 	.word	0x20001e40

08008240 <dec_lock>:
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3b01      	subs	r3, #1
 800824c:	607b      	str	r3, [r7, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d825      	bhi.n	80082a0 <dec_lock+0x60>
 8008254:	4a17      	ldr	r2, [pc, #92]	; (80082b4 <dec_lock+0x74>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4413      	add	r3, r2
 800825c:	330c      	adds	r3, #12
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	81fb      	strh	r3, [r7, #14]
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008268:	d101      	bne.n	800826e <dec_lock+0x2e>
 800826a:	2300      	movs	r3, #0
 800826c:	81fb      	strh	r3, [r7, #14]
 800826e:	89fb      	ldrh	r3, [r7, #14]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <dec_lock+0x3a>
 8008274:	89fb      	ldrh	r3, [r7, #14]
 8008276:	3b01      	subs	r3, #1
 8008278:	81fb      	strh	r3, [r7, #14]
 800827a:	4a0e      	ldr	r2, [pc, #56]	; (80082b4 <dec_lock+0x74>)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	4413      	add	r3, r2
 8008282:	330c      	adds	r3, #12
 8008284:	89fa      	ldrh	r2, [r7, #14]
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	89fb      	ldrh	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d105      	bne.n	800829a <dec_lock+0x5a>
 800828e:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <dec_lock+0x74>)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	4413      	add	r3, r2
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	737b      	strb	r3, [r7, #13]
 800829e:	e001      	b.n	80082a4 <dec_lock+0x64>
 80082a0:	2302      	movs	r3, #2
 80082a2:	737b      	strb	r3, [r7, #13]
 80082a4:	7b7b      	ldrb	r3, [r7, #13]
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20001e40 	.word	0x20001e40

080082b8 <clear_lock>:
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e010      	b.n	80082e8 <clear_lock+0x30>
 80082c6:	4a0d      	ldr	r2, [pc, #52]	; (80082fc <clear_lock+0x44>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	4413      	add	r3, r2
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d105      	bne.n	80082e2 <clear_lock+0x2a>
 80082d6:	4a09      	ldr	r2, [pc, #36]	; (80082fc <clear_lock+0x44>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	4413      	add	r3, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d9eb      	bls.n	80082c6 <clear_lock+0xe>
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20001e40 	.word	0x20001e40

08008300 <sync_window>:
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d034      	beq.n	800837e <sync_window+0x7e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	7858      	ldrb	r0, [r3, #1]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008324:	2301      	movs	r3, #1
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	f7ff fd0e 	bl	8007d48 <disk_write>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <sync_window+0x38>
 8008332:	2301      	movs	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
 8008336:	e022      	b.n	800837e <sync_window+0x7e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	70da      	strb	r2, [r3, #3]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	429a      	cmp	r2, r3
 800834c:	d217      	bcs.n	800837e <sync_window+0x7e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	789b      	ldrb	r3, [r3, #2]
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	e010      	b.n	8008378 <sync_window+0x78>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4413      	add	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7858      	ldrb	r0, [r3, #1]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800836a:	2301      	movs	r3, #1
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	f7ff fceb 	bl	8007d48 <disk_write>
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3b01      	subs	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d8eb      	bhi.n	8008356 <sync_window+0x56>
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <move_window>:
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d01b      	beq.n	80083d8 <move_window+0x50>
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff ffad 	bl	8008300 <sync_window>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73fb      	strb	r3, [r7, #15]
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d113      	bne.n	80083d8 <move_window+0x50>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	7858      	ldrb	r0, [r3, #1]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083ba:	2301      	movs	r3, #1
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	f7ff fca3 	bl	8007d08 <disk_read>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <move_window+0x4a>
 80083c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <sync_fs>:
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ff87 	bl	8008300 <sync_window>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d158      	bne.n	80084ae <sync_fs+0xca>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d148      	bne.n	8008496 <sync_fs+0xb2>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	791b      	ldrb	r3, [r3, #4]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d144      	bne.n	8008496 <sync_fs+0xb2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3334      	adds	r3, #52	; 0x34
 8008410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff fd77 	bl	8007f0a <mem_set>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3334      	adds	r3, #52	; 0x34
 8008420:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008424:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff fd06 	bl	8007e3a <st_word>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3334      	adds	r3, #52	; 0x34
 8008432:	4921      	ldr	r1, [pc, #132]	; (80084b8 <sync_fs+0xd4>)
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff fd1b 	bl	8007e70 <st_dword>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3334      	adds	r3, #52	; 0x34
 800843e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008442:	491e      	ldr	r1, [pc, #120]	; (80084bc <sync_fs+0xd8>)
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fd13 	bl	8007e70 <st_dword>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3334      	adds	r3, #52	; 0x34
 800844e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7ff fd09 	bl	8007e70 <st_dword>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3334      	adds	r3, #52	; 0x34
 8008462:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7ff fcff 	bl	8007e70 <st_dword>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7858      	ldrb	r0, [r3, #1]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848a:	2301      	movs	r3, #1
 800848c:	f7ff fc5c 	bl	8007d48 <disk_write>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	711a      	strb	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff fc72 	bl	8007d88 <disk_ioctl>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <sync_fs+0xca>
 80084aa:	2301      	movs	r3, #1
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	41615252 	.word	0x41615252
 80084bc:	61417272 	.word	0x61417272

080084c0 <clust2sect>:
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	3b02      	subs	r3, #2
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	3b02      	subs	r3, #2
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d301      	bcc.n	80084e0 <clust2sect+0x20>
 80084dc:	2300      	movs	r3, #0
 80084de:	e008      	b.n	80084f2 <clust2sect+0x32>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	895b      	ldrh	r3, [r3, #10]
 80084e4:	461a      	mov	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	fb03 f202 	mul.w	r2, r3, r2
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	4413      	add	r3, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <get_fat>:
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d904      	bls.n	800851e <get_fat+0x20>
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <get_fat+0x26>
 800851e:	2301      	movs	r3, #1
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e08f      	b.n	8008644 <get_fat+0x146>
 8008524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d062      	beq.n	80085f8 <get_fat+0xfa>
 8008532:	2b03      	cmp	r3, #3
 8008534:	dc7c      	bgt.n	8008630 <get_fat+0x132>
 8008536:	2b01      	cmp	r3, #1
 8008538:	d002      	beq.n	8008540 <get_fat+0x42>
 800853a:	2b02      	cmp	r3, #2
 800853c:	d042      	beq.n	80085c4 <get_fat+0xc6>
 800853e:	e077      	b.n	8008630 <get_fat+0x132>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	0a5b      	lsrs	r3, r3, #9
 8008556:	4413      	add	r3, r2
 8008558:	4619      	mov	r1, r3
 800855a:	6938      	ldr	r0, [r7, #16]
 800855c:	f7ff ff14 	bl	8008388 <move_window>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d167      	bne.n	8008636 <get_fat+0x138>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	60fa      	str	r2, [r7, #12]
 800856c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4413      	add	r3, r2
 8008574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	0a5b      	lsrs	r3, r3, #9
 8008582:	4413      	add	r3, r2
 8008584:	4619      	mov	r1, r3
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f7ff fefe 	bl	8008388 <move_window>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d153      	bne.n	800863a <get_fat+0x13c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	461a      	mov	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60bb      	str	r3, [r7, #8]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <get_fat+0xbc>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	091b      	lsrs	r3, r3, #4
 80085b8:	e002      	b.n	80085c0 <get_fat+0xc2>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e03f      	b.n	8008644 <get_fat+0x146>
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	4413      	add	r3, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	6938      	ldr	r0, [r7, #16]
 80085d2:	f7ff fed9 	bl	8008388 <move_window>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d130      	bne.n	800863e <get_fat+0x140>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80085ea:	4413      	add	r3, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff fbe9 	bl	8007dc4 <ld_word>
 80085f2:	4603      	mov	r3, r0
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e025      	b.n	8008644 <get_fat+0x146>
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	09db      	lsrs	r3, r3, #7
 8008600:	4413      	add	r3, r2
 8008602:	4619      	mov	r1, r3
 8008604:	6938      	ldr	r0, [r7, #16]
 8008606:	f7ff febf 	bl	8008388 <move_window>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d118      	bne.n	8008642 <get_fat+0x144>
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800861e:	4413      	add	r3, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fbe7 	bl	8007df4 <ld_dword>
 8008626:	4603      	mov	r3, r0
 8008628:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e009      	b.n	8008644 <get_fat+0x146>
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e006      	b.n	8008644 <get_fat+0x146>
 8008636:	bf00      	nop
 8008638:	e004      	b.n	8008644 <get_fat+0x146>
 800863a:	bf00      	nop
 800863c:	e002      	b.n	8008644 <get_fat+0x146>
 800863e:	bf00      	nop
 8008640:	e000      	b.n	8008644 <get_fat+0x146>
 8008642:	bf00      	nop
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <put_fat>:
 800864e:	b590      	push	{r4, r7, lr}
 8008650:	b089      	sub	sp, #36	; 0x24
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	2302      	movs	r3, #2
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b01      	cmp	r3, #1
 8008662:	f240 80d9 	bls.w	8008818 <put_fat+0x1ca>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	f080 80d3 	bcs.w	8008818 <put_fat+0x1ca>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b03      	cmp	r3, #3
 8008678:	f000 8096 	beq.w	80087a8 <put_fat+0x15a>
 800867c:	2b03      	cmp	r3, #3
 800867e:	f300 80cb 	bgt.w	8008818 <put_fat+0x1ca>
 8008682:	2b01      	cmp	r3, #1
 8008684:	d002      	beq.n	800868c <put_fat+0x3e>
 8008686:	2b02      	cmp	r3, #2
 8008688:	d06e      	beq.n	8008768 <put_fat+0x11a>
 800868a:	e0c5      	b.n	8008818 <put_fat+0x1ca>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4413      	add	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	0a5b      	lsrs	r3, r3, #9
 80086a2:	4413      	add	r3, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff fe6e 	bl	8008388 <move_window>
 80086ac:	4603      	mov	r3, r0
 80086ae:	77fb      	strb	r3, [r7, #31]
 80086b0:	7ffb      	ldrb	r3, [r7, #31]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 80a9 	bne.w	800880a <put_fat+0x1bc>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	61b9      	str	r1, [r7, #24]
 80086c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c8:	4413      	add	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00d      	beq.n	80086f2 <put_fat+0xa4>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	b25a      	sxtb	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	011b      	lsls	r3, r3, #4
 80086e8:	b25b      	sxtb	r3, r3
 80086ea:	4313      	orrs	r3, r2
 80086ec:	b25b      	sxtb	r3, r3
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	e001      	b.n	80086f6 <put_fat+0xa8>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	7013      	strb	r3, [r2, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	70da      	strb	r2, [r3, #3]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	0a5b      	lsrs	r3, r3, #9
 8008708:	4413      	add	r3, r2
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7ff fe3b 	bl	8008388 <move_window>
 8008712:	4603      	mov	r3, r0
 8008714:	77fb      	strb	r3, [r7, #31]
 8008716:	7ffb      	ldrb	r3, [r7, #31]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d178      	bne.n	800880e <put_fat+0x1c0>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008728:	4413      	add	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <put_fat+0xf0>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	091b      	lsrs	r3, r3, #4
 800873a:	b2db      	uxtb	r3, r3
 800873c:	e00e      	b.n	800875c <put_fat+0x10e>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b25b      	sxtb	r3, r3
 8008744:	f023 030f 	bic.w	r3, r3, #15
 8008748:	b25a      	sxtb	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	b25b      	sxtb	r3, r3
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	b25b      	sxtb	r3, r3
 8008756:	4313      	orrs	r3, r2
 8008758:	b25b      	sxtb	r3, r3
 800875a:	b2db      	uxtb	r3, r3
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	7013      	strb	r3, [r2, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	70da      	strb	r2, [r3, #3]
 8008766:	e057      	b.n	8008818 <put_fat+0x1ca>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	4413      	add	r3, r2
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fe07 	bl	8008388 <move_window>
 800877a:	4603      	mov	r3, r0
 800877c:	77fb      	strb	r3, [r7, #31]
 800877e:	7ffb      	ldrb	r3, [r7, #31]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d146      	bne.n	8008812 <put_fat+0x1c4>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008792:	4413      	add	r3, r2
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	b292      	uxth	r2, r2
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fb4d 	bl	8007e3a <st_word>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	70da      	strb	r2, [r3, #3]
 80087a6:	e037      	b.n	8008818 <put_fat+0x1ca>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	09db      	lsrs	r3, r3, #7
 80087b0:	4413      	add	r3, r2
 80087b2:	4619      	mov	r1, r3
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff fde7 	bl	8008388 <move_window>
 80087ba:	4603      	mov	r3, r0
 80087bc:	77fb      	strb	r3, [r7, #31]
 80087be:	7ffb      	ldrb	r3, [r7, #31]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d128      	bne.n	8008816 <put_fat+0x1c8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80087d8:	4413      	add	r3, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff fb0a 	bl	8007df4 <ld_dword>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087e6:	4323      	orrs	r3, r4
 80087e8:	607b      	str	r3, [r7, #4]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80087f8:	4413      	add	r3, r2
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fb37 	bl	8007e70 <st_dword>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	70da      	strb	r2, [r3, #3]
 8008808:	e006      	b.n	8008818 <put_fat+0x1ca>
 800880a:	bf00      	nop
 800880c:	e004      	b.n	8008818 <put_fat+0x1ca>
 800880e:	bf00      	nop
 8008810:	e002      	b.n	8008818 <put_fat+0x1ca>
 8008812:	bf00      	nop
 8008814:	e000      	b.n	8008818 <put_fat+0x1ca>
 8008816:	bf00      	nop
 8008818:	7ffb      	ldrb	r3, [r7, #31]
 800881a:	4618      	mov	r0, r3
 800881c:	3724      	adds	r7, #36	; 0x24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd90      	pop	{r4, r7, pc}

08008822 <remove_chain>:
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	2300      	movs	r3, #0
 8008830:	77fb      	strb	r3, [r7, #31]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	61bb      	str	r3, [r7, #24]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d904      	bls.n	8008848 <remove_chain+0x26>
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	429a      	cmp	r2, r3
 8008846:	d301      	bcc.n	800884c <remove_chain+0x2a>
 8008848:	2302      	movs	r3, #2
 800884a:	e04b      	b.n	80088e4 <remove_chain+0xc2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00c      	beq.n	800886c <remove_chain+0x4a>
 8008852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	69b8      	ldr	r0, [r7, #24]
 800885a:	f7ff fef8 	bl	800864e <put_fat>
 800885e:	4603      	mov	r3, r0
 8008860:	77fb      	strb	r3, [r7, #31]
 8008862:	7ffb      	ldrb	r3, [r7, #31]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <remove_chain+0x4a>
 8008868:	7ffb      	ldrb	r3, [r7, #31]
 800886a:	e03b      	b.n	80088e4 <remove_chain+0xc2>
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fe45 	bl	80084fe <get_fat>
 8008874:	6178      	str	r0, [r7, #20]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d031      	beq.n	80088e0 <remove_chain+0xbe>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <remove_chain+0x64>
 8008882:	2302      	movs	r3, #2
 8008884:	e02e      	b.n	80088e4 <remove_chain+0xc2>
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888c:	d101      	bne.n	8008892 <remove_chain+0x70>
 800888e:	2301      	movs	r3, #1
 8008890:	e028      	b.n	80088e4 <remove_chain+0xc2>
 8008892:	2200      	movs	r2, #0
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	69b8      	ldr	r0, [r7, #24]
 8008898:	f7ff fed9 	bl	800864e <put_fat>
 800889c:	4603      	mov	r3, r0
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	7ffb      	ldrb	r3, [r7, #31]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <remove_chain+0x88>
 80088a6:	7ffb      	ldrb	r3, [r7, #31]
 80088a8:	e01c      	b.n	80088e4 <remove_chain+0xc2>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	3b02      	subs	r3, #2
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d20b      	bcs.n	80088d0 <remove_chain+0xae>
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	615a      	str	r2, [r3, #20]
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	711a      	strb	r2, [r3, #4]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	60bb      	str	r3, [r7, #8]
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d3c6      	bcc.n	800886c <remove_chain+0x4a>
 80088de:	e000      	b.n	80088e2 <remove_chain+0xc0>
 80088e0:	bf00      	nop
 80088e2:	2300      	movs	r3, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	3720      	adds	r7, #32
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <create_chain>:
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <create_chain+0x32>
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <create_chain+0x2c>
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	429a      	cmp	r2, r3
 8008916:	d31b      	bcc.n	8008950 <create_chain+0x64>
 8008918:	2301      	movs	r3, #1
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e018      	b.n	8008950 <create_chain+0x64>
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff fdec 	bl	80084fe <get_fat>
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d801      	bhi.n	8008932 <create_chain+0x46>
 800892e:	2301      	movs	r3, #1
 8008930:	e070      	b.n	8008a14 <create_chain+0x128>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008938:	d101      	bne.n	800893e <create_chain+0x52>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	e06a      	b.n	8008a14 <create_chain+0x128>
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d201      	bcs.n	800894c <create_chain+0x60>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	e063      	b.n	8008a14 <create_chain+0x128>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	3301      	adds	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	429a      	cmp	r2, r3
 8008962:	d307      	bcc.n	8008974 <create_chain+0x88>
 8008964:	2302      	movs	r3, #2
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	d901      	bls.n	8008974 <create_chain+0x88>
 8008970:	2300      	movs	r3, #0
 8008972:	e04f      	b.n	8008a14 <create_chain+0x128>
 8008974:	69f9      	ldr	r1, [r7, #28]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fdc1 	bl	80084fe <get_fat>
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00e      	beq.n	80089a2 <create_chain+0xb6>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d003      	beq.n	8008992 <create_chain+0xa6>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008990:	d101      	bne.n	8008996 <create_chain+0xaa>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	e03e      	b.n	8008a14 <create_chain+0x128>
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	429a      	cmp	r2, r3
 800899c:	d1da      	bne.n	8008954 <create_chain+0x68>
 800899e:	2300      	movs	r3, #0
 80089a0:	e038      	b.n	8008a14 <create_chain+0x128>
 80089a2:	bf00      	nop
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a8:	69f9      	ldr	r1, [r7, #28]
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7ff fe4f 	bl	800864e <put_fat>
 80089b0:	4603      	mov	r3, r0
 80089b2:	75fb      	strb	r3, [r7, #23]
 80089b4:	7dfb      	ldrb	r3, [r7, #23]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d109      	bne.n	80089ce <create_chain+0xe2>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d006      	beq.n	80089ce <create_chain+0xe2>
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6938      	ldr	r0, [r7, #16]
 80089c6:	f7ff fe42 	bl	800864e <put_fat>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d116      	bne.n	8008a02 <create_chain+0x116>
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	611a      	str	r2, [r3, #16]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	695a      	ldr	r2, [r3, #20]
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	3b02      	subs	r3, #2
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d804      	bhi.n	80089f2 <create_chain+0x106>
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	1e5a      	subs	r2, r3, #1
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	615a      	str	r2, [r3, #20]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	791b      	ldrb	r3, [r3, #4]
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	711a      	strb	r2, [r3, #4]
 8008a00:	e007      	b.n	8008a12 <create_chain+0x126>
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d102      	bne.n	8008a0e <create_chain+0x122>
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0c:	e000      	b.n	8008a10 <create_chain+0x124>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <clmt_clust>:
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	3304      	adds	r3, #4
 8008a32:	613b      	str	r3, [r7, #16]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	0a5b      	lsrs	r3, r3, #9
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	8952      	ldrh	r2, [r2, #10]
 8008a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	613a      	str	r2, [r7, #16]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60bb      	str	r3, [r7, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <clmt_clust+0x3a>
 8008a52:	2300      	movs	r3, #0
 8008a54:	e010      	b.n	8008a78 <clmt_clust+0x5c>
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d307      	bcc.n	8008a6e <clmt_clust+0x52>
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	e7e9      	b.n	8008a42 <clmt_clust+0x26>
 8008a6e:	bf00      	nop
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <dir_sdi>:
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9a:	d204      	bcs.n	8008aa6 <dir_sdi+0x22>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <dir_sdi+0x26>
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e063      	b.n	8008b72 <dir_sdi+0xee>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	615a      	str	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d106      	bne.n	8008aca <dir_sdi+0x46>
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d902      	bls.n	8008aca <dir_sdi+0x46>
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10c      	bne.n	8008aea <dir_sdi+0x66>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	8912      	ldrh	r2, [r2, #8]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d301      	bcc.n	8008ae0 <dir_sdi+0x5c>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e048      	b.n	8008b72 <dir_sdi+0xee>
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	61da      	str	r2, [r3, #28]
 8008ae8:	e029      	b.n	8008b3e <dir_sdi+0xba>
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	895b      	ldrh	r3, [r3, #10]
 8008aee:	025b      	lsls	r3, r3, #9
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	e019      	b.n	8008b28 <dir_sdi+0xa4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6979      	ldr	r1, [r7, #20]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff fd00 	bl	80084fe <get_fat>
 8008afe:	6178      	str	r0, [r7, #20]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b06:	d101      	bne.n	8008b0c <dir_sdi+0x88>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e032      	b.n	8008b72 <dir_sdi+0xee>
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d904      	bls.n	8008b1c <dir_sdi+0x98>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d301      	bcc.n	8008b20 <dir_sdi+0x9c>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e028      	b.n	8008b72 <dir_sdi+0xee>
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d2e1      	bcs.n	8008af4 <dir_sdi+0x70>
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	6938      	ldr	r0, [r7, #16]
 8008b34:	f7ff fcc4 	bl	80084c0 <clust2sect>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	61da      	str	r2, [r3, #28]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	619a      	str	r2, [r3, #24]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <dir_sdi+0xcc>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e010      	b.n	8008b72 <dir_sdi+0xee>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69da      	ldr	r2, [r3, #28]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	0a5b      	lsrs	r3, r3, #9
 8008b58:	441a      	add	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	61da      	str	r2, [r3, #28]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6a:	441a      	add	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	621a      	str	r2, [r3, #32]
 8008b70:	2300      	movs	r3, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <dir_next>:
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	3320      	adds	r3, #32
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <dir_next+0x28>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ba0:	d301      	bcc.n	8008ba6 <dir_next+0x2c>
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	e0aa      	b.n	8008cfc <dir_next+0x182>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8098 	bne.w	8008ce2 <dir_next+0x168>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	61da      	str	r2, [r3, #28]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <dir_next+0x62>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	8912      	ldrh	r2, [r2, #8]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	f0c0 8088 	bcc.w	8008ce2 <dir_next+0x168>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
 8008bd8:	2304      	movs	r3, #4
 8008bda:	e08f      	b.n	8008cfc <dir_next+0x182>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	0a5b      	lsrs	r3, r3, #9
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	8952      	ldrh	r2, [r2, #10]
 8008be4:	3a01      	subs	r2, #1
 8008be6:	4013      	ands	r3, r2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d17a      	bne.n	8008ce2 <dir_next+0x168>
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7ff fc82 	bl	80084fe <get_fat>
 8008bfa:	6178      	str	r0, [r7, #20]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d801      	bhi.n	8008c06 <dir_next+0x8c>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e07a      	b.n	8008cfc <dir_next+0x182>
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0c:	d101      	bne.n	8008c12 <dir_next+0x98>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e074      	b.n	8008cfc <dir_next+0x182>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d358      	bcc.n	8008cce <dir_next+0x154>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <dir_next+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	61da      	str	r2, [r3, #28]
 8008c28:	2304      	movs	r3, #4
 8008c2a:	e067      	b.n	8008cfc <dir_next+0x182>
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7ff fe59 	bl	80088ec <create_chain>
 8008c3a:	6178      	str	r0, [r7, #20]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <dir_next+0xcc>
 8008c42:	2307      	movs	r3, #7
 8008c44:	e05a      	b.n	8008cfc <dir_next+0x182>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <dir_next+0xd6>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e055      	b.n	8008cfc <dir_next+0x182>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c56:	d101      	bne.n	8008c5c <dir_next+0xe2>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e04f      	b.n	8008cfc <dir_next+0x182>
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff fb4f 	bl	8008300 <sync_window>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <dir_next+0xf2>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e047      	b.n	8008cfc <dir_next+0x182>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3334      	adds	r3, #52	; 0x34
 8008c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff f947 	bl	8007f0a <mem_set>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	6979      	ldr	r1, [r7, #20]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7ff fc1c 	bl	80084c0 <clust2sect>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008c8e:	e012      	b.n	8008cb6 <dir_next+0x13c>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	70da      	strb	r2, [r3, #3]
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fb32 	bl	8008300 <sync_window>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <dir_next+0x12c>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e02a      	b.n	8008cfc <dir_next+0x182>
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	895b      	ldrh	r3, [r3, #10]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d3e6      	bcc.n	8008c90 <dir_next+0x116>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad2      	subs	r2, r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	619a      	str	r2, [r3, #24]
 8008cd4:	6979      	ldr	r1, [r7, #20]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fbf2 	bl	80084c0 <clust2sect>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	61da      	str	r2, [r3, #28]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	615a      	str	r2, [r3, #20]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	441a      	add	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	621a      	str	r2, [r3, #32]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <dir_alloc>:
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	2100      	movs	r1, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff feb4 	bl	8008a84 <dir_sdi>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d12b      	bne.n	8008d7e <dir_alloc+0x7a>
 8008d26:	2300      	movs	r3, #0
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff fb29 	bl	8008388 <move_window>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11d      	bne.n	8008d7c <dir_alloc+0x78>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2be5      	cmp	r3, #229	; 0xe5
 8008d48:	d004      	beq.n	8008d54 <dir_alloc+0x50>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d107      	bne.n	8008d64 <dir_alloc+0x60>
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	3301      	adds	r3, #1
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d102      	bne.n	8008d68 <dir_alloc+0x64>
 8008d62:	e00c      	b.n	8008d7e <dir_alloc+0x7a>
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	2101      	movs	r1, #1
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ff05 	bl	8008b7a <dir_next>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0d7      	beq.n	8008d2a <dir_alloc+0x26>
 8008d7a:	e000      	b.n	8008d7e <dir_alloc+0x7a>
 8008d7c:	bf00      	nop
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d101      	bne.n	8008d88 <dir_alloc+0x84>
 8008d84:	2307      	movs	r3, #7
 8008d86:	75fb      	strb	r3, [r7, #23]
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <ld_clust>:
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	331a      	adds	r3, #26
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7ff f80f 	bl	8007dc4 <ld_word>
 8008da6:	4603      	mov	r3, r0
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d109      	bne.n	8008dc6 <ld_clust+0x34>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	3314      	adds	r3, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff f804 	bl	8007dc4 <ld_word>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <st_clust>:
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	331a      	adds	r3, #26
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	b292      	uxth	r2, r2
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff f827 	bl	8007e3a <st_word>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d109      	bne.n	8008e08 <st_clust+0x38>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f103 0214 	add.w	r2, r3, #20
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	0c1b      	lsrs	r3, r3, #16
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f7ff f819 	bl	8007e3a <st_word>
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <dir_find>:
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fe2f 	bl	8008a84 <dir_sdi>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75fb      	strb	r3, [r7, #23]
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <dir_find+0x24>
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	e03e      	b.n	8008eb2 <dir_find+0xa2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6938      	ldr	r0, [r7, #16]
 8008e3c:	f7ff faa4 	bl	8008388 <move_window>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d12f      	bne.n	8008eaa <dir_find+0x9a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d102      	bne.n	8008e5e <dir_find+0x4e>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	75fb      	strb	r3, [r7, #23]
 8008e5c:	e028      	b.n	8008eb0 <dir_find+0xa0>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	330b      	adds	r3, #11
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	719a      	strb	r2, [r3, #6]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	330b      	adds	r3, #11
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <dir_find+0x86>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a18      	ldr	r0, [r3, #32]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3324      	adds	r3, #36	; 0x24
 8008e88:	220b      	movs	r2, #11
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f7ff f858 	bl	8007f40 <mem_cmp>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <dir_find+0x9e>
 8008e96:	2100      	movs	r1, #0
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff fe6e 	bl	8008b7a <dir_next>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c5      	beq.n	8008e34 <dir_find+0x24>
 8008ea8:	e002      	b.n	8008eb0 <dir_find+0xa0>
 8008eaa:	bf00      	nop
 8008eac:	e000      	b.n	8008eb0 <dir_find+0xa0>
 8008eae:	bf00      	nop
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <dir_register>:
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60bb      	str	r3, [r7, #8]
 8008ec8:	2101      	movs	r1, #1
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff ff1a 	bl	8008d04 <dir_alloc>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d11c      	bne.n	8008f14 <dir_register+0x5a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	68b8      	ldr	r0, [r7, #8]
 8008ee2:	f7ff fa51 	bl	8008388 <move_window>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d111      	bne.n	8008f14 <dir_register+0x5a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff f806 	bl	8007f0a <mem_set>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a18      	ldr	r0, [r3, #32]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3324      	adds	r3, #36	; 0x24
 8008f06:	220b      	movs	r2, #11
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f7fe ffdd 	bl	8007ec8 <mem_cpy>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2201      	movs	r2, #1
 8008f12:	70da      	strb	r2, [r3, #3]
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <create_name>:
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3324      	adds	r3, #36	; 0x24
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	220b      	movs	r2, #11
 8008f38:	2120      	movs	r1, #32
 8008f3a:	68b8      	ldr	r0, [r7, #8]
 8008f3c:	f7fe ffe5 	bl	8007f0a <mem_set>
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	61fb      	str	r3, [r7, #28]
 8008f48:	2308      	movs	r3, #8
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	61fa      	str	r2, [r7, #28]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	76fb      	strb	r3, [r7, #27]
 8008f5a:	7efb      	ldrb	r3, [r7, #27]
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d94e      	bls.n	8008ffe <create_name+0xde>
 8008f60:	7efb      	ldrb	r3, [r7, #27]
 8008f62:	2b2f      	cmp	r3, #47	; 0x2f
 8008f64:	d006      	beq.n	8008f74 <create_name+0x54>
 8008f66:	7efb      	ldrb	r3, [r7, #27]
 8008f68:	2b5c      	cmp	r3, #92	; 0x5c
 8008f6a:	d110      	bne.n	8008f8e <create_name+0x6e>
 8008f6c:	e002      	b.n	8008f74 <create_name+0x54>
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b2f      	cmp	r3, #47	; 0x2f
 8008f7e:	d0f6      	beq.n	8008f6e <create_name+0x4e>
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b5c      	cmp	r3, #92	; 0x5c
 8008f8a:	d0f0      	beq.n	8008f6e <create_name+0x4e>
 8008f8c:	e038      	b.n	8009000 <create_name+0xe0>
 8008f8e:	7efb      	ldrb	r3, [r7, #27]
 8008f90:	2b2e      	cmp	r3, #46	; 0x2e
 8008f92:	d003      	beq.n	8008f9c <create_name+0x7c>
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d30c      	bcc.n	8008fb6 <create_name+0x96>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b0b      	cmp	r3, #11
 8008fa0:	d002      	beq.n	8008fa8 <create_name+0x88>
 8008fa2:	7efb      	ldrb	r3, [r7, #27]
 8008fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa6:	d001      	beq.n	8008fac <create_name+0x8c>
 8008fa8:	2306      	movs	r3, #6
 8008faa:	e044      	b.n	8009036 <create_name+0x116>
 8008fac:	2308      	movs	r3, #8
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	230b      	movs	r3, #11
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	e022      	b.n	8008ffc <create_name+0xdc>
 8008fb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da04      	bge.n	8008fc8 <create_name+0xa8>
 8008fbe:	7efb      	ldrb	r3, [r7, #27]
 8008fc0:	3b80      	subs	r3, #128	; 0x80
 8008fc2:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <create_name+0x120>)
 8008fc4:	5cd3      	ldrb	r3, [r2, r3]
 8008fc6:	76fb      	strb	r3, [r7, #27]
 8008fc8:	7efb      	ldrb	r3, [r7, #27]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	481d      	ldr	r0, [pc, #116]	; (8009044 <create_name+0x124>)
 8008fce:	f7fe ffde 	bl	8007f8e <chk_chr>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <create_name+0xbc>
 8008fd8:	2306      	movs	r3, #6
 8008fda:	e02c      	b.n	8009036 <create_name+0x116>
 8008fdc:	7efb      	ldrb	r3, [r7, #27]
 8008fde:	2b60      	cmp	r3, #96	; 0x60
 8008fe0:	d905      	bls.n	8008fee <create_name+0xce>
 8008fe2:	7efb      	ldrb	r3, [r7, #27]
 8008fe4:	2b7a      	cmp	r3, #122	; 0x7a
 8008fe6:	d802      	bhi.n	8008fee <create_name+0xce>
 8008fe8:	7efb      	ldrb	r3, [r7, #27]
 8008fea:	3b20      	subs	r3, #32
 8008fec:	76fb      	strb	r3, [r7, #27]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	613a      	str	r2, [r7, #16]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	7efa      	ldrb	r2, [r7, #27]
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e7a6      	b.n	8008f4c <create_name+0x2c>
 8008ffe:	bf00      	nop
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	441a      	add	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <create_name+0xf4>
 8009010:	2306      	movs	r3, #6
 8009012:	e010      	b.n	8009036 <create_name+0x116>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2be5      	cmp	r3, #229	; 0xe5
 800901a:	d102      	bne.n	8009022 <create_name+0x102>
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2205      	movs	r2, #5
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	7efb      	ldrb	r3, [r7, #27]
 8009024:	2b20      	cmp	r3, #32
 8009026:	d801      	bhi.n	800902c <create_name+0x10c>
 8009028:	2204      	movs	r2, #4
 800902a:	e000      	b.n	800902e <create_name+0x10e>
 800902c:	2200      	movs	r2, #0
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	330b      	adds	r3, #11
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	2300      	movs	r3, #0
 8009036:	4618      	mov	r0, r3
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	08010d14 	.word	0x08010d14
 8009044:	08010c9c 	.word	0x08010c9c

08009048 <follow_path>:
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	e002      	b.n	8009064 <follow_path+0x1c>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b2f      	cmp	r3, #47	; 0x2f
 800906a:	d0f8      	beq.n	800905e <follow_path+0x16>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b5c      	cmp	r3, #92	; 0x5c
 8009072:	d0f4      	beq.n	800905e <follow_path+0x16>
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2200      	movs	r2, #0
 8009078:	609a      	str	r2, [r3, #8]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b1f      	cmp	r3, #31
 8009080:	d80a      	bhi.n	8009098 <follow_path+0x50>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2280      	movs	r2, #128	; 0x80
 8009086:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff fcf9 	bl	8008a84 <dir_sdi>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]
 8009096:	e043      	b.n	8009120 <follow_path+0xd8>
 8009098:	463b      	mov	r3, r7
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff ff3f 	bl	8008f20 <create_name>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d134      	bne.n	8009116 <follow_path+0xce>
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff feaf 	bl	8008e10 <dir_find>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090bc:	72fb      	strb	r3, [r7, #11]
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <follow_path+0x92>
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d127      	bne.n	800911a <follow_path+0xd2>
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d122      	bne.n	800911a <follow_path+0xd2>
 80090d4:	2305      	movs	r3, #5
 80090d6:	75fb      	strb	r3, [r7, #23]
 80090d8:	e01f      	b.n	800911a <follow_path+0xd2>
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11c      	bne.n	800911e <follow_path+0xd6>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	799b      	ldrb	r3, [r3, #6]
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <follow_path+0xae>
 80090f0:	2305      	movs	r3, #5
 80090f2:	75fb      	strb	r3, [r7, #23]
 80090f4:	e014      	b.n	8009120 <follow_path+0xd8>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009104:	4413      	add	r3, r2
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7ff fe42 	bl	8008d92 <ld_clust>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	e7c0      	b.n	8009098 <follow_path+0x50>
 8009116:	bf00      	nop
 8009118:	e002      	b.n	8009120 <follow_path+0xd8>
 800911a:	bf00      	nop
 800911c:	e000      	b.n	8009120 <follow_path+0xd8>
 800911e:	bf00      	nop
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <get_ldnumber>:
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009136:	613b      	str	r3, [r7, #16]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d031      	beq.n	80091a4 <get_ldnumber+0x7a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e002      	b.n	800914e <get_ldnumber+0x24>
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	3301      	adds	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b20      	cmp	r3, #32
 8009154:	d903      	bls.n	800915e <get_ldnumber+0x34>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b3a      	cmp	r3, #58	; 0x3a
 800915c:	d1f4      	bne.n	8009148 <get_ldnumber+0x1e>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b3a      	cmp	r3, #58	; 0x3a
 8009164:	d11c      	bne.n	80091a0 <get_ldnumber+0x76>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	60fa      	str	r2, [r7, #12]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	3b30      	subs	r3, #48	; 0x30
 8009176:	60bb      	str	r3, [r7, #8]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b09      	cmp	r3, #9
 800917c:	d80e      	bhi.n	800919c <get_ldnumber+0x72>
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	429a      	cmp	r2, r3
 8009184:	d10a      	bne.n	800919c <get_ldnumber+0x72>
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d107      	bne.n	800919c <get_ldnumber+0x72>
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	3301      	adds	r3, #1
 8009194:	617b      	str	r3, [r7, #20]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	e002      	b.n	80091a6 <get_ldnumber+0x7c>
 80091a0:	2300      	movs	r3, #0
 80091a2:	613b      	str	r3, [r7, #16]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	4618      	mov	r0, r3
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
	...

080091b4 <check_fs>:
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	70da      	strb	r2, [r3, #3]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff f8da 	bl	8008388 <move_window>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <check_fs+0x2a>
 80091da:	2304      	movs	r3, #4
 80091dc:	e038      	b.n	8009250 <check_fs+0x9c>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3334      	adds	r3, #52	; 0x34
 80091e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fdec 	bl	8007dc4 <ld_word>
 80091ec:	4603      	mov	r3, r0
 80091ee:	461a      	mov	r2, r3
 80091f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <check_fs+0x48>
 80091f8:	2303      	movs	r3, #3
 80091fa:	e029      	b.n	8009250 <check_fs+0x9c>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009202:	2be9      	cmp	r3, #233	; 0xe9
 8009204:	d009      	beq.n	800921a <check_fs+0x66>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800920c:	2beb      	cmp	r3, #235	; 0xeb
 800920e:	d11e      	bne.n	800924e <check_fs+0x9a>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009216:	2b90      	cmp	r3, #144	; 0x90
 8009218:	d119      	bne.n	800924e <check_fs+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3334      	adds	r3, #52	; 0x34
 800921e:	3336      	adds	r3, #54	; 0x36
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fde7 	bl	8007df4 <ld_dword>
 8009226:	4603      	mov	r3, r0
 8009228:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <check_fs+0xa4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d101      	bne.n	8009236 <check_fs+0x82>
 8009232:	2300      	movs	r3, #0
 8009234:	e00c      	b.n	8009250 <check_fs+0x9c>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3334      	adds	r3, #52	; 0x34
 800923a:	3352      	adds	r3, #82	; 0x52
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fdd9 	bl	8007df4 <ld_dword>
 8009242:	4603      	mov	r3, r0
 8009244:	4a05      	ldr	r2, [pc, #20]	; (800925c <check_fs+0xa8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d101      	bne.n	800924e <check_fs+0x9a>
 800924a:	2300      	movs	r3, #0
 800924c:	e000      	b.n	8009250 <check_fs+0x9c>
 800924e:	2302      	movs	r3, #2
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	00544146 	.word	0x00544146
 800925c:	33544146 	.word	0x33544146

08009260 <find_volume>:
 8009260:	b580      	push	{r7, lr}
 8009262:	b096      	sub	sp, #88	; 0x58
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	71fb      	strb	r3, [r7, #7]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff ff58 	bl	800912a <get_ldnumber>
 800927a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	da01      	bge.n	8009286 <find_volume+0x26>
 8009282:	230b      	movs	r3, #11
 8009284:	e235      	b.n	80096f2 <find_volume+0x492>
 8009286:	4aa5      	ldr	r2, [pc, #660]	; (800951c <find_volume+0x2bc>)
 8009288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <find_volume+0x3a>
 8009296:	230c      	movs	r3, #12
 8009298:	e22b      	b.n	80096f2 <find_volume+0x492>
 800929a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800929c:	f7fe fe92 	bl	8007fc4 <lock_fs>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <find_volume+0x4a>
 80092a6:	230f      	movs	r3, #15
 80092a8:	e223      	b.n	80096f2 <find_volume+0x492>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01a      	beq.n	80092f6 <find_volume+0x96>
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fcdf 	bl	8007c88 <disk_status>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80092d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10c      	bne.n	80092f6 <find_volume+0x96>
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <find_volume+0x92>
 80092e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <find_volume+0x92>
 80092ee:	230a      	movs	r3, #10
 80092f0:	e1ff      	b.n	80096f2 <find_volume+0x492>
 80092f2:	2300      	movs	r3, #0
 80092f4:	e1fd      	b.n	80096f2 <find_volume+0x492>
 80092f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009302:	705a      	strb	r2, [r3, #1]
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fcd7 	bl	8007cbc <disk_initialize>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <find_volume+0xc4>
 8009320:	2303      	movs	r3, #3
 8009322:	e1e6      	b.n	80096f2 <find_volume+0x492>
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <find_volume+0xda>
 800932a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <find_volume+0xda>
 8009336:	230a      	movs	r3, #10
 8009338:	e1db      	b.n	80096f2 <find_volume+0x492>
 800933a:	2300      	movs	r3, #0
 800933c:	653b      	str	r3, [r7, #80]	; 0x50
 800933e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009342:	f7ff ff37 	bl	80091b4 <check_fs>
 8009346:	4603      	mov	r3, r0
 8009348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800934c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009350:	2b02      	cmp	r3, #2
 8009352:	d149      	bne.n	80093e8 <find_volume+0x188>
 8009354:	2300      	movs	r3, #0
 8009356:	643b      	str	r3, [r7, #64]	; 0x40
 8009358:	e01e      	b.n	8009398 <find_volume+0x138>
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009368:	4413      	add	r3, r2
 800936a:	633b      	str	r3, [r7, #48]	; 0x30
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	3304      	adds	r3, #4
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d006      	beq.n	8009384 <find_volume+0x124>
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	3308      	adds	r3, #8
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fd3a 	bl	8007df4 <ld_dword>
 8009380:	4602      	mov	r2, r0
 8009382:	e000      	b.n	8009386 <find_volume+0x126>
 8009384:	2200      	movs	r2, #0
 8009386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	3358      	adds	r3, #88	; 0x58
 800938c:	443b      	add	r3, r7
 800938e:	f843 2c44 	str.w	r2, [r3, #-68]
 8009392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009394:	3301      	adds	r3, #1
 8009396:	643b      	str	r3, [r7, #64]	; 0x40
 8009398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939a:	2b03      	cmp	r3, #3
 800939c:	d9dd      	bls.n	800935a <find_volume+0xfa>
 800939e:	2300      	movs	r3, #0
 80093a0:	643b      	str	r3, [r7, #64]	; 0x40
 80093a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <find_volume+0x14e>
 80093a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093aa:	3b01      	subs	r3, #1
 80093ac:	643b      	str	r3, [r7, #64]	; 0x40
 80093ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	3358      	adds	r3, #88	; 0x58
 80093b4:	443b      	add	r3, r7
 80093b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80093ba:	653b      	str	r3, [r7, #80]	; 0x50
 80093bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <find_volume+0x16e>
 80093c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093c6:	f7ff fef5 	bl	80091b4 <check_fs>
 80093ca:	4603      	mov	r3, r0
 80093cc:	e000      	b.n	80093d0 <find_volume+0x170>
 80093ce:	2303      	movs	r3, #3
 80093d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80093d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d905      	bls.n	80093e8 <find_volume+0x188>
 80093dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093de:	3301      	adds	r3, #1
 80093e0:	643b      	str	r3, [r7, #64]	; 0x40
 80093e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d9e2      	bls.n	80093ae <find_volume+0x14e>
 80093e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d101      	bne.n	80093f4 <find_volume+0x194>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e17e      	b.n	80096f2 <find_volume+0x492>
 80093f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d901      	bls.n	8009400 <find_volume+0x1a0>
 80093fc:	230d      	movs	r3, #13
 80093fe:	e178      	b.n	80096f2 <find_volume+0x492>
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	3334      	adds	r3, #52	; 0x34
 8009404:	330b      	adds	r3, #11
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fcdc 	bl	8007dc4 <ld_word>
 800940c:	4603      	mov	r3, r0
 800940e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009412:	d001      	beq.n	8009418 <find_volume+0x1b8>
 8009414:	230d      	movs	r3, #13
 8009416:	e16c      	b.n	80096f2 <find_volume+0x492>
 8009418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941a:	3334      	adds	r3, #52	; 0x34
 800941c:	3316      	adds	r3, #22
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fcd0 	bl	8007dc4 <ld_word>
 8009424:	4603      	mov	r3, r0
 8009426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <find_volume+0x1dc>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	3334      	adds	r3, #52	; 0x34
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	4618      	mov	r0, r3
 8009436:	f7fe fcdd 	bl	8007df4 <ld_dword>
 800943a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009440:	61da      	str	r2, [r3, #28]
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	709a      	strb	r2, [r3, #2]
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	789b      	ldrb	r3, [r3, #2]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d005      	beq.n	8009460 <find_volume+0x200>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	789b      	ldrb	r3, [r3, #2]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d001      	beq.n	8009460 <find_volume+0x200>
 800945c:	230d      	movs	r3, #13
 800945e:	e148      	b.n	80096f2 <find_volume+0x492>
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	789b      	ldrb	r3, [r3, #2]
 8009464:	461a      	mov	r2, r3
 8009466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009468:	fb02 f303 	mul.w	r3, r2, r3
 800946c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009474:	b29a      	uxth	r2, r3
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	815a      	strh	r2, [r3, #10]
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d008      	beq.n	8009494 <find_volume+0x234>
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	895b      	ldrh	r3, [r3, #10]
 8009486:	461a      	mov	r2, r3
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	3b01      	subs	r3, #1
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <find_volume+0x238>
 8009494:	230d      	movs	r3, #13
 8009496:	e12c      	b.n	80096f2 <find_volume+0x492>
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	3334      	adds	r3, #52	; 0x34
 800949c:	3311      	adds	r3, #17
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fc90 	bl	8007dc4 <ld_word>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	811a      	strh	r2, [r3, #8]
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	891b      	ldrh	r3, [r3, #8]
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <find_volume+0x25e>
 80094ba:	230d      	movs	r3, #13
 80094bc:	e119      	b.n	80096f2 <find_volume+0x492>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	3334      	adds	r3, #52	; 0x34
 80094c2:	3313      	adds	r3, #19
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fc7d 	bl	8007dc4 <ld_word>
 80094ca:	4603      	mov	r3, r0
 80094cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <find_volume+0x282>
 80094d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d6:	3334      	adds	r3, #52	; 0x34
 80094d8:	3320      	adds	r3, #32
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fc8a 	bl	8007df4 <ld_dword>
 80094e0:	64b8      	str	r0, [r7, #72]	; 0x48
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	3334      	adds	r3, #52	; 0x34
 80094e6:	330e      	adds	r3, #14
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fc6b 	bl	8007dc4 <ld_word>
 80094ee:	4603      	mov	r3, r0
 80094f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80094f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <find_volume+0x29c>
 80094f8:	230d      	movs	r3, #13
 80094fa:	e0fa      	b.n	80096f2 <find_volume+0x492>
 80094fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009500:	4413      	add	r3, r2
 8009502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009504:	8912      	ldrh	r2, [r2, #8]
 8009506:	0912      	lsrs	r2, r2, #4
 8009508:	b292      	uxth	r2, r2
 800950a:	4413      	add	r3, r2
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
 800950e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	429a      	cmp	r2, r3
 8009514:	d204      	bcs.n	8009520 <find_volume+0x2c0>
 8009516:	230d      	movs	r3, #13
 8009518:	e0eb      	b.n	80096f2 <find_volume+0x492>
 800951a:	bf00      	nop
 800951c:	20001e38 	.word	0x20001e38
 8009520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009528:	8952      	ldrh	r2, [r2, #10]
 800952a:	fbb3 f3f2 	udiv	r3, r3, r2
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <find_volume+0x2da>
 8009536:	230d      	movs	r3, #13
 8009538:	e0db      	b.n	80096f2 <find_volume+0x492>
 800953a:	2303      	movs	r3, #3
 800953c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009546:	4293      	cmp	r3, r2
 8009548:	d802      	bhi.n	8009550 <find_volume+0x2f0>
 800954a:	2302      	movs	r3, #2
 800954c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009556:	4293      	cmp	r3, r2
 8009558:	d802      	bhi.n	8009560 <find_volume+0x300>
 800955a:	2301      	movs	r3, #1
 800955c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	1c9a      	adds	r2, r3, #2
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	619a      	str	r2, [r3, #24]
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800956c:	621a      	str	r2, [r3, #32]
 800956e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009572:	441a      	add	r2, r3
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	625a      	str	r2, [r3, #36]	; 0x24
 8009578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	441a      	add	r2, r3
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	62da      	str	r2, [r3, #44]	; 0x2c
 8009582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009586:	2b03      	cmp	r3, #3
 8009588:	d11e      	bne.n	80095c8 <find_volume+0x368>
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	3334      	adds	r3, #52	; 0x34
 800958e:	332a      	adds	r3, #42	; 0x2a
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe fc17 	bl	8007dc4 <ld_word>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <find_volume+0x340>
 800959c:	230d      	movs	r3, #13
 800959e:	e0a8      	b.n	80096f2 <find_volume+0x492>
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	891b      	ldrh	r3, [r3, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <find_volume+0x34c>
 80095a8:	230d      	movs	r3, #13
 80095aa:	e0a2      	b.n	80096f2 <find_volume+0x492>
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	3334      	adds	r3, #52	; 0x34
 80095b0:	332c      	adds	r3, #44	; 0x2c
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fc1e 	bl	8007df4 <ld_dword>
 80095b8:	4602      	mov	r2, r0
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	629a      	str	r2, [r3, #40]	; 0x28
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	647b      	str	r3, [r7, #68]	; 0x44
 80095c6:	e01f      	b.n	8009608 <find_volume+0x3a8>
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	891b      	ldrh	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <find_volume+0x374>
 80095d0:	230d      	movs	r3, #13
 80095d2:	e08e      	b.n	80096f2 <find_volume+0x492>
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095da:	441a      	add	r2, r3
 80095dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095de:	629a      	str	r2, [r3, #40]	; 0x28
 80095e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d103      	bne.n	80095f0 <find_volume+0x390>
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	005b      	lsls	r3, r3, #1
 80095ee:	e00a      	b.n	8009606 <find_volume+0x3a6>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	4613      	mov	r3, r2
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	4413      	add	r3, r2
 80095fa:	085a      	lsrs	r2, r3, #1
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	4413      	add	r3, r2
 8009606:	647b      	str	r3, [r7, #68]	; 0x44
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800960e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009612:	0a5b      	lsrs	r3, r3, #9
 8009614:	429a      	cmp	r2, r3
 8009616:	d201      	bcs.n	800961c <find_volume+0x3bc>
 8009618:	230d      	movs	r3, #13
 800961a:	e06a      	b.n	80096f2 <find_volume+0x492>
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009622:	615a      	str	r2, [r3, #20]
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962a:	611a      	str	r2, [r3, #16]
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	2280      	movs	r2, #128	; 0x80
 8009630:	711a      	strb	r2, [r3, #4]
 8009632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009636:	2b03      	cmp	r3, #3
 8009638:	d149      	bne.n	80096ce <find_volume+0x46e>
 800963a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963c:	3334      	adds	r3, #52	; 0x34
 800963e:	3330      	adds	r3, #48	; 0x30
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe fbbf 	bl	8007dc4 <ld_word>
 8009646:	4603      	mov	r3, r0
 8009648:	2b01      	cmp	r3, #1
 800964a:	d140      	bne.n	80096ce <find_volume+0x46e>
 800964c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964e:	3301      	adds	r3, #1
 8009650:	4619      	mov	r1, r3
 8009652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009654:	f7fe fe98 	bl	8008388 <move_window>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d137      	bne.n	80096ce <find_volume+0x46e>
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	2200      	movs	r2, #0
 8009662:	711a      	strb	r2, [r3, #4]
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	3334      	adds	r3, #52	; 0x34
 8009668:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe fba9 	bl	8007dc4 <ld_word>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800967a:	429a      	cmp	r2, r3
 800967c:	d127      	bne.n	80096ce <find_volume+0x46e>
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	3334      	adds	r3, #52	; 0x34
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fbb6 	bl	8007df4 <ld_dword>
 8009688:	4603      	mov	r3, r0
 800968a:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <find_volume+0x49c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d11e      	bne.n	80096ce <find_volume+0x46e>
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	3334      	adds	r3, #52	; 0x34
 8009694:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe fbab 	bl	8007df4 <ld_dword>
 800969e:	4603      	mov	r3, r0
 80096a0:	4a17      	ldr	r2, [pc, #92]	; (8009700 <find_volume+0x4a0>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d113      	bne.n	80096ce <find_volume+0x46e>
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	3334      	adds	r3, #52	; 0x34
 80096aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fba0 	bl	8007df4 <ld_dword>
 80096b4:	4602      	mov	r2, r0
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	615a      	str	r2, [r3, #20]
 80096ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096bc:	3334      	adds	r3, #52	; 0x34
 80096be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fb96 	bl	8007df4 <ld_dword>
 80096c8:	4602      	mov	r2, r0
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	611a      	str	r2, [r3, #16]
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <find_volume+0x4a4>)
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	4b09      	ldr	r3, [pc, #36]	; (8009704 <find_volume+0x4a4>)
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	4b08      	ldr	r3, [pc, #32]	; (8009704 <find_volume+0x4a4>)
 80096e4:	881a      	ldrh	r2, [r3, #0]
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	80da      	strh	r2, [r3, #6]
 80096ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096ec:	f7fe fde4 	bl	80082b8 <clear_lock>
 80096f0:	2300      	movs	r3, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	3758      	adds	r7, #88	; 0x58
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	41615252 	.word	0x41615252
 8009700:	61417272 	.word	0x61417272
 8009704:	20001e3c 	.word	0x20001e3c

08009708 <validate>:
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
 8009712:	2309      	movs	r3, #9
 8009714:	73fb      	strb	r3, [r7, #15]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d02e      	beq.n	800977a <validate+0x72>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d02a      	beq.n	800977a <validate+0x72>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d025      	beq.n	800977a <validate+0x72>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	889a      	ldrh	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	88db      	ldrh	r3, [r3, #6]
 8009738:	429a      	cmp	r2, r3
 800973a:	d11e      	bne.n	800977a <validate+0x72>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fc3f 	bl	8007fc4 <lock_fs>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d014      	beq.n	8009776 <validate+0x6e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fa98 	bl	8007c88 <disk_status>
 8009758:	4603      	mov	r3, r0
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <validate+0x60>
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
 8009766:	e008      	b.n	800977a <validate+0x72>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fc3e 	bl	8007ff0 <unlock_fs>
 8009774:	e001      	b.n	800977a <validate+0x72>
 8009776:	230f      	movs	r3, #15
 8009778:	73fb      	strb	r3, [r7, #15]
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <validate+0x7e>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	e000      	b.n	8009788 <validate+0x80>
 8009786:	2300      	movs	r3, #0
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <f_mount>:
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	71fb      	strb	r3, [r7, #7]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	f107 0310 	add.w	r3, r7, #16
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fcbb 	bl	800912a <get_ldnumber>
 80097b4:	61f8      	str	r0, [r7, #28]
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da01      	bge.n	80097c0 <f_mount+0x28>
 80097bc:	230b      	movs	r3, #11
 80097be:	e048      	b.n	8009852 <f_mount+0xba>
 80097c0:	4a26      	ldr	r2, [pc, #152]	; (800985c <f_mount+0xc4>)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00f      	beq.n	80097f0 <f_mount+0x58>
 80097d0:	69b8      	ldr	r0, [r7, #24]
 80097d2:	f7fe fd71 	bl	80082b8 <clear_lock>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fcdd 	bl	800a19a <ff_del_syncobj>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <f_mount+0x52>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e033      	b.n	8009852 <f_mount+0xba>
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00f      	beq.n	8009816 <f_mount+0x7e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	330c      	adds	r3, #12
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f000 fca7 	bl	800a15a <ff_cre_syncobj>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <f_mount+0x7e>
 8009812:	2302      	movs	r3, #2
 8009814:	e01d      	b.n	8009852 <f_mount+0xba>
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4910      	ldr	r1, [pc, #64]	; (800985c <f_mount+0xc4>)
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <f_mount+0x94>
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d001      	beq.n	8009830 <f_mount+0x98>
 800982c:	2300      	movs	r3, #0
 800982e:	e010      	b.n	8009852 <f_mount+0xba>
 8009830:	f107 010c 	add.w	r1, r7, #12
 8009834:	f107 0308 	add.w	r3, r7, #8
 8009838:	2200      	movs	r2, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff fd10 	bl	8009260 <find_volume>
 8009840:	4603      	mov	r3, r0
 8009842:	75fb      	strb	r3, [r7, #23]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	7dfa      	ldrb	r2, [r7, #23]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fbd0 	bl	8007ff0 <unlock_fs>
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20001e38 	.word	0x20001e38

08009860 <f_open>:
 8009860:	b580      	push	{r7, lr}
 8009862:	b098      	sub	sp, #96	; 0x60
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	71fb      	strb	r3, [r7, #7]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <f_open+0x18>
 8009874:	2309      	movs	r3, #9
 8009876:	e1b4      	b.n	8009be2 <f_open+0x382>
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800987e:	71fb      	strb	r3, [r7, #7]
 8009880:	79fa      	ldrb	r2, [r7, #7]
 8009882:	f107 0110 	add.w	r1, r7, #16
 8009886:	f107 0308 	add.w	r3, r7, #8
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fce8 	bl	8009260 <find_volume>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 8191 	bne.w	8009bc2 <f_open+0x362>
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	f107 0314 	add.w	r3, r7, #20
 80098aa:	4611      	mov	r1, r2
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fbcb 	bl	8009048 <follow_path>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d11a      	bne.n	80098f6 <f_open+0x96>
 80098c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da03      	bge.n	80098d2 <f_open+0x72>
 80098ca:	2306      	movs	r3, #6
 80098cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098d0:	e011      	b.n	80098f6 <f_open+0x96>
 80098d2:	79fb      	ldrb	r3, [r7, #7]
 80098d4:	f023 0301 	bic.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bf14      	ite	ne
 80098dc:	2301      	movne	r3, #1
 80098de:	2300      	moveq	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	461a      	mov	r2, r3
 80098e4:	f107 0314 	add.w	r3, r7, #20
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fb9c 	bl	8008028 <chk_lock>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	f003 031c 	and.w	r3, r3, #28
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d07f      	beq.n	8009a00 <f_open+0x1a0>
 8009900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009904:	2b00      	cmp	r3, #0
 8009906:	d017      	beq.n	8009938 <f_open+0xd8>
 8009908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800990c:	2b04      	cmp	r3, #4
 800990e:	d10e      	bne.n	800992e <f_open+0xce>
 8009910:	f7fe fbe6 	bl	80080e0 <enq_lock>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <f_open+0xc8>
 800991a:	f107 0314 	add.w	r3, r7, #20
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff facb 	bl	8008eba <dir_register>
 8009924:	4603      	mov	r3, r0
 8009926:	e000      	b.n	800992a <f_open+0xca>
 8009928:	2312      	movs	r3, #18
 800992a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	f043 0308 	orr.w	r3, r3, #8
 8009934:	71fb      	strb	r3, [r7, #7]
 8009936:	e010      	b.n	800995a <f_open+0xfa>
 8009938:	7ebb      	ldrb	r3, [r7, #26]
 800993a:	f003 0311 	and.w	r3, r3, #17
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <f_open+0xea>
 8009942:	2307      	movs	r3, #7
 8009944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009948:	e007      	b.n	800995a <f_open+0xfa>
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <f_open+0xfa>
 8009954:	2308      	movs	r3, #8
 8009956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800995a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800995e:	2b00      	cmp	r3, #0
 8009960:	d168      	bne.n	8009a34 <f_open+0x1d4>
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d063      	beq.n	8009a34 <f_open+0x1d4>
 800996c:	f7fd fc50 	bl	8007210 <get_fattime>
 8009970:	6538      	str	r0, [r7, #80]	; 0x50
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	330e      	adds	r3, #14
 8009976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fa79 	bl	8007e70 <st_dword>
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009980:	3316      	adds	r3, #22
 8009982:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fa73 	bl	8007e70 <st_dword>
 800998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998c:	330b      	adds	r3, #11
 800998e:	2220      	movs	r2, #32
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff f9fa 	bl	8008d92 <ld_clust>
 800999e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099a4:	2200      	movs	r2, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fa12 	bl	8008dd0 <st_clust>
 80099ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ae:	331c      	adds	r3, #28
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fe fa5c 	bl	8007e70 <st_dword>
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2201      	movs	r2, #1
 80099bc:	70da      	strb	r2, [r3, #3]
 80099be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d037      	beq.n	8009a34 <f_open+0x1d4>
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c8:	653b      	str	r3, [r7, #80]	; 0x50
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	2200      	movs	r2, #0
 80099d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe ff25 	bl	8008822 <remove_chain>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d126      	bne.n	8009a34 <f_open+0x1d4>
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fccc 	bl	8008388 <move_window>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099fa:	3a01      	subs	r2, #1
 80099fc:	611a      	str	r2, [r3, #16]
 80099fe:	e019      	b.n	8009a34 <f_open+0x1d4>
 8009a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d115      	bne.n	8009a34 <f_open+0x1d4>
 8009a08:	7ebb      	ldrb	r3, [r7, #26]
 8009a0a:	f003 0310 	and.w	r3, r3, #16
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <f_open+0x1ba>
 8009a12:	2304      	movs	r3, #4
 8009a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a18:	e00c      	b.n	8009a34 <f_open+0x1d4>
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <f_open+0x1d4>
 8009a24:	7ebb      	ldrb	r3, [r7, #26]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <f_open+0x1d4>
 8009a2e:	2307      	movs	r3, #7
 8009a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d128      	bne.n	8009a8e <f_open+0x22e>
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <f_open+0x1ee>
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a4c:	71fb      	strb	r3, [r7, #7]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	625a      	str	r2, [r3, #36]	; 0x24
 8009a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	f107 0314 	add.w	r3, r7, #20
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe fb55 	bl	8008124 <inc_lock>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	611a      	str	r2, [r3, #16]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d102      	bne.n	8009a8e <f_open+0x22e>
 8009a88:	2302      	movs	r3, #2
 8009a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 8095 	bne.w	8009bc2 <f_open+0x362>
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff f977 	bl	8008d92 <ld_clust>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	609a      	str	r2, [r3, #8]
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	331c      	adds	r3, #28
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fe f9a0 	bl	8007df4 <ld_dword>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	88da      	ldrh	r2, [r3, #6]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	809a      	strh	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	79fa      	ldrb	r2, [r7, #7]
 8009ad2:	751a      	strb	r2, [r3, #20]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	755a      	strb	r2, [r3, #21]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	621a      	str	r2, [r3, #32]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	619a      	str	r2, [r3, #24]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3330      	adds	r3, #48	; 0x30
 8009aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fa0a 	bl	8007f0a <mem_set>
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d060      	beq.n	8009bc2 <f_open+0x362>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d05c      	beq.n	8009bc2 <f_open+0x362>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	619a      	str	r2, [r3, #24]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	895b      	ldrh	r3, [r3, #10]
 8009b14:	025b      	lsls	r3, r3, #9
 8009b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	657b      	str	r3, [r7, #84]	; 0x54
 8009b24:	e016      	b.n	8009b54 <f_open+0x2f4>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe fce7 	bl	80084fe <get_fat>
 8009b30:	65b8      	str	r0, [r7, #88]	; 0x58
 8009b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d802      	bhi.n	8009b3e <f_open+0x2de>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b44:	d102      	bne.n	8009b4c <f_open+0x2ec>
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	657b      	str	r3, [r7, #84]	; 0x54
 8009b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d103      	bne.n	8009b64 <f_open+0x304>
 8009b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d8e0      	bhi.n	8009b26 <f_open+0x2c6>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b68:	61da      	str	r2, [r3, #28]
 8009b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d127      	bne.n	8009bc2 <f_open+0x362>
 8009b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d022      	beq.n	8009bc2 <f_open+0x362>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fc9d 	bl	80084c0 <clust2sect>
 8009b86:	6478      	str	r0, [r7, #68]	; 0x44
 8009b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <f_open+0x336>
 8009b8e:	2302      	movs	r3, #2
 8009b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009b94:	e015      	b.n	8009bc2 <f_open+0x362>
 8009b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b98:	0a5a      	lsrs	r2, r3, #9
 8009b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	621a      	str	r2, [r3, #32]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	7858      	ldrb	r0, [r3, #1]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1a      	ldr	r2, [r3, #32]
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f7fe f8a9 	bl	8007d08 <disk_read>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <f_open+0x362>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <f_open+0x370>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fa09 	bl	8007ff0 <unlock_fs>
 8009bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be2:	4618      	mov	r0, r3
 8009be4:	3760      	adds	r7, #96	; 0x60
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <f_write>:
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b08c      	sub	sp, #48	; 0x30
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f107 0210 	add.w	r2, r7, #16
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff fd7c 	bl	8009708 <validate>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d107      	bne.n	8009c2e <f_write+0x44>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7d5b      	ldrb	r3, [r3, #21]
 8009c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d009      	beq.n	8009c42 <f_write+0x58>
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe f9da 	bl	8007ff0 <unlock_fs>
 8009c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c40:	e173      	b.n	8009f2a <f_write+0x340>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7d1b      	ldrb	r3, [r3, #20]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d106      	bne.n	8009c5c <f_write+0x72>
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2107      	movs	r1, #7
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe f9cc 	bl	8007ff0 <unlock_fs>
 8009c58:	2307      	movs	r3, #7
 8009c5a:	e166      	b.n	8009f2a <f_write+0x340>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	441a      	add	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	f080 814b 	bcs.w	8009f04 <f_write+0x31a>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	607b      	str	r3, [r7, #4]
 8009c76:	e145      	b.n	8009f04 <f_write+0x31a>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 8101 	bne.w	8009e88 <f_write+0x29e>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	0a5b      	lsrs	r3, r3, #9
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	8952      	ldrh	r2, [r2, #10]
 8009c90:	3a01      	subs	r2, #1
 8009c92:	4013      	ands	r3, r2
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d14d      	bne.n	8009d38 <f_write+0x14e>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10c      	bne.n	8009cbe <f_write+0xd4>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11a      	bne.n	8009ce6 <f_write+0xfc>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fe19 	bl	80088ec <create_chain>
 8009cba:	62b8      	str	r0, [r7, #40]	; 0x28
 8009cbc:	e013      	b.n	8009ce6 <f_write+0xfc>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <f_write+0xec>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7fe fea5 	bl	8008a1c <clmt_clust>
 8009cd2:	62b8      	str	r0, [r7, #40]	; 0x28
 8009cd4:	e007      	b.n	8009ce6 <f_write+0xfc>
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fe fe04 	bl	80088ec <create_chain>
 8009ce4:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8110 	beq.w	8009f0e <f_write+0x324>
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d109      	bne.n	8009d08 <f_write+0x11e>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	755a      	strb	r2, [r3, #21]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe f976 	bl	8007ff0 <unlock_fs>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e110      	b.n	8009f2a <f_write+0x340>
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d0e:	d109      	bne.n	8009d24 <f_write+0x13a>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	755a      	strb	r2, [r3, #21]
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe f968 	bl	8007ff0 <unlock_fs>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e102      	b.n	8009f2a <f_write+0x340>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d28:	61da      	str	r2, [r3, #28]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <f_write+0x14e>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d36:	609a      	str	r2, [r3, #8]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7d1b      	ldrb	r3, [r3, #20]
 8009d3c:	b25b      	sxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da1d      	bge.n	8009d7e <f_write+0x194>
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	7858      	ldrb	r0, [r3, #1]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6a1a      	ldr	r2, [r3, #32]
 8009d50:	2301      	movs	r3, #1
 8009d52:	f7fd fff9 	bl	8007d48 <disk_write>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d009      	beq.n	8009d70 <f_write+0x186>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	755a      	strb	r2, [r3, #21]
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2101      	movs	r1, #1
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe f942 	bl	8007ff0 <unlock_fs>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0dc      	b.n	8009f2a <f_write+0x340>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	751a      	strb	r2, [r3, #20]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fb9a 	bl	80084c0 <clust2sect>
 8009d8c:	6178      	str	r0, [r7, #20]
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d109      	bne.n	8009da8 <f_write+0x1be>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2202      	movs	r2, #2
 8009d98:	755a      	strb	r2, [r3, #21]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2102      	movs	r1, #2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe f926 	bl	8007ff0 <unlock_fs>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e0c0      	b.n	8009f2a <f_write+0x340>
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	4413      	add	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	0a5b      	lsrs	r3, r3, #9
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d041      	beq.n	8009e40 <f_write+0x256>
 8009dbc:	69ba      	ldr	r2, [r7, #24]
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	8952      	ldrh	r2, [r2, #10]
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d905      	bls.n	8009dd6 <f_write+0x1ec>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	895b      	ldrh	r3, [r3, #10]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	7858      	ldrb	r0, [r3, #1]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	69f9      	ldr	r1, [r7, #28]
 8009de0:	f7fd ffb2 	bl	8007d48 <disk_write>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d009      	beq.n	8009dfe <f_write+0x214>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	755a      	strb	r2, [r3, #21]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2101      	movs	r1, #1
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f8fb 	bl	8007ff0 <unlock_fs>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e095      	b.n	8009f2a <f_write+0x340>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1a      	ldr	r2, [r3, #32]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	6a3a      	ldr	r2, [r7, #32]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d915      	bls.n	8009e38 <f_write+0x24e>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a1a      	ldr	r2, [r3, #32]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	025b      	lsls	r3, r3, #9
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e24:	4619      	mov	r1, r3
 8009e26:	f7fe f84f 	bl	8007ec8 <mem_cpy>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	7d1b      	ldrb	r3, [r3, #20]
 8009e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	751a      	strb	r2, [r3, #20]
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	025b      	lsls	r3, r3, #9
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3e:	e044      	b.n	8009eca <f_write+0x2e0>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	697a      	ldr	r2, [r7, #20]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d01b      	beq.n	8009e82 <f_write+0x298>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d215      	bcs.n	8009e82 <f_write+0x298>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	7858      	ldrb	r0, [r3, #1]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e60:	2301      	movs	r3, #1
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	f7fd ff50 	bl	8007d08 <disk_read>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d009      	beq.n	8009e82 <f_write+0x298>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	755a      	strb	r2, [r3, #21]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	2101      	movs	r1, #1
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe f8b9 	bl	8007ff0 <unlock_fs>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e053      	b.n	8009f2a <f_write+0x340>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	621a      	str	r2, [r3, #32]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e90:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
 8009e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d901      	bls.n	8009ea2 <f_write+0x2b8>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	4413      	add	r3, r2
 8009eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb4:	69f9      	ldr	r1, [r7, #28]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe f806 	bl	8007ec8 <mem_cpy>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	7d1b      	ldrb	r3, [r3, #20]
 8009ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	751a      	strb	r2, [r3, #20]
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	4413      	add	r3, r2
 8009ed0:	61fb      	str	r3, [r7, #28]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699a      	ldr	r2, [r3, #24]
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	441a      	add	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	619a      	str	r2, [r3, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	bf38      	it	cc
 8009eea:	461a      	movcc	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	60da      	str	r2, [r3, #12]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	441a      	add	r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f47f aeb6 	bne.w	8009c78 <f_write+0x8e>
 8009f0c:	e000      	b.n	8009f10 <f_write+0x326>
 8009f0e:	bf00      	nop
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	7d1b      	ldrb	r3, [r3, #20]
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	751a      	strb	r2, [r3, #20]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	2100      	movs	r1, #0
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f864 	bl	8007ff0 <unlock_fs>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3730      	adds	r7, #48	; 0x30
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <f_sync>:
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b086      	sub	sp, #24
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f107 0208 	add.w	r2, r7, #8
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff fbe0 	bl	8009708 <validate>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d16d      	bne.n	800a02e <f_sync+0xfc>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	7d1b      	ldrb	r3, [r3, #20]
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d067      	beq.n	800a02e <f_sync+0xfc>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7d1b      	ldrb	r3, [r3, #20]
 8009f62:	b25b      	sxtb	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da1a      	bge.n	8009f9e <f_sync+0x6c>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	7858      	ldrb	r0, [r3, #1]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1a      	ldr	r2, [r3, #32]
 8009f76:	2301      	movs	r3, #1
 8009f78:	f7fd fee6 	bl	8007d48 <disk_write>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d006      	beq.n	8009f90 <f_sync+0x5e>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2101      	movs	r1, #1
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe f832 	bl	8007ff0 <unlock_fs>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e055      	b.n	800a03c <f_sync+0x10a>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7d1b      	ldrb	r3, [r3, #20]
 8009f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	751a      	strb	r2, [r3, #20]
 8009f9e:	f7fd f937 	bl	8007210 <get_fattime>
 8009fa2:	6138      	str	r0, [r7, #16]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	4619      	mov	r1, r3
 8009fac:	4610      	mov	r0, r2
 8009fae:	f7fe f9eb 	bl	8008388 <move_window>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d138      	bne.n	800a02e <f_sync+0xfc>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	330b      	adds	r3, #11
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	330b      	adds	r3, #11
 8009fcc:	f042 0220 	orr.w	r2, r2, #32
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	701a      	strb	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	68f9      	ldr	r1, [r7, #12]
 8009fe0:	f7fe fef6 	bl	8008dd0 <st_clust>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f103 021c 	add.w	r2, r3, #28
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f7fd ff3d 	bl	8007e70 <st_dword>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3316      	adds	r3, #22
 8009ffa:	6939      	ldr	r1, [r7, #16]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fd ff37 	bl	8007e70 <st_dword>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3312      	adds	r3, #18
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fd ff16 	bl	8007e3a <st_word>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2201      	movs	r2, #1
 800a012:	70da      	strb	r2, [r3, #3]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe f9e4 	bl	80083e4 <sync_fs>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	751a      	strb	r2, [r3, #20]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	7dfa      	ldrb	r2, [r7, #23]
 800a032:	4611      	mov	r1, r2
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd ffdb 	bl	8007ff0 <unlock_fs>
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <f_close>:
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff ff70 	bl	8009f32 <f_sync>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d11d      	bne.n	800a098 <f_close+0x54>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f107 0208 	add.w	r2, r7, #8
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fb4f 	bl	8009708 <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73fb      	strb	r3, [r7, #15]
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d111      	bne.n	800a098 <f_close+0x54>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe f8e1 	bl	8008240 <dec_lock>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <f_close+0x4a>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2100      	movs	r1, #0
 800a092:	4618      	mov	r0, r3
 800a094:	f7fd ffac 	bl	8007ff0 <unlock_fs>
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <FATFS_LinkDriverEx>:
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75bb      	strb	r3, [r7, #22]
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0bc:	7a5b      	ldrb	r3, [r3, #9]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d131      	bne.n	800a128 <FATFS_LinkDriverEx+0x84>
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0c6:	7a5b      	ldrb	r3, [r3, #9]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b1a      	ldr	r3, [pc, #104]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	5499      	strb	r1, [r3, r2]
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0d4:	7a5b      	ldrb	r3, [r3, #9]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	4a17      	ldr	r2, [pc, #92]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	605a      	str	r2, [r3, #4]
 800a0e2:	4b15      	ldr	r3, [pc, #84]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0e4:	7a5b      	ldrb	r3, [r3, #9]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4b13      	ldr	r3, [pc, #76]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0ec:	4413      	add	r3, r2
 800a0ee:	79fa      	ldrb	r2, [r7, #7]
 800a0f0:	721a      	strb	r2, [r3, #8]
 800a0f2:	4b11      	ldr	r3, [pc, #68]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0f4:	7a5b      	ldrb	r3, [r3, #9]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	b2d1      	uxtb	r1, r2
 800a0fc:	4a0e      	ldr	r2, [pc, #56]	; (800a138 <FATFS_LinkDriverEx+0x94>)
 800a0fe:	7251      	strb	r1, [r2, #9]
 800a100:	75bb      	strb	r3, [r7, #22]
 800a102:	7dbb      	ldrb	r3, [r7, #22]
 800a104:	3330      	adds	r3, #48	; 0x30
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	3301      	adds	r3, #1
 800a110:	223a      	movs	r2, #58	; 0x3a
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	3302      	adds	r3, #2
 800a118:	222f      	movs	r2, #47	; 0x2f
 800a11a:	701a      	strb	r2, [r3, #0]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3303      	adds	r3, #3
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	75fb      	strb	r3, [r7, #23]
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	4618      	mov	r0, r3
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	20001e60 	.word	0x20001e60

0800a13c <FATFS_LinkDriver>:
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff ffaa 	bl	800a0a4 <FATFS_LinkDriverEx>
 800a150:	4603      	mov	r3, r0
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <ff_cre_syncobj>:
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	4603      	mov	r3, r0
 800a162:	6039      	str	r1, [r7, #0]
 800a164:	71fb      	strb	r3, [r7, #7]
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	f107 030c 	add.w	r3, r7, #12
 800a172:	2101      	movs	r1, #1
 800a174:	4618      	mov	r0, r3
 800a176:	f000 f8cd 	bl	800a314 <osSemaphoreCreate>
 800a17a:	4602      	mov	r2, r0
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <ff_del_syncobj>:
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f96c 	bl	800a480 <osSemaphoreDelete>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <ff_req_grant>:
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8d8 	bl	800a378 <osSemaphoreWait>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <ff_req_grant+0x20>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <ff_rel_grant>:
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f915 	bl	800a414 <osSemaphoreRelease>
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <makeFreeRtosPriority>:
 800a1f2:	b480      	push	{r7}
 800a1f4:	b085      	sub	sp, #20
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	80fb      	strh	r3, [r7, #6]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a204:	2b84      	cmp	r3, #132	; 0x84
 800a206:	d005      	beq.n	800a214 <makeFreeRtosPriority+0x22>
 800a208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	3303      	adds	r3, #3
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <inHandlerMode>:
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	f3ef 8305 	mrs	r3, IPSR
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	bf14      	ite	ne
 800a234:	2301      	movne	r3, #1
 800a236:	2300      	moveq	r3, #0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <osKernelStart>:
 800a246:	b580      	push	{r7, lr}
 800a248:	af00      	add	r7, sp, #0
 800a24a:	f001 f987 	bl	800b55c <vTaskStartScheduler>
 800a24e:	2300      	movs	r3, #0
 800a250:	4618      	mov	r0, r3
 800a252:	bd80      	pop	{r7, pc}

0800a254 <osThreadCreate>:
 800a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a256:	b089      	sub	sp, #36	; 0x24
 800a258:	af04      	add	r7, sp, #16
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d020      	beq.n	800a2a8 <osThreadCreate+0x54>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d01c      	beq.n	800a2a8 <osThreadCreate+0x54>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685c      	ldr	r4, [r3, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691e      	ldr	r6, [r3, #16]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff ffb6 	bl	800a1f2 <makeFreeRtosPriority>
 800a286:	4601      	mov	r1, r0
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6992      	ldr	r2, [r2, #24]
 800a290:	9202      	str	r2, [sp, #8]
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	9100      	str	r1, [sp, #0]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	4632      	mov	r2, r6
 800a29a:	4629      	mov	r1, r5
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 ff7f 	bl	800b1a0 <xTaskCreateStatic>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	e01c      	b.n	800a2e2 <osThreadCreate+0x8e>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685c      	ldr	r4, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681d      	ldr	r5, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	b29e      	uxth	r6, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff ff98 	bl	800a1f2 <makeFreeRtosPriority>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	f107 030c 	add.w	r3, r7, #12
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	9200      	str	r2, [sp, #0]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 ffc1 	bl	800b25a <xTaskCreate>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <osThreadCreate+0x8e>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e000      	b.n	800a2e4 <osThreadCreate+0x90>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ec <osDelay>:
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <osDelay+0x16>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	e000      	b.n	800a304 <osDelay+0x18>
 800a302:	2301      	movs	r3, #1
 800a304:	4618      	mov	r0, r3
 800a306:	f001 f8f5 	bl	800b4f4 <vTaskDelay>
 800a30a:	2300      	movs	r3, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <osSemaphoreCreate>:
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af02      	add	r7, sp, #8
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <osSemaphoreCreate+0x32>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d10a      	bne.n	800a342 <osSemaphoreCreate+0x2e>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2203      	movs	r2, #3
 800a332:	9200      	str	r2, [sp, #0]
 800a334:	2200      	movs	r2, #0
 800a336:	2100      	movs	r1, #0
 800a338:	2001      	movs	r0, #1
 800a33a:	f000 f9d1 	bl	800a6e0 <xQueueGenericCreateStatic>
 800a33e:	4603      	mov	r3, r0
 800a340:	e016      	b.n	800a370 <osSemaphoreCreate+0x5c>
 800a342:	2300      	movs	r3, #0
 800a344:	e014      	b.n	800a370 <osSemaphoreCreate+0x5c>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d110      	bne.n	800a36e <osSemaphoreCreate+0x5a>
 800a34c:	2203      	movs	r2, #3
 800a34e:	2100      	movs	r1, #0
 800a350:	2001      	movs	r0, #1
 800a352:	f000 fa3d 	bl	800a7d0 <xQueueGenericCreate>
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <osSemaphoreCreate+0x56>
 800a35e:	2300      	movs	r3, #0
 800a360:	2200      	movs	r2, #0
 800a362:	2100      	movs	r1, #0
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 fa8d 	bl	800a884 <xQueueGenericSend>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	e000      	b.n	800a370 <osSemaphoreCreate+0x5c>
 800a36e:	2300      	movs	r3, #0
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <osSemaphoreWait>:
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	60bb      	str	r3, [r7, #8]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <osSemaphoreWait+0x18>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	e03a      	b.n	800a406 <osSemaphoreWait+0x8e>
 800a390:	2300      	movs	r3, #0
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a39a:	d103      	bne.n	800a3a4 <osSemaphoreWait+0x2c>
 800a39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	e009      	b.n	800a3b8 <osSemaphoreWait+0x40>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d006      	beq.n	800a3b8 <osSemaphoreWait+0x40>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	60fb      	str	r3, [r7, #12]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <osSemaphoreWait+0x40>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	f7ff ff33 	bl	800a222 <inHandlerMode>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d017      	beq.n	800a3f2 <osSemaphoreWait+0x7a>
 800a3c2:	f107 0308 	add.w	r3, r7, #8
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fcf2 	bl	800adb4 <xQueueReceiveFromISR>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d001      	beq.n	800a3da <osSemaphoreWait+0x62>
 800a3d6:	23ff      	movs	r3, #255	; 0xff
 800a3d8:	e015      	b.n	800a406 <osSemaphoreWait+0x8e>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d011      	beq.n	800a404 <osSemaphoreWait+0x8c>
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <osSemaphoreWait+0x98>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	e008      	b.n	800a404 <osSemaphoreWait+0x8c>
 800a3f2:	68f9      	ldr	r1, [r7, #12]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fbd1 	bl	800ab9c <xQueueSemaphoreTake>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d001      	beq.n	800a404 <osSemaphoreWait+0x8c>
 800a400:	23ff      	movs	r3, #255	; 0xff
 800a402:	e000      	b.n	800a406 <osSemaphoreWait+0x8e>
 800a404:	2300      	movs	r3, #0
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <osSemaphoreRelease>:
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	2300      	movs	r3, #0
 800a422:	60bb      	str	r3, [r7, #8]
 800a424:	f7ff fefd 	bl	800a222 <inHandlerMode>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d016      	beq.n	800a45c <osSemaphoreRelease+0x48>
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fb23 	bl	800aa80 <xQueueGiveFromISR>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d001      	beq.n	800a444 <osSemaphoreRelease+0x30>
 800a440:	23ff      	movs	r3, #255	; 0xff
 800a442:	e017      	b.n	800a474 <osSemaphoreRelease+0x60>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d013      	beq.n	800a472 <osSemaphoreRelease+0x5e>
 800a44a:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <osSemaphoreRelease+0x68>)
 800a44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	e00a      	b.n	800a472 <osSemaphoreRelease+0x5e>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2200      	movs	r2, #0
 800a460:	2100      	movs	r1, #0
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa0e 	bl	800a884 <xQueueGenericSend>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d001      	beq.n	800a472 <osSemaphoreRelease+0x5e>
 800a46e:	23ff      	movs	r3, #255	; 0xff
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <osSemaphoreDelete>:
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	f7ff fecb 	bl	800a222 <inHandlerMode>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <osSemaphoreDelete+0x16>
 800a492:	2382      	movs	r3, #130	; 0x82
 800a494:	e003      	b.n	800a49e <osSemaphoreDelete+0x1e>
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fd0c 	bl	800aeb4 <vQueueDelete>
 800a49c:	2300      	movs	r3, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <vListInitialise>:
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f103 0208 	add.w	r2, r3, #8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	605a      	str	r2, [r3, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4be:	609a      	str	r2, [r3, #8]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f103 0208 	add.w	r2, r3, #8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f103 0208 	add.w	r2, r3, #8
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	611a      	str	r2, [r3, #16]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <vListInitialiseItem>:
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	611a      	str	r2, [r3, #16]
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <vListInsertEnd>:
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	609a      	str	r2, [r3, #8]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	605a      	str	r2, [r3, #4]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	611a      	str	r2, [r3, #16]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	bf00      	nop
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <vListInsert>:
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60bb      	str	r3, [r7, #8]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a55e:	d103      	bne.n	800a568 <vListInsert+0x20>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	e00c      	b.n	800a582 <vListInsert+0x3a>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3308      	adds	r3, #8
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	e002      	b.n	800a576 <vListInsert+0x2e>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d2f6      	bcs.n	800a570 <vListInsert+0x28>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	605a      	str	r2, [r3, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	609a      	str	r2, [r3, #8]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	605a      	str	r2, [r3, #4]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	611a      	str	r2, [r3, #16]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	bf00      	nop
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <uxListRemove>:
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6892      	ldr	r2, [r2, #8]
 800a5d0:	609a      	str	r2, [r3, #8]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6852      	ldr	r2, [r2, #4]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d103      	bne.n	800a5ee <uxListRemove+0x34>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	605a      	str	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	611a      	str	r2, [r3, #16]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
	...

0800a610 <xQueueGenericReset>:
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericReset+0x2a>
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	60bb      	str	r3, [r7, #8]
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericReset+0x28>
 800a63a:	f001 fef3 	bl	800c424 <vPortEnterCritical>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a64a:	fb01 f303 	mul.w	r3, r1, r3
 800a64e:	441a      	add	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	609a      	str	r2, [r3, #8]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	639a      	str	r2, [r3, #56]	; 0x38
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	3b01      	subs	r3, #1
 800a66c:	68f9      	ldr	r1, [r7, #12]
 800a66e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a670:	fb01 f303 	mul.w	r3, r1, r3
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	60da      	str	r2, [r3, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	22ff      	movs	r2, #255	; 0xff
 800a67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	22ff      	movs	r2, #255	; 0xff
 800a686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d114      	bne.n	800a6ba <xQueueGenericReset+0xaa>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01a      	beq.n	800a6ce <xQueueGenericReset+0xbe>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3310      	adds	r3, #16
 800a69c:	4618      	mov	r0, r3
 800a69e:	f001 f9af 	bl	800ba00 <xTaskRemoveFromEventList>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d012      	beq.n	800a6ce <xQueueGenericReset+0xbe>
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <xQueueGenericReset+0xcc>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	e009      	b.n	800a6ce <xQueueGenericReset+0xbe>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3310      	adds	r3, #16
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff fef1 	bl	800a4a6 <vListInitialise>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3324      	adds	r3, #36	; 0x24
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff feec 	bl	800a4a6 <vListInitialise>
 800a6ce:	f001 fed9 	bl	800c484 <vPortExitCritical>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	e000ed04 	.word	0xe000ed04

0800a6e0 <xQueueGenericCreateStatic>:
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08e      	sub	sp, #56	; 0x38
 800a6e4:	af02      	add	r7, sp, #8
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <xQueueGenericCreateStatic+0x2a>
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	62bb      	str	r3, [r7, #40]	; 0x28
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xQueueGenericCreateStatic+0x28>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueueGenericCreateStatic+0x46>
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueueGenericCreateStatic+0x44>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <xQueueGenericCreateStatic+0x52>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <xQueueGenericCreateStatic+0x56>
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <xQueueGenericCreateStatic+0x58>
 800a736:	2300      	movs	r3, #0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <xQueueGenericCreateStatic+0x72>
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	623b      	str	r3, [r7, #32]
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <xQueueGenericCreateStatic+0x70>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <xQueueGenericCreateStatic+0x7e>
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <xQueueGenericCreateStatic+0x82>
 800a75e:	2301      	movs	r3, #1
 800a760:	e000      	b.n	800a764 <xQueueGenericCreateStatic+0x84>
 800a762:	2300      	movs	r3, #0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <xQueueGenericCreateStatic+0x9e>
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	61fb      	str	r3, [r7, #28]
 800a77a:	bf00      	nop
 800a77c:	e7fe      	b.n	800a77c <xQueueGenericCreateStatic+0x9c>
 800a77e:	2348      	movs	r3, #72	; 0x48
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b48      	cmp	r3, #72	; 0x48
 800a786:	d00a      	beq.n	800a79e <xQueueGenericCreateStatic+0xbe>
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	61bb      	str	r3, [r7, #24]
 800a79a:	bf00      	nop
 800a79c:	e7fe      	b.n	800a79c <xQueueGenericCreateStatic+0xbc>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00d      	beq.n	800a7c6 <xQueueGenericCreateStatic+0xe6>
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 f83f 	bl	800a844 <prvInitialiseNewQueue>
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3730      	adds	r7, #48	; 0x30
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <xQueueGenericCreate>:
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08a      	sub	sp, #40	; 0x28
 800a7d4:	af02      	add	r7, sp, #8
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <xQueueGenericCreate+0x2a>
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	613b      	str	r3, [r7, #16]
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xQueueGenericCreate+0x28>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	fb02 f303 	mul.w	r3, r2, r3
 800a802:	61fb      	str	r3, [r7, #28]
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	3348      	adds	r3, #72	; 0x48
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 ff2d 	bl	800c668 <pvPortMalloc>
 800a80e:	61b8      	str	r0, [r7, #24]
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d011      	beq.n	800a83a <xQueueGenericCreate+0x6a>
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	3348      	adds	r3, #72	; 0x48
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a828:	79fa      	ldrb	r2, [r7, #7]
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	4613      	mov	r3, r2
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	68b9      	ldr	r1, [r7, #8]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f805 	bl	800a844 <prvInitialiseNewQueue>
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <prvInitialiseNewQueue>:
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	70fb      	strb	r3, [r7, #3]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d103      	bne.n	800a860 <prvInitialiseNewQueue+0x1c>
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e002      	b.n	800a866 <prvInitialiseNewQueue+0x22>
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	641a      	str	r2, [r3, #64]	; 0x40
 800a872:	2101      	movs	r1, #1
 800a874:	69b8      	ldr	r0, [r7, #24]
 800a876:	f7ff fecb 	bl	800a610 <xQueueGenericReset>
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <xQueueGenericSend>:
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	; 0x38
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	633b      	str	r3, [r7, #48]	; 0x30
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xQueueGenericSend+0x32>
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xQueueGenericSend+0x30>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <xQueueGenericSend+0x40>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <xQueueGenericSend+0x44>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e000      	b.n	800a8ca <xQueueGenericSend+0x46>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10a      	bne.n	800a8e4 <xQueueGenericSend+0x60>
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <xQueueGenericSend+0x5e>
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d103      	bne.n	800a8f2 <xQueueGenericSend+0x6e>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <xQueueGenericSend+0x72>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <xQueueGenericSend+0x74>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xQueueGenericSend+0x8e>
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	623b      	str	r3, [r7, #32]
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xQueueGenericSend+0x8c>
 800a912:	f001 fa35 	bl	800bd80 <xTaskGetSchedulerState>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <xQueueGenericSend+0x9e>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <xQueueGenericSend+0xa2>
 800a922:	2301      	movs	r3, #1
 800a924:	e000      	b.n	800a928 <xQueueGenericSend+0xa4>
 800a926:	2300      	movs	r3, #0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xQueueGenericSend+0xbe>
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xQueueGenericSend+0xbc>
 800a942:	f001 fd6f 	bl	800c424 <vPortEnterCritical>
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a94e:	429a      	cmp	r2, r3
 800a950:	d302      	bcc.n	800a958 <xQueueGenericSend+0xd4>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d129      	bne.n	800a9ac <xQueueGenericSend+0x128>
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a95e:	f000 fae4 	bl	800af2a <prvCopyDataToQueue>
 800a962:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d010      	beq.n	800a98e <xQueueGenericSend+0x10a>
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	3324      	adds	r3, #36	; 0x24
 800a970:	4618      	mov	r0, r3
 800a972:	f001 f845 	bl	800ba00 <xTaskRemoveFromEventList>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d013      	beq.n	800a9a4 <xQueueGenericSend+0x120>
 800a97c:	4b3f      	ldr	r3, [pc, #252]	; (800aa7c <xQueueGenericSend+0x1f8>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	e00a      	b.n	800a9a4 <xQueueGenericSend+0x120>
 800a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <xQueueGenericSend+0x120>
 800a994:	4b39      	ldr	r3, [pc, #228]	; (800aa7c <xQueueGenericSend+0x1f8>)
 800a996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f001 fd6e 	bl	800c484 <vPortExitCritical>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e063      	b.n	800aa74 <xQueueGenericSend+0x1f0>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d103      	bne.n	800a9ba <xQueueGenericSend+0x136>
 800a9b2:	f001 fd67 	bl	800c484 <vPortExitCritical>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e05c      	b.n	800aa74 <xQueueGenericSend+0x1f0>
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <xQueueGenericSend+0x14a>
 800a9c0:	f107 0314 	add.w	r3, r7, #20
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f001 f87d 	bl	800bac4 <vTaskInternalSetTimeOutState>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ce:	f001 fd59 	bl	800c484 <vPortExitCritical>
 800a9d2:	f000 fe2d 	bl	800b630 <vTaskSuspendAll>
 800a9d6:	f001 fd25 	bl	800c424 <vPortEnterCritical>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9e0:	b25b      	sxtb	r3, r3
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9e6:	d103      	bne.n	800a9f0 <xQueueGenericSend+0x16c>
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f6:	b25b      	sxtb	r3, r3
 800a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9fc:	d103      	bne.n	800aa06 <xQueueGenericSend+0x182>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa06:	f001 fd3d 	bl	800c484 <vPortExitCritical>
 800aa0a:	1d3a      	adds	r2, r7, #4
 800aa0c:	f107 0314 	add.w	r3, r7, #20
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 f86c 	bl	800baf0 <xTaskCheckForTimeOut>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d124      	bne.n	800aa68 <xQueueGenericSend+0x1e4>
 800aa1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa20:	f000 fb7b 	bl	800b11a <prvIsQueueFull>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d018      	beq.n	800aa5c <xQueueGenericSend+0x1d8>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	3310      	adds	r3, #16
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 ffc0 	bl	800b9b8 <vTaskPlaceOnEventList>
 800aa38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa3a:	f000 fb06 	bl	800b04a <prvUnlockQueue>
 800aa3e:	f000 fe05 	bl	800b64c <xTaskResumeAll>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f47f af7c 	bne.w	800a942 <xQueueGenericSend+0xbe>
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <xQueueGenericSend+0x1f8>)
 800aa4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	e772      	b.n	800a942 <xQueueGenericSend+0xbe>
 800aa5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa5e:	f000 faf4 	bl	800b04a <prvUnlockQueue>
 800aa62:	f000 fdf3 	bl	800b64c <xTaskResumeAll>
 800aa66:	e76c      	b.n	800a942 <xQueueGenericSend+0xbe>
 800aa68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa6a:	f000 faee 	bl	800b04a <prvUnlockQueue>
 800aa6e:	f000 fded 	bl	800b64c <xTaskResumeAll>
 800aa72:	2300      	movs	r3, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	3738      	adds	r7, #56	; 0x38
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	e000ed04 	.word	0xe000ed04

0800aa80 <xQueueGiveFromISR>:
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08e      	sub	sp, #56	; 0x38
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	633b      	str	r3, [r7, #48]	; 0x30
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <xQueueGiveFromISR+0x2a>
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	623b      	str	r3, [r7, #32]
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xQueueGiveFromISR+0x28>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <xQueueGiveFromISR+0x48>
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	61fb      	str	r3, [r7, #28]
 800aac4:	bf00      	nop
 800aac6:	e7fe      	b.n	800aac6 <xQueueGiveFromISR+0x46>
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d103      	bne.n	800aad8 <xQueueGiveFromISR+0x58>
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <xQueueGiveFromISR+0x5c>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <xQueueGiveFromISR+0x5e>
 800aadc:	2300      	movs	r3, #0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <xQueueGiveFromISR+0x78>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	61bb      	str	r3, [r7, #24]
 800aaf4:	bf00      	nop
 800aaf6:	e7fe      	b.n	800aaf6 <xQueueGiveFromISR+0x76>
 800aaf8:	f001 fd76 	bl	800c5e8 <vPortValidateInterruptPriority>
 800aafc:	f3ef 8211 	mrs	r2, BASEPRI
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	617a      	str	r2, [r7, #20]
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d22b      	bcs.n	800ab80 <xQueueGiveFromISR+0x100>
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
 800ab3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab42:	d112      	bne.n	800ab6a <xQueueGiveFromISR+0xea>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d016      	beq.n	800ab7a <xQueueGiveFromISR+0xfa>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	3324      	adds	r3, #36	; 0x24
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 ff55 	bl	800ba00 <xTaskRemoveFromEventList>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <xQueueGiveFromISR+0xfa>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <xQueueGiveFromISR+0xfa>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2201      	movs	r2, #1
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e007      	b.n	800ab7a <xQueueGiveFromISR+0xfa>
 800ab6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab6e:	3301      	adds	r3, #1
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	b25a      	sxtb	r2, r3
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7e:	e001      	b.n	800ab84 <xQueueGiveFromISR+0x104>
 800ab80:	2300      	movs	r3, #0
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	60fb      	str	r3, [r7, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	bf00      	nop
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	4618      	mov	r0, r3
 800ab94:	3738      	adds	r7, #56	; 0x38
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <xQueueSemaphoreTake>:
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08e      	sub	sp, #56	; 0x38
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abae:	2300      	movs	r3, #0
 800abb0:	633b      	str	r3, [r7, #48]	; 0x30
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xQueueSemaphoreTake+0x32>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xQueueSemaphoreTake+0x30>
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <xQueueSemaphoreTake+0x50>
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	61fb      	str	r3, [r7, #28]
 800abe8:	bf00      	nop
 800abea:	e7fe      	b.n	800abea <xQueueSemaphoreTake+0x4e>
 800abec:	f001 f8c8 	bl	800bd80 <xTaskGetSchedulerState>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <xQueueSemaphoreTake+0x60>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <xQueueSemaphoreTake+0x64>
 800abfc:	2301      	movs	r3, #1
 800abfe:	e000      	b.n	800ac02 <xQueueSemaphoreTake+0x66>
 800ac00:	2300      	movs	r3, #0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <xQueueSemaphoreTake+0x80>
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <xQueueSemaphoreTake+0x7e>
 800ac1c:	f001 fc02 	bl	800c424 <vPortEnterCritical>
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d024      	beq.n	800ac76 <xQueueSemaphoreTake+0xda>
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	1e5a      	subs	r2, r3, #1
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <xQueueSemaphoreTake+0xaa>
 800ac3c:	f001 fa48 	bl	800c0d0 <pvTaskIncrementMutexHeldCount>
 800ac40:	4602      	mov	r2, r0
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	609a      	str	r2, [r3, #8]
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00f      	beq.n	800ac6e <xQueueSemaphoreTake+0xd2>
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	3310      	adds	r3, #16
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fed4 	bl	800ba00 <xTaskRemoveFromEventList>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d007      	beq.n	800ac6e <xQueueSemaphoreTake+0xd2>
 800ac5e:	4b54      	ldr	r3, [pc, #336]	; (800adb0 <xQueueSemaphoreTake+0x214>)
 800ac60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f001 fc09 	bl	800c484 <vPortExitCritical>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e097      	b.n	800ada6 <xQueueSemaphoreTake+0x20a>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d111      	bne.n	800aca0 <xQueueSemaphoreTake+0x104>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <xQueueSemaphoreTake+0xfc>
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xQueueSemaphoreTake+0xfa>
 800ac98:	f001 fbf4 	bl	800c484 <vPortExitCritical>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e082      	b.n	800ada6 <xQueueSemaphoreTake+0x20a>
 800aca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <xQueueSemaphoreTake+0x118>
 800aca6:	f107 030c 	add.w	r3, r7, #12
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 ff0a 	bl	800bac4 <vTaskInternalSetTimeOutState>
 800acb0:	2301      	movs	r3, #1
 800acb2:	637b      	str	r3, [r7, #52]	; 0x34
 800acb4:	f001 fbe6 	bl	800c484 <vPortExitCritical>
 800acb8:	f000 fcba 	bl	800b630 <vTaskSuspendAll>
 800acbc:	f001 fbb2 	bl	800c424 <vPortEnterCritical>
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acc6:	b25b      	sxtb	r3, r3
 800acc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800accc:	d103      	bne.n	800acd6 <xQueueSemaphoreTake+0x13a>
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acdc:	b25b      	sxtb	r3, r3
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ace2:	d103      	bne.n	800acec <xQueueSemaphoreTake+0x150>
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acec:	f001 fbca 	bl	800c484 <vPortExitCritical>
 800acf0:	463a      	mov	r2, r7
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fef9 	bl	800baf0 <xTaskCheckForTimeOut>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d132      	bne.n	800ad6a <xQueueSemaphoreTake+0x1ce>
 800ad04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad06:	f000 f9f2 	bl	800b0ee <prvIsQueueEmpty>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d026      	beq.n	800ad5e <xQueueSemaphoreTake+0x1c2>
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <xQueueSemaphoreTake+0x190>
 800ad18:	f001 fb84 	bl	800c424 <vPortEnterCritical>
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 f84b 	bl	800bdbc <xTaskPriorityInherit>
 800ad26:	6338      	str	r0, [r7, #48]	; 0x30
 800ad28:	f001 fbac 	bl	800c484 <vPortExitCritical>
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	3324      	adds	r3, #36	; 0x24
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 fe3f 	bl	800b9b8 <vTaskPlaceOnEventList>
 800ad3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad3c:	f000 f985 	bl	800b04a <prvUnlockQueue>
 800ad40:	f000 fc84 	bl	800b64c <xTaskResumeAll>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f47f af68 	bne.w	800ac1c <xQueueSemaphoreTake+0x80>
 800ad4c:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <xQueueSemaphoreTake+0x214>)
 800ad4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	e75e      	b.n	800ac1c <xQueueSemaphoreTake+0x80>
 800ad5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad60:	f000 f973 	bl	800b04a <prvUnlockQueue>
 800ad64:	f000 fc72 	bl	800b64c <xTaskResumeAll>
 800ad68:	e758      	b.n	800ac1c <xQueueSemaphoreTake+0x80>
 800ad6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6c:	f000 f96d 	bl	800b04a <prvUnlockQueue>
 800ad70:	f000 fc6c 	bl	800b64c <xTaskResumeAll>
 800ad74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad76:	f000 f9ba 	bl	800b0ee <prvIsQueueEmpty>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f43f af4d 	beq.w	800ac1c <xQueueSemaphoreTake+0x80>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00d      	beq.n	800ada4 <xQueueSemaphoreTake+0x208>
 800ad88:	f001 fb4c 	bl	800c424 <vPortEnterCritical>
 800ad8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad8e:	f000 f8b4 	bl	800aefa <prvGetDisinheritPriorityAfterTimeout>
 800ad92:	6278      	str	r0, [r7, #36]	; 0x24
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f001 f90a 	bl	800bfb4 <vTaskPriorityDisinheritAfterTimeout>
 800ada0:	f001 fb70 	bl	800c484 <vPortExitCritical>
 800ada4:	2300      	movs	r3, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	3738      	adds	r7, #56	; 0x38
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <xQueueReceiveFromISR>:
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	; 0x38
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	633b      	str	r3, [r7, #48]	; 0x30
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <xQueueReceiveFromISR+0x2c>
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	623b      	str	r3, [r7, #32]
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xQueueReceiveFromISR+0x2a>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <xQueueReceiveFromISR+0x3a>
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <xQueueReceiveFromISR+0x3e>
 800adee:	2301      	movs	r3, #1
 800adf0:	e000      	b.n	800adf4 <xQueueReceiveFromISR+0x40>
 800adf2:	2300      	movs	r3, #0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10a      	bne.n	800ae0e <xQueueReceiveFromISR+0x5a>
 800adf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	61fb      	str	r3, [r7, #28]
 800ae0a:	bf00      	nop
 800ae0c:	e7fe      	b.n	800ae0c <xQueueReceiveFromISR+0x58>
 800ae0e:	f001 fbeb 	bl	800c5e8 <vPortValidateInterruptPriority>
 800ae12:	f3ef 8211 	mrs	r2, BASEPRI
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	61ba      	str	r2, [r7, #24]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d02f      	beq.n	800ae9a <xQueueReceiveFromISR+0xe6>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae48:	f000 f8d9 	bl	800affe <prvCopyDataFromQueue>
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	1e5a      	subs	r2, r3, #1
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38
 800ae54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae5c:	d112      	bne.n	800ae84 <xQueueReceiveFromISR+0xd0>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <xQueueReceiveFromISR+0xe0>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	3310      	adds	r3, #16
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 fdc8 	bl	800ba00 <xTaskRemoveFromEventList>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <xQueueReceiveFromISR+0xe0>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00b      	beq.n	800ae94 <xQueueReceiveFromISR+0xe0>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	601a      	str	r2, [r3, #0]
 800ae82:	e007      	b.n	800ae94 <xQueueReceiveFromISR+0xe0>
 800ae84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae88:	3301      	adds	r3, #1
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	b25a      	sxtb	r2, r3
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae94:	2301      	movs	r3, #1
 800ae96:	637b      	str	r3, [r7, #52]	; 0x34
 800ae98:	e001      	b.n	800ae9e <xQueueReceiveFromISR+0xea>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	bf00      	nop
 800aeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeac:	4618      	mov	r0, r3
 800aeae:	3738      	adds	r7, #56	; 0x38
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <vQueueDelete>:
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <vQueueDelete+0x28>
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <vQueueDelete+0x26>
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f935 	bl	800b14c <vQueueUnregisterQueue>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <vQueueDelete+0x3e>
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f001 fc87 	bl	800c800 <vPortFree>
 800aef2:	bf00      	nop
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <prvGetDisinheritPriorityAfterTimeout>:
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	2b00      	cmp	r3, #0
 800af08:	d006      	beq.n	800af18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f1c3 0307 	rsb	r3, r3, #7
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	e001      	b.n	800af1c <prvGetDisinheritPriorityAfterTimeout+0x22>
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <prvCopyDataToQueue>:
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b086      	sub	sp, #24
 800af2e:	af00      	add	r7, sp, #0
 800af30:	60f8      	str	r0, [r7, #12]
 800af32:	60b9      	str	r1, [r7, #8]
 800af34:	607a      	str	r2, [r7, #4]
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10d      	bne.n	800af64 <prvCopyDataToQueue+0x3a>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d14d      	bne.n	800afec <prvCopyDataToQueue+0xc2>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 ffa7 	bl	800bea8 <xTaskPriorityDisinherit>
 800af5a:	6178      	str	r0, [r7, #20]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	609a      	str	r2, [r3, #8]
 800af62:	e043      	b.n	800afec <prvCopyDataToQueue+0xc2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d119      	bne.n	800af9e <prvCopyDataToQueue+0x74>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6858      	ldr	r0, [r3, #4]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	461a      	mov	r2, r3
 800af74:	68b9      	ldr	r1, [r7, #8]
 800af76:	f002 fbd0 	bl	800d71a <memcpy>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	441a      	add	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	605a      	str	r2, [r3, #4]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	429a      	cmp	r2, r3
 800af92:	d32b      	bcc.n	800afec <prvCopyDataToQueue+0xc2>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	605a      	str	r2, [r3, #4]
 800af9c:	e026      	b.n	800afec <prvCopyDataToQueue+0xc2>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	68d8      	ldr	r0, [r3, #12]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	461a      	mov	r2, r3
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	f002 fbb6 	bl	800d71a <memcpy>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	425b      	negs	r3, r3
 800afb8:	441a      	add	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	60da      	str	r2, [r3, #12]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d207      	bcs.n	800afda <prvCopyDataToQueue+0xb0>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	425b      	negs	r3, r3
 800afd4:	441a      	add	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	60da      	str	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d105      	bne.n	800afec <prvCopyDataToQueue+0xc2>
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <prvCopyDataToQueue+0xc2>
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	3b01      	subs	r3, #1
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <prvCopyDataFromQueue>:
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d018      	beq.n	800b042 <prvCopyDataFromQueue+0x44>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	441a      	add	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60da      	str	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	d303      	bcc.n	800b032 <prvCopyDataFromQueue+0x34>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68d9      	ldr	r1, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	461a      	mov	r2, r3
 800b03c:	6838      	ldr	r0, [r7, #0]
 800b03e:	f002 fb6c 	bl	800d71a <memcpy>
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <prvUnlockQueue>:
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	f001 f9e7 	bl	800c424 <vPortEnterCritical>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b05c:	73fb      	strb	r3, [r7, #15]
 800b05e:	e011      	b.n	800b084 <prvUnlockQueue+0x3a>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d012      	beq.n	800b08e <prvUnlockQueue+0x44>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 fcc7 	bl	800ba00 <xTaskRemoveFromEventList>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <prvUnlockQueue+0x32>
 800b078:	f000 fd9c 	bl	800bbb4 <vTaskMissedYield>
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	3b01      	subs	r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	73fb      	strb	r3, [r7, #15]
 800b084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dce9      	bgt.n	800b060 <prvUnlockQueue+0x16>
 800b08c:	e000      	b.n	800b090 <prvUnlockQueue+0x46>
 800b08e:	bf00      	nop
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	22ff      	movs	r2, #255	; 0xff
 800b094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b098:	f001 f9f4 	bl	800c484 <vPortExitCritical>
 800b09c:	f001 f9c2 	bl	800c424 <vPortEnterCritical>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0a6:	73bb      	strb	r3, [r7, #14]
 800b0a8:	e011      	b.n	800b0ce <prvUnlockQueue+0x84>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d012      	beq.n	800b0d8 <prvUnlockQueue+0x8e>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3310      	adds	r3, #16
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 fca2 	bl	800ba00 <xTaskRemoveFromEventList>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <prvUnlockQueue+0x7c>
 800b0c2:	f000 fd77 	bl	800bbb4 <vTaskMissedYield>
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	73bb      	strb	r3, [r7, #14]
 800b0ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dce9      	bgt.n	800b0aa <prvUnlockQueue+0x60>
 800b0d6:	e000      	b.n	800b0da <prvUnlockQueue+0x90>
 800b0d8:	bf00      	nop
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	22ff      	movs	r2, #255	; 0xff
 800b0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0e2:	f001 f9cf 	bl	800c484 <vPortExitCritical>
 800b0e6:	bf00      	nop
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <prvIsQueueEmpty>:
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	f001 f995 	bl	800c424 <vPortEnterCritical>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <prvIsQueueEmpty+0x1a>
 800b102:	2301      	movs	r3, #1
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	e001      	b.n	800b10c <prvIsQueueEmpty+0x1e>
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	f001 f9ba 	bl	800c484 <vPortExitCritical>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <prvIsQueueFull>:
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	f001 f97f 	bl	800c424 <vPortEnterCritical>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b12e:	429a      	cmp	r2, r3
 800b130:	d102      	bne.n	800b138 <prvIsQueueFull+0x1e>
 800b132:	2301      	movs	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	e001      	b.n	800b13c <prvIsQueueFull+0x22>
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	f001 f9a2 	bl	800c484 <vPortExitCritical>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <vQueueUnregisterQueue>:
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e016      	b.n	800b188 <vQueueUnregisterQueue+0x3c>
 800b15a:	4a10      	ldr	r2, [pc, #64]	; (800b19c <vQueueUnregisterQueue+0x50>)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d10b      	bne.n	800b182 <vQueueUnregisterQueue+0x36>
 800b16a:	4a0c      	ldr	r2, [pc, #48]	; (800b19c <vQueueUnregisterQueue+0x50>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2100      	movs	r1, #0
 800b170:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800b174:	4a09      	ldr	r2, [pc, #36]	; (800b19c <vQueueUnregisterQueue+0x50>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	4413      	add	r3, r2
 800b17c:	2200      	movs	r2, #0
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	e006      	b.n	800b190 <vQueueUnregisterQueue+0x44>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b07      	cmp	r3, #7
 800b18c:	d9e5      	bls.n	800b15a <vQueueUnregisterQueue+0xe>
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	20001e6c 	.word	0x20001e6c

0800b1a0 <xTaskCreateStatic>:
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08e      	sub	sp, #56	; 0x38
 800b1a4:	af04      	add	r7, sp, #16
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10a      	bne.n	800b1ca <xTaskCreateStatic+0x2a>
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	623b      	str	r3, [r7, #32]
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <xTaskCreateStatic+0x28>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <xTaskCreateStatic+0x46>
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	61fb      	str	r3, [r7, #28]
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xTaskCreateStatic+0x44>
 800b1e6:	23a0      	movs	r3, #160	; 0xa0
 800b1e8:	613b      	str	r3, [r7, #16]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	2ba0      	cmp	r3, #160	; 0xa0
 800b1ee:	d00a      	beq.n	800b206 <xTaskCreateStatic+0x66>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xTaskCreateStatic+0x64>
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01e      	beq.n	800b24c <xTaskCreateStatic+0xac>
 800b20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b210:	2b00      	cmp	r3, #0
 800b212:	d01b      	beq.n	800b24c <xTaskCreateStatic+0xac>
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21c:	631a      	str	r2, [r3, #48]	; 0x30
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	2202      	movs	r2, #2
 800b222:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800b226:	2300      	movs	r3, #0
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	f107 0314 	add.w	r3, r7, #20
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	68b9      	ldr	r1, [r7, #8]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 f850 	bl	800b2e4 <prvInitialiseNewTask>
 800b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b246:	f000 f8eb 	bl	800b420 <prvAddNewTaskToReadyList>
 800b24a:	e001      	b.n	800b250 <xTaskCreateStatic+0xb0>
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	4618      	mov	r0, r3
 800b254:	3728      	adds	r7, #40	; 0x28
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <xTaskCreate>:
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b08c      	sub	sp, #48	; 0x30
 800b25e:	af04      	add	r7, sp, #16
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	603b      	str	r3, [r7, #0]
 800b266:	4613      	mov	r3, r2
 800b268:	80fb      	strh	r3, [r7, #6]
 800b26a:	88fb      	ldrh	r3, [r7, #6]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 f9fa 	bl	800c668 <pvPortMalloc>
 800b274:	6178      	str	r0, [r7, #20]
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <xTaskCreate+0x40>
 800b27c:	20a0      	movs	r0, #160	; 0xa0
 800b27e:	f001 f9f3 	bl	800c668 <pvPortMalloc>
 800b282:	61f8      	str	r0, [r7, #28]
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <xTaskCreate+0x38>
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	631a      	str	r2, [r3, #48]	; 0x30
 800b290:	e005      	b.n	800b29e <xTaskCreate+0x44>
 800b292:	6978      	ldr	r0, [r7, #20]
 800b294:	f001 fab4 	bl	800c800 <vPortFree>
 800b298:	e001      	b.n	800b29e <xTaskCreate+0x44>
 800b29a:	2300      	movs	r3, #0
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d017      	beq.n	800b2d4 <xTaskCreate+0x7a>
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800b2ac:	88fa      	ldrh	r2, [r7, #6]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9303      	str	r3, [sp, #12]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	9302      	str	r3, [sp, #8]
 800b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68b9      	ldr	r1, [r7, #8]
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f000 f80e 	bl	800b2e4 <prvInitialiseNewTask>
 800b2c8:	69f8      	ldr	r0, [r7, #28]
 800b2ca:	f000 f8a9 	bl	800b420 <prvAddNewTaskToReadyList>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	e002      	b.n	800b2da <xTaskCreate+0x80>
 800b2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2d8:	61bb      	str	r3, [r7, #24]
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3720      	adds	r7, #32
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <prvInitialiseNewTask>:
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	f023 0307 	bic.w	r3, r3, #7
 800b30a:	61bb      	str	r3, [r7, #24]
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	f003 0307 	and.w	r3, r3, #7
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <prvInitialiseNewTask+0x48>
 800b316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	bf00      	nop
 800b32a:	e7fe      	b.n	800b32a <prvInitialiseNewTask+0x46>
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01f      	beq.n	800b372 <prvInitialiseNewTask+0x8e>
 800b332:	2300      	movs	r3, #0
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	e012      	b.n	800b35e <prvInitialiseNewTask+0x7a>
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	4413      	add	r3, r2
 800b346:	3334      	adds	r3, #52	; 0x34
 800b348:	460a      	mov	r2, r1
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <prvInitialiseNewTask+0x82>
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	3301      	adds	r3, #1
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2b0f      	cmp	r3, #15
 800b362:	d9e9      	bls.n	800b338 <prvInitialiseNewTask+0x54>
 800b364:	e000      	b.n	800b368 <prvInitialiseNewTask+0x84>
 800b366:	bf00      	nop
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b370:	e003      	b.n	800b37a <prvInitialiseNewTask+0x96>
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	2b06      	cmp	r3, #6
 800b37e:	d901      	bls.n	800b384 <prvInitialiseNewTask+0xa0>
 800b380:	2306      	movs	r3, #6
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b388:	62da      	str	r2, [r3, #44]	; 0x2c
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b38e:	645a      	str	r2, [r3, #68]	; 0x44
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	2200      	movs	r2, #0
 800b394:	649a      	str	r2, [r3, #72]	; 0x48
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	3304      	adds	r3, #4
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff f8a3 	bl	800a4e6 <vListInitialiseItem>
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	3318      	adds	r3, #24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff f89e 	bl	800a4e6 <vListInitialiseItem>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ae:	611a      	str	r2, [r3, #16]
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	f1c3 0207 	rsb	r2, r3, #7
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	619a      	str	r2, [r3, #24]
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	625a      	str	r2, [r3, #36]	; 0x24
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	334c      	adds	r3, #76	; 0x4c
 800b3d4:	224c      	movs	r2, #76	; 0x4c
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f002 f8ba 	bl	800d552 <memset>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	4a0c      	ldr	r2, [pc, #48]	; (800b414 <prvInitialiseNewTask+0x130>)
 800b3e2:	651a      	str	r2, [r3, #80]	; 0x50
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	4a0c      	ldr	r2, [pc, #48]	; (800b418 <prvInitialiseNewTask+0x134>)
 800b3e8:	655a      	str	r2, [r3, #84]	; 0x54
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	4a0b      	ldr	r2, [pc, #44]	; (800b41c <prvInitialiseNewTask+0x138>)
 800b3ee:	659a      	str	r2, [r3, #88]	; 0x58
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	68f9      	ldr	r1, [r7, #12]
 800b3f4:	69b8      	ldr	r0, [r7, #24]
 800b3f6:	f000 fee5 	bl	800c1c4 <pxPortInitialiseStack>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <prvInitialiseNewTask+0x128>
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	bf00      	nop
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20005c00 	.word	0x20005c00
 800b418:	20005c68 	.word	0x20005c68
 800b41c:	20005cd0 	.word	0x20005cd0

0800b420 <prvAddNewTaskToReadyList>:
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	f000 fffc 	bl	800c424 <vPortEnterCritical>
 800b42c:	4b2a      	ldr	r3, [pc, #168]	; (800b4d8 <prvAddNewTaskToReadyList+0xb8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	4a29      	ldr	r2, [pc, #164]	; (800b4d8 <prvAddNewTaskToReadyList+0xb8>)
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	4b29      	ldr	r3, [pc, #164]	; (800b4dc <prvAddNewTaskToReadyList+0xbc>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <prvAddNewTaskToReadyList+0x32>
 800b43e:	4a27      	ldr	r2, [pc, #156]	; (800b4dc <prvAddNewTaskToReadyList+0xbc>)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	4b24      	ldr	r3, [pc, #144]	; (800b4d8 <prvAddNewTaskToReadyList+0xb8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d110      	bne.n	800b46e <prvAddNewTaskToReadyList+0x4e>
 800b44c:	f000 fbd6 	bl	800bbfc <prvInitialiseTaskLists>
 800b450:	e00d      	b.n	800b46e <prvAddNewTaskToReadyList+0x4e>
 800b452:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <prvAddNewTaskToReadyList+0xc0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <prvAddNewTaskToReadyList+0x4e>
 800b45a:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <prvAddNewTaskToReadyList+0xbc>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	429a      	cmp	r2, r3
 800b466:	d802      	bhi.n	800b46e <prvAddNewTaskToReadyList+0x4e>
 800b468:	4a1c      	ldr	r2, [pc, #112]	; (800b4dc <prvAddNewTaskToReadyList+0xbc>)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	4b1d      	ldr	r3, [pc, #116]	; (800b4e4 <prvAddNewTaskToReadyList+0xc4>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3301      	adds	r3, #1
 800b474:	4a1b      	ldr	r2, [pc, #108]	; (800b4e4 <prvAddNewTaskToReadyList+0xc4>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	2201      	movs	r2, #1
 800b47e:	409a      	lsls	r2, r3
 800b480:	4b19      	ldr	r3, [pc, #100]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4313      	orrs	r3, r2
 800b486:	4a18      	ldr	r2, [pc, #96]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <prvAddNewTaskToReadyList+0xcc>)
 800b498:	441a      	add	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3304      	adds	r3, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f7ff f82d 	bl	800a500 <vListInsertEnd>
 800b4a6:	f000 ffed 	bl	800c484 <vPortExitCritical>
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	; (800b4e0 <prvAddNewTaskToReadyList+0xc0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00e      	beq.n	800b4d0 <prvAddNewTaskToReadyList+0xb0>
 800b4b2:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <prvAddNewTaskToReadyList+0xbc>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d207      	bcs.n	800b4d0 <prvAddNewTaskToReadyList+0xb0>
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <prvAddNewTaskToReadyList+0xd0>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	20001fac 	.word	0x20001fac
 800b4dc:	20001eac 	.word	0x20001eac
 800b4e0:	20001fb8 	.word	0x20001fb8
 800b4e4:	20001fc8 	.word	0x20001fc8
 800b4e8:	20001fb4 	.word	0x20001fb4
 800b4ec:	20001eb0 	.word	0x20001eb0
 800b4f0:	e000ed04 	.word	0xe000ed04

0800b4f4 <vTaskDelay>:
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d017      	beq.n	800b536 <vTaskDelay+0x42>
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <vTaskDelay+0x60>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <vTaskDelay+0x30>
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	60bb      	str	r3, [r7, #8]
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <vTaskDelay+0x2e>
 800b524:	f000 f884 	bl	800b630 <vTaskSuspendAll>
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fde4 	bl	800c0f8 <prvAddCurrentTaskToDelayedList>
 800b530:	f000 f88c 	bl	800b64c <xTaskResumeAll>
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d107      	bne.n	800b54c <vTaskDelay+0x58>
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <vTaskDelay+0x64>)
 800b53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	20001fd4 	.word	0x20001fd4
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <vTaskStartScheduler>:
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08a      	sub	sp, #40	; 0x28
 800b560:	af04      	add	r7, sp, #16
 800b562:	2300      	movs	r3, #0
 800b564:	60bb      	str	r3, [r7, #8]
 800b566:	2300      	movs	r3, #0
 800b568:	607b      	str	r3, [r7, #4]
 800b56a:	463a      	mov	r2, r7
 800b56c:	1d39      	adds	r1, r7, #4
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4618      	mov	r0, r3
 800b574:	f7f6 fa6e 	bl	8001a54 <vApplicationGetIdleTaskMemory>
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	9202      	str	r2, [sp, #8]
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	2300      	movs	r3, #0
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	2300      	movs	r3, #0
 800b588:	460a      	mov	r2, r1
 800b58a:	4921      	ldr	r1, [pc, #132]	; (800b610 <vTaskStartScheduler+0xb4>)
 800b58c:	4821      	ldr	r0, [pc, #132]	; (800b614 <vTaskStartScheduler+0xb8>)
 800b58e:	f7ff fe07 	bl	800b1a0 <xTaskCreateStatic>
 800b592:	4603      	mov	r3, r0
 800b594:	4a20      	ldr	r2, [pc, #128]	; (800b618 <vTaskStartScheduler+0xbc>)
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	4b1f      	ldr	r3, [pc, #124]	; (800b618 <vTaskStartScheduler+0xbc>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <vTaskStartScheduler+0x4a>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e001      	b.n	800b5aa <vTaskStartScheduler+0x4e>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d11b      	bne.n	800b5e8 <vTaskStartScheduler+0x8c>
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
 800b5c2:	bf00      	nop
 800b5c4:	4b15      	ldr	r3, [pc, #84]	; (800b61c <vTaskStartScheduler+0xc0>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	334c      	adds	r3, #76	; 0x4c
 800b5ca:	4a15      	ldr	r2, [pc, #84]	; (800b620 <vTaskStartScheduler+0xc4>)
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	4b15      	ldr	r3, [pc, #84]	; (800b624 <vTaskStartScheduler+0xc8>)
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <vTaskStartScheduler+0xcc>)
 800b5d8:	2201      	movs	r2, #1
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	4b13      	ldr	r3, [pc, #76]	; (800b62c <vTaskStartScheduler+0xd0>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	f000 fe7d 	bl	800c2e0 <xPortStartScheduler>
 800b5e6:	e00e      	b.n	800b606 <vTaskStartScheduler+0xaa>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ee:	d10a      	bne.n	800b606 <vTaskStartScheduler+0xaa>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <vTaskStartScheduler+0xa8>
 800b606:	bf00      	nop
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08010ce0 	.word	0x08010ce0
 800b614:	0800bbcd 	.word	0x0800bbcd
 800b618:	20001fd0 	.word	0x20001fd0
 800b61c:	20001eac 	.word	0x20001eac
 800b620:	20000084 	.word	0x20000084
 800b624:	20001fcc 	.word	0x20001fcc
 800b628:	20001fb8 	.word	0x20001fb8
 800b62c:	20001fb0 	.word	0x20001fb0

0800b630 <vTaskSuspendAll>:
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
 800b634:	4b04      	ldr	r3, [pc, #16]	; (800b648 <vTaskSuspendAll+0x18>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3301      	adds	r3, #1
 800b63a:	4a03      	ldr	r2, [pc, #12]	; (800b648 <vTaskSuspendAll+0x18>)
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	bf00      	nop
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	20001fd4 	.word	0x20001fd4

0800b64c <xTaskResumeAll>:
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	2300      	movs	r3, #0
 800b658:	60bb      	str	r3, [r7, #8]
 800b65a:	4b41      	ldr	r3, [pc, #260]	; (800b760 <xTaskResumeAll+0x114>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10a      	bne.n	800b678 <xTaskResumeAll+0x2c>
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <xTaskResumeAll+0x2a>
 800b678:	f000 fed4 	bl	800c424 <vPortEnterCritical>
 800b67c:	4b38      	ldr	r3, [pc, #224]	; (800b760 <xTaskResumeAll+0x114>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3b01      	subs	r3, #1
 800b682:	4a37      	ldr	r2, [pc, #220]	; (800b760 <xTaskResumeAll+0x114>)
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	4b36      	ldr	r3, [pc, #216]	; (800b760 <xTaskResumeAll+0x114>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d161      	bne.n	800b752 <xTaskResumeAll+0x106>
 800b68e:	4b35      	ldr	r3, [pc, #212]	; (800b764 <xTaskResumeAll+0x118>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d05d      	beq.n	800b752 <xTaskResumeAll+0x106>
 800b696:	e02e      	b.n	800b6f6 <xTaskResumeAll+0xaa>
 800b698:	4b33      	ldr	r3, [pc, #204]	; (800b768 <xTaskResumeAll+0x11c>)
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3318      	adds	r3, #24
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe ff88 	bl	800a5ba <uxListRemove>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe ff83 	bl	800a5ba <uxListRemove>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	409a      	lsls	r2, r3
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	; (800b76c <xTaskResumeAll+0x120>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	4a2a      	ldr	r2, [pc, #168]	; (800b76c <xTaskResumeAll+0x120>)
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4a27      	ldr	r2, [pc, #156]	; (800b770 <xTaskResumeAll+0x124>)
 800b6d4:	441a      	add	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f7fe ff0f 	bl	800a500 <vListInsertEnd>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e6:	4b23      	ldr	r3, [pc, #140]	; (800b774 <xTaskResumeAll+0x128>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d302      	bcc.n	800b6f6 <xTaskResumeAll+0xaa>
 800b6f0:	4b21      	ldr	r3, [pc, #132]	; (800b778 <xTaskResumeAll+0x12c>)
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	4b1c      	ldr	r3, [pc, #112]	; (800b768 <xTaskResumeAll+0x11c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1cc      	bne.n	800b698 <xTaskResumeAll+0x4c>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <xTaskResumeAll+0xbc>
 800b704:	f000 fb1c 	bl	800bd40 <prvResetNextTaskUnblockTime>
 800b708:	4b1c      	ldr	r3, [pc, #112]	; (800b77c <xTaskResumeAll+0x130>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	607b      	str	r3, [r7, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d010      	beq.n	800b736 <xTaskResumeAll+0xea>
 800b714:	f000 f836 	bl	800b784 <xTaskIncrementTick>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <xTaskResumeAll+0xd8>
 800b71e:	4b16      	ldr	r3, [pc, #88]	; (800b778 <xTaskResumeAll+0x12c>)
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3b01      	subs	r3, #1
 800b728:	607b      	str	r3, [r7, #4]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f1      	bne.n	800b714 <xTaskResumeAll+0xc8>
 800b730:	4b12      	ldr	r3, [pc, #72]	; (800b77c <xTaskResumeAll+0x130>)
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	4b10      	ldr	r3, [pc, #64]	; (800b778 <xTaskResumeAll+0x12c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d009      	beq.n	800b752 <xTaskResumeAll+0x106>
 800b73e:	2301      	movs	r3, #1
 800b740:	60bb      	str	r3, [r7, #8]
 800b742:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <xTaskResumeAll+0x134>)
 800b744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f000 fe97 	bl	800c484 <vPortExitCritical>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20001fd4 	.word	0x20001fd4
 800b764:	20001fac 	.word	0x20001fac
 800b768:	20001f6c 	.word	0x20001f6c
 800b76c:	20001fb4 	.word	0x20001fb4
 800b770:	20001eb0 	.word	0x20001eb0
 800b774:	20001eac 	.word	0x20001eac
 800b778:	20001fc0 	.word	0x20001fc0
 800b77c:	20001fbc 	.word	0x20001fbc
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <xTaskIncrementTick>:
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	4b4e      	ldr	r3, [pc, #312]	; (800b8c8 <xTaskIncrementTick+0x144>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f040 808e 	bne.w	800b8b4 <xTaskIncrementTick+0x130>
 800b798:	4b4c      	ldr	r3, [pc, #304]	; (800b8cc <xTaskIncrementTick+0x148>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	613b      	str	r3, [r7, #16]
 800b7a0:	4a4a      	ldr	r2, [pc, #296]	; (800b8cc <xTaskIncrementTick+0x148>)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d120      	bne.n	800b7ee <xTaskIncrementTick+0x6a>
 800b7ac:	4b48      	ldr	r3, [pc, #288]	; (800b8d0 <xTaskIncrementTick+0x14c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <xTaskIncrementTick+0x48>
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <xTaskIncrementTick+0x46>
 800b7cc:	4b40      	ldr	r3, [pc, #256]	; (800b8d0 <xTaskIncrementTick+0x14c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	4b40      	ldr	r3, [pc, #256]	; (800b8d4 <xTaskIncrementTick+0x150>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a3e      	ldr	r2, [pc, #248]	; (800b8d0 <xTaskIncrementTick+0x14c>)
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	4a3e      	ldr	r2, [pc, #248]	; (800b8d4 <xTaskIncrementTick+0x150>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6013      	str	r3, [r2, #0]
 800b7e0:	4b3d      	ldr	r3, [pc, #244]	; (800b8d8 <xTaskIncrementTick+0x154>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a3c      	ldr	r2, [pc, #240]	; (800b8d8 <xTaskIncrementTick+0x154>)
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	f000 faa9 	bl	800bd40 <prvResetNextTaskUnblockTime>
 800b7ee:	4b3b      	ldr	r3, [pc, #236]	; (800b8dc <xTaskIncrementTick+0x158>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d348      	bcc.n	800b88a <xTaskIncrementTick+0x106>
 800b7f8:	4b35      	ldr	r3, [pc, #212]	; (800b8d0 <xTaskIncrementTick+0x14c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d104      	bne.n	800b80c <xTaskIncrementTick+0x88>
 800b802:	4b36      	ldr	r3, [pc, #216]	; (800b8dc <xTaskIncrementTick+0x158>)
 800b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e03e      	b.n	800b88a <xTaskIncrementTick+0x106>
 800b80c:	4b30      	ldr	r3, [pc, #192]	; (800b8d0 <xTaskIncrementTick+0x14c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	60bb      	str	r3, [r7, #8]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d203      	bcs.n	800b82c <xTaskIncrementTick+0xa8>
 800b824:	4a2d      	ldr	r2, [pc, #180]	; (800b8dc <xTaskIncrementTick+0x158>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e02e      	b.n	800b88a <xTaskIncrementTick+0x106>
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	3304      	adds	r3, #4
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe fec2 	bl	800a5ba <uxListRemove>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d004      	beq.n	800b848 <xTaskIncrementTick+0xc4>
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	3318      	adds	r3, #24
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe feb9 	bl	800a5ba <uxListRemove>
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	2201      	movs	r2, #1
 800b84e:	409a      	lsls	r2, r3
 800b850:	4b23      	ldr	r3, [pc, #140]	; (800b8e0 <xTaskIncrementTick+0x15c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4313      	orrs	r3, r2
 800b856:	4a22      	ldr	r2, [pc, #136]	; (800b8e0 <xTaskIncrementTick+0x15c>)
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4a1f      	ldr	r2, [pc, #124]	; (800b8e4 <xTaskIncrementTick+0x160>)
 800b868:	441a      	add	r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fe fe45 	bl	800a500 <vListInsertEnd>
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	4b1b      	ldr	r3, [pc, #108]	; (800b8e8 <xTaskIncrementTick+0x164>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	429a      	cmp	r2, r3
 800b882:	d3b9      	bcc.n	800b7f8 <xTaskIncrementTick+0x74>
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e7b6      	b.n	800b7f8 <xTaskIncrementTick+0x74>
 800b88a:	4b17      	ldr	r3, [pc, #92]	; (800b8e8 <xTaskIncrementTick+0x164>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b890:	4914      	ldr	r1, [pc, #80]	; (800b8e4 <xTaskIncrementTick+0x160>)
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d901      	bls.n	800b8a6 <xTaskIncrementTick+0x122>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <xTaskIncrementTick+0x168>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d007      	beq.n	800b8be <xTaskIncrementTick+0x13a>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e004      	b.n	800b8be <xTaskIncrementTick+0x13a>
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <xTaskIncrementTick+0x16c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	4a0d      	ldr	r2, [pc, #52]	; (800b8f0 <xTaskIncrementTick+0x16c>)
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20001fd4 	.word	0x20001fd4
 800b8cc:	20001fb0 	.word	0x20001fb0
 800b8d0:	20001f64 	.word	0x20001f64
 800b8d4:	20001f68 	.word	0x20001f68
 800b8d8:	20001fc4 	.word	0x20001fc4
 800b8dc:	20001fcc 	.word	0x20001fcc
 800b8e0:	20001fb4 	.word	0x20001fb4
 800b8e4:	20001eb0 	.word	0x20001eb0
 800b8e8:	20001eac 	.word	0x20001eac
 800b8ec:	20001fc0 	.word	0x20001fc0
 800b8f0:	20001fbc 	.word	0x20001fbc

0800b8f4 <vTaskSwitchContext>:
 800b8f4:	b480      	push	{r7}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4b29      	ldr	r3, [pc, #164]	; (800b9a0 <vTaskSwitchContext+0xac>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <vTaskSwitchContext+0x16>
 800b902:	4b28      	ldr	r3, [pc, #160]	; (800b9a4 <vTaskSwitchContext+0xb0>)
 800b904:	2201      	movs	r2, #1
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e044      	b.n	800b994 <vTaskSwitchContext+0xa0>
 800b90a:	4b26      	ldr	r3, [pc, #152]	; (800b9a4 <vTaskSwitchContext+0xb0>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	4b25      	ldr	r3, [pc, #148]	; (800b9a8 <vTaskSwitchContext+0xb4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	fab3 f383 	clz	r3, r3
 800b91c:	72fb      	strb	r3, [r7, #11]
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	f1c3 031f 	rsb	r3, r3, #31
 800b924:	617b      	str	r3, [r7, #20]
 800b926:	4921      	ldr	r1, [pc, #132]	; (800b9ac <vTaskSwitchContext+0xb8>)
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	440b      	add	r3, r1
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <vTaskSwitchContext+0x5c>
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	607b      	str	r3, [r7, #4]
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <vTaskSwitchContext+0x5a>
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4a14      	ldr	r2, [pc, #80]	; (800b9ac <vTaskSwitchContext+0xb8>)
 800b95c:	4413      	add	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	605a      	str	r2, [r3, #4]
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3308      	adds	r3, #8
 800b972:	429a      	cmp	r2, r3
 800b974:	d104      	bne.n	800b980 <vTaskSwitchContext+0x8c>
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	605a      	str	r2, [r3, #4]
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4a0a      	ldr	r2, [pc, #40]	; (800b9b0 <vTaskSwitchContext+0xbc>)
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <vTaskSwitchContext+0xbc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	334c      	adds	r3, #76	; 0x4c
 800b990:	4a08      	ldr	r2, [pc, #32]	; (800b9b4 <vTaskSwitchContext+0xc0>)
 800b992:	6013      	str	r3, [r2, #0]
 800b994:	bf00      	nop
 800b996:	371c      	adds	r7, #28
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	20001fd4 	.word	0x20001fd4
 800b9a4:	20001fc0 	.word	0x20001fc0
 800b9a8:	20001fb4 	.word	0x20001fb4
 800b9ac:	20001eb0 	.word	0x20001eb0
 800b9b0:	20001eac 	.word	0x20001eac
 800b9b4:	20000084 	.word	0x20000084

0800b9b8 <vTaskPlaceOnEventList>:
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <vTaskPlaceOnEventList+0x26>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <vTaskPlaceOnEventList+0x24>
 800b9de:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <vTaskPlaceOnEventList+0x44>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3318      	adds	r3, #24
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7fe fdae 	bl	800a548 <vListInsert>
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	6838      	ldr	r0, [r7, #0]
 800b9f0:	f000 fb82 	bl	800c0f8 <prvAddCurrentTaskToDelayedList>
 800b9f4:	bf00      	nop
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20001eac 	.word	0x20001eac

0800ba00 <xTaskRemoveFromEventList>:
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	613b      	str	r3, [r7, #16]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <xTaskRemoveFromEventList+0x2c>
 800ba16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	bf00      	nop
 800ba2a:	e7fe      	b.n	800ba2a <xTaskRemoveFromEventList+0x2a>
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	3318      	adds	r3, #24
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fdc2 	bl	800a5ba <uxListRemove>
 800ba36:	4b1d      	ldr	r3, [pc, #116]	; (800baac <xTaskRemoveFromEventList+0xac>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d11c      	bne.n	800ba78 <xTaskRemoveFromEventList+0x78>
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	3304      	adds	r3, #4
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fdb9 	bl	800a5ba <uxListRemove>
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	409a      	lsls	r2, r3
 800ba50:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <xTaskRemoveFromEventList+0xb0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	4a16      	ldr	r2, [pc, #88]	; (800bab0 <xTaskRemoveFromEventList+0xb0>)
 800ba58:	6013      	str	r3, [r2, #0]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <xTaskRemoveFromEventList+0xb4>)
 800ba68:	441a      	add	r2, r3
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4610      	mov	r0, r2
 800ba72:	f7fe fd45 	bl	800a500 <vListInsertEnd>
 800ba76:	e005      	b.n	800ba84 <xTaskRemoveFromEventList+0x84>
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	3318      	adds	r3, #24
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	480e      	ldr	r0, [pc, #56]	; (800bab8 <xTaskRemoveFromEventList+0xb8>)
 800ba80:	f7fe fd3e 	bl	800a500 <vListInsertEnd>
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4b0c      	ldr	r3, [pc, #48]	; (800babc <xTaskRemoveFromEventList+0xbc>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d905      	bls.n	800ba9e <xTaskRemoveFromEventList+0x9e>
 800ba92:	2301      	movs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	4b0a      	ldr	r3, [pc, #40]	; (800bac0 <xTaskRemoveFromEventList+0xc0>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	e001      	b.n	800baa2 <xTaskRemoveFromEventList+0xa2>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	4618      	mov	r0, r3
 800baa6:	3718      	adds	r7, #24
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20001fd4 	.word	0x20001fd4
 800bab0:	20001fb4 	.word	0x20001fb4
 800bab4:	20001eb0 	.word	0x20001eb0
 800bab8:	20001f6c 	.word	0x20001f6c
 800babc:	20001eac 	.word	0x20001eac
 800bac0:	20001fc0 	.word	0x20001fc0

0800bac4 <vTaskInternalSetTimeOutState>:
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <vTaskInternalSetTimeOutState+0x24>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <vTaskInternalSetTimeOutState+0x28>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	605a      	str	r2, [r3, #4]
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	20001fc4 	.word	0x20001fc4
 800baec:	20001fb0 	.word	0x20001fb0

0800baf0 <xTaskCheckForTimeOut>:
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xTaskCheckForTimeOut+0x26>
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xTaskCheckForTimeOut+0x24>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xTaskCheckForTimeOut+0x42>
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xTaskCheckForTimeOut+0x40>
 800bb32:	f000 fc77 	bl	800c424 <vPortEnterCritical>
 800bb36:	4b1d      	ldr	r3, [pc, #116]	; (800bbac <xTaskCheckForTimeOut+0xbc>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	61bb      	str	r3, [r7, #24]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	69ba      	ldr	r2, [r7, #24]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb4e:	d102      	bne.n	800bb56 <xTaskCheckForTimeOut+0x66>
 800bb50:	2300      	movs	r3, #0
 800bb52:	61fb      	str	r3, [r7, #28]
 800bb54:	e023      	b.n	800bb9e <xTaskCheckForTimeOut+0xae>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <xTaskCheckForTimeOut+0xc0>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d007      	beq.n	800bb72 <xTaskCheckForTimeOut+0x82>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d302      	bcc.n	800bb72 <xTaskCheckForTimeOut+0x82>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e015      	b.n	800bb9e <xTaskCheckForTimeOut+0xae>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d20b      	bcs.n	800bb94 <xTaskCheckForTimeOut+0xa4>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff ff9b 	bl	800bac4 <vTaskInternalSetTimeOutState>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	61fb      	str	r3, [r7, #28]
 800bb92:	e004      	b.n	800bb9e <xTaskCheckForTimeOut+0xae>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	61fb      	str	r3, [r7, #28]
 800bb9e:	f000 fc71 	bl	800c484 <vPortExitCritical>
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	4618      	mov	r0, r3
 800bba6:	3720      	adds	r7, #32
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20001fb0 	.word	0x20001fb0
 800bbb0:	20001fc4 	.word	0x20001fc4

0800bbb4 <vTaskMissedYield>:
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <vTaskMissedYield+0x14>)
 800bbba:	2201      	movs	r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	bf00      	nop
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	20001fc0 	.word	0x20001fc0

0800bbcc <prvIdleTask>:
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	f000 f852 	bl	800bc7c <prvCheckTasksWaitingTermination>
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <prvIdleTask+0x28>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d9f9      	bls.n	800bbd4 <prvIdleTask+0x8>
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <prvIdleTask+0x2c>)
 800bbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	e7f0      	b.n	800bbd4 <prvIdleTask+0x8>
 800bbf2:	bf00      	nop
 800bbf4:	20001eb0 	.word	0x20001eb0
 800bbf8:	e000ed04 	.word	0xe000ed04

0800bbfc <prvInitialiseTaskLists>:
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	2300      	movs	r3, #0
 800bc04:	607b      	str	r3, [r7, #4]
 800bc06:	e00c      	b.n	800bc22 <prvInitialiseTaskLists+0x26>
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4413      	add	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4a12      	ldr	r2, [pc, #72]	; (800bc5c <prvInitialiseTaskLists+0x60>)
 800bc14:	4413      	add	r3, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fe fc45 	bl	800a4a6 <vListInitialise>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	607b      	str	r3, [r7, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b06      	cmp	r3, #6
 800bc26:	d9ef      	bls.n	800bc08 <prvInitialiseTaskLists+0xc>
 800bc28:	480d      	ldr	r0, [pc, #52]	; (800bc60 <prvInitialiseTaskLists+0x64>)
 800bc2a:	f7fe fc3c 	bl	800a4a6 <vListInitialise>
 800bc2e:	480d      	ldr	r0, [pc, #52]	; (800bc64 <prvInitialiseTaskLists+0x68>)
 800bc30:	f7fe fc39 	bl	800a4a6 <vListInitialise>
 800bc34:	480c      	ldr	r0, [pc, #48]	; (800bc68 <prvInitialiseTaskLists+0x6c>)
 800bc36:	f7fe fc36 	bl	800a4a6 <vListInitialise>
 800bc3a:	480c      	ldr	r0, [pc, #48]	; (800bc6c <prvInitialiseTaskLists+0x70>)
 800bc3c:	f7fe fc33 	bl	800a4a6 <vListInitialise>
 800bc40:	480b      	ldr	r0, [pc, #44]	; (800bc70 <prvInitialiseTaskLists+0x74>)
 800bc42:	f7fe fc30 	bl	800a4a6 <vListInitialise>
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <prvInitialiseTaskLists+0x78>)
 800bc48:	4a05      	ldr	r2, [pc, #20]	; (800bc60 <prvInitialiseTaskLists+0x64>)
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <prvInitialiseTaskLists+0x7c>)
 800bc4e:	4a05      	ldr	r2, [pc, #20]	; (800bc64 <prvInitialiseTaskLists+0x68>)
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20001eb0 	.word	0x20001eb0
 800bc60:	20001f3c 	.word	0x20001f3c
 800bc64:	20001f50 	.word	0x20001f50
 800bc68:	20001f6c 	.word	0x20001f6c
 800bc6c:	20001f80 	.word	0x20001f80
 800bc70:	20001f98 	.word	0x20001f98
 800bc74:	20001f64 	.word	0x20001f64
 800bc78:	20001f68 	.word	0x20001f68

0800bc7c <prvCheckTasksWaitingTermination>:
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	e019      	b.n	800bcb8 <prvCheckTasksWaitingTermination+0x3c>
 800bc84:	f000 fbce 	bl	800c424 <vPortEnterCritical>
 800bc88:	4b10      	ldr	r3, [pc, #64]	; (800bccc <prvCheckTasksWaitingTermination+0x50>)
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe fc90 	bl	800a5ba <uxListRemove>
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	; (800bcd0 <prvCheckTasksWaitingTermination+0x54>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	4a0b      	ldr	r2, [pc, #44]	; (800bcd0 <prvCheckTasksWaitingTermination+0x54>)
 800bca2:	6013      	str	r3, [r2, #0]
 800bca4:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <prvCheckTasksWaitingTermination+0x58>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	4a0a      	ldr	r2, [pc, #40]	; (800bcd4 <prvCheckTasksWaitingTermination+0x58>)
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	f000 fbe9 	bl	800c484 <vPortExitCritical>
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f810 	bl	800bcd8 <prvDeleteTCB>
 800bcb8:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <prvCheckTasksWaitingTermination+0x58>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e1      	bne.n	800bc84 <prvCheckTasksWaitingTermination+0x8>
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20001f80 	.word	0x20001f80
 800bcd0:	20001fac 	.word	0x20001fac
 800bcd4:	20001f94 	.word	0x20001f94

0800bcd8 <prvDeleteTCB>:
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	334c      	adds	r3, #76	; 0x4c
 800bce4:	4618      	mov	r0, r3
 800bce6:	f001 fc5f 	bl	800d5a8 <_reclaim_reent>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d108      	bne.n	800bd06 <prvDeleteTCB+0x2e>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fd81 	bl	800c800 <vPortFree>
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fd7e 	bl	800c800 <vPortFree>
 800bd04:	e018      	b.n	800bd38 <prvDeleteTCB+0x60>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d103      	bne.n	800bd18 <prvDeleteTCB+0x40>
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fd75 	bl	800c800 <vPortFree>
 800bd16:	e00f      	b.n	800bd38 <prvDeleteTCB+0x60>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d00a      	beq.n	800bd38 <prvDeleteTCB+0x60>
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <prvDeleteTCB+0x5e>
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <prvResetNextTaskUnblockTime>:
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4b0c      	ldr	r3, [pc, #48]	; (800bd78 <prvResetNextTaskUnblockTime+0x38>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d104      	bne.n	800bd5a <prvResetNextTaskUnblockTime+0x1a>
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <prvResetNextTaskUnblockTime+0x3c>)
 800bd52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e008      	b.n	800bd6c <prvResetNextTaskUnblockTime+0x2c>
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <prvResetNextTaskUnblockTime+0x38>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	607b      	str	r3, [r7, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	4a04      	ldr	r2, [pc, #16]	; (800bd7c <prvResetNextTaskUnblockTime+0x3c>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	20001f64 	.word	0x20001f64
 800bd7c:	20001fcc 	.word	0x20001fcc

0800bd80 <xTaskGetSchedulerState>:
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <xTaskGetSchedulerState+0x34>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <xTaskGetSchedulerState+0x14>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	607b      	str	r3, [r7, #4]
 800bd92:	e008      	b.n	800bda6 <xTaskGetSchedulerState+0x26>
 800bd94:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <xTaskGetSchedulerState+0x38>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <xTaskGetSchedulerState+0x22>
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	e001      	b.n	800bda6 <xTaskGetSchedulerState+0x26>
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	20001fb8 	.word	0x20001fb8
 800bdb8:	20001fd4 	.word	0x20001fd4

0800bdbc <xTaskPriorityInherit>:
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	60bb      	str	r3, [r7, #8]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d05e      	beq.n	800be90 <xTaskPriorityInherit+0xd4>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd6:	4b31      	ldr	r3, [pc, #196]	; (800be9c <xTaskPriorityInherit+0xe0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d24e      	bcs.n	800be7e <xTaskPriorityInherit+0xc2>
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	db06      	blt.n	800bdf6 <xTaskPriorityInherit+0x3a>
 800bde8:	4b2c      	ldr	r3, [pc, #176]	; (800be9c <xTaskPriorityInherit+0xe0>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	f1c3 0207 	rsb	r2, r3, #7
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	619a      	str	r2, [r3, #24]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	6959      	ldr	r1, [r3, #20]
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4a26      	ldr	r2, [pc, #152]	; (800bea0 <xTaskPriorityInherit+0xe4>)
 800be08:	4413      	add	r3, r2
 800be0a:	4299      	cmp	r1, r3
 800be0c:	d12f      	bne.n	800be6e <xTaskPriorityInherit+0xb2>
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	3304      	adds	r3, #4
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fbd1 	bl	800a5ba <uxListRemove>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10a      	bne.n	800be34 <xTaskPriorityInherit+0x78>
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	2201      	movs	r2, #1
 800be24:	fa02 f303 	lsl.w	r3, r2, r3
 800be28:	43da      	mvns	r2, r3
 800be2a:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <xTaskPriorityInherit+0xe8>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4013      	ands	r3, r2
 800be30:	4a1c      	ldr	r2, [pc, #112]	; (800bea4 <xTaskPriorityInherit+0xe8>)
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	4b19      	ldr	r3, [pc, #100]	; (800be9c <xTaskPriorityInherit+0xe0>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	62da      	str	r2, [r3, #44]	; 0x2c
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	2201      	movs	r2, #1
 800be44:	409a      	lsls	r2, r3
 800be46:	4b17      	ldr	r3, [pc, #92]	; (800bea4 <xTaskPriorityInherit+0xe8>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <xTaskPriorityInherit+0xe8>)
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4a10      	ldr	r2, [pc, #64]	; (800bea0 <xTaskPriorityInherit+0xe4>)
 800be5e:	441a      	add	r2, r3
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe fb4a 	bl	800a500 <vListInsertEnd>
 800be6c:	e004      	b.n	800be78 <xTaskPriorityInherit+0xbc>
 800be6e:	4b0b      	ldr	r3, [pc, #44]	; (800be9c <xTaskPriorityInherit+0xe0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	62da      	str	r2, [r3, #44]	; 0x2c
 800be78:	2301      	movs	r3, #1
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	e008      	b.n	800be90 <xTaskPriorityInherit+0xd4>
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be82:	4b06      	ldr	r3, [pc, #24]	; (800be9c <xTaskPriorityInherit+0xe0>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d201      	bcs.n	800be90 <xTaskPriorityInherit+0xd4>
 800be8c:	2301      	movs	r3, #1
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20001eac 	.word	0x20001eac
 800bea0:	20001eb0 	.word	0x20001eb0
 800bea4:	20001fb4 	.word	0x20001fb4

0800bea8 <xTaskPriorityDisinherit>:
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	2300      	movs	r3, #0
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d06e      	beq.n	800bf9c <xTaskPriorityDisinherit+0xf4>
 800bebe:	4b3a      	ldr	r3, [pc, #232]	; (800bfa8 <xTaskPriorityDisinherit+0x100>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d00a      	beq.n	800bede <xTaskPriorityDisinherit+0x36>
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xTaskPriorityDisinherit+0x34>
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <xTaskPriorityDisinherit+0x54>
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	60bb      	str	r3, [r7, #8]
 800bef8:	bf00      	nop
 800befa:	e7fe      	b.n	800befa <xTaskPriorityDisinherit+0x52>
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf00:	1e5a      	subs	r2, r3, #1
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	649a      	str	r2, [r3, #72]	; 0x48
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d044      	beq.n	800bf9c <xTaskPriorityDisinherit+0xf4>
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d140      	bne.n	800bf9c <xTaskPriorityDisinherit+0xf4>
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fe fb4b 	bl	800a5ba <uxListRemove>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d115      	bne.n	800bf56 <xTaskPriorityDisinherit+0xae>
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2e:	491f      	ldr	r1, [pc, #124]	; (800bfac <xTaskPriorityDisinherit+0x104>)
 800bf30:	4613      	mov	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4413      	add	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	440b      	add	r3, r1
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10a      	bne.n	800bf56 <xTaskPriorityDisinherit+0xae>
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	2201      	movs	r2, #1
 800bf46:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4a:	43da      	mvns	r2, r3
 800bf4c:	4b18      	ldr	r3, [pc, #96]	; (800bfb0 <xTaskPriorityDisinherit+0x108>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4013      	ands	r3, r2
 800bf52:	4a17      	ldr	r2, [pc, #92]	; (800bfb0 <xTaskPriorityDisinherit+0x108>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	f1c3 0207 	rsb	r2, r3, #7
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	619a      	str	r2, [r3, #24]
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	2201      	movs	r2, #1
 800bf70:	409a      	lsls	r2, r3
 800bf72:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <xTaskPriorityDisinherit+0x108>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	4a0d      	ldr	r2, [pc, #52]	; (800bfb0 <xTaskPriorityDisinherit+0x108>)
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <xTaskPriorityDisinherit+0x104>)
 800bf8a:	441a      	add	r2, r3
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	4619      	mov	r1, r3
 800bf92:	4610      	mov	r0, r2
 800bf94:	f7fe fab4 	bl	800a500 <vListInsertEnd>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20001eac 	.word	0x20001eac
 800bfac:	20001eb0 	.word	0x20001eb0
 800bfb0:	20001fb4 	.word	0x20001fb4

0800bfb4 <vTaskPriorityDisinheritAfterTimeout>:
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d077      	beq.n	800c0bc <vTaskPriorityDisinheritAfterTimeout+0x108>
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <vTaskPriorityDisinheritAfterTimeout+0x36>
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d902      	bls.n	800bffa <vTaskPriorityDisinheritAfterTimeout+0x46>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	e002      	b.n	800c000 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	69fa      	ldr	r2, [r7, #28]
 800c006:	429a      	cmp	r2, r3
 800c008:	d058      	beq.n	800c0bc <vTaskPriorityDisinheritAfterTimeout+0x108>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	429a      	cmp	r2, r3
 800c012:	d153      	bne.n	800c0bc <vTaskPriorityDisinheritAfterTimeout+0x108>
 800c014:	4b2b      	ldr	r3, [pc, #172]	; (800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d10a      	bne.n	800c034 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	60bb      	str	r3, [r7, #8]
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	613b      	str	r3, [r7, #16]
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	69fa      	ldr	r2, [r7, #28]
 800c03e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	2b00      	cmp	r3, #0
 800c046:	db04      	blt.n	800c052 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f1c3 0207 	rsb	r2, r3, #7
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	619a      	str	r2, [r3, #24]
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	6959      	ldr	r1, [r3, #20]
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4a19      	ldr	r2, [pc, #100]	; (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c062:	4413      	add	r3, r2
 800c064:	4299      	cmp	r1, r3
 800c066:	d129      	bne.n	800c0bc <vTaskPriorityDisinheritAfterTimeout+0x108>
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe faa4 	bl	800a5ba <uxListRemove>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	2201      	movs	r2, #1
 800c07e:	fa02 f303 	lsl.w	r3, r2, r3
 800c082:	43da      	mvns	r2, r3
 800c084:	4b11      	ldr	r3, [pc, #68]	; (800c0cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4013      	ands	r3, r2
 800c08a:	4a10      	ldr	r2, [pc, #64]	; (800c0cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	2201      	movs	r2, #1
 800c094:	409a      	lsls	r2, r3
 800c096:	4b0d      	ldr	r3, [pc, #52]	; (800c0cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	4a0b      	ldr	r2, [pc, #44]	; (800c0cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4a06      	ldr	r2, [pc, #24]	; (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c0ae:	441a      	add	r2, r3
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fe fa22 	bl	800a500 <vListInsertEnd>
 800c0bc:	bf00      	nop
 800c0be:	3720      	adds	r7, #32
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	20001eac 	.word	0x20001eac
 800c0c8:	20001eb0 	.word	0x20001eb0
 800c0cc:	20001fb4 	.word	0x20001fb4

0800c0d0 <pvTaskIncrementMutexHeldCount>:
 800c0d0:	b480      	push	{r7}
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	4b07      	ldr	r3, [pc, #28]	; (800c0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <pvTaskIncrementMutexHeldCount+0x16>
 800c0dc:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0e2:	3201      	adds	r2, #1
 800c0e4:	649a      	str	r2, [r3, #72]	; 0x48
 800c0e6:	4b03      	ldr	r3, [pc, #12]	; (800c0f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	20001eac 	.word	0x20001eac

0800c0f8 <prvAddCurrentTaskToDelayedList>:
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
 800c102:	4b29      	ldr	r3, [pc, #164]	; (800c1a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	4b28      	ldr	r3, [pc, #160]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	3304      	adds	r3, #4
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fa53 	bl	800a5ba <uxListRemove>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <prvAddCurrentTaskToDelayedList+0x3a>
 800c11a:	4b24      	ldr	r3, [pc, #144]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	2201      	movs	r2, #1
 800c122:	fa02 f303 	lsl.w	r3, r2, r3
 800c126:	43da      	mvns	r2, r3
 800c128:	4b21      	ldr	r3, [pc, #132]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4013      	ands	r3, r2
 800c12e:	4a20      	ldr	r2, [pc, #128]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c138:	d10a      	bne.n	800c150 <prvAddCurrentTaskToDelayedList+0x58>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <prvAddCurrentTaskToDelayedList+0x58>
 800c140:	4b1a      	ldr	r3, [pc, #104]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3304      	adds	r3, #4
 800c146:	4619      	mov	r1, r3
 800c148:	481a      	ldr	r0, [pc, #104]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c14a:	f7fe f9d9 	bl	800a500 <vListInsertEnd>
 800c14e:	e026      	b.n	800c19e <prvAddCurrentTaskToDelayedList+0xa6>
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	60bb      	str	r3, [r7, #8]
 800c158:	4b14      	ldr	r3, [pc, #80]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	605a      	str	r2, [r3, #4]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	429a      	cmp	r2, r3
 800c166:	d209      	bcs.n	800c17c <prvAddCurrentTaskToDelayedList+0x84>
 800c168:	4b13      	ldr	r3, [pc, #76]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe f9e7 	bl	800a548 <vListInsert>
 800c17a:	e010      	b.n	800c19e <prvAddCurrentTaskToDelayedList+0xa6>
 800c17c:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3304      	adds	r3, #4
 800c186:	4619      	mov	r1, r3
 800c188:	4610      	mov	r0, r2
 800c18a:	f7fe f9dd 	bl	800a548 <vListInsert>
 800c18e:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	d202      	bcs.n	800c19e <prvAddCurrentTaskToDelayedList+0xa6>
 800c198:	4a09      	ldr	r2, [pc, #36]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20001fb0 	.word	0x20001fb0
 800c1ac:	20001eac 	.word	0x20001eac
 800c1b0:	20001fb4 	.word	0x20001fb4
 800c1b4:	20001f98 	.word	0x20001f98
 800c1b8:	20001f68 	.word	0x20001f68
 800c1bc:	20001f64 	.word	0x20001f64
 800c1c0:	20001fcc 	.word	0x20001fcc

0800c1c4 <pxPortInitialiseStack>:
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	3b04      	subs	r3, #4
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3b04      	subs	r3, #4
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f023 0201 	bic.w	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3b04      	subs	r3, #4
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	4a0c      	ldr	r2, [pc, #48]	; (800c228 <pxPortInitialiseStack+0x64>)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3b14      	subs	r3, #20
 800c1fe:	60fb      	str	r3, [r7, #12]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	601a      	str	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3b04      	subs	r3, #4
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f06f 0202 	mvn.w	r2, #2
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3b20      	subs	r3, #32
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	0800c22d 	.word	0x0800c22d

0800c22c <prvTaskExitError>:
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	2300      	movs	r3, #0
 800c234:	607b      	str	r3, [r7, #4]
 800c236:	4b12      	ldr	r3, [pc, #72]	; (800c280 <prvTaskExitError+0x54>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c23e:	d00a      	beq.n	800c256 <prvTaskExitError+0x2a>
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <prvTaskExitError+0x28>
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60bb      	str	r3, [r7, #8]
 800c268:	bf00      	nop
 800c26a:	bf00      	nop
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0fc      	beq.n	800c26c <prvTaskExitError+0x40>
 800c272:	bf00      	nop
 800c274:	bf00      	nop
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	20000028 	.word	0x20000028
	...

0800c290 <SVC_Handler>:
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <pxCurrentTCBConst2>)
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	6808      	ldr	r0, [r1, #0]
 800c296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	f380 8809 	msr	PSP, r0
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8811 	msr	BASEPRI, r0
 800c2aa:	4770      	bx	lr
 800c2ac:	f3af 8000 	nop.w

0800c2b0 <pxCurrentTCBConst2>:
 800c2b0:	20001eac 	.word	0x20001eac
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop

0800c2b8 <prvPortStartFirstTask>:
 800c2b8:	4808      	ldr	r0, [pc, #32]	; (800c2dc <prvPortStartFirstTask+0x24>)
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	6800      	ldr	r0, [r0, #0]
 800c2be:	f380 8808 	msr	MSP, r0
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8814 	msr	CONTROL, r0
 800c2ca:	b662      	cpsie	i
 800c2cc:	b661      	cpsie	f
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	df00      	svc	0
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e000ed08 	.word	0xe000ed08

0800c2e0 <xPortStartScheduler>:
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4b46      	ldr	r3, [pc, #280]	; (800c400 <xPortStartScheduler+0x120>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a46      	ldr	r2, [pc, #280]	; (800c404 <xPortStartScheduler+0x124>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d10a      	bne.n	800c306 <xPortStartScheduler+0x26>
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <xPortStartScheduler+0x24>
 800c306:	4b3e      	ldr	r3, [pc, #248]	; (800c400 <xPortStartScheduler+0x120>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a3f      	ldr	r2, [pc, #252]	; (800c408 <xPortStartScheduler+0x128>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10a      	bne.n	800c326 <xPortStartScheduler+0x46>
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xPortStartScheduler+0x44>
 800c326:	4b39      	ldr	r3, [pc, #228]	; (800c40c <xPortStartScheduler+0x12c>)
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	22ff      	movs	r2, #255	; 0xff
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	70fb      	strb	r3, [r7, #3]
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	4b31      	ldr	r3, [pc, #196]	; (800c410 <xPortStartScheduler+0x130>)
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	4b31      	ldr	r3, [pc, #196]	; (800c414 <xPortStartScheduler+0x134>)
 800c350:	2207      	movs	r2, #7
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e009      	b.n	800c36a <xPortStartScheduler+0x8a>
 800c356:	4b2f      	ldr	r3, [pc, #188]	; (800c414 <xPortStartScheduler+0x134>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	4a2d      	ldr	r2, [pc, #180]	; (800c414 <xPortStartScheduler+0x134>)
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	70fb      	strb	r3, [r7, #3]
 800c36a:	78fb      	ldrb	r3, [r7, #3]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c372:	2b80      	cmp	r3, #128	; 0x80
 800c374:	d0ef      	beq.n	800c356 <xPortStartScheduler+0x76>
 800c376:	4b27      	ldr	r3, [pc, #156]	; (800c414 <xPortStartScheduler+0x134>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f1c3 0307 	rsb	r3, r3, #7
 800c37e:	2b04      	cmp	r3, #4
 800c380:	d00a      	beq.n	800c398 <xPortStartScheduler+0xb8>
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	60bb      	str	r3, [r7, #8]
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <xPortStartScheduler+0xb6>
 800c398:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <xPortStartScheduler+0x134>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	4a1d      	ldr	r2, [pc, #116]	; (800c414 <xPortStartScheduler+0x134>)
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <xPortStartScheduler+0x134>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3aa:	4a1a      	ldr	r2, [pc, #104]	; (800c414 <xPortStartScheduler+0x134>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	4b18      	ldr	r3, [pc, #96]	; (800c418 <xPortStartScheduler+0x138>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a17      	ldr	r2, [pc, #92]	; (800c418 <xPortStartScheduler+0x138>)
 800c3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <xPortStartScheduler+0x138>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a14      	ldr	r2, [pc, #80]	; (800c418 <xPortStartScheduler+0x138>)
 800c3c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	f000 f8dd 	bl	800c58c <vPortSetupTimerInterrupt>
 800c3d2:	4b12      	ldr	r3, [pc, #72]	; (800c41c <xPortStartScheduler+0x13c>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f000 f8fc 	bl	800c5d4 <vPortEnableVFP>
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <xPortStartScheduler+0x140>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a0f      	ldr	r2, [pc, #60]	; (800c420 <xPortStartScheduler+0x140>)
 800c3e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	f7ff ff66 	bl	800c2b8 <prvPortStartFirstTask>
 800c3ec:	f7ff fa82 	bl	800b8f4 <vTaskSwitchContext>
 800c3f0:	f7ff ff1c 	bl	800c22c <prvTaskExitError>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	e000ed00 	.word	0xe000ed00
 800c404:	410fc271 	.word	0x410fc271
 800c408:	410fc270 	.word	0x410fc270
 800c40c:	e000e400 	.word	0xe000e400
 800c410:	20001fd8 	.word	0x20001fd8
 800c414:	20001fdc 	.word	0x20001fdc
 800c418:	e000ed20 	.word	0xe000ed20
 800c41c:	20000028 	.word	0x20000028
 800c420:	e000ef34 	.word	0xe000ef34

0800c424 <vPortEnterCritical>:
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	bf00      	nop
 800c43e:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <vPortEnterCritical+0x58>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	4a0d      	ldr	r2, [pc, #52]	; (800c47c <vPortEnterCritical+0x58>)
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <vPortEnterCritical+0x58>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d10f      	bne.n	800c470 <vPortEnterCritical+0x4c>
 800c450:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <vPortEnterCritical+0x5c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <vPortEnterCritical+0x4c>
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <vPortEnterCritical+0x4a>
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20000028 	.word	0x20000028
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <vPortExitCritical>:
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <vPortExitCritical+0x50>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <vPortExitCritical+0x24>
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <vPortExitCritical+0x22>
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d105      	bne.n	800c4c6 <vPortExitCritical+0x42>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	603b      	str	r3, [r7, #0]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f383 8811 	msr	BASEPRI, r3
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000028 	.word	0x20000028
	...

0800c4e0 <PendSV_Handler>:
 800c4e0:	f3ef 8009 	mrs	r0, PSP
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <pxCurrentTCBConst>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	f01e 0f10 	tst.w	lr, #16
 800c4f0:	bf08      	it	eq
 800c4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fa:	6010      	str	r0, [r2, #0]
 800c4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c504:	f380 8811 	msr	BASEPRI, r0
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f7ff f9f0 	bl	800b8f4 <vTaskSwitchContext>
 800c514:	f04f 0000 	mov.w	r0, #0
 800c518:	f380 8811 	msr	BASEPRI, r0
 800c51c:	bc09      	pop	{r0, r3}
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	6808      	ldr	r0, [r1, #0]
 800c522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c526:	f01e 0f10 	tst.w	lr, #16
 800c52a:	bf08      	it	eq
 800c52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c530:	f380 8809 	msr	PSP, r0
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst>:
 800c540:	20001eac 	.word	0x20001eac
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <SysTick_Handler>:
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
 800c560:	bf00      	nop
 800c562:	f7ff f90f 	bl	800b784 <xTaskIncrementTick>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <SysTick_Handler+0x2c>
 800c56c:	4b06      	ldr	r3, [pc, #24]	; (800c588 <SysTick_Handler+0x40>)
 800c56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	2300      	movs	r3, #0
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	bf00      	nop
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <vPortSetupTimerInterrupt>:
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <vPortSetupTimerInterrupt+0x38>)
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <vPortSetupTimerInterrupt+0x3c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <vPortSetupTimerInterrupt+0x40>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	099b      	lsrs	r3, r3, #6
 800c5a8:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <vPortSetupTimerInterrupt+0x44>)
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	6013      	str	r3, [r2, #0]
 800c5ae:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c5b0:	2207      	movs	r2, #7
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	bf00      	nop
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	e000e010 	.word	0xe000e010
 800c5c4:	e000e018 	.word	0xe000e018
 800c5c8:	20000004 	.word	0x20000004
 800c5cc:	10624dd3 	.word	0x10624dd3
 800c5d0:	e000e014 	.word	0xe000e014

0800c5d4 <vPortEnableVFP>:
 800c5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5e4 <vPortEnableVFP+0x10>
 800c5d8:	6801      	ldr	r1, [r0, #0]
 800c5da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5de:	6001      	str	r1, [r0, #0]
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	e000ed88 	.word	0xe000ed88

0800c5e8 <vPortValidateInterruptPriority>:
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	f3ef 8305 	mrs	r3, IPSR
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d914      	bls.n	800c624 <vPortValidateInterruptPriority+0x3c>
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <vPortValidateInterruptPriority+0x70>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	72fb      	strb	r3, [r7, #11]
 800c604:	4b15      	ldr	r3, [pc, #84]	; (800c65c <vPortValidateInterruptPriority+0x74>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	7afa      	ldrb	r2, [r7, #11]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d20a      	bcs.n	800c624 <vPortValidateInterruptPriority+0x3c>
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <vPortValidateInterruptPriority+0x3a>
 800c624:	4b0e      	ldr	r3, [pc, #56]	; (800c660 <vPortValidateInterruptPriority+0x78>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c62c:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <vPortValidateInterruptPriority+0x7c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	429a      	cmp	r2, r3
 800c632:	d90a      	bls.n	800c64a <vPortValidateInterruptPriority+0x62>
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	603b      	str	r3, [r7, #0]
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <vPortValidateInterruptPriority+0x60>
 800c64a:	bf00      	nop
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	e000e3f0 	.word	0xe000e3f0
 800c65c:	20001fd8 	.word	0x20001fd8
 800c660:	e000ed0c 	.word	0xe000ed0c
 800c664:	20001fdc 	.word	0x20001fdc

0800c668 <pvPortMalloc>:
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
 800c674:	f7fe ffdc 	bl	800b630 <vTaskSuspendAll>
 800c678:	4b5b      	ldr	r3, [pc, #364]	; (800c7e8 <pvPortMalloc+0x180>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <pvPortMalloc+0x1c>
 800c680:	f000 f920 	bl	800c8c4 <prvHeapInit>
 800c684:	4b59      	ldr	r3, [pc, #356]	; (800c7ec <pvPortMalloc+0x184>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 8093 	bne.w	800c7b8 <pvPortMalloc+0x150>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d01d      	beq.n	800c6d4 <pvPortMalloc+0x6c>
 800c698:	2208      	movs	r2, #8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4413      	add	r3, r2
 800c69e:	607b      	str	r3, [r7, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d014      	beq.n	800c6d4 <pvPortMalloc+0x6c>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f023 0307 	bic.w	r3, r3, #7
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	607b      	str	r3, [r7, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <pvPortMalloc+0x6c>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <pvPortMalloc+0x6a>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d06e      	beq.n	800c7b8 <pvPortMalloc+0x150>
 800c6da:	4b45      	ldr	r3, [pc, #276]	; (800c7f0 <pvPortMalloc+0x188>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d869      	bhi.n	800c7b8 <pvPortMalloc+0x150>
 800c6e4:	4b43      	ldr	r3, [pc, #268]	; (800c7f4 <pvPortMalloc+0x18c>)
 800c6e6:	623b      	str	r3, [r7, #32]
 800c6e8:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <pvPortMalloc+0x18c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ee:	e004      	b.n	800c6fa <pvPortMalloc+0x92>
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	623b      	str	r3, [r7, #32]
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	429a      	cmp	r2, r3
 800c702:	d903      	bls.n	800c70c <pvPortMalloc+0xa4>
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1f1      	bne.n	800c6f0 <pvPortMalloc+0x88>
 800c70c:	4b36      	ldr	r3, [pc, #216]	; (800c7e8 <pvPortMalloc+0x180>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c712:	429a      	cmp	r2, r3
 800c714:	d050      	beq.n	800c7b8 <pvPortMalloc+0x150>
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2208      	movs	r2, #8
 800c71c:	4413      	add	r3, r2
 800c71e:	61fb      	str	r3, [r7, #28]
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	1ad2      	subs	r2, r2, r3
 800c730:	2308      	movs	r3, #8
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	429a      	cmp	r2, r3
 800c736:	d91f      	bls.n	800c778 <pvPortMalloc+0x110>
 800c738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4413      	add	r3, r2
 800c73e:	61bb      	str	r3, [r7, #24]
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	f003 0307 	and.w	r3, r3, #7
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <pvPortMalloc+0xf8>
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <pvPortMalloc+0xf6>
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	685a      	ldr	r2, [r3, #4]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	1ad2      	subs	r2, r2, r3
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	605a      	str	r2, [r3, #4]
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]
 800c772:	69b8      	ldr	r0, [r7, #24]
 800c774:	f000 f908 	bl	800c988 <prvInsertBlockIntoFreeList>
 800c778:	4b1d      	ldr	r3, [pc, #116]	; (800c7f0 <pvPortMalloc+0x188>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	4a1b      	ldr	r2, [pc, #108]	; (800c7f0 <pvPortMalloc+0x188>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <pvPortMalloc+0x188>)
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	4b1b      	ldr	r3, [pc, #108]	; (800c7f8 <pvPortMalloc+0x190>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d203      	bcs.n	800c79a <pvPortMalloc+0x132>
 800c792:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <pvPortMalloc+0x188>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a18      	ldr	r2, [pc, #96]	; (800c7f8 <pvPortMalloc+0x190>)
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <pvPortMalloc+0x184>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	605a      	str	r2, [r3, #4]
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <pvPortMalloc+0x194>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a11      	ldr	r2, [pc, #68]	; (800c7fc <pvPortMalloc+0x194>)
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	f7fe ff48 	bl	800b64c <xTaskResumeAll>
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	f003 0307 	and.w	r3, r3, #7
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <pvPortMalloc+0x174>
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <pvPortMalloc+0x172>
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3728      	adds	r7, #40	; 0x28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20005be8 	.word	0x20005be8
 800c7ec:	20005bfc 	.word	0x20005bfc
 800c7f0:	20005bec 	.word	0x20005bec
 800c7f4:	20005be0 	.word	0x20005be0
 800c7f8:	20005bf0 	.word	0x20005bf0
 800c7fc:	20005bf4 	.word	0x20005bf4

0800c800 <vPortFree>:
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d04d      	beq.n	800c8ae <vPortFree+0xae>
 800c812:	2308      	movs	r3, #8
 800c814:	425b      	negs	r3, r3
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	4413      	add	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	613b      	str	r3, [r7, #16]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	4b24      	ldr	r3, [pc, #144]	; (800c8b8 <vPortFree+0xb8>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4013      	ands	r3, r2
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10a      	bne.n	800c844 <vPortFree+0x44>
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <vPortFree+0x42>
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <vPortFree+0x62>
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <vPortFree+0x60>
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <vPortFree+0xb8>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4013      	ands	r3, r2
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01e      	beq.n	800c8ae <vPortFree+0xae>
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11a      	bne.n	800c8ae <vPortFree+0xae>
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b0e      	ldr	r3, [pc, #56]	; (800c8b8 <vPortFree+0xb8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	43db      	mvns	r3, r3
 800c882:	401a      	ands	r2, r3
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	605a      	str	r2, [r3, #4]
 800c888:	f7fe fed2 	bl	800b630 <vTaskSuspendAll>
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <vPortFree+0xbc>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4413      	add	r3, r2
 800c896:	4a09      	ldr	r2, [pc, #36]	; (800c8bc <vPortFree+0xbc>)
 800c898:	6013      	str	r3, [r2, #0]
 800c89a:	6938      	ldr	r0, [r7, #16]
 800c89c:	f000 f874 	bl	800c988 <prvInsertBlockIntoFreeList>
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <vPortFree+0xc0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	4a06      	ldr	r2, [pc, #24]	; (800c8c0 <vPortFree+0xc0>)
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	f7fe fecf 	bl	800b64c <xTaskResumeAll>
 800c8ae:	bf00      	nop
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20005bfc 	.word	0x20005bfc
 800c8bc:	20005bec 	.word	0x20005bec
 800c8c0:	20005bf8 	.word	0x20005bf8

0800c8c4 <prvHeapInit>:
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8ce:	60bb      	str	r3, [r7, #8]
 800c8d0:	4b27      	ldr	r3, [pc, #156]	; (800c970 <prvHeapInit+0xac>)
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00c      	beq.n	800c8f8 <prvHeapInit+0x34>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3307      	adds	r3, #7
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <prvHeapInit+0xac>)
 800c8f4:	4413      	add	r3, r2
 800c8f6:	60bb      	str	r3, [r7, #8]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	607b      	str	r3, [r7, #4]
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <prvHeapInit+0xb0>)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <prvHeapInit+0xb0>)
 800c904:	2200      	movs	r2, #0
 800c906:	605a      	str	r2, [r3, #4]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	2208      	movs	r2, #8
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f023 0307 	bic.w	r3, r3, #7
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4a15      	ldr	r2, [pc, #84]	; (800c978 <prvHeapInit+0xb4>)
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	4b14      	ldr	r3, [pc, #80]	; (800c978 <prvHeapInit+0xb4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2200      	movs	r2, #0
 800c92c:	605a      	str	r2, [r3, #4]
 800c92e:	4b12      	ldr	r3, [pc, #72]	; (800c978 <prvHeapInit+0xb4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	1ad2      	subs	r2, r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <prvHeapInit+0xb4>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <prvHeapInit+0xb8>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4a09      	ldr	r2, [pc, #36]	; (800c980 <prvHeapInit+0xbc>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <prvHeapInit+0xc0>)
 800c95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20001fe0 	.word	0x20001fe0
 800c974:	20005be0 	.word	0x20005be0
 800c978:	20005be8 	.word	0x20005be8
 800c97c:	20005bf0 	.word	0x20005bf0
 800c980:	20005bec 	.word	0x20005bec
 800c984:	20005bfc 	.word	0x20005bfc

0800c988 <prvInsertBlockIntoFreeList>:
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	4b28      	ldr	r3, [pc, #160]	; (800ca34 <prvInsertBlockIntoFreeList+0xac>)
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <prvInsertBlockIntoFreeList+0x14>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d8f7      	bhi.n	800c996 <prvInsertBlockIntoFreeList+0xe>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	60bb      	str	r3, [r7, #8]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d108      	bne.n	800c9ca <prvInsertBlockIntoFreeList+0x42>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	605a      	str	r2, [r3, #4]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	607b      	str	r3, [r7, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	441a      	add	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d118      	bne.n	800ca10 <prvInsertBlockIntoFreeList+0x88>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d00d      	beq.n	800ca06 <prvInsertBlockIntoFreeList+0x7e>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e008      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
 800ca06:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	e003      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d002      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x9e>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20005be0 	.word	0x20005be0
 800ca38:	20005be8 	.word	0x20005be8

0800ca3c <__cvt>:
 800ca3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	ec55 4b10 	vmov	r4, r5, d0
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	460e      	mov	r6, r1
 800ca48:	4619      	mov	r1, r3
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	bfbb      	ittet	lt
 800ca4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca52:	461d      	movlt	r5, r3
 800ca54:	2300      	movge	r3, #0
 800ca56:	232d      	movlt	r3, #45	; 0x2d
 800ca58:	700b      	strb	r3, [r1, #0]
 800ca5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca60:	4691      	mov	r9, r2
 800ca62:	f023 0820 	bic.w	r8, r3, #32
 800ca66:	bfbc      	itt	lt
 800ca68:	4622      	movlt	r2, r4
 800ca6a:	4614      	movlt	r4, r2
 800ca6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca70:	d005      	beq.n	800ca7e <__cvt+0x42>
 800ca72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca76:	d100      	bne.n	800ca7a <__cvt+0x3e>
 800ca78:	3601      	adds	r6, #1
 800ca7a:	2102      	movs	r1, #2
 800ca7c:	e000      	b.n	800ca80 <__cvt+0x44>
 800ca7e:	2103      	movs	r1, #3
 800ca80:	ab03      	add	r3, sp, #12
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	ab02      	add	r3, sp, #8
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	ec45 4b10 	vmov	d0, r4, r5
 800ca8c:	4653      	mov	r3, sl
 800ca8e:	4632      	mov	r2, r6
 800ca90:	f000 feda 	bl	800d848 <_dtoa_r>
 800ca94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca98:	4607      	mov	r7, r0
 800ca9a:	d102      	bne.n	800caa2 <__cvt+0x66>
 800ca9c:	f019 0f01 	tst.w	r9, #1
 800caa0:	d022      	beq.n	800cae8 <__cvt+0xac>
 800caa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caa6:	eb07 0906 	add.w	r9, r7, r6
 800caaa:	d110      	bne.n	800cace <__cvt+0x92>
 800caac:	783b      	ldrb	r3, [r7, #0]
 800caae:	2b30      	cmp	r3, #48	; 0x30
 800cab0:	d10a      	bne.n	800cac8 <__cvt+0x8c>
 800cab2:	2200      	movs	r2, #0
 800cab4:	2300      	movs	r3, #0
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f4 f825 	bl	8000b08 <__aeabi_dcmpeq>
 800cabe:	b918      	cbnz	r0, 800cac8 <__cvt+0x8c>
 800cac0:	f1c6 0601 	rsb	r6, r6, #1
 800cac4:	f8ca 6000 	str.w	r6, [sl]
 800cac8:	f8da 3000 	ldr.w	r3, [sl]
 800cacc:	4499      	add	r9, r3
 800cace:	2200      	movs	r2, #0
 800cad0:	2300      	movs	r3, #0
 800cad2:	4620      	mov	r0, r4
 800cad4:	4629      	mov	r1, r5
 800cad6:	f7f4 f817 	bl	8000b08 <__aeabi_dcmpeq>
 800cada:	b108      	cbz	r0, 800cae0 <__cvt+0xa4>
 800cadc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cae0:	2230      	movs	r2, #48	; 0x30
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	454b      	cmp	r3, r9
 800cae6:	d307      	bcc.n	800caf8 <__cvt+0xbc>
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caec:	1bdb      	subs	r3, r3, r7
 800caee:	4638      	mov	r0, r7
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	b004      	add	sp, #16
 800caf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf8:	1c59      	adds	r1, r3, #1
 800cafa:	9103      	str	r1, [sp, #12]
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	e7f0      	b.n	800cae2 <__cvt+0xa6>

0800cb00 <__exponent>:
 800cb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb02:	4603      	mov	r3, r0
 800cb04:	2900      	cmp	r1, #0
 800cb06:	bfb8      	it	lt
 800cb08:	4249      	neglt	r1, r1
 800cb0a:	f803 2b02 	strb.w	r2, [r3], #2
 800cb0e:	bfb4      	ite	lt
 800cb10:	222d      	movlt	r2, #45	; 0x2d
 800cb12:	222b      	movge	r2, #43	; 0x2b
 800cb14:	2909      	cmp	r1, #9
 800cb16:	7042      	strb	r2, [r0, #1]
 800cb18:	dd2a      	ble.n	800cb70 <__exponent+0x70>
 800cb1a:	f10d 0207 	add.w	r2, sp, #7
 800cb1e:	4617      	mov	r7, r2
 800cb20:	260a      	movs	r6, #10
 800cb22:	4694      	mov	ip, r2
 800cb24:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb28:	fb06 1415 	mls	r4, r6, r5, r1
 800cb2c:	3430      	adds	r4, #48	; 0x30
 800cb2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb32:	460c      	mov	r4, r1
 800cb34:	2c63      	cmp	r4, #99	; 0x63
 800cb36:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	dcf1      	bgt.n	800cb22 <__exponent+0x22>
 800cb3e:	3130      	adds	r1, #48	; 0x30
 800cb40:	f1ac 0402 	sub.w	r4, ip, #2
 800cb44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb48:	1c41      	adds	r1, r0, #1
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	42ba      	cmp	r2, r7
 800cb4e:	d30a      	bcc.n	800cb66 <__exponent+0x66>
 800cb50:	f10d 0209 	add.w	r2, sp, #9
 800cb54:	eba2 020c 	sub.w	r2, r2, ip
 800cb58:	42bc      	cmp	r4, r7
 800cb5a:	bf88      	it	hi
 800cb5c:	2200      	movhi	r2, #0
 800cb5e:	4413      	add	r3, r2
 800cb60:	1a18      	subs	r0, r3, r0
 800cb62:	b003      	add	sp, #12
 800cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb66:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cb6e:	e7ed      	b.n	800cb4c <__exponent+0x4c>
 800cb70:	2330      	movs	r3, #48	; 0x30
 800cb72:	3130      	adds	r1, #48	; 0x30
 800cb74:	7083      	strb	r3, [r0, #2]
 800cb76:	70c1      	strb	r1, [r0, #3]
 800cb78:	1d03      	adds	r3, r0, #4
 800cb7a:	e7f1      	b.n	800cb60 <__exponent+0x60>

0800cb7c <_printf_float>:
 800cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb80:	ed2d 8b02 	vpush	{d8}
 800cb84:	b08d      	sub	sp, #52	; 0x34
 800cb86:	460c      	mov	r4, r1
 800cb88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb8c:	4616      	mov	r6, r2
 800cb8e:	461f      	mov	r7, r3
 800cb90:	4605      	mov	r5, r0
 800cb92:	f000 fcf5 	bl	800d580 <_localeconv_r>
 800cb96:	f8d0 a000 	ldr.w	sl, [r0]
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f7f3 fb88 	bl	80002b0 <strlen>
 800cba0:	2300      	movs	r3, #0
 800cba2:	930a      	str	r3, [sp, #40]	; 0x28
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	9305      	str	r3, [sp, #20]
 800cba8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbb0:	3307      	adds	r3, #7
 800cbb2:	f023 0307 	bic.w	r3, r3, #7
 800cbb6:	f103 0208 	add.w	r2, r3, #8
 800cbba:	f8c8 2000 	str.w	r2, [r8]
 800cbbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbcc:	ee08 0a10 	vmov	s16, r0
 800cbd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cbd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbd8:	4b9e      	ldr	r3, [pc, #632]	; (800ce54 <_printf_float+0x2d8>)
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbde:	f7f3 ffc5 	bl	8000b6c <__aeabi_dcmpun>
 800cbe2:	bb88      	cbnz	r0, 800cc48 <_printf_float+0xcc>
 800cbe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbe8:	4b9a      	ldr	r3, [pc, #616]	; (800ce54 <_printf_float+0x2d8>)
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbee:	f7f3 ff9f 	bl	8000b30 <__aeabi_dcmple>
 800cbf2:	bb48      	cbnz	r0, 800cc48 <_printf_float+0xcc>
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f7f3 ff8e 	bl	8000b1c <__aeabi_dcmplt>
 800cc00:	b110      	cbz	r0, 800cc08 <_printf_float+0x8c>
 800cc02:	232d      	movs	r3, #45	; 0x2d
 800cc04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc08:	4a93      	ldr	r2, [pc, #588]	; (800ce58 <_printf_float+0x2dc>)
 800cc0a:	4b94      	ldr	r3, [pc, #592]	; (800ce5c <_printf_float+0x2e0>)
 800cc0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc10:	bf94      	ite	ls
 800cc12:	4690      	movls	r8, r2
 800cc14:	4698      	movhi	r8, r3
 800cc16:	2303      	movs	r3, #3
 800cc18:	6123      	str	r3, [r4, #16]
 800cc1a:	9b05      	ldr	r3, [sp, #20]
 800cc1c:	f023 0304 	bic.w	r3, r3, #4
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	f04f 0900 	mov.w	r9, #0
 800cc26:	9700      	str	r7, [sp, #0]
 800cc28:	4633      	mov	r3, r6
 800cc2a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	4628      	mov	r0, r5
 800cc30:	f000 f9da 	bl	800cfe8 <_printf_common>
 800cc34:	3001      	adds	r0, #1
 800cc36:	f040 8090 	bne.w	800cd5a <_printf_float+0x1de>
 800cc3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc3e:	b00d      	add	sp, #52	; 0x34
 800cc40:	ecbd 8b02 	vpop	{d8}
 800cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	4642      	mov	r2, r8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	4649      	mov	r1, r9
 800cc50:	f7f3 ff8c 	bl	8000b6c <__aeabi_dcmpun>
 800cc54:	b140      	cbz	r0, 800cc68 <_printf_float+0xec>
 800cc56:	464b      	mov	r3, r9
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	bfbc      	itt	lt
 800cc5c:	232d      	movlt	r3, #45	; 0x2d
 800cc5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc62:	4a7f      	ldr	r2, [pc, #508]	; (800ce60 <_printf_float+0x2e4>)
 800cc64:	4b7f      	ldr	r3, [pc, #508]	; (800ce64 <_printf_float+0x2e8>)
 800cc66:	e7d1      	b.n	800cc0c <_printf_float+0x90>
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc6e:	9206      	str	r2, [sp, #24]
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	d13f      	bne.n	800ccf4 <_printf_float+0x178>
 800cc74:	2306      	movs	r3, #6
 800cc76:	6063      	str	r3, [r4, #4]
 800cc78:	9b05      	ldr	r3, [sp, #20]
 800cc7a:	6861      	ldr	r1, [r4, #4]
 800cc7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc80:	2300      	movs	r3, #0
 800cc82:	9303      	str	r3, [sp, #12]
 800cc84:	ab0a      	add	r3, sp, #40	; 0x28
 800cc86:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc8a:	ab09      	add	r3, sp, #36	; 0x24
 800cc8c:	ec49 8b10 	vmov	d0, r8, r9
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	6022      	str	r2, [r4, #0]
 800cc94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f7ff fecf 	bl	800ca3c <__cvt>
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cca2:	2b47      	cmp	r3, #71	; 0x47
 800cca4:	4680      	mov	r8, r0
 800cca6:	d108      	bne.n	800ccba <_printf_float+0x13e>
 800cca8:	1cc8      	adds	r0, r1, #3
 800ccaa:	db02      	blt.n	800ccb2 <_printf_float+0x136>
 800ccac:	6863      	ldr	r3, [r4, #4]
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	dd41      	ble.n	800cd36 <_printf_float+0x1ba>
 800ccb2:	f1ab 0302 	sub.w	r3, fp, #2
 800ccb6:	fa5f fb83 	uxtb.w	fp, r3
 800ccba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccbe:	d820      	bhi.n	800cd02 <_printf_float+0x186>
 800ccc0:	3901      	subs	r1, #1
 800ccc2:	465a      	mov	r2, fp
 800ccc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccc8:	9109      	str	r1, [sp, #36]	; 0x24
 800ccca:	f7ff ff19 	bl	800cb00 <__exponent>
 800ccce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccd0:	1813      	adds	r3, r2, r0
 800ccd2:	2a01      	cmp	r2, #1
 800ccd4:	4681      	mov	r9, r0
 800ccd6:	6123      	str	r3, [r4, #16]
 800ccd8:	dc02      	bgt.n	800cce0 <_printf_float+0x164>
 800ccda:	6822      	ldr	r2, [r4, #0]
 800ccdc:	07d2      	lsls	r2, r2, #31
 800ccde:	d501      	bpl.n	800cce4 <_printf_float+0x168>
 800cce0:	3301      	adds	r3, #1
 800cce2:	6123      	str	r3, [r4, #16]
 800cce4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d09c      	beq.n	800cc26 <_printf_float+0xaa>
 800ccec:	232d      	movs	r3, #45	; 0x2d
 800ccee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf2:	e798      	b.n	800cc26 <_printf_float+0xaa>
 800ccf4:	9a06      	ldr	r2, [sp, #24]
 800ccf6:	2a47      	cmp	r2, #71	; 0x47
 800ccf8:	d1be      	bne.n	800cc78 <_printf_float+0xfc>
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1bc      	bne.n	800cc78 <_printf_float+0xfc>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e7b9      	b.n	800cc76 <_printf_float+0xfa>
 800cd02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd06:	d118      	bne.n	800cd3a <_printf_float+0x1be>
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	6863      	ldr	r3, [r4, #4]
 800cd0c:	dd0b      	ble.n	800cd26 <_printf_float+0x1aa>
 800cd0e:	6121      	str	r1, [r4, #16]
 800cd10:	b913      	cbnz	r3, 800cd18 <_printf_float+0x19c>
 800cd12:	6822      	ldr	r2, [r4, #0]
 800cd14:	07d0      	lsls	r0, r2, #31
 800cd16:	d502      	bpl.n	800cd1e <_printf_float+0x1a2>
 800cd18:	3301      	adds	r3, #1
 800cd1a:	440b      	add	r3, r1
 800cd1c:	6123      	str	r3, [r4, #16]
 800cd1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd20:	f04f 0900 	mov.w	r9, #0
 800cd24:	e7de      	b.n	800cce4 <_printf_float+0x168>
 800cd26:	b913      	cbnz	r3, 800cd2e <_printf_float+0x1b2>
 800cd28:	6822      	ldr	r2, [r4, #0]
 800cd2a:	07d2      	lsls	r2, r2, #31
 800cd2c:	d501      	bpl.n	800cd32 <_printf_float+0x1b6>
 800cd2e:	3302      	adds	r3, #2
 800cd30:	e7f4      	b.n	800cd1c <_printf_float+0x1a0>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e7f2      	b.n	800cd1c <_printf_float+0x1a0>
 800cd36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	db05      	blt.n	800cd4c <_printf_float+0x1d0>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	6121      	str	r1, [r4, #16]
 800cd44:	07d8      	lsls	r0, r3, #31
 800cd46:	d5ea      	bpl.n	800cd1e <_printf_float+0x1a2>
 800cd48:	1c4b      	adds	r3, r1, #1
 800cd4a:	e7e7      	b.n	800cd1c <_printf_float+0x1a0>
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	bfd4      	ite	le
 800cd50:	f1c1 0202 	rsble	r2, r1, #2
 800cd54:	2201      	movgt	r2, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	e7e0      	b.n	800cd1c <_printf_float+0x1a0>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	055a      	lsls	r2, r3, #21
 800cd5e:	d407      	bmi.n	800cd70 <_printf_float+0x1f4>
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	4642      	mov	r2, r8
 800cd64:	4631      	mov	r1, r6
 800cd66:	4628      	mov	r0, r5
 800cd68:	47b8      	blx	r7
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	d12c      	bne.n	800cdc8 <_printf_float+0x24c>
 800cd6e:	e764      	b.n	800cc3a <_printf_float+0xbe>
 800cd70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd74:	f240 80e0 	bls.w	800cf38 <_printf_float+0x3bc>
 800cd78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f7f3 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d034      	beq.n	800cdf2 <_printf_float+0x276>
 800cd88:	4a37      	ldr	r2, [pc, #220]	; (800ce68 <_printf_float+0x2ec>)
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	47b8      	blx	r7
 800cd92:	3001      	adds	r0, #1
 800cd94:	f43f af51 	beq.w	800cc3a <_printf_float+0xbe>
 800cd98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	db02      	blt.n	800cda6 <_printf_float+0x22a>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	07d8      	lsls	r0, r3, #31
 800cda4:	d510      	bpl.n	800cdc8 <_printf_float+0x24c>
 800cda6:	ee18 3a10 	vmov	r3, s16
 800cdaa:	4652      	mov	r2, sl
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	47b8      	blx	r7
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	f43f af41 	beq.w	800cc3a <_printf_float+0xbe>
 800cdb8:	f04f 0800 	mov.w	r8, #0
 800cdbc:	f104 091a 	add.w	r9, r4, #26
 800cdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	4543      	cmp	r3, r8
 800cdc6:	dc09      	bgt.n	800cddc <_printf_float+0x260>
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	079b      	lsls	r3, r3, #30
 800cdcc:	f100 8107 	bmi.w	800cfde <_printf_float+0x462>
 800cdd0:	68e0      	ldr	r0, [r4, #12]
 800cdd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd4:	4298      	cmp	r0, r3
 800cdd6:	bfb8      	it	lt
 800cdd8:	4618      	movlt	r0, r3
 800cdda:	e730      	b.n	800cc3e <_printf_float+0xc2>
 800cddc:	2301      	movs	r3, #1
 800cdde:	464a      	mov	r2, r9
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f af27 	beq.w	800cc3a <_printf_float+0xbe>
 800cdec:	f108 0801 	add.w	r8, r8, #1
 800cdf0:	e7e6      	b.n	800cdc0 <_printf_float+0x244>
 800cdf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dc39      	bgt.n	800ce6c <_printf_float+0x2f0>
 800cdf8:	4a1b      	ldr	r2, [pc, #108]	; (800ce68 <_printf_float+0x2ec>)
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b8      	blx	r7
 800ce02:	3001      	adds	r0, #1
 800ce04:	f43f af19 	beq.w	800cc3a <_printf_float+0xbe>
 800ce08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	d102      	bne.n	800ce16 <_printf_float+0x29a>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	07d9      	lsls	r1, r3, #31
 800ce14:	d5d8      	bpl.n	800cdc8 <_printf_float+0x24c>
 800ce16:	ee18 3a10 	vmov	r3, s16
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	f43f af09 	beq.w	800cc3a <_printf_float+0xbe>
 800ce28:	f04f 0900 	mov.w	r9, #0
 800ce2c:	f104 0a1a 	add.w	sl, r4, #26
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	425b      	negs	r3, r3
 800ce34:	454b      	cmp	r3, r9
 800ce36:	dc01      	bgt.n	800ce3c <_printf_float+0x2c0>
 800ce38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce3a:	e792      	b.n	800cd62 <_printf_float+0x1e6>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	4652      	mov	r2, sl
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	47b8      	blx	r7
 800ce46:	3001      	adds	r0, #1
 800ce48:	f43f aef7 	beq.w	800cc3a <_printf_float+0xbe>
 800ce4c:	f109 0901 	add.w	r9, r9, #1
 800ce50:	e7ee      	b.n	800ce30 <_printf_float+0x2b4>
 800ce52:	bf00      	nop
 800ce54:	7fefffff 	.word	0x7fefffff
 800ce58:	08010d94 	.word	0x08010d94
 800ce5c:	08010d98 	.word	0x08010d98
 800ce60:	08010d9c 	.word	0x08010d9c
 800ce64:	08010da0 	.word	0x08010da0
 800ce68:	08010da4 	.word	0x08010da4
 800ce6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce70:	429a      	cmp	r2, r3
 800ce72:	bfa8      	it	ge
 800ce74:	461a      	movge	r2, r3
 800ce76:	2a00      	cmp	r2, #0
 800ce78:	4691      	mov	r9, r2
 800ce7a:	dc37      	bgt.n	800ceec <_printf_float+0x370>
 800ce7c:	f04f 0b00 	mov.w	fp, #0
 800ce80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce84:	f104 021a 	add.w	r2, r4, #26
 800ce88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce8a:	9305      	str	r3, [sp, #20]
 800ce8c:	eba3 0309 	sub.w	r3, r3, r9
 800ce90:	455b      	cmp	r3, fp
 800ce92:	dc33      	bgt.n	800cefc <_printf_float+0x380>
 800ce94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	db3b      	blt.n	800cf14 <_printf_float+0x398>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	07da      	lsls	r2, r3, #31
 800cea0:	d438      	bmi.n	800cf14 <_printf_float+0x398>
 800cea2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cea6:	eba2 0903 	sub.w	r9, r2, r3
 800ceaa:	9b05      	ldr	r3, [sp, #20]
 800ceac:	1ad2      	subs	r2, r2, r3
 800ceae:	4591      	cmp	r9, r2
 800ceb0:	bfa8      	it	ge
 800ceb2:	4691      	movge	r9, r2
 800ceb4:	f1b9 0f00 	cmp.w	r9, #0
 800ceb8:	dc35      	bgt.n	800cf26 <_printf_float+0x3aa>
 800ceba:	f04f 0800 	mov.w	r8, #0
 800cebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cec2:	f104 0a1a 	add.w	sl, r4, #26
 800cec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	eba3 0309 	sub.w	r3, r3, r9
 800ced0:	4543      	cmp	r3, r8
 800ced2:	f77f af79 	ble.w	800cdc8 <_printf_float+0x24c>
 800ced6:	2301      	movs	r3, #1
 800ced8:	4652      	mov	r2, sl
 800ceda:	4631      	mov	r1, r6
 800cedc:	4628      	mov	r0, r5
 800cede:	47b8      	blx	r7
 800cee0:	3001      	adds	r0, #1
 800cee2:	f43f aeaa 	beq.w	800cc3a <_printf_float+0xbe>
 800cee6:	f108 0801 	add.w	r8, r8, #1
 800ceea:	e7ec      	b.n	800cec6 <_printf_float+0x34a>
 800ceec:	4613      	mov	r3, r2
 800ceee:	4631      	mov	r1, r6
 800cef0:	4642      	mov	r2, r8
 800cef2:	4628      	mov	r0, r5
 800cef4:	47b8      	blx	r7
 800cef6:	3001      	adds	r0, #1
 800cef8:	d1c0      	bne.n	800ce7c <_printf_float+0x300>
 800cefa:	e69e      	b.n	800cc3a <_printf_float+0xbe>
 800cefc:	2301      	movs	r3, #1
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	9205      	str	r2, [sp, #20]
 800cf04:	47b8      	blx	r7
 800cf06:	3001      	adds	r0, #1
 800cf08:	f43f ae97 	beq.w	800cc3a <_printf_float+0xbe>
 800cf0c:	9a05      	ldr	r2, [sp, #20]
 800cf0e:	f10b 0b01 	add.w	fp, fp, #1
 800cf12:	e7b9      	b.n	800ce88 <_printf_float+0x30c>
 800cf14:	ee18 3a10 	vmov	r3, s16
 800cf18:	4652      	mov	r2, sl
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b8      	blx	r7
 800cf20:	3001      	adds	r0, #1
 800cf22:	d1be      	bne.n	800cea2 <_printf_float+0x326>
 800cf24:	e689      	b.n	800cc3a <_printf_float+0xbe>
 800cf26:	9a05      	ldr	r2, [sp, #20]
 800cf28:	464b      	mov	r3, r9
 800cf2a:	4442      	add	r2, r8
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	d1c1      	bne.n	800ceba <_printf_float+0x33e>
 800cf36:	e680      	b.n	800cc3a <_printf_float+0xbe>
 800cf38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf3a:	2a01      	cmp	r2, #1
 800cf3c:	dc01      	bgt.n	800cf42 <_printf_float+0x3c6>
 800cf3e:	07db      	lsls	r3, r3, #31
 800cf40:	d53a      	bpl.n	800cfb8 <_printf_float+0x43c>
 800cf42:	2301      	movs	r3, #1
 800cf44:	4642      	mov	r2, r8
 800cf46:	4631      	mov	r1, r6
 800cf48:	4628      	mov	r0, r5
 800cf4a:	47b8      	blx	r7
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	f43f ae74 	beq.w	800cc3a <_printf_float+0xbe>
 800cf52:	ee18 3a10 	vmov	r3, s16
 800cf56:	4652      	mov	r2, sl
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f43f ae6b 	beq.w	800cc3a <_printf_float+0xbe>
 800cf64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cf70:	f7f3 fdca 	bl	8000b08 <__aeabi_dcmpeq>
 800cf74:	b9d8      	cbnz	r0, 800cfae <_printf_float+0x432>
 800cf76:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cf7a:	f108 0201 	add.w	r2, r8, #1
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	d10e      	bne.n	800cfa6 <_printf_float+0x42a>
 800cf88:	e657      	b.n	800cc3a <_printf_float+0xbe>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	4631      	mov	r1, r6
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b8      	blx	r7
 800cf94:	3001      	adds	r0, #1
 800cf96:	f43f ae50 	beq.w	800cc3a <_printf_float+0xbe>
 800cf9a:	f108 0801 	add.w	r8, r8, #1
 800cf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	4543      	cmp	r3, r8
 800cfa4:	dcf1      	bgt.n	800cf8a <_printf_float+0x40e>
 800cfa6:	464b      	mov	r3, r9
 800cfa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfac:	e6da      	b.n	800cd64 <_printf_float+0x1e8>
 800cfae:	f04f 0800 	mov.w	r8, #0
 800cfb2:	f104 0a1a 	add.w	sl, r4, #26
 800cfb6:	e7f2      	b.n	800cf9e <_printf_float+0x422>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	4642      	mov	r2, r8
 800cfbc:	e7df      	b.n	800cf7e <_printf_float+0x402>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	464a      	mov	r2, r9
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	f43f ae36 	beq.w	800cc3a <_printf_float+0xbe>
 800cfce:	f108 0801 	add.w	r8, r8, #1
 800cfd2:	68e3      	ldr	r3, [r4, #12]
 800cfd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfd6:	1a5b      	subs	r3, r3, r1
 800cfd8:	4543      	cmp	r3, r8
 800cfda:	dcf0      	bgt.n	800cfbe <_printf_float+0x442>
 800cfdc:	e6f8      	b.n	800cdd0 <_printf_float+0x254>
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	f104 0919 	add.w	r9, r4, #25
 800cfe6:	e7f4      	b.n	800cfd2 <_printf_float+0x456>

0800cfe8 <_printf_common>:
 800cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfec:	4616      	mov	r6, r2
 800cfee:	4699      	mov	r9, r3
 800cff0:	688a      	ldr	r2, [r1, #8]
 800cff2:	690b      	ldr	r3, [r1, #16]
 800cff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cff8:	4293      	cmp	r3, r2
 800cffa:	bfb8      	it	lt
 800cffc:	4613      	movlt	r3, r2
 800cffe:	6033      	str	r3, [r6, #0]
 800d000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d004:	4607      	mov	r7, r0
 800d006:	460c      	mov	r4, r1
 800d008:	b10a      	cbz	r2, 800d00e <_printf_common+0x26>
 800d00a:	3301      	adds	r3, #1
 800d00c:	6033      	str	r3, [r6, #0]
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	0699      	lsls	r1, r3, #26
 800d012:	bf42      	ittt	mi
 800d014:	6833      	ldrmi	r3, [r6, #0]
 800d016:	3302      	addmi	r3, #2
 800d018:	6033      	strmi	r3, [r6, #0]
 800d01a:	6825      	ldr	r5, [r4, #0]
 800d01c:	f015 0506 	ands.w	r5, r5, #6
 800d020:	d106      	bne.n	800d030 <_printf_common+0x48>
 800d022:	f104 0a19 	add.w	sl, r4, #25
 800d026:	68e3      	ldr	r3, [r4, #12]
 800d028:	6832      	ldr	r2, [r6, #0]
 800d02a:	1a9b      	subs	r3, r3, r2
 800d02c:	42ab      	cmp	r3, r5
 800d02e:	dc26      	bgt.n	800d07e <_printf_common+0x96>
 800d030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d034:	1e13      	subs	r3, r2, #0
 800d036:	6822      	ldr	r2, [r4, #0]
 800d038:	bf18      	it	ne
 800d03a:	2301      	movne	r3, #1
 800d03c:	0692      	lsls	r2, r2, #26
 800d03e:	d42b      	bmi.n	800d098 <_printf_common+0xb0>
 800d040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d044:	4649      	mov	r1, r9
 800d046:	4638      	mov	r0, r7
 800d048:	47c0      	blx	r8
 800d04a:	3001      	adds	r0, #1
 800d04c:	d01e      	beq.n	800d08c <_printf_common+0xa4>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	6922      	ldr	r2, [r4, #16]
 800d052:	f003 0306 	and.w	r3, r3, #6
 800d056:	2b04      	cmp	r3, #4
 800d058:	bf02      	ittt	eq
 800d05a:	68e5      	ldreq	r5, [r4, #12]
 800d05c:	6833      	ldreq	r3, [r6, #0]
 800d05e:	1aed      	subeq	r5, r5, r3
 800d060:	68a3      	ldr	r3, [r4, #8]
 800d062:	bf0c      	ite	eq
 800d064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d068:	2500      	movne	r5, #0
 800d06a:	4293      	cmp	r3, r2
 800d06c:	bfc4      	itt	gt
 800d06e:	1a9b      	subgt	r3, r3, r2
 800d070:	18ed      	addgt	r5, r5, r3
 800d072:	2600      	movs	r6, #0
 800d074:	341a      	adds	r4, #26
 800d076:	42b5      	cmp	r5, r6
 800d078:	d11a      	bne.n	800d0b0 <_printf_common+0xc8>
 800d07a:	2000      	movs	r0, #0
 800d07c:	e008      	b.n	800d090 <_printf_common+0xa8>
 800d07e:	2301      	movs	r3, #1
 800d080:	4652      	mov	r2, sl
 800d082:	4649      	mov	r1, r9
 800d084:	4638      	mov	r0, r7
 800d086:	47c0      	blx	r8
 800d088:	3001      	adds	r0, #1
 800d08a:	d103      	bne.n	800d094 <_printf_common+0xac>
 800d08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d094:	3501      	adds	r5, #1
 800d096:	e7c6      	b.n	800d026 <_printf_common+0x3e>
 800d098:	18e1      	adds	r1, r4, r3
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	2030      	movs	r0, #48	; 0x30
 800d09e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0a2:	4422      	add	r2, r4
 800d0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0ac:	3302      	adds	r3, #2
 800d0ae:	e7c7      	b.n	800d040 <_printf_common+0x58>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4649      	mov	r1, r9
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	47c0      	blx	r8
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d0e6      	beq.n	800d08c <_printf_common+0xa4>
 800d0be:	3601      	adds	r6, #1
 800d0c0:	e7d9      	b.n	800d076 <_printf_common+0x8e>
	...

0800d0c4 <_printf_i>:
 800d0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	7e0f      	ldrb	r7, [r1, #24]
 800d0ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0cc:	2f78      	cmp	r7, #120	; 0x78
 800d0ce:	4691      	mov	r9, r2
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	469a      	mov	sl, r3
 800d0d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0da:	d807      	bhi.n	800d0ec <_printf_i+0x28>
 800d0dc:	2f62      	cmp	r7, #98	; 0x62
 800d0de:	d80a      	bhi.n	800d0f6 <_printf_i+0x32>
 800d0e0:	2f00      	cmp	r7, #0
 800d0e2:	f000 80d4 	beq.w	800d28e <_printf_i+0x1ca>
 800d0e6:	2f58      	cmp	r7, #88	; 0x58
 800d0e8:	f000 80c0 	beq.w	800d26c <_printf_i+0x1a8>
 800d0ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0f4:	e03a      	b.n	800d16c <_printf_i+0xa8>
 800d0f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0fa:	2b15      	cmp	r3, #21
 800d0fc:	d8f6      	bhi.n	800d0ec <_printf_i+0x28>
 800d0fe:	a101      	add	r1, pc, #4	; (adr r1, 800d104 <_printf_i+0x40>)
 800d100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d171 	.word	0x0800d171
 800d10c:	0800d0ed 	.word	0x0800d0ed
 800d110:	0800d0ed 	.word	0x0800d0ed
 800d114:	0800d0ed 	.word	0x0800d0ed
 800d118:	0800d0ed 	.word	0x0800d0ed
 800d11c:	0800d171 	.word	0x0800d171
 800d120:	0800d0ed 	.word	0x0800d0ed
 800d124:	0800d0ed 	.word	0x0800d0ed
 800d128:	0800d0ed 	.word	0x0800d0ed
 800d12c:	0800d0ed 	.word	0x0800d0ed
 800d130:	0800d275 	.word	0x0800d275
 800d134:	0800d19d 	.word	0x0800d19d
 800d138:	0800d22f 	.word	0x0800d22f
 800d13c:	0800d0ed 	.word	0x0800d0ed
 800d140:	0800d0ed 	.word	0x0800d0ed
 800d144:	0800d297 	.word	0x0800d297
 800d148:	0800d0ed 	.word	0x0800d0ed
 800d14c:	0800d19d 	.word	0x0800d19d
 800d150:	0800d0ed 	.word	0x0800d0ed
 800d154:	0800d0ed 	.word	0x0800d0ed
 800d158:	0800d237 	.word	0x0800d237
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	1d1a      	adds	r2, r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	602a      	str	r2, [r5, #0]
 800d164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d16c:	2301      	movs	r3, #1
 800d16e:	e09f      	b.n	800d2b0 <_printf_i+0x1ec>
 800d170:	6820      	ldr	r0, [r4, #0]
 800d172:	682b      	ldr	r3, [r5, #0]
 800d174:	0607      	lsls	r7, r0, #24
 800d176:	f103 0104 	add.w	r1, r3, #4
 800d17a:	6029      	str	r1, [r5, #0]
 800d17c:	d501      	bpl.n	800d182 <_printf_i+0xbe>
 800d17e:	681e      	ldr	r6, [r3, #0]
 800d180:	e003      	b.n	800d18a <_printf_i+0xc6>
 800d182:	0646      	lsls	r6, r0, #25
 800d184:	d5fb      	bpl.n	800d17e <_printf_i+0xba>
 800d186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d18a:	2e00      	cmp	r6, #0
 800d18c:	da03      	bge.n	800d196 <_printf_i+0xd2>
 800d18e:	232d      	movs	r3, #45	; 0x2d
 800d190:	4276      	negs	r6, r6
 800d192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d196:	485a      	ldr	r0, [pc, #360]	; (800d300 <_printf_i+0x23c>)
 800d198:	230a      	movs	r3, #10
 800d19a:	e012      	b.n	800d1c2 <_printf_i+0xfe>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	6820      	ldr	r0, [r4, #0]
 800d1a0:	1d19      	adds	r1, r3, #4
 800d1a2:	6029      	str	r1, [r5, #0]
 800d1a4:	0605      	lsls	r5, r0, #24
 800d1a6:	d501      	bpl.n	800d1ac <_printf_i+0xe8>
 800d1a8:	681e      	ldr	r6, [r3, #0]
 800d1aa:	e002      	b.n	800d1b2 <_printf_i+0xee>
 800d1ac:	0641      	lsls	r1, r0, #25
 800d1ae:	d5fb      	bpl.n	800d1a8 <_printf_i+0xe4>
 800d1b0:	881e      	ldrh	r6, [r3, #0]
 800d1b2:	4853      	ldr	r0, [pc, #332]	; (800d300 <_printf_i+0x23c>)
 800d1b4:	2f6f      	cmp	r7, #111	; 0x6f
 800d1b6:	bf0c      	ite	eq
 800d1b8:	2308      	moveq	r3, #8
 800d1ba:	230a      	movne	r3, #10
 800d1bc:	2100      	movs	r1, #0
 800d1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1c2:	6865      	ldr	r5, [r4, #4]
 800d1c4:	60a5      	str	r5, [r4, #8]
 800d1c6:	2d00      	cmp	r5, #0
 800d1c8:	bfa2      	ittt	ge
 800d1ca:	6821      	ldrge	r1, [r4, #0]
 800d1cc:	f021 0104 	bicge.w	r1, r1, #4
 800d1d0:	6021      	strge	r1, [r4, #0]
 800d1d2:	b90e      	cbnz	r6, 800d1d8 <_printf_i+0x114>
 800d1d4:	2d00      	cmp	r5, #0
 800d1d6:	d04b      	beq.n	800d270 <_printf_i+0x1ac>
 800d1d8:	4615      	mov	r5, r2
 800d1da:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1de:	fb03 6711 	mls	r7, r3, r1, r6
 800d1e2:	5dc7      	ldrb	r7, [r0, r7]
 800d1e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1e8:	4637      	mov	r7, r6
 800d1ea:	42bb      	cmp	r3, r7
 800d1ec:	460e      	mov	r6, r1
 800d1ee:	d9f4      	bls.n	800d1da <_printf_i+0x116>
 800d1f0:	2b08      	cmp	r3, #8
 800d1f2:	d10b      	bne.n	800d20c <_printf_i+0x148>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	07de      	lsls	r6, r3, #31
 800d1f8:	d508      	bpl.n	800d20c <_printf_i+0x148>
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	6861      	ldr	r1, [r4, #4]
 800d1fe:	4299      	cmp	r1, r3
 800d200:	bfde      	ittt	le
 800d202:	2330      	movle	r3, #48	; 0x30
 800d204:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d208:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d20c:	1b52      	subs	r2, r2, r5
 800d20e:	6122      	str	r2, [r4, #16]
 800d210:	f8cd a000 	str.w	sl, [sp]
 800d214:	464b      	mov	r3, r9
 800d216:	aa03      	add	r2, sp, #12
 800d218:	4621      	mov	r1, r4
 800d21a:	4640      	mov	r0, r8
 800d21c:	f7ff fee4 	bl	800cfe8 <_printf_common>
 800d220:	3001      	adds	r0, #1
 800d222:	d14a      	bne.n	800d2ba <_printf_i+0x1f6>
 800d224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d228:	b004      	add	sp, #16
 800d22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	f043 0320 	orr.w	r3, r3, #32
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	4833      	ldr	r0, [pc, #204]	; (800d304 <_printf_i+0x240>)
 800d238:	2778      	movs	r7, #120	; 0x78
 800d23a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	6829      	ldr	r1, [r5, #0]
 800d242:	061f      	lsls	r7, r3, #24
 800d244:	f851 6b04 	ldr.w	r6, [r1], #4
 800d248:	d402      	bmi.n	800d250 <_printf_i+0x18c>
 800d24a:	065f      	lsls	r7, r3, #25
 800d24c:	bf48      	it	mi
 800d24e:	b2b6      	uxthmi	r6, r6
 800d250:	07df      	lsls	r7, r3, #31
 800d252:	bf48      	it	mi
 800d254:	f043 0320 	orrmi.w	r3, r3, #32
 800d258:	6029      	str	r1, [r5, #0]
 800d25a:	bf48      	it	mi
 800d25c:	6023      	strmi	r3, [r4, #0]
 800d25e:	b91e      	cbnz	r6, 800d268 <_printf_i+0x1a4>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	f023 0320 	bic.w	r3, r3, #32
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	2310      	movs	r3, #16
 800d26a:	e7a7      	b.n	800d1bc <_printf_i+0xf8>
 800d26c:	4824      	ldr	r0, [pc, #144]	; (800d300 <_printf_i+0x23c>)
 800d26e:	e7e4      	b.n	800d23a <_printf_i+0x176>
 800d270:	4615      	mov	r5, r2
 800d272:	e7bd      	b.n	800d1f0 <_printf_i+0x12c>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	6826      	ldr	r6, [r4, #0]
 800d278:	6961      	ldr	r1, [r4, #20]
 800d27a:	1d18      	adds	r0, r3, #4
 800d27c:	6028      	str	r0, [r5, #0]
 800d27e:	0635      	lsls	r5, r6, #24
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	d501      	bpl.n	800d288 <_printf_i+0x1c4>
 800d284:	6019      	str	r1, [r3, #0]
 800d286:	e002      	b.n	800d28e <_printf_i+0x1ca>
 800d288:	0670      	lsls	r0, r6, #25
 800d28a:	d5fb      	bpl.n	800d284 <_printf_i+0x1c0>
 800d28c:	8019      	strh	r1, [r3, #0]
 800d28e:	2300      	movs	r3, #0
 800d290:	6123      	str	r3, [r4, #16]
 800d292:	4615      	mov	r5, r2
 800d294:	e7bc      	b.n	800d210 <_printf_i+0x14c>
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	1d1a      	adds	r2, r3, #4
 800d29a:	602a      	str	r2, [r5, #0]
 800d29c:	681d      	ldr	r5, [r3, #0]
 800d29e:	6862      	ldr	r2, [r4, #4]
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f7f2 ffb4 	bl	8000210 <memchr>
 800d2a8:	b108      	cbz	r0, 800d2ae <_printf_i+0x1ea>
 800d2aa:	1b40      	subs	r0, r0, r5
 800d2ac:	6060      	str	r0, [r4, #4]
 800d2ae:	6863      	ldr	r3, [r4, #4]
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2b8:	e7aa      	b.n	800d210 <_printf_i+0x14c>
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	462a      	mov	r2, r5
 800d2be:	4649      	mov	r1, r9
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	47d0      	blx	sl
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d0ad      	beq.n	800d224 <_printf_i+0x160>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	079b      	lsls	r3, r3, #30
 800d2cc:	d413      	bmi.n	800d2f6 <_printf_i+0x232>
 800d2ce:	68e0      	ldr	r0, [r4, #12]
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	4298      	cmp	r0, r3
 800d2d4:	bfb8      	it	lt
 800d2d6:	4618      	movlt	r0, r3
 800d2d8:	e7a6      	b.n	800d228 <_printf_i+0x164>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4649      	mov	r1, r9
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	47d0      	blx	sl
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d09d      	beq.n	800d224 <_printf_i+0x160>
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	68e3      	ldr	r3, [r4, #12]
 800d2ec:	9903      	ldr	r1, [sp, #12]
 800d2ee:	1a5b      	subs	r3, r3, r1
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	dcf2      	bgt.n	800d2da <_printf_i+0x216>
 800d2f4:	e7eb      	b.n	800d2ce <_printf_i+0x20a>
 800d2f6:	2500      	movs	r5, #0
 800d2f8:	f104 0619 	add.w	r6, r4, #25
 800d2fc:	e7f5      	b.n	800d2ea <_printf_i+0x226>
 800d2fe:	bf00      	nop
 800d300:	08010da6 	.word	0x08010da6
 800d304:	08010db7 	.word	0x08010db7

0800d308 <std>:
 800d308:	2300      	movs	r3, #0
 800d30a:	b510      	push	{r4, lr}
 800d30c:	4604      	mov	r4, r0
 800d30e:	e9c0 3300 	strd	r3, r3, [r0]
 800d312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d316:	6083      	str	r3, [r0, #8]
 800d318:	8181      	strh	r1, [r0, #12]
 800d31a:	6643      	str	r3, [r0, #100]	; 0x64
 800d31c:	81c2      	strh	r2, [r0, #14]
 800d31e:	6183      	str	r3, [r0, #24]
 800d320:	4619      	mov	r1, r3
 800d322:	2208      	movs	r2, #8
 800d324:	305c      	adds	r0, #92	; 0x5c
 800d326:	f000 f914 	bl	800d552 <memset>
 800d32a:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <std+0x58>)
 800d32c:	6263      	str	r3, [r4, #36]	; 0x24
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <std+0x5c>)
 800d330:	62a3      	str	r3, [r4, #40]	; 0x28
 800d332:	4b0d      	ldr	r3, [pc, #52]	; (800d368 <std+0x60>)
 800d334:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d336:	4b0d      	ldr	r3, [pc, #52]	; (800d36c <std+0x64>)
 800d338:	6323      	str	r3, [r4, #48]	; 0x30
 800d33a:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <std+0x68>)
 800d33c:	6224      	str	r4, [r4, #32]
 800d33e:	429c      	cmp	r4, r3
 800d340:	d006      	beq.n	800d350 <std+0x48>
 800d342:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d346:	4294      	cmp	r4, r2
 800d348:	d002      	beq.n	800d350 <std+0x48>
 800d34a:	33d0      	adds	r3, #208	; 0xd0
 800d34c:	429c      	cmp	r4, r3
 800d34e:	d105      	bne.n	800d35c <std+0x54>
 800d350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d358:	f000 b9dc 	b.w	800d714 <__retarget_lock_init_recursive>
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	bf00      	nop
 800d360:	0800d4cd 	.word	0x0800d4cd
 800d364:	0800d4ef 	.word	0x0800d4ef
 800d368:	0800d527 	.word	0x0800d527
 800d36c:	0800d54b 	.word	0x0800d54b
 800d370:	20005c00 	.word	0x20005c00

0800d374 <stdio_exit_handler>:
 800d374:	4a02      	ldr	r2, [pc, #8]	; (800d380 <stdio_exit_handler+0xc>)
 800d376:	4903      	ldr	r1, [pc, #12]	; (800d384 <stdio_exit_handler+0x10>)
 800d378:	4803      	ldr	r0, [pc, #12]	; (800d388 <stdio_exit_handler+0x14>)
 800d37a:	f000 b869 	b.w	800d450 <_fwalk_sglue>
 800d37e:	bf00      	nop
 800d380:	2000002c 	.word	0x2000002c
 800d384:	0800f0e1 	.word	0x0800f0e1
 800d388:	20000038 	.word	0x20000038

0800d38c <cleanup_stdio>:
 800d38c:	6841      	ldr	r1, [r0, #4]
 800d38e:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <cleanup_stdio+0x34>)
 800d390:	4299      	cmp	r1, r3
 800d392:	b510      	push	{r4, lr}
 800d394:	4604      	mov	r4, r0
 800d396:	d001      	beq.n	800d39c <cleanup_stdio+0x10>
 800d398:	f001 fea2 	bl	800f0e0 <_fflush_r>
 800d39c:	68a1      	ldr	r1, [r4, #8]
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <cleanup_stdio+0x38>)
 800d3a0:	4299      	cmp	r1, r3
 800d3a2:	d002      	beq.n	800d3aa <cleanup_stdio+0x1e>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f001 fe9b 	bl	800f0e0 <_fflush_r>
 800d3aa:	68e1      	ldr	r1, [r4, #12]
 800d3ac:	4b06      	ldr	r3, [pc, #24]	; (800d3c8 <cleanup_stdio+0x3c>)
 800d3ae:	4299      	cmp	r1, r3
 800d3b0:	d004      	beq.n	800d3bc <cleanup_stdio+0x30>
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3b8:	f001 be92 	b.w	800f0e0 <_fflush_r>
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	bf00      	nop
 800d3c0:	20005c00 	.word	0x20005c00
 800d3c4:	20005c68 	.word	0x20005c68
 800d3c8:	20005cd0 	.word	0x20005cd0

0800d3cc <global_stdio_init.part.0>:
 800d3cc:	b510      	push	{r4, lr}
 800d3ce:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <global_stdio_init.part.0+0x30>)
 800d3d0:	4c0b      	ldr	r4, [pc, #44]	; (800d400 <global_stdio_init.part.0+0x34>)
 800d3d2:	4a0c      	ldr	r2, [pc, #48]	; (800d404 <global_stdio_init.part.0+0x38>)
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2104      	movs	r1, #4
 800d3dc:	f7ff ff94 	bl	800d308 <std>
 800d3e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	2109      	movs	r1, #9
 800d3e8:	f7ff ff8e 	bl	800d308 <std>
 800d3ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f6:	2112      	movs	r1, #18
 800d3f8:	f7ff bf86 	b.w	800d308 <std>
 800d3fc:	20005d38 	.word	0x20005d38
 800d400:	20005c00 	.word	0x20005c00
 800d404:	0800d375 	.word	0x0800d375

0800d408 <__sfp_lock_acquire>:
 800d408:	4801      	ldr	r0, [pc, #4]	; (800d410 <__sfp_lock_acquire+0x8>)
 800d40a:	f000 b984 	b.w	800d716 <__retarget_lock_acquire_recursive>
 800d40e:	bf00      	nop
 800d410:	20005d41 	.word	0x20005d41

0800d414 <__sfp_lock_release>:
 800d414:	4801      	ldr	r0, [pc, #4]	; (800d41c <__sfp_lock_release+0x8>)
 800d416:	f000 b97f 	b.w	800d718 <__retarget_lock_release_recursive>
 800d41a:	bf00      	nop
 800d41c:	20005d41 	.word	0x20005d41

0800d420 <__sinit>:
 800d420:	b510      	push	{r4, lr}
 800d422:	4604      	mov	r4, r0
 800d424:	f7ff fff0 	bl	800d408 <__sfp_lock_acquire>
 800d428:	6a23      	ldr	r3, [r4, #32]
 800d42a:	b11b      	cbz	r3, 800d434 <__sinit+0x14>
 800d42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d430:	f7ff bff0 	b.w	800d414 <__sfp_lock_release>
 800d434:	4b04      	ldr	r3, [pc, #16]	; (800d448 <__sinit+0x28>)
 800d436:	6223      	str	r3, [r4, #32]
 800d438:	4b04      	ldr	r3, [pc, #16]	; (800d44c <__sinit+0x2c>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1f5      	bne.n	800d42c <__sinit+0xc>
 800d440:	f7ff ffc4 	bl	800d3cc <global_stdio_init.part.0>
 800d444:	e7f2      	b.n	800d42c <__sinit+0xc>
 800d446:	bf00      	nop
 800d448:	0800d38d 	.word	0x0800d38d
 800d44c:	20005d38 	.word	0x20005d38

0800d450 <_fwalk_sglue>:
 800d450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d454:	4607      	mov	r7, r0
 800d456:	4688      	mov	r8, r1
 800d458:	4614      	mov	r4, r2
 800d45a:	2600      	movs	r6, #0
 800d45c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d460:	f1b9 0901 	subs.w	r9, r9, #1
 800d464:	d505      	bpl.n	800d472 <_fwalk_sglue+0x22>
 800d466:	6824      	ldr	r4, [r4, #0]
 800d468:	2c00      	cmp	r4, #0
 800d46a:	d1f7      	bne.n	800d45c <_fwalk_sglue+0xc>
 800d46c:	4630      	mov	r0, r6
 800d46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d907      	bls.n	800d488 <_fwalk_sglue+0x38>
 800d478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d47c:	3301      	adds	r3, #1
 800d47e:	d003      	beq.n	800d488 <_fwalk_sglue+0x38>
 800d480:	4629      	mov	r1, r5
 800d482:	4638      	mov	r0, r7
 800d484:	47c0      	blx	r8
 800d486:	4306      	orrs	r6, r0
 800d488:	3568      	adds	r5, #104	; 0x68
 800d48a:	e7e9      	b.n	800d460 <_fwalk_sglue+0x10>

0800d48c <siprintf>:
 800d48c:	b40e      	push	{r1, r2, r3}
 800d48e:	b500      	push	{lr}
 800d490:	b09c      	sub	sp, #112	; 0x70
 800d492:	ab1d      	add	r3, sp, #116	; 0x74
 800d494:	9002      	str	r0, [sp, #8]
 800d496:	9006      	str	r0, [sp, #24]
 800d498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d49c:	4809      	ldr	r0, [pc, #36]	; (800d4c4 <siprintf+0x38>)
 800d49e:	9107      	str	r1, [sp, #28]
 800d4a0:	9104      	str	r1, [sp, #16]
 800d4a2:	4909      	ldr	r1, [pc, #36]	; (800d4c8 <siprintf+0x3c>)
 800d4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a8:	9105      	str	r1, [sp, #20]
 800d4aa:	6800      	ldr	r0, [r0, #0]
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	a902      	add	r1, sp, #8
 800d4b0:	f001 fc92 	bl	800edd8 <_svfiprintf_r>
 800d4b4:	9b02      	ldr	r3, [sp, #8]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	b01c      	add	sp, #112	; 0x70
 800d4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c0:	b003      	add	sp, #12
 800d4c2:	4770      	bx	lr
 800d4c4:	20000084 	.word	0x20000084
 800d4c8:	ffff0208 	.word	0xffff0208

0800d4cc <__sread>:
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d4:	f000 f8d0 	bl	800d678 <_read_r>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	bfab      	itete	ge
 800d4dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4de:	89a3      	ldrhlt	r3, [r4, #12]
 800d4e0:	181b      	addge	r3, r3, r0
 800d4e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4e6:	bfac      	ite	ge
 800d4e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ea:	81a3      	strhlt	r3, [r4, #12]
 800d4ec:	bd10      	pop	{r4, pc}

0800d4ee <__swrite>:
 800d4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f2:	461f      	mov	r7, r3
 800d4f4:	898b      	ldrh	r3, [r1, #12]
 800d4f6:	05db      	lsls	r3, r3, #23
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	d505      	bpl.n	800d50c <__swrite+0x1e>
 800d500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d504:	2302      	movs	r3, #2
 800d506:	2200      	movs	r2, #0
 800d508:	f000 f8a4 	bl	800d654 <_lseek_r>
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	4632      	mov	r2, r6
 800d51a:	463b      	mov	r3, r7
 800d51c:	4628      	mov	r0, r5
 800d51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d522:	f000 b8bb 	b.w	800d69c <_write_r>

0800d526 <__sseek>:
 800d526:	b510      	push	{r4, lr}
 800d528:	460c      	mov	r4, r1
 800d52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52e:	f000 f891 	bl	800d654 <_lseek_r>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	bf15      	itete	ne
 800d538:	6560      	strne	r0, [r4, #84]	; 0x54
 800d53a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d53e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d542:	81a3      	strheq	r3, [r4, #12]
 800d544:	bf18      	it	ne
 800d546:	81a3      	strhne	r3, [r4, #12]
 800d548:	bd10      	pop	{r4, pc}

0800d54a <__sclose>:
 800d54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54e:	f000 b81b 	b.w	800d588 <_close_r>

0800d552 <memset>:
 800d552:	4402      	add	r2, r0
 800d554:	4603      	mov	r3, r0
 800d556:	4293      	cmp	r3, r2
 800d558:	d100      	bne.n	800d55c <memset+0xa>
 800d55a:	4770      	bx	lr
 800d55c:	f803 1b01 	strb.w	r1, [r3], #1
 800d560:	e7f9      	b.n	800d556 <memset+0x4>

0800d562 <strcat>:
 800d562:	b510      	push	{r4, lr}
 800d564:	4602      	mov	r2, r0
 800d566:	7814      	ldrb	r4, [r2, #0]
 800d568:	4613      	mov	r3, r2
 800d56a:	3201      	adds	r2, #1
 800d56c:	2c00      	cmp	r4, #0
 800d56e:	d1fa      	bne.n	800d566 <strcat+0x4>
 800d570:	3b01      	subs	r3, #1
 800d572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d57a:	2a00      	cmp	r2, #0
 800d57c:	d1f9      	bne.n	800d572 <strcat+0x10>
 800d57e:	bd10      	pop	{r4, pc}

0800d580 <_localeconv_r>:
 800d580:	4800      	ldr	r0, [pc, #0]	; (800d584 <_localeconv_r+0x4>)
 800d582:	4770      	bx	lr
 800d584:	20000178 	.word	0x20000178

0800d588 <_close_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	4d06      	ldr	r5, [pc, #24]	; (800d5a4 <_close_r+0x1c>)
 800d58c:	2300      	movs	r3, #0
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	f7f4 ff4b 	bl	800242e <_close>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_close_r+0x1a>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_close_r+0x1a>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	20005d3c 	.word	0x20005d3c

0800d5a8 <_reclaim_reent>:
 800d5a8:	4b29      	ldr	r3, [pc, #164]	; (800d650 <_reclaim_reent+0xa8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4283      	cmp	r3, r0
 800d5ae:	b570      	push	{r4, r5, r6, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	d04b      	beq.n	800d64c <_reclaim_reent+0xa4>
 800d5b4:	69c3      	ldr	r3, [r0, #28]
 800d5b6:	b143      	cbz	r3, 800d5ca <_reclaim_reent+0x22>
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d144      	bne.n	800d648 <_reclaim_reent+0xa0>
 800d5be:	69e3      	ldr	r3, [r4, #28]
 800d5c0:	6819      	ldr	r1, [r3, #0]
 800d5c2:	b111      	cbz	r1, 800d5ca <_reclaim_reent+0x22>
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 ff31 	bl	800e42c <_free_r>
 800d5ca:	6961      	ldr	r1, [r4, #20]
 800d5cc:	b111      	cbz	r1, 800d5d4 <_reclaim_reent+0x2c>
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 ff2c 	bl	800e42c <_free_r>
 800d5d4:	69e1      	ldr	r1, [r4, #28]
 800d5d6:	b111      	cbz	r1, 800d5de <_reclaim_reent+0x36>
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 ff27 	bl	800e42c <_free_r>
 800d5de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d5e0:	b111      	cbz	r1, 800d5e8 <_reclaim_reent+0x40>
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f000 ff22 	bl	800e42c <_free_r>
 800d5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ea:	b111      	cbz	r1, 800d5f2 <_reclaim_reent+0x4a>
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 ff1d 	bl	800e42c <_free_r>
 800d5f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d5f4:	b111      	cbz	r1, 800d5fc <_reclaim_reent+0x54>
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 ff18 	bl	800e42c <_free_r>
 800d5fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5fe:	b111      	cbz	r1, 800d606 <_reclaim_reent+0x5e>
 800d600:	4620      	mov	r0, r4
 800d602:	f000 ff13 	bl	800e42c <_free_r>
 800d606:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d608:	b111      	cbz	r1, 800d610 <_reclaim_reent+0x68>
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 ff0e 	bl	800e42c <_free_r>
 800d610:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d612:	b111      	cbz	r1, 800d61a <_reclaim_reent+0x72>
 800d614:	4620      	mov	r0, r4
 800d616:	f000 ff09 	bl	800e42c <_free_r>
 800d61a:	6a23      	ldr	r3, [r4, #32]
 800d61c:	b1b3      	cbz	r3, 800d64c <_reclaim_reent+0xa4>
 800d61e:	4620      	mov	r0, r4
 800d620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d624:	4718      	bx	r3
 800d626:	5949      	ldr	r1, [r1, r5]
 800d628:	b941      	cbnz	r1, 800d63c <_reclaim_reent+0x94>
 800d62a:	3504      	adds	r5, #4
 800d62c:	69e3      	ldr	r3, [r4, #28]
 800d62e:	2d80      	cmp	r5, #128	; 0x80
 800d630:	68d9      	ldr	r1, [r3, #12]
 800d632:	d1f8      	bne.n	800d626 <_reclaim_reent+0x7e>
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fef9 	bl	800e42c <_free_r>
 800d63a:	e7c0      	b.n	800d5be <_reclaim_reent+0x16>
 800d63c:	680e      	ldr	r6, [r1, #0]
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 fef4 	bl	800e42c <_free_r>
 800d644:	4631      	mov	r1, r6
 800d646:	e7ef      	b.n	800d628 <_reclaim_reent+0x80>
 800d648:	2500      	movs	r5, #0
 800d64a:	e7ef      	b.n	800d62c <_reclaim_reent+0x84>
 800d64c:	bd70      	pop	{r4, r5, r6, pc}
 800d64e:	bf00      	nop
 800d650:	20000084 	.word	0x20000084

0800d654 <_lseek_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_lseek_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f4 ff0a 	bl	800247c <_lseek>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_lseek_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_lseek_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	20005d3c 	.word	0x20005d3c

0800d678 <_read_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d07      	ldr	r5, [pc, #28]	; (800d698 <_read_r+0x20>)
 800d67c:	4604      	mov	r4, r0
 800d67e:	4608      	mov	r0, r1
 800d680:	4611      	mov	r1, r2
 800d682:	2200      	movs	r2, #0
 800d684:	602a      	str	r2, [r5, #0]
 800d686:	461a      	mov	r2, r3
 800d688:	f7f4 fe98 	bl	80023bc <_read>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d102      	bne.n	800d696 <_read_r+0x1e>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	b103      	cbz	r3, 800d696 <_read_r+0x1e>
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	20005d3c 	.word	0x20005d3c

0800d69c <_write_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d07      	ldr	r5, [pc, #28]	; (800d6bc <_write_r+0x20>)
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	602a      	str	r2, [r5, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	f7f4 fea3 	bl	80023f6 <_write>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_write_r+0x1e>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_write_r+0x1e>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20005d3c 	.word	0x20005d3c

0800d6c0 <__errno>:
 800d6c0:	4b01      	ldr	r3, [pc, #4]	; (800d6c8 <__errno+0x8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	20000084 	.word	0x20000084

0800d6cc <__libc_init_array>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	4d0d      	ldr	r5, [pc, #52]	; (800d704 <__libc_init_array+0x38>)
 800d6d0:	4c0d      	ldr	r4, [pc, #52]	; (800d708 <__libc_init_array+0x3c>)
 800d6d2:	1b64      	subs	r4, r4, r5
 800d6d4:	10a4      	asrs	r4, r4, #2
 800d6d6:	2600      	movs	r6, #0
 800d6d8:	42a6      	cmp	r6, r4
 800d6da:	d109      	bne.n	800d6f0 <__libc_init_array+0x24>
 800d6dc:	4d0b      	ldr	r5, [pc, #44]	; (800d70c <__libc_init_array+0x40>)
 800d6de:	4c0c      	ldr	r4, [pc, #48]	; (800d710 <__libc_init_array+0x44>)
 800d6e0:	f003 f9d2 	bl	8010a88 <_init>
 800d6e4:	1b64      	subs	r4, r4, r5
 800d6e6:	10a4      	asrs	r4, r4, #2
 800d6e8:	2600      	movs	r6, #0
 800d6ea:	42a6      	cmp	r6, r4
 800d6ec:	d105      	bne.n	800d6fa <__libc_init_array+0x2e>
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f4:	4798      	blx	r3
 800d6f6:	3601      	adds	r6, #1
 800d6f8:	e7ee      	b.n	800d6d8 <__libc_init_array+0xc>
 800d6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6fe:	4798      	blx	r3
 800d700:	3601      	adds	r6, #1
 800d702:	e7f2      	b.n	800d6ea <__libc_init_array+0x1e>
 800d704:	08011140 	.word	0x08011140
 800d708:	08011140 	.word	0x08011140
 800d70c:	08011140 	.word	0x08011140
 800d710:	08011144 	.word	0x08011144

0800d714 <__retarget_lock_init_recursive>:
 800d714:	4770      	bx	lr

0800d716 <__retarget_lock_acquire_recursive>:
 800d716:	4770      	bx	lr

0800d718 <__retarget_lock_release_recursive>:
 800d718:	4770      	bx	lr

0800d71a <memcpy>:
 800d71a:	440a      	add	r2, r1
 800d71c:	4291      	cmp	r1, r2
 800d71e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d722:	d100      	bne.n	800d726 <memcpy+0xc>
 800d724:	4770      	bx	lr
 800d726:	b510      	push	{r4, lr}
 800d728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d72c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d730:	4291      	cmp	r1, r2
 800d732:	d1f9      	bne.n	800d728 <memcpy+0xe>
 800d734:	bd10      	pop	{r4, pc}

0800d736 <quorem>:
 800d736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73a:	6903      	ldr	r3, [r0, #16]
 800d73c:	690c      	ldr	r4, [r1, #16]
 800d73e:	42a3      	cmp	r3, r4
 800d740:	4607      	mov	r7, r0
 800d742:	db7e      	blt.n	800d842 <quorem+0x10c>
 800d744:	3c01      	subs	r4, #1
 800d746:	f101 0814 	add.w	r8, r1, #20
 800d74a:	f100 0514 	add.w	r5, r0, #20
 800d74e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d75c:	3301      	adds	r3, #1
 800d75e:	429a      	cmp	r2, r3
 800d760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d768:	fbb2 f6f3 	udiv	r6, r2, r3
 800d76c:	d331      	bcc.n	800d7d2 <quorem+0x9c>
 800d76e:	f04f 0e00 	mov.w	lr, #0
 800d772:	4640      	mov	r0, r8
 800d774:	46ac      	mov	ip, r5
 800d776:	46f2      	mov	sl, lr
 800d778:	f850 2b04 	ldr.w	r2, [r0], #4
 800d77c:	b293      	uxth	r3, r2
 800d77e:	fb06 e303 	mla	r3, r6, r3, lr
 800d782:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d786:	0c1a      	lsrs	r2, r3, #16
 800d788:	b29b      	uxth	r3, r3
 800d78a:	ebaa 0303 	sub.w	r3, sl, r3
 800d78e:	f8dc a000 	ldr.w	sl, [ip]
 800d792:	fa13 f38a 	uxtah	r3, r3, sl
 800d796:	fb06 220e 	mla	r2, r6, lr, r2
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	9b00      	ldr	r3, [sp, #0]
 800d79e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7a2:	b292      	uxth	r2, r2
 800d7a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7b0:	4581      	cmp	r9, r0
 800d7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d7ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7be:	d2db      	bcs.n	800d778 <quorem+0x42>
 800d7c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7c4:	b92b      	cbnz	r3, 800d7d2 <quorem+0x9c>
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	3b04      	subs	r3, #4
 800d7ca:	429d      	cmp	r5, r3
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	d32c      	bcc.n	800d82a <quorem+0xf4>
 800d7d0:	613c      	str	r4, [r7, #16]
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	f001 f9a6 	bl	800eb24 <__mcmp>
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	db22      	blt.n	800d822 <quorem+0xec>
 800d7dc:	3601      	adds	r6, #1
 800d7de:	4629      	mov	r1, r5
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7e6:	f8d1 c000 	ldr.w	ip, [r1]
 800d7ea:	b293      	uxth	r3, r2
 800d7ec:	1ac3      	subs	r3, r0, r3
 800d7ee:	0c12      	lsrs	r2, r2, #16
 800d7f0:	fa13 f38c 	uxtah	r3, r3, ip
 800d7f4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d7f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d802:	45c1      	cmp	r9, r8
 800d804:	f841 3b04 	str.w	r3, [r1], #4
 800d808:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d80c:	d2e9      	bcs.n	800d7e2 <quorem+0xac>
 800d80e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d816:	b922      	cbnz	r2, 800d822 <quorem+0xec>
 800d818:	3b04      	subs	r3, #4
 800d81a:	429d      	cmp	r5, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	d30a      	bcc.n	800d836 <quorem+0x100>
 800d820:	613c      	str	r4, [r7, #16]
 800d822:	4630      	mov	r0, r6
 800d824:	b003      	add	sp, #12
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	3b04      	subs	r3, #4
 800d82e:	2a00      	cmp	r2, #0
 800d830:	d1ce      	bne.n	800d7d0 <quorem+0x9a>
 800d832:	3c01      	subs	r4, #1
 800d834:	e7c9      	b.n	800d7ca <quorem+0x94>
 800d836:	6812      	ldr	r2, [r2, #0]
 800d838:	3b04      	subs	r3, #4
 800d83a:	2a00      	cmp	r2, #0
 800d83c:	d1f0      	bne.n	800d820 <quorem+0xea>
 800d83e:	3c01      	subs	r4, #1
 800d840:	e7eb      	b.n	800d81a <quorem+0xe4>
 800d842:	2000      	movs	r0, #0
 800d844:	e7ee      	b.n	800d824 <quorem+0xee>
	...

0800d848 <_dtoa_r>:
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	ed2d 8b04 	vpush	{d8-d9}
 800d850:	69c5      	ldr	r5, [r0, #28]
 800d852:	b093      	sub	sp, #76	; 0x4c
 800d854:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d858:	ec57 6b10 	vmov	r6, r7, d0
 800d85c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d860:	9107      	str	r1, [sp, #28]
 800d862:	4604      	mov	r4, r0
 800d864:	920a      	str	r2, [sp, #40]	; 0x28
 800d866:	930d      	str	r3, [sp, #52]	; 0x34
 800d868:	b975      	cbnz	r5, 800d888 <_dtoa_r+0x40>
 800d86a:	2010      	movs	r0, #16
 800d86c:	f000 fe2a 	bl	800e4c4 <malloc>
 800d870:	4602      	mov	r2, r0
 800d872:	61e0      	str	r0, [r4, #28]
 800d874:	b920      	cbnz	r0, 800d880 <_dtoa_r+0x38>
 800d876:	4bae      	ldr	r3, [pc, #696]	; (800db30 <_dtoa_r+0x2e8>)
 800d878:	21ef      	movs	r1, #239	; 0xef
 800d87a:	48ae      	ldr	r0, [pc, #696]	; (800db34 <_dtoa_r+0x2ec>)
 800d87c:	f001 fc82 	bl	800f184 <__assert_func>
 800d880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d884:	6005      	str	r5, [r0, #0]
 800d886:	60c5      	str	r5, [r0, #12]
 800d888:	69e3      	ldr	r3, [r4, #28]
 800d88a:	6819      	ldr	r1, [r3, #0]
 800d88c:	b151      	cbz	r1, 800d8a4 <_dtoa_r+0x5c>
 800d88e:	685a      	ldr	r2, [r3, #4]
 800d890:	604a      	str	r2, [r1, #4]
 800d892:	2301      	movs	r3, #1
 800d894:	4093      	lsls	r3, r2
 800d896:	608b      	str	r3, [r1, #8]
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 ff07 	bl	800e6ac <_Bfree>
 800d89e:	69e3      	ldr	r3, [r4, #28]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	1e3b      	subs	r3, r7, #0
 800d8a6:	bfbb      	ittet	lt
 800d8a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8ac:	9303      	strlt	r3, [sp, #12]
 800d8ae:	2300      	movge	r3, #0
 800d8b0:	2201      	movlt	r2, #1
 800d8b2:	bfac      	ite	ge
 800d8b4:	f8c8 3000 	strge.w	r3, [r8]
 800d8b8:	f8c8 2000 	strlt.w	r2, [r8]
 800d8bc:	4b9e      	ldr	r3, [pc, #632]	; (800db38 <_dtoa_r+0x2f0>)
 800d8be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d8c2:	ea33 0308 	bics.w	r3, r3, r8
 800d8c6:	d11b      	bne.n	800d900 <_dtoa_r+0xb8>
 800d8c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8ce:	6013      	str	r3, [r2, #0]
 800d8d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d8d4:	4333      	orrs	r3, r6
 800d8d6:	f000 8593 	beq.w	800e400 <_dtoa_r+0xbb8>
 800d8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8dc:	b963      	cbnz	r3, 800d8f8 <_dtoa_r+0xb0>
 800d8de:	4b97      	ldr	r3, [pc, #604]	; (800db3c <_dtoa_r+0x2f4>)
 800d8e0:	e027      	b.n	800d932 <_dtoa_r+0xea>
 800d8e2:	4b97      	ldr	r3, [pc, #604]	; (800db40 <_dtoa_r+0x2f8>)
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	3308      	adds	r3, #8
 800d8e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	9800      	ldr	r0, [sp, #0]
 800d8ee:	b013      	add	sp, #76	; 0x4c
 800d8f0:	ecbd 8b04 	vpop	{d8-d9}
 800d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f8:	4b90      	ldr	r3, [pc, #576]	; (800db3c <_dtoa_r+0x2f4>)
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	3303      	adds	r3, #3
 800d8fe:	e7f3      	b.n	800d8e8 <_dtoa_r+0xa0>
 800d900:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d904:	2200      	movs	r2, #0
 800d906:	ec51 0b17 	vmov	r0, r1, d7
 800d90a:	eeb0 8a47 	vmov.f32	s16, s14
 800d90e:	eef0 8a67 	vmov.f32	s17, s15
 800d912:	2300      	movs	r3, #0
 800d914:	f7f3 f8f8 	bl	8000b08 <__aeabi_dcmpeq>
 800d918:	4681      	mov	r9, r0
 800d91a:	b160      	cbz	r0, 800d936 <_dtoa_r+0xee>
 800d91c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d91e:	2301      	movs	r3, #1
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d924:	2b00      	cmp	r3, #0
 800d926:	f000 8568 	beq.w	800e3fa <_dtoa_r+0xbb2>
 800d92a:	4b86      	ldr	r3, [pc, #536]	; (800db44 <_dtoa_r+0x2fc>)
 800d92c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	3b01      	subs	r3, #1
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	e7da      	b.n	800d8ec <_dtoa_r+0xa4>
 800d936:	aa10      	add	r2, sp, #64	; 0x40
 800d938:	a911      	add	r1, sp, #68	; 0x44
 800d93a:	4620      	mov	r0, r4
 800d93c:	eeb0 0a48 	vmov.f32	s0, s16
 800d940:	eef0 0a68 	vmov.f32	s1, s17
 800d944:	f001 f994 	bl	800ec70 <__d2b>
 800d948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d94c:	4682      	mov	sl, r0
 800d94e:	2d00      	cmp	r5, #0
 800d950:	d07f      	beq.n	800da52 <_dtoa_r+0x20a>
 800d952:	ee18 3a90 	vmov	r3, s17
 800d956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d95a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d95e:	ec51 0b18 	vmov	r0, r1, d8
 800d962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d96a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d96e:	4619      	mov	r1, r3
 800d970:	2200      	movs	r2, #0
 800d972:	4b75      	ldr	r3, [pc, #468]	; (800db48 <_dtoa_r+0x300>)
 800d974:	f7f2 fca8 	bl	80002c8 <__aeabi_dsub>
 800d978:	a367      	add	r3, pc, #412	; (adr r3, 800db18 <_dtoa_r+0x2d0>)
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	f7f2 fe5b 	bl	8000638 <__aeabi_dmul>
 800d982:	a367      	add	r3, pc, #412	; (adr r3, 800db20 <_dtoa_r+0x2d8>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f2 fca0 	bl	80002cc <__adddf3>
 800d98c:	4606      	mov	r6, r0
 800d98e:	4628      	mov	r0, r5
 800d990:	460f      	mov	r7, r1
 800d992:	f7f2 fde7 	bl	8000564 <__aeabi_i2d>
 800d996:	a364      	add	r3, pc, #400	; (adr r3, 800db28 <_dtoa_r+0x2e0>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f2 fe4c 	bl	8000638 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	f7f2 fc90 	bl	80002cc <__adddf3>
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	460f      	mov	r7, r1
 800d9b0:	f7f3 f8f2 	bl	8000b98 <__aeabi_d2iz>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	4683      	mov	fp, r0
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4639      	mov	r1, r7
 800d9be:	f7f3 f8ad 	bl	8000b1c <__aeabi_dcmplt>
 800d9c2:	b148      	cbz	r0, 800d9d8 <_dtoa_r+0x190>
 800d9c4:	4658      	mov	r0, fp
 800d9c6:	f7f2 fdcd 	bl	8000564 <__aeabi_i2d>
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	463b      	mov	r3, r7
 800d9ce:	f7f3 f89b 	bl	8000b08 <__aeabi_dcmpeq>
 800d9d2:	b908      	cbnz	r0, 800d9d8 <_dtoa_r+0x190>
 800d9d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d9d8:	f1bb 0f16 	cmp.w	fp, #22
 800d9dc:	d857      	bhi.n	800da8e <_dtoa_r+0x246>
 800d9de:	4b5b      	ldr	r3, [pc, #364]	; (800db4c <_dtoa_r+0x304>)
 800d9e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	ec51 0b18 	vmov	r0, r1, d8
 800d9ec:	f7f3 f896 	bl	8000b1c <__aeabi_dcmplt>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d04e      	beq.n	800da92 <_dtoa_r+0x24a>
 800d9f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	930c      	str	r3, [sp, #48]	; 0x30
 800d9fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9fe:	1b5b      	subs	r3, r3, r5
 800da00:	1e5a      	subs	r2, r3, #1
 800da02:	bf45      	ittet	mi
 800da04:	f1c3 0301 	rsbmi	r3, r3, #1
 800da08:	9305      	strmi	r3, [sp, #20]
 800da0a:	2300      	movpl	r3, #0
 800da0c:	2300      	movmi	r3, #0
 800da0e:	9206      	str	r2, [sp, #24]
 800da10:	bf54      	ite	pl
 800da12:	9305      	strpl	r3, [sp, #20]
 800da14:	9306      	strmi	r3, [sp, #24]
 800da16:	f1bb 0f00 	cmp.w	fp, #0
 800da1a:	db3c      	blt.n	800da96 <_dtoa_r+0x24e>
 800da1c:	9b06      	ldr	r3, [sp, #24]
 800da1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800da22:	445b      	add	r3, fp
 800da24:	9306      	str	r3, [sp, #24]
 800da26:	2300      	movs	r3, #0
 800da28:	9308      	str	r3, [sp, #32]
 800da2a:	9b07      	ldr	r3, [sp, #28]
 800da2c:	2b09      	cmp	r3, #9
 800da2e:	d868      	bhi.n	800db02 <_dtoa_r+0x2ba>
 800da30:	2b05      	cmp	r3, #5
 800da32:	bfc4      	itt	gt
 800da34:	3b04      	subgt	r3, #4
 800da36:	9307      	strgt	r3, [sp, #28]
 800da38:	9b07      	ldr	r3, [sp, #28]
 800da3a:	f1a3 0302 	sub.w	r3, r3, #2
 800da3e:	bfcc      	ite	gt
 800da40:	2500      	movgt	r5, #0
 800da42:	2501      	movle	r5, #1
 800da44:	2b03      	cmp	r3, #3
 800da46:	f200 8085 	bhi.w	800db54 <_dtoa_r+0x30c>
 800da4a:	e8df f003 	tbb	[pc, r3]
 800da4e:	3b2e      	.short	0x3b2e
 800da50:	5839      	.short	0x5839
 800da52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800da56:	441d      	add	r5, r3
 800da58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da5c:	2b20      	cmp	r3, #32
 800da5e:	bfc1      	itttt	gt
 800da60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da64:	fa08 f803 	lslgt.w	r8, r8, r3
 800da68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800da6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800da70:	bfd6      	itet	le
 800da72:	f1c3 0320 	rsble	r3, r3, #32
 800da76:	ea48 0003 	orrgt.w	r0, r8, r3
 800da7a:	fa06 f003 	lslle.w	r0, r6, r3
 800da7e:	f7f2 fd61 	bl	8000544 <__aeabi_ui2d>
 800da82:	2201      	movs	r2, #1
 800da84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800da88:	3d01      	subs	r5, #1
 800da8a:	920e      	str	r2, [sp, #56]	; 0x38
 800da8c:	e76f      	b.n	800d96e <_dtoa_r+0x126>
 800da8e:	2301      	movs	r3, #1
 800da90:	e7b3      	b.n	800d9fa <_dtoa_r+0x1b2>
 800da92:	900c      	str	r0, [sp, #48]	; 0x30
 800da94:	e7b2      	b.n	800d9fc <_dtoa_r+0x1b4>
 800da96:	9b05      	ldr	r3, [sp, #20]
 800da98:	eba3 030b 	sub.w	r3, r3, fp
 800da9c:	9305      	str	r3, [sp, #20]
 800da9e:	f1cb 0300 	rsb	r3, fp, #0
 800daa2:	9308      	str	r3, [sp, #32]
 800daa4:	2300      	movs	r3, #0
 800daa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800daa8:	e7bf      	b.n	800da2a <_dtoa_r+0x1e2>
 800daaa:	2300      	movs	r3, #0
 800daac:	9309      	str	r3, [sp, #36]	; 0x24
 800daae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	dc52      	bgt.n	800db5a <_dtoa_r+0x312>
 800dab4:	2301      	movs	r3, #1
 800dab6:	9301      	str	r3, [sp, #4]
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	461a      	mov	r2, r3
 800dabc:	920a      	str	r2, [sp, #40]	; 0x28
 800dabe:	e00b      	b.n	800dad8 <_dtoa_r+0x290>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e7f3      	b.n	800daac <_dtoa_r+0x264>
 800dac4:	2300      	movs	r3, #0
 800dac6:	9309      	str	r3, [sp, #36]	; 0x24
 800dac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daca:	445b      	add	r3, fp
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	3301      	adds	r3, #1
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	bfb8      	it	lt
 800dad6:	2301      	movlt	r3, #1
 800dad8:	69e0      	ldr	r0, [r4, #28]
 800dada:	2100      	movs	r1, #0
 800dadc:	2204      	movs	r2, #4
 800dade:	f102 0614 	add.w	r6, r2, #20
 800dae2:	429e      	cmp	r6, r3
 800dae4:	d93d      	bls.n	800db62 <_dtoa_r+0x31a>
 800dae6:	6041      	str	r1, [r0, #4]
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fd9f 	bl	800e62c <_Balloc>
 800daee:	9000      	str	r0, [sp, #0]
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d139      	bne.n	800db68 <_dtoa_r+0x320>
 800daf4:	4b16      	ldr	r3, [pc, #88]	; (800db50 <_dtoa_r+0x308>)
 800daf6:	4602      	mov	r2, r0
 800daf8:	f240 11af 	movw	r1, #431	; 0x1af
 800dafc:	e6bd      	b.n	800d87a <_dtoa_r+0x32>
 800dafe:	2301      	movs	r3, #1
 800db00:	e7e1      	b.n	800dac6 <_dtoa_r+0x27e>
 800db02:	2501      	movs	r5, #1
 800db04:	2300      	movs	r3, #0
 800db06:	9307      	str	r3, [sp, #28]
 800db08:	9509      	str	r5, [sp, #36]	; 0x24
 800db0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	9304      	str	r3, [sp, #16]
 800db12:	2200      	movs	r2, #0
 800db14:	2312      	movs	r3, #18
 800db16:	e7d1      	b.n	800dabc <_dtoa_r+0x274>
 800db18:	636f4361 	.word	0x636f4361
 800db1c:	3fd287a7 	.word	0x3fd287a7
 800db20:	8b60c8b3 	.word	0x8b60c8b3
 800db24:	3fc68a28 	.word	0x3fc68a28
 800db28:	509f79fb 	.word	0x509f79fb
 800db2c:	3fd34413 	.word	0x3fd34413
 800db30:	08010dd5 	.word	0x08010dd5
 800db34:	08010dec 	.word	0x08010dec
 800db38:	7ff00000 	.word	0x7ff00000
 800db3c:	08010dd1 	.word	0x08010dd1
 800db40:	08010dc8 	.word	0x08010dc8
 800db44:	08010da5 	.word	0x08010da5
 800db48:	3ff80000 	.word	0x3ff80000
 800db4c:	08010ed8 	.word	0x08010ed8
 800db50:	08010e44 	.word	0x08010e44
 800db54:	2301      	movs	r3, #1
 800db56:	9309      	str	r3, [sp, #36]	; 0x24
 800db58:	e7d7      	b.n	800db0a <_dtoa_r+0x2c2>
 800db5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	e7ba      	b.n	800dad8 <_dtoa_r+0x290>
 800db62:	3101      	adds	r1, #1
 800db64:	0052      	lsls	r2, r2, #1
 800db66:	e7ba      	b.n	800dade <_dtoa_r+0x296>
 800db68:	69e3      	ldr	r3, [r4, #28]
 800db6a:	9a00      	ldr	r2, [sp, #0]
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	2b0e      	cmp	r3, #14
 800db72:	f200 80a8 	bhi.w	800dcc6 <_dtoa_r+0x47e>
 800db76:	2d00      	cmp	r5, #0
 800db78:	f000 80a5 	beq.w	800dcc6 <_dtoa_r+0x47e>
 800db7c:	f1bb 0f00 	cmp.w	fp, #0
 800db80:	dd38      	ble.n	800dbf4 <_dtoa_r+0x3ac>
 800db82:	4bc0      	ldr	r3, [pc, #768]	; (800de84 <_dtoa_r+0x63c>)
 800db84:	f00b 020f 	and.w	r2, fp, #15
 800db88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800db90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800db94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800db98:	d019      	beq.n	800dbce <_dtoa_r+0x386>
 800db9a:	4bbb      	ldr	r3, [pc, #748]	; (800de88 <_dtoa_r+0x640>)
 800db9c:	ec51 0b18 	vmov	r0, r1, d8
 800dba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dba4:	f7f2 fe72 	bl	800088c <__aeabi_ddiv>
 800dba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbac:	f008 080f 	and.w	r8, r8, #15
 800dbb0:	2503      	movs	r5, #3
 800dbb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800de88 <_dtoa_r+0x640>
 800dbb6:	f1b8 0f00 	cmp.w	r8, #0
 800dbba:	d10a      	bne.n	800dbd2 <_dtoa_r+0x38a>
 800dbbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	463b      	mov	r3, r7
 800dbc4:	f7f2 fe62 	bl	800088c <__aeabi_ddiv>
 800dbc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbcc:	e02b      	b.n	800dc26 <_dtoa_r+0x3de>
 800dbce:	2502      	movs	r5, #2
 800dbd0:	e7ef      	b.n	800dbb2 <_dtoa_r+0x36a>
 800dbd2:	f018 0f01 	tst.w	r8, #1
 800dbd6:	d008      	beq.n	800dbea <_dtoa_r+0x3a2>
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4639      	mov	r1, r7
 800dbdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dbe0:	f7f2 fd2a 	bl	8000638 <__aeabi_dmul>
 800dbe4:	3501      	adds	r5, #1
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460f      	mov	r7, r1
 800dbea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dbee:	f109 0908 	add.w	r9, r9, #8
 800dbf2:	e7e0      	b.n	800dbb6 <_dtoa_r+0x36e>
 800dbf4:	f000 809f 	beq.w	800dd36 <_dtoa_r+0x4ee>
 800dbf8:	f1cb 0600 	rsb	r6, fp, #0
 800dbfc:	4ba1      	ldr	r3, [pc, #644]	; (800de84 <_dtoa_r+0x63c>)
 800dbfe:	4fa2      	ldr	r7, [pc, #648]	; (800de88 <_dtoa_r+0x640>)
 800dc00:	f006 020f 	and.w	r2, r6, #15
 800dc04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0c:	ec51 0b18 	vmov	r0, r1, d8
 800dc10:	f7f2 fd12 	bl	8000638 <__aeabi_dmul>
 800dc14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc18:	1136      	asrs	r6, r6, #4
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	2502      	movs	r5, #2
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d17e      	bne.n	800dd20 <_dtoa_r+0x4d8>
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1d0      	bne.n	800dbc8 <_dtoa_r+0x380>
 800dc26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 8084 	beq.w	800dd3a <_dtoa_r+0x4f2>
 800dc32:	4b96      	ldr	r3, [pc, #600]	; (800de8c <_dtoa_r+0x644>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	4640      	mov	r0, r8
 800dc38:	4649      	mov	r1, r9
 800dc3a:	f7f2 ff6f 	bl	8000b1c <__aeabi_dcmplt>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d07b      	beq.n	800dd3a <_dtoa_r+0x4f2>
 800dc42:	9b04      	ldr	r3, [sp, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d078      	beq.n	800dd3a <_dtoa_r+0x4f2>
 800dc48:	9b01      	ldr	r3, [sp, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dd39      	ble.n	800dcc2 <_dtoa_r+0x47a>
 800dc4e:	4b90      	ldr	r3, [pc, #576]	; (800de90 <_dtoa_r+0x648>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	4640      	mov	r0, r8
 800dc54:	4649      	mov	r1, r9
 800dc56:	f7f2 fcef 	bl	8000638 <__aeabi_dmul>
 800dc5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc5e:	9e01      	ldr	r6, [sp, #4]
 800dc60:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800dc64:	3501      	adds	r5, #1
 800dc66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f7f2 fc7a 	bl	8000564 <__aeabi_i2d>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	f7f2 fce0 	bl	8000638 <__aeabi_dmul>
 800dc78:	4b86      	ldr	r3, [pc, #536]	; (800de94 <_dtoa_r+0x64c>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f7f2 fb26 	bl	80002cc <__adddf3>
 800dc80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc88:	9303      	str	r3, [sp, #12]
 800dc8a:	2e00      	cmp	r6, #0
 800dc8c:	d158      	bne.n	800dd40 <_dtoa_r+0x4f8>
 800dc8e:	4b82      	ldr	r3, [pc, #520]	; (800de98 <_dtoa_r+0x650>)
 800dc90:	2200      	movs	r2, #0
 800dc92:	4640      	mov	r0, r8
 800dc94:	4649      	mov	r1, r9
 800dc96:	f7f2 fb17 	bl	80002c8 <__aeabi_dsub>
 800dc9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc9e:	4680      	mov	r8, r0
 800dca0:	4689      	mov	r9, r1
 800dca2:	f7f2 ff59 	bl	8000b58 <__aeabi_dcmpgt>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	f040 8296 	bne.w	800e1d8 <_dtoa_r+0x990>
 800dcac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	f7f2 ff30 	bl	8000b1c <__aeabi_dcmplt>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	f040 8289 	bne.w	800e1d4 <_dtoa_r+0x98c>
 800dcc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dcc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f2c0 814e 	blt.w	800df6a <_dtoa_r+0x722>
 800dcce:	f1bb 0f0e 	cmp.w	fp, #14
 800dcd2:	f300 814a 	bgt.w	800df6a <_dtoa_r+0x722>
 800dcd6:	4b6b      	ldr	r3, [pc, #428]	; (800de84 <_dtoa_r+0x63c>)
 800dcd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dcdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f280 80dc 	bge.w	800dea0 <_dtoa_r+0x658>
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f300 80d8 	bgt.w	800dea0 <_dtoa_r+0x658>
 800dcf0:	f040 826f 	bne.w	800e1d2 <_dtoa_r+0x98a>
 800dcf4:	4b68      	ldr	r3, [pc, #416]	; (800de98 <_dtoa_r+0x650>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 fc9c 	bl	8000638 <__aeabi_dmul>
 800dd00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd04:	f7f2 ff1e 	bl	8000b44 <__aeabi_dcmpge>
 800dd08:	9e04      	ldr	r6, [sp, #16]
 800dd0a:	4637      	mov	r7, r6
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f040 8245 	bne.w	800e19c <_dtoa_r+0x954>
 800dd12:	9d00      	ldr	r5, [sp, #0]
 800dd14:	2331      	movs	r3, #49	; 0x31
 800dd16:	f805 3b01 	strb.w	r3, [r5], #1
 800dd1a:	f10b 0b01 	add.w	fp, fp, #1
 800dd1e:	e241      	b.n	800e1a4 <_dtoa_r+0x95c>
 800dd20:	07f2      	lsls	r2, r6, #31
 800dd22:	d505      	bpl.n	800dd30 <_dtoa_r+0x4e8>
 800dd24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd28:	f7f2 fc86 	bl	8000638 <__aeabi_dmul>
 800dd2c:	3501      	adds	r5, #1
 800dd2e:	2301      	movs	r3, #1
 800dd30:	1076      	asrs	r6, r6, #1
 800dd32:	3708      	adds	r7, #8
 800dd34:	e773      	b.n	800dc1e <_dtoa_r+0x3d6>
 800dd36:	2502      	movs	r5, #2
 800dd38:	e775      	b.n	800dc26 <_dtoa_r+0x3de>
 800dd3a:	9e04      	ldr	r6, [sp, #16]
 800dd3c:	465f      	mov	r7, fp
 800dd3e:	e792      	b.n	800dc66 <_dtoa_r+0x41e>
 800dd40:	9900      	ldr	r1, [sp, #0]
 800dd42:	4b50      	ldr	r3, [pc, #320]	; (800de84 <_dtoa_r+0x63c>)
 800dd44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd48:	4431      	add	r1, r6
 800dd4a:	9102      	str	r1, [sp, #8]
 800dd4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd4e:	eeb0 9a47 	vmov.f32	s18, s14
 800dd52:	eef0 9a67 	vmov.f32	s19, s15
 800dd56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	d044      	beq.n	800ddec <_dtoa_r+0x5a4>
 800dd62:	494e      	ldr	r1, [pc, #312]	; (800de9c <_dtoa_r+0x654>)
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7f2 fd91 	bl	800088c <__aeabi_ddiv>
 800dd6a:	ec53 2b19 	vmov	r2, r3, d9
 800dd6e:	f7f2 faab 	bl	80002c8 <__aeabi_dsub>
 800dd72:	9d00      	ldr	r5, [sp, #0]
 800dd74:	ec41 0b19 	vmov	d9, r0, r1
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	f7f2 ff0c 	bl	8000b98 <__aeabi_d2iz>
 800dd80:	4606      	mov	r6, r0
 800dd82:	f7f2 fbef 	bl	8000564 <__aeabi_i2d>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	4649      	mov	r1, r9
 800dd8e:	f7f2 fa9b 	bl	80002c8 <__aeabi_dsub>
 800dd92:	3630      	adds	r6, #48	; 0x30
 800dd94:	f805 6b01 	strb.w	r6, [r5], #1
 800dd98:	ec53 2b19 	vmov	r2, r3, d9
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4689      	mov	r9, r1
 800dda0:	f7f2 febc 	bl	8000b1c <__aeabi_dcmplt>
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d164      	bne.n	800de72 <_dtoa_r+0x62a>
 800dda8:	4642      	mov	r2, r8
 800ddaa:	464b      	mov	r3, r9
 800ddac:	4937      	ldr	r1, [pc, #220]	; (800de8c <_dtoa_r+0x644>)
 800ddae:	2000      	movs	r0, #0
 800ddb0:	f7f2 fa8a 	bl	80002c8 <__aeabi_dsub>
 800ddb4:	ec53 2b19 	vmov	r2, r3, d9
 800ddb8:	f7f2 feb0 	bl	8000b1c <__aeabi_dcmplt>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f040 80b6 	bne.w	800df2e <_dtoa_r+0x6e6>
 800ddc2:	9b02      	ldr	r3, [sp, #8]
 800ddc4:	429d      	cmp	r5, r3
 800ddc6:	f43f af7c 	beq.w	800dcc2 <_dtoa_r+0x47a>
 800ddca:	4b31      	ldr	r3, [pc, #196]	; (800de90 <_dtoa_r+0x648>)
 800ddcc:	ec51 0b19 	vmov	r0, r1, d9
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f7f2 fc31 	bl	8000638 <__aeabi_dmul>
 800ddd6:	4b2e      	ldr	r3, [pc, #184]	; (800de90 <_dtoa_r+0x648>)
 800ddd8:	ec41 0b19 	vmov	d9, r0, r1
 800dddc:	2200      	movs	r2, #0
 800ddde:	4640      	mov	r0, r8
 800dde0:	4649      	mov	r1, r9
 800dde2:	f7f2 fc29 	bl	8000638 <__aeabi_dmul>
 800dde6:	4680      	mov	r8, r0
 800dde8:	4689      	mov	r9, r1
 800ddea:	e7c5      	b.n	800dd78 <_dtoa_r+0x530>
 800ddec:	ec51 0b17 	vmov	r0, r1, d7
 800ddf0:	f7f2 fc22 	bl	8000638 <__aeabi_dmul>
 800ddf4:	9b02      	ldr	r3, [sp, #8]
 800ddf6:	9d00      	ldr	r5, [sp, #0]
 800ddf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddfa:	ec41 0b19 	vmov	d9, r0, r1
 800ddfe:	4649      	mov	r1, r9
 800de00:	4640      	mov	r0, r8
 800de02:	f7f2 fec9 	bl	8000b98 <__aeabi_d2iz>
 800de06:	4606      	mov	r6, r0
 800de08:	f7f2 fbac 	bl	8000564 <__aeabi_i2d>
 800de0c:	3630      	adds	r6, #48	; 0x30
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	4640      	mov	r0, r8
 800de14:	4649      	mov	r1, r9
 800de16:	f7f2 fa57 	bl	80002c8 <__aeabi_dsub>
 800de1a:	f805 6b01 	strb.w	r6, [r5], #1
 800de1e:	9b02      	ldr	r3, [sp, #8]
 800de20:	429d      	cmp	r5, r3
 800de22:	4680      	mov	r8, r0
 800de24:	4689      	mov	r9, r1
 800de26:	f04f 0200 	mov.w	r2, #0
 800de2a:	d124      	bne.n	800de76 <_dtoa_r+0x62e>
 800de2c:	4b1b      	ldr	r3, [pc, #108]	; (800de9c <_dtoa_r+0x654>)
 800de2e:	ec51 0b19 	vmov	r0, r1, d9
 800de32:	f7f2 fa4b 	bl	80002cc <__adddf3>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	f7f2 fe8b 	bl	8000b58 <__aeabi_dcmpgt>
 800de42:	2800      	cmp	r0, #0
 800de44:	d173      	bne.n	800df2e <_dtoa_r+0x6e6>
 800de46:	ec53 2b19 	vmov	r2, r3, d9
 800de4a:	4914      	ldr	r1, [pc, #80]	; (800de9c <_dtoa_r+0x654>)
 800de4c:	2000      	movs	r0, #0
 800de4e:	f7f2 fa3b 	bl	80002c8 <__aeabi_dsub>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4640      	mov	r0, r8
 800de58:	4649      	mov	r1, r9
 800de5a:	f7f2 fe5f 	bl	8000b1c <__aeabi_dcmplt>
 800de5e:	2800      	cmp	r0, #0
 800de60:	f43f af2f 	beq.w	800dcc2 <_dtoa_r+0x47a>
 800de64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800de66:	1e6b      	subs	r3, r5, #1
 800de68:	930f      	str	r3, [sp, #60]	; 0x3c
 800de6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de6e:	2b30      	cmp	r3, #48	; 0x30
 800de70:	d0f8      	beq.n	800de64 <_dtoa_r+0x61c>
 800de72:	46bb      	mov	fp, r7
 800de74:	e04a      	b.n	800df0c <_dtoa_r+0x6c4>
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <_dtoa_r+0x648>)
 800de78:	f7f2 fbde 	bl	8000638 <__aeabi_dmul>
 800de7c:	4680      	mov	r8, r0
 800de7e:	4689      	mov	r9, r1
 800de80:	e7bd      	b.n	800ddfe <_dtoa_r+0x5b6>
 800de82:	bf00      	nop
 800de84:	08010ed8 	.word	0x08010ed8
 800de88:	08010eb0 	.word	0x08010eb0
 800de8c:	3ff00000 	.word	0x3ff00000
 800de90:	40240000 	.word	0x40240000
 800de94:	401c0000 	.word	0x401c0000
 800de98:	40140000 	.word	0x40140000
 800de9c:	3fe00000 	.word	0x3fe00000
 800dea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dea4:	9d00      	ldr	r5, [sp, #0]
 800dea6:	4642      	mov	r2, r8
 800dea8:	464b      	mov	r3, r9
 800deaa:	4630      	mov	r0, r6
 800deac:	4639      	mov	r1, r7
 800deae:	f7f2 fced 	bl	800088c <__aeabi_ddiv>
 800deb2:	f7f2 fe71 	bl	8000b98 <__aeabi_d2iz>
 800deb6:	9001      	str	r0, [sp, #4]
 800deb8:	f7f2 fb54 	bl	8000564 <__aeabi_i2d>
 800debc:	4642      	mov	r2, r8
 800debe:	464b      	mov	r3, r9
 800dec0:	f7f2 fbba 	bl	8000638 <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4630      	mov	r0, r6
 800deca:	4639      	mov	r1, r7
 800decc:	f7f2 f9fc 	bl	80002c8 <__aeabi_dsub>
 800ded0:	9e01      	ldr	r6, [sp, #4]
 800ded2:	9f04      	ldr	r7, [sp, #16]
 800ded4:	3630      	adds	r6, #48	; 0x30
 800ded6:	f805 6b01 	strb.w	r6, [r5], #1
 800deda:	9e00      	ldr	r6, [sp, #0]
 800dedc:	1bae      	subs	r6, r5, r6
 800dede:	42b7      	cmp	r7, r6
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	d134      	bne.n	800df50 <_dtoa_r+0x708>
 800dee6:	f7f2 f9f1 	bl	80002cc <__adddf3>
 800deea:	4642      	mov	r2, r8
 800deec:	464b      	mov	r3, r9
 800deee:	4606      	mov	r6, r0
 800def0:	460f      	mov	r7, r1
 800def2:	f7f2 fe31 	bl	8000b58 <__aeabi_dcmpgt>
 800def6:	b9c8      	cbnz	r0, 800df2c <_dtoa_r+0x6e4>
 800def8:	4642      	mov	r2, r8
 800defa:	464b      	mov	r3, r9
 800defc:	4630      	mov	r0, r6
 800defe:	4639      	mov	r1, r7
 800df00:	f7f2 fe02 	bl	8000b08 <__aeabi_dcmpeq>
 800df04:	b110      	cbz	r0, 800df0c <_dtoa_r+0x6c4>
 800df06:	9b01      	ldr	r3, [sp, #4]
 800df08:	07db      	lsls	r3, r3, #31
 800df0a:	d40f      	bmi.n	800df2c <_dtoa_r+0x6e4>
 800df0c:	4651      	mov	r1, sl
 800df0e:	4620      	mov	r0, r4
 800df10:	f000 fbcc 	bl	800e6ac <_Bfree>
 800df14:	2300      	movs	r3, #0
 800df16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df18:	702b      	strb	r3, [r5, #0]
 800df1a:	f10b 0301 	add.w	r3, fp, #1
 800df1e:	6013      	str	r3, [r2, #0]
 800df20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df22:	2b00      	cmp	r3, #0
 800df24:	f43f ace2 	beq.w	800d8ec <_dtoa_r+0xa4>
 800df28:	601d      	str	r5, [r3, #0]
 800df2a:	e4df      	b.n	800d8ec <_dtoa_r+0xa4>
 800df2c:	465f      	mov	r7, fp
 800df2e:	462b      	mov	r3, r5
 800df30:	461d      	mov	r5, r3
 800df32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df36:	2a39      	cmp	r2, #57	; 0x39
 800df38:	d106      	bne.n	800df48 <_dtoa_r+0x700>
 800df3a:	9a00      	ldr	r2, [sp, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d1f7      	bne.n	800df30 <_dtoa_r+0x6e8>
 800df40:	9900      	ldr	r1, [sp, #0]
 800df42:	2230      	movs	r2, #48	; 0x30
 800df44:	3701      	adds	r7, #1
 800df46:	700a      	strb	r2, [r1, #0]
 800df48:	781a      	ldrb	r2, [r3, #0]
 800df4a:	3201      	adds	r2, #1
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	e790      	b.n	800de72 <_dtoa_r+0x62a>
 800df50:	4ba3      	ldr	r3, [pc, #652]	; (800e1e0 <_dtoa_r+0x998>)
 800df52:	2200      	movs	r2, #0
 800df54:	f7f2 fb70 	bl	8000638 <__aeabi_dmul>
 800df58:	2200      	movs	r2, #0
 800df5a:	2300      	movs	r3, #0
 800df5c:	4606      	mov	r6, r0
 800df5e:	460f      	mov	r7, r1
 800df60:	f7f2 fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 800df64:	2800      	cmp	r0, #0
 800df66:	d09e      	beq.n	800dea6 <_dtoa_r+0x65e>
 800df68:	e7d0      	b.n	800df0c <_dtoa_r+0x6c4>
 800df6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df6c:	2a00      	cmp	r2, #0
 800df6e:	f000 80ca 	beq.w	800e106 <_dtoa_r+0x8be>
 800df72:	9a07      	ldr	r2, [sp, #28]
 800df74:	2a01      	cmp	r2, #1
 800df76:	f300 80ad 	bgt.w	800e0d4 <_dtoa_r+0x88c>
 800df7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	f000 80a5 	beq.w	800e0cc <_dtoa_r+0x884>
 800df82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df86:	9e08      	ldr	r6, [sp, #32]
 800df88:	9d05      	ldr	r5, [sp, #20]
 800df8a:	9a05      	ldr	r2, [sp, #20]
 800df8c:	441a      	add	r2, r3
 800df8e:	9205      	str	r2, [sp, #20]
 800df90:	9a06      	ldr	r2, [sp, #24]
 800df92:	2101      	movs	r1, #1
 800df94:	441a      	add	r2, r3
 800df96:	4620      	mov	r0, r4
 800df98:	9206      	str	r2, [sp, #24]
 800df9a:	f000 fc3d 	bl	800e818 <__i2b>
 800df9e:	4607      	mov	r7, r0
 800dfa0:	b165      	cbz	r5, 800dfbc <_dtoa_r+0x774>
 800dfa2:	9b06      	ldr	r3, [sp, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dd09      	ble.n	800dfbc <_dtoa_r+0x774>
 800dfa8:	42ab      	cmp	r3, r5
 800dfaa:	9a05      	ldr	r2, [sp, #20]
 800dfac:	bfa8      	it	ge
 800dfae:	462b      	movge	r3, r5
 800dfb0:	1ad2      	subs	r2, r2, r3
 800dfb2:	9205      	str	r2, [sp, #20]
 800dfb4:	9a06      	ldr	r2, [sp, #24]
 800dfb6:	1aed      	subs	r5, r5, r3
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	9306      	str	r3, [sp, #24]
 800dfbc:	9b08      	ldr	r3, [sp, #32]
 800dfbe:	b1f3      	cbz	r3, 800dffe <_dtoa_r+0x7b6>
 800dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 80a3 	beq.w	800e10e <_dtoa_r+0x8c6>
 800dfc8:	2e00      	cmp	r6, #0
 800dfca:	dd10      	ble.n	800dfee <_dtoa_r+0x7a6>
 800dfcc:	4639      	mov	r1, r7
 800dfce:	4632      	mov	r2, r6
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 fce1 	bl	800e998 <__pow5mult>
 800dfd6:	4652      	mov	r2, sl
 800dfd8:	4601      	mov	r1, r0
 800dfda:	4607      	mov	r7, r0
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 fc31 	bl	800e844 <__multiply>
 800dfe2:	4651      	mov	r1, sl
 800dfe4:	4680      	mov	r8, r0
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f000 fb60 	bl	800e6ac <_Bfree>
 800dfec:	46c2      	mov	sl, r8
 800dfee:	9b08      	ldr	r3, [sp, #32]
 800dff0:	1b9a      	subs	r2, r3, r6
 800dff2:	d004      	beq.n	800dffe <_dtoa_r+0x7b6>
 800dff4:	4651      	mov	r1, sl
 800dff6:	4620      	mov	r0, r4
 800dff8:	f000 fcce 	bl	800e998 <__pow5mult>
 800dffc:	4682      	mov	sl, r0
 800dffe:	2101      	movs	r1, #1
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fc09 	bl	800e818 <__i2b>
 800e006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e008:	2b00      	cmp	r3, #0
 800e00a:	4606      	mov	r6, r0
 800e00c:	f340 8081 	ble.w	800e112 <_dtoa_r+0x8ca>
 800e010:	461a      	mov	r2, r3
 800e012:	4601      	mov	r1, r0
 800e014:	4620      	mov	r0, r4
 800e016:	f000 fcbf 	bl	800e998 <__pow5mult>
 800e01a:	9b07      	ldr	r3, [sp, #28]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	4606      	mov	r6, r0
 800e020:	dd7a      	ble.n	800e118 <_dtoa_r+0x8d0>
 800e022:	f04f 0800 	mov.w	r8, #0
 800e026:	6933      	ldr	r3, [r6, #16]
 800e028:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e02c:	6918      	ldr	r0, [r3, #16]
 800e02e:	f000 fba5 	bl	800e77c <__hi0bits>
 800e032:	f1c0 0020 	rsb	r0, r0, #32
 800e036:	9b06      	ldr	r3, [sp, #24]
 800e038:	4418      	add	r0, r3
 800e03a:	f010 001f 	ands.w	r0, r0, #31
 800e03e:	f000 8094 	beq.w	800e16a <_dtoa_r+0x922>
 800e042:	f1c0 0320 	rsb	r3, r0, #32
 800e046:	2b04      	cmp	r3, #4
 800e048:	f340 8085 	ble.w	800e156 <_dtoa_r+0x90e>
 800e04c:	9b05      	ldr	r3, [sp, #20]
 800e04e:	f1c0 001c 	rsb	r0, r0, #28
 800e052:	4403      	add	r3, r0
 800e054:	9305      	str	r3, [sp, #20]
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	4403      	add	r3, r0
 800e05a:	4405      	add	r5, r0
 800e05c:	9306      	str	r3, [sp, #24]
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	2b00      	cmp	r3, #0
 800e062:	dd05      	ble.n	800e070 <_dtoa_r+0x828>
 800e064:	4651      	mov	r1, sl
 800e066:	461a      	mov	r2, r3
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fcef 	bl	800ea4c <__lshift>
 800e06e:	4682      	mov	sl, r0
 800e070:	9b06      	ldr	r3, [sp, #24]
 800e072:	2b00      	cmp	r3, #0
 800e074:	dd05      	ble.n	800e082 <_dtoa_r+0x83a>
 800e076:	4631      	mov	r1, r6
 800e078:	461a      	mov	r2, r3
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 fce6 	bl	800ea4c <__lshift>
 800e080:	4606      	mov	r6, r0
 800e082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e084:	2b00      	cmp	r3, #0
 800e086:	d072      	beq.n	800e16e <_dtoa_r+0x926>
 800e088:	4631      	mov	r1, r6
 800e08a:	4650      	mov	r0, sl
 800e08c:	f000 fd4a 	bl	800eb24 <__mcmp>
 800e090:	2800      	cmp	r0, #0
 800e092:	da6c      	bge.n	800e16e <_dtoa_r+0x926>
 800e094:	2300      	movs	r3, #0
 800e096:	4651      	mov	r1, sl
 800e098:	220a      	movs	r2, #10
 800e09a:	4620      	mov	r0, r4
 800e09c:	f000 fb28 	bl	800e6f0 <__multadd>
 800e0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f000 81b0 	beq.w	800e40e <_dtoa_r+0xbc6>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	220a      	movs	r2, #10
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fb1b 	bl	800e6f0 <__multadd>
 800e0ba:	9b01      	ldr	r3, [sp, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	4607      	mov	r7, r0
 800e0c0:	f300 8096 	bgt.w	800e1f0 <_dtoa_r+0x9a8>
 800e0c4:	9b07      	ldr	r3, [sp, #28]
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	dc59      	bgt.n	800e17e <_dtoa_r+0x936>
 800e0ca:	e091      	b.n	800e1f0 <_dtoa_r+0x9a8>
 800e0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e0d2:	e758      	b.n	800df86 <_dtoa_r+0x73e>
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	1e5e      	subs	r6, r3, #1
 800e0d8:	9b08      	ldr	r3, [sp, #32]
 800e0da:	42b3      	cmp	r3, r6
 800e0dc:	bfbf      	itttt	lt
 800e0de:	9b08      	ldrlt	r3, [sp, #32]
 800e0e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e0e2:	9608      	strlt	r6, [sp, #32]
 800e0e4:	1af3      	sublt	r3, r6, r3
 800e0e6:	bfb4      	ite	lt
 800e0e8:	18d2      	addlt	r2, r2, r3
 800e0ea:	1b9e      	subge	r6, r3, r6
 800e0ec:	9b04      	ldr	r3, [sp, #16]
 800e0ee:	bfbc      	itt	lt
 800e0f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e0f2:	2600      	movlt	r6, #0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	bfb7      	itett	lt
 800e0f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e0fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e100:	1a9d      	sublt	r5, r3, r2
 800e102:	2300      	movlt	r3, #0
 800e104:	e741      	b.n	800df8a <_dtoa_r+0x742>
 800e106:	9e08      	ldr	r6, [sp, #32]
 800e108:	9d05      	ldr	r5, [sp, #20]
 800e10a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e10c:	e748      	b.n	800dfa0 <_dtoa_r+0x758>
 800e10e:	9a08      	ldr	r2, [sp, #32]
 800e110:	e770      	b.n	800dff4 <_dtoa_r+0x7ac>
 800e112:	9b07      	ldr	r3, [sp, #28]
 800e114:	2b01      	cmp	r3, #1
 800e116:	dc19      	bgt.n	800e14c <_dtoa_r+0x904>
 800e118:	9b02      	ldr	r3, [sp, #8]
 800e11a:	b9bb      	cbnz	r3, 800e14c <_dtoa_r+0x904>
 800e11c:	9b03      	ldr	r3, [sp, #12]
 800e11e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e122:	b99b      	cbnz	r3, 800e14c <_dtoa_r+0x904>
 800e124:	9b03      	ldr	r3, [sp, #12]
 800e126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e12a:	0d1b      	lsrs	r3, r3, #20
 800e12c:	051b      	lsls	r3, r3, #20
 800e12e:	b183      	cbz	r3, 800e152 <_dtoa_r+0x90a>
 800e130:	9b05      	ldr	r3, [sp, #20]
 800e132:	3301      	adds	r3, #1
 800e134:	9305      	str	r3, [sp, #20]
 800e136:	9b06      	ldr	r3, [sp, #24]
 800e138:	3301      	adds	r3, #1
 800e13a:	9306      	str	r3, [sp, #24]
 800e13c:	f04f 0801 	mov.w	r8, #1
 800e140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e142:	2b00      	cmp	r3, #0
 800e144:	f47f af6f 	bne.w	800e026 <_dtoa_r+0x7de>
 800e148:	2001      	movs	r0, #1
 800e14a:	e774      	b.n	800e036 <_dtoa_r+0x7ee>
 800e14c:	f04f 0800 	mov.w	r8, #0
 800e150:	e7f6      	b.n	800e140 <_dtoa_r+0x8f8>
 800e152:	4698      	mov	r8, r3
 800e154:	e7f4      	b.n	800e140 <_dtoa_r+0x8f8>
 800e156:	d082      	beq.n	800e05e <_dtoa_r+0x816>
 800e158:	9a05      	ldr	r2, [sp, #20]
 800e15a:	331c      	adds	r3, #28
 800e15c:	441a      	add	r2, r3
 800e15e:	9205      	str	r2, [sp, #20]
 800e160:	9a06      	ldr	r2, [sp, #24]
 800e162:	441a      	add	r2, r3
 800e164:	441d      	add	r5, r3
 800e166:	9206      	str	r2, [sp, #24]
 800e168:	e779      	b.n	800e05e <_dtoa_r+0x816>
 800e16a:	4603      	mov	r3, r0
 800e16c:	e7f4      	b.n	800e158 <_dtoa_r+0x910>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	dc37      	bgt.n	800e1e4 <_dtoa_r+0x99c>
 800e174:	9b07      	ldr	r3, [sp, #28]
 800e176:	2b02      	cmp	r3, #2
 800e178:	dd34      	ble.n	800e1e4 <_dtoa_r+0x99c>
 800e17a:	9b04      	ldr	r3, [sp, #16]
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	b963      	cbnz	r3, 800e19c <_dtoa_r+0x954>
 800e182:	4631      	mov	r1, r6
 800e184:	2205      	movs	r2, #5
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fab2 	bl	800e6f0 <__multadd>
 800e18c:	4601      	mov	r1, r0
 800e18e:	4606      	mov	r6, r0
 800e190:	4650      	mov	r0, sl
 800e192:	f000 fcc7 	bl	800eb24 <__mcmp>
 800e196:	2800      	cmp	r0, #0
 800e198:	f73f adbb 	bgt.w	800dd12 <_dtoa_r+0x4ca>
 800e19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19e:	9d00      	ldr	r5, [sp, #0]
 800e1a0:	ea6f 0b03 	mvn.w	fp, r3
 800e1a4:	f04f 0800 	mov.w	r8, #0
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fa7e 	bl	800e6ac <_Bfree>
 800e1b0:	2f00      	cmp	r7, #0
 800e1b2:	f43f aeab 	beq.w	800df0c <_dtoa_r+0x6c4>
 800e1b6:	f1b8 0f00 	cmp.w	r8, #0
 800e1ba:	d005      	beq.n	800e1c8 <_dtoa_r+0x980>
 800e1bc:	45b8      	cmp	r8, r7
 800e1be:	d003      	beq.n	800e1c8 <_dtoa_r+0x980>
 800e1c0:	4641      	mov	r1, r8
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fa72 	bl	800e6ac <_Bfree>
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f000 fa6e 	bl	800e6ac <_Bfree>
 800e1d0:	e69c      	b.n	800df0c <_dtoa_r+0x6c4>
 800e1d2:	2600      	movs	r6, #0
 800e1d4:	4637      	mov	r7, r6
 800e1d6:	e7e1      	b.n	800e19c <_dtoa_r+0x954>
 800e1d8:	46bb      	mov	fp, r7
 800e1da:	4637      	mov	r7, r6
 800e1dc:	e599      	b.n	800dd12 <_dtoa_r+0x4ca>
 800e1de:	bf00      	nop
 800e1e0:	40240000 	.word	0x40240000
 800e1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f000 80c8 	beq.w	800e37c <_dtoa_r+0xb34>
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	dd05      	ble.n	800e200 <_dtoa_r+0x9b8>
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	462a      	mov	r2, r5
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 fc27 	bl	800ea4c <__lshift>
 800e1fe:	4607      	mov	r7, r0
 800e200:	f1b8 0f00 	cmp.w	r8, #0
 800e204:	d05b      	beq.n	800e2be <_dtoa_r+0xa76>
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 fa0f 	bl	800e62c <_Balloc>
 800e20e:	4605      	mov	r5, r0
 800e210:	b928      	cbnz	r0, 800e21e <_dtoa_r+0x9d6>
 800e212:	4b83      	ldr	r3, [pc, #524]	; (800e420 <_dtoa_r+0xbd8>)
 800e214:	4602      	mov	r2, r0
 800e216:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e21a:	f7ff bb2e 	b.w	800d87a <_dtoa_r+0x32>
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	3202      	adds	r2, #2
 800e222:	0092      	lsls	r2, r2, #2
 800e224:	f107 010c 	add.w	r1, r7, #12
 800e228:	300c      	adds	r0, #12
 800e22a:	f7ff fa76 	bl	800d71a <memcpy>
 800e22e:	2201      	movs	r2, #1
 800e230:	4629      	mov	r1, r5
 800e232:	4620      	mov	r0, r4
 800e234:	f000 fc0a 	bl	800ea4c <__lshift>
 800e238:	9b00      	ldr	r3, [sp, #0]
 800e23a:	3301      	adds	r3, #1
 800e23c:	9304      	str	r3, [sp, #16]
 800e23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e242:	4413      	add	r3, r2
 800e244:	9308      	str	r3, [sp, #32]
 800e246:	9b02      	ldr	r3, [sp, #8]
 800e248:	f003 0301 	and.w	r3, r3, #1
 800e24c:	46b8      	mov	r8, r7
 800e24e:	9306      	str	r3, [sp, #24]
 800e250:	4607      	mov	r7, r0
 800e252:	9b04      	ldr	r3, [sp, #16]
 800e254:	4631      	mov	r1, r6
 800e256:	3b01      	subs	r3, #1
 800e258:	4650      	mov	r0, sl
 800e25a:	9301      	str	r3, [sp, #4]
 800e25c:	f7ff fa6b 	bl	800d736 <quorem>
 800e260:	4641      	mov	r1, r8
 800e262:	9002      	str	r0, [sp, #8]
 800e264:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e268:	4650      	mov	r0, sl
 800e26a:	f000 fc5b 	bl	800eb24 <__mcmp>
 800e26e:	463a      	mov	r2, r7
 800e270:	9005      	str	r0, [sp, #20]
 800e272:	4631      	mov	r1, r6
 800e274:	4620      	mov	r0, r4
 800e276:	f000 fc71 	bl	800eb5c <__mdiff>
 800e27a:	68c2      	ldr	r2, [r0, #12]
 800e27c:	4605      	mov	r5, r0
 800e27e:	bb02      	cbnz	r2, 800e2c2 <_dtoa_r+0xa7a>
 800e280:	4601      	mov	r1, r0
 800e282:	4650      	mov	r0, sl
 800e284:	f000 fc4e 	bl	800eb24 <__mcmp>
 800e288:	4602      	mov	r2, r0
 800e28a:	4629      	mov	r1, r5
 800e28c:	4620      	mov	r0, r4
 800e28e:	9209      	str	r2, [sp, #36]	; 0x24
 800e290:	f000 fa0c 	bl	800e6ac <_Bfree>
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e298:	9d04      	ldr	r5, [sp, #16]
 800e29a:	ea43 0102 	orr.w	r1, r3, r2
 800e29e:	9b06      	ldr	r3, [sp, #24]
 800e2a0:	4319      	orrs	r1, r3
 800e2a2:	d110      	bne.n	800e2c6 <_dtoa_r+0xa7e>
 800e2a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2a8:	d029      	beq.n	800e2fe <_dtoa_r+0xab6>
 800e2aa:	9b05      	ldr	r3, [sp, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	dd02      	ble.n	800e2b6 <_dtoa_r+0xa6e>
 800e2b0:	9b02      	ldr	r3, [sp, #8]
 800e2b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e2b6:	9b01      	ldr	r3, [sp, #4]
 800e2b8:	f883 9000 	strb.w	r9, [r3]
 800e2bc:	e774      	b.n	800e1a8 <_dtoa_r+0x960>
 800e2be:	4638      	mov	r0, r7
 800e2c0:	e7ba      	b.n	800e238 <_dtoa_r+0x9f0>
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	e7e1      	b.n	800e28a <_dtoa_r+0xa42>
 800e2c6:	9b05      	ldr	r3, [sp, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	db04      	blt.n	800e2d6 <_dtoa_r+0xa8e>
 800e2cc:	9907      	ldr	r1, [sp, #28]
 800e2ce:	430b      	orrs	r3, r1
 800e2d0:	9906      	ldr	r1, [sp, #24]
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	d120      	bne.n	800e318 <_dtoa_r+0xad0>
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	dded      	ble.n	800e2b6 <_dtoa_r+0xa6e>
 800e2da:	4651      	mov	r1, sl
 800e2dc:	2201      	movs	r2, #1
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 fbb4 	bl	800ea4c <__lshift>
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4682      	mov	sl, r0
 800e2e8:	f000 fc1c 	bl	800eb24 <__mcmp>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	dc03      	bgt.n	800e2f8 <_dtoa_r+0xab0>
 800e2f0:	d1e1      	bne.n	800e2b6 <_dtoa_r+0xa6e>
 800e2f2:	f019 0f01 	tst.w	r9, #1
 800e2f6:	d0de      	beq.n	800e2b6 <_dtoa_r+0xa6e>
 800e2f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2fc:	d1d8      	bne.n	800e2b0 <_dtoa_r+0xa68>
 800e2fe:	9a01      	ldr	r2, [sp, #4]
 800e300:	2339      	movs	r3, #57	; 0x39
 800e302:	7013      	strb	r3, [r2, #0]
 800e304:	462b      	mov	r3, r5
 800e306:	461d      	mov	r5, r3
 800e308:	3b01      	subs	r3, #1
 800e30a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e30e:	2a39      	cmp	r2, #57	; 0x39
 800e310:	d06c      	beq.n	800e3ec <_dtoa_r+0xba4>
 800e312:	3201      	adds	r2, #1
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	e747      	b.n	800e1a8 <_dtoa_r+0x960>
 800e318:	2a00      	cmp	r2, #0
 800e31a:	dd07      	ble.n	800e32c <_dtoa_r+0xae4>
 800e31c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e320:	d0ed      	beq.n	800e2fe <_dtoa_r+0xab6>
 800e322:	9a01      	ldr	r2, [sp, #4]
 800e324:	f109 0301 	add.w	r3, r9, #1
 800e328:	7013      	strb	r3, [r2, #0]
 800e32a:	e73d      	b.n	800e1a8 <_dtoa_r+0x960>
 800e32c:	9b04      	ldr	r3, [sp, #16]
 800e32e:	9a08      	ldr	r2, [sp, #32]
 800e330:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e334:	4293      	cmp	r3, r2
 800e336:	d043      	beq.n	800e3c0 <_dtoa_r+0xb78>
 800e338:	4651      	mov	r1, sl
 800e33a:	2300      	movs	r3, #0
 800e33c:	220a      	movs	r2, #10
 800e33e:	4620      	mov	r0, r4
 800e340:	f000 f9d6 	bl	800e6f0 <__multadd>
 800e344:	45b8      	cmp	r8, r7
 800e346:	4682      	mov	sl, r0
 800e348:	f04f 0300 	mov.w	r3, #0
 800e34c:	f04f 020a 	mov.w	r2, #10
 800e350:	4641      	mov	r1, r8
 800e352:	4620      	mov	r0, r4
 800e354:	d107      	bne.n	800e366 <_dtoa_r+0xb1e>
 800e356:	f000 f9cb 	bl	800e6f0 <__multadd>
 800e35a:	4680      	mov	r8, r0
 800e35c:	4607      	mov	r7, r0
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	3301      	adds	r3, #1
 800e362:	9304      	str	r3, [sp, #16]
 800e364:	e775      	b.n	800e252 <_dtoa_r+0xa0a>
 800e366:	f000 f9c3 	bl	800e6f0 <__multadd>
 800e36a:	4639      	mov	r1, r7
 800e36c:	4680      	mov	r8, r0
 800e36e:	2300      	movs	r3, #0
 800e370:	220a      	movs	r2, #10
 800e372:	4620      	mov	r0, r4
 800e374:	f000 f9bc 	bl	800e6f0 <__multadd>
 800e378:	4607      	mov	r7, r0
 800e37a:	e7f0      	b.n	800e35e <_dtoa_r+0xb16>
 800e37c:	9b04      	ldr	r3, [sp, #16]
 800e37e:	9301      	str	r3, [sp, #4]
 800e380:	9d00      	ldr	r5, [sp, #0]
 800e382:	4631      	mov	r1, r6
 800e384:	4650      	mov	r0, sl
 800e386:	f7ff f9d6 	bl	800d736 <quorem>
 800e38a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e38e:	9b00      	ldr	r3, [sp, #0]
 800e390:	f805 9b01 	strb.w	r9, [r5], #1
 800e394:	1aea      	subs	r2, r5, r3
 800e396:	9b01      	ldr	r3, [sp, #4]
 800e398:	4293      	cmp	r3, r2
 800e39a:	dd07      	ble.n	800e3ac <_dtoa_r+0xb64>
 800e39c:	4651      	mov	r1, sl
 800e39e:	2300      	movs	r3, #0
 800e3a0:	220a      	movs	r2, #10
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 f9a4 	bl	800e6f0 <__multadd>
 800e3a8:	4682      	mov	sl, r0
 800e3aa:	e7ea      	b.n	800e382 <_dtoa_r+0xb3a>
 800e3ac:	9b01      	ldr	r3, [sp, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	bfc8      	it	gt
 800e3b2:	461d      	movgt	r5, r3
 800e3b4:	9b00      	ldr	r3, [sp, #0]
 800e3b6:	bfd8      	it	le
 800e3b8:	2501      	movle	r5, #1
 800e3ba:	441d      	add	r5, r3
 800e3bc:	f04f 0800 	mov.w	r8, #0
 800e3c0:	4651      	mov	r1, sl
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fb41 	bl	800ea4c <__lshift>
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	f000 fba9 	bl	800eb24 <__mcmp>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	dc96      	bgt.n	800e304 <_dtoa_r+0xabc>
 800e3d6:	d102      	bne.n	800e3de <_dtoa_r+0xb96>
 800e3d8:	f019 0f01 	tst.w	r9, #1
 800e3dc:	d192      	bne.n	800e304 <_dtoa_r+0xabc>
 800e3de:	462b      	mov	r3, r5
 800e3e0:	461d      	mov	r5, r3
 800e3e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3e6:	2a30      	cmp	r2, #48	; 0x30
 800e3e8:	d0fa      	beq.n	800e3e0 <_dtoa_r+0xb98>
 800e3ea:	e6dd      	b.n	800e1a8 <_dtoa_r+0x960>
 800e3ec:	9a00      	ldr	r2, [sp, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d189      	bne.n	800e306 <_dtoa_r+0xabe>
 800e3f2:	f10b 0b01 	add.w	fp, fp, #1
 800e3f6:	2331      	movs	r3, #49	; 0x31
 800e3f8:	e796      	b.n	800e328 <_dtoa_r+0xae0>
 800e3fa:	4b0a      	ldr	r3, [pc, #40]	; (800e424 <_dtoa_r+0xbdc>)
 800e3fc:	f7ff ba99 	b.w	800d932 <_dtoa_r+0xea>
 800e400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e402:	2b00      	cmp	r3, #0
 800e404:	f47f aa6d 	bne.w	800d8e2 <_dtoa_r+0x9a>
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <_dtoa_r+0xbe0>)
 800e40a:	f7ff ba92 	b.w	800d932 <_dtoa_r+0xea>
 800e40e:	9b01      	ldr	r3, [sp, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	dcb5      	bgt.n	800e380 <_dtoa_r+0xb38>
 800e414:	9b07      	ldr	r3, [sp, #28]
 800e416:	2b02      	cmp	r3, #2
 800e418:	f73f aeb1 	bgt.w	800e17e <_dtoa_r+0x936>
 800e41c:	e7b0      	b.n	800e380 <_dtoa_r+0xb38>
 800e41e:	bf00      	nop
 800e420:	08010e44 	.word	0x08010e44
 800e424:	08010da4 	.word	0x08010da4
 800e428:	08010dc8 	.word	0x08010dc8

0800e42c <_free_r>:
 800e42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e42e:	2900      	cmp	r1, #0
 800e430:	d044      	beq.n	800e4bc <_free_r+0x90>
 800e432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e436:	9001      	str	r0, [sp, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f1a1 0404 	sub.w	r4, r1, #4
 800e43e:	bfb8      	it	lt
 800e440:	18e4      	addlt	r4, r4, r3
 800e442:	f000 f8e7 	bl	800e614 <__malloc_lock>
 800e446:	4a1e      	ldr	r2, [pc, #120]	; (800e4c0 <_free_r+0x94>)
 800e448:	9801      	ldr	r0, [sp, #4]
 800e44a:	6813      	ldr	r3, [r2, #0]
 800e44c:	b933      	cbnz	r3, 800e45c <_free_r+0x30>
 800e44e:	6063      	str	r3, [r4, #4]
 800e450:	6014      	str	r4, [r2, #0]
 800e452:	b003      	add	sp, #12
 800e454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e458:	f000 b8e2 	b.w	800e620 <__malloc_unlock>
 800e45c:	42a3      	cmp	r3, r4
 800e45e:	d908      	bls.n	800e472 <_free_r+0x46>
 800e460:	6825      	ldr	r5, [r4, #0]
 800e462:	1961      	adds	r1, r4, r5
 800e464:	428b      	cmp	r3, r1
 800e466:	bf01      	itttt	eq
 800e468:	6819      	ldreq	r1, [r3, #0]
 800e46a:	685b      	ldreq	r3, [r3, #4]
 800e46c:	1949      	addeq	r1, r1, r5
 800e46e:	6021      	streq	r1, [r4, #0]
 800e470:	e7ed      	b.n	800e44e <_free_r+0x22>
 800e472:	461a      	mov	r2, r3
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	b10b      	cbz	r3, 800e47c <_free_r+0x50>
 800e478:	42a3      	cmp	r3, r4
 800e47a:	d9fa      	bls.n	800e472 <_free_r+0x46>
 800e47c:	6811      	ldr	r1, [r2, #0]
 800e47e:	1855      	adds	r5, r2, r1
 800e480:	42a5      	cmp	r5, r4
 800e482:	d10b      	bne.n	800e49c <_free_r+0x70>
 800e484:	6824      	ldr	r4, [r4, #0]
 800e486:	4421      	add	r1, r4
 800e488:	1854      	adds	r4, r2, r1
 800e48a:	42a3      	cmp	r3, r4
 800e48c:	6011      	str	r1, [r2, #0]
 800e48e:	d1e0      	bne.n	800e452 <_free_r+0x26>
 800e490:	681c      	ldr	r4, [r3, #0]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	6053      	str	r3, [r2, #4]
 800e496:	440c      	add	r4, r1
 800e498:	6014      	str	r4, [r2, #0]
 800e49a:	e7da      	b.n	800e452 <_free_r+0x26>
 800e49c:	d902      	bls.n	800e4a4 <_free_r+0x78>
 800e49e:	230c      	movs	r3, #12
 800e4a0:	6003      	str	r3, [r0, #0]
 800e4a2:	e7d6      	b.n	800e452 <_free_r+0x26>
 800e4a4:	6825      	ldr	r5, [r4, #0]
 800e4a6:	1961      	adds	r1, r4, r5
 800e4a8:	428b      	cmp	r3, r1
 800e4aa:	bf04      	itt	eq
 800e4ac:	6819      	ldreq	r1, [r3, #0]
 800e4ae:	685b      	ldreq	r3, [r3, #4]
 800e4b0:	6063      	str	r3, [r4, #4]
 800e4b2:	bf04      	itt	eq
 800e4b4:	1949      	addeq	r1, r1, r5
 800e4b6:	6021      	streq	r1, [r4, #0]
 800e4b8:	6054      	str	r4, [r2, #4]
 800e4ba:	e7ca      	b.n	800e452 <_free_r+0x26>
 800e4bc:	b003      	add	sp, #12
 800e4be:	bd30      	pop	{r4, r5, pc}
 800e4c0:	20005d44 	.word	0x20005d44

0800e4c4 <malloc>:
 800e4c4:	4b02      	ldr	r3, [pc, #8]	; (800e4d0 <malloc+0xc>)
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	f000 b823 	b.w	800e514 <_malloc_r>
 800e4ce:	bf00      	nop
 800e4d0:	20000084 	.word	0x20000084

0800e4d4 <sbrk_aligned>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	4e0e      	ldr	r6, [pc, #56]	; (800e510 <sbrk_aligned+0x3c>)
 800e4d8:	460c      	mov	r4, r1
 800e4da:	6831      	ldr	r1, [r6, #0]
 800e4dc:	4605      	mov	r5, r0
 800e4de:	b911      	cbnz	r1, 800e4e6 <sbrk_aligned+0x12>
 800e4e0:	f000 fe40 	bl	800f164 <_sbrk_r>
 800e4e4:	6030      	str	r0, [r6, #0]
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f000 fe3b 	bl	800f164 <_sbrk_r>
 800e4ee:	1c43      	adds	r3, r0, #1
 800e4f0:	d00a      	beq.n	800e508 <sbrk_aligned+0x34>
 800e4f2:	1cc4      	adds	r4, r0, #3
 800e4f4:	f024 0403 	bic.w	r4, r4, #3
 800e4f8:	42a0      	cmp	r0, r4
 800e4fa:	d007      	beq.n	800e50c <sbrk_aligned+0x38>
 800e4fc:	1a21      	subs	r1, r4, r0
 800e4fe:	4628      	mov	r0, r5
 800e500:	f000 fe30 	bl	800f164 <_sbrk_r>
 800e504:	3001      	adds	r0, #1
 800e506:	d101      	bne.n	800e50c <sbrk_aligned+0x38>
 800e508:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e50c:	4620      	mov	r0, r4
 800e50e:	bd70      	pop	{r4, r5, r6, pc}
 800e510:	20005d48 	.word	0x20005d48

0800e514 <_malloc_r>:
 800e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e518:	1ccd      	adds	r5, r1, #3
 800e51a:	f025 0503 	bic.w	r5, r5, #3
 800e51e:	3508      	adds	r5, #8
 800e520:	2d0c      	cmp	r5, #12
 800e522:	bf38      	it	cc
 800e524:	250c      	movcc	r5, #12
 800e526:	2d00      	cmp	r5, #0
 800e528:	4607      	mov	r7, r0
 800e52a:	db01      	blt.n	800e530 <_malloc_r+0x1c>
 800e52c:	42a9      	cmp	r1, r5
 800e52e:	d905      	bls.n	800e53c <_malloc_r+0x28>
 800e530:	230c      	movs	r3, #12
 800e532:	603b      	str	r3, [r7, #0]
 800e534:	2600      	movs	r6, #0
 800e536:	4630      	mov	r0, r6
 800e538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e53c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e610 <_malloc_r+0xfc>
 800e540:	f000 f868 	bl	800e614 <__malloc_lock>
 800e544:	f8d8 3000 	ldr.w	r3, [r8]
 800e548:	461c      	mov	r4, r3
 800e54a:	bb5c      	cbnz	r4, 800e5a4 <_malloc_r+0x90>
 800e54c:	4629      	mov	r1, r5
 800e54e:	4638      	mov	r0, r7
 800e550:	f7ff ffc0 	bl	800e4d4 <sbrk_aligned>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	4604      	mov	r4, r0
 800e558:	d155      	bne.n	800e606 <_malloc_r+0xf2>
 800e55a:	f8d8 4000 	ldr.w	r4, [r8]
 800e55e:	4626      	mov	r6, r4
 800e560:	2e00      	cmp	r6, #0
 800e562:	d145      	bne.n	800e5f0 <_malloc_r+0xdc>
 800e564:	2c00      	cmp	r4, #0
 800e566:	d048      	beq.n	800e5fa <_malloc_r+0xe6>
 800e568:	6823      	ldr	r3, [r4, #0]
 800e56a:	4631      	mov	r1, r6
 800e56c:	4638      	mov	r0, r7
 800e56e:	eb04 0903 	add.w	r9, r4, r3
 800e572:	f000 fdf7 	bl	800f164 <_sbrk_r>
 800e576:	4581      	cmp	r9, r0
 800e578:	d13f      	bne.n	800e5fa <_malloc_r+0xe6>
 800e57a:	6821      	ldr	r1, [r4, #0]
 800e57c:	1a6d      	subs	r5, r5, r1
 800e57e:	4629      	mov	r1, r5
 800e580:	4638      	mov	r0, r7
 800e582:	f7ff ffa7 	bl	800e4d4 <sbrk_aligned>
 800e586:	3001      	adds	r0, #1
 800e588:	d037      	beq.n	800e5fa <_malloc_r+0xe6>
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	442b      	add	r3, r5
 800e58e:	6023      	str	r3, [r4, #0]
 800e590:	f8d8 3000 	ldr.w	r3, [r8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d038      	beq.n	800e60a <_malloc_r+0xf6>
 800e598:	685a      	ldr	r2, [r3, #4]
 800e59a:	42a2      	cmp	r2, r4
 800e59c:	d12b      	bne.n	800e5f6 <_malloc_r+0xe2>
 800e59e:	2200      	movs	r2, #0
 800e5a0:	605a      	str	r2, [r3, #4]
 800e5a2:	e00f      	b.n	800e5c4 <_malloc_r+0xb0>
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	1b52      	subs	r2, r2, r5
 800e5a8:	d41f      	bmi.n	800e5ea <_malloc_r+0xd6>
 800e5aa:	2a0b      	cmp	r2, #11
 800e5ac:	d917      	bls.n	800e5de <_malloc_r+0xca>
 800e5ae:	1961      	adds	r1, r4, r5
 800e5b0:	42a3      	cmp	r3, r4
 800e5b2:	6025      	str	r5, [r4, #0]
 800e5b4:	bf18      	it	ne
 800e5b6:	6059      	strne	r1, [r3, #4]
 800e5b8:	6863      	ldr	r3, [r4, #4]
 800e5ba:	bf08      	it	eq
 800e5bc:	f8c8 1000 	streq.w	r1, [r8]
 800e5c0:	5162      	str	r2, [r4, r5]
 800e5c2:	604b      	str	r3, [r1, #4]
 800e5c4:	4638      	mov	r0, r7
 800e5c6:	f104 060b 	add.w	r6, r4, #11
 800e5ca:	f000 f829 	bl	800e620 <__malloc_unlock>
 800e5ce:	f026 0607 	bic.w	r6, r6, #7
 800e5d2:	1d23      	adds	r3, r4, #4
 800e5d4:	1af2      	subs	r2, r6, r3
 800e5d6:	d0ae      	beq.n	800e536 <_malloc_r+0x22>
 800e5d8:	1b9b      	subs	r3, r3, r6
 800e5da:	50a3      	str	r3, [r4, r2]
 800e5dc:	e7ab      	b.n	800e536 <_malloc_r+0x22>
 800e5de:	42a3      	cmp	r3, r4
 800e5e0:	6862      	ldr	r2, [r4, #4]
 800e5e2:	d1dd      	bne.n	800e5a0 <_malloc_r+0x8c>
 800e5e4:	f8c8 2000 	str.w	r2, [r8]
 800e5e8:	e7ec      	b.n	800e5c4 <_malloc_r+0xb0>
 800e5ea:	4623      	mov	r3, r4
 800e5ec:	6864      	ldr	r4, [r4, #4]
 800e5ee:	e7ac      	b.n	800e54a <_malloc_r+0x36>
 800e5f0:	4634      	mov	r4, r6
 800e5f2:	6876      	ldr	r6, [r6, #4]
 800e5f4:	e7b4      	b.n	800e560 <_malloc_r+0x4c>
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	e7cc      	b.n	800e594 <_malloc_r+0x80>
 800e5fa:	230c      	movs	r3, #12
 800e5fc:	603b      	str	r3, [r7, #0]
 800e5fe:	4638      	mov	r0, r7
 800e600:	f000 f80e 	bl	800e620 <__malloc_unlock>
 800e604:	e797      	b.n	800e536 <_malloc_r+0x22>
 800e606:	6025      	str	r5, [r4, #0]
 800e608:	e7dc      	b.n	800e5c4 <_malloc_r+0xb0>
 800e60a:	605b      	str	r3, [r3, #4]
 800e60c:	deff      	udf	#255	; 0xff
 800e60e:	bf00      	nop
 800e610:	20005d44 	.word	0x20005d44

0800e614 <__malloc_lock>:
 800e614:	4801      	ldr	r0, [pc, #4]	; (800e61c <__malloc_lock+0x8>)
 800e616:	f7ff b87e 	b.w	800d716 <__retarget_lock_acquire_recursive>
 800e61a:	bf00      	nop
 800e61c:	20005d40 	.word	0x20005d40

0800e620 <__malloc_unlock>:
 800e620:	4801      	ldr	r0, [pc, #4]	; (800e628 <__malloc_unlock+0x8>)
 800e622:	f7ff b879 	b.w	800d718 <__retarget_lock_release_recursive>
 800e626:	bf00      	nop
 800e628:	20005d40 	.word	0x20005d40

0800e62c <_Balloc>:
 800e62c:	b570      	push	{r4, r5, r6, lr}
 800e62e:	69c6      	ldr	r6, [r0, #28]
 800e630:	4604      	mov	r4, r0
 800e632:	460d      	mov	r5, r1
 800e634:	b976      	cbnz	r6, 800e654 <_Balloc+0x28>
 800e636:	2010      	movs	r0, #16
 800e638:	f7ff ff44 	bl	800e4c4 <malloc>
 800e63c:	4602      	mov	r2, r0
 800e63e:	61e0      	str	r0, [r4, #28]
 800e640:	b920      	cbnz	r0, 800e64c <_Balloc+0x20>
 800e642:	4b18      	ldr	r3, [pc, #96]	; (800e6a4 <_Balloc+0x78>)
 800e644:	4818      	ldr	r0, [pc, #96]	; (800e6a8 <_Balloc+0x7c>)
 800e646:	216b      	movs	r1, #107	; 0x6b
 800e648:	f000 fd9c 	bl	800f184 <__assert_func>
 800e64c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e650:	6006      	str	r6, [r0, #0]
 800e652:	60c6      	str	r6, [r0, #12]
 800e654:	69e6      	ldr	r6, [r4, #28]
 800e656:	68f3      	ldr	r3, [r6, #12]
 800e658:	b183      	cbz	r3, 800e67c <_Balloc+0x50>
 800e65a:	69e3      	ldr	r3, [r4, #28]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e662:	b9b8      	cbnz	r0, 800e694 <_Balloc+0x68>
 800e664:	2101      	movs	r1, #1
 800e666:	fa01 f605 	lsl.w	r6, r1, r5
 800e66a:	1d72      	adds	r2, r6, #5
 800e66c:	0092      	lsls	r2, r2, #2
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 fda6 	bl	800f1c0 <_calloc_r>
 800e674:	b160      	cbz	r0, 800e690 <_Balloc+0x64>
 800e676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e67a:	e00e      	b.n	800e69a <_Balloc+0x6e>
 800e67c:	2221      	movs	r2, #33	; 0x21
 800e67e:	2104      	movs	r1, #4
 800e680:	4620      	mov	r0, r4
 800e682:	f000 fd9d 	bl	800f1c0 <_calloc_r>
 800e686:	69e3      	ldr	r3, [r4, #28]
 800e688:	60f0      	str	r0, [r6, #12]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1e4      	bne.n	800e65a <_Balloc+0x2e>
 800e690:	2000      	movs	r0, #0
 800e692:	bd70      	pop	{r4, r5, r6, pc}
 800e694:	6802      	ldr	r2, [r0, #0]
 800e696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e69a:	2300      	movs	r3, #0
 800e69c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6a0:	e7f7      	b.n	800e692 <_Balloc+0x66>
 800e6a2:	bf00      	nop
 800e6a4:	08010dd5 	.word	0x08010dd5
 800e6a8:	08010e55 	.word	0x08010e55

0800e6ac <_Bfree>:
 800e6ac:	b570      	push	{r4, r5, r6, lr}
 800e6ae:	69c6      	ldr	r6, [r0, #28]
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	b976      	cbnz	r6, 800e6d4 <_Bfree+0x28>
 800e6b6:	2010      	movs	r0, #16
 800e6b8:	f7ff ff04 	bl	800e4c4 <malloc>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	61e8      	str	r0, [r5, #28]
 800e6c0:	b920      	cbnz	r0, 800e6cc <_Bfree+0x20>
 800e6c2:	4b09      	ldr	r3, [pc, #36]	; (800e6e8 <_Bfree+0x3c>)
 800e6c4:	4809      	ldr	r0, [pc, #36]	; (800e6ec <_Bfree+0x40>)
 800e6c6:	218f      	movs	r1, #143	; 0x8f
 800e6c8:	f000 fd5c 	bl	800f184 <__assert_func>
 800e6cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6d0:	6006      	str	r6, [r0, #0]
 800e6d2:	60c6      	str	r6, [r0, #12]
 800e6d4:	b13c      	cbz	r4, 800e6e6 <_Bfree+0x3a>
 800e6d6:	69eb      	ldr	r3, [r5, #28]
 800e6d8:	6862      	ldr	r2, [r4, #4]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6e0:	6021      	str	r1, [r4, #0]
 800e6e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}
 800e6e8:	08010dd5 	.word	0x08010dd5
 800e6ec:	08010e55 	.word	0x08010e55

0800e6f0 <__multadd>:
 800e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f4:	690d      	ldr	r5, [r1, #16]
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	460c      	mov	r4, r1
 800e6fa:	461e      	mov	r6, r3
 800e6fc:	f101 0c14 	add.w	ip, r1, #20
 800e700:	2000      	movs	r0, #0
 800e702:	f8dc 3000 	ldr.w	r3, [ip]
 800e706:	b299      	uxth	r1, r3
 800e708:	fb02 6101 	mla	r1, r2, r1, r6
 800e70c:	0c1e      	lsrs	r6, r3, #16
 800e70e:	0c0b      	lsrs	r3, r1, #16
 800e710:	fb02 3306 	mla	r3, r2, r6, r3
 800e714:	b289      	uxth	r1, r1
 800e716:	3001      	adds	r0, #1
 800e718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e71c:	4285      	cmp	r5, r0
 800e71e:	f84c 1b04 	str.w	r1, [ip], #4
 800e722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e726:	dcec      	bgt.n	800e702 <__multadd+0x12>
 800e728:	b30e      	cbz	r6, 800e76e <__multadd+0x7e>
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	42ab      	cmp	r3, r5
 800e72e:	dc19      	bgt.n	800e764 <__multadd+0x74>
 800e730:	6861      	ldr	r1, [r4, #4]
 800e732:	4638      	mov	r0, r7
 800e734:	3101      	adds	r1, #1
 800e736:	f7ff ff79 	bl	800e62c <_Balloc>
 800e73a:	4680      	mov	r8, r0
 800e73c:	b928      	cbnz	r0, 800e74a <__multadd+0x5a>
 800e73e:	4602      	mov	r2, r0
 800e740:	4b0c      	ldr	r3, [pc, #48]	; (800e774 <__multadd+0x84>)
 800e742:	480d      	ldr	r0, [pc, #52]	; (800e778 <__multadd+0x88>)
 800e744:	21ba      	movs	r1, #186	; 0xba
 800e746:	f000 fd1d 	bl	800f184 <__assert_func>
 800e74a:	6922      	ldr	r2, [r4, #16]
 800e74c:	3202      	adds	r2, #2
 800e74e:	f104 010c 	add.w	r1, r4, #12
 800e752:	0092      	lsls	r2, r2, #2
 800e754:	300c      	adds	r0, #12
 800e756:	f7fe ffe0 	bl	800d71a <memcpy>
 800e75a:	4621      	mov	r1, r4
 800e75c:	4638      	mov	r0, r7
 800e75e:	f7ff ffa5 	bl	800e6ac <_Bfree>
 800e762:	4644      	mov	r4, r8
 800e764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e768:	3501      	adds	r5, #1
 800e76a:	615e      	str	r6, [r3, #20]
 800e76c:	6125      	str	r5, [r4, #16]
 800e76e:	4620      	mov	r0, r4
 800e770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e774:	08010e44 	.word	0x08010e44
 800e778:	08010e55 	.word	0x08010e55

0800e77c <__hi0bits>:
 800e77c:	0c03      	lsrs	r3, r0, #16
 800e77e:	041b      	lsls	r3, r3, #16
 800e780:	b9d3      	cbnz	r3, 800e7b8 <__hi0bits+0x3c>
 800e782:	0400      	lsls	r0, r0, #16
 800e784:	2310      	movs	r3, #16
 800e786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e78a:	bf04      	itt	eq
 800e78c:	0200      	lsleq	r0, r0, #8
 800e78e:	3308      	addeq	r3, #8
 800e790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e794:	bf04      	itt	eq
 800e796:	0100      	lsleq	r0, r0, #4
 800e798:	3304      	addeq	r3, #4
 800e79a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e79e:	bf04      	itt	eq
 800e7a0:	0080      	lsleq	r0, r0, #2
 800e7a2:	3302      	addeq	r3, #2
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	db05      	blt.n	800e7b4 <__hi0bits+0x38>
 800e7a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e7ac:	f103 0301 	add.w	r3, r3, #1
 800e7b0:	bf08      	it	eq
 800e7b2:	2320      	moveq	r3, #32
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	4770      	bx	lr
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e7e4      	b.n	800e786 <__hi0bits+0xa>

0800e7bc <__lo0bits>:
 800e7bc:	6803      	ldr	r3, [r0, #0]
 800e7be:	f013 0207 	ands.w	r2, r3, #7
 800e7c2:	d00c      	beq.n	800e7de <__lo0bits+0x22>
 800e7c4:	07d9      	lsls	r1, r3, #31
 800e7c6:	d422      	bmi.n	800e80e <__lo0bits+0x52>
 800e7c8:	079a      	lsls	r2, r3, #30
 800e7ca:	bf49      	itett	mi
 800e7cc:	085b      	lsrmi	r3, r3, #1
 800e7ce:	089b      	lsrpl	r3, r3, #2
 800e7d0:	6003      	strmi	r3, [r0, #0]
 800e7d2:	2201      	movmi	r2, #1
 800e7d4:	bf5c      	itt	pl
 800e7d6:	6003      	strpl	r3, [r0, #0]
 800e7d8:	2202      	movpl	r2, #2
 800e7da:	4610      	mov	r0, r2
 800e7dc:	4770      	bx	lr
 800e7de:	b299      	uxth	r1, r3
 800e7e0:	b909      	cbnz	r1, 800e7e6 <__lo0bits+0x2a>
 800e7e2:	0c1b      	lsrs	r3, r3, #16
 800e7e4:	2210      	movs	r2, #16
 800e7e6:	b2d9      	uxtb	r1, r3
 800e7e8:	b909      	cbnz	r1, 800e7ee <__lo0bits+0x32>
 800e7ea:	3208      	adds	r2, #8
 800e7ec:	0a1b      	lsrs	r3, r3, #8
 800e7ee:	0719      	lsls	r1, r3, #28
 800e7f0:	bf04      	itt	eq
 800e7f2:	091b      	lsreq	r3, r3, #4
 800e7f4:	3204      	addeq	r2, #4
 800e7f6:	0799      	lsls	r1, r3, #30
 800e7f8:	bf04      	itt	eq
 800e7fa:	089b      	lsreq	r3, r3, #2
 800e7fc:	3202      	addeq	r2, #2
 800e7fe:	07d9      	lsls	r1, r3, #31
 800e800:	d403      	bmi.n	800e80a <__lo0bits+0x4e>
 800e802:	085b      	lsrs	r3, r3, #1
 800e804:	f102 0201 	add.w	r2, r2, #1
 800e808:	d003      	beq.n	800e812 <__lo0bits+0x56>
 800e80a:	6003      	str	r3, [r0, #0]
 800e80c:	e7e5      	b.n	800e7da <__lo0bits+0x1e>
 800e80e:	2200      	movs	r2, #0
 800e810:	e7e3      	b.n	800e7da <__lo0bits+0x1e>
 800e812:	2220      	movs	r2, #32
 800e814:	e7e1      	b.n	800e7da <__lo0bits+0x1e>
	...

0800e818 <__i2b>:
 800e818:	b510      	push	{r4, lr}
 800e81a:	460c      	mov	r4, r1
 800e81c:	2101      	movs	r1, #1
 800e81e:	f7ff ff05 	bl	800e62c <_Balloc>
 800e822:	4602      	mov	r2, r0
 800e824:	b928      	cbnz	r0, 800e832 <__i2b+0x1a>
 800e826:	4b05      	ldr	r3, [pc, #20]	; (800e83c <__i2b+0x24>)
 800e828:	4805      	ldr	r0, [pc, #20]	; (800e840 <__i2b+0x28>)
 800e82a:	f240 1145 	movw	r1, #325	; 0x145
 800e82e:	f000 fca9 	bl	800f184 <__assert_func>
 800e832:	2301      	movs	r3, #1
 800e834:	6144      	str	r4, [r0, #20]
 800e836:	6103      	str	r3, [r0, #16]
 800e838:	bd10      	pop	{r4, pc}
 800e83a:	bf00      	nop
 800e83c:	08010e44 	.word	0x08010e44
 800e840:	08010e55 	.word	0x08010e55

0800e844 <__multiply>:
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	4691      	mov	r9, r2
 800e84a:	690a      	ldr	r2, [r1, #16]
 800e84c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e850:	429a      	cmp	r2, r3
 800e852:	bfb8      	it	lt
 800e854:	460b      	movlt	r3, r1
 800e856:	460c      	mov	r4, r1
 800e858:	bfbc      	itt	lt
 800e85a:	464c      	movlt	r4, r9
 800e85c:	4699      	movlt	r9, r3
 800e85e:	6927      	ldr	r7, [r4, #16]
 800e860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e864:	68a3      	ldr	r3, [r4, #8]
 800e866:	6861      	ldr	r1, [r4, #4]
 800e868:	eb07 060a 	add.w	r6, r7, sl
 800e86c:	42b3      	cmp	r3, r6
 800e86e:	b085      	sub	sp, #20
 800e870:	bfb8      	it	lt
 800e872:	3101      	addlt	r1, #1
 800e874:	f7ff feda 	bl	800e62c <_Balloc>
 800e878:	b930      	cbnz	r0, 800e888 <__multiply+0x44>
 800e87a:	4602      	mov	r2, r0
 800e87c:	4b44      	ldr	r3, [pc, #272]	; (800e990 <__multiply+0x14c>)
 800e87e:	4845      	ldr	r0, [pc, #276]	; (800e994 <__multiply+0x150>)
 800e880:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e884:	f000 fc7e 	bl	800f184 <__assert_func>
 800e888:	f100 0514 	add.w	r5, r0, #20
 800e88c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e890:	462b      	mov	r3, r5
 800e892:	2200      	movs	r2, #0
 800e894:	4543      	cmp	r3, r8
 800e896:	d321      	bcc.n	800e8dc <__multiply+0x98>
 800e898:	f104 0314 	add.w	r3, r4, #20
 800e89c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e8a0:	f109 0314 	add.w	r3, r9, #20
 800e8a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e8a8:	9202      	str	r2, [sp, #8]
 800e8aa:	1b3a      	subs	r2, r7, r4
 800e8ac:	3a15      	subs	r2, #21
 800e8ae:	f022 0203 	bic.w	r2, r2, #3
 800e8b2:	3204      	adds	r2, #4
 800e8b4:	f104 0115 	add.w	r1, r4, #21
 800e8b8:	428f      	cmp	r7, r1
 800e8ba:	bf38      	it	cc
 800e8bc:	2204      	movcc	r2, #4
 800e8be:	9201      	str	r2, [sp, #4]
 800e8c0:	9a02      	ldr	r2, [sp, #8]
 800e8c2:	9303      	str	r3, [sp, #12]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d80c      	bhi.n	800e8e2 <__multiply+0x9e>
 800e8c8:	2e00      	cmp	r6, #0
 800e8ca:	dd03      	ble.n	800e8d4 <__multiply+0x90>
 800e8cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d05b      	beq.n	800e98c <__multiply+0x148>
 800e8d4:	6106      	str	r6, [r0, #16]
 800e8d6:	b005      	add	sp, #20
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	f843 2b04 	str.w	r2, [r3], #4
 800e8e0:	e7d8      	b.n	800e894 <__multiply+0x50>
 800e8e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8e6:	f1ba 0f00 	cmp.w	sl, #0
 800e8ea:	d024      	beq.n	800e936 <__multiply+0xf2>
 800e8ec:	f104 0e14 	add.w	lr, r4, #20
 800e8f0:	46a9      	mov	r9, r5
 800e8f2:	f04f 0c00 	mov.w	ip, #0
 800e8f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8fa:	f8d9 1000 	ldr.w	r1, [r9]
 800e8fe:	fa1f fb82 	uxth.w	fp, r2
 800e902:	b289      	uxth	r1, r1
 800e904:	fb0a 110b 	mla	r1, sl, fp, r1
 800e908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e90c:	f8d9 2000 	ldr.w	r2, [r9]
 800e910:	4461      	add	r1, ip
 800e912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e916:	fb0a c20b 	mla	r2, sl, fp, ip
 800e91a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e91e:	b289      	uxth	r1, r1
 800e920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e924:	4577      	cmp	r7, lr
 800e926:	f849 1b04 	str.w	r1, [r9], #4
 800e92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e92e:	d8e2      	bhi.n	800e8f6 <__multiply+0xb2>
 800e930:	9a01      	ldr	r2, [sp, #4]
 800e932:	f845 c002 	str.w	ip, [r5, r2]
 800e936:	9a03      	ldr	r2, [sp, #12]
 800e938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e93c:	3304      	adds	r3, #4
 800e93e:	f1b9 0f00 	cmp.w	r9, #0
 800e942:	d021      	beq.n	800e988 <__multiply+0x144>
 800e944:	6829      	ldr	r1, [r5, #0]
 800e946:	f104 0c14 	add.w	ip, r4, #20
 800e94a:	46ae      	mov	lr, r5
 800e94c:	f04f 0a00 	mov.w	sl, #0
 800e950:	f8bc b000 	ldrh.w	fp, [ip]
 800e954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e958:	fb09 220b 	mla	r2, r9, fp, r2
 800e95c:	4452      	add	r2, sl
 800e95e:	b289      	uxth	r1, r1
 800e960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e964:	f84e 1b04 	str.w	r1, [lr], #4
 800e968:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e96c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e970:	f8be 1000 	ldrh.w	r1, [lr]
 800e974:	fb09 110a 	mla	r1, r9, sl, r1
 800e978:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e97c:	4567      	cmp	r7, ip
 800e97e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e982:	d8e5      	bhi.n	800e950 <__multiply+0x10c>
 800e984:	9a01      	ldr	r2, [sp, #4]
 800e986:	50a9      	str	r1, [r5, r2]
 800e988:	3504      	adds	r5, #4
 800e98a:	e799      	b.n	800e8c0 <__multiply+0x7c>
 800e98c:	3e01      	subs	r6, #1
 800e98e:	e79b      	b.n	800e8c8 <__multiply+0x84>
 800e990:	08010e44 	.word	0x08010e44
 800e994:	08010e55 	.word	0x08010e55

0800e998 <__pow5mult>:
 800e998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e99c:	4615      	mov	r5, r2
 800e99e:	f012 0203 	ands.w	r2, r2, #3
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	460f      	mov	r7, r1
 800e9a6:	d007      	beq.n	800e9b8 <__pow5mult+0x20>
 800e9a8:	4c25      	ldr	r4, [pc, #148]	; (800ea40 <__pow5mult+0xa8>)
 800e9aa:	3a01      	subs	r2, #1
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9b2:	f7ff fe9d 	bl	800e6f0 <__multadd>
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	10ad      	asrs	r5, r5, #2
 800e9ba:	d03d      	beq.n	800ea38 <__pow5mult+0xa0>
 800e9bc:	69f4      	ldr	r4, [r6, #28]
 800e9be:	b97c      	cbnz	r4, 800e9e0 <__pow5mult+0x48>
 800e9c0:	2010      	movs	r0, #16
 800e9c2:	f7ff fd7f 	bl	800e4c4 <malloc>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	61f0      	str	r0, [r6, #28]
 800e9ca:	b928      	cbnz	r0, 800e9d8 <__pow5mult+0x40>
 800e9cc:	4b1d      	ldr	r3, [pc, #116]	; (800ea44 <__pow5mult+0xac>)
 800e9ce:	481e      	ldr	r0, [pc, #120]	; (800ea48 <__pow5mult+0xb0>)
 800e9d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e9d4:	f000 fbd6 	bl	800f184 <__assert_func>
 800e9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9dc:	6004      	str	r4, [r0, #0]
 800e9de:	60c4      	str	r4, [r0, #12]
 800e9e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9e8:	b94c      	cbnz	r4, 800e9fe <__pow5mult+0x66>
 800e9ea:	f240 2171 	movw	r1, #625	; 0x271
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f7ff ff12 	bl	800e818 <__i2b>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	6003      	str	r3, [r0, #0]
 800e9fe:	f04f 0900 	mov.w	r9, #0
 800ea02:	07eb      	lsls	r3, r5, #31
 800ea04:	d50a      	bpl.n	800ea1c <__pow5mult+0x84>
 800ea06:	4639      	mov	r1, r7
 800ea08:	4622      	mov	r2, r4
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f7ff ff1a 	bl	800e844 <__multiply>
 800ea10:	4639      	mov	r1, r7
 800ea12:	4680      	mov	r8, r0
 800ea14:	4630      	mov	r0, r6
 800ea16:	f7ff fe49 	bl	800e6ac <_Bfree>
 800ea1a:	4647      	mov	r7, r8
 800ea1c:	106d      	asrs	r5, r5, #1
 800ea1e:	d00b      	beq.n	800ea38 <__pow5mult+0xa0>
 800ea20:	6820      	ldr	r0, [r4, #0]
 800ea22:	b938      	cbnz	r0, 800ea34 <__pow5mult+0x9c>
 800ea24:	4622      	mov	r2, r4
 800ea26:	4621      	mov	r1, r4
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7ff ff0b 	bl	800e844 <__multiply>
 800ea2e:	6020      	str	r0, [r4, #0]
 800ea30:	f8c0 9000 	str.w	r9, [r0]
 800ea34:	4604      	mov	r4, r0
 800ea36:	e7e4      	b.n	800ea02 <__pow5mult+0x6a>
 800ea38:	4638      	mov	r0, r7
 800ea3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea3e:	bf00      	nop
 800ea40:	08010fa0 	.word	0x08010fa0
 800ea44:	08010dd5 	.word	0x08010dd5
 800ea48:	08010e55 	.word	0x08010e55

0800ea4c <__lshift>:
 800ea4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea50:	460c      	mov	r4, r1
 800ea52:	6849      	ldr	r1, [r1, #4]
 800ea54:	6923      	ldr	r3, [r4, #16]
 800ea56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea5a:	68a3      	ldr	r3, [r4, #8]
 800ea5c:	4607      	mov	r7, r0
 800ea5e:	4691      	mov	r9, r2
 800ea60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea64:	f108 0601 	add.w	r6, r8, #1
 800ea68:	42b3      	cmp	r3, r6
 800ea6a:	db0b      	blt.n	800ea84 <__lshift+0x38>
 800ea6c:	4638      	mov	r0, r7
 800ea6e:	f7ff fddd 	bl	800e62c <_Balloc>
 800ea72:	4605      	mov	r5, r0
 800ea74:	b948      	cbnz	r0, 800ea8a <__lshift+0x3e>
 800ea76:	4602      	mov	r2, r0
 800ea78:	4b28      	ldr	r3, [pc, #160]	; (800eb1c <__lshift+0xd0>)
 800ea7a:	4829      	ldr	r0, [pc, #164]	; (800eb20 <__lshift+0xd4>)
 800ea7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea80:	f000 fb80 	bl	800f184 <__assert_func>
 800ea84:	3101      	adds	r1, #1
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	e7ee      	b.n	800ea68 <__lshift+0x1c>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	f100 0114 	add.w	r1, r0, #20
 800ea90:	f100 0210 	add.w	r2, r0, #16
 800ea94:	4618      	mov	r0, r3
 800ea96:	4553      	cmp	r3, sl
 800ea98:	db33      	blt.n	800eb02 <__lshift+0xb6>
 800ea9a:	6920      	ldr	r0, [r4, #16]
 800ea9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eaa0:	f104 0314 	add.w	r3, r4, #20
 800eaa4:	f019 091f 	ands.w	r9, r9, #31
 800eaa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eab0:	d02b      	beq.n	800eb0a <__lshift+0xbe>
 800eab2:	f1c9 0e20 	rsb	lr, r9, #32
 800eab6:	468a      	mov	sl, r1
 800eab8:	2200      	movs	r2, #0
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	fa00 f009 	lsl.w	r0, r0, r9
 800eac0:	4310      	orrs	r0, r2
 800eac2:	f84a 0b04 	str.w	r0, [sl], #4
 800eac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaca:	459c      	cmp	ip, r3
 800eacc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ead0:	d8f3      	bhi.n	800eaba <__lshift+0x6e>
 800ead2:	ebac 0304 	sub.w	r3, ip, r4
 800ead6:	3b15      	subs	r3, #21
 800ead8:	f023 0303 	bic.w	r3, r3, #3
 800eadc:	3304      	adds	r3, #4
 800eade:	f104 0015 	add.w	r0, r4, #21
 800eae2:	4584      	cmp	ip, r0
 800eae4:	bf38      	it	cc
 800eae6:	2304      	movcc	r3, #4
 800eae8:	50ca      	str	r2, [r1, r3]
 800eaea:	b10a      	cbz	r2, 800eaf0 <__lshift+0xa4>
 800eaec:	f108 0602 	add.w	r6, r8, #2
 800eaf0:	3e01      	subs	r6, #1
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	612e      	str	r6, [r5, #16]
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	f7ff fdd8 	bl	800e6ac <_Bfree>
 800eafc:	4628      	mov	r0, r5
 800eafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb02:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb06:	3301      	adds	r3, #1
 800eb08:	e7c5      	b.n	800ea96 <__lshift+0x4a>
 800eb0a:	3904      	subs	r1, #4
 800eb0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb10:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb14:	459c      	cmp	ip, r3
 800eb16:	d8f9      	bhi.n	800eb0c <__lshift+0xc0>
 800eb18:	e7ea      	b.n	800eaf0 <__lshift+0xa4>
 800eb1a:	bf00      	nop
 800eb1c:	08010e44 	.word	0x08010e44
 800eb20:	08010e55 	.word	0x08010e55

0800eb24 <__mcmp>:
 800eb24:	b530      	push	{r4, r5, lr}
 800eb26:	6902      	ldr	r2, [r0, #16]
 800eb28:	690c      	ldr	r4, [r1, #16]
 800eb2a:	1b12      	subs	r2, r2, r4
 800eb2c:	d10e      	bne.n	800eb4c <__mcmp+0x28>
 800eb2e:	f100 0314 	add.w	r3, r0, #20
 800eb32:	3114      	adds	r1, #20
 800eb34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb44:	42a5      	cmp	r5, r4
 800eb46:	d003      	beq.n	800eb50 <__mcmp+0x2c>
 800eb48:	d305      	bcc.n	800eb56 <__mcmp+0x32>
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	bd30      	pop	{r4, r5, pc}
 800eb50:	4283      	cmp	r3, r0
 800eb52:	d3f3      	bcc.n	800eb3c <__mcmp+0x18>
 800eb54:	e7fa      	b.n	800eb4c <__mcmp+0x28>
 800eb56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb5a:	e7f7      	b.n	800eb4c <__mcmp+0x28>

0800eb5c <__mdiff>:
 800eb5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb60:	460c      	mov	r4, r1
 800eb62:	4606      	mov	r6, r0
 800eb64:	4611      	mov	r1, r2
 800eb66:	4620      	mov	r0, r4
 800eb68:	4690      	mov	r8, r2
 800eb6a:	f7ff ffdb 	bl	800eb24 <__mcmp>
 800eb6e:	1e05      	subs	r5, r0, #0
 800eb70:	d110      	bne.n	800eb94 <__mdiff+0x38>
 800eb72:	4629      	mov	r1, r5
 800eb74:	4630      	mov	r0, r6
 800eb76:	f7ff fd59 	bl	800e62c <_Balloc>
 800eb7a:	b930      	cbnz	r0, 800eb8a <__mdiff+0x2e>
 800eb7c:	4b3a      	ldr	r3, [pc, #232]	; (800ec68 <__mdiff+0x10c>)
 800eb7e:	4602      	mov	r2, r0
 800eb80:	f240 2137 	movw	r1, #567	; 0x237
 800eb84:	4839      	ldr	r0, [pc, #228]	; (800ec6c <__mdiff+0x110>)
 800eb86:	f000 fafd 	bl	800f184 <__assert_func>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb94:	bfa4      	itt	ge
 800eb96:	4643      	movge	r3, r8
 800eb98:	46a0      	movge	r8, r4
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eba0:	bfa6      	itte	ge
 800eba2:	461c      	movge	r4, r3
 800eba4:	2500      	movge	r5, #0
 800eba6:	2501      	movlt	r5, #1
 800eba8:	f7ff fd40 	bl	800e62c <_Balloc>
 800ebac:	b920      	cbnz	r0, 800ebb8 <__mdiff+0x5c>
 800ebae:	4b2e      	ldr	r3, [pc, #184]	; (800ec68 <__mdiff+0x10c>)
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	f240 2145 	movw	r1, #581	; 0x245
 800ebb6:	e7e5      	b.n	800eb84 <__mdiff+0x28>
 800ebb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ebbc:	6926      	ldr	r6, [r4, #16]
 800ebbe:	60c5      	str	r5, [r0, #12]
 800ebc0:	f104 0914 	add.w	r9, r4, #20
 800ebc4:	f108 0514 	add.w	r5, r8, #20
 800ebc8:	f100 0e14 	add.w	lr, r0, #20
 800ebcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ebd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ebd4:	f108 0210 	add.w	r2, r8, #16
 800ebd8:	46f2      	mov	sl, lr
 800ebda:	2100      	movs	r1, #0
 800ebdc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebe4:	fa11 f88b 	uxtah	r8, r1, fp
 800ebe8:	b299      	uxth	r1, r3
 800ebea:	0c1b      	lsrs	r3, r3, #16
 800ebec:	eba8 0801 	sub.w	r8, r8, r1
 800ebf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebf4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebf8:	fa1f f888 	uxth.w	r8, r8
 800ebfc:	1419      	asrs	r1, r3, #16
 800ebfe:	454e      	cmp	r6, r9
 800ec00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec04:	f84a 3b04 	str.w	r3, [sl], #4
 800ec08:	d8e8      	bhi.n	800ebdc <__mdiff+0x80>
 800ec0a:	1b33      	subs	r3, r6, r4
 800ec0c:	3b15      	subs	r3, #21
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	3304      	adds	r3, #4
 800ec14:	3415      	adds	r4, #21
 800ec16:	42a6      	cmp	r6, r4
 800ec18:	bf38      	it	cc
 800ec1a:	2304      	movcc	r3, #4
 800ec1c:	441d      	add	r5, r3
 800ec1e:	4473      	add	r3, lr
 800ec20:	469e      	mov	lr, r3
 800ec22:	462e      	mov	r6, r5
 800ec24:	4566      	cmp	r6, ip
 800ec26:	d30e      	bcc.n	800ec46 <__mdiff+0xea>
 800ec28:	f10c 0203 	add.w	r2, ip, #3
 800ec2c:	1b52      	subs	r2, r2, r5
 800ec2e:	f022 0203 	bic.w	r2, r2, #3
 800ec32:	3d03      	subs	r5, #3
 800ec34:	45ac      	cmp	ip, r5
 800ec36:	bf38      	it	cc
 800ec38:	2200      	movcc	r2, #0
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec40:	b17a      	cbz	r2, 800ec62 <__mdiff+0x106>
 800ec42:	6107      	str	r7, [r0, #16]
 800ec44:	e7a4      	b.n	800eb90 <__mdiff+0x34>
 800ec46:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec4a:	fa11 f288 	uxtah	r2, r1, r8
 800ec4e:	1414      	asrs	r4, r2, #16
 800ec50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec54:	b292      	uxth	r2, r2
 800ec56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec5a:	f84e 2b04 	str.w	r2, [lr], #4
 800ec5e:	1421      	asrs	r1, r4, #16
 800ec60:	e7e0      	b.n	800ec24 <__mdiff+0xc8>
 800ec62:	3f01      	subs	r7, #1
 800ec64:	e7ea      	b.n	800ec3c <__mdiff+0xe0>
 800ec66:	bf00      	nop
 800ec68:	08010e44 	.word	0x08010e44
 800ec6c:	08010e55 	.word	0x08010e55

0800ec70 <__d2b>:
 800ec70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec74:	460f      	mov	r7, r1
 800ec76:	2101      	movs	r1, #1
 800ec78:	ec59 8b10 	vmov	r8, r9, d0
 800ec7c:	4616      	mov	r6, r2
 800ec7e:	f7ff fcd5 	bl	800e62c <_Balloc>
 800ec82:	4604      	mov	r4, r0
 800ec84:	b930      	cbnz	r0, 800ec94 <__d2b+0x24>
 800ec86:	4602      	mov	r2, r0
 800ec88:	4b24      	ldr	r3, [pc, #144]	; (800ed1c <__d2b+0xac>)
 800ec8a:	4825      	ldr	r0, [pc, #148]	; (800ed20 <__d2b+0xb0>)
 800ec8c:	f240 310f 	movw	r1, #783	; 0x30f
 800ec90:	f000 fa78 	bl	800f184 <__assert_func>
 800ec94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec9c:	bb2d      	cbnz	r5, 800ecea <__d2b+0x7a>
 800ec9e:	9301      	str	r3, [sp, #4]
 800eca0:	f1b8 0300 	subs.w	r3, r8, #0
 800eca4:	d026      	beq.n	800ecf4 <__d2b+0x84>
 800eca6:	4668      	mov	r0, sp
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	f7ff fd87 	bl	800e7bc <__lo0bits>
 800ecae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ecb2:	b1e8      	cbz	r0, 800ecf0 <__d2b+0x80>
 800ecb4:	f1c0 0320 	rsb	r3, r0, #32
 800ecb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecbc:	430b      	orrs	r3, r1
 800ecbe:	40c2      	lsrs	r2, r0
 800ecc0:	6163      	str	r3, [r4, #20]
 800ecc2:	9201      	str	r2, [sp, #4]
 800ecc4:	9b01      	ldr	r3, [sp, #4]
 800ecc6:	61a3      	str	r3, [r4, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	bf14      	ite	ne
 800eccc:	2202      	movne	r2, #2
 800ecce:	2201      	moveq	r2, #1
 800ecd0:	6122      	str	r2, [r4, #16]
 800ecd2:	b1bd      	cbz	r5, 800ed04 <__d2b+0x94>
 800ecd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecd8:	4405      	add	r5, r0
 800ecda:	603d      	str	r5, [r7, #0]
 800ecdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ece0:	6030      	str	r0, [r6, #0]
 800ece2:	4620      	mov	r0, r4
 800ece4:	b003      	add	sp, #12
 800ece6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecee:	e7d6      	b.n	800ec9e <__d2b+0x2e>
 800ecf0:	6161      	str	r1, [r4, #20]
 800ecf2:	e7e7      	b.n	800ecc4 <__d2b+0x54>
 800ecf4:	a801      	add	r0, sp, #4
 800ecf6:	f7ff fd61 	bl	800e7bc <__lo0bits>
 800ecfa:	9b01      	ldr	r3, [sp, #4]
 800ecfc:	6163      	str	r3, [r4, #20]
 800ecfe:	3020      	adds	r0, #32
 800ed00:	2201      	movs	r2, #1
 800ed02:	e7e5      	b.n	800ecd0 <__d2b+0x60>
 800ed04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed0c:	6038      	str	r0, [r7, #0]
 800ed0e:	6918      	ldr	r0, [r3, #16]
 800ed10:	f7ff fd34 	bl	800e77c <__hi0bits>
 800ed14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed18:	e7e2      	b.n	800ece0 <__d2b+0x70>
 800ed1a:	bf00      	nop
 800ed1c:	08010e44 	.word	0x08010e44
 800ed20:	08010e55 	.word	0x08010e55

0800ed24 <__ssputs_r>:
 800ed24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	688e      	ldr	r6, [r1, #8]
 800ed2a:	461f      	mov	r7, r3
 800ed2c:	42be      	cmp	r6, r7
 800ed2e:	680b      	ldr	r3, [r1, #0]
 800ed30:	4682      	mov	sl, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	4690      	mov	r8, r2
 800ed36:	d82c      	bhi.n	800ed92 <__ssputs_r+0x6e>
 800ed38:	898a      	ldrh	r2, [r1, #12]
 800ed3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed3e:	d026      	beq.n	800ed8e <__ssputs_r+0x6a>
 800ed40:	6965      	ldr	r5, [r4, #20]
 800ed42:	6909      	ldr	r1, [r1, #16]
 800ed44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed48:	eba3 0901 	sub.w	r9, r3, r1
 800ed4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed50:	1c7b      	adds	r3, r7, #1
 800ed52:	444b      	add	r3, r9
 800ed54:	106d      	asrs	r5, r5, #1
 800ed56:	429d      	cmp	r5, r3
 800ed58:	bf38      	it	cc
 800ed5a:	461d      	movcc	r5, r3
 800ed5c:	0553      	lsls	r3, r2, #21
 800ed5e:	d527      	bpl.n	800edb0 <__ssputs_r+0x8c>
 800ed60:	4629      	mov	r1, r5
 800ed62:	f7ff fbd7 	bl	800e514 <_malloc_r>
 800ed66:	4606      	mov	r6, r0
 800ed68:	b360      	cbz	r0, 800edc4 <__ssputs_r+0xa0>
 800ed6a:	6921      	ldr	r1, [r4, #16]
 800ed6c:	464a      	mov	r2, r9
 800ed6e:	f7fe fcd4 	bl	800d71a <memcpy>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed7c:	81a3      	strh	r3, [r4, #12]
 800ed7e:	6126      	str	r6, [r4, #16]
 800ed80:	6165      	str	r5, [r4, #20]
 800ed82:	444e      	add	r6, r9
 800ed84:	eba5 0509 	sub.w	r5, r5, r9
 800ed88:	6026      	str	r6, [r4, #0]
 800ed8a:	60a5      	str	r5, [r4, #8]
 800ed8c:	463e      	mov	r6, r7
 800ed8e:	42be      	cmp	r6, r7
 800ed90:	d900      	bls.n	800ed94 <__ssputs_r+0x70>
 800ed92:	463e      	mov	r6, r7
 800ed94:	6820      	ldr	r0, [r4, #0]
 800ed96:	4632      	mov	r2, r6
 800ed98:	4641      	mov	r1, r8
 800ed9a:	f000 f9c9 	bl	800f130 <memmove>
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	1b9b      	subs	r3, r3, r6
 800eda2:	60a3      	str	r3, [r4, #8]
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	4433      	add	r3, r6
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	2000      	movs	r0, #0
 800edac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb0:	462a      	mov	r2, r5
 800edb2:	f000 fa2d 	bl	800f210 <_realloc_r>
 800edb6:	4606      	mov	r6, r0
 800edb8:	2800      	cmp	r0, #0
 800edba:	d1e0      	bne.n	800ed7e <__ssputs_r+0x5a>
 800edbc:	6921      	ldr	r1, [r4, #16]
 800edbe:	4650      	mov	r0, sl
 800edc0:	f7ff fb34 	bl	800e42c <_free_r>
 800edc4:	230c      	movs	r3, #12
 800edc6:	f8ca 3000 	str.w	r3, [sl]
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edd0:	81a3      	strh	r3, [r4, #12]
 800edd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edd6:	e7e9      	b.n	800edac <__ssputs_r+0x88>

0800edd8 <_svfiprintf_r>:
 800edd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eddc:	4698      	mov	r8, r3
 800edde:	898b      	ldrh	r3, [r1, #12]
 800ede0:	061b      	lsls	r3, r3, #24
 800ede2:	b09d      	sub	sp, #116	; 0x74
 800ede4:	4607      	mov	r7, r0
 800ede6:	460d      	mov	r5, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	d50e      	bpl.n	800ee0a <_svfiprintf_r+0x32>
 800edec:	690b      	ldr	r3, [r1, #16]
 800edee:	b963      	cbnz	r3, 800ee0a <_svfiprintf_r+0x32>
 800edf0:	2140      	movs	r1, #64	; 0x40
 800edf2:	f7ff fb8f 	bl	800e514 <_malloc_r>
 800edf6:	6028      	str	r0, [r5, #0]
 800edf8:	6128      	str	r0, [r5, #16]
 800edfa:	b920      	cbnz	r0, 800ee06 <_svfiprintf_r+0x2e>
 800edfc:	230c      	movs	r3, #12
 800edfe:	603b      	str	r3, [r7, #0]
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee04:	e0d0      	b.n	800efa8 <_svfiprintf_r+0x1d0>
 800ee06:	2340      	movs	r3, #64	; 0x40
 800ee08:	616b      	str	r3, [r5, #20]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee0e:	2320      	movs	r3, #32
 800ee10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee18:	2330      	movs	r3, #48	; 0x30
 800ee1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800efc0 <_svfiprintf_r+0x1e8>
 800ee1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee22:	f04f 0901 	mov.w	r9, #1
 800ee26:	4623      	mov	r3, r4
 800ee28:	469a      	mov	sl, r3
 800ee2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee2e:	b10a      	cbz	r2, 800ee34 <_svfiprintf_r+0x5c>
 800ee30:	2a25      	cmp	r2, #37	; 0x25
 800ee32:	d1f9      	bne.n	800ee28 <_svfiprintf_r+0x50>
 800ee34:	ebba 0b04 	subs.w	fp, sl, r4
 800ee38:	d00b      	beq.n	800ee52 <_svfiprintf_r+0x7a>
 800ee3a:	465b      	mov	r3, fp
 800ee3c:	4622      	mov	r2, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	4638      	mov	r0, r7
 800ee42:	f7ff ff6f 	bl	800ed24 <__ssputs_r>
 800ee46:	3001      	adds	r0, #1
 800ee48:	f000 80a9 	beq.w	800ef9e <_svfiprintf_r+0x1c6>
 800ee4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee4e:	445a      	add	r2, fp
 800ee50:	9209      	str	r2, [sp, #36]	; 0x24
 800ee52:	f89a 3000 	ldrb.w	r3, [sl]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f000 80a1 	beq.w	800ef9e <_svfiprintf_r+0x1c6>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee66:	f10a 0a01 	add.w	sl, sl, #1
 800ee6a:	9304      	str	r3, [sp, #16]
 800ee6c:	9307      	str	r3, [sp, #28]
 800ee6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee72:	931a      	str	r3, [sp, #104]	; 0x68
 800ee74:	4654      	mov	r4, sl
 800ee76:	2205      	movs	r2, #5
 800ee78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee7c:	4850      	ldr	r0, [pc, #320]	; (800efc0 <_svfiprintf_r+0x1e8>)
 800ee7e:	f7f1 f9c7 	bl	8000210 <memchr>
 800ee82:	9a04      	ldr	r2, [sp, #16]
 800ee84:	b9d8      	cbnz	r0, 800eebe <_svfiprintf_r+0xe6>
 800ee86:	06d0      	lsls	r0, r2, #27
 800ee88:	bf44      	itt	mi
 800ee8a:	2320      	movmi	r3, #32
 800ee8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee90:	0711      	lsls	r1, r2, #28
 800ee92:	bf44      	itt	mi
 800ee94:	232b      	movmi	r3, #43	; 0x2b
 800ee96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee9e:	2b2a      	cmp	r3, #42	; 0x2a
 800eea0:	d015      	beq.n	800eece <_svfiprintf_r+0xf6>
 800eea2:	9a07      	ldr	r2, [sp, #28]
 800eea4:	4654      	mov	r4, sl
 800eea6:	2000      	movs	r0, #0
 800eea8:	f04f 0c0a 	mov.w	ip, #10
 800eeac:	4621      	mov	r1, r4
 800eeae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeb2:	3b30      	subs	r3, #48	; 0x30
 800eeb4:	2b09      	cmp	r3, #9
 800eeb6:	d94d      	bls.n	800ef54 <_svfiprintf_r+0x17c>
 800eeb8:	b1b0      	cbz	r0, 800eee8 <_svfiprintf_r+0x110>
 800eeba:	9207      	str	r2, [sp, #28]
 800eebc:	e014      	b.n	800eee8 <_svfiprintf_r+0x110>
 800eebe:	eba0 0308 	sub.w	r3, r0, r8
 800eec2:	fa09 f303 	lsl.w	r3, r9, r3
 800eec6:	4313      	orrs	r3, r2
 800eec8:	9304      	str	r3, [sp, #16]
 800eeca:	46a2      	mov	sl, r4
 800eecc:	e7d2      	b.n	800ee74 <_svfiprintf_r+0x9c>
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	1d19      	adds	r1, r3, #4
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	9103      	str	r1, [sp, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	bfbb      	ittet	lt
 800eeda:	425b      	neglt	r3, r3
 800eedc:	f042 0202 	orrlt.w	r2, r2, #2
 800eee0:	9307      	strge	r3, [sp, #28]
 800eee2:	9307      	strlt	r3, [sp, #28]
 800eee4:	bfb8      	it	lt
 800eee6:	9204      	strlt	r2, [sp, #16]
 800eee8:	7823      	ldrb	r3, [r4, #0]
 800eeea:	2b2e      	cmp	r3, #46	; 0x2e
 800eeec:	d10c      	bne.n	800ef08 <_svfiprintf_r+0x130>
 800eeee:	7863      	ldrb	r3, [r4, #1]
 800eef0:	2b2a      	cmp	r3, #42	; 0x2a
 800eef2:	d134      	bne.n	800ef5e <_svfiprintf_r+0x186>
 800eef4:	9b03      	ldr	r3, [sp, #12]
 800eef6:	1d1a      	adds	r2, r3, #4
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	9203      	str	r2, [sp, #12]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	bfb8      	it	lt
 800ef00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef04:	3402      	adds	r4, #2
 800ef06:	9305      	str	r3, [sp, #20]
 800ef08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800efd0 <_svfiprintf_r+0x1f8>
 800ef0c:	7821      	ldrb	r1, [r4, #0]
 800ef0e:	2203      	movs	r2, #3
 800ef10:	4650      	mov	r0, sl
 800ef12:	f7f1 f97d 	bl	8000210 <memchr>
 800ef16:	b138      	cbz	r0, 800ef28 <_svfiprintf_r+0x150>
 800ef18:	9b04      	ldr	r3, [sp, #16]
 800ef1a:	eba0 000a 	sub.w	r0, r0, sl
 800ef1e:	2240      	movs	r2, #64	; 0x40
 800ef20:	4082      	lsls	r2, r0
 800ef22:	4313      	orrs	r3, r2
 800ef24:	3401      	adds	r4, #1
 800ef26:	9304      	str	r3, [sp, #16]
 800ef28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef2c:	4825      	ldr	r0, [pc, #148]	; (800efc4 <_svfiprintf_r+0x1ec>)
 800ef2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef32:	2206      	movs	r2, #6
 800ef34:	f7f1 f96c 	bl	8000210 <memchr>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d038      	beq.n	800efae <_svfiprintf_r+0x1d6>
 800ef3c:	4b22      	ldr	r3, [pc, #136]	; (800efc8 <_svfiprintf_r+0x1f0>)
 800ef3e:	bb1b      	cbnz	r3, 800ef88 <_svfiprintf_r+0x1b0>
 800ef40:	9b03      	ldr	r3, [sp, #12]
 800ef42:	3307      	adds	r3, #7
 800ef44:	f023 0307 	bic.w	r3, r3, #7
 800ef48:	3308      	adds	r3, #8
 800ef4a:	9303      	str	r3, [sp, #12]
 800ef4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef4e:	4433      	add	r3, r6
 800ef50:	9309      	str	r3, [sp, #36]	; 0x24
 800ef52:	e768      	b.n	800ee26 <_svfiprintf_r+0x4e>
 800ef54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef58:	460c      	mov	r4, r1
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	e7a6      	b.n	800eeac <_svfiprintf_r+0xd4>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	3401      	adds	r4, #1
 800ef62:	9305      	str	r3, [sp, #20]
 800ef64:	4619      	mov	r1, r3
 800ef66:	f04f 0c0a 	mov.w	ip, #10
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef70:	3a30      	subs	r2, #48	; 0x30
 800ef72:	2a09      	cmp	r2, #9
 800ef74:	d903      	bls.n	800ef7e <_svfiprintf_r+0x1a6>
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d0c6      	beq.n	800ef08 <_svfiprintf_r+0x130>
 800ef7a:	9105      	str	r1, [sp, #20]
 800ef7c:	e7c4      	b.n	800ef08 <_svfiprintf_r+0x130>
 800ef7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef82:	4604      	mov	r4, r0
 800ef84:	2301      	movs	r3, #1
 800ef86:	e7f0      	b.n	800ef6a <_svfiprintf_r+0x192>
 800ef88:	ab03      	add	r3, sp, #12
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	462a      	mov	r2, r5
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <_svfiprintf_r+0x1f4>)
 800ef90:	a904      	add	r1, sp, #16
 800ef92:	4638      	mov	r0, r7
 800ef94:	f7fd fdf2 	bl	800cb7c <_printf_float>
 800ef98:	1c42      	adds	r2, r0, #1
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	d1d6      	bne.n	800ef4c <_svfiprintf_r+0x174>
 800ef9e:	89ab      	ldrh	r3, [r5, #12]
 800efa0:	065b      	lsls	r3, r3, #25
 800efa2:	f53f af2d 	bmi.w	800ee00 <_svfiprintf_r+0x28>
 800efa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efa8:	b01d      	add	sp, #116	; 0x74
 800efaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efae:	ab03      	add	r3, sp, #12
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	462a      	mov	r2, r5
 800efb4:	4b05      	ldr	r3, [pc, #20]	; (800efcc <_svfiprintf_r+0x1f4>)
 800efb6:	a904      	add	r1, sp, #16
 800efb8:	4638      	mov	r0, r7
 800efba:	f7fe f883 	bl	800d0c4 <_printf_i>
 800efbe:	e7eb      	b.n	800ef98 <_svfiprintf_r+0x1c0>
 800efc0:	08010fac 	.word	0x08010fac
 800efc4:	08010fb6 	.word	0x08010fb6
 800efc8:	0800cb7d 	.word	0x0800cb7d
 800efcc:	0800ed25 	.word	0x0800ed25
 800efd0:	08010fb2 	.word	0x08010fb2

0800efd4 <__sflush_r>:
 800efd4:	898a      	ldrh	r2, [r1, #12]
 800efd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efda:	4605      	mov	r5, r0
 800efdc:	0710      	lsls	r0, r2, #28
 800efde:	460c      	mov	r4, r1
 800efe0:	d458      	bmi.n	800f094 <__sflush_r+0xc0>
 800efe2:	684b      	ldr	r3, [r1, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	dc05      	bgt.n	800eff4 <__sflush_r+0x20>
 800efe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efea:	2b00      	cmp	r3, #0
 800efec:	dc02      	bgt.n	800eff4 <__sflush_r+0x20>
 800efee:	2000      	movs	r0, #0
 800eff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eff6:	2e00      	cmp	r6, #0
 800eff8:	d0f9      	beq.n	800efee <__sflush_r+0x1a>
 800effa:	2300      	movs	r3, #0
 800effc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f000:	682f      	ldr	r7, [r5, #0]
 800f002:	6a21      	ldr	r1, [r4, #32]
 800f004:	602b      	str	r3, [r5, #0]
 800f006:	d032      	beq.n	800f06e <__sflush_r+0x9a>
 800f008:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f00a:	89a3      	ldrh	r3, [r4, #12]
 800f00c:	075a      	lsls	r2, r3, #29
 800f00e:	d505      	bpl.n	800f01c <__sflush_r+0x48>
 800f010:	6863      	ldr	r3, [r4, #4]
 800f012:	1ac0      	subs	r0, r0, r3
 800f014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f016:	b10b      	cbz	r3, 800f01c <__sflush_r+0x48>
 800f018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f01a:	1ac0      	subs	r0, r0, r3
 800f01c:	2300      	movs	r3, #0
 800f01e:	4602      	mov	r2, r0
 800f020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f022:	6a21      	ldr	r1, [r4, #32]
 800f024:	4628      	mov	r0, r5
 800f026:	47b0      	blx	r6
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	89a3      	ldrh	r3, [r4, #12]
 800f02c:	d106      	bne.n	800f03c <__sflush_r+0x68>
 800f02e:	6829      	ldr	r1, [r5, #0]
 800f030:	291d      	cmp	r1, #29
 800f032:	d82b      	bhi.n	800f08c <__sflush_r+0xb8>
 800f034:	4a29      	ldr	r2, [pc, #164]	; (800f0dc <__sflush_r+0x108>)
 800f036:	410a      	asrs	r2, r1
 800f038:	07d6      	lsls	r6, r2, #31
 800f03a:	d427      	bmi.n	800f08c <__sflush_r+0xb8>
 800f03c:	2200      	movs	r2, #0
 800f03e:	6062      	str	r2, [r4, #4]
 800f040:	04d9      	lsls	r1, r3, #19
 800f042:	6922      	ldr	r2, [r4, #16]
 800f044:	6022      	str	r2, [r4, #0]
 800f046:	d504      	bpl.n	800f052 <__sflush_r+0x7e>
 800f048:	1c42      	adds	r2, r0, #1
 800f04a:	d101      	bne.n	800f050 <__sflush_r+0x7c>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	b903      	cbnz	r3, 800f052 <__sflush_r+0x7e>
 800f050:	6560      	str	r0, [r4, #84]	; 0x54
 800f052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f054:	602f      	str	r7, [r5, #0]
 800f056:	2900      	cmp	r1, #0
 800f058:	d0c9      	beq.n	800efee <__sflush_r+0x1a>
 800f05a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f05e:	4299      	cmp	r1, r3
 800f060:	d002      	beq.n	800f068 <__sflush_r+0x94>
 800f062:	4628      	mov	r0, r5
 800f064:	f7ff f9e2 	bl	800e42c <_free_r>
 800f068:	2000      	movs	r0, #0
 800f06a:	6360      	str	r0, [r4, #52]	; 0x34
 800f06c:	e7c0      	b.n	800eff0 <__sflush_r+0x1c>
 800f06e:	2301      	movs	r3, #1
 800f070:	4628      	mov	r0, r5
 800f072:	47b0      	blx	r6
 800f074:	1c41      	adds	r1, r0, #1
 800f076:	d1c8      	bne.n	800f00a <__sflush_r+0x36>
 800f078:	682b      	ldr	r3, [r5, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0c5      	beq.n	800f00a <__sflush_r+0x36>
 800f07e:	2b1d      	cmp	r3, #29
 800f080:	d001      	beq.n	800f086 <__sflush_r+0xb2>
 800f082:	2b16      	cmp	r3, #22
 800f084:	d101      	bne.n	800f08a <__sflush_r+0xb6>
 800f086:	602f      	str	r7, [r5, #0]
 800f088:	e7b1      	b.n	800efee <__sflush_r+0x1a>
 800f08a:	89a3      	ldrh	r3, [r4, #12]
 800f08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	e7ad      	b.n	800eff0 <__sflush_r+0x1c>
 800f094:	690f      	ldr	r7, [r1, #16]
 800f096:	2f00      	cmp	r7, #0
 800f098:	d0a9      	beq.n	800efee <__sflush_r+0x1a>
 800f09a:	0793      	lsls	r3, r2, #30
 800f09c:	680e      	ldr	r6, [r1, #0]
 800f09e:	bf08      	it	eq
 800f0a0:	694b      	ldreq	r3, [r1, #20]
 800f0a2:	600f      	str	r7, [r1, #0]
 800f0a4:	bf18      	it	ne
 800f0a6:	2300      	movne	r3, #0
 800f0a8:	eba6 0807 	sub.w	r8, r6, r7
 800f0ac:	608b      	str	r3, [r1, #8]
 800f0ae:	f1b8 0f00 	cmp.w	r8, #0
 800f0b2:	dd9c      	ble.n	800efee <__sflush_r+0x1a>
 800f0b4:	6a21      	ldr	r1, [r4, #32]
 800f0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0b8:	4643      	mov	r3, r8
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	4628      	mov	r0, r5
 800f0be:	47b0      	blx	r6
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	dc06      	bgt.n	800f0d2 <__sflush_r+0xfe>
 800f0c4:	89a3      	ldrh	r3, [r4, #12]
 800f0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ca:	81a3      	strh	r3, [r4, #12]
 800f0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0d0:	e78e      	b.n	800eff0 <__sflush_r+0x1c>
 800f0d2:	4407      	add	r7, r0
 800f0d4:	eba8 0800 	sub.w	r8, r8, r0
 800f0d8:	e7e9      	b.n	800f0ae <__sflush_r+0xda>
 800f0da:	bf00      	nop
 800f0dc:	dfbffffe 	.word	0xdfbffffe

0800f0e0 <_fflush_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	690b      	ldr	r3, [r1, #16]
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	b913      	cbnz	r3, 800f0f0 <_fflush_r+0x10>
 800f0ea:	2500      	movs	r5, #0
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	bd38      	pop	{r3, r4, r5, pc}
 800f0f0:	b118      	cbz	r0, 800f0fa <_fflush_r+0x1a>
 800f0f2:	6a03      	ldr	r3, [r0, #32]
 800f0f4:	b90b      	cbnz	r3, 800f0fa <_fflush_r+0x1a>
 800f0f6:	f7fe f993 	bl	800d420 <__sinit>
 800f0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0f3      	beq.n	800f0ea <_fflush_r+0xa>
 800f102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f104:	07d0      	lsls	r0, r2, #31
 800f106:	d404      	bmi.n	800f112 <_fflush_r+0x32>
 800f108:	0599      	lsls	r1, r3, #22
 800f10a:	d402      	bmi.n	800f112 <_fflush_r+0x32>
 800f10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10e:	f7fe fb02 	bl	800d716 <__retarget_lock_acquire_recursive>
 800f112:	4628      	mov	r0, r5
 800f114:	4621      	mov	r1, r4
 800f116:	f7ff ff5d 	bl	800efd4 <__sflush_r>
 800f11a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f11c:	07da      	lsls	r2, r3, #31
 800f11e:	4605      	mov	r5, r0
 800f120:	d4e4      	bmi.n	800f0ec <_fflush_r+0xc>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	059b      	lsls	r3, r3, #22
 800f126:	d4e1      	bmi.n	800f0ec <_fflush_r+0xc>
 800f128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f12a:	f7fe faf5 	bl	800d718 <__retarget_lock_release_recursive>
 800f12e:	e7dd      	b.n	800f0ec <_fflush_r+0xc>

0800f130 <memmove>:
 800f130:	4288      	cmp	r0, r1
 800f132:	b510      	push	{r4, lr}
 800f134:	eb01 0402 	add.w	r4, r1, r2
 800f138:	d902      	bls.n	800f140 <memmove+0x10>
 800f13a:	4284      	cmp	r4, r0
 800f13c:	4623      	mov	r3, r4
 800f13e:	d807      	bhi.n	800f150 <memmove+0x20>
 800f140:	1e43      	subs	r3, r0, #1
 800f142:	42a1      	cmp	r1, r4
 800f144:	d008      	beq.n	800f158 <memmove+0x28>
 800f146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f14e:	e7f8      	b.n	800f142 <memmove+0x12>
 800f150:	4402      	add	r2, r0
 800f152:	4601      	mov	r1, r0
 800f154:	428a      	cmp	r2, r1
 800f156:	d100      	bne.n	800f15a <memmove+0x2a>
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f162:	e7f7      	b.n	800f154 <memmove+0x24>

0800f164 <_sbrk_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4d06      	ldr	r5, [pc, #24]	; (800f180 <_sbrk_r+0x1c>)
 800f168:	2300      	movs	r3, #0
 800f16a:	4604      	mov	r4, r0
 800f16c:	4608      	mov	r0, r1
 800f16e:	602b      	str	r3, [r5, #0]
 800f170:	f7f3 f992 	bl	8002498 <_sbrk>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	d102      	bne.n	800f17e <_sbrk_r+0x1a>
 800f178:	682b      	ldr	r3, [r5, #0]
 800f17a:	b103      	cbz	r3, 800f17e <_sbrk_r+0x1a>
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	20005d3c 	.word	0x20005d3c

0800f184 <__assert_func>:
 800f184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f186:	4614      	mov	r4, r2
 800f188:	461a      	mov	r2, r3
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <__assert_func+0x2c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4605      	mov	r5, r0
 800f190:	68d8      	ldr	r0, [r3, #12]
 800f192:	b14c      	cbz	r4, 800f1a8 <__assert_func+0x24>
 800f194:	4b07      	ldr	r3, [pc, #28]	; (800f1b4 <__assert_func+0x30>)
 800f196:	9100      	str	r1, [sp, #0]
 800f198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f19c:	4906      	ldr	r1, [pc, #24]	; (800f1b8 <__assert_func+0x34>)
 800f19e:	462b      	mov	r3, r5
 800f1a0:	f000 f872 	bl	800f288 <fiprintf>
 800f1a4:	f000 f882 	bl	800f2ac <abort>
 800f1a8:	4b04      	ldr	r3, [pc, #16]	; (800f1bc <__assert_func+0x38>)
 800f1aa:	461c      	mov	r4, r3
 800f1ac:	e7f3      	b.n	800f196 <__assert_func+0x12>
 800f1ae:	bf00      	nop
 800f1b0:	20000084 	.word	0x20000084
 800f1b4:	08010fc7 	.word	0x08010fc7
 800f1b8:	08010fd4 	.word	0x08010fd4
 800f1bc:	08011002 	.word	0x08011002

0800f1c0 <_calloc_r>:
 800f1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1c2:	fba1 2402 	umull	r2, r4, r1, r2
 800f1c6:	b94c      	cbnz	r4, 800f1dc <_calloc_r+0x1c>
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	9201      	str	r2, [sp, #4]
 800f1cc:	f7ff f9a2 	bl	800e514 <_malloc_r>
 800f1d0:	9a01      	ldr	r2, [sp, #4]
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	b930      	cbnz	r0, 800f1e4 <_calloc_r+0x24>
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	b003      	add	sp, #12
 800f1da:	bd30      	pop	{r4, r5, pc}
 800f1dc:	220c      	movs	r2, #12
 800f1de:	6002      	str	r2, [r0, #0]
 800f1e0:	2500      	movs	r5, #0
 800f1e2:	e7f8      	b.n	800f1d6 <_calloc_r+0x16>
 800f1e4:	4621      	mov	r1, r4
 800f1e6:	f7fe f9b4 	bl	800d552 <memset>
 800f1ea:	e7f4      	b.n	800f1d6 <_calloc_r+0x16>

0800f1ec <__ascii_mbtowc>:
 800f1ec:	b082      	sub	sp, #8
 800f1ee:	b901      	cbnz	r1, 800f1f2 <__ascii_mbtowc+0x6>
 800f1f0:	a901      	add	r1, sp, #4
 800f1f2:	b142      	cbz	r2, 800f206 <__ascii_mbtowc+0x1a>
 800f1f4:	b14b      	cbz	r3, 800f20a <__ascii_mbtowc+0x1e>
 800f1f6:	7813      	ldrb	r3, [r2, #0]
 800f1f8:	600b      	str	r3, [r1, #0]
 800f1fa:	7812      	ldrb	r2, [r2, #0]
 800f1fc:	1e10      	subs	r0, r2, #0
 800f1fe:	bf18      	it	ne
 800f200:	2001      	movne	r0, #1
 800f202:	b002      	add	sp, #8
 800f204:	4770      	bx	lr
 800f206:	4610      	mov	r0, r2
 800f208:	e7fb      	b.n	800f202 <__ascii_mbtowc+0x16>
 800f20a:	f06f 0001 	mvn.w	r0, #1
 800f20e:	e7f8      	b.n	800f202 <__ascii_mbtowc+0x16>

0800f210 <_realloc_r>:
 800f210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f214:	4680      	mov	r8, r0
 800f216:	4614      	mov	r4, r2
 800f218:	460e      	mov	r6, r1
 800f21a:	b921      	cbnz	r1, 800f226 <_realloc_r+0x16>
 800f21c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f220:	4611      	mov	r1, r2
 800f222:	f7ff b977 	b.w	800e514 <_malloc_r>
 800f226:	b92a      	cbnz	r2, 800f234 <_realloc_r+0x24>
 800f228:	f7ff f900 	bl	800e42c <_free_r>
 800f22c:	4625      	mov	r5, r4
 800f22e:	4628      	mov	r0, r5
 800f230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f234:	f000 f841 	bl	800f2ba <_malloc_usable_size_r>
 800f238:	4284      	cmp	r4, r0
 800f23a:	4607      	mov	r7, r0
 800f23c:	d802      	bhi.n	800f244 <_realloc_r+0x34>
 800f23e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f242:	d812      	bhi.n	800f26a <_realloc_r+0x5a>
 800f244:	4621      	mov	r1, r4
 800f246:	4640      	mov	r0, r8
 800f248:	f7ff f964 	bl	800e514 <_malloc_r>
 800f24c:	4605      	mov	r5, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	d0ed      	beq.n	800f22e <_realloc_r+0x1e>
 800f252:	42bc      	cmp	r4, r7
 800f254:	4622      	mov	r2, r4
 800f256:	4631      	mov	r1, r6
 800f258:	bf28      	it	cs
 800f25a:	463a      	movcs	r2, r7
 800f25c:	f7fe fa5d 	bl	800d71a <memcpy>
 800f260:	4631      	mov	r1, r6
 800f262:	4640      	mov	r0, r8
 800f264:	f7ff f8e2 	bl	800e42c <_free_r>
 800f268:	e7e1      	b.n	800f22e <_realloc_r+0x1e>
 800f26a:	4635      	mov	r5, r6
 800f26c:	e7df      	b.n	800f22e <_realloc_r+0x1e>

0800f26e <__ascii_wctomb>:
 800f26e:	b149      	cbz	r1, 800f284 <__ascii_wctomb+0x16>
 800f270:	2aff      	cmp	r2, #255	; 0xff
 800f272:	bf85      	ittet	hi
 800f274:	238a      	movhi	r3, #138	; 0x8a
 800f276:	6003      	strhi	r3, [r0, #0]
 800f278:	700a      	strbls	r2, [r1, #0]
 800f27a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f27e:	bf98      	it	ls
 800f280:	2001      	movls	r0, #1
 800f282:	4770      	bx	lr
 800f284:	4608      	mov	r0, r1
 800f286:	4770      	bx	lr

0800f288 <fiprintf>:
 800f288:	b40e      	push	{r1, r2, r3}
 800f28a:	b503      	push	{r0, r1, lr}
 800f28c:	4601      	mov	r1, r0
 800f28e:	ab03      	add	r3, sp, #12
 800f290:	4805      	ldr	r0, [pc, #20]	; (800f2a8 <fiprintf+0x20>)
 800f292:	f853 2b04 	ldr.w	r2, [r3], #4
 800f296:	6800      	ldr	r0, [r0, #0]
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	f000 f83f 	bl	800f31c <_vfiprintf_r>
 800f29e:	b002      	add	sp, #8
 800f2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2a4:	b003      	add	sp, #12
 800f2a6:	4770      	bx	lr
 800f2a8:	20000084 	.word	0x20000084

0800f2ac <abort>:
 800f2ac:	b508      	push	{r3, lr}
 800f2ae:	2006      	movs	r0, #6
 800f2b0:	f000 fa0c 	bl	800f6cc <raise>
 800f2b4:	2001      	movs	r0, #1
 800f2b6:	f7f3 f877 	bl	80023a8 <_exit>

0800f2ba <_malloc_usable_size_r>:
 800f2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2be:	1f18      	subs	r0, r3, #4
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfbc      	itt	lt
 800f2c4:	580b      	ldrlt	r3, [r1, r0]
 800f2c6:	18c0      	addlt	r0, r0, r3
 800f2c8:	4770      	bx	lr

0800f2ca <__sfputc_r>:
 800f2ca:	6893      	ldr	r3, [r2, #8]
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	b410      	push	{r4}
 800f2d2:	6093      	str	r3, [r2, #8]
 800f2d4:	da08      	bge.n	800f2e8 <__sfputc_r+0x1e>
 800f2d6:	6994      	ldr	r4, [r2, #24]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	db01      	blt.n	800f2e0 <__sfputc_r+0x16>
 800f2dc:	290a      	cmp	r1, #10
 800f2de:	d103      	bne.n	800f2e8 <__sfputc_r+0x1e>
 800f2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2e4:	f000 b934 	b.w	800f550 <__swbuf_r>
 800f2e8:	6813      	ldr	r3, [r2, #0]
 800f2ea:	1c58      	adds	r0, r3, #1
 800f2ec:	6010      	str	r0, [r2, #0]
 800f2ee:	7019      	strb	r1, [r3, #0]
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <__sfputs_r>:
 800f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	460f      	mov	r7, r1
 800f2fe:	4614      	mov	r4, r2
 800f300:	18d5      	adds	r5, r2, r3
 800f302:	42ac      	cmp	r4, r5
 800f304:	d101      	bne.n	800f30a <__sfputs_r+0x12>
 800f306:	2000      	movs	r0, #0
 800f308:	e007      	b.n	800f31a <__sfputs_r+0x22>
 800f30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f30e:	463a      	mov	r2, r7
 800f310:	4630      	mov	r0, r6
 800f312:	f7ff ffda 	bl	800f2ca <__sfputc_r>
 800f316:	1c43      	adds	r3, r0, #1
 800f318:	d1f3      	bne.n	800f302 <__sfputs_r+0xa>
 800f31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f31c <_vfiprintf_r>:
 800f31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	460d      	mov	r5, r1
 800f322:	b09d      	sub	sp, #116	; 0x74
 800f324:	4614      	mov	r4, r2
 800f326:	4698      	mov	r8, r3
 800f328:	4606      	mov	r6, r0
 800f32a:	b118      	cbz	r0, 800f334 <_vfiprintf_r+0x18>
 800f32c:	6a03      	ldr	r3, [r0, #32]
 800f32e:	b90b      	cbnz	r3, 800f334 <_vfiprintf_r+0x18>
 800f330:	f7fe f876 	bl	800d420 <__sinit>
 800f334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f336:	07d9      	lsls	r1, r3, #31
 800f338:	d405      	bmi.n	800f346 <_vfiprintf_r+0x2a>
 800f33a:	89ab      	ldrh	r3, [r5, #12]
 800f33c:	059a      	lsls	r2, r3, #22
 800f33e:	d402      	bmi.n	800f346 <_vfiprintf_r+0x2a>
 800f340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f342:	f7fe f9e8 	bl	800d716 <__retarget_lock_acquire_recursive>
 800f346:	89ab      	ldrh	r3, [r5, #12]
 800f348:	071b      	lsls	r3, r3, #28
 800f34a:	d501      	bpl.n	800f350 <_vfiprintf_r+0x34>
 800f34c:	692b      	ldr	r3, [r5, #16]
 800f34e:	b99b      	cbnz	r3, 800f378 <_vfiprintf_r+0x5c>
 800f350:	4629      	mov	r1, r5
 800f352:	4630      	mov	r0, r6
 800f354:	f000 f93a 	bl	800f5cc <__swsetup_r>
 800f358:	b170      	cbz	r0, 800f378 <_vfiprintf_r+0x5c>
 800f35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f35c:	07dc      	lsls	r4, r3, #31
 800f35e:	d504      	bpl.n	800f36a <_vfiprintf_r+0x4e>
 800f360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f364:	b01d      	add	sp, #116	; 0x74
 800f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36a:	89ab      	ldrh	r3, [r5, #12]
 800f36c:	0598      	lsls	r0, r3, #22
 800f36e:	d4f7      	bmi.n	800f360 <_vfiprintf_r+0x44>
 800f370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f372:	f7fe f9d1 	bl	800d718 <__retarget_lock_release_recursive>
 800f376:	e7f3      	b.n	800f360 <_vfiprintf_r+0x44>
 800f378:	2300      	movs	r3, #0
 800f37a:	9309      	str	r3, [sp, #36]	; 0x24
 800f37c:	2320      	movs	r3, #32
 800f37e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f382:	f8cd 800c 	str.w	r8, [sp, #12]
 800f386:	2330      	movs	r3, #48	; 0x30
 800f388:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f53c <_vfiprintf_r+0x220>
 800f38c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f390:	f04f 0901 	mov.w	r9, #1
 800f394:	4623      	mov	r3, r4
 800f396:	469a      	mov	sl, r3
 800f398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f39c:	b10a      	cbz	r2, 800f3a2 <_vfiprintf_r+0x86>
 800f39e:	2a25      	cmp	r2, #37	; 0x25
 800f3a0:	d1f9      	bne.n	800f396 <_vfiprintf_r+0x7a>
 800f3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800f3a6:	d00b      	beq.n	800f3c0 <_vfiprintf_r+0xa4>
 800f3a8:	465b      	mov	r3, fp
 800f3aa:	4622      	mov	r2, r4
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f7ff ffa2 	bl	800f2f8 <__sfputs_r>
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	f000 80a9 	beq.w	800f50c <_vfiprintf_r+0x1f0>
 800f3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3bc:	445a      	add	r2, fp
 800f3be:	9209      	str	r2, [sp, #36]	; 0x24
 800f3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 80a1 	beq.w	800f50c <_vfiprintf_r+0x1f0>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d4:	f10a 0a01 	add.w	sl, sl, #1
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	9307      	str	r3, [sp, #28]
 800f3dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3e0:	931a      	str	r3, [sp, #104]	; 0x68
 800f3e2:	4654      	mov	r4, sl
 800f3e4:	2205      	movs	r2, #5
 800f3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ea:	4854      	ldr	r0, [pc, #336]	; (800f53c <_vfiprintf_r+0x220>)
 800f3ec:	f7f0 ff10 	bl	8000210 <memchr>
 800f3f0:	9a04      	ldr	r2, [sp, #16]
 800f3f2:	b9d8      	cbnz	r0, 800f42c <_vfiprintf_r+0x110>
 800f3f4:	06d1      	lsls	r1, r2, #27
 800f3f6:	bf44      	itt	mi
 800f3f8:	2320      	movmi	r3, #32
 800f3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3fe:	0713      	lsls	r3, r2, #28
 800f400:	bf44      	itt	mi
 800f402:	232b      	movmi	r3, #43	; 0x2b
 800f404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f408:	f89a 3000 	ldrb.w	r3, [sl]
 800f40c:	2b2a      	cmp	r3, #42	; 0x2a
 800f40e:	d015      	beq.n	800f43c <_vfiprintf_r+0x120>
 800f410:	9a07      	ldr	r2, [sp, #28]
 800f412:	4654      	mov	r4, sl
 800f414:	2000      	movs	r0, #0
 800f416:	f04f 0c0a 	mov.w	ip, #10
 800f41a:	4621      	mov	r1, r4
 800f41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f420:	3b30      	subs	r3, #48	; 0x30
 800f422:	2b09      	cmp	r3, #9
 800f424:	d94d      	bls.n	800f4c2 <_vfiprintf_r+0x1a6>
 800f426:	b1b0      	cbz	r0, 800f456 <_vfiprintf_r+0x13a>
 800f428:	9207      	str	r2, [sp, #28]
 800f42a:	e014      	b.n	800f456 <_vfiprintf_r+0x13a>
 800f42c:	eba0 0308 	sub.w	r3, r0, r8
 800f430:	fa09 f303 	lsl.w	r3, r9, r3
 800f434:	4313      	orrs	r3, r2
 800f436:	9304      	str	r3, [sp, #16]
 800f438:	46a2      	mov	sl, r4
 800f43a:	e7d2      	b.n	800f3e2 <_vfiprintf_r+0xc6>
 800f43c:	9b03      	ldr	r3, [sp, #12]
 800f43e:	1d19      	adds	r1, r3, #4
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	9103      	str	r1, [sp, #12]
 800f444:	2b00      	cmp	r3, #0
 800f446:	bfbb      	ittet	lt
 800f448:	425b      	neglt	r3, r3
 800f44a:	f042 0202 	orrlt.w	r2, r2, #2
 800f44e:	9307      	strge	r3, [sp, #28]
 800f450:	9307      	strlt	r3, [sp, #28]
 800f452:	bfb8      	it	lt
 800f454:	9204      	strlt	r2, [sp, #16]
 800f456:	7823      	ldrb	r3, [r4, #0]
 800f458:	2b2e      	cmp	r3, #46	; 0x2e
 800f45a:	d10c      	bne.n	800f476 <_vfiprintf_r+0x15a>
 800f45c:	7863      	ldrb	r3, [r4, #1]
 800f45e:	2b2a      	cmp	r3, #42	; 0x2a
 800f460:	d134      	bne.n	800f4cc <_vfiprintf_r+0x1b0>
 800f462:	9b03      	ldr	r3, [sp, #12]
 800f464:	1d1a      	adds	r2, r3, #4
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	9203      	str	r2, [sp, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	bfb8      	it	lt
 800f46e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f472:	3402      	adds	r4, #2
 800f474:	9305      	str	r3, [sp, #20]
 800f476:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f54c <_vfiprintf_r+0x230>
 800f47a:	7821      	ldrb	r1, [r4, #0]
 800f47c:	2203      	movs	r2, #3
 800f47e:	4650      	mov	r0, sl
 800f480:	f7f0 fec6 	bl	8000210 <memchr>
 800f484:	b138      	cbz	r0, 800f496 <_vfiprintf_r+0x17a>
 800f486:	9b04      	ldr	r3, [sp, #16]
 800f488:	eba0 000a 	sub.w	r0, r0, sl
 800f48c:	2240      	movs	r2, #64	; 0x40
 800f48e:	4082      	lsls	r2, r0
 800f490:	4313      	orrs	r3, r2
 800f492:	3401      	adds	r4, #1
 800f494:	9304      	str	r3, [sp, #16]
 800f496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f49a:	4829      	ldr	r0, [pc, #164]	; (800f540 <_vfiprintf_r+0x224>)
 800f49c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4a0:	2206      	movs	r2, #6
 800f4a2:	f7f0 feb5 	bl	8000210 <memchr>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d03f      	beq.n	800f52a <_vfiprintf_r+0x20e>
 800f4aa:	4b26      	ldr	r3, [pc, #152]	; (800f544 <_vfiprintf_r+0x228>)
 800f4ac:	bb1b      	cbnz	r3, 800f4f6 <_vfiprintf_r+0x1da>
 800f4ae:	9b03      	ldr	r3, [sp, #12]
 800f4b0:	3307      	adds	r3, #7
 800f4b2:	f023 0307 	bic.w	r3, r3, #7
 800f4b6:	3308      	adds	r3, #8
 800f4b8:	9303      	str	r3, [sp, #12]
 800f4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4bc:	443b      	add	r3, r7
 800f4be:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c0:	e768      	b.n	800f394 <_vfiprintf_r+0x78>
 800f4c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	e7a6      	b.n	800f41a <_vfiprintf_r+0xfe>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	3401      	adds	r4, #1
 800f4d0:	9305      	str	r3, [sp, #20]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	f04f 0c0a 	mov.w	ip, #10
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4de:	3a30      	subs	r2, #48	; 0x30
 800f4e0:	2a09      	cmp	r2, #9
 800f4e2:	d903      	bls.n	800f4ec <_vfiprintf_r+0x1d0>
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d0c6      	beq.n	800f476 <_vfiprintf_r+0x15a>
 800f4e8:	9105      	str	r1, [sp, #20]
 800f4ea:	e7c4      	b.n	800f476 <_vfiprintf_r+0x15a>
 800f4ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e7f0      	b.n	800f4d8 <_vfiprintf_r+0x1bc>
 800f4f6:	ab03      	add	r3, sp, #12
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	462a      	mov	r2, r5
 800f4fc:	4b12      	ldr	r3, [pc, #72]	; (800f548 <_vfiprintf_r+0x22c>)
 800f4fe:	a904      	add	r1, sp, #16
 800f500:	4630      	mov	r0, r6
 800f502:	f7fd fb3b 	bl	800cb7c <_printf_float>
 800f506:	4607      	mov	r7, r0
 800f508:	1c78      	adds	r0, r7, #1
 800f50a:	d1d6      	bne.n	800f4ba <_vfiprintf_r+0x19e>
 800f50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f50e:	07d9      	lsls	r1, r3, #31
 800f510:	d405      	bmi.n	800f51e <_vfiprintf_r+0x202>
 800f512:	89ab      	ldrh	r3, [r5, #12]
 800f514:	059a      	lsls	r2, r3, #22
 800f516:	d402      	bmi.n	800f51e <_vfiprintf_r+0x202>
 800f518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f51a:	f7fe f8fd 	bl	800d718 <__retarget_lock_release_recursive>
 800f51e:	89ab      	ldrh	r3, [r5, #12]
 800f520:	065b      	lsls	r3, r3, #25
 800f522:	f53f af1d 	bmi.w	800f360 <_vfiprintf_r+0x44>
 800f526:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f528:	e71c      	b.n	800f364 <_vfiprintf_r+0x48>
 800f52a:	ab03      	add	r3, sp, #12
 800f52c:	9300      	str	r3, [sp, #0]
 800f52e:	462a      	mov	r2, r5
 800f530:	4b05      	ldr	r3, [pc, #20]	; (800f548 <_vfiprintf_r+0x22c>)
 800f532:	a904      	add	r1, sp, #16
 800f534:	4630      	mov	r0, r6
 800f536:	f7fd fdc5 	bl	800d0c4 <_printf_i>
 800f53a:	e7e4      	b.n	800f506 <_vfiprintf_r+0x1ea>
 800f53c:	08010fac 	.word	0x08010fac
 800f540:	08010fb6 	.word	0x08010fb6
 800f544:	0800cb7d 	.word	0x0800cb7d
 800f548:	0800f2f9 	.word	0x0800f2f9
 800f54c:	08010fb2 	.word	0x08010fb2

0800f550 <__swbuf_r>:
 800f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f552:	460e      	mov	r6, r1
 800f554:	4614      	mov	r4, r2
 800f556:	4605      	mov	r5, r0
 800f558:	b118      	cbz	r0, 800f562 <__swbuf_r+0x12>
 800f55a:	6a03      	ldr	r3, [r0, #32]
 800f55c:	b90b      	cbnz	r3, 800f562 <__swbuf_r+0x12>
 800f55e:	f7fd ff5f 	bl	800d420 <__sinit>
 800f562:	69a3      	ldr	r3, [r4, #24]
 800f564:	60a3      	str	r3, [r4, #8]
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	071a      	lsls	r2, r3, #28
 800f56a:	d525      	bpl.n	800f5b8 <__swbuf_r+0x68>
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	b31b      	cbz	r3, 800f5b8 <__swbuf_r+0x68>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	6922      	ldr	r2, [r4, #16]
 800f574:	1a98      	subs	r0, r3, r2
 800f576:	6963      	ldr	r3, [r4, #20]
 800f578:	b2f6      	uxtb	r6, r6
 800f57a:	4283      	cmp	r3, r0
 800f57c:	4637      	mov	r7, r6
 800f57e:	dc04      	bgt.n	800f58a <__swbuf_r+0x3a>
 800f580:	4621      	mov	r1, r4
 800f582:	4628      	mov	r0, r5
 800f584:	f7ff fdac 	bl	800f0e0 <_fflush_r>
 800f588:	b9e0      	cbnz	r0, 800f5c4 <__swbuf_r+0x74>
 800f58a:	68a3      	ldr	r3, [r4, #8]
 800f58c:	3b01      	subs	r3, #1
 800f58e:	60a3      	str	r3, [r4, #8]
 800f590:	6823      	ldr	r3, [r4, #0]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	6022      	str	r2, [r4, #0]
 800f596:	701e      	strb	r6, [r3, #0]
 800f598:	6962      	ldr	r2, [r4, #20]
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d004      	beq.n	800f5aa <__swbuf_r+0x5a>
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	07db      	lsls	r3, r3, #31
 800f5a4:	d506      	bpl.n	800f5b4 <__swbuf_r+0x64>
 800f5a6:	2e0a      	cmp	r6, #10
 800f5a8:	d104      	bne.n	800f5b4 <__swbuf_r+0x64>
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f7ff fd97 	bl	800f0e0 <_fflush_r>
 800f5b2:	b938      	cbnz	r0, 800f5c4 <__swbuf_r+0x74>
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f000 f806 	bl	800f5cc <__swsetup_r>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d0d5      	beq.n	800f570 <__swbuf_r+0x20>
 800f5c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f5c8:	e7f4      	b.n	800f5b4 <__swbuf_r+0x64>
	...

0800f5cc <__swsetup_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4b2a      	ldr	r3, [pc, #168]	; (800f678 <__swsetup_r+0xac>)
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	6818      	ldr	r0, [r3, #0]
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	b118      	cbz	r0, 800f5e0 <__swsetup_r+0x14>
 800f5d8:	6a03      	ldr	r3, [r0, #32]
 800f5da:	b90b      	cbnz	r3, 800f5e0 <__swsetup_r+0x14>
 800f5dc:	f7fd ff20 	bl	800d420 <__sinit>
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5e6:	0718      	lsls	r0, r3, #28
 800f5e8:	d422      	bmi.n	800f630 <__swsetup_r+0x64>
 800f5ea:	06d9      	lsls	r1, r3, #27
 800f5ec:	d407      	bmi.n	800f5fe <__swsetup_r+0x32>
 800f5ee:	2309      	movs	r3, #9
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5fc:	e034      	b.n	800f668 <__swsetup_r+0x9c>
 800f5fe:	0758      	lsls	r0, r3, #29
 800f600:	d512      	bpl.n	800f628 <__swsetup_r+0x5c>
 800f602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f604:	b141      	cbz	r1, 800f618 <__swsetup_r+0x4c>
 800f606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f60a:	4299      	cmp	r1, r3
 800f60c:	d002      	beq.n	800f614 <__swsetup_r+0x48>
 800f60e:	4628      	mov	r0, r5
 800f610:	f7fe ff0c 	bl	800e42c <_free_r>
 800f614:	2300      	movs	r3, #0
 800f616:	6363      	str	r3, [r4, #52]	; 0x34
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	2300      	movs	r3, #0
 800f622:	6063      	str	r3, [r4, #4]
 800f624:	6923      	ldr	r3, [r4, #16]
 800f626:	6023      	str	r3, [r4, #0]
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	f043 0308 	orr.w	r3, r3, #8
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	b94b      	cbnz	r3, 800f648 <__swsetup_r+0x7c>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f63a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f63e:	d003      	beq.n	800f648 <__swsetup_r+0x7c>
 800f640:	4621      	mov	r1, r4
 800f642:	4628      	mov	r0, r5
 800f644:	f000 f884 	bl	800f750 <__smakebuf_r>
 800f648:	89a0      	ldrh	r0, [r4, #12]
 800f64a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f64e:	f010 0301 	ands.w	r3, r0, #1
 800f652:	d00a      	beq.n	800f66a <__swsetup_r+0x9e>
 800f654:	2300      	movs	r3, #0
 800f656:	60a3      	str	r3, [r4, #8]
 800f658:	6963      	ldr	r3, [r4, #20]
 800f65a:	425b      	negs	r3, r3
 800f65c:	61a3      	str	r3, [r4, #24]
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	b943      	cbnz	r3, 800f674 <__swsetup_r+0xa8>
 800f662:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f666:	d1c4      	bne.n	800f5f2 <__swsetup_r+0x26>
 800f668:	bd38      	pop	{r3, r4, r5, pc}
 800f66a:	0781      	lsls	r1, r0, #30
 800f66c:	bf58      	it	pl
 800f66e:	6963      	ldrpl	r3, [r4, #20]
 800f670:	60a3      	str	r3, [r4, #8]
 800f672:	e7f4      	b.n	800f65e <__swsetup_r+0x92>
 800f674:	2000      	movs	r0, #0
 800f676:	e7f7      	b.n	800f668 <__swsetup_r+0x9c>
 800f678:	20000084 	.word	0x20000084

0800f67c <_raise_r>:
 800f67c:	291f      	cmp	r1, #31
 800f67e:	b538      	push	{r3, r4, r5, lr}
 800f680:	4604      	mov	r4, r0
 800f682:	460d      	mov	r5, r1
 800f684:	d904      	bls.n	800f690 <_raise_r+0x14>
 800f686:	2316      	movs	r3, #22
 800f688:	6003      	str	r3, [r0, #0]
 800f68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f68e:	bd38      	pop	{r3, r4, r5, pc}
 800f690:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f692:	b112      	cbz	r2, 800f69a <_raise_r+0x1e>
 800f694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f698:	b94b      	cbnz	r3, 800f6ae <_raise_r+0x32>
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 f830 	bl	800f700 <_getpid_r>
 800f6a0:	462a      	mov	r2, r5
 800f6a2:	4601      	mov	r1, r0
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6aa:	f000 b817 	b.w	800f6dc <_kill_r>
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d00a      	beq.n	800f6c8 <_raise_r+0x4c>
 800f6b2:	1c59      	adds	r1, r3, #1
 800f6b4:	d103      	bne.n	800f6be <_raise_r+0x42>
 800f6b6:	2316      	movs	r3, #22
 800f6b8:	6003      	str	r3, [r0, #0]
 800f6ba:	2001      	movs	r0, #1
 800f6bc:	e7e7      	b.n	800f68e <_raise_r+0x12>
 800f6be:	2400      	movs	r4, #0
 800f6c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	4798      	blx	r3
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	e7e0      	b.n	800f68e <_raise_r+0x12>

0800f6cc <raise>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <raise+0xc>)
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f7ff bfd3 	b.w	800f67c <_raise_r>
 800f6d6:	bf00      	nop
 800f6d8:	20000084 	.word	0x20000084

0800f6dc <_kill_r>:
 800f6dc:	b538      	push	{r3, r4, r5, lr}
 800f6de:	4d07      	ldr	r5, [pc, #28]	; (800f6fc <_kill_r+0x20>)
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	4608      	mov	r0, r1
 800f6e6:	4611      	mov	r1, r2
 800f6e8:	602b      	str	r3, [r5, #0]
 800f6ea:	f7f2 fe4d 	bl	8002388 <_kill>
 800f6ee:	1c43      	adds	r3, r0, #1
 800f6f0:	d102      	bne.n	800f6f8 <_kill_r+0x1c>
 800f6f2:	682b      	ldr	r3, [r5, #0]
 800f6f4:	b103      	cbz	r3, 800f6f8 <_kill_r+0x1c>
 800f6f6:	6023      	str	r3, [r4, #0]
 800f6f8:	bd38      	pop	{r3, r4, r5, pc}
 800f6fa:	bf00      	nop
 800f6fc:	20005d3c 	.word	0x20005d3c

0800f700 <_getpid_r>:
 800f700:	f7f2 be3a 	b.w	8002378 <_getpid>

0800f704 <__swhatbuf_r>:
 800f704:	b570      	push	{r4, r5, r6, lr}
 800f706:	460c      	mov	r4, r1
 800f708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70c:	2900      	cmp	r1, #0
 800f70e:	b096      	sub	sp, #88	; 0x58
 800f710:	4615      	mov	r5, r2
 800f712:	461e      	mov	r6, r3
 800f714:	da0d      	bge.n	800f732 <__swhatbuf_r+0x2e>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f71c:	f04f 0100 	mov.w	r1, #0
 800f720:	bf0c      	ite	eq
 800f722:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f726:	2340      	movne	r3, #64	; 0x40
 800f728:	2000      	movs	r0, #0
 800f72a:	6031      	str	r1, [r6, #0]
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	b016      	add	sp, #88	; 0x58
 800f730:	bd70      	pop	{r4, r5, r6, pc}
 800f732:	466a      	mov	r2, sp
 800f734:	f000 f848 	bl	800f7c8 <_fstat_r>
 800f738:	2800      	cmp	r0, #0
 800f73a:	dbec      	blt.n	800f716 <__swhatbuf_r+0x12>
 800f73c:	9901      	ldr	r1, [sp, #4]
 800f73e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f742:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f746:	4259      	negs	r1, r3
 800f748:	4159      	adcs	r1, r3
 800f74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f74e:	e7eb      	b.n	800f728 <__swhatbuf_r+0x24>

0800f750 <__smakebuf_r>:
 800f750:	898b      	ldrh	r3, [r1, #12]
 800f752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f754:	079d      	lsls	r5, r3, #30
 800f756:	4606      	mov	r6, r0
 800f758:	460c      	mov	r4, r1
 800f75a:	d507      	bpl.n	800f76c <__smakebuf_r+0x1c>
 800f75c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	6123      	str	r3, [r4, #16]
 800f764:	2301      	movs	r3, #1
 800f766:	6163      	str	r3, [r4, #20]
 800f768:	b002      	add	sp, #8
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	ab01      	add	r3, sp, #4
 800f76e:	466a      	mov	r2, sp
 800f770:	f7ff ffc8 	bl	800f704 <__swhatbuf_r>
 800f774:	9900      	ldr	r1, [sp, #0]
 800f776:	4605      	mov	r5, r0
 800f778:	4630      	mov	r0, r6
 800f77a:	f7fe fecb 	bl	800e514 <_malloc_r>
 800f77e:	b948      	cbnz	r0, 800f794 <__smakebuf_r+0x44>
 800f780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d4ef      	bmi.n	800f768 <__smakebuf_r+0x18>
 800f788:	f023 0303 	bic.w	r3, r3, #3
 800f78c:	f043 0302 	orr.w	r3, r3, #2
 800f790:	81a3      	strh	r3, [r4, #12]
 800f792:	e7e3      	b.n	800f75c <__smakebuf_r+0xc>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	6020      	str	r0, [r4, #0]
 800f798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	9b00      	ldr	r3, [sp, #0]
 800f7a0:	6163      	str	r3, [r4, #20]
 800f7a2:	9b01      	ldr	r3, [sp, #4]
 800f7a4:	6120      	str	r0, [r4, #16]
 800f7a6:	b15b      	cbz	r3, 800f7c0 <__smakebuf_r+0x70>
 800f7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f000 f81d 	bl	800f7ec <_isatty_r>
 800f7b2:	b128      	cbz	r0, 800f7c0 <__smakebuf_r+0x70>
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	f023 0303 	bic.w	r3, r3, #3
 800f7ba:	f043 0301 	orr.w	r3, r3, #1
 800f7be:	81a3      	strh	r3, [r4, #12]
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	431d      	orrs	r5, r3
 800f7c4:	81a5      	strh	r5, [r4, #12]
 800f7c6:	e7cf      	b.n	800f768 <__smakebuf_r+0x18>

0800f7c8 <_fstat_r>:
 800f7c8:	b538      	push	{r3, r4, r5, lr}
 800f7ca:	4d07      	ldr	r5, [pc, #28]	; (800f7e8 <_fstat_r+0x20>)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	4608      	mov	r0, r1
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	602b      	str	r3, [r5, #0]
 800f7d6:	f7f2 fe36 	bl	8002446 <_fstat>
 800f7da:	1c43      	adds	r3, r0, #1
 800f7dc:	d102      	bne.n	800f7e4 <_fstat_r+0x1c>
 800f7de:	682b      	ldr	r3, [r5, #0]
 800f7e0:	b103      	cbz	r3, 800f7e4 <_fstat_r+0x1c>
 800f7e2:	6023      	str	r3, [r4, #0]
 800f7e4:	bd38      	pop	{r3, r4, r5, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20005d3c 	.word	0x20005d3c

0800f7ec <_isatty_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d06      	ldr	r5, [pc, #24]	; (800f808 <_isatty_r+0x1c>)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f2 fe35 	bl	8002466 <_isatty>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_isatty_r+0x1a>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_isatty_r+0x1a>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	20005d3c 	.word	0x20005d3c
 800f80c:	00000000 	.word	0x00000000

0800f810 <log>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	ed2d 8b02 	vpush	{d8}
 800f816:	ec55 4b10 	vmov	r4, r5, d0
 800f81a:	f000 f8bd 	bl	800f998 <__ieee754_log>
 800f81e:	4622      	mov	r2, r4
 800f820:	462b      	mov	r3, r5
 800f822:	4620      	mov	r0, r4
 800f824:	4629      	mov	r1, r5
 800f826:	eeb0 8a40 	vmov.f32	s16, s0
 800f82a:	eef0 8a60 	vmov.f32	s17, s1
 800f82e:	f7f1 f99d 	bl	8000b6c <__aeabi_dcmpun>
 800f832:	b998      	cbnz	r0, 800f85c <log+0x4c>
 800f834:	2200      	movs	r2, #0
 800f836:	2300      	movs	r3, #0
 800f838:	4620      	mov	r0, r4
 800f83a:	4629      	mov	r1, r5
 800f83c:	f7f1 f98c 	bl	8000b58 <__aeabi_dcmpgt>
 800f840:	b960      	cbnz	r0, 800f85c <log+0x4c>
 800f842:	2200      	movs	r2, #0
 800f844:	2300      	movs	r3, #0
 800f846:	4620      	mov	r0, r4
 800f848:	4629      	mov	r1, r5
 800f84a:	f7f1 f95d 	bl	8000b08 <__aeabi_dcmpeq>
 800f84e:	b160      	cbz	r0, 800f86a <log+0x5a>
 800f850:	f7fd ff36 	bl	800d6c0 <__errno>
 800f854:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f880 <log+0x70>
 800f858:	2322      	movs	r3, #34	; 0x22
 800f85a:	6003      	str	r3, [r0, #0]
 800f85c:	eeb0 0a48 	vmov.f32	s0, s16
 800f860:	eef0 0a68 	vmov.f32	s1, s17
 800f864:	ecbd 8b02 	vpop	{d8}
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	f7fd ff29 	bl	800d6c0 <__errno>
 800f86e:	ecbd 8b02 	vpop	{d8}
 800f872:	2321      	movs	r3, #33	; 0x21
 800f874:	6003      	str	r3, [r0, #0]
 800f876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f87a:	4803      	ldr	r0, [pc, #12]	; (800f888 <log+0x78>)
 800f87c:	f000 b884 	b.w	800f988 <nan>
 800f880:	00000000 	.word	0x00000000
 800f884:	fff00000 	.word	0xfff00000
 800f888:	08011002 	.word	0x08011002

0800f88c <pow>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	ed2d 8b02 	vpush	{d8}
 800f892:	eeb0 8a40 	vmov.f32	s16, s0
 800f896:	eef0 8a60 	vmov.f32	s17, s1
 800f89a:	ec55 4b11 	vmov	r4, r5, d1
 800f89e:	f000 fa37 	bl	800fd10 <__ieee754_pow>
 800f8a2:	4622      	mov	r2, r4
 800f8a4:	462b      	mov	r3, r5
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	ec57 6b10 	vmov	r6, r7, d0
 800f8ae:	f7f1 f95d 	bl	8000b6c <__aeabi_dcmpun>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d13b      	bne.n	800f92e <pow+0xa2>
 800f8b6:	ec51 0b18 	vmov	r0, r1, d8
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f7f1 f923 	bl	8000b08 <__aeabi_dcmpeq>
 800f8c2:	b1b8      	cbz	r0, 800f8f4 <pow+0x68>
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7f1 f91c 	bl	8000b08 <__aeabi_dcmpeq>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d146      	bne.n	800f962 <pow+0xd6>
 800f8d4:	ec45 4b10 	vmov	d0, r4, r5
 800f8d8:	f000 f848 	bl	800f96c <finite>
 800f8dc:	b338      	cbz	r0, 800f92e <pow+0xa2>
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	f7f1 f919 	bl	8000b1c <__aeabi_dcmplt>
 800f8ea:	b300      	cbz	r0, 800f92e <pow+0xa2>
 800f8ec:	f7fd fee8 	bl	800d6c0 <__errno>
 800f8f0:	2322      	movs	r3, #34	; 0x22
 800f8f2:	e01b      	b.n	800f92c <pow+0xa0>
 800f8f4:	ec47 6b10 	vmov	d0, r6, r7
 800f8f8:	f000 f838 	bl	800f96c <finite>
 800f8fc:	b9e0      	cbnz	r0, 800f938 <pow+0xac>
 800f8fe:	eeb0 0a48 	vmov.f32	s0, s16
 800f902:	eef0 0a68 	vmov.f32	s1, s17
 800f906:	f000 f831 	bl	800f96c <finite>
 800f90a:	b1a8      	cbz	r0, 800f938 <pow+0xac>
 800f90c:	ec45 4b10 	vmov	d0, r4, r5
 800f910:	f000 f82c 	bl	800f96c <finite>
 800f914:	b180      	cbz	r0, 800f938 <pow+0xac>
 800f916:	4632      	mov	r2, r6
 800f918:	463b      	mov	r3, r7
 800f91a:	4630      	mov	r0, r6
 800f91c:	4639      	mov	r1, r7
 800f91e:	f7f1 f925 	bl	8000b6c <__aeabi_dcmpun>
 800f922:	2800      	cmp	r0, #0
 800f924:	d0e2      	beq.n	800f8ec <pow+0x60>
 800f926:	f7fd fecb 	bl	800d6c0 <__errno>
 800f92a:	2321      	movs	r3, #33	; 0x21
 800f92c:	6003      	str	r3, [r0, #0]
 800f92e:	ecbd 8b02 	vpop	{d8}
 800f932:	ec47 6b10 	vmov	d0, r6, r7
 800f936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f938:	2200      	movs	r2, #0
 800f93a:	2300      	movs	r3, #0
 800f93c:	4630      	mov	r0, r6
 800f93e:	4639      	mov	r1, r7
 800f940:	f7f1 f8e2 	bl	8000b08 <__aeabi_dcmpeq>
 800f944:	2800      	cmp	r0, #0
 800f946:	d0f2      	beq.n	800f92e <pow+0xa2>
 800f948:	eeb0 0a48 	vmov.f32	s0, s16
 800f94c:	eef0 0a68 	vmov.f32	s1, s17
 800f950:	f000 f80c 	bl	800f96c <finite>
 800f954:	2800      	cmp	r0, #0
 800f956:	d0ea      	beq.n	800f92e <pow+0xa2>
 800f958:	ec45 4b10 	vmov	d0, r4, r5
 800f95c:	f000 f806 	bl	800f96c <finite>
 800f960:	e7c3      	b.n	800f8ea <pow+0x5e>
 800f962:	4f01      	ldr	r7, [pc, #4]	; (800f968 <pow+0xdc>)
 800f964:	2600      	movs	r6, #0
 800f966:	e7e2      	b.n	800f92e <pow+0xa2>
 800f968:	3ff00000 	.word	0x3ff00000

0800f96c <finite>:
 800f96c:	b082      	sub	sp, #8
 800f96e:	ed8d 0b00 	vstr	d0, [sp]
 800f972:	9801      	ldr	r0, [sp, #4]
 800f974:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f978:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f97c:	0fc0      	lsrs	r0, r0, #31
 800f97e:	b002      	add	sp, #8
 800f980:	4770      	bx	lr
 800f982:	0000      	movs	r0, r0
 800f984:	0000      	movs	r0, r0
	...

0800f988 <nan>:
 800f988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f990 <nan+0x8>
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	00000000 	.word	0x00000000
 800f994:	7ff80000 	.word	0x7ff80000

0800f998 <__ieee754_log>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	ec51 0b10 	vmov	r0, r1, d0
 800f9a0:	ed2d 8b04 	vpush	{d8-d9}
 800f9a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	460d      	mov	r5, r1
 800f9ac:	da29      	bge.n	800fa02 <__ieee754_log+0x6a>
 800f9ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9b2:	4303      	orrs	r3, r0
 800f9b4:	ee10 2a10 	vmov	r2, s0
 800f9b8:	d10c      	bne.n	800f9d4 <__ieee754_log+0x3c>
 800f9ba:	49cf      	ldr	r1, [pc, #828]	; (800fcf8 <__ieee754_log+0x360>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	2300      	movs	r3, #0
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f7f0 ff63 	bl	800088c <__aeabi_ddiv>
 800f9c6:	ec41 0b10 	vmov	d0, r0, r1
 800f9ca:	b003      	add	sp, #12
 800f9cc:	ecbd 8b04 	vpop	{d8-d9}
 800f9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	da05      	bge.n	800f9e4 <__ieee754_log+0x4c>
 800f9d8:	460b      	mov	r3, r1
 800f9da:	f7f0 fc75 	bl	80002c8 <__aeabi_dsub>
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e7ee      	b.n	800f9c2 <__ieee754_log+0x2a>
 800f9e4:	4bc5      	ldr	r3, [pc, #788]	; (800fcfc <__ieee754_log+0x364>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f7f0 fe26 	bl	8000638 <__aeabi_dmul>
 800f9ec:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	4ac3      	ldr	r2, [pc, #780]	; (800fd00 <__ieee754_log+0x368>)
 800f9f4:	4295      	cmp	r5, r2
 800f9f6:	dd06      	ble.n	800fa06 <__ieee754_log+0x6e>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	f7f0 fc66 	bl	80002cc <__adddf3>
 800fa00:	e7e1      	b.n	800f9c6 <__ieee754_log+0x2e>
 800fa02:	2300      	movs	r3, #0
 800fa04:	e7f5      	b.n	800f9f2 <__ieee754_log+0x5a>
 800fa06:	152c      	asrs	r4, r5, #20
 800fa08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fa0c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fa10:	441c      	add	r4, r3
 800fa12:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800fa16:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800fa1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa1e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800fa22:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800fa26:	ea42 0105 	orr.w	r1, r2, r5
 800fa2a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800fa2e:	2200      	movs	r2, #0
 800fa30:	4bb4      	ldr	r3, [pc, #720]	; (800fd04 <__ieee754_log+0x36c>)
 800fa32:	f7f0 fc49 	bl	80002c8 <__aeabi_dsub>
 800fa36:	1cab      	adds	r3, r5, #2
 800fa38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	4682      	mov	sl, r0
 800fa40:	468b      	mov	fp, r1
 800fa42:	f04f 0200 	mov.w	r2, #0
 800fa46:	dc53      	bgt.n	800faf0 <__ieee754_log+0x158>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f7f1 f85d 	bl	8000b08 <__aeabi_dcmpeq>
 800fa4e:	b1d0      	cbz	r0, 800fa86 <__ieee754_log+0xee>
 800fa50:	2c00      	cmp	r4, #0
 800fa52:	f000 8122 	beq.w	800fc9a <__ieee754_log+0x302>
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7f0 fd84 	bl	8000564 <__aeabi_i2d>
 800fa5c:	a390      	add	r3, pc, #576	; (adr r3, 800fca0 <__ieee754_log+0x308>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	4606      	mov	r6, r0
 800fa64:	460f      	mov	r7, r1
 800fa66:	f7f0 fde7 	bl	8000638 <__aeabi_dmul>
 800fa6a:	a38f      	add	r3, pc, #572	; (adr r3, 800fca8 <__ieee754_log+0x310>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	4604      	mov	r4, r0
 800fa72:	460d      	mov	r5, r1
 800fa74:	4630      	mov	r0, r6
 800fa76:	4639      	mov	r1, r7
 800fa78:	f7f0 fdde 	bl	8000638 <__aeabi_dmul>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4620      	mov	r0, r4
 800fa82:	4629      	mov	r1, r5
 800fa84:	e7ba      	b.n	800f9fc <__ieee754_log+0x64>
 800fa86:	a38a      	add	r3, pc, #552	; (adr r3, 800fcb0 <__ieee754_log+0x318>)
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	4659      	mov	r1, fp
 800fa90:	f7f0 fdd2 	bl	8000638 <__aeabi_dmul>
 800fa94:	4602      	mov	r2, r0
 800fa96:	460b      	mov	r3, r1
 800fa98:	2000      	movs	r0, #0
 800fa9a:	499b      	ldr	r1, [pc, #620]	; (800fd08 <__ieee754_log+0x370>)
 800fa9c:	f7f0 fc14 	bl	80002c8 <__aeabi_dsub>
 800faa0:	4652      	mov	r2, sl
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	465b      	mov	r3, fp
 800faa8:	4650      	mov	r0, sl
 800faaa:	4659      	mov	r1, fp
 800faac:	f7f0 fdc4 	bl	8000638 <__aeabi_dmul>
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	4630      	mov	r0, r6
 800fab6:	4639      	mov	r1, r7
 800fab8:	f7f0 fdbe 	bl	8000638 <__aeabi_dmul>
 800fabc:	4606      	mov	r6, r0
 800fabe:	460f      	mov	r7, r1
 800fac0:	b914      	cbnz	r4, 800fac8 <__ieee754_log+0x130>
 800fac2:	4632      	mov	r2, r6
 800fac4:	463b      	mov	r3, r7
 800fac6:	e0a2      	b.n	800fc0e <__ieee754_log+0x276>
 800fac8:	4620      	mov	r0, r4
 800faca:	f7f0 fd4b 	bl	8000564 <__aeabi_i2d>
 800face:	a374      	add	r3, pc, #464	; (adr r3, 800fca0 <__ieee754_log+0x308>)
 800fad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad4:	4680      	mov	r8, r0
 800fad6:	4689      	mov	r9, r1
 800fad8:	f7f0 fdae 	bl	8000638 <__aeabi_dmul>
 800fadc:	a372      	add	r3, pc, #456	; (adr r3, 800fca8 <__ieee754_log+0x310>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	4604      	mov	r4, r0
 800fae4:	460d      	mov	r5, r1
 800fae6:	4640      	mov	r0, r8
 800fae8:	4649      	mov	r1, r9
 800faea:	f7f0 fda5 	bl	8000638 <__aeabi_dmul>
 800faee:	e0a7      	b.n	800fc40 <__ieee754_log+0x2a8>
 800faf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800faf4:	f7f0 fbea 	bl	80002cc <__adddf3>
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4650      	mov	r0, sl
 800fafe:	4659      	mov	r1, fp
 800fb00:	f7f0 fec4 	bl	800088c <__aeabi_ddiv>
 800fb04:	ec41 0b18 	vmov	d8, r0, r1
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f7f0 fd2b 	bl	8000564 <__aeabi_i2d>
 800fb0e:	ec53 2b18 	vmov	r2, r3, d8
 800fb12:	ec41 0b19 	vmov	d9, r0, r1
 800fb16:	ec51 0b18 	vmov	r0, r1, d8
 800fb1a:	f7f0 fd8d 	bl	8000638 <__aeabi_dmul>
 800fb1e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800fb22:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800fb26:	9301      	str	r3, [sp, #4]
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	4689      	mov	r9, r1
 800fb30:	f7f0 fd82 	bl	8000638 <__aeabi_dmul>
 800fb34:	a360      	add	r3, pc, #384	; (adr r3, 800fcb8 <__ieee754_log+0x320>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	460f      	mov	r7, r1
 800fb3e:	f7f0 fd7b 	bl	8000638 <__aeabi_dmul>
 800fb42:	a35f      	add	r3, pc, #380	; (adr r3, 800fcc0 <__ieee754_log+0x328>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fbc0 	bl	80002cc <__adddf3>
 800fb4c:	4632      	mov	r2, r6
 800fb4e:	463b      	mov	r3, r7
 800fb50:	f7f0 fd72 	bl	8000638 <__aeabi_dmul>
 800fb54:	a35c      	add	r3, pc, #368	; (adr r3, 800fcc8 <__ieee754_log+0x330>)
 800fb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5a:	f7f0 fbb7 	bl	80002cc <__adddf3>
 800fb5e:	4632      	mov	r2, r6
 800fb60:	463b      	mov	r3, r7
 800fb62:	f7f0 fd69 	bl	8000638 <__aeabi_dmul>
 800fb66:	a35a      	add	r3, pc, #360	; (adr r3, 800fcd0 <__ieee754_log+0x338>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	f7f0 fbae 	bl	80002cc <__adddf3>
 800fb70:	4642      	mov	r2, r8
 800fb72:	464b      	mov	r3, r9
 800fb74:	f7f0 fd60 	bl	8000638 <__aeabi_dmul>
 800fb78:	a357      	add	r3, pc, #348	; (adr r3, 800fcd8 <__ieee754_log+0x340>)
 800fb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7e:	4680      	mov	r8, r0
 800fb80:	4689      	mov	r9, r1
 800fb82:	4630      	mov	r0, r6
 800fb84:	4639      	mov	r1, r7
 800fb86:	f7f0 fd57 	bl	8000638 <__aeabi_dmul>
 800fb8a:	a355      	add	r3, pc, #340	; (adr r3, 800fce0 <__ieee754_log+0x348>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	f7f0 fb9c 	bl	80002cc <__adddf3>
 800fb94:	4632      	mov	r2, r6
 800fb96:	463b      	mov	r3, r7
 800fb98:	f7f0 fd4e 	bl	8000638 <__aeabi_dmul>
 800fb9c:	a352      	add	r3, pc, #328	; (adr r3, 800fce8 <__ieee754_log+0x350>)
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	f7f0 fb93 	bl	80002cc <__adddf3>
 800fba6:	4632      	mov	r2, r6
 800fba8:	463b      	mov	r3, r7
 800fbaa:	f7f0 fd45 	bl	8000638 <__aeabi_dmul>
 800fbae:	460b      	mov	r3, r1
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	4649      	mov	r1, r9
 800fbb4:	4640      	mov	r0, r8
 800fbb6:	f7f0 fb89 	bl	80002cc <__adddf3>
 800fbba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800fbbe:	9b01      	ldr	r3, [sp, #4]
 800fbc0:	3551      	adds	r5, #81	; 0x51
 800fbc2:	431d      	orrs	r5, r3
 800fbc4:	2d00      	cmp	r5, #0
 800fbc6:	4680      	mov	r8, r0
 800fbc8:	4689      	mov	r9, r1
 800fbca:	dd48      	ble.n	800fc5e <__ieee754_log+0x2c6>
 800fbcc:	4b4e      	ldr	r3, [pc, #312]	; (800fd08 <__ieee754_log+0x370>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	4650      	mov	r0, sl
 800fbd2:	4659      	mov	r1, fp
 800fbd4:	f7f0 fd30 	bl	8000638 <__aeabi_dmul>
 800fbd8:	4652      	mov	r2, sl
 800fbda:	465b      	mov	r3, fp
 800fbdc:	f7f0 fd2c 	bl	8000638 <__aeabi_dmul>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	460f      	mov	r7, r1
 800fbe8:	4640      	mov	r0, r8
 800fbea:	4649      	mov	r1, r9
 800fbec:	f7f0 fb6e 	bl	80002cc <__adddf3>
 800fbf0:	ec53 2b18 	vmov	r2, r3, d8
 800fbf4:	f7f0 fd20 	bl	8000638 <__aeabi_dmul>
 800fbf8:	4680      	mov	r8, r0
 800fbfa:	4689      	mov	r9, r1
 800fbfc:	b964      	cbnz	r4, 800fc18 <__ieee754_log+0x280>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f7f0 fb5f 	bl	80002c8 <__aeabi_dsub>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	4650      	mov	r0, sl
 800fc10:	4659      	mov	r1, fp
 800fc12:	f7f0 fb59 	bl	80002c8 <__aeabi_dsub>
 800fc16:	e6d6      	b.n	800f9c6 <__ieee754_log+0x2e>
 800fc18:	a321      	add	r3, pc, #132	; (adr r3, 800fca0 <__ieee754_log+0x308>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	ec51 0b19 	vmov	r0, r1, d9
 800fc22:	f7f0 fd09 	bl	8000638 <__aeabi_dmul>
 800fc26:	a320      	add	r3, pc, #128	; (adr r3, 800fca8 <__ieee754_log+0x310>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	460d      	mov	r5, r1
 800fc30:	ec51 0b19 	vmov	r0, r1, d9
 800fc34:	f7f0 fd00 	bl	8000638 <__aeabi_dmul>
 800fc38:	4642      	mov	r2, r8
 800fc3a:	464b      	mov	r3, r9
 800fc3c:	f7f0 fb46 	bl	80002cc <__adddf3>
 800fc40:	4602      	mov	r2, r0
 800fc42:	460b      	mov	r3, r1
 800fc44:	4630      	mov	r0, r6
 800fc46:	4639      	mov	r1, r7
 800fc48:	f7f0 fb3e 	bl	80002c8 <__aeabi_dsub>
 800fc4c:	4652      	mov	r2, sl
 800fc4e:	465b      	mov	r3, fp
 800fc50:	f7f0 fb3a 	bl	80002c8 <__aeabi_dsub>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	e7d9      	b.n	800fc12 <__ieee754_log+0x27a>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4650      	mov	r0, sl
 800fc64:	4659      	mov	r1, fp
 800fc66:	f7f0 fb2f 	bl	80002c8 <__aeabi_dsub>
 800fc6a:	ec53 2b18 	vmov	r2, r3, d8
 800fc6e:	f7f0 fce3 	bl	8000638 <__aeabi_dmul>
 800fc72:	4606      	mov	r6, r0
 800fc74:	460f      	mov	r7, r1
 800fc76:	2c00      	cmp	r4, #0
 800fc78:	f43f af23 	beq.w	800fac2 <__ieee754_log+0x12a>
 800fc7c:	a308      	add	r3, pc, #32	; (adr r3, 800fca0 <__ieee754_log+0x308>)
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	ec51 0b19 	vmov	r0, r1, d9
 800fc86:	f7f0 fcd7 	bl	8000638 <__aeabi_dmul>
 800fc8a:	a307      	add	r3, pc, #28	; (adr r3, 800fca8 <__ieee754_log+0x310>)
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	4604      	mov	r4, r0
 800fc92:	460d      	mov	r5, r1
 800fc94:	ec51 0b19 	vmov	r0, r1, d9
 800fc98:	e727      	b.n	800faea <__ieee754_log+0x152>
 800fc9a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800fcf0 <__ieee754_log+0x358>
 800fc9e:	e694      	b.n	800f9ca <__ieee754_log+0x32>
 800fca0:	fee00000 	.word	0xfee00000
 800fca4:	3fe62e42 	.word	0x3fe62e42
 800fca8:	35793c76 	.word	0x35793c76
 800fcac:	3dea39ef 	.word	0x3dea39ef
 800fcb0:	55555555 	.word	0x55555555
 800fcb4:	3fd55555 	.word	0x3fd55555
 800fcb8:	df3e5244 	.word	0xdf3e5244
 800fcbc:	3fc2f112 	.word	0x3fc2f112
 800fcc0:	96cb03de 	.word	0x96cb03de
 800fcc4:	3fc74664 	.word	0x3fc74664
 800fcc8:	94229359 	.word	0x94229359
 800fccc:	3fd24924 	.word	0x3fd24924
 800fcd0:	55555593 	.word	0x55555593
 800fcd4:	3fe55555 	.word	0x3fe55555
 800fcd8:	d078c69f 	.word	0xd078c69f
 800fcdc:	3fc39a09 	.word	0x3fc39a09
 800fce0:	1d8e78af 	.word	0x1d8e78af
 800fce4:	3fcc71c5 	.word	0x3fcc71c5
 800fce8:	9997fa04 	.word	0x9997fa04
 800fcec:	3fd99999 	.word	0x3fd99999
	...
 800fcf8:	c3500000 	.word	0xc3500000
 800fcfc:	43500000 	.word	0x43500000
 800fd00:	7fefffff 	.word	0x7fefffff
 800fd04:	3ff00000 	.word	0x3ff00000
 800fd08:	3fe00000 	.word	0x3fe00000
 800fd0c:	00000000 	.word	0x00000000

0800fd10 <__ieee754_pow>:
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	ed2d 8b06 	vpush	{d8-d10}
 800fd18:	b089      	sub	sp, #36	; 0x24
 800fd1a:	ed8d 1b00 	vstr	d1, [sp]
 800fd1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fd22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fd26:	ea58 0102 	orrs.w	r1, r8, r2
 800fd2a:	ec57 6b10 	vmov	r6, r7, d0
 800fd2e:	d115      	bne.n	800fd5c <__ieee754_pow+0x4c>
 800fd30:	19b3      	adds	r3, r6, r6
 800fd32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fd36:	4152      	adcs	r2, r2
 800fd38:	4299      	cmp	r1, r3
 800fd3a:	4b89      	ldr	r3, [pc, #548]	; (800ff60 <__ieee754_pow+0x250>)
 800fd3c:	4193      	sbcs	r3, r2
 800fd3e:	f080 84d1 	bcs.w	80106e4 <__ieee754_pow+0x9d4>
 800fd42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 fabf 	bl	80002cc <__adddf3>
 800fd4e:	ec41 0b10 	vmov	d0, r0, r1
 800fd52:	b009      	add	sp, #36	; 0x24
 800fd54:	ecbd 8b06 	vpop	{d8-d10}
 800fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5c:	4b81      	ldr	r3, [pc, #516]	; (800ff64 <__ieee754_pow+0x254>)
 800fd5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fd62:	429c      	cmp	r4, r3
 800fd64:	ee10 aa10 	vmov	sl, s0
 800fd68:	463d      	mov	r5, r7
 800fd6a:	dc06      	bgt.n	800fd7a <__ieee754_pow+0x6a>
 800fd6c:	d101      	bne.n	800fd72 <__ieee754_pow+0x62>
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	d1e7      	bne.n	800fd42 <__ieee754_pow+0x32>
 800fd72:	4598      	cmp	r8, r3
 800fd74:	dc01      	bgt.n	800fd7a <__ieee754_pow+0x6a>
 800fd76:	d10f      	bne.n	800fd98 <__ieee754_pow+0x88>
 800fd78:	b172      	cbz	r2, 800fd98 <__ieee754_pow+0x88>
 800fd7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800fd7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800fd82:	ea55 050a 	orrs.w	r5, r5, sl
 800fd86:	d1dc      	bne.n	800fd42 <__ieee754_pow+0x32>
 800fd88:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd8c:	18db      	adds	r3, r3, r3
 800fd8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fd92:	4152      	adcs	r2, r2
 800fd94:	429d      	cmp	r5, r3
 800fd96:	e7d0      	b.n	800fd3a <__ieee754_pow+0x2a>
 800fd98:	2d00      	cmp	r5, #0
 800fd9a:	da3b      	bge.n	800fe14 <__ieee754_pow+0x104>
 800fd9c:	4b72      	ldr	r3, [pc, #456]	; (800ff68 <__ieee754_pow+0x258>)
 800fd9e:	4598      	cmp	r8, r3
 800fda0:	dc51      	bgt.n	800fe46 <__ieee754_pow+0x136>
 800fda2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fda6:	4598      	cmp	r8, r3
 800fda8:	f340 84ab 	ble.w	8010702 <__ieee754_pow+0x9f2>
 800fdac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fdb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fdb4:	2b14      	cmp	r3, #20
 800fdb6:	dd0f      	ble.n	800fdd8 <__ieee754_pow+0xc8>
 800fdb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fdbc:	fa22 f103 	lsr.w	r1, r2, r3
 800fdc0:	fa01 f303 	lsl.w	r3, r1, r3
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	f040 849c 	bne.w	8010702 <__ieee754_pow+0x9f2>
 800fdca:	f001 0101 	and.w	r1, r1, #1
 800fdce:	f1c1 0302 	rsb	r3, r1, #2
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	b182      	cbz	r2, 800fdf8 <__ieee754_pow+0xe8>
 800fdd6:	e05f      	b.n	800fe98 <__ieee754_pow+0x188>
 800fdd8:	2a00      	cmp	r2, #0
 800fdda:	d15b      	bne.n	800fe94 <__ieee754_pow+0x184>
 800fddc:	f1c3 0314 	rsb	r3, r3, #20
 800fde0:	fa48 f103 	asr.w	r1, r8, r3
 800fde4:	fa01 f303 	lsl.w	r3, r1, r3
 800fde8:	4543      	cmp	r3, r8
 800fdea:	f040 8487 	bne.w	80106fc <__ieee754_pow+0x9ec>
 800fdee:	f001 0101 	and.w	r1, r1, #1
 800fdf2:	f1c1 0302 	rsb	r3, r1, #2
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	4b5c      	ldr	r3, [pc, #368]	; (800ff6c <__ieee754_pow+0x25c>)
 800fdfa:	4598      	cmp	r8, r3
 800fdfc:	d132      	bne.n	800fe64 <__ieee754_pow+0x154>
 800fdfe:	f1b9 0f00 	cmp.w	r9, #0
 800fe02:	f280 8477 	bge.w	80106f4 <__ieee754_pow+0x9e4>
 800fe06:	4959      	ldr	r1, [pc, #356]	; (800ff6c <__ieee754_pow+0x25c>)
 800fe08:	4632      	mov	r2, r6
 800fe0a:	463b      	mov	r3, r7
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	f7f0 fd3d 	bl	800088c <__aeabi_ddiv>
 800fe12:	e79c      	b.n	800fd4e <__ieee754_pow+0x3e>
 800fe14:	2300      	movs	r3, #0
 800fe16:	9304      	str	r3, [sp, #16]
 800fe18:	2a00      	cmp	r2, #0
 800fe1a:	d13d      	bne.n	800fe98 <__ieee754_pow+0x188>
 800fe1c:	4b51      	ldr	r3, [pc, #324]	; (800ff64 <__ieee754_pow+0x254>)
 800fe1e:	4598      	cmp	r8, r3
 800fe20:	d1ea      	bne.n	800fdf8 <__ieee754_pow+0xe8>
 800fe22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fe26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fe2a:	ea53 030a 	orrs.w	r3, r3, sl
 800fe2e:	f000 8459 	beq.w	80106e4 <__ieee754_pow+0x9d4>
 800fe32:	4b4f      	ldr	r3, [pc, #316]	; (800ff70 <__ieee754_pow+0x260>)
 800fe34:	429c      	cmp	r4, r3
 800fe36:	dd08      	ble.n	800fe4a <__ieee754_pow+0x13a>
 800fe38:	f1b9 0f00 	cmp.w	r9, #0
 800fe3c:	f2c0 8456 	blt.w	80106ec <__ieee754_pow+0x9dc>
 800fe40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe44:	e783      	b.n	800fd4e <__ieee754_pow+0x3e>
 800fe46:	2302      	movs	r3, #2
 800fe48:	e7e5      	b.n	800fe16 <__ieee754_pow+0x106>
 800fe4a:	f1b9 0f00 	cmp.w	r9, #0
 800fe4e:	f04f 0000 	mov.w	r0, #0
 800fe52:	f04f 0100 	mov.w	r1, #0
 800fe56:	f6bf af7a 	bge.w	800fd4e <__ieee754_pow+0x3e>
 800fe5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fe5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe62:	e774      	b.n	800fd4e <__ieee754_pow+0x3e>
 800fe64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fe68:	d106      	bne.n	800fe78 <__ieee754_pow+0x168>
 800fe6a:	4632      	mov	r2, r6
 800fe6c:	463b      	mov	r3, r7
 800fe6e:	4630      	mov	r0, r6
 800fe70:	4639      	mov	r1, r7
 800fe72:	f7f0 fbe1 	bl	8000638 <__aeabi_dmul>
 800fe76:	e76a      	b.n	800fd4e <__ieee754_pow+0x3e>
 800fe78:	4b3e      	ldr	r3, [pc, #248]	; (800ff74 <__ieee754_pow+0x264>)
 800fe7a:	4599      	cmp	r9, r3
 800fe7c:	d10c      	bne.n	800fe98 <__ieee754_pow+0x188>
 800fe7e:	2d00      	cmp	r5, #0
 800fe80:	db0a      	blt.n	800fe98 <__ieee754_pow+0x188>
 800fe82:	ec47 6b10 	vmov	d0, r6, r7
 800fe86:	b009      	add	sp, #36	; 0x24
 800fe88:	ecbd 8b06 	vpop	{d8-d10}
 800fe8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	f000 bd20 	b.w	80108d4 <__ieee754_sqrt>
 800fe94:	2300      	movs	r3, #0
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	ec47 6b10 	vmov	d0, r6, r7
 800fe9c:	f000 fc62 	bl	8010764 <fabs>
 800fea0:	ec51 0b10 	vmov	r0, r1, d0
 800fea4:	f1ba 0f00 	cmp.w	sl, #0
 800fea8:	d129      	bne.n	800fefe <__ieee754_pow+0x1ee>
 800feaa:	b124      	cbz	r4, 800feb6 <__ieee754_pow+0x1a6>
 800feac:	4b2f      	ldr	r3, [pc, #188]	; (800ff6c <__ieee754_pow+0x25c>)
 800feae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d123      	bne.n	800fefe <__ieee754_pow+0x1ee>
 800feb6:	f1b9 0f00 	cmp.w	r9, #0
 800feba:	da05      	bge.n	800fec8 <__ieee754_pow+0x1b8>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	2000      	movs	r0, #0
 800fec2:	492a      	ldr	r1, [pc, #168]	; (800ff6c <__ieee754_pow+0x25c>)
 800fec4:	f7f0 fce2 	bl	800088c <__aeabi_ddiv>
 800fec8:	2d00      	cmp	r5, #0
 800feca:	f6bf af40 	bge.w	800fd4e <__ieee754_pow+0x3e>
 800fece:	9b04      	ldr	r3, [sp, #16]
 800fed0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fed4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fed8:	431c      	orrs	r4, r3
 800feda:	d108      	bne.n	800feee <__ieee754_pow+0x1de>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4610      	mov	r0, r2
 800fee2:	4619      	mov	r1, r3
 800fee4:	f7f0 f9f0 	bl	80002c8 <__aeabi_dsub>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	e78f      	b.n	800fe0e <__ieee754_pow+0xfe>
 800feee:	9b04      	ldr	r3, [sp, #16]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	f47f af2c 	bne.w	800fd4e <__ieee754_pow+0x3e>
 800fef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fefa:	4619      	mov	r1, r3
 800fefc:	e727      	b.n	800fd4e <__ieee754_pow+0x3e>
 800fefe:	0feb      	lsrs	r3, r5, #31
 800ff00:	3b01      	subs	r3, #1
 800ff02:	9306      	str	r3, [sp, #24]
 800ff04:	9a06      	ldr	r2, [sp, #24]
 800ff06:	9b04      	ldr	r3, [sp, #16]
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	d102      	bne.n	800ff12 <__ieee754_pow+0x202>
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	463b      	mov	r3, r7
 800ff10:	e7e6      	b.n	800fee0 <__ieee754_pow+0x1d0>
 800ff12:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <__ieee754_pow+0x268>)
 800ff14:	4598      	cmp	r8, r3
 800ff16:	f340 80fb 	ble.w	8010110 <__ieee754_pow+0x400>
 800ff1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ff1e:	4598      	cmp	r8, r3
 800ff20:	4b13      	ldr	r3, [pc, #76]	; (800ff70 <__ieee754_pow+0x260>)
 800ff22:	dd0c      	ble.n	800ff3e <__ieee754_pow+0x22e>
 800ff24:	429c      	cmp	r4, r3
 800ff26:	dc0f      	bgt.n	800ff48 <__ieee754_pow+0x238>
 800ff28:	f1b9 0f00 	cmp.w	r9, #0
 800ff2c:	da0f      	bge.n	800ff4e <__ieee754_pow+0x23e>
 800ff2e:	2000      	movs	r0, #0
 800ff30:	b009      	add	sp, #36	; 0x24
 800ff32:	ecbd 8b06 	vpop	{d8-d10}
 800ff36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3a:	f000 bcc2 	b.w	80108c2 <__math_oflow>
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	dbf2      	blt.n	800ff28 <__ieee754_pow+0x218>
 800ff42:	4b0a      	ldr	r3, [pc, #40]	; (800ff6c <__ieee754_pow+0x25c>)
 800ff44:	429c      	cmp	r4, r3
 800ff46:	dd19      	ble.n	800ff7c <__ieee754_pow+0x26c>
 800ff48:	f1b9 0f00 	cmp.w	r9, #0
 800ff4c:	dcef      	bgt.n	800ff2e <__ieee754_pow+0x21e>
 800ff4e:	2000      	movs	r0, #0
 800ff50:	b009      	add	sp, #36	; 0x24
 800ff52:	ecbd 8b06 	vpop	{d8-d10}
 800ff56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5a:	f000 bca9 	b.w	80108b0 <__math_uflow>
 800ff5e:	bf00      	nop
 800ff60:	fff00000 	.word	0xfff00000
 800ff64:	7ff00000 	.word	0x7ff00000
 800ff68:	433fffff 	.word	0x433fffff
 800ff6c:	3ff00000 	.word	0x3ff00000
 800ff70:	3fefffff 	.word	0x3fefffff
 800ff74:	3fe00000 	.word	0x3fe00000
 800ff78:	41e00000 	.word	0x41e00000
 800ff7c:	4b60      	ldr	r3, [pc, #384]	; (8010100 <__ieee754_pow+0x3f0>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f7f0 f9a2 	bl	80002c8 <__aeabi_dsub>
 800ff84:	a354      	add	r3, pc, #336	; (adr r3, 80100d8 <__ieee754_pow+0x3c8>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	460d      	mov	r5, r1
 800ff8e:	f7f0 fb53 	bl	8000638 <__aeabi_dmul>
 800ff92:	a353      	add	r3, pc, #332	; (adr r3, 80100e0 <__ieee754_pow+0x3d0>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	4606      	mov	r6, r0
 800ff9a:	460f      	mov	r7, r1
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	f7f0 fb4a 	bl	8000638 <__aeabi_dmul>
 800ffa4:	4b57      	ldr	r3, [pc, #348]	; (8010104 <__ieee754_pow+0x3f4>)
 800ffa6:	4682      	mov	sl, r0
 800ffa8:	468b      	mov	fp, r1
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 fb42 	bl	8000638 <__aeabi_dmul>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	a14b      	add	r1, pc, #300	; (adr r1, 80100e8 <__ieee754_pow+0x3d8>)
 800ffba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffbe:	f7f0 f983 	bl	80002c8 <__aeabi_dsub>
 800ffc2:	4622      	mov	r2, r4
 800ffc4:	462b      	mov	r3, r5
 800ffc6:	f7f0 fb37 	bl	8000638 <__aeabi_dmul>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	460b      	mov	r3, r1
 800ffce:	2000      	movs	r0, #0
 800ffd0:	494d      	ldr	r1, [pc, #308]	; (8010108 <__ieee754_pow+0x3f8>)
 800ffd2:	f7f0 f979 	bl	80002c8 <__aeabi_dsub>
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	4680      	mov	r8, r0
 800ffda:	4689      	mov	r9, r1
 800ffdc:	462b      	mov	r3, r5
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 fb29 	bl	8000638 <__aeabi_dmul>
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	4640      	mov	r0, r8
 800ffec:	4649      	mov	r1, r9
 800ffee:	f7f0 fb23 	bl	8000638 <__aeabi_dmul>
 800fff2:	a33f      	add	r3, pc, #252	; (adr r3, 80100f0 <__ieee754_pow+0x3e0>)
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	f7f0 fb1e 	bl	8000638 <__aeabi_dmul>
 800fffc:	4602      	mov	r2, r0
 800fffe:	460b      	mov	r3, r1
 8010000:	4650      	mov	r0, sl
 8010002:	4659      	mov	r1, fp
 8010004:	f7f0 f960 	bl	80002c8 <__aeabi_dsub>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	4680      	mov	r8, r0
 801000e:	4689      	mov	r9, r1
 8010010:	4630      	mov	r0, r6
 8010012:	4639      	mov	r1, r7
 8010014:	f7f0 f95a 	bl	80002cc <__adddf3>
 8010018:	2000      	movs	r0, #0
 801001a:	4632      	mov	r2, r6
 801001c:	463b      	mov	r3, r7
 801001e:	4604      	mov	r4, r0
 8010020:	460d      	mov	r5, r1
 8010022:	f7f0 f951 	bl	80002c8 <__aeabi_dsub>
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4640      	mov	r0, r8
 801002c:	4649      	mov	r1, r9
 801002e:	f7f0 f94b 	bl	80002c8 <__aeabi_dsub>
 8010032:	9b04      	ldr	r3, [sp, #16]
 8010034:	9a06      	ldr	r2, [sp, #24]
 8010036:	3b01      	subs	r3, #1
 8010038:	4313      	orrs	r3, r2
 801003a:	4682      	mov	sl, r0
 801003c:	468b      	mov	fp, r1
 801003e:	f040 81e7 	bne.w	8010410 <__ieee754_pow+0x700>
 8010042:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80100f8 <__ieee754_pow+0x3e8>
 8010046:	eeb0 8a47 	vmov.f32	s16, s14
 801004a:	eef0 8a67 	vmov.f32	s17, s15
 801004e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010052:	2600      	movs	r6, #0
 8010054:	4632      	mov	r2, r6
 8010056:	463b      	mov	r3, r7
 8010058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801005c:	f7f0 f934 	bl	80002c8 <__aeabi_dsub>
 8010060:	4622      	mov	r2, r4
 8010062:	462b      	mov	r3, r5
 8010064:	f7f0 fae8 	bl	8000638 <__aeabi_dmul>
 8010068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801006c:	4680      	mov	r8, r0
 801006e:	4689      	mov	r9, r1
 8010070:	4650      	mov	r0, sl
 8010072:	4659      	mov	r1, fp
 8010074:	f7f0 fae0 	bl	8000638 <__aeabi_dmul>
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4640      	mov	r0, r8
 801007e:	4649      	mov	r1, r9
 8010080:	f7f0 f924 	bl	80002cc <__adddf3>
 8010084:	4632      	mov	r2, r6
 8010086:	463b      	mov	r3, r7
 8010088:	4680      	mov	r8, r0
 801008a:	4689      	mov	r9, r1
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 fad2 	bl	8000638 <__aeabi_dmul>
 8010094:	460b      	mov	r3, r1
 8010096:	4604      	mov	r4, r0
 8010098:	460d      	mov	r5, r1
 801009a:	4602      	mov	r2, r0
 801009c:	4649      	mov	r1, r9
 801009e:	4640      	mov	r0, r8
 80100a0:	f7f0 f914 	bl	80002cc <__adddf3>
 80100a4:	4b19      	ldr	r3, [pc, #100]	; (801010c <__ieee754_pow+0x3fc>)
 80100a6:	4299      	cmp	r1, r3
 80100a8:	ec45 4b19 	vmov	d9, r4, r5
 80100ac:	4606      	mov	r6, r0
 80100ae:	460f      	mov	r7, r1
 80100b0:	468b      	mov	fp, r1
 80100b2:	f340 82f0 	ble.w	8010696 <__ieee754_pow+0x986>
 80100b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80100ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80100be:	4303      	orrs	r3, r0
 80100c0:	f000 81e4 	beq.w	801048c <__ieee754_pow+0x77c>
 80100c4:	ec51 0b18 	vmov	r0, r1, d8
 80100c8:	2200      	movs	r2, #0
 80100ca:	2300      	movs	r3, #0
 80100cc:	f7f0 fd26 	bl	8000b1c <__aeabi_dcmplt>
 80100d0:	3800      	subs	r0, #0
 80100d2:	bf18      	it	ne
 80100d4:	2001      	movne	r0, #1
 80100d6:	e72b      	b.n	800ff30 <__ieee754_pow+0x220>
 80100d8:	60000000 	.word	0x60000000
 80100dc:	3ff71547 	.word	0x3ff71547
 80100e0:	f85ddf44 	.word	0xf85ddf44
 80100e4:	3e54ae0b 	.word	0x3e54ae0b
 80100e8:	55555555 	.word	0x55555555
 80100ec:	3fd55555 	.word	0x3fd55555
 80100f0:	652b82fe 	.word	0x652b82fe
 80100f4:	3ff71547 	.word	0x3ff71547
 80100f8:	00000000 	.word	0x00000000
 80100fc:	bff00000 	.word	0xbff00000
 8010100:	3ff00000 	.word	0x3ff00000
 8010104:	3fd00000 	.word	0x3fd00000
 8010108:	3fe00000 	.word	0x3fe00000
 801010c:	408fffff 	.word	0x408fffff
 8010110:	4bd5      	ldr	r3, [pc, #852]	; (8010468 <__ieee754_pow+0x758>)
 8010112:	402b      	ands	r3, r5
 8010114:	2200      	movs	r2, #0
 8010116:	b92b      	cbnz	r3, 8010124 <__ieee754_pow+0x414>
 8010118:	4bd4      	ldr	r3, [pc, #848]	; (801046c <__ieee754_pow+0x75c>)
 801011a:	f7f0 fa8d 	bl	8000638 <__aeabi_dmul>
 801011e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010122:	460c      	mov	r4, r1
 8010124:	1523      	asrs	r3, r4, #20
 8010126:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801012a:	4413      	add	r3, r2
 801012c:	9305      	str	r3, [sp, #20]
 801012e:	4bd0      	ldr	r3, [pc, #832]	; (8010470 <__ieee754_pow+0x760>)
 8010130:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010134:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010138:	429c      	cmp	r4, r3
 801013a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801013e:	dd08      	ble.n	8010152 <__ieee754_pow+0x442>
 8010140:	4bcc      	ldr	r3, [pc, #816]	; (8010474 <__ieee754_pow+0x764>)
 8010142:	429c      	cmp	r4, r3
 8010144:	f340 8162 	ble.w	801040c <__ieee754_pow+0x6fc>
 8010148:	9b05      	ldr	r3, [sp, #20]
 801014a:	3301      	adds	r3, #1
 801014c:	9305      	str	r3, [sp, #20]
 801014e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010152:	2400      	movs	r4, #0
 8010154:	00e3      	lsls	r3, r4, #3
 8010156:	9307      	str	r3, [sp, #28]
 8010158:	4bc7      	ldr	r3, [pc, #796]	; (8010478 <__ieee754_pow+0x768>)
 801015a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801015e:	ed93 7b00 	vldr	d7, [r3]
 8010162:	4629      	mov	r1, r5
 8010164:	ec53 2b17 	vmov	r2, r3, d7
 8010168:	eeb0 9a47 	vmov.f32	s18, s14
 801016c:	eef0 9a67 	vmov.f32	s19, s15
 8010170:	4682      	mov	sl, r0
 8010172:	f7f0 f8a9 	bl	80002c8 <__aeabi_dsub>
 8010176:	4652      	mov	r2, sl
 8010178:	4606      	mov	r6, r0
 801017a:	460f      	mov	r7, r1
 801017c:	462b      	mov	r3, r5
 801017e:	ec51 0b19 	vmov	r0, r1, d9
 8010182:	f7f0 f8a3 	bl	80002cc <__adddf3>
 8010186:	4602      	mov	r2, r0
 8010188:	460b      	mov	r3, r1
 801018a:	2000      	movs	r0, #0
 801018c:	49bb      	ldr	r1, [pc, #748]	; (801047c <__ieee754_pow+0x76c>)
 801018e:	f7f0 fb7d 	bl	800088c <__aeabi_ddiv>
 8010192:	ec41 0b1a 	vmov	d10, r0, r1
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4630      	mov	r0, r6
 801019c:	4639      	mov	r1, r7
 801019e:	f7f0 fa4b 	bl	8000638 <__aeabi_dmul>
 80101a2:	2300      	movs	r3, #0
 80101a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101a8:	9302      	str	r3, [sp, #8]
 80101aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80101ae:	46ab      	mov	fp, r5
 80101b0:	106d      	asrs	r5, r5, #1
 80101b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80101b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80101ba:	ec41 0b18 	vmov	d8, r0, r1
 80101be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80101c2:	2200      	movs	r2, #0
 80101c4:	4640      	mov	r0, r8
 80101c6:	4649      	mov	r1, r9
 80101c8:	4614      	mov	r4, r2
 80101ca:	461d      	mov	r5, r3
 80101cc:	f7f0 fa34 	bl	8000638 <__aeabi_dmul>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	4630      	mov	r0, r6
 80101d6:	4639      	mov	r1, r7
 80101d8:	f7f0 f876 	bl	80002c8 <__aeabi_dsub>
 80101dc:	ec53 2b19 	vmov	r2, r3, d9
 80101e0:	4606      	mov	r6, r0
 80101e2:	460f      	mov	r7, r1
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 f86e 	bl	80002c8 <__aeabi_dsub>
 80101ec:	4602      	mov	r2, r0
 80101ee:	460b      	mov	r3, r1
 80101f0:	4650      	mov	r0, sl
 80101f2:	4659      	mov	r1, fp
 80101f4:	f7f0 f868 	bl	80002c8 <__aeabi_dsub>
 80101f8:	4642      	mov	r2, r8
 80101fa:	464b      	mov	r3, r9
 80101fc:	f7f0 fa1c 	bl	8000638 <__aeabi_dmul>
 8010200:	4602      	mov	r2, r0
 8010202:	460b      	mov	r3, r1
 8010204:	4630      	mov	r0, r6
 8010206:	4639      	mov	r1, r7
 8010208:	f7f0 f85e 	bl	80002c8 <__aeabi_dsub>
 801020c:	ec53 2b1a 	vmov	r2, r3, d10
 8010210:	f7f0 fa12 	bl	8000638 <__aeabi_dmul>
 8010214:	ec53 2b18 	vmov	r2, r3, d8
 8010218:	ec41 0b19 	vmov	d9, r0, r1
 801021c:	ec51 0b18 	vmov	r0, r1, d8
 8010220:	f7f0 fa0a 	bl	8000638 <__aeabi_dmul>
 8010224:	a37c      	add	r3, pc, #496	; (adr r3, 8010418 <__ieee754_pow+0x708>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	4604      	mov	r4, r0
 801022c:	460d      	mov	r5, r1
 801022e:	f7f0 fa03 	bl	8000638 <__aeabi_dmul>
 8010232:	a37b      	add	r3, pc, #492	; (adr r3, 8010420 <__ieee754_pow+0x710>)
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	f7f0 f848 	bl	80002cc <__adddf3>
 801023c:	4622      	mov	r2, r4
 801023e:	462b      	mov	r3, r5
 8010240:	f7f0 f9fa 	bl	8000638 <__aeabi_dmul>
 8010244:	a378      	add	r3, pc, #480	; (adr r3, 8010428 <__ieee754_pow+0x718>)
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	f7f0 f83f 	bl	80002cc <__adddf3>
 801024e:	4622      	mov	r2, r4
 8010250:	462b      	mov	r3, r5
 8010252:	f7f0 f9f1 	bl	8000638 <__aeabi_dmul>
 8010256:	a376      	add	r3, pc, #472	; (adr r3, 8010430 <__ieee754_pow+0x720>)
 8010258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025c:	f7f0 f836 	bl	80002cc <__adddf3>
 8010260:	4622      	mov	r2, r4
 8010262:	462b      	mov	r3, r5
 8010264:	f7f0 f9e8 	bl	8000638 <__aeabi_dmul>
 8010268:	a373      	add	r3, pc, #460	; (adr r3, 8010438 <__ieee754_pow+0x728>)
 801026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026e:	f7f0 f82d 	bl	80002cc <__adddf3>
 8010272:	4622      	mov	r2, r4
 8010274:	462b      	mov	r3, r5
 8010276:	f7f0 f9df 	bl	8000638 <__aeabi_dmul>
 801027a:	a371      	add	r3, pc, #452	; (adr r3, 8010440 <__ieee754_pow+0x730>)
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	f7f0 f824 	bl	80002cc <__adddf3>
 8010284:	4622      	mov	r2, r4
 8010286:	4606      	mov	r6, r0
 8010288:	460f      	mov	r7, r1
 801028a:	462b      	mov	r3, r5
 801028c:	4620      	mov	r0, r4
 801028e:	4629      	mov	r1, r5
 8010290:	f7f0 f9d2 	bl	8000638 <__aeabi_dmul>
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	4630      	mov	r0, r6
 801029a:	4639      	mov	r1, r7
 801029c:	f7f0 f9cc 	bl	8000638 <__aeabi_dmul>
 80102a0:	4642      	mov	r2, r8
 80102a2:	4604      	mov	r4, r0
 80102a4:	460d      	mov	r5, r1
 80102a6:	464b      	mov	r3, r9
 80102a8:	ec51 0b18 	vmov	r0, r1, d8
 80102ac:	f7f0 f80e 	bl	80002cc <__adddf3>
 80102b0:	ec53 2b19 	vmov	r2, r3, d9
 80102b4:	f7f0 f9c0 	bl	8000638 <__aeabi_dmul>
 80102b8:	4622      	mov	r2, r4
 80102ba:	462b      	mov	r3, r5
 80102bc:	f7f0 f806 	bl	80002cc <__adddf3>
 80102c0:	4642      	mov	r2, r8
 80102c2:	4682      	mov	sl, r0
 80102c4:	468b      	mov	fp, r1
 80102c6:	464b      	mov	r3, r9
 80102c8:	4640      	mov	r0, r8
 80102ca:	4649      	mov	r1, r9
 80102cc:	f7f0 f9b4 	bl	8000638 <__aeabi_dmul>
 80102d0:	4b6b      	ldr	r3, [pc, #428]	; (8010480 <__ieee754_pow+0x770>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	4606      	mov	r6, r0
 80102d6:	460f      	mov	r7, r1
 80102d8:	f7ef fff8 	bl	80002cc <__adddf3>
 80102dc:	4652      	mov	r2, sl
 80102de:	465b      	mov	r3, fp
 80102e0:	f7ef fff4 	bl	80002cc <__adddf3>
 80102e4:	2000      	movs	r0, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	460d      	mov	r5, r1
 80102ea:	4602      	mov	r2, r0
 80102ec:	460b      	mov	r3, r1
 80102ee:	4640      	mov	r0, r8
 80102f0:	4649      	mov	r1, r9
 80102f2:	f7f0 f9a1 	bl	8000638 <__aeabi_dmul>
 80102f6:	4b62      	ldr	r3, [pc, #392]	; (8010480 <__ieee754_pow+0x770>)
 80102f8:	4680      	mov	r8, r0
 80102fa:	4689      	mov	r9, r1
 80102fc:	2200      	movs	r2, #0
 80102fe:	4620      	mov	r0, r4
 8010300:	4629      	mov	r1, r5
 8010302:	f7ef ffe1 	bl	80002c8 <__aeabi_dsub>
 8010306:	4632      	mov	r2, r6
 8010308:	463b      	mov	r3, r7
 801030a:	f7ef ffdd 	bl	80002c8 <__aeabi_dsub>
 801030e:	4602      	mov	r2, r0
 8010310:	460b      	mov	r3, r1
 8010312:	4650      	mov	r0, sl
 8010314:	4659      	mov	r1, fp
 8010316:	f7ef ffd7 	bl	80002c8 <__aeabi_dsub>
 801031a:	ec53 2b18 	vmov	r2, r3, d8
 801031e:	f7f0 f98b 	bl	8000638 <__aeabi_dmul>
 8010322:	4622      	mov	r2, r4
 8010324:	4606      	mov	r6, r0
 8010326:	460f      	mov	r7, r1
 8010328:	462b      	mov	r3, r5
 801032a:	ec51 0b19 	vmov	r0, r1, d9
 801032e:	f7f0 f983 	bl	8000638 <__aeabi_dmul>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	4630      	mov	r0, r6
 8010338:	4639      	mov	r1, r7
 801033a:	f7ef ffc7 	bl	80002cc <__adddf3>
 801033e:	4606      	mov	r6, r0
 8010340:	460f      	mov	r7, r1
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	4640      	mov	r0, r8
 8010348:	4649      	mov	r1, r9
 801034a:	f7ef ffbf 	bl	80002cc <__adddf3>
 801034e:	a33e      	add	r3, pc, #248	; (adr r3, 8010448 <__ieee754_pow+0x738>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	2000      	movs	r0, #0
 8010356:	4604      	mov	r4, r0
 8010358:	460d      	mov	r5, r1
 801035a:	f7f0 f96d 	bl	8000638 <__aeabi_dmul>
 801035e:	4642      	mov	r2, r8
 8010360:	ec41 0b18 	vmov	d8, r0, r1
 8010364:	464b      	mov	r3, r9
 8010366:	4620      	mov	r0, r4
 8010368:	4629      	mov	r1, r5
 801036a:	f7ef ffad 	bl	80002c8 <__aeabi_dsub>
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	4630      	mov	r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	f7ef ffa7 	bl	80002c8 <__aeabi_dsub>
 801037a:	a335      	add	r3, pc, #212	; (adr r3, 8010450 <__ieee754_pow+0x740>)
 801037c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010380:	f7f0 f95a 	bl	8000638 <__aeabi_dmul>
 8010384:	a334      	add	r3, pc, #208	; (adr r3, 8010458 <__ieee754_pow+0x748>)
 8010386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038a:	4606      	mov	r6, r0
 801038c:	460f      	mov	r7, r1
 801038e:	4620      	mov	r0, r4
 8010390:	4629      	mov	r1, r5
 8010392:	f7f0 f951 	bl	8000638 <__aeabi_dmul>
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	4630      	mov	r0, r6
 801039c:	4639      	mov	r1, r7
 801039e:	f7ef ff95 	bl	80002cc <__adddf3>
 80103a2:	9a07      	ldr	r2, [sp, #28]
 80103a4:	4b37      	ldr	r3, [pc, #220]	; (8010484 <__ieee754_pow+0x774>)
 80103a6:	4413      	add	r3, r2
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff8e 	bl	80002cc <__adddf3>
 80103b0:	4682      	mov	sl, r0
 80103b2:	9805      	ldr	r0, [sp, #20]
 80103b4:	468b      	mov	fp, r1
 80103b6:	f7f0 f8d5 	bl	8000564 <__aeabi_i2d>
 80103ba:	9a07      	ldr	r2, [sp, #28]
 80103bc:	4b32      	ldr	r3, [pc, #200]	; (8010488 <__ieee754_pow+0x778>)
 80103be:	4413      	add	r3, r2
 80103c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80103c4:	4606      	mov	r6, r0
 80103c6:	460f      	mov	r7, r1
 80103c8:	4652      	mov	r2, sl
 80103ca:	465b      	mov	r3, fp
 80103cc:	ec51 0b18 	vmov	r0, r1, d8
 80103d0:	f7ef ff7c 	bl	80002cc <__adddf3>
 80103d4:	4642      	mov	r2, r8
 80103d6:	464b      	mov	r3, r9
 80103d8:	f7ef ff78 	bl	80002cc <__adddf3>
 80103dc:	4632      	mov	r2, r6
 80103de:	463b      	mov	r3, r7
 80103e0:	f7ef ff74 	bl	80002cc <__adddf3>
 80103e4:	2000      	movs	r0, #0
 80103e6:	4632      	mov	r2, r6
 80103e8:	463b      	mov	r3, r7
 80103ea:	4604      	mov	r4, r0
 80103ec:	460d      	mov	r5, r1
 80103ee:	f7ef ff6b 	bl	80002c8 <__aeabi_dsub>
 80103f2:	4642      	mov	r2, r8
 80103f4:	464b      	mov	r3, r9
 80103f6:	f7ef ff67 	bl	80002c8 <__aeabi_dsub>
 80103fa:	ec53 2b18 	vmov	r2, r3, d8
 80103fe:	f7ef ff63 	bl	80002c8 <__aeabi_dsub>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4650      	mov	r0, sl
 8010408:	4659      	mov	r1, fp
 801040a:	e610      	b.n	801002e <__ieee754_pow+0x31e>
 801040c:	2401      	movs	r4, #1
 801040e:	e6a1      	b.n	8010154 <__ieee754_pow+0x444>
 8010410:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010460 <__ieee754_pow+0x750>
 8010414:	e617      	b.n	8010046 <__ieee754_pow+0x336>
 8010416:	bf00      	nop
 8010418:	4a454eef 	.word	0x4a454eef
 801041c:	3fca7e28 	.word	0x3fca7e28
 8010420:	93c9db65 	.word	0x93c9db65
 8010424:	3fcd864a 	.word	0x3fcd864a
 8010428:	a91d4101 	.word	0xa91d4101
 801042c:	3fd17460 	.word	0x3fd17460
 8010430:	518f264d 	.word	0x518f264d
 8010434:	3fd55555 	.word	0x3fd55555
 8010438:	db6fabff 	.word	0xdb6fabff
 801043c:	3fdb6db6 	.word	0x3fdb6db6
 8010440:	33333303 	.word	0x33333303
 8010444:	3fe33333 	.word	0x3fe33333
 8010448:	e0000000 	.word	0xe0000000
 801044c:	3feec709 	.word	0x3feec709
 8010450:	dc3a03fd 	.word	0xdc3a03fd
 8010454:	3feec709 	.word	0x3feec709
 8010458:	145b01f5 	.word	0x145b01f5
 801045c:	be3e2fe0 	.word	0xbe3e2fe0
 8010460:	00000000 	.word	0x00000000
 8010464:	3ff00000 	.word	0x3ff00000
 8010468:	7ff00000 	.word	0x7ff00000
 801046c:	43400000 	.word	0x43400000
 8010470:	0003988e 	.word	0x0003988e
 8010474:	000bb679 	.word	0x000bb679
 8010478:	08011108 	.word	0x08011108
 801047c:	3ff00000 	.word	0x3ff00000
 8010480:	40080000 	.word	0x40080000
 8010484:	08011128 	.word	0x08011128
 8010488:	08011118 	.word	0x08011118
 801048c:	a3b3      	add	r3, pc, #716	; (adr r3, 801075c <__ieee754_pow+0xa4c>)
 801048e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010492:	4640      	mov	r0, r8
 8010494:	4649      	mov	r1, r9
 8010496:	f7ef ff19 	bl	80002cc <__adddf3>
 801049a:	4622      	mov	r2, r4
 801049c:	ec41 0b1a 	vmov	d10, r0, r1
 80104a0:	462b      	mov	r3, r5
 80104a2:	4630      	mov	r0, r6
 80104a4:	4639      	mov	r1, r7
 80104a6:	f7ef ff0f 	bl	80002c8 <__aeabi_dsub>
 80104aa:	4602      	mov	r2, r0
 80104ac:	460b      	mov	r3, r1
 80104ae:	ec51 0b1a 	vmov	r0, r1, d10
 80104b2:	f7f0 fb51 	bl	8000b58 <__aeabi_dcmpgt>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f47f ae04 	bne.w	80100c4 <__ieee754_pow+0x3b4>
 80104bc:	4aa2      	ldr	r2, [pc, #648]	; (8010748 <__ieee754_pow+0xa38>)
 80104be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104c2:	4293      	cmp	r3, r2
 80104c4:	f340 8107 	ble.w	80106d6 <__ieee754_pow+0x9c6>
 80104c8:	151b      	asrs	r3, r3, #20
 80104ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80104ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80104d2:	fa4a fa03 	asr.w	sl, sl, r3
 80104d6:	44da      	add	sl, fp
 80104d8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80104dc:	489b      	ldr	r0, [pc, #620]	; (801074c <__ieee754_pow+0xa3c>)
 80104de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80104e2:	4108      	asrs	r0, r1
 80104e4:	ea00 030a 	and.w	r3, r0, sl
 80104e8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80104ec:	f1c1 0114 	rsb	r1, r1, #20
 80104f0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80104f4:	fa4a fa01 	asr.w	sl, sl, r1
 80104f8:	f1bb 0f00 	cmp.w	fp, #0
 80104fc:	f04f 0200 	mov.w	r2, #0
 8010500:	4620      	mov	r0, r4
 8010502:	4629      	mov	r1, r5
 8010504:	bfb8      	it	lt
 8010506:	f1ca 0a00 	rsblt	sl, sl, #0
 801050a:	f7ef fedd 	bl	80002c8 <__aeabi_dsub>
 801050e:	ec41 0b19 	vmov	d9, r0, r1
 8010512:	4642      	mov	r2, r8
 8010514:	464b      	mov	r3, r9
 8010516:	ec51 0b19 	vmov	r0, r1, d9
 801051a:	f7ef fed7 	bl	80002cc <__adddf3>
 801051e:	a37a      	add	r3, pc, #488	; (adr r3, 8010708 <__ieee754_pow+0x9f8>)
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	2000      	movs	r0, #0
 8010526:	4604      	mov	r4, r0
 8010528:	460d      	mov	r5, r1
 801052a:	f7f0 f885 	bl	8000638 <__aeabi_dmul>
 801052e:	ec53 2b19 	vmov	r2, r3, d9
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	4620      	mov	r0, r4
 8010538:	4629      	mov	r1, r5
 801053a:	f7ef fec5 	bl	80002c8 <__aeabi_dsub>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	4640      	mov	r0, r8
 8010544:	4649      	mov	r1, r9
 8010546:	f7ef febf 	bl	80002c8 <__aeabi_dsub>
 801054a:	a371      	add	r3, pc, #452	; (adr r3, 8010710 <__ieee754_pow+0xa00>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7f0 f872 	bl	8000638 <__aeabi_dmul>
 8010554:	a370      	add	r3, pc, #448	; (adr r3, 8010718 <__ieee754_pow+0xa08>)
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	4680      	mov	r8, r0
 801055c:	4689      	mov	r9, r1
 801055e:	4620      	mov	r0, r4
 8010560:	4629      	mov	r1, r5
 8010562:	f7f0 f869 	bl	8000638 <__aeabi_dmul>
 8010566:	4602      	mov	r2, r0
 8010568:	460b      	mov	r3, r1
 801056a:	4640      	mov	r0, r8
 801056c:	4649      	mov	r1, r9
 801056e:	f7ef fead 	bl	80002cc <__adddf3>
 8010572:	4604      	mov	r4, r0
 8010574:	460d      	mov	r5, r1
 8010576:	4602      	mov	r2, r0
 8010578:	460b      	mov	r3, r1
 801057a:	4630      	mov	r0, r6
 801057c:	4639      	mov	r1, r7
 801057e:	f7ef fea5 	bl	80002cc <__adddf3>
 8010582:	4632      	mov	r2, r6
 8010584:	463b      	mov	r3, r7
 8010586:	4680      	mov	r8, r0
 8010588:	4689      	mov	r9, r1
 801058a:	f7ef fe9d 	bl	80002c8 <__aeabi_dsub>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	4620      	mov	r0, r4
 8010594:	4629      	mov	r1, r5
 8010596:	f7ef fe97 	bl	80002c8 <__aeabi_dsub>
 801059a:	4642      	mov	r2, r8
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	464b      	mov	r3, r9
 80105a2:	4640      	mov	r0, r8
 80105a4:	4649      	mov	r1, r9
 80105a6:	f7f0 f847 	bl	8000638 <__aeabi_dmul>
 80105aa:	a35d      	add	r3, pc, #372	; (adr r3, 8010720 <__ieee754_pow+0xa10>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	4604      	mov	r4, r0
 80105b2:	460d      	mov	r5, r1
 80105b4:	f7f0 f840 	bl	8000638 <__aeabi_dmul>
 80105b8:	a35b      	add	r3, pc, #364	; (adr r3, 8010728 <__ieee754_pow+0xa18>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7ef fe83 	bl	80002c8 <__aeabi_dsub>
 80105c2:	4622      	mov	r2, r4
 80105c4:	462b      	mov	r3, r5
 80105c6:	f7f0 f837 	bl	8000638 <__aeabi_dmul>
 80105ca:	a359      	add	r3, pc, #356	; (adr r3, 8010730 <__ieee754_pow+0xa20>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	f7ef fe7c 	bl	80002cc <__adddf3>
 80105d4:	4622      	mov	r2, r4
 80105d6:	462b      	mov	r3, r5
 80105d8:	f7f0 f82e 	bl	8000638 <__aeabi_dmul>
 80105dc:	a356      	add	r3, pc, #344	; (adr r3, 8010738 <__ieee754_pow+0xa28>)
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	f7ef fe71 	bl	80002c8 <__aeabi_dsub>
 80105e6:	4622      	mov	r2, r4
 80105e8:	462b      	mov	r3, r5
 80105ea:	f7f0 f825 	bl	8000638 <__aeabi_dmul>
 80105ee:	a354      	add	r3, pc, #336	; (adr r3, 8010740 <__ieee754_pow+0xa30>)
 80105f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f4:	f7ef fe6a 	bl	80002cc <__adddf3>
 80105f8:	4622      	mov	r2, r4
 80105fa:	462b      	mov	r3, r5
 80105fc:	f7f0 f81c 	bl	8000638 <__aeabi_dmul>
 8010600:	4602      	mov	r2, r0
 8010602:	460b      	mov	r3, r1
 8010604:	4640      	mov	r0, r8
 8010606:	4649      	mov	r1, r9
 8010608:	f7ef fe5e 	bl	80002c8 <__aeabi_dsub>
 801060c:	4604      	mov	r4, r0
 801060e:	460d      	mov	r5, r1
 8010610:	4602      	mov	r2, r0
 8010612:	460b      	mov	r3, r1
 8010614:	4640      	mov	r0, r8
 8010616:	4649      	mov	r1, r9
 8010618:	f7f0 f80e 	bl	8000638 <__aeabi_dmul>
 801061c:	2200      	movs	r2, #0
 801061e:	ec41 0b19 	vmov	d9, r0, r1
 8010622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010626:	4620      	mov	r0, r4
 8010628:	4629      	mov	r1, r5
 801062a:	f7ef fe4d 	bl	80002c8 <__aeabi_dsub>
 801062e:	4602      	mov	r2, r0
 8010630:	460b      	mov	r3, r1
 8010632:	ec51 0b19 	vmov	r0, r1, d9
 8010636:	f7f0 f929 	bl	800088c <__aeabi_ddiv>
 801063a:	4632      	mov	r2, r6
 801063c:	4604      	mov	r4, r0
 801063e:	460d      	mov	r5, r1
 8010640:	463b      	mov	r3, r7
 8010642:	4640      	mov	r0, r8
 8010644:	4649      	mov	r1, r9
 8010646:	f7ef fff7 	bl	8000638 <__aeabi_dmul>
 801064a:	4632      	mov	r2, r6
 801064c:	463b      	mov	r3, r7
 801064e:	f7ef fe3d 	bl	80002cc <__adddf3>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	4620      	mov	r0, r4
 8010658:	4629      	mov	r1, r5
 801065a:	f7ef fe35 	bl	80002c8 <__aeabi_dsub>
 801065e:	4642      	mov	r2, r8
 8010660:	464b      	mov	r3, r9
 8010662:	f7ef fe31 	bl	80002c8 <__aeabi_dsub>
 8010666:	460b      	mov	r3, r1
 8010668:	4602      	mov	r2, r0
 801066a:	4939      	ldr	r1, [pc, #228]	; (8010750 <__ieee754_pow+0xa40>)
 801066c:	2000      	movs	r0, #0
 801066e:	f7ef fe2b 	bl	80002c8 <__aeabi_dsub>
 8010672:	ec41 0b10 	vmov	d0, r0, r1
 8010676:	ee10 3a90 	vmov	r3, s1
 801067a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801067e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010682:	da2b      	bge.n	80106dc <__ieee754_pow+0x9cc>
 8010684:	4650      	mov	r0, sl
 8010686:	f000 f877 	bl	8010778 <scalbn>
 801068a:	ec51 0b10 	vmov	r0, r1, d0
 801068e:	ec53 2b18 	vmov	r2, r3, d8
 8010692:	f7ff bbee 	b.w	800fe72 <__ieee754_pow+0x162>
 8010696:	4b2f      	ldr	r3, [pc, #188]	; (8010754 <__ieee754_pow+0xa44>)
 8010698:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801069c:	429e      	cmp	r6, r3
 801069e:	f77f af0d 	ble.w	80104bc <__ieee754_pow+0x7ac>
 80106a2:	4b2d      	ldr	r3, [pc, #180]	; (8010758 <__ieee754_pow+0xa48>)
 80106a4:	440b      	add	r3, r1
 80106a6:	4303      	orrs	r3, r0
 80106a8:	d009      	beq.n	80106be <__ieee754_pow+0x9ae>
 80106aa:	ec51 0b18 	vmov	r0, r1, d8
 80106ae:	2200      	movs	r2, #0
 80106b0:	2300      	movs	r3, #0
 80106b2:	f7f0 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80106b6:	3800      	subs	r0, #0
 80106b8:	bf18      	it	ne
 80106ba:	2001      	movne	r0, #1
 80106bc:	e448      	b.n	800ff50 <__ieee754_pow+0x240>
 80106be:	4622      	mov	r2, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	f7ef fe01 	bl	80002c8 <__aeabi_dsub>
 80106c6:	4642      	mov	r2, r8
 80106c8:	464b      	mov	r3, r9
 80106ca:	f7f0 fa3b 	bl	8000b44 <__aeabi_dcmpge>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	f43f aef4 	beq.w	80104bc <__ieee754_pow+0x7ac>
 80106d4:	e7e9      	b.n	80106aa <__ieee754_pow+0x99a>
 80106d6:	f04f 0a00 	mov.w	sl, #0
 80106da:	e71a      	b.n	8010512 <__ieee754_pow+0x802>
 80106dc:	ec51 0b10 	vmov	r0, r1, d0
 80106e0:	4619      	mov	r1, r3
 80106e2:	e7d4      	b.n	801068e <__ieee754_pow+0x97e>
 80106e4:	491a      	ldr	r1, [pc, #104]	; (8010750 <__ieee754_pow+0xa40>)
 80106e6:	2000      	movs	r0, #0
 80106e8:	f7ff bb31 	b.w	800fd4e <__ieee754_pow+0x3e>
 80106ec:	2000      	movs	r0, #0
 80106ee:	2100      	movs	r1, #0
 80106f0:	f7ff bb2d 	b.w	800fd4e <__ieee754_pow+0x3e>
 80106f4:	4630      	mov	r0, r6
 80106f6:	4639      	mov	r1, r7
 80106f8:	f7ff bb29 	b.w	800fd4e <__ieee754_pow+0x3e>
 80106fc:	9204      	str	r2, [sp, #16]
 80106fe:	f7ff bb7b 	b.w	800fdf8 <__ieee754_pow+0xe8>
 8010702:	2300      	movs	r3, #0
 8010704:	f7ff bb65 	b.w	800fdd2 <__ieee754_pow+0xc2>
 8010708:	00000000 	.word	0x00000000
 801070c:	3fe62e43 	.word	0x3fe62e43
 8010710:	fefa39ef 	.word	0xfefa39ef
 8010714:	3fe62e42 	.word	0x3fe62e42
 8010718:	0ca86c39 	.word	0x0ca86c39
 801071c:	be205c61 	.word	0xbe205c61
 8010720:	72bea4d0 	.word	0x72bea4d0
 8010724:	3e663769 	.word	0x3e663769
 8010728:	c5d26bf1 	.word	0xc5d26bf1
 801072c:	3ebbbd41 	.word	0x3ebbbd41
 8010730:	af25de2c 	.word	0xaf25de2c
 8010734:	3f11566a 	.word	0x3f11566a
 8010738:	16bebd93 	.word	0x16bebd93
 801073c:	3f66c16c 	.word	0x3f66c16c
 8010740:	5555553e 	.word	0x5555553e
 8010744:	3fc55555 	.word	0x3fc55555
 8010748:	3fe00000 	.word	0x3fe00000
 801074c:	fff00000 	.word	0xfff00000
 8010750:	3ff00000 	.word	0x3ff00000
 8010754:	4090cbff 	.word	0x4090cbff
 8010758:	3f6f3400 	.word	0x3f6f3400
 801075c:	652b82fe 	.word	0x652b82fe
 8010760:	3c971547 	.word	0x3c971547

08010764 <fabs>:
 8010764:	ec51 0b10 	vmov	r0, r1, d0
 8010768:	ee10 2a10 	vmov	r2, s0
 801076c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010770:	ec43 2b10 	vmov	d0, r2, r3
 8010774:	4770      	bx	lr
	...

08010778 <scalbn>:
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	ec55 4b10 	vmov	r4, r5, d0
 801077e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010782:	4606      	mov	r6, r0
 8010784:	462b      	mov	r3, r5
 8010786:	b999      	cbnz	r1, 80107b0 <scalbn+0x38>
 8010788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801078c:	4323      	orrs	r3, r4
 801078e:	d03f      	beq.n	8010810 <scalbn+0x98>
 8010790:	4b35      	ldr	r3, [pc, #212]	; (8010868 <scalbn+0xf0>)
 8010792:	4629      	mov	r1, r5
 8010794:	ee10 0a10 	vmov	r0, s0
 8010798:	2200      	movs	r2, #0
 801079a:	f7ef ff4d 	bl	8000638 <__aeabi_dmul>
 801079e:	4b33      	ldr	r3, [pc, #204]	; (801086c <scalbn+0xf4>)
 80107a0:	429e      	cmp	r6, r3
 80107a2:	4604      	mov	r4, r0
 80107a4:	460d      	mov	r5, r1
 80107a6:	da10      	bge.n	80107ca <scalbn+0x52>
 80107a8:	a327      	add	r3, pc, #156	; (adr r3, 8010848 <scalbn+0xd0>)
 80107aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ae:	e01f      	b.n	80107f0 <scalbn+0x78>
 80107b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80107b4:	4291      	cmp	r1, r2
 80107b6:	d10c      	bne.n	80107d2 <scalbn+0x5a>
 80107b8:	ee10 2a10 	vmov	r2, s0
 80107bc:	4620      	mov	r0, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	f7ef fd84 	bl	80002cc <__adddf3>
 80107c4:	4604      	mov	r4, r0
 80107c6:	460d      	mov	r5, r1
 80107c8:	e022      	b.n	8010810 <scalbn+0x98>
 80107ca:	460b      	mov	r3, r1
 80107cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80107d0:	3936      	subs	r1, #54	; 0x36
 80107d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80107d6:	4296      	cmp	r6, r2
 80107d8:	dd0d      	ble.n	80107f6 <scalbn+0x7e>
 80107da:	2d00      	cmp	r5, #0
 80107dc:	a11c      	add	r1, pc, #112	; (adr r1, 8010850 <scalbn+0xd8>)
 80107de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107e2:	da02      	bge.n	80107ea <scalbn+0x72>
 80107e4:	a11c      	add	r1, pc, #112	; (adr r1, 8010858 <scalbn+0xe0>)
 80107e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107ea:	a319      	add	r3, pc, #100	; (adr r3, 8010850 <scalbn+0xd8>)
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	f7ef ff22 	bl	8000638 <__aeabi_dmul>
 80107f4:	e7e6      	b.n	80107c4 <scalbn+0x4c>
 80107f6:	1872      	adds	r2, r6, r1
 80107f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80107fc:	428a      	cmp	r2, r1
 80107fe:	dcec      	bgt.n	80107da <scalbn+0x62>
 8010800:	2a00      	cmp	r2, #0
 8010802:	dd08      	ble.n	8010816 <scalbn+0x9e>
 8010804:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010808:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801080c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010810:	ec45 4b10 	vmov	d0, r4, r5
 8010814:	bd70      	pop	{r4, r5, r6, pc}
 8010816:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801081a:	da08      	bge.n	801082e <scalbn+0xb6>
 801081c:	2d00      	cmp	r5, #0
 801081e:	a10a      	add	r1, pc, #40	; (adr r1, 8010848 <scalbn+0xd0>)
 8010820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010824:	dac0      	bge.n	80107a8 <scalbn+0x30>
 8010826:	a10e      	add	r1, pc, #56	; (adr r1, 8010860 <scalbn+0xe8>)
 8010828:	e9d1 0100 	ldrd	r0, r1, [r1]
 801082c:	e7bc      	b.n	80107a8 <scalbn+0x30>
 801082e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010832:	3236      	adds	r2, #54	; 0x36
 8010834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801083c:	4620      	mov	r0, r4
 801083e:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <scalbn+0xf8>)
 8010840:	2200      	movs	r2, #0
 8010842:	e7d5      	b.n	80107f0 <scalbn+0x78>
 8010844:	f3af 8000 	nop.w
 8010848:	c2f8f359 	.word	0xc2f8f359
 801084c:	01a56e1f 	.word	0x01a56e1f
 8010850:	8800759c 	.word	0x8800759c
 8010854:	7e37e43c 	.word	0x7e37e43c
 8010858:	8800759c 	.word	0x8800759c
 801085c:	fe37e43c 	.word	0xfe37e43c
 8010860:	c2f8f359 	.word	0xc2f8f359
 8010864:	81a56e1f 	.word	0x81a56e1f
 8010868:	43500000 	.word	0x43500000
 801086c:	ffff3cb0 	.word	0xffff3cb0
 8010870:	3c900000 	.word	0x3c900000

08010874 <with_errno>:
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	4604      	mov	r4, r0
 8010878:	460d      	mov	r5, r1
 801087a:	4616      	mov	r6, r2
 801087c:	f7fc ff20 	bl	800d6c0 <__errno>
 8010880:	4629      	mov	r1, r5
 8010882:	6006      	str	r6, [r0, #0]
 8010884:	4620      	mov	r0, r4
 8010886:	bd70      	pop	{r4, r5, r6, pc}

08010888 <xflow>:
 8010888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801088a:	4614      	mov	r4, r2
 801088c:	461d      	mov	r5, r3
 801088e:	b108      	cbz	r0, 8010894 <xflow+0xc>
 8010890:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010894:	e9cd 2300 	strd	r2, r3, [sp]
 8010898:	e9dd 2300 	ldrd	r2, r3, [sp]
 801089c:	4620      	mov	r0, r4
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef feca 	bl	8000638 <__aeabi_dmul>
 80108a4:	2222      	movs	r2, #34	; 0x22
 80108a6:	b003      	add	sp, #12
 80108a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108ac:	f7ff bfe2 	b.w	8010874 <with_errno>

080108b0 <__math_uflow>:
 80108b0:	b508      	push	{r3, lr}
 80108b2:	2200      	movs	r2, #0
 80108b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80108b8:	f7ff ffe6 	bl	8010888 <xflow>
 80108bc:	ec41 0b10 	vmov	d0, r0, r1
 80108c0:	bd08      	pop	{r3, pc}

080108c2 <__math_oflow>:
 80108c2:	b508      	push	{r3, lr}
 80108c4:	2200      	movs	r2, #0
 80108c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80108ca:	f7ff ffdd 	bl	8010888 <xflow>
 80108ce:	ec41 0b10 	vmov	d0, r0, r1
 80108d2:	bd08      	pop	{r3, pc}

080108d4 <__ieee754_sqrt>:
 80108d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d8:	ec55 4b10 	vmov	r4, r5, d0
 80108dc:	4e67      	ldr	r6, [pc, #412]	; (8010a7c <__ieee754_sqrt+0x1a8>)
 80108de:	43ae      	bics	r6, r5
 80108e0:	ee10 0a10 	vmov	r0, s0
 80108e4:	ee10 2a10 	vmov	r2, s0
 80108e8:	4629      	mov	r1, r5
 80108ea:	462b      	mov	r3, r5
 80108ec:	d10d      	bne.n	801090a <__ieee754_sqrt+0x36>
 80108ee:	f7ef fea3 	bl	8000638 <__aeabi_dmul>
 80108f2:	4602      	mov	r2, r0
 80108f4:	460b      	mov	r3, r1
 80108f6:	4620      	mov	r0, r4
 80108f8:	4629      	mov	r1, r5
 80108fa:	f7ef fce7 	bl	80002cc <__adddf3>
 80108fe:	4604      	mov	r4, r0
 8010900:	460d      	mov	r5, r1
 8010902:	ec45 4b10 	vmov	d0, r4, r5
 8010906:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090a:	2d00      	cmp	r5, #0
 801090c:	dc0b      	bgt.n	8010926 <__ieee754_sqrt+0x52>
 801090e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010912:	4326      	orrs	r6, r4
 8010914:	d0f5      	beq.n	8010902 <__ieee754_sqrt+0x2e>
 8010916:	b135      	cbz	r5, 8010926 <__ieee754_sqrt+0x52>
 8010918:	f7ef fcd6 	bl	80002c8 <__aeabi_dsub>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	f7ef ffb4 	bl	800088c <__aeabi_ddiv>
 8010924:	e7eb      	b.n	80108fe <__ieee754_sqrt+0x2a>
 8010926:	1509      	asrs	r1, r1, #20
 8010928:	f000 808d 	beq.w	8010a46 <__ieee754_sqrt+0x172>
 801092c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010930:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010938:	07c9      	lsls	r1, r1, #31
 801093a:	bf5c      	itt	pl
 801093c:	005b      	lslpl	r3, r3, #1
 801093e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010942:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010946:	bf58      	it	pl
 8010948:	0052      	lslpl	r2, r2, #1
 801094a:	2500      	movs	r5, #0
 801094c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010950:	1076      	asrs	r6, r6, #1
 8010952:	0052      	lsls	r2, r2, #1
 8010954:	f04f 0e16 	mov.w	lr, #22
 8010958:	46ac      	mov	ip, r5
 801095a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801095e:	eb0c 0001 	add.w	r0, ip, r1
 8010962:	4298      	cmp	r0, r3
 8010964:	bfde      	ittt	le
 8010966:	1a1b      	suble	r3, r3, r0
 8010968:	eb00 0c01 	addle.w	ip, r0, r1
 801096c:	186d      	addle	r5, r5, r1
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	f1be 0e01 	subs.w	lr, lr, #1
 8010974:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010978:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801097c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010980:	d1ed      	bne.n	801095e <__ieee754_sqrt+0x8a>
 8010982:	4674      	mov	r4, lr
 8010984:	2720      	movs	r7, #32
 8010986:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801098a:	4563      	cmp	r3, ip
 801098c:	eb01 000e 	add.w	r0, r1, lr
 8010990:	dc02      	bgt.n	8010998 <__ieee754_sqrt+0xc4>
 8010992:	d113      	bne.n	80109bc <__ieee754_sqrt+0xe8>
 8010994:	4290      	cmp	r0, r2
 8010996:	d811      	bhi.n	80109bc <__ieee754_sqrt+0xe8>
 8010998:	2800      	cmp	r0, #0
 801099a:	eb00 0e01 	add.w	lr, r0, r1
 801099e:	da57      	bge.n	8010a50 <__ieee754_sqrt+0x17c>
 80109a0:	f1be 0f00 	cmp.w	lr, #0
 80109a4:	db54      	blt.n	8010a50 <__ieee754_sqrt+0x17c>
 80109a6:	f10c 0801 	add.w	r8, ip, #1
 80109aa:	eba3 030c 	sub.w	r3, r3, ip
 80109ae:	4290      	cmp	r0, r2
 80109b0:	bf88      	it	hi
 80109b2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80109b6:	1a12      	subs	r2, r2, r0
 80109b8:	440c      	add	r4, r1
 80109ba:	46c4      	mov	ip, r8
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	3f01      	subs	r7, #1
 80109c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80109c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80109c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80109cc:	d1dd      	bne.n	801098a <__ieee754_sqrt+0xb6>
 80109ce:	4313      	orrs	r3, r2
 80109d0:	d01b      	beq.n	8010a0a <__ieee754_sqrt+0x136>
 80109d2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010a80 <__ieee754_sqrt+0x1ac>
 80109d6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010a84 <__ieee754_sqrt+0x1b0>
 80109da:	e9da 0100 	ldrd	r0, r1, [sl]
 80109de:	e9db 2300 	ldrd	r2, r3, [fp]
 80109e2:	f7ef fc71 	bl	80002c8 <__aeabi_dsub>
 80109e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4640      	mov	r0, r8
 80109f0:	4649      	mov	r1, r9
 80109f2:	f7f0 f89d 	bl	8000b30 <__aeabi_dcmple>
 80109f6:	b140      	cbz	r0, 8010a0a <__ieee754_sqrt+0x136>
 80109f8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80109fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a00:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a04:	d126      	bne.n	8010a54 <__ieee754_sqrt+0x180>
 8010a06:	3501      	adds	r5, #1
 8010a08:	463c      	mov	r4, r7
 8010a0a:	106a      	asrs	r2, r5, #1
 8010a0c:	0863      	lsrs	r3, r4, #1
 8010a0e:	07e9      	lsls	r1, r5, #31
 8010a10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010a14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010a18:	bf48      	it	mi
 8010a1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010a1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010a22:	461c      	mov	r4, r3
 8010a24:	e76d      	b.n	8010902 <__ieee754_sqrt+0x2e>
 8010a26:	0ad3      	lsrs	r3, r2, #11
 8010a28:	3815      	subs	r0, #21
 8010a2a:	0552      	lsls	r2, r2, #21
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d0fa      	beq.n	8010a26 <__ieee754_sqrt+0x152>
 8010a30:	02dc      	lsls	r4, r3, #11
 8010a32:	d50a      	bpl.n	8010a4a <__ieee754_sqrt+0x176>
 8010a34:	f1c1 0420 	rsb	r4, r1, #32
 8010a38:	fa22 f404 	lsr.w	r4, r2, r4
 8010a3c:	1e4d      	subs	r5, r1, #1
 8010a3e:	408a      	lsls	r2, r1
 8010a40:	4323      	orrs	r3, r4
 8010a42:	1b41      	subs	r1, r0, r5
 8010a44:	e772      	b.n	801092c <__ieee754_sqrt+0x58>
 8010a46:	4608      	mov	r0, r1
 8010a48:	e7f0      	b.n	8010a2c <__ieee754_sqrt+0x158>
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	3101      	adds	r1, #1
 8010a4e:	e7ef      	b.n	8010a30 <__ieee754_sqrt+0x15c>
 8010a50:	46e0      	mov	r8, ip
 8010a52:	e7aa      	b.n	80109aa <__ieee754_sqrt+0xd6>
 8010a54:	f7ef fc3a 	bl	80002cc <__adddf3>
 8010a58:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	460b      	mov	r3, r1
 8010a60:	4640      	mov	r0, r8
 8010a62:	4649      	mov	r1, r9
 8010a64:	f7f0 f85a 	bl	8000b1c <__aeabi_dcmplt>
 8010a68:	b120      	cbz	r0, 8010a74 <__ieee754_sqrt+0x1a0>
 8010a6a:	1ca0      	adds	r0, r4, #2
 8010a6c:	bf08      	it	eq
 8010a6e:	3501      	addeq	r5, #1
 8010a70:	3402      	adds	r4, #2
 8010a72:	e7ca      	b.n	8010a0a <__ieee754_sqrt+0x136>
 8010a74:	3401      	adds	r4, #1
 8010a76:	f024 0401 	bic.w	r4, r4, #1
 8010a7a:	e7c6      	b.n	8010a0a <__ieee754_sqrt+0x136>
 8010a7c:	7ff00000 	.word	0x7ff00000
 8010a80:	200001f8 	.word	0x200001f8
 8010a84:	20000200 	.word	0x20000200

08010a88 <_init>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	bf00      	nop
 8010a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8e:	bc08      	pop	{r3}
 8010a90:	469e      	mov	lr, r3
 8010a92:	4770      	bx	lr

08010a94 <_fini>:
 8010a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a96:	bf00      	nop
 8010a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a9a:	bc08      	pop	{r3}
 8010a9c:	469e      	mov	lr, r3
 8010a9e:	4770      	bx	lr

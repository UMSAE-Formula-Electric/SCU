
SCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011900  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08011ad0  08011ad0  00021ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121e8  080121e8  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080121e8  080121e8  000221e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121f0  080121f0  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121f0  080121f0  000221f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121f4  080121f4  000221f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080121f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e14  20000208  08012400  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000801c  08012400  0003801c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ce2  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065fc  00000000  00000000  00052f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e70  00000000  00000000  00059560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001727  00000000  00000000  0005b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ccc1  00000000  00000000  0005caf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cbd6  00000000  00000000  000897b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4ead  00000000  00000000  000b638e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090d0  00000000  00000000  001ab23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001b430c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011ab8 	.word	0x08011ab8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08011ab8 	.word	0x08011ab8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <queueAccelerationPacket>:
	angular_rate_buffer.buf_wrap		= false;
}


int queueAccelerationPacket(uint8_t data[])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f8e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <queueAccelerationPacket+0x22>
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f98:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f9e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30f      	bcc.n	8000fc6 <queueAccelerationPacket+0x42>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fa8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d035      	beq.n	8001022 <queueAccelerationPacket+0x9e>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fb8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fbe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d32d      	bcc.n	8001022 <queueAccelerationPacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		acceleration_buffer.queue[acceleration_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fc8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4401      	add	r1, r0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		acceleration_buffer.buf_end_pos++;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fe0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(acceleration_buffer.buf_end_pos % BUFFER_SIZE < acceleration_buffer.buf_end_pos)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ff0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ffc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001000:	429a      	cmp	r2, r3
 8001002:	d20c      	bcs.n	800101e <queueAccelerationPacket+0x9a>
		{
			acceleration_buffer.buf_end_pos = acceleration_buffer.buf_end_pos % BUFFER_SIZE;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001006:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001012:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			acceleration_buffer.buf_wrap = true;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <queueAccelerationPacket+0xa2>
	}

	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000228 	.word	0x20000228

08001038 <queueAngularRatePacket>:

int queueAngularRatePacket(uint8_t data[])
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001042:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <queueAngularRatePacket+0x22>
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800104c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001052:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001056:	429a      	cmp	r2, r3
 8001058:	d30f      	bcc.n	800107a <queueAngularRatePacket+0x42>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800105c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d035      	beq.n	80010d6 <queueAngularRatePacket+0x9e>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800106c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001072:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001076:	429a      	cmp	r2, r3
 8001078:	d32d      	bcc.n	80010d6 <queueAngularRatePacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		angular_rate_buffer.queue[angular_rate_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800107c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001080:	4619      	mov	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800108a:	00c9      	lsls	r1, r1, #3
 800108c:	4401      	add	r1, r0
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		angular_rate_buffer.buf_end_pos++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001094:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800109e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(angular_rate_buffer.buf_end_pos % BUFFER_SIZE < angular_rate_buffer.buf_end_pos)
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010a4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010b0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20c      	bcs.n	80010d2 <queueAngularRatePacket+0x9a>
		{
			angular_rate_buffer.buf_end_pos = angular_rate_buffer.buf_end_pos % BUFFER_SIZE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010ba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010c6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			angular_rate_buffer.buf_wrap = true;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <queueAngularRatePacket+0xa2>
	}

	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000630 	.word	0x20000630

080010ec <dequeueAccelerationPacket>:

uint64_t dequeueAccelerationPacket()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!acceleration_buffer.buf_wrap && acceleration_buffer.buf_start_pos == acceleration_buffer.buf_end_pos)
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <dequeueAccelerationPacket+0x98>)
 80010f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <dequeueAccelerationPacket+0x30>
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001104:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800110a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800110e:	429a      	cmp	r2, r3
 8001110:	d104      	bne.n	800111c <dequeueAccelerationPacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e02b      	b.n	8001174 <dequeueAccelerationPacket+0x88>
	}

	// get data value
	temp = acceleration_buffer.queue[acceleration_buffer.buf_start_pos];
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800111e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]

	acceleration_buffer.buf_start_pos++;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001132:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800113c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (acceleration_buffer.buf_start_pos % BUFFER_SIZE < acceleration_buffer.buf_start_pos)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800114e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <dequeueAccelerationPacket+0x84>
	{
		acceleration_buffer.buf_start_pos = acceleration_buffer.buf_start_pos % BUFFER_SIZE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001158:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001164:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		acceleration_buffer.buf_wrap = false;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000228 	.word	0x20000228

08001188 <dequeueAngularRatePacket>:

uint64_t dequeueAngularRatePacket()
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_start_pos == angular_rate_buffer.buf_end_pos)
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001190:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <dequeueAngularRatePacket+0x30>
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <dequeueAngularRatePacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e02b      	b.n	8001210 <dequeueAngularRatePacket+0x88>
	}

	// get data value
	temp = angular_rate_buffer.queue[angular_rate_buffer.buf_start_pos];
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]

	angular_rate_buffer.buf_start_pos++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ce:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (angular_rate_buffer.buf_start_pos % BUFFER_SIZE < angular_rate_buffer.buf_start_pos)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011de:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <dequeueAngularRatePacket+0x84>
	{
		angular_rate_buffer.buf_start_pos = angular_rate_buffer.buf_start_pos % BUFFER_SIZE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011f4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001200:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		angular_rate_buffer.buf_wrap = false;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000630 	.word	0x20000630

08001224 <processAccelerationPacket>:

void processAccelerationPacket(uint64_t packet)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	float x_acceleration;
	float y_acceleration;
	float z_acceleration;

	data = (uint16_t*) &packet;
 8001232:	463b      	mov	r3, r7
 8001234:	617b      	str	r3, [r7, #20]

	y_acceleration = ((float)data[0] / 100) - 320;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012b4 <processAccelerationPacket+0x90>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012b8 <processAccelerationPacket+0x94>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	x_acceleration = ((float)data[1] / 100) - 320;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012b4 <processAccelerationPacket+0x90>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012b8 <processAccelerationPacket+0x94>
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	z_acceleration = ((float)data[2] / 100) - 320;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012b4 <processAccelerationPacket+0x90>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <processAccelerationPacket+0x94>
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Acceleration", x_acceleration, y_acceleration, z_acceleration);
 800129a:	ed97 1a02 	vldr	s2, [r7, #8]
 800129e:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <processAccelerationPacket+0x98>)
 80012a8:	f000 f858 	bl	800135c <printPacket>
	/* Logging Ends */
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	43a00000 	.word	0x43a00000
 80012bc:	08011ad0 	.word	0x08011ad0

080012c0 <processAngularRatePacket>:

void processAngularRatePacket(uint64_t packet)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	float x_angular_rate;
	float y_angular_rate;
	float z_angular_rate;

	data = (uint16_t*) &packet;
 80012ce:	463b      	mov	r3, r7
 80012d0:	617b      	str	r3, [r7, #20]

	y_angular_rate = ((float)data[0] / 128) - 250;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001350 <processAngularRatePacket+0x90>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001354 <processAngularRatePacket+0x94>
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
	x_angular_rate = ((float)data[1] / 128) - 250;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001350 <processAngularRatePacket+0x90>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001354 <processAngularRatePacket+0x94>
 800130c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	z_angular_rate = ((float)data[2] / 128) - 250;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3304      	adds	r3, #4
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001322:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001350 <processAngularRatePacket+0x90>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001354 <processAngularRatePacket+0x94>
 800132e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001332:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Angular Rate", x_angular_rate, y_angular_rate, z_angular_rate);
 8001336:	ed97 1a02 	vldr	s2, [r7, #8]
 800133a:	edd7 0a04 	vldr	s1, [r7, #16]
 800133e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <processAngularRatePacket+0x98>)
 8001344:	f000 f80a 	bl	800135c <printPacket>
	/* Logging Ends */
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43000000 	.word	0x43000000
 8001354:	437a0000 	.word	0x437a0000
 8001358:	08011ae0 	.word	0x08011ae0

0800135c <printPacket>:

void printPacket(char *data_name, float x, float y, float z)
{
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001364:	af0a      	add	r7, sp, #40	; 0x28
 8001366:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001378:	ed83 0a00 	vstr	s0, [r3]
 800137c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001384:	edc3 0a00 	vstr	s1, [r3]
 8001388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001390:	ed83 1a00 	vstr	s2, [r3]
	char tempMsg[512];

	sprintf(tempMsg, "%s X: %f\r\n%s Y: %f\r\n%s Z: %f\r\n", data_name, x, data_name, y, data_name, z);
 8001394:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001398:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013ce:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 80013d2:	f107 0010 	add.w	r0, r7, #16
 80013d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	680a      	ldr	r2, [r1, #0]
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <printPacket+0xcc>)
 80013fe:	f00d f849 	bl	800e494 <siprintf>

	HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 20);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	2314      	movs	r3, #20
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <printPacket+0xd0>)
 8001418:	f006 fa29 	bl	800786e <HAL_USART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	08011af0 	.word	0x08011af0
 800142c:	200040ac 	.word	0x200040ac

08001430 <StartIMUPacketProcessTask>:

void StartIMUPacketProcessTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint64_t packet;
	for (;;)
	{
		// should probably check to make sure queues are in valid state
		packet = dequeueAccelerationPacket();
 8001438:	f7ff fe58 	bl	80010ec <dequeueAccelerationPacket>
 800143c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAccelerationPacket(packet);
 8001440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001444:	f7ff feee 	bl	8001224 <processAccelerationPacket>

		packet = dequeueAngularRatePacket();
 8001448:	f7ff fe9e 	bl	8001188 <dequeueAngularRatePacket>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAngularRatePacket(packet);
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff ff34 	bl	80012c0 <processAngularRatePacket>

		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f009 fe38 	bl	800b0d0 <osDelay>
		packet = dequeueAccelerationPacket();
 8001460:	e7ea      	b.n	8001438 <StartIMUPacketProcessTask+0x8>
	...

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001478:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_ADC1_Init+0x240>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <MX_ADC1_Init+0x244>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4876      	ldr	r0, [pc, #472]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c6:	f001 ff7d 	bl	80033c4 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fcb4 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014dc:	2303      	movs	r3, #3
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	486e      	ldr	r0, [pc, #440]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014e6:	f002 f8d5 	bl	8003694 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fca4 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001502:	f002 f8c7 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fc96 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001510:	2302      	movs	r3, #2
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800151e:	f002 f8b9 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fc88 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800152c:	2303      	movs	r3, #3
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800153a:	f002 f8ab 	bl	8003694 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fc7a 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001548:	2304      	movs	r3, #4
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4852      	ldr	r0, [pc, #328]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001556:	f002 f89d 	bl	8003694 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fc6c 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001564:	2305      	movs	r3, #5
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001572:	f002 f88f 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fc5e 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800158e:	f002 f881 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001598:	f000 fc50 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800159c:	2307      	movs	r3, #7
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	483d      	ldr	r0, [pc, #244]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015aa:	f002 f873 	bl	8003694 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015b4:	f000 fc42 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015bc:	2309      	movs	r3, #9
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015c6:	f002 f865 	bl	8003694 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d0:	f000 fc34 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d4:	2309      	movs	r3, #9
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015e2:	f002 f857 	bl	8003694 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015ec:	f000 fc26 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015f4:	230b      	movs	r3, #11
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015fe:	f002 f849 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 fc18 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001610:	230c      	movs	r3, #12
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800161a:	f002 f83b 	bl	8003694 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001624:	f000 fc0a 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800162c:	230d      	movs	r3, #13
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001636:	f002 f82d 	bl	8003694 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001640:	f000 fbfc 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001644:	230d      	movs	r3, #13
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001648:	230e      	movs	r3, #14
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001652:	f002 f81f 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800165c:	f000 fbee 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001660:	230e      	movs	r3, #14
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800166e:	f002 f811 	bl	8003694 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001678:	f000 fbe0 	bl	8001e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001680:	2310      	movs	r3, #16
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800168a:	f002 f803 	bl	8003694 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001694:	f000 fbd2 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a80 	.word	0x20000a80
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001754:	f002 ffda 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_ADC_MspInit+0x150>)
 800176c:	f002 ffce 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x154>)
 8001784:	f002 ffc2 	bl	800470c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_ADC_MspInit+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017cc:	f002 fc2e 	bl	800402c <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80017d6:	f000 fb31 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	20000ac8 	.word	0x20000ac8
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	newData_thermistor = 1;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_ADC_ConvCpltCallback+0x20>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	newData_shock_pot = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_ADC_ConvCpltCallback+0x24>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000a7c 	.word	0x20000a7c
 8001830:	20000a78 	.word	0x20000a78

08001834 <StartAdcDma>:

void StartAdcDma(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	const int DELAY = 500;
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <StartAdcDma+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <StartAdcDma+0x28>)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <StartAdcDma+0x2c>)
 800184c:	f001 fdfe 	bl	800344c <HAL_ADC_Start_DMA>

	osDelay(DELAY);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f009 fc3d 	bl	800b0d0 <osDelay>
  {
 8001856:	e7f4      	b.n	8001842 <StartAdcDma+0xe>
 8001858:	20000000 	.word	0x20000000
 800185c:	20000a38 	.word	0x20000a38
 8001860:	20000a80 	.word	0x20000a80

08001864 <CAN_Polling>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Polling(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	int a = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800186a:	2100      	movs	r1, #0
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <CAN_Polling+0x3c>)
 800186e:	f002 fad3 	bl	8003e18 <HAL_CAN_GetRxFifoFillLevel>
 8001872:	4603      	mov	r3, r0
 8001874:	607b      	str	r3, [r7, #4]
	if (a < 1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dc01      	bgt.n	8001880 <CAN_Polling+0x1c>
	{
		return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00b      	b.n	8001898 <CAN_Polling+0x34>
	}

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CAN_Polling+0x40>)
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <CAN_Polling+0x44>)
 8001884:	2100      	movs	r1, #0
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <CAN_Polling+0x3c>)
 8001888:	f002 f9b4 	bl	8003bf4 <HAL_CAN_GetRxMessage>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <CAN_Polling+0x32>
	{
		return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <CAN_Polling+0x34>
	}

	return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000b4c 	.word	0x20000b4c
 80018a4:	20000b44 	.word	0x20000b44
 80018a8:	20000b28 	.word	0x20000b28

080018ac <StartCanTask>:

void StartCanTask(void const * argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
//	imuState state;
//	char canMsg[40];
	for (;;)
	{
		if (CAN_Polling() == HAL_OK)
 80018b4:	f7ff ffd6 	bl	8001864 <CAN_Polling>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <StartCanTask+0x3c>
		{
			if (RxHeader.IDE == CAN_ID_EXT)
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <StartCanTask+0x48>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d110      	bne.n	80018e8 <StartCanTask+0x3c>
			{
				switch (RxHeader.ExtId)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <StartCanTask+0x48>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <StartCanTask+0x4c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <StartCanTask+0x2c>
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <StartCanTask+0x50>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <StartCanTask+0x34>
 80018d6:	e007      	b.n	80018e8 <StartCanTask+0x3c>
				{
					case IMU_ACCELERATION_CAN_EXT_ID:
						queueAccelerationPacket(RxData);
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <StartCanTask+0x54>)
 80018da:	f7ff fb53 	bl	8000f84 <queueAccelerationPacket>
//						imuProcessAccelerationPacket(&state, RxData);
//						sprintf(canMsg, "IMU Acceleration Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018de:	e003      	b.n	80018e8 <StartCanTask+0x3c>
					case IMU_ANGULAR_RATE_CAN_EXT_ID:
						queueAngularRatePacket(RxData);
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <StartCanTask+0x54>)
 80018e2:	f7ff fba9 	bl	8001038 <queueAngularRatePacket>
//						imuProcessAngularRatePacket(&state, RxData);
//						sprintf(canMsg, "IMU Angular Rate Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018e6:	bf00      	nop
				/* Logging Starts */

				/* Logging Ends */
			}
		}
		osDelay(500);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f009 fbf0 	bl	800b0d0 <osDelay>
		if (CAN_Polling() == HAL_OK)
 80018f0:	e7e0      	b.n	80018b4 <StartCanTask+0x8>
 80018f2:	bf00      	nop
 80018f4:	20000b28 	.word	0x20000b28
 80018f8:	08f02d80 	.word	0x08f02d80
 80018fc:	0cf02a80 	.word	0x0cf02a80
 8001900:	20000b44 	.word	0x20000b44

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2038      	movs	r0, #56	; 0x38
 800192c:	f002 fb54 	bl	8003fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f002 fb6d 	bl	8004010 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00000000 	.word	0x00000000

08001948 <calculateFlowrate>:
const int DELAY = 500;													// time in ms
static const double conversionFactor = (1000/DELAY)*(1.0/1000.0);		// convert L/s to m^3/s
extern volatile int flowmeter_pulse_count;

// gets flowrate as m^3/s
double calculateFlowrate(){
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	volatile double flowrate;

	flowrate = flowmeter_pulse_count*conversionFactor/PPL;	// calculate flowrate
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <calculateFlowrate+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe06 	bl	8000564 <__aeabi_i2d>
 8001958:	a313      	add	r3, pc, #76	; (adr r3, 80019a8 <calculateFlowrate+0x60>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe6b 	bl	8000638 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	f640 0398 	movw	r3, #2200	; 0x898
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdf8 	bl	8000564 <__aeabi_i2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe ff86 	bl	800088c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2300 	strd	r2, r3, [r7]
	flowmeter_pulse_count = 0;								// reset pulse_count
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <calculateFlowrate+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

	return flowrate;
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	ec43 2b17 	vmov	d7, r2, r3
}
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f60624d 	.word	0x3f60624d
 80019b0:	20003f80 	.word	0x20003f80

080019b4 <StartGetFlowrateTask>:

// calculates flowrate every DELAY ms
void StartGetFlowrateTask(void const * argument){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	volatile double flowrate;
	char tempMsg[50];
	char* time;

	for (;;){
		flowrate = calculateFlowrate();		// calculates flowrate
 80019bc:	f7ff ffc4 	bl	8001948 <calculateFlowrate>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

		/* TODO SCU#35 */
		SDCardLogWrite("Flow Rate Log", 14);
 80019cc:	210e      	movs	r1, #14
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <StartGetFlowrateTask+0x70>)
 80019d0:	f000 fba8 	bl	8002124 <SDCardLogWrite>
		/* Logging Starts */
		time = get_time();
 80019d4:	f000 fa88 	bl	8001ee8 <get_time>
 80019d8:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80019da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019dc:	f7fe fc68 	bl	80002b0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	230a      	movs	r3, #10
 80019e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <StartGetFlowrateTask+0x74>)
 80019ea:	f005 ff40 	bl	800786e <HAL_USART_Transmit>

		sprintf(tempMsg, ",%f,,,,\r\n", flowrate);
 80019ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019f2:	f107 000c 	add.w	r0, r7, #12
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <StartGetFlowrateTask+0x78>)
 80019f8:	f00c fd4c 	bl	800e494 <siprintf>
		HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fc55 	bl	80002b0 <strlen>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f107 010c 	add.w	r1, r7, #12
 8001a0e:	230a      	movs	r3, #10
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <StartGetFlowrateTask+0x74>)
 8001a12:	f005 ff2c 	bl	800786e <HAL_USART_Transmit>

		/* Logging Ends */

		osDelay(DELAY);
 8001a16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f009 fb58 	bl	800b0d0 <osDelay>
	for (;;){
 8001a20:	e7cc      	b.n	80019bc <StartGetFlowrateTask+0x8>
 8001a22:	bf00      	nop
 8001a24:	08011b10 	.word	0x08011b10
 8001a28:	200040ac 	.word	0x200040ac
 8001a2c:	08011b20 	.word	0x08011b20

08001a30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <vApplicationGetIdleTaskMemory+0x30>)
 8001a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20001434 	.word	0x20001434
 8001a60:	200014d4 	.word	0x200014d4

08001a64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b0c0      	sub	sp, #256	; 0x100
 8001a68:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <MX_FREERTOS_Init+0x164>)
 8001a6c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001a70:	461d      	mov	r5, r3
 8001a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 fad7 	bl	800b038 <osThreadCreate>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <MX_FREERTOS_Init+0x168>)
 8001a8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of readAdcTask */
  osThreadStaticDef(readAdcTask, StartAdcDma, osPriorityNormal, 0, 512, readAdcTaskBuffer, &readAdcTaskControlBlock);
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <MX_FREERTOS_Init+0x16c>)
 8001a92:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001a96:	461d      	mov	r5, r3
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAdcTaskHandle = osThreadCreate(osThread(readAdcTask), NULL);
 8001aa4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f009 fac4 	bl	800b038 <osThreadCreate>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <MX_FREERTOS_Init+0x170>)
 8001ab4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardLog */
  osThreadDef(SDCardLog, StartSDCardLogTask, osPriorityNormal, 0, 512);
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <MX_FREERTOS_Init+0x174>)
 8001ab8:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001abc:	461d      	mov	r5, r3
 8001abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardLogHandle = osThreadCreate(osThread(SDCardLog), NULL);
 8001aca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f009 fab1 	bl	800b038 <osThreadCreate>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <MX_FREERTOS_Init+0x178>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 512);
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <MX_FREERTOS_Init+0x17c>)
 8001ade:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8001af0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f009 fa9e 	bl	800b038 <osThreadCreate>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a39      	ldr	r2, [pc, #228]	; (8001be4 <MX_FREERTOS_Init+0x180>)
 8001b00:	6013      	str	r3, [r2, #0]

  // Shock Pot Reading Thread
  osThreadDef(readDistTask, StartReadDistTask, osPriorityNormal, 0, 512);
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_FREERTOS_Init+0x184>)
 8001b04:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001b08:	461d      	mov	r5, r3
 8001b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readDistTask), NULL);
 8001b16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f009 fa8b 	bl	800b038 <osThreadCreate>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <MX_FREERTOS_Init+0x180>)
 8001b26:	6013      	str	r3, [r2, #0]

  // Flow Meter Reading Thread
  osThreadDef(readFlowmeterTask, StartGetFlowrateTask, osPriorityNormal, 0, 512);
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <MX_FREERTOS_Init+0x188>)
 8001b2a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001b2e:	461d      	mov	r5, r3
 8001b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readFlowmeterTaskHandle = osThreadCreate(osThread(readFlowmeterTask), NULL);
 8001b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f009 fa78 	bl	800b038 <osThreadCreate>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <MX_FREERTOS_Init+0x18c>)
 8001b4c:	6013      	str	r3, [r2, #0]

  // CAN Receiver Thread
  osThreadDef(canReceiverTask, StartCanTask, osPriorityNormal, 0, 512);
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <MX_FREERTOS_Init+0x190>)
 8001b50:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001b62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f009 fa65 	bl	800b038 <osThreadCreate>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <MX_FREERTOS_Init+0x194>)
 8001b72:	6013      	str	r3, [r2, #0]

  // IMU Packet Processing Thread
  osThreadDef(imuPacketProcessTask, StartIMUPacketProcessTask, osPriorityNormal, 0, 512);
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <MX_FREERTOS_Init+0x198>)
 8001b76:	f107 0420 	add.w	r4, r7, #32
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuPacketProcessHandle = osThreadCreate(osThread(imuPacketProcessTask), NULL);
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f009 fa52 	bl	800b038 <osThreadCreate>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4a1a      	ldr	r2, [pc, #104]	; (8001c00 <MX_FREERTOS_Init+0x19c>)
 8001b98:	6013      	str	r3, [r2, #0]

  // Wheel Speed Reading Thread
  osThreadDef(readWheelSpeedsTask, StartGetWheelSpeedTask, osPriorityNormal, 0, 512);
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_FREERTOS_Init+0x1a0>)
 8001b9c:	1d3c      	adds	r4, r7, #4
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readWheelSpeedsHandle = osThreadCreate(osThread(readWheelSpeedsTask), NULL);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 fa41 	bl	800b038 <osThreadCreate>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <MX_FREERTOS_Init+0x1a4>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001bbc:	bf00      	nop
 8001bbe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	08011b38 	.word	0x08011b38
 8001bcc:	20000b88 	.word	0x20000b88
 8001bd0:	08011b60 	.word	0x08011b60
 8001bd4:	20000b8c 	.word	0x20000b8c
 8001bd8:	08011b88 	.word	0x08011b88
 8001bdc:	20001430 	.word	0x20001430
 8001be0:	08011bb4 	.word	0x08011bb4
 8001be4:	20000b74 	.word	0x20000b74
 8001be8:	08011be0 	.word	0x08011be0
 8001bec:	08011c10 	.word	0x08011c10
 8001bf0:	20000b78 	.word	0x20000b78
 8001bf4:	08011c3c 	.word	0x08011c3c
 8001bf8:	20000b7c 	.word	0x20000b7c
 8001bfc:	08011c70 	.word	0x08011c70
 8001c00:	20000b80 	.word	0x20000b80
 8001c04:	08011ca0 	.word	0x08011ca0
 8001c08:	20000b84 	.word	0x20000b84

08001c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c14:	2001      	movs	r0, #1
 8001c16:	f009 fa5b 	bl	800b0d0 <osDelay>
 8001c1a:	e7fb      	b.n	8001c14 <StartDefaultTask+0x8>

08001c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8c:	4811      	ldr	r0, [pc, #68]	; (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c8e:	f002 fed1 	bl	8004a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c92:	2304      	movs	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <MX_GPIO_Init+0xb8>)
 8001ca6:	f002 fd31 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_GPIO_Init+0xb8>)
 8001cc4:	f002 fd22 	bl	800470c <HAL_GPIO_Init>

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cdc:	f001 fb30 	bl	8003340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce0:	f000 f836 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce4:	f7ff ff9a 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce8:	f7ff fe0c 	bl	8001904 <MX_DMA_Init>
  MX_ADC1_Init();
 8001cec:	f7ff fbba 	bl	8001464 <MX_ADC1_Init>
  MX_USART1_Init();
 8001cf0:	f001 fa1e 	bl	8003130 <MX_USART1_Init>
  MX_TIM12_Init();
 8001cf4:	f001 f84c 	bl	8002d90 <MX_TIM12_Init>
//  MX_CAN1_Init();
  MX_TIM3_Init();
 8001cf8:	f000 ff02 	bl	8002b00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cfc:	f000 ff80 	bl	8002c00 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001d00:	f006 f934 	bl	8007f6c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001d04:	f000 fb06 	bl	8002314 <MX_SPI1_Init>
  MX_RTC_Init();
 8001d08:	f000 f89e 	bl	8001e48 <MX_RTC_Init>
  MX_TIM11_Init();
 8001d0c:	f000 fff8 	bl	8002d00 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); 		// Start input capture
 8001d10:	2100      	movs	r1, #0
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <main+0x68>)
 8001d14:	f004 fe6a 	bl	80069ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8001d18:	2100      	movs	r1, #0
 8001d1a:	480a      	ldr	r0, [pc, #40]	; (8001d44 <main+0x6c>)
 8001d1c:	f004 fe66 	bl	80069ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); 		// Start input capture
 8001d20:	2100      	movs	r1, #0
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <main+0x70>)
 8001d24:	f004 fe62 	bl	80069ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1); 		// Start input capture
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <main+0x74>)
 8001d2c:	f004 fe5e 	bl	80069ec <HAL_TIM_IC_Start_IT>
  SD_Init();
 8001d30:	f000 f9a0 	bl	8002074 <SD_Init>
  }
  */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d34:	f7ff fe96 	bl	8001a64 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d38:	f009 f977 	bl	800b02a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <main+0x64>
 8001d3e:	bf00      	nop
 8001d40:	2000401c 	.word	0x2000401c
 8001d44:	20003f8c 	.word	0x20003f8c
 8001d48:	20003fd4 	.word	0x20003fd4
 8001d4c:	20004064 	.word	0x20004064

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	; 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 031c 	add.w	r3, r7, #28
 8001d5a:	2234      	movs	r2, #52	; 0x34
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00c fbfb 	bl	800e55a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <SystemClock_Config+0xc0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <SystemClock_Config+0xc0>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <SystemClock_Config+0xc0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <SystemClock_Config+0xc4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <SystemClock_Config+0xc4>)
 8001d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <SystemClock_Config+0xc4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001db0:	230a      	movs	r3, #10
 8001db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db8:	2301      	movs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fc6b 	bl	80056a8 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 f830 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001df0:	f107 0308 	add.w	r3, r7, #8
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fe36 	bl	8004a68 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e02:	f000 f81b 	bl	8001e3c <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3750      	adds	r7, #80	; 0x50
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2a:	f001 faab 	bl	8003384 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40014400 	.word	0x40014400

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <MX_RTC_Init+0x48>)
 8001e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e5a:	227f      	movs	r2, #127	; 0x7f
 8001e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e60:	22ff      	movs	r2, #255	; 0xff
 8001e62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_RTC_Init+0x44>)
 8001e78:	f003 feb4 	bl	8005be4 <HAL_RTC_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e82:	f7ff ffdb 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200016d4 	.word	0x200016d4
 8001e90:	40002800 	.word	0x40002800

08001e94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b09a      	sub	sp, #104	; 0x68
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	225c      	movs	r2, #92	; 0x5c
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00c fb58 	bl	800e55a <memset>
  if(rtcHandle->Instance==RTC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_RTC_MspInit+0x4c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 ff1c 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ece:	f7ff ffb5 	bl	8001e3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RTC_MspInit+0x50>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3768      	adds	r7, #104	; 0x68
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40002800 	.word	0x40002800
 8001ee4:	42470e3c 	.word	0x42470e3c

08001ee8 <get_time>:
//	time[0] = 'a';
//	time[1] = '\0';
//	return time;
//}
char* get_time(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	 static char time[20];

	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <get_time+0x5c>)
 8001ef6:	f003 feeb 	bl	8005cd0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4810      	ldr	r0, [pc, #64]	; (8001f44 <get_time+0x5c>)
 8001f04:	f003 ff42 	bl	8005d8c <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss.SS */
	 sprintf(time, "%02u:%02u:%02u.%02lu", gTime.Hours, gTime.Minutes, gTime.Seconds, (uint32_t) (gTime.SecondFraction - gTime.SubSeconds) * 100 / (gTime.SecondFraction + 1));
 8001f08:	783b      	ldrb	r3, [r7, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	461c      	mov	r4, r3
 8001f10:	78bb      	ldrb	r3, [r7, #2]
 8001f12:	4619      	mov	r1, r3
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2264      	movs	r2, #100	; 0x64
 8001f1c:	fb03 f202 	mul.w	r2, r3, r2
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	3301      	adds	r3, #1
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9100      	str	r1, [sp, #0]
 8001f2c:	4623      	mov	r3, r4
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4905      	ldr	r1, [pc, #20]	; (8001f48 <get_time+0x60>)
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <get_time+0x64>)
 8001f34:	f00c faae 	bl	800e494 <siprintf>

	 return time;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <get_time+0x64>)
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200016d4 	.word	0x200016d4
 8001f48:	08011cbc 	.word	0x08011cbc
 8001f4c:	200016f4 	.word	0x200016f4

08001f50 <sd_is_filename_free>:
FIL logFile; 	//File handle

uint32_t write_count = 0; // how many writes have occured since we've synced them
uint32_t log_index = 0;

uint32_t sd_is_filename_free(char *filename) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	FILINFO info;
	FRESULT fres = f_stat(filename, &info);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f008 ff52 	bl	800ae08 <f_stat>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return fres == FR_NO_FILE;
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <sd_mount>:

FRESULT sd_mount(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	return f_mount(&FatFs, "", 1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	4903      	ldr	r1, [pc, #12]	; (8001f94 <sd_mount+0x14>)
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <sd_mount+0x18>)
 8001f8a:	f008 fae7 	bl	800a55c <f_mount>
 8001f8e:	4603      	mov	r3, r0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	08011ce4 	.word	0x08011ce4
 8001f98:	20003954 	.word	0x20003954

08001f9c <sd_open_log_file>:

FRESULT sd_open_log_file(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b092      	sub	sp, #72	; 0x48
 8001fa0:	af00      	add	r7, sp, #0
	FRESULT fres = FR_NOT_READY;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	char LOG_BUFFER[64] = {0};
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	223c      	movs	r2, #60	; 0x3c
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00c fad0 	bl	800e55a <memset>

	do {
		LOG_BUFFER[0] = '\0';
 8001fba:	2300      	movs	r3, #0
 8001fbc:	713b      	strb	r3, [r7, #4]
		snprintf(LOG_BUFFER, 64, LOG_FILE, log_index++);
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <sd_open_log_file+0x64>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	490e      	ldr	r1, [pc, #56]	; (8002000 <sd_open_log_file+0x64>)
 8001fc6:	600a      	str	r2, [r1, #0]
 8001fc8:	1d38      	adds	r0, r7, #4
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <sd_open_log_file+0x68>)
 8001fcc:	2140      	movs	r1, #64	; 0x40
 8001fce:	f00c fa2d 	bl	800e42c <sniprintf>
	}while(!sd_is_filename_free(LOG_BUFFER));
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffbb 	bl	8001f50 <sd_is_filename_free>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ec      	beq.n	8001fba <sd_open_log_file+0x1e>

	fres = f_open(&logFile, LOG_BUFFER, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	221a      	movs	r2, #26
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <sd_open_log_file+0x6c>)
 8001fe8:	f008 fb1c 	bl	800a624 <f_open>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	return fres;
 8001ff2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3748      	adds	r7, #72	; 0x48
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20003dbc 	.word	0x20003dbc
 8002004:	08011ce8 	.word	0x08011ce8
 8002008:	20003b88 	.word	0x20003b88

0800200c <sd_log_to_file>:

	return fres;
}
*/

FRESULT sd_log_to_file(char *buff, UINT n) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	UINT bytesWritten;
	FRESULT fres = f_write(&logFile, buff, n, &bytesWritten);
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <sd_log_to_file+0x5c>)
 8002020:	f008 fcc5 	bl	800a9ae <f_write>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]

	if(fres == FR_OK) {
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <sd_log_to_file+0x50>
		write_count++;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <sd_log_to_file+0x60>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <sd_log_to_file+0x60>)
 8002036:	6013      	str	r3, [r2, #0]
		if(write_count % WRITES_UNTIL_SYNC == 0) { // check if time to sync
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <sd_log_to_file+0x60>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <sd_log_to_file+0x64>)
 800203e:	fba3 1302 	umull	r1, r3, r3, r2
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2164      	movs	r1, #100	; 0x64
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <sd_log_to_file+0x50>
			f_sync(&logFile); // sync, if we didn't do this file write wouldn't be pushed to the sd card and we've have to close the file to write them
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <sd_log_to_file+0x5c>)
 8002052:	f008 fe50 	bl	800acf6 <f_sync>
			write_count = 0;
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <sd_log_to_file+0x60>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
		}
	}

	return fres;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20003b88 	.word	0x20003b88
 800206c:	20003db8 	.word	0x20003db8
 8002070:	51eb851f 	.word	0x51eb851f

08002074 <SD_Init>:
	}

	return fres;
}

void SD_Init(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
	xSD_Card_Queue = xQueueCreateStatic(SD_QUEUE_LENGTH,
 800207a:	2300      	movs	r3, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <SD_Init+0x58>)
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <SD_Init+0x5c>)
 8002082:	2144      	movs	r1, #68	; 0x44
 8002084:	2080      	movs	r0, #128	; 0x80
 8002086:	f009 fa1d 	bl	800b4c4 <xQueueGenericCreateStatic>
 800208a:	4603      	mov	r3, r0
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <SD_Init+0x60>)
 800208e:	6013      	str	r3, [r2, #0]
										SD_QUEUE_SIZE,
										xSD_Card_Queue_Storage,
										&xSD_Card_Queue_Static);

	configASSERT(xSD_Card_Queue);
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <SD_Init+0x60>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <SD_Init+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <SD_Init+0x38>

	FRESULT fres = sd_mount();
 80020ae:	f7ff ff67 	bl	8001f80 <sd_mount>
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]

	if(fres == FR_OK) {
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <SD_Init+0x50>
		fres = sd_open_log_file(); // if mounted, open log file
 80020bc:	f7ff ff6e 	bl	8001f9c <sd_open_log_file>
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
	}

	//return fres;

}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20001708 	.word	0x20001708
 80020d0:	20001754 	.word	0x20001754
 80020d4:	20001750 	.word	0x20001750

080020d8 <StartSDCardLogTask>:

void StartSDCardLogTask(void const *argument) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

	FRESULT fres = FR_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	for(;;) {
		SDRequest sd_req;
		BaseType_t status = xQueueReceive(xSD_Card_Queue, &sd_req, portMAX_DELAY);
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <StartSDCardLogTask+0x48>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f107 010c 	add.w	r1, r7, #12
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	4618      	mov	r0, r3
 80020f4:	f009 fc44 	bl	800b980 <xQueueReceive>
 80020f8:	6538      	str	r0, [r7, #80]	; 0x50

		if(status == pdPASS) {
 80020fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d10a      	bne.n	8002116 <StartSDCardLogTask+0x3e>
			fres = sd_log_to_file(sd_req.message, sd_req.length);
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	3304      	adds	r3, #4
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff7e 	bl	800200c <sd_log_to_file>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}

		osDelay(pdMS_TO_TICKS(500));
 8002116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800211a:	f008 ffd9 	bl	800b0d0 <osDelay>
	for(;;) {
 800211e:	e7e2      	b.n	80020e6 <StartSDCardLogTask+0xe>
 8002120:	20001750 	.word	0x20001750

08002124 <SDCardLogWrite>:
	}
}

_Bool SDCardLogWrite(char *message, uint32_t length) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b094      	sub	sp, #80	; 0x50
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	SDRequest req;

	length = length > SD_REQUEST_MAX_MESSAGE_LENGTH ?
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	bf28      	it	cs
 8002134:	2340      	movcs	r3, #64	; 0x40
 8002136:	603b      	str	r3, [r7, #0]
			SD_REQUEST_MAX_MESSAGE_LENGTH : length;

	strncpy(req.message, message, length);
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	3304      	adds	r3, #4
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	f00c fa20 	bl	800e588 <strncpy>
	req.length = length;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	60bb      	str	r3, [r7, #8]

	BaseType_t status = xQueueSendToBack(xSD_Card_Queue, &req, 0);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <SDCardLogWrite+0x50>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	f107 0108 	add.w	r1, r7, #8
 8002154:	2300      	movs	r3, #0
 8002156:	2200      	movs	r2, #0
 8002158:	f009 fa86 	bl	800b668 <xQueueGenericSend>
 800215c:	64f8      	str	r0, [r7, #76]	; 0x4c

	return status == pdPASS;
 800215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002160:	2b01      	cmp	r3, #1
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	3750      	adds	r7, #80	; 0x50
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20001750 	.word	0x20001750

08002178 <getDistance>:
// INPUT PARAMTERS:
//			voltage - voltage measured across the shock pot
//
// RETURN:	distance in mm of type double
//*********************************************************************
double getDistance(double voltage){
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	ed87 0b00 	vstr	d0, [r7]
	double dist = MAX_DIST * voltage / vDD;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <getDistance+0x58>)
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9ff 	bl	8000588 <__aeabi_f2d>
 800218a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218e:	f7fe fa53 	bl	8000638 <__aeabi_dmul>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4614      	mov	r4, r2
 8002198:	461d      	mov	r5, r3
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <getDistance+0x5c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9f2 	bl	8000588 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4620      	mov	r0, r4
 80021aa:	4629      	mov	r1, r5
 80021ac:	f7fe fb6e 	bl	800088c <__aeabi_ddiv>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return dist;
 80021b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80021c0:	eeb0 0a47 	vmov.f32	s0, s14
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bdb0      	pop	{r4, r5, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	42480000 	.word	0x42480000
 80021d4:	08011db8 	.word	0x08011db8

080021d8 <StartReadDistTask>:
// readDist_task
//
// PURPOSE: Main loop for freeRTOS thread. Waits for ADC conversion and
//			translates voltages into distance
//*********************************************************************
void StartReadDistTask(void const * argument){
 80021d8:	b580      	push	{r7, lr}
 80021da:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80021de:	af02      	add	r7, sp, #8
 80021e0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80021e4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80021e8:	6018      	str	r0, [r3, #0]
	char msgDist[20];
	float voltages[16];
	char distMsg[50];

	for (;;){
		if (newData_shock_pot == 1){
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <StartReadDistTask+0x120>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d17d      	bne.n	80022ee <StartReadDistTask+0x116>
			// calculate distances for each ADC channel
			for(int i = 0; i < 16; i++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80021f8:	e05d      	b.n	80022b6 <StartReadDistTask+0xde>
				  voltages[i] = ADC_TO_Voltage * ADC_Readings[i];
 80021fa:	4a40      	ldr	r2, [pc, #256]	; (80022fc <StartReadDistTask+0x124>)
 80021fc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f99d 	bl	8000544 <__aeabi_ui2d>
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <StartReadDistTask+0x128>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f7fe fa12 	bl	8000638 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fce4 	bl	8000be8 <__aeabi_d2f>
 8002220:	4601      	mov	r1, r0
 8002222:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002226:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800222a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	6019      	str	r1, [r3, #0]
				  dist[i] = getDistance(voltages[i]);
 8002234:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002238:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800223c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f99e 	bl	8000588 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	ec43 2b10 	vmov	d0, r2, r3
 8002254:	f7ff ff90 	bl	8002178 <getDistance>
 8002258:	eeb0 7a40 	vmov.f32	s14, s0
 800225c:	eef0 7a60 	vmov.f32	s15, s1
 8002260:	4a28      	ldr	r2, [pc, #160]	; (8002304 <StartReadDistTask+0x12c>)
 8002262:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	ed83 7b00 	vstr	d7, [r3]
				  sprintf(msgDist, "ADC %d %.5f \n", i, voltages[i]);
 800226e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002272:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002276:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f981 	bl	8000588 <__aeabi_f2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800228e:	e9cd 2300 	strd	r2, r3, [sp]
 8002292:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002296:	491c      	ldr	r1, [pc, #112]	; (8002308 <StartReadDistTask+0x130>)
 8002298:	f00c f8fc 	bl	800e494 <siprintf>
				  strcat(msg,msgDist);
 800229c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80022a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00c f95f 	bl	800e56a <strcat>
			for(int i = 0; i < 16; i++) {
 80022ac:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80022b0:	3301      	adds	r3, #1
 80022b2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80022b6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	dd9d      	ble.n	80021fa <StartReadDistTask+0x22>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			// add ADC channel 0 to message
			sprintf(distMsg, "Distance: %f\r\n", dist[0]);
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <StartReadDistTask+0x12c>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f107 000c 	add.w	r0, r7, #12
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <StartReadDistTask+0x134>)
 80022ca:	f00c f8e3 	bl	800e494 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) distMsg, strlen(distMsg), 10);
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fd ffec 	bl	80002b0 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	f107 010c 	add.w	r1, r7, #12
 80022e0:	230a      	movs	r3, #10
 80022e2:	480b      	ldr	r0, [pc, #44]	; (8002310 <StartReadDistTask+0x138>)
 80022e4:	f005 fac3 	bl	800786e <HAL_USART_Transmit>
			/* Logging Ends */

			newData_shock_pot = 0;					// reset ADC conversion flag
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <StartReadDistTask+0x120>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
		}

		// wait 500ms
		osDelay(500);
 80022ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f2:	f008 feed 	bl	800b0d0 <osDelay>
		if (newData_shock_pot == 1){
 80022f6:	e778      	b.n	80021ea <StartReadDistTask+0x12>
 80022f8:	20000a78 	.word	0x20000a78
 80022fc:	20000a38 	.word	0x20000a38
 8002300:	08011db0 	.word	0x08011db0
 8002304:	20003dc0 	.word	0x20003dc0
 8002308:	08011cf4 	.word	0x08011cf4
 800230c:	08011d04 	.word	0x08011d04
 8002310:	200040ac 	.word	0x200040ac

08002314 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_SPI1_Init+0x64>)
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <MX_SPI1_Init+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_SPI1_Init+0x64>)
 8002320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_SPI1_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_SPI1_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_SPI1_Init+0x64>)
 8002340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_SPI1_Init+0x64>)
 8002348:	2230      	movs	r2, #48	; 0x30
 800234a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <MX_SPI1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_SPI1_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MX_SPI1_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_SPI1_Init+0x64>)
 8002360:	220a      	movs	r2, #10
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_SPI1_Init+0x64>)
 8002366:	f003 fe00 	bl	8005f6a <HAL_SPI_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002370:	f7ff fd64 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20003e40 	.word	0x20003e40
 800237c:	40013000 	.word	0x40013000

08002380 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_SPI_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023da:	2338      	movs	r3, #56	; 0x38
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ea:	2305      	movs	r3, #5
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_SPI_MspInit+0x8c>)
 80023f6:	f002 f989 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40013000 	.word	0x40013000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020400 	.word	0x40020400

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_MspInit+0x54>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_MspInit+0x54>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_MspInit+0x54>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_MspInit+0x54>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_MspInit+0x54>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_MspInit+0x54>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	210f      	movs	r1, #15
 8002452:	f06f 0001 	mvn.w	r0, #1
 8002456:	f001 fdbf 	bl	8003fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_InitTick+0xd0>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_InitTick+0xd0>)
 8002482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002486:	6453      	str	r3, [r2, #68]	; 0x44
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_InitTick+0xd0>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fbfc 	bl	8004c9c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024a4:	f002 fbe6 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 80024a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <HAL_InitTick+0xd4>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	3b01      	subs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_InitTick+0xd8>)
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_InitTick+0xdc>)
 80024bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_InitTick+0xd8>)
 80024c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024c4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_InitTick+0xd8>)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_InitTick+0xd8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_InitTick+0xd8>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_InitTick+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80024de:	4818      	ldr	r0, [pc, #96]	; (8002540 <HAL_InitTick+0xd8>)
 80024e0:	f004 f974 	bl	80067cc <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11b      	bne.n	800252a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <HAL_InitTick+0xd8>)
 80024f4:	f004 f9ba 	bl	800686c <HAL_TIM_Base_Start_IT>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002502:	2b00      	cmp	r3, #0
 8002504:	d111      	bne.n	800252a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002506:	2019      	movs	r0, #25
 8002508:	f001 fd82 	bl	8004010 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	d808      	bhi.n	8002524 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002512:	2200      	movs	r2, #0
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	2019      	movs	r0, #25
 8002518:	f001 fd5e 	bl	8003fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_InitTick+0xe0>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e002      	b.n	800252a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800252a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800252e:	4618      	mov	r0, r3
 8002530:	3730      	adds	r7, #48	; 0x30
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	431bde83 	.word	0x431bde83
 8002540:	20003e98 	.word	0x20003e98
 8002544:	40014400 	.word	0x40014400
 8002548:	20000008 	.word	0x20000008

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800257e:	f004 fb5d 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20003e98 	.word	0x20003e98

0800258c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002592:	f004 fb53 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000401c 	.word	0x2000401c

080025a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM3_IRQHandler+0x10>)
 80025a6:	f004 fb49 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20003f8c 	.word	0x20003f8c

080025b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM4_IRQHandler+0x10>)
 80025ba:	f004 fb3f 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20003fd4 	.word	0x20003fd4

080025c8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80025ce:	f004 fb35 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20004064 	.word	0x20004064

080025dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA2_Stream0_IRQHandler+0x10>)
 80025e2:	f001 fe29 	bl	8004238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000ac8 	.word	0x20000ac8

080025f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
	return 1;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_kill>:

int _kill(int pid, int sig)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800260a:	f00c f871 	bl	800e6f0 <__errno>
 800260e:	4603      	mov	r3, r0
 8002610:	2216      	movs	r2, #22
 8002612:	601a      	str	r2, [r3, #0]
	return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_exit>:

void _exit (int status)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002628:	f04f 31ff 	mov.w	r1, #4294967295
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffe7 	bl	8002600 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002632:	e7fe      	b.n	8002632 <_exit+0x12>

08002634 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e00a      	b.n	800265c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002646:	f3af 8000 	nop.w
 800264a:	4601      	mov	r1, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	60ba      	str	r2, [r7, #8]
 8002652:	b2ca      	uxtb	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3301      	adds	r3, #1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	dbf0      	blt.n	8002646 <_read+0x12>
	}

return len;
 8002664:	687b      	ldr	r3, [r7, #4]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e009      	b.n	8002694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3301      	adds	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	dbf1      	blt.n	8002680 <_write+0x12>
	}
	return len;
 800269c:	687b      	ldr	r3, [r7, #4]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_close>:

int _close(int file)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	return -1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ce:	605a      	str	r2, [r3, #4]
	return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_isatty>:

int _isatty(int file)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
	return 1;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <_sbrk+0x5c>)
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <_sbrk+0x60>)
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_sbrk+0x64>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <_sbrk+0x68>)
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002740:	f00b ffd6 	bl	800e6f0 <__errno>
 8002744:	4603      	mov	r3, r0
 8002746:	220c      	movs	r2, #12
 8002748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e009      	b.n	8002764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <_sbrk+0x64>)
 8002760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20020000 	.word	0x20020000
 8002770:	00000400 	.word	0x00000400
 8002774:	20003ee0 	.word	0x20003ee0
 8002778:	20008020 	.word	0x20008020

0800277c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <SystemInit+0x20>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <SystemInit+0x20>)
 8002788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800278c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;

// takes the input voltage and returns the resistance
void get_NTC_Resistance(double voltageReading){
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	ed87 0b00 	vstr	d0, [r7]
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 80027aa:	4b29      	ldr	r3, [pc, #164]	; (8002850 <get_NTC_Resistance+0xb0>)
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd feeb 	bl	8000588 <__aeabi_f2d>
 80027b2:	a325      	add	r3, pc, #148	; (adr r3, 8002848 <get_NTC_Resistance+0xa8>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fd fd86 	bl	80002c8 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c4:	f7fe f9be 	bl	8000b44 <__aeabi_dcmpge>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <get_NTC_Resistance+0x44>
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027da:	f7fe f9a9 	bl	8000b30 <__aeabi_dcmple>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <get_NTC_Resistance+0x54>
 80027e4:	491b      	ldr	r1, [pc, #108]	; (8002854 <get_NTC_Resistance+0xb4>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
 80027f2:	e025      	b.n	8002840 <get_NTC_Resistance+0xa0>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <get_NTC_Resistance+0xb0>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fec6 	bl	8000588 <__aeabi_f2d>
 80027fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002800:	f7fe f844 	bl	800088c <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <get_NTC_Resistance+0xb8>)
 8002812:	f7fd fd59 	bl	80002c8 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4614      	mov	r4, r2
 800281c:	461d      	mov	r5, r3
 800281e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe8e 	bl	8000544 <__aeabi_ui2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
 8002830:	f7fd ff02 	bl	8000638 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <get_NTC_Resistance+0xb4>)
 800283a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}
 8002848:	9999999a 	.word	0x9999999a
 800284c:	3fb99999 	.word	0x3fb99999
 8002850:	40533333 	.word	0x40533333
 8002854:	20003f78 	.word	0x20003f78
 8002858:	3ff00000 	.word	0x3ff00000
 800285c:	00000000 	.word	0x00000000

08002860 <getTemperature>:

// takes the input voltage and returns the temperature
double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	ed87 0b00 	vstr	d0, [r7]
	get_NTC_Resistance(voltageReading);
 800286a:	ed97 0b00 	vldr	d0, [r7]
 800286e:	f7ff ff97 	bl	80027a0 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <getTemperature+0x120>)
 8002874:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b41      	ldr	r3, [pc, #260]	; (8002984 <getTemperature+0x124>)
 800287e:	f7fe f94d 	bl	8000b1c <__aeabi_dcmplt>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <getTemperature+0x36>
 8002888:	493f      	ldr	r1, [pc, #252]	; (8002988 <getTemperature+0x128>)
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <getTemperature+0x12c>)
 8002890:	e9c1 2300 	strd	r2, r3, [r1]
 8002894:	e051      	b.n	800293a <getTemperature+0xda>
	else{
		naturalLogR = log(R_NTC);
 8002896:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <getTemperature+0x120>)
 8002898:	ed93 7b00 	vldr	d7, [r3]
 800289c:	eeb0 0a47 	vmov.f32	s0, s14
 80028a0:	eef0 0a67 	vmov.f32	s1, s15
 80028a4:	f00d ffcc 	bl	8010840 <log>
 80028a8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ac:	eef0 7a60 	vmov.f32	s15, s1
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <getTemperature+0x130>)
 80028b2:	ed83 7b00 	vstr	d7, [r3]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 80028b6:	a128      	add	r1, pc, #160	; (adr r1, 8002958 <getTemperature+0xf8>)
 80028b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <getTemperature+0x130>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd feb9 	bl	8000638 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	a324      	add	r3, pc, #144	; (adr r3, 8002960 <getTemperature+0x100>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd fcfa 	bl	80002cc <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4614      	mov	r4, r2
 80028de:	461d      	mov	r5, r3
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <getTemperature+0x130>)
 80028e2:	ed93 7b00 	vldr	d7, [r3]
 80028e6:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8002968 <getTemperature+0x108>
 80028ea:	eeb0 0a47 	vmov.f32	s0, s14
 80028ee:	eef0 0a67 	vmov.f32	s1, s15
 80028f2:	f00d ffe3 	bl	80108bc <pow>
 80028f6:	ec51 0b10 	vmov	r0, r1, d0
 80028fa:	a31d      	add	r3, pc, #116	; (adr r3, 8002970 <getTemperature+0x110>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fe9a 	bl	8000638 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fcde 	bl	80002cc <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	491a      	ldr	r1, [pc, #104]	; (8002984 <getTemperature+0x124>)
 800291a:	f7fd ffb7 	bl	800088c <__aeabi_ddiv>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	a314      	add	r3, pc, #80	; (adr r3, 8002978 <getTemperature+0x118>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fccc 	bl	80002c8 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4914      	ldr	r1, [pc, #80]	; (8002988 <getTemperature+0x128>)
 8002936:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return temperature;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <getTemperature+0x128>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	ec43 2b17 	vmov	d7, r2, r3
}
 8002944:	eeb0 0a47 	vmov.f32	s0, s14
 8002948:	eef0 0a67 	vmov.f32	s1, s15
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	ac3ea183 	.word	0xac3ea183
 800295c:	3f314eaa 	.word	0x3f314eaa
 8002960:	f0bcee5a 	.word	0xf0bcee5a
 8002964:	3f54f675 	.word	0x3f54f675
 8002968:	00000000 	.word	0x00000000
 800296c:	40080000 	.word	0x40080000
 8002970:	61e3fc4e 	.word	0x61e3fc4e
 8002974:	3e825c55 	.word	0x3e825c55
 8002978:	66666666 	.word	0x66666666
 800297c:	40711266 	.word	0x40711266
 8002980:	20003f78 	.word	0x20003f78
 8002984:	3ff00000 	.word	0x3ff00000
 8002988:	20003f70 	.word	0x20003f70
 800298c:	bff00000 	.word	0xbff00000
 8002990:	20003f68 	.word	0x20003f68
 8002994:	00000000 	.word	0x00000000

08002998 <StartReadTempTask>:

void StartReadTempTask(void const * argument){
 8002998:	b580      	push	{r7, lr}
 800299a:	b092      	sub	sp, #72	; 0x48
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	char tempMsg[50];
	char* time;

	for (;;){
		if (newData_thermistor == 1) {
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <StartReadTempTask+0x148>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 808e 	bne.w	8002ac6 <StartReadTempTask+0x12e>
			for(int i = 0; i < 16; i++) {
 80029aa:	2300      	movs	r3, #0
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	e022      	b.n	80029f6 <StartReadTempTask+0x5e>
				  temperatures[i] = getTemperature(ADC_TO_Voltage * ADC_Readings[i]);
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <StartReadTempTask+0x14c>)
 80029b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdc3 	bl	8000544 <__aeabi_ui2d>
 80029be:	a346      	add	r3, pc, #280	; (adr r3, 8002ad8 <StartReadTempTask+0x140>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fe38 	bl	8000638 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	ec43 2b17 	vmov	d7, r2, r3
 80029d0:	eeb0 0a47 	vmov.f32	s0, s14
 80029d4:	eef0 0a67 	vmov.f32	s1, s15
 80029d8:	f7ff ff42 	bl	8002860 <getTemperature>
 80029dc:	eeb0 7a40 	vmov.f32	s14, s0
 80029e0:	eef0 7a60 	vmov.f32	s15, s1
 80029e4:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <StartReadTempTask+0x150>)
 80029e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	ed83 7b00 	vstr	d7, [r3]
			for(int i = 0; i < 16; i++) {
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	3301      	adds	r3, #1
 80029f4:	647b      	str	r3, [r7, #68]	; 0x44
 80029f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f8:	2b0f      	cmp	r3, #15
 80029fa:	ddd9      	ble.n	80029b0 <StartReadTempTask+0x18>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			time = get_time();
 80029fc:	f7ff fa74 	bl	8001ee8 <get_time>
 8002a00:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 8002a02:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a04:	f7fd fc54 	bl	80002b0 <strlen>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	230a      	movs	r3, #10
 8002a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a10:	4836      	ldr	r0, [pc, #216]	; (8002aec <StartReadTempTask+0x154>)
 8002a12:	f004 ff2c 	bl	800786e <HAL_USART_Transmit>

			sprintf(tempMsg, ",,%f,", temperatures[0]);
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <StartReadTempTask+0x150>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f107 000c 	add.w	r0, r7, #12
 8002a20:	4933      	ldr	r1, [pc, #204]	; (8002af0 <StartReadTempTask+0x158>)
 8002a22:	f00b fd37 	bl	800e494 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fc40 	bl	80002b0 <strlen>
 8002a30:	4603      	mov	r3, r0
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f107 010c 	add.w	r1, r7, #12
 8002a38:	230a      	movs	r3, #10
 8002a3a:	482c      	ldr	r0, [pc, #176]	; (8002aec <StartReadTempTask+0x154>)
 8002a3c:	f004 ff17 	bl	800786e <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[1]);
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <StartReadTempTask+0x150>)
 8002a42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a46:	f107 000c 	add.w	r0, r7, #12
 8002a4a:	492a      	ldr	r1, [pc, #168]	; (8002af4 <StartReadTempTask+0x15c>)
 8002a4c:	f00b fd22 	bl	800e494 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fc2b 	bl	80002b0 <strlen>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	f107 010c 	add.w	r1, r7, #12
 8002a62:	230a      	movs	r3, #10
 8002a64:	4821      	ldr	r0, [pc, #132]	; (8002aec <StartReadTempTask+0x154>)
 8002a66:	f004 ff02 	bl	800786e <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[2]);
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <StartReadTempTask+0x150>)
 8002a6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a70:	f107 000c 	add.w	r0, r7, #12
 8002a74:	491f      	ldr	r1, [pc, #124]	; (8002af4 <StartReadTempTask+0x15c>)
 8002a76:	f00b fd0d 	bl	800e494 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fc16 	bl	80002b0 <strlen>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	f107 010c 	add.w	r1, r7, #12
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	4817      	ldr	r0, [pc, #92]	; (8002aec <StartReadTempTask+0x154>)
 8002a90:	f004 feed 	bl	800786e <HAL_USART_Transmit>

			sprintf(tempMsg, "%f\r\n", temperatures[3]);
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <StartReadTempTask+0x150>)
 8002a96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a9a:	f107 000c 	add.w	r0, r7, #12
 8002a9e:	4916      	ldr	r1, [pc, #88]	; (8002af8 <StartReadTempTask+0x160>)
 8002aa0:	f00b fcf8 	bl	800e494 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fc01 	bl	80002b0 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	f107 010c 	add.w	r1, r7, #12
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <StartReadTempTask+0x154>)
 8002aba:	f004 fed8 	bl	800786e <HAL_USART_Transmit>

			SDCardLogWrite("Thermistor Log", 15);
 8002abe:	210f      	movs	r1, #15
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <StartReadTempTask+0x164>)
 8002ac2:	f7ff fb2f 	bl	8002124 <SDCardLogWrite>

			/* Logging Ends */
		}

		newData_thermistor = 0;
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <StartReadTempTask+0x148>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
		osDelay(500);
 8002acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad0:	f008 fafe 	bl	800b0d0 <osDelay>
		if (newData_thermistor == 1) {
 8002ad4:	e764      	b.n	80029a0 <StartReadTempTask+0x8>
 8002ad6:	bf00      	nop
 8002ad8:	e734d9b4 	.word	0xe734d9b4
 8002adc:	3f4a680c 	.word	0x3f4a680c
 8002ae0:	20000a7c 	.word	0x20000a7c
 8002ae4:	20000a38 	.word	0x20000a38
 8002ae8:	20003ee8 	.word	0x20003ee8
 8002aec:	200040ac 	.word	0x200040ac
 8002af0:	08011d14 	.word	0x08011d14
 8002af4:	08011d1c 	.word	0x08011d1c
 8002af8:	08011d20 	.word	0x08011d20
 8002afc:	08011d28 	.word	0x08011d28

08002b00 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b2e:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <MX_TIM3_Init+0xfc>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b52:	4829      	ldr	r0, [pc, #164]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b54:	f003 fefa 	bl	800694c <HAL_TIM_IC_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002b5e:	f7ff f96d 	bl	8001e3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b62:	2304      	movs	r3, #4
 8002b64:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b66:	2350      	movs	r3, #80	; 0x50
 8002b68:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002b7e:	f004 fa01 	bl	8006f84 <HAL_TIM_SlaveConfigSynchro>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b88:	f7ff f958 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b90:	2301      	movs	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4814      	ldr	r0, [pc, #80]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002ba6:	f004 f951 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002bb0:	f7ff f944 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	480c      	ldr	r0, [pc, #48]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002bc6:	f004 f941 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002bd0:	f7ff f934 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_TIM3_Init+0xf8>)
 8002be2:	f004 fd73 	bl	80076cc <HAL_TIMEx_MasterConfigSynchronization>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002bec:	f7ff f926 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	3730      	adds	r7, #48	; 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20003f8c 	.word	0x20003f8c
 8002bfc:	40000400 	.word	0x40000400

08002c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	1d3b      	adds	r3, r7, #4
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <MX_TIM4_Init+0xfc>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c32:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c52:	4829      	ldr	r0, [pc, #164]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c54:	f003 fe7a 	bl	800694c <HAL_TIM_IC_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002c5e:	f7ff f8ed 	bl	8001e3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002c62:	2304      	movs	r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002c66:	2350      	movs	r3, #80	; 0x50
 8002c68:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481e      	ldr	r0, [pc, #120]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002c7e:	f004 f981 	bl	8006f84 <HAL_TIM_SlaveConfigSynchro>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002c88:	f7ff f8d8 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c90:	2301      	movs	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c9c:	f107 030c 	add.w	r3, r7, #12
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4814      	ldr	r0, [pc, #80]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002ca6:	f004 f8d1 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002cb0:	f7ff f8c4 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002cc6:	f004 f8c1 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002cd0:	f7ff f8b4 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_TIM4_Init+0xf8>)
 8002ce2:	f004 fcf3 	bl	80076cc <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002cec:	f7ff f8a6 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	; 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20003fd4 	.word	0x20003fd4
 8002cfc:	40000800 	.word	0x40000800

08002d00 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <MX_TIM11_Init+0x8c>)
 8002d16:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d2a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d38:	4813      	ldr	r0, [pc, #76]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d3a:	f003 fd47 	bl	80067cc <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002d44:	f7ff f87a 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d4a:	f003 fdff 	bl	800694c <HAL_TIM_IC_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002d54:	f7ff f872 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <MX_TIM11_Init+0x88>)
 8002d70:	f004 f86c 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002d7a:	f7ff f85f 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000401c 	.word	0x2000401c
 8002d8c:	40014800 	.word	0x40014800

08002d90 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002db2:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <MX_TIM12_Init+0xd4>)
 8002db6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dca:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002dd8:	4821      	ldr	r0, [pc, #132]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002dda:	f003 fdb7 	bl	800694c <HAL_TIM_IC_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8002de4:	f7ff f82a 	bl	8001e3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002de8:	2304      	movs	r3, #4
 8002dea:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002dec:	2350      	movs	r3, #80	; 0x50
 8002dee:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	4817      	ldr	r0, [pc, #92]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002e04:	f004 f8be 	bl	8006f84 <HAL_TIM_SlaveConfigSynchro>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002e0e:	f7ff f815 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	480d      	ldr	r0, [pc, #52]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002e2a:	f004 f80f 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8002e34:	f7ff f802 	bl	8001e3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2204      	movs	r2, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4806      	ldr	r0, [pc, #24]	; (8002e60 <MX_TIM12_Init+0xd0>)
 8002e48:	f004 f800 	bl	8006e4c <HAL_TIM_IC_ConfigChannel>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8002e52:	f7fe fff3 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	3728      	adds	r7, #40	; 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20004064 	.word	0x20004064
 8002e64:	40001800 	.word	0x40001800

08002e68 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a57      	ldr	r2, [pc, #348]	; (8002fe4 <HAL_TIM_IC_MspInit+0x17c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d134      	bne.n	8002ef4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	4b56      	ldr	r3, [pc, #344]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a55      	ldr	r2, [pc, #340]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	623b      	str	r3, [r7, #32]
 8002ea4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a4e      	ldr	r2, [pc, #312]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b4c      	ldr	r3, [pc, #304]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	4843      	ldr	r0, [pc, #268]	; (8002fec <HAL_TIM_IC_MspInit+0x184>)
 8002ede:	f001 fc15 	bl	800470c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2105      	movs	r1, #5
 8002ee6:	201d      	movs	r0, #29
 8002ee8:	f001 f876 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eec:	201d      	movs	r0, #29
 8002eee:	f001 f88f 	bl	8004010 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002ef2:	e073      	b.n	8002fdc <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM4)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_TIM_IC_MspInit+0x188>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d134      	bne.n	8002f68 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a38      	ldr	r2, [pc, #224]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f36:	2340      	movs	r3, #64	; 0x40
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f46:	2302      	movs	r3, #2
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4828      	ldr	r0, [pc, #160]	; (8002ff4 <HAL_TIM_IC_MspInit+0x18c>)
 8002f52:	f001 fbdb 	bl	800470c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2105      	movs	r1, #5
 8002f5a:	201e      	movs	r0, #30
 8002f5c:	f001 f83c 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f60:	201e      	movs	r0, #30
 8002f62:	f001 f855 	bl	8004010 <HAL_NVIC_EnableIRQ>
}
 8002f66:	e039      	b.n	8002fdc <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM12)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <HAL_TIM_IC_MspInit+0x190>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d134      	bne.n	8002fdc <HAL_TIM_IC_MspInit+0x174>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_TIM_IC_MspInit+0x180>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002fbc:	2309      	movs	r3, #9
 8002fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <HAL_TIM_IC_MspInit+0x18c>)
 8002fc8:	f001 fba0 	bl	800470c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2105      	movs	r1, #5
 8002fd0:	202b      	movs	r0, #43	; 0x2b
 8002fd2:	f001 f801 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002fd6:	202b      	movs	r0, #43	; 0x2b
 8002fd8:	f001 f81a 	bl	8004010 <HAL_NVIC_EnableIRQ>
}
 8002fdc:	bf00      	nop
 8002fde:	3738      	adds	r7, #56	; 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40001800 	.word	0x40001800

08002ffc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM11)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_TIM_Base_MspInit+0x94>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d134      	bne.n	8003088 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_TIM_Base_MspInit+0x98>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003068:	2303      	movs	r3, #3
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	4809      	ldr	r0, [pc, #36]	; (8003098 <HAL_TIM_Base_MspInit+0x9c>)
 8003074:	f001 fb4a 	bl	800470c <HAL_GPIO_Init>

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2105      	movs	r1, #5
 800307c:	201a      	movs	r0, #26
 800307e:	f000 ffab 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003082:	201a      	movs	r0, #26
 8003084:	f000 ffc4 	bl	8004010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40014800 	.word	0x40014800
 8003094:	40023800 	.word	0x40023800
 8003098:	40020400 	.word	0x40020400

0800309c <HAL_TIM_IC_CaptureCallback>:
}

/* USER CODE BEGIN 1 */
// function called when timer interrupt occurs
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
		}
	}
	*/

	// when interrupt is caused by timer 3
	if(htim->Instance == TIM3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10c      	bne.n	80030c8 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f003 ffa9 	bl	8007008 <HAL_TIM_ReadCapturedValue>
 80030b6:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			wheel_FL_pulse_count++;	// increment pulse_count
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_TIM_IC_CaptureCallback+0x80>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_TIM_IC_CaptureCallback+0x80>)
 80030c6:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 4
	if(htim->Instance == TIM4)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_TIM_IC_CaptureCallback+0x84>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10c      	bne.n	80030ec <HAL_TIM_IC_CaptureCallback+0x50>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80030d2:	2100      	movs	r1, #0
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f003 ff97 	bl	8007008 <HAL_TIM_ReadCapturedValue>
 80030da:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_IC_CaptureCallback+0x50>
		{
			wheel_FR_pulse_count++;	// increment pulse_count
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_TIM_IC_CaptureCallback+0x88>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <HAL_TIM_IC_CaptureCallback+0x88>)
 80030ea:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 12
	if(htim->Instance == TIM12)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10c      	bne.n	8003110 <HAL_TIM_IC_CaptureCallback+0x74>
	{

		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80030f6:	2100      	movs	r1, #0
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f003 ff85 	bl	8007008 <HAL_TIM_ReadCapturedValue>
 80030fe:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			flowmeter_pulse_count++;	// increment pulse_count
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_TIM_IC_CaptureCallback+0x90>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a07      	ldr	r2, [pc, #28]	; (800312c <HAL_TIM_IC_CaptureCallback+0x90>)
 800310e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40000400 	.word	0x40000400
 800311c:	20003f84 	.word	0x20003f84
 8003120:	40000800 	.word	0x40000800
 8003124:	20003f88 	.word	0x20003f88
 8003128:	40001800 	.word	0x40001800
 800312c:	20003f80 	.word	0x20003f80

08003130 <MX_USART1_Init>:

USART_HandleTypeDef husart1;

/* USART1 init function */
void MX_USART1_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_USART1_Init+0x50>)
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <MX_USART1_Init+0x54>)
 8003138:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <MX_USART1_Init+0x50>)
 800313c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003140:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_USART1_Init+0x50>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <MX_USART1_Init+0x50>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_USART1_Init+0x50>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <MX_USART1_Init+0x50>)
 8003156:	220c      	movs	r2, #12
 8003158:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_USART1_Init+0x50>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <MX_USART1_Init+0x50>)
 8003162:	2200      	movs	r2, #0
 8003164:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <MX_USART1_Init+0x50>)
 8003168:	2200      	movs	r2, #0
 800316a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <MX_USART1_Init+0x50>)
 800316e:	f004 fb3d 	bl	80077ec <HAL_USART_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8003178:	f7fe fe60 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200040ac 	.word	0x200040ac
 8003184:	40011000 	.word	0x40011000

08003188 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <HAL_USART_MspInit+0x84>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d12c      	bne.n	8003204 <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031b4:	f043 0310 	orr.w	r3, r3, #16
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <HAL_USART_MspInit+0x88>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80031e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80031e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031f4:	2307      	movs	r3, #7
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <HAL_USART_MspInit+0x8c>)
 8003200:	f001 fa84 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003204:	bf00      	nop
 8003206:	3728      	adds	r7, #40	; 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40011000 	.word	0x40011000
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000

08003218 <calculateWheelSpeed>:

extern volatile int wheel_FL_pulse_count;
extern volatile int wheel_FR_pulse_count;

// gets wheel speeds as m/s
double calculateWheelSpeed(int pulse_count){
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	volatile double wheel_speed;

	wheel_speed = pulse_count*conversionFactor*WHEEL_CIRCUMFERENCE/NUM_TEETH;	// calculate wheel speed
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fd f99f 	bl	8000564 <__aeabi_i2d>
 8003226:	a315      	add	r3, pc, #84	; (adr r3, 800327c <calculateWheelSpeed+0x64>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd fa04 	bl	8000638 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	a312      	add	r3, pc, #72	; (adr r3, 8003284 <calculateWheelSpeed+0x6c>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd f9fb 	bl	8000638 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <calculateWheelSpeed+0x60>)
 8003250:	f7fd fb1c 	bl	800088c <__aeabi_ddiv>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return wheel_speed;
 800325c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003260:	ec43 2b17 	vmov	d7, r2, r3
}
 8003264:	eeb0 0a47 	vmov.f32	s0, s14
 8003268:	eef0 0a67 	vmov.f32	s1, s15
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	40240000 	.word	0x40240000
 800327c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003280:	3f60624d 	.word	0x3f60624d
 8003284:	f01b866e 	.word	0xf01b866e
 8003288:	400921f9 	.word	0x400921f9

0800328c <StartGetWheelSpeedTask>:

void StartGetWheelSpeedTask(void const * argument){
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	volatile double FL_speed;
	volatile double FR_speed;

	for (;;){
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 8003294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003298:	f007 ff1a 	bl	800b0d0 <osDelay>

		// calculates wheel speeds
		FL_speed = calculateWheelSpeed(wheel_FL_pulse_count);
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <StartGetWheelSpeedTask+0x54>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ffb9 	bl	8003218 <calculateWheelSpeed>
 80032a6:	eeb0 7a40 	vmov.f32	s14, s0
 80032aa:	eef0 7a60 	vmov.f32	s15, s1
 80032ae:	ed87 7b04 	vstr	d7, [r7, #16]
		FR_speed = calculateWheelSpeed(wheel_FR_pulse_count);
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <StartGetWheelSpeedTask+0x58>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ffae 	bl	8003218 <calculateWheelSpeed>
 80032bc:	eeb0 7a40 	vmov.f32	s14, s0
 80032c0:	eef0 7a60 	vmov.f32	s15, s1
 80032c4:	ed87 7b02 	vstr	d7, [r7, #8]

		/* TODO SCU#35 */
		/* Logging Starts */
		SDCardLogWrite("Wheel Speed Log", 16);
 80032c8:	2110      	movs	r1, #16
 80032ca:	4807      	ldr	r0, [pc, #28]	; (80032e8 <StartGetWheelSpeedTask+0x5c>)
 80032cc:	f7fe ff2a 	bl	8002124 <SDCardLogWrite>
		/* Logging Ends */

		// reset counts
		wheel_FL_pulse_count = 0;
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <StartGetWheelSpeedTask+0x54>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
		wheel_FR_pulse_count = 0;
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <StartGetWheelSpeedTask+0x58>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 80032dc:	e7da      	b.n	8003294 <StartGetWheelSpeedTask+0x8>
 80032de:	bf00      	nop
 80032e0:	20003f84 	.word	0x20003f84
 80032e4:	20003f88 	.word	0x20003f88
 80032e8:	08011d38 	.word	0x08011d38

080032ec <Reset_Handler>:
 80032ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003324 <LoopFillZerobss+0x12>
 80032f0:	480d      	ldr	r0, [pc, #52]	; (8003328 <LoopFillZerobss+0x16>)
 80032f2:	490e      	ldr	r1, [pc, #56]	; (800332c <LoopFillZerobss+0x1a>)
 80032f4:	4a0e      	ldr	r2, [pc, #56]	; (8003330 <LoopFillZerobss+0x1e>)
 80032f6:	2300      	movs	r3, #0
 80032f8:	e002      	b.n	8003300 <LoopCopyDataInit>

080032fa <CopyDataInit>:
 80032fa:	58d4      	ldr	r4, [r2, r3]
 80032fc:	50c4      	str	r4, [r0, r3]
 80032fe:	3304      	adds	r3, #4

08003300 <LoopCopyDataInit>:
 8003300:	18c4      	adds	r4, r0, r3
 8003302:	428c      	cmp	r4, r1
 8003304:	d3f9      	bcc.n	80032fa <CopyDataInit>
 8003306:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <LoopFillZerobss+0x22>)
 8003308:	4c0b      	ldr	r4, [pc, #44]	; (8003338 <LoopFillZerobss+0x26>)
 800330a:	2300      	movs	r3, #0
 800330c:	e001      	b.n	8003312 <LoopFillZerobss>

0800330e <FillZerobss>:
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	3204      	adds	r2, #4

08003312 <LoopFillZerobss>:
 8003312:	42a2      	cmp	r2, r4
 8003314:	d3fb      	bcc.n	800330e <FillZerobss>
 8003316:	f7ff fa31 	bl	800277c <SystemInit>
 800331a:	f00b f9ef 	bl	800e6fc <__libc_init_array>
 800331e:	f7fe fcdb 	bl	8001cd8 <main>
 8003322:	4770      	bx	lr
 8003324:	20020000 	.word	0x20020000
 8003328:	20000000 	.word	0x20000000
 800332c:	20000208 	.word	0x20000208
 8003330:	080121f8 	.word	0x080121f8
 8003334:	20000208 	.word	0x20000208
 8003338:	2000801c 	.word	0x2000801c

0800333c <ADC_IRQHandler>:
 800333c:	e7fe      	b.n	800333c <ADC_IRQHandler>
	...

08003340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_Init+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_Init+0x40>)
 800334a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_Init+0x40>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_Init+0x40>)
 8003356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_Init+0x40>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003368:	2003      	movs	r0, #3
 800336a:	f000 fe2a 	bl	8003fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336e:	200f      	movs	r0, #15
 8003370:	f7ff f87a 	bl	8002468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003374:	f7ff f84c 	bl	8002410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023c00 	.word	0x40023c00

08003384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_IncTick+0x20>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_IncTick+0x24>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4413      	add	r3, r2
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <HAL_IncTick+0x24>)
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	200040f0 	.word	0x200040f0

080033ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return uwTick;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_GetTick+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200040f0 	.word	0x200040f0

080033c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e033      	b.n	8003442 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe f962 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa6e 	bl	80038f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
 8003432:	e001      	b.n	8003438 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_Start_DMA+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e0e9      	b.n	800363e <HAL_ADC_Start_DMA+0x1f2>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d018      	beq.n	80034b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003490:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_ADC_Start_DMA+0x1fc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6d      	ldr	r2, [pc, #436]	; (800364c <HAL_ADC_Start_DMA+0x200>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9a      	lsrs	r2, r3, #18
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034a4:	e002      	b.n	80034ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f9      	bne.n	80034a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c0:	d107      	bne.n	80034d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 80a1 	bne.w	8003624 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800350c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d106      	bne.n	8003530 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f023 0206 	bic.w	r2, r3, #6
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
 800352e:	e002      	b.n	8003536 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353e:	4b44      	ldr	r3, [pc, #272]	; (8003650 <HAL_ADC_Start_DMA+0x204>)
 8003540:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4a43      	ldr	r2, [pc, #268]	; (8003654 <HAL_ADC_Start_DMA+0x208>)
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4a42      	ldr	r2, [pc, #264]	; (8003658 <HAL_ADC_Start_DMA+0x20c>)
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	4a41      	ldr	r2, [pc, #260]	; (800365c <HAL_ADC_Start_DMA+0x210>)
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003562:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003572:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003582:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	334c      	adds	r3, #76	; 0x4c
 800358e:	4619      	mov	r1, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f000 fdf8 	bl	8004188 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12a      	bne.n	80035fa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2d      	ldr	r2, [pc, #180]	; (8003660 <HAL_ADC_Start_DMA+0x214>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d015      	beq.n	80035da <HAL_ADC_Start_DMA+0x18e>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <HAL_ADC_Start_DMA+0x218>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d105      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x178>
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_ADC_Start_DMA+0x204>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <HAL_ADC_Start_DMA+0x21c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d136      	bne.n	800363c <HAL_ADC_Start_DMA+0x1f0>
 80035ce:	4b20      	ldr	r3, [pc, #128]	; (8003650 <HAL_ADC_Start_DMA+0x204>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d130      	bne.n	800363c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d129      	bne.n	800363c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	e020      	b.n	800363c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_ADC_Start_DMA+0x214>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d11b      	bne.n	800363c <HAL_ADC_Start_DMA+0x1f0>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	e00b      	b.n	800363c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0210 	orr.w	r2, r3, #16
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000004 	.word	0x20000004
 800364c:	431bde83 	.word	0x431bde83
 8003650:	40012300 	.word	0x40012300
 8003654:	08003af1 	.word	0x08003af1
 8003658:	08003bab 	.word	0x08003bab
 800365c:	08003bc7 	.word	0x08003bc7
 8003660:	40012000 	.word	0x40012000
 8003664:	40012100 	.word	0x40012100
 8003668:	40012200 	.word	0x40012200

0800366c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1c>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e113      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x244>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b09      	cmp	r3, #9
 80036be:	d925      	bls.n	800370c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68d9      	ldr	r1, [r3, #12]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	3b1e      	subs	r3, #30
 80036d6:	2207      	movs	r2, #7
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43da      	mvns	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	400a      	ands	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68d9      	ldr	r1, [r3, #12]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	4603      	mov	r3, r0
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4403      	add	r3, r0
 80036fe:	3b1e      	subs	r3, #30
 8003700:	409a      	lsls	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e022      	b.n	8003752 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6919      	ldr	r1, [r3, #16]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	2207      	movs	r2, #7
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	400a      	ands	r2, r1
 800372e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6919      	ldr	r1, [r3, #16]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	4618      	mov	r0, r3
 8003742:	4603      	mov	r3, r0
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4403      	add	r3, r0
 8003748:	409a      	lsls	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d824      	bhi.n	80037a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	3b05      	subs	r3, #5
 800376c:	221f      	movs	r2, #31
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	400a      	ands	r2, r1
 800377a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	4618      	mov	r0, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	3b05      	subs	r3, #5
 8003796:	fa00 f203 	lsl.w	r2, r0, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
 80037a2:	e04c      	b.n	800383e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d824      	bhi.n	80037f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	3b23      	subs	r3, #35	; 0x23
 80037be:	221f      	movs	r2, #31
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43da      	mvns	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	400a      	ands	r2, r1
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	3b23      	subs	r3, #35	; 0x23
 80037e8:	fa00 f203 	lsl.w	r2, r0, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
 80037f4:	e023      	b.n	800383e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	3b41      	subs	r3, #65	; 0x41
 8003808:	221f      	movs	r2, #31
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	400a      	ands	r2, r1
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	4618      	mov	r0, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	3b41      	subs	r3, #65	; 0x41
 8003832:	fa00 f203 	lsl.w	r2, r0, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_ADC_ConfigChannel+0x250>)
 8003840:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_ADC_ConfigChannel+0x254>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10f      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1d8>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b12      	cmp	r3, #18
 8003852:	d10b      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_ADC_ConfigChannel+0x254>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d12b      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x23a>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_ADC_ConfigChannel+0x258>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <HAL_ADC_ConfigChannel+0x1f4>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b11      	cmp	r3, #17
 8003886:	d122      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_ADC_ConfigChannel+0x258>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d111      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <HAL_ADC_ConfigChannel+0x25c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <HAL_ADC_ConfigChannel+0x260>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0c9a      	lsrs	r2, r3, #18
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038c0:	e002      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f9      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40012300 	.word	0x40012300
 80038e8:	40012000 	.word	0x40012000
 80038ec:	10000012 	.word	0x10000012
 80038f0:	20000004 	.word	0x20000004
 80038f4:	431bde83 	.word	0x431bde83

080038f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003900:	4b79      	ldr	r3, [pc, #484]	; (8003ae8 <ADC_Init+0x1f0>)
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	4a58      	ldr	r2, [pc, #352]	; (8003aec <ADC_Init+0x1f4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d022      	beq.n	80039d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800399e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	e00f      	b.n	80039f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0202 	bic.w	r2, r2, #2
 8003a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7e1b      	ldrb	r3, [r3, #24]
 8003a10:	005a      	lsls	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	035a      	lsls	r2, r3, #13
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	e007      	b.n	8003a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	051a      	lsls	r2, r3, #20
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aae:	025a      	lsls	r2, r3, #9
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	029a      	lsls	r2, r3, #10
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40012300 	.word	0x40012300
 8003aec:	0f000001 	.word	0x0f000001

08003af0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13c      	bne.n	8003b84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d12b      	bne.n	8003b7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d127      	bne.n	8003b7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d119      	bne.n	8003b7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0220 	bic.w	r2, r2, #32
 8003b56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7fd fe45 	bl	800180c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b82:	e00e      	b.n	8003ba2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fd75 	bl	8003680 <HAL_ADC_ErrorCallback>
}
 8003b96:	e004      	b.n	8003ba2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fd57 	bl	800366c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff fd4a 	bl	8003680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c08:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d003      	beq.n	8003c18 <HAL_CAN_GetRxMessage+0x24>
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 80f3 	bne.w	8003dfe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10e      	bne.n	8003c3c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d116      	bne.n	8003c5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0e7      	b.n	8003e0c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0d8      	b.n	8003e0c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	331b      	adds	r3, #27
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0204 	and.w	r2, r3, #4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10c      	bne.n	8003c92 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	331b      	adds	r3, #27
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0d5b      	lsrs	r3, r3, #21
 8003c88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e00b      	b.n	8003caa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	331b      	adds	r3, #27
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4413      	add	r3, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	331b      	adds	r3, #27
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0202 	and.w	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	331b      	adds	r3, #27
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	331b      	adds	r3, #27
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	331b      	adds	r3, #27
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	0a1a      	lsrs	r2, r3, #8
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0c1a      	lsrs	r2, r3, #16
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0e1a      	lsrs	r2, r3, #24
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	3303      	adds	r3, #3
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0a1a      	lsrs	r2, r3, #8
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	3305      	adds	r3, #5
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0c1a      	lsrs	r2, r3, #16
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	3306      	adds	r3, #6
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e1a      	lsrs	r2, r3, #24
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	3307      	adds	r3, #7
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0220 	orr.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e007      	b.n	8003dfa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e006      	b.n	8003e0c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003e34:	7afb      	ldrb	r3, [r7, #11]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d10f      	bne.n	8003e5a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e005      	b.n	8003e5a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e9a:	4a04      	ldr	r2, [pc, #16]	; (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	60d3      	str	r3, [r2, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0307 	and.w	r3, r3, #7
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	db0b      	blt.n	8003ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	f003 021f 	and.w	r2, r3, #31
 8003ee4:	4907      	ldr	r1, [pc, #28]	; (8003f04 <__NVIC_EnableIRQ+0x38>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2001      	movs	r0, #1
 8003eee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100

08003f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db0a      	blt.n	8003f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	490c      	ldr	r1, [pc, #48]	; (8003f54 <__NVIC_SetPriority+0x4c>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	0112      	lsls	r2, r2, #4
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f30:	e00a      	b.n	8003f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <__NVIC_SetPriority+0x50>)
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3b04      	subs	r3, #4
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	440b      	add	r3, r1
 8003f46:	761a      	strb	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf28      	it	cs
 8003f7a:	2304      	movcs	r3, #4
 8003f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d902      	bls.n	8003f8c <NVIC_EncodePriority+0x30>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3b03      	subs	r3, #3
 8003f8a:	e000      	b.n	8003f8e <NVIC_EncodePriority+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43d9      	mvns	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	4313      	orrs	r3, r2
         );
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ff4c 	bl	8003e68 <__NVIC_SetPriorityGrouping>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fea:	f7ff ff61 	bl	8003eb0 <__NVIC_GetPriorityGrouping>
 8003fee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	6978      	ldr	r0, [r7, #20]
 8003ff6:	f7ff ffb1 	bl	8003f5c <NVIC_EncodePriority>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff ff80 	bl	8003f08 <__NVIC_SetPriority>
}
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff54 	bl	8003ecc <__NVIC_EnableIRQ>
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004038:	f7ff f9b8 	bl	80033ac <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e099      	b.n	800417c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004068:	e00f      	b.n	800408a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800406a:	f7ff f99f 	bl	80033ac <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b05      	cmp	r3, #5
 8004076:	d908      	bls.n	800408a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e078      	b.n	800417c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e8      	bne.n	800406a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_DMA_Init+0x158>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d107      	bne.n	80040f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4313      	orrs	r3, r2
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0307 	bic.w	r3, r3, #7
 800410a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2b04      	cmp	r3, #4
 800411c:	d117      	bne.n	800414e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa6f 	bl	8004614 <DMA_CheckFifoParam>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800414a:	2301      	movs	r3, #1
 800414c:	e016      	b.n	800417c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa26 	bl	80045a8 <DMA_CalcBaseAndBitshift>
 800415c:	4603      	mov	r3, r0
 800415e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	223f      	movs	r2, #63	; 0x3f
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	f010803f 	.word	0xf010803f

08004188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_DMA_Start_IT+0x26>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e040      	b.n	8004230 <HAL_DMA_Start_IT+0xa8>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d12f      	bne.n	8004222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9b8 	bl	800454c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	223f      	movs	r2, #63	; 0x3f
 80041e2:	409a      	lsls	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0216 	orr.w	r2, r2, #22
 80041f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e005      	b.n	800422e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800422a:	2302      	movs	r3, #2
 800422c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004244:	4b8e      	ldr	r3, [pc, #568]	; (8004480 <HAL_DMA_IRQHandler+0x248>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a8e      	ldr	r2, [pc, #568]	; (8004484 <HAL_DMA_IRQHandler+0x24c>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2208      	movs	r2, #8
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01a      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0204 	bic.w	r2, r2, #4
 800428a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	2208      	movs	r2, #8
 8004292:	409a      	lsls	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f043 0201 	orr.w	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d012      	beq.n	80042da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2201      	movs	r2, #1
 80042c8:	409a      	lsls	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	f043 0202 	orr.w	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	2204      	movs	r2, #4
 80042e0:	409a      	lsls	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d012      	beq.n	8004310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	2204      	movs	r2, #4
 80042fe:	409a      	lsls	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f043 0204 	orr.w	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	2210      	movs	r2, #16
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d043      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d03c      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2210      	movs	r2, #16
 8004334:	409a      	lsls	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d018      	beq.n	800437a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d024      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
 8004366:	e01f      	b.n	80043a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
 8004378:	e016      	b.n	80043a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0208 	bic.w	r2, r2, #8
 8004396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	2220      	movs	r2, #32
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 808f 	beq.w	80044d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8087 	beq.w	80044d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	2220      	movs	r2, #32
 80043d0:	409a      	lsls	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d136      	bne.n	8004450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0216 	bic.w	r2, r2, #22
 80043f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_DMA_IRQHandler+0x1da>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0208 	bic.w	r2, r2, #8
 8004420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	223f      	movs	r2, #63	; 0x3f
 8004428:	409a      	lsls	r2, r3
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07e      	beq.n	8004544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
        }
        return;
 800444e:	e079      	b.n	8004544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	2b00      	cmp	r3, #0
 8004472:	d031      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	e02c      	b.n	80044d8 <HAL_DMA_IRQHandler+0x2a0>
 800447e:	bf00      	nop
 8004480:	20000004 	.word	0x20000004
 8004484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d023      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
 8004498:	e01e      	b.n	80044d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0210 	bic.w	r2, r2, #16
 80044b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d032      	beq.n	8004546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2205      	movs	r2, #5
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	3301      	adds	r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	429a      	cmp	r2, r3
 800450e:	d307      	bcc.n	8004520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f2      	bne.n	8004504 <HAL_DMA_IRQHandler+0x2cc>
 800451e:	e000      	b.n	8004522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
 8004542:	e000      	b.n	8004546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004544:	bf00      	nop
    }
  }
}
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d108      	bne.n	800458c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800458a:	e007      	b.n	800459c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3b10      	subs	r3, #16
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <DMA_CalcBaseAndBitshift+0x64>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045c2:	4a13      	ldr	r2, [pc, #76]	; (8004610 <DMA_CalcBaseAndBitshift+0x68>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d909      	bls.n	80045ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	659a      	str	r2, [r3, #88]	; 0x58
 80045e8:	e007      	b.n	80045fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	aaaaaaab 	.word	0xaaaaaaab
 8004610:	08011dbc 	.word	0x08011dbc

08004614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11f      	bne.n	800466e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d856      	bhi.n	80046e2 <DMA_CheckFifoParam+0xce>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <DMA_CheckFifoParam+0x28>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	0800465f 	.word	0x0800465f
 8004644:	0800464d 	.word	0x0800464d
 8004648:	080046e3 	.word	0x080046e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d046      	beq.n	80046e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465c:	e043      	b.n	80046e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004666:	d140      	bne.n	80046ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466c:	e03d      	b.n	80046ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	d121      	bne.n	80046bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d837      	bhi.n	80046ee <DMA_CheckFifoParam+0xda>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <DMA_CheckFifoParam+0x70>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	08004695 	.word	0x08004695
 8004688:	0800469b 	.word	0x0800469b
 800468c:	08004695 	.word	0x08004695
 8004690:	080046ad 	.word	0x080046ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      break;
 8004698:	e030      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d025      	beq.n	80046f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046aa:	e022      	b.n	80046f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046b4:	d11f      	bne.n	80046f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ba:	e01c      	b.n	80046f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d903      	bls.n	80046ca <DMA_CheckFifoParam+0xb6>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d003      	beq.n	80046d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046c8:	e018      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      break;
 80046ce:	e015      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e00b      	b.n	80046fa <DMA_CheckFifoParam+0xe6>
      break;
 80046e2:	bf00      	nop
 80046e4:	e00a      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;
 80046e6:	bf00      	nop
 80046e8:	e008      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;
 80046ea:	bf00      	nop
 80046ec:	e006      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;
 80046ee:	bf00      	nop
 80046f0:	e004      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;   
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <DMA_CheckFifoParam+0xe8>
      break;
 80046fa:	bf00      	nop
    }
  } 
  
  return status; 
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	e165      	b.n	80049f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004728:	2201      	movs	r2, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	429a      	cmp	r2, r3
 8004742:	f040 8154 	bne.w	80049ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d005      	beq.n	800475e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800475a:	2b02      	cmp	r3, #2
 800475c:	d130      	bne.n	80047c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	2203      	movs	r2, #3
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004794:	2201      	movs	r2, #1
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 0201 	and.w	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d017      	beq.n	80047fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d123      	bne.n	8004850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	08da      	lsrs	r2, r3, #3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3208      	adds	r2, #8
 8004810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	08da      	lsrs	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3208      	adds	r2, #8
 800484a:	69b9      	ldr	r1, [r7, #24]
 800484c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0203 	and.w	r2, r3, #3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80ae 	beq.w	80049ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	4b5d      	ldr	r3, [pc, #372]	; (8004a0c <HAL_GPIO_Init+0x300>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_GPIO_Init+0x300>)
 800489c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b5a      	ldr	r3, [pc, #360]	; (8004a0c <HAL_GPIO_Init+0x300>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ae:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_GPIO_Init+0x304>)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4f      	ldr	r2, [pc, #316]	; (8004a14 <HAL_GPIO_Init+0x308>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d025      	beq.n	8004926 <HAL_GPIO_Init+0x21a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <HAL_GPIO_Init+0x30c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <HAL_GPIO_Init+0x216>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4d      	ldr	r2, [pc, #308]	; (8004a1c <HAL_GPIO_Init+0x310>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d019      	beq.n	800491e <HAL_GPIO_Init+0x212>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4c      	ldr	r2, [pc, #304]	; (8004a20 <HAL_GPIO_Init+0x314>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0x20e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_GPIO_Init+0x318>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00d      	beq.n	8004916 <HAL_GPIO_Init+0x20a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_GPIO_Init+0x31c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <HAL_GPIO_Init+0x206>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a49      	ldr	r2, [pc, #292]	; (8004a2c <HAL_GPIO_Init+0x320>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_GPIO_Init+0x202>
 800490a:	2306      	movs	r3, #6
 800490c:	e00c      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 800490e:	2307      	movs	r3, #7
 8004910:	e00a      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 8004912:	2305      	movs	r3, #5
 8004914:	e008      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 8004916:	2304      	movs	r3, #4
 8004918:	e006      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 800491a:	2303      	movs	r3, #3
 800491c:	e004      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 800491e:	2302      	movs	r3, #2
 8004920:	e002      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_GPIO_Init+0x21c>
 8004926:	2300      	movs	r3, #0
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	f002 0203 	and.w	r2, r2, #3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4093      	lsls	r3, r2
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004938:	4935      	ldr	r1, [pc, #212]	; (8004a10 <HAL_GPIO_Init+0x304>)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	3302      	adds	r3, #2
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004946:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_GPIO_Init+0x324>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496a:	4a31      	ldr	r2, [pc, #196]	; (8004a30 <HAL_GPIO_Init+0x324>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004970:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_GPIO_Init+0x324>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <HAL_GPIO_Init+0x324>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800499a:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <HAL_GPIO_Init+0x324>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049be:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <HAL_GPIO_Init+0x324>)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <HAL_GPIO_Init+0x324>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049e8:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <HAL_GPIO_Init+0x324>)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b0f      	cmp	r3, #15
 80049f8:	f67f ae96 	bls.w	8004728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3724      	adds	r7, #36	; 0x24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40020000 	.word	0x40020000
 8004a18:	40020400 	.word	0x40020400
 8004a1c:	40020800 	.word	0x40020800
 8004a20:	40020c00 	.word	0x40020c00
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40021400 	.word	0x40021400
 8004a2c:	40021800 	.word	0x40021800
 8004a30:	40013c00 	.word	0x40013c00

08004a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
 8004a40:	4613      	mov	r3, r2
 8004a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a44:	787b      	ldrb	r3, [r7, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a4a:	887a      	ldrh	r2, [r7, #2]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a50:	e003      	b.n	8004a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a52:	887b      	ldrh	r3, [r7, #2]
 8004a54:	041a      	lsls	r2, r3, #16
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	619a      	str	r2, [r3, #24]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cc      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b68      	ldr	r3, [pc, #416]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d90c      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d044      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d119      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e06f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e067      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4934      	ldr	r1, [pc, #208]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b58:	f7fe fc28 	bl	80033ac <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b60:	f7fe fc24 	bl	80033ac <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e04f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 020c 	and.w	r2, r3, #12
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d1eb      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d20c      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e032      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bee:	f000 fbb1 	bl	8005354 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490a      	ldr	r1, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fc2a 	bl	8002468 <HAL_InitTick>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023c00 	.word	0x40023c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	08011d94 	.word	0x08011d94
 8004c2c:	20000004 	.word	0x20000004
 8004c30:	20000008 	.word	0x20000008

08004c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000004 	.word	0x20000004

08004c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c50:	f7ff fff0 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0a9b      	lsrs	r3, r3, #10
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08011da4 	.word	0x08011da4

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c78:	f7ff ffdc 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0b5b      	lsrs	r3, r3, #13
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	08011da4 	.word	0x08011da4

08004c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	220f      	movs	r2, #15
 8004caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0203 	and.w	r2, r3, #3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <HAL_RCC_GetClockConfig+0x60>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 020f 	and.w	r2, r3, #15
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	601a      	str	r2, [r3, #0]
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40023c00 	.word	0x40023c00

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004d38:	4b6f      	ldr	r3, [pc, #444]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	496c      	ldr	r1, [pc, #432]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004d66:	4b64      	ldr	r3, [pc, #400]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	4960      	ldr	r1, [pc, #384]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004d84:	2301      	movs	r3, #1
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d017      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d94:	4b58      	ldr	r3, [pc, #352]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4955      	ldr	r1, [pc, #340]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db2:	d101      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dd0:	4b49      	ldr	r3, [pc, #292]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	4946      	ldr	r1, [pc, #280]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dee:	d101      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004df0:	2301      	movs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 808a 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1e:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e36:	f7fe fab9 	bl	80033ac <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fe fab5 	bl	80033ac <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e278      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e50:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02f      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d028      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e84:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d114      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fe fa83 	bl	80033ac <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fe fa7f 	bl	80033ac <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e240      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ee      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed8:	d114      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	4902      	ldr	r1, [pc, #8]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]
 8004ef4:	e00c      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40007000 	.word	0x40007000
 8004f00:	42470e40 	.word	0x42470e40
 8004f04:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a49      	ldr	r2, [pc, #292]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f0e:	6093      	str	r3, [r2, #8]
 8004f10:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	4944      	ldr	r1, [pc, #272]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004f34:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004f36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004f44:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	4937      	ldr	r1, [pc, #220]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f66:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f74:	492e      	ldr	r1, [pc, #184]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f88:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	4926      	ldr	r1, [pc, #152]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa6:	d101      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	491a      	ldr	r1, [pc, #104]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d011      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	4911      	ldr	r1, [pc, #68]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d005      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500c:	f040 80ff 	bne.w	800520e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fe f9c9 	bl	80033ac <HAL_GetTick>
 800501a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800501c:	e00e      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fe f9c5 	bl	80033ac <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d907      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e188      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005030:	40023800 	.word	0x40023800
 8005034:	424711e0 	.word	0x424711e0
 8005038:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800503c:	4b7e      	ldr	r3, [pc, #504]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ea      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005064:	2b00      	cmp	r3, #0
 8005066:	d028      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d124      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005070:	4b71      	ldr	r3, [pc, #452]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	3301      	adds	r3, #1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005082:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005088:	0e1b      	lsrs	r3, r3, #24
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	019b      	lsls	r3, r3, #6
 800509a:	431a      	orrs	r2, r3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	085b      	lsrs	r3, r3, #1
 80050a0:	3b01      	subs	r3, #1
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	071b      	lsls	r3, r3, #28
 80050b2:	4961      	ldr	r1, [pc, #388]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d035      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e4:	d130      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050e6:	4b54      	ldr	r3, [pc, #336]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	3301      	adds	r3, #1
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050f8:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fe:	0f1b      	lsrs	r3, r3, #28
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	019b      	lsls	r3, r3, #6
 8005110:	431a      	orrs	r2, r3
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	431a      	orrs	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	071b      	lsls	r3, r3, #28
 8005128:	4943      	ldr	r1, [pc, #268]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005130:	4b41      	ldr	r3, [pc, #260]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005136:	f023 021f 	bic.w	r2, r3, #31
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	493d      	ldr	r1, [pc, #244]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d029      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515c:	d124      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	3301      	adds	r3, #1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005170:	4b31      	ldr	r3, [pc, #196]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005176:	0f1b      	lsrs	r3, r3, #28
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	019b      	lsls	r3, r3, #6
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	3b01      	subs	r3, #1
 8005192:	041b      	lsls	r3, r3, #16
 8005194:	431a      	orrs	r2, r3
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	431a      	orrs	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	071b      	lsls	r3, r3, #28
 80051a0:	4925      	ldr	r1, [pc, #148]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d016      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	3b01      	subs	r3, #1
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	071b      	lsls	r3, r3, #28
 80051da:	4917      	ldr	r1, [pc, #92]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e8:	f7fe f8e0 	bl	80033ac <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f0:	f7fe f8dc 	bl	80033ac <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e09f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	2b01      	cmp	r3, #1
 8005212:	f040 8095 	bne.w	8005340 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800521c:	f7fe f8c6 	bl	80033ac <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005222:	e00f      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005224:	f7fe f8c2 	bl	80033ac <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d908      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e085      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	42470068 	.word	0x42470068
 8005240:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005250:	d0e8      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02b      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d127      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800527a:	4b34      	ldr	r3, [pc, #208]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	3301      	adds	r3, #1
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	3b01      	subs	r3, #1
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	4928      	ldr	r1, [pc, #160]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	3b01      	subs	r3, #1
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01d      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052de:	d118      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	019b      	lsls	r3, r3, #6
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	4910      	ldr	r1, [pc, #64]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005318:	f7fe f848 	bl	80033ac <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005320:	f7fe f844 	bl	80033ac <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e007      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533e:	d1ef      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800
 8005350:	42470070 	.word	0x42470070

08005354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005358:	b0a6      	sub	sp, #152	; 0x98
 800535a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537a:	4bc8      	ldr	r3, [pc, #800]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b0c      	cmp	r3, #12
 8005384:	f200 817e 	bhi.w	8005684 <HAL_RCC_GetSysClockFreq+0x330>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <HAL_RCC_GetSysClockFreq+0x3c>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053c5 	.word	0x080053c5
 8005394:	08005685 	.word	0x08005685
 8005398:	08005685 	.word	0x08005685
 800539c:	08005685 	.word	0x08005685
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	08005685 	.word	0x08005685
 80053a8:	08005685 	.word	0x08005685
 80053ac:	08005685 	.word	0x08005685
 80053b0:	080053d5 	.word	0x080053d5
 80053b4:	08005685 	.word	0x08005685
 80053b8:	08005685 	.word	0x08005685
 80053bc:	08005685 	.word	0x08005685
 80053c0:	0800553f 	.word	0x0800553f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4bb6      	ldr	r3, [pc, #728]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80053c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80053ca:	e15f      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053cc:	4bb5      	ldr	r3, [pc, #724]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80053ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80053d2:	e15b      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d4:	4bb1      	ldr	r3, [pc, #708]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e0:	4bae      	ldr	r3, [pc, #696]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d031      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ec:	4bab      	ldr	r3, [pc, #684]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	099b      	lsrs	r3, r3, #6
 80053f2:	2200      	movs	r2, #0
 80053f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005400:	2300      	movs	r3, #0
 8005402:	667b      	str	r3, [r7, #100]	; 0x64
 8005404:	4ba7      	ldr	r3, [pc, #668]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005406:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800540a:	462a      	mov	r2, r5
 800540c:	fb03 f202 	mul.w	r2, r3, r2
 8005410:	2300      	movs	r3, #0
 8005412:	4621      	mov	r1, r4
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	4aa2      	ldr	r2, [pc, #648]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800541c:	4621      	mov	r1, r4
 800541e:	fba1 1202 	umull	r1, r2, r1, r2
 8005422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005424:	460a      	mov	r2, r1
 8005426:	67ba      	str	r2, [r7, #120]	; 0x78
 8005428:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800542a:	4413      	add	r3, r2
 800542c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005432:	2200      	movs	r2, #0
 8005434:	65bb      	str	r3, [r7, #88]	; 0x58
 8005436:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800543c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005440:	f7fb fc22 	bl	8000c88 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4613      	mov	r3, r2
 800544a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800544e:	e064      	b.n	800551a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005450:	4b92      	ldr	r3, [pc, #584]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	099b      	lsrs	r3, r3, #6
 8005456:	2200      	movs	r2, #0
 8005458:	653b      	str	r3, [r7, #80]	; 0x50
 800545a:	657a      	str	r2, [r7, #84]	; 0x54
 800545c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
 8005464:	2300      	movs	r3, #0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800546c:	4622      	mov	r2, r4
 800546e:	462b      	mov	r3, r5
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	0159      	lsls	r1, r3, #5
 800547a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800547e:	0150      	lsls	r0, r2, #5
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4621      	mov	r1, r4
 8005486:	1a51      	subs	r1, r2, r1
 8005488:	6139      	str	r1, [r7, #16]
 800548a:	4629      	mov	r1, r5
 800548c:	eb63 0301 	sbc.w	r3, r3, r1
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800549e:	4659      	mov	r1, fp
 80054a0:	018b      	lsls	r3, r1, #6
 80054a2:	4651      	mov	r1, sl
 80054a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054a8:	4651      	mov	r1, sl
 80054aa:	018a      	lsls	r2, r1, #6
 80054ac:	4651      	mov	r1, sl
 80054ae:	ebb2 0801 	subs.w	r8, r2, r1
 80054b2:	4659      	mov	r1, fp
 80054b4:	eb63 0901 	sbc.w	r9, r3, r1
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054cc:	4690      	mov	r8, r2
 80054ce:	4699      	mov	r9, r3
 80054d0:	4623      	mov	r3, r4
 80054d2:	eb18 0303 	adds.w	r3, r8, r3
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	462b      	mov	r3, r5
 80054da:	eb49 0303 	adc.w	r3, r9, r3
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ec:	4629      	mov	r1, r5
 80054ee:	028b      	lsls	r3, r1, #10
 80054f0:	4621      	mov	r1, r4
 80054f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f6:	4621      	mov	r1, r4
 80054f8:	028a      	lsls	r2, r1, #10
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005502:	2200      	movs	r2, #0
 8005504:	643b      	str	r3, [r7, #64]	; 0x40
 8005506:	647a      	str	r2, [r7, #68]	; 0x44
 8005508:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800550c:	f7fb fbbc 	bl	8000c88 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800551a:	4b60      	ldr	r3, [pc, #384]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	3301      	adds	r3, #1
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800552c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800553c:	e0a6      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800553e:	4b57      	ldr	r3, [pc, #348]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800554a:	4b54      	ldr	r3, [pc, #336]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d02a      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005556:	4b51      	ldr	r3, [pc, #324]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	2200      	movs	r2, #0
 800555e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005568:	2100      	movs	r1, #0
 800556a:	4b4e      	ldr	r3, [pc, #312]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800556c:	fb03 f201 	mul.w	r2, r3, r1
 8005570:	2300      	movs	r3, #0
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	4413      	add	r3, r2
 8005578:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800557a:	fba0 1202 	umull	r1, r2, r0, r2
 800557e:	677a      	str	r2, [r7, #116]	; 0x74
 8005580:	460a      	mov	r2, r1
 8005582:	673a      	str	r2, [r7, #112]	; 0x70
 8005584:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005586:	4413      	add	r3, r2
 8005588:	677b      	str	r3, [r7, #116]	; 0x74
 800558a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558e:	2200      	movs	r2, #0
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
 8005592:	637a      	str	r2, [r7, #52]	; 0x34
 8005594:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005598:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800559c:	f7fb fb74 	bl	8000c88 <__aeabi_uldivmod>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4613      	mov	r3, r2
 80055a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055aa:	e05b      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ac:	4b3b      	ldr	r3, [pc, #236]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	2200      	movs	r2, #0
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
 80055c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	f04f 0000 	mov.w	r0, #0
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	0159      	lsls	r1, r3, #5
 80055d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055da:	0150      	lsls	r0, r2, #5
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4641      	mov	r1, r8
 80055e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055e6:	4649      	mov	r1, r9
 80055e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005600:	ebb2 040a 	subs.w	r4, r2, sl
 8005604:	eb63 050b 	sbc.w	r5, r3, fp
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	00eb      	lsls	r3, r5, #3
 8005612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005616:	00e2      	lsls	r2, r4, #3
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4643      	mov	r3, r8
 800561e:	18e3      	adds	r3, r4, r3
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	464b      	mov	r3, r9
 8005624:	eb45 0303 	adc.w	r3, r5, r3
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005636:	4629      	mov	r1, r5
 8005638:	028b      	lsls	r3, r1, #10
 800563a:	4621      	mov	r1, r4
 800563c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005640:	4621      	mov	r1, r4
 8005642:	028a      	lsls	r2, r1, #10
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564c:	2200      	movs	r2, #0
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	61fa      	str	r2, [r7, #28]
 8005652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005656:	f7fb fb17 	bl	8000c88 <__aeabi_uldivmod>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4613      	mov	r3, r2
 8005660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <HAL_RCC_GetSysClockFreq+0x348>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	0f1b      	lsrs	r3, r3, #28
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005682:	e003      	b.n	800568c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800568a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005690:	4618      	mov	r0, r3
 8005692:	3798      	adds	r7, #152	; 0x98
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	017d7840 	.word	0x017d7840

080056a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e28d      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8083 	beq.w	80057ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056c8:	4b94      	ldr	r3, [pc, #592]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d019      	beq.n	8005708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056d4:	4b91      	ldr	r3, [pc, #580]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d106      	bne.n	80056ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056e0:	4b8e      	ldr	r3, [pc, #568]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ec:	d00c      	beq.n	8005708 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ee:	4b8b      	ldr	r3, [pc, #556]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056f6:	2b0c      	cmp	r3, #12
 80056f8:	d112      	bne.n	8005720 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fa:	4b88      	ldr	r3, [pc, #544]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d10b      	bne.n	8005720 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	4b84      	ldr	r3, [pc, #528]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d05b      	beq.n	80057cc <HAL_RCC_OscConfig+0x124>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d157      	bne.n	80057cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e25a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d106      	bne.n	8005738 <HAL_RCC_OscConfig+0x90>
 800572a:	4b7c      	ldr	r3, [pc, #496]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a7b      	ldr	r2, [pc, #492]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e01d      	b.n	8005774 <HAL_RCC_OscConfig+0xcc>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005740:	d10c      	bne.n	800575c <HAL_RCC_OscConfig+0xb4>
 8005742:	4b76      	ldr	r3, [pc, #472]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a75      	ldr	r2, [pc, #468]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b73      	ldr	r3, [pc, #460]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a72      	ldr	r2, [pc, #456]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e00b      	b.n	8005774 <HAL_RCC_OscConfig+0xcc>
 800575c:	4b6f      	ldr	r3, [pc, #444]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a6e      	ldr	r2, [pc, #440]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b6c      	ldr	r3, [pc, #432]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6b      	ldr	r2, [pc, #428]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800576e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d013      	beq.n	80057a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fe16 	bl	80033ac <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd fe12 	bl	80033ac <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e21f      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005796:	4b61      	ldr	r3, [pc, #388]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0xdc>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd fe02 	bl	80033ac <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fd fdfe 	bl	80033ac <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e20b      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057be:	4b57      	ldr	r3, [pc, #348]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x104>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d06f      	beq.n	80058ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057da:	4b50      	ldr	r3, [pc, #320]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057e6:	4b4d      	ldr	r3, [pc, #308]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d105      	bne.n	80057fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057f2:	4b4a      	ldr	r3, [pc, #296]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d11c      	bne.n	8005844 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800580a:	4b44      	ldr	r3, [pc, #272]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x186>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1d3      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4937      	ldr	r1, [pc, #220]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	e03a      	b.n	80058ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800584c:	4b34      	ldr	r3, [pc, #208]	; (8005920 <HAL_RCC_OscConfig+0x278>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fd fdab 	bl	80033ac <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585a:	f7fd fda7 	bl	80033ac <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e1b4      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <HAL_RCC_OscConfig+0x274>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4925      	ldr	r1, [pc, #148]	; (800591c <HAL_RCC_OscConfig+0x274>)
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	e015      	b.n	80058ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_OscConfig+0x278>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fd fd8a 	bl	80033ac <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800589c:	f7fd fd86 	bl	80033ac <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e193      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d036      	beq.n	8005934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d016      	beq.n	80058fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd fd6a 	bl	80033ac <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fd fd66 	bl	80033ac <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e173      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_OscConfig+0x274>)
 80058f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x234>
 80058fa:	e01b      	b.n	8005934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005902:	f7fd fd53 	bl	80033ac <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005908:	e00e      	b.n	8005928 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800590a:	f7fd fd4f 	bl	80033ac <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d907      	bls.n	8005928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e15c      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
 800591c:	40023800 	.word	0x40023800
 8005920:	42470000 	.word	0x42470000
 8005924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005928:	4b8a      	ldr	r3, [pc, #552]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 800592a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1ea      	bne.n	800590a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8097 	beq.w	8005a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005946:	4b83      	ldr	r3, [pc, #524]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10f      	bne.n	8005972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	4b7f      	ldr	r3, [pc, #508]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	4a7e      	ldr	r2, [pc, #504]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 800595c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005960:	6413      	str	r3, [r2, #64]	; 0x40
 8005962:	4b7c      	ldr	r3, [pc, #496]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596a:	60bb      	str	r3, [r7, #8]
 800596c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005972:	4b79      	ldr	r3, [pc, #484]	; (8005b58 <HAL_RCC_OscConfig+0x4b0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d118      	bne.n	80059b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800597e:	4b76      	ldr	r3, [pc, #472]	; (8005b58 <HAL_RCC_OscConfig+0x4b0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a75      	ldr	r2, [pc, #468]	; (8005b58 <HAL_RCC_OscConfig+0x4b0>)
 8005984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598a:	f7fd fd0f 	bl	80033ac <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005992:	f7fd fd0b 	bl	80033ac <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e118      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <HAL_RCC_OscConfig+0x4b0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0f0      	beq.n	8005992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d106      	bne.n	80059c6 <HAL_RCC_OscConfig+0x31e>
 80059b8:	4b66      	ldr	r3, [pc, #408]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	6713      	str	r3, [r2, #112]	; 0x70
 80059c4:	e01c      	b.n	8005a00 <HAL_RCC_OscConfig+0x358>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d10c      	bne.n	80059e8 <HAL_RCC_OscConfig+0x340>
 80059ce:	4b61      	ldr	r3, [pc, #388]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a60      	ldr	r2, [pc, #384]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
 80059da:	4b5e      	ldr	r3, [pc, #376]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	4a5d      	ldr	r2, [pc, #372]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	6713      	str	r3, [r2, #112]	; 0x70
 80059e6:	e00b      	b.n	8005a00 <HAL_RCC_OscConfig+0x358>
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a59      	ldr	r2, [pc, #356]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
 80059f4:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	4a56      	ldr	r2, [pc, #344]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 80059fa:	f023 0304 	bic.w	r3, r3, #4
 80059fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a08:	f7fd fcd0 	bl	80033ac <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fd fccc 	bl	80033ac <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0d7      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a26:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ee      	beq.n	8005a10 <HAL_RCC_OscConfig+0x368>
 8005a32:	e014      	b.n	8005a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a34:	f7fd fcba 	bl	80033ac <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a3c:	f7fd fcb6 	bl	80033ac <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0c1      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a52:	4b40      	ldr	r3, [pc, #256]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ee      	bne.n	8005a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d105      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a64:	4b3b      	ldr	r3, [pc, #236]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	4a3a      	ldr	r2, [pc, #232]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80ad 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a7a:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d060      	beq.n	8005b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d145      	bne.n	8005b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8e:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <HAL_RCC_OscConfig+0x4b4>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fd fc8a 	bl	80033ac <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fd fc86 	bl	80033ac <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e093      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	019b      	lsls	r3, r3, #6
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	061b      	lsls	r3, r3, #24
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	071b      	lsls	r3, r3, #28
 8005ae6:	491b      	ldr	r1, [pc, #108]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x4b4>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fd fc5b 	bl	80033ac <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afa:	f7fd fc57 	bl	80033ac <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e064      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCC_OscConfig+0x452>
 8005b18:	e05c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <HAL_RCC_OscConfig+0x4b4>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fd fc44 	bl	80033ac <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fd fc40 	bl	80033ac <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e04d      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_OscConfig+0x4ac>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x480>
 8005b46:	e045      	b.n	8005bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e040      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40007000 	.word	0x40007000
 8005b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <HAL_RCC_OscConfig+0x538>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d030      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d129      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d122      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d119      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d10f      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800

08005be4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e066      	b.n	8005cc8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	7f5b      	ldrb	r3, [r3, #29]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f942 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	22ca      	movs	r2, #202	; 0xca
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2253      	movs	r2, #83	; 0x53
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f927 	bl	8005e7a <RTC_EnterInitMode>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d12c      	bne.n	8005c90 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6899      	ldr	r1, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68d2      	ldr	r2, [r2, #12]
 8005c70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6919      	ldr	r1, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	041a      	lsls	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f92e 	bl	8005ee8 <RTC_ExitInitMode>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	22ff      	movs	r2, #255	; 0xff
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	0d9b      	lsrs	r3, r3, #22
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11a      	bne.n	8005d82 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f8ee 	bl	8005f32 <RTC_Bcd2ToByte>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f8e5 	bl	8005f32 <RTC_Bcd2ToByte>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	789b      	ldrb	r3, [r3, #2]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f8dc 	bl	8005f32 <RTC_Bcd2ToByte>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005da6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005daa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	0b5b      	lsrs	r3, r3, #13
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11a      	bne.n	8005e20 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f89f 	bl	8005f32 <RTC_Bcd2ToByte>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f896 	bl	8005f32 <RTC_Bcd2ToByte>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	789b      	ldrb	r3, [r3, #2]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f88d 	bl	8005f32 <RTC_Bcd2ToByte>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e44:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e46:	f7fd fab1 	bl	80033ac <HAL_GetTick>
 8005e4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e4c:	e009      	b.n	8005e62 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e4e:	f7fd faad 	bl	80033ac <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e5c:	d901      	bls.n	8005e62 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e007      	b.n	8005e72 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ee      	beq.n	8005e4e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d122      	bne.n	8005ede <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ea6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ea8:	f7fd fa80 	bl	80033ac <HAL_GetTick>
 8005eac:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eae:	e00c      	b.n	8005eca <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005eb0:	f7fd fa7c 	bl	80033ac <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ebe:	d904      	bls.n	8005eca <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <RTC_EnterInitMode+0x64>
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d1e8      	bne.n	8005eb0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f02:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff89 	bl	8005e2a <HAL_RTC_WaitForSynchro>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2204      	movs	r2, #4
 8005f22:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	0092      	lsls	r2, r2, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	b2db      	uxtb	r3, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e07b      	b.n	8006074 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8c:	d009      	beq.n	8005fa2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	61da      	str	r2, [r3, #28]
 8005f94:	e005      	b.n	8005fa2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fc f9df 	bl	8002380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	ea42 0103 	orr.w	r1, r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	f003 0104 	and.w	r1, r3, #4
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0210 	and.w	r2, r3, #16
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006062:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_SPI_Transmit+0x22>
 800609a:	2302      	movs	r3, #2
 800609c:	e126      	b.n	80062ec <HAL_SPI_Transmit+0x270>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a6:	f7fd f981 	bl	80033ac <HAL_GetTick>
 80060aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060c0:	e10b      	b.n	80062da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_SPI_Transmit+0x52>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d2:	e102      	b.n	80062da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2203      	movs	r2, #3
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	88fa      	ldrh	r2, [r7, #6]
 80060ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	88fa      	ldrh	r2, [r7, #6]
 80060f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d10f      	bne.n	800613c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d007      	beq.n	800615a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006162:	d14b      	bne.n	80061fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_Transmit+0xf6>
 800616c:	8afb      	ldrh	r3, [r7, #22]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d13e      	bne.n	80061f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	881a      	ldrh	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006196:	e02b      	b.n	80061f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d112      	bne.n	80061cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	881a      	ldrh	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	1c9a      	adds	r2, r3, #2
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80061ca:	e011      	b.n	80061f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061cc:	f7fd f8ee 	bl	80033ac <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d803      	bhi.n	80061e4 <HAL_SPI_Transmit+0x168>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d102      	bne.n	80061ea <HAL_SPI_Transmit+0x16e>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061ee:	e074      	b.n	80062da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ce      	bne.n	8006198 <HAL_SPI_Transmit+0x11c>
 80061fa:	e04c      	b.n	8006296 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_SPI_Transmit+0x18e>
 8006204:	8afb      	ldrh	r3, [r7, #22]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d140      	bne.n	800628c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006230:	e02c      	b.n	800628c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b02      	cmp	r3, #2
 800623e:	d113      	bne.n	8006268 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	7812      	ldrb	r2, [r2, #0]
 800624c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	86da      	strh	r2, [r3, #54]	; 0x36
 8006266:	e011      	b.n	800628c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006268:	f7fd f8a0 	bl	80033ac <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d803      	bhi.n	8006280 <HAL_SPI_Transmit+0x204>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d102      	bne.n	8006286 <HAL_SPI_Transmit+0x20a>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800628a:	e026      	b.n	80062da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1cd      	bne.n	8006232 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa54 	bl	8006748 <SPI_EndRxTxTransaction>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e000      	b.n	80062da <HAL_SPI_Transmit+0x25e>
  }

error:
 80062d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	; 0x30
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006302:	2301      	movs	r3, #1
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_SPI_TransmitReceive+0x26>
 8006316:	2302      	movs	r3, #2
 8006318:	e18a      	b.n	8006630 <HAL_SPI_TransmitReceive+0x33c>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006322:	f7fd f843 	bl	80033ac <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006338:	887b      	ldrh	r3, [r7, #2]
 800633a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800633c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006340:	2b01      	cmp	r3, #1
 8006342:	d00f      	beq.n	8006364 <HAL_SPI_TransmitReceive+0x70>
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634a:	d107      	bne.n	800635c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <HAL_SPI_TransmitReceive+0x68>
 8006354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006358:	2b04      	cmp	r3, #4
 800635a:	d003      	beq.n	8006364 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800635c:	2302      	movs	r3, #2
 800635e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006362:	e15b      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x82>
 8006370:	887b      	ldrh	r3, [r7, #2]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800637c:	e14e      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b04      	cmp	r3, #4
 8006388:	d003      	beq.n	8006392 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2205      	movs	r2, #5
 800638e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	887a      	ldrh	r2, [r7, #2]
 80063a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	887a      	ldrh	r2, [r7, #2]
 80063ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d007      	beq.n	80063e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ee:	d178      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_SPI_TransmitReceive+0x10a>
 80063f8:	8b7b      	ldrh	r3, [r7, #26]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d166      	bne.n	80064cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	1c9a      	adds	r2, r3, #2
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006422:	e053      	b.n	80064cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d11b      	bne.n	800646a <HAL_SPI_TransmitReceive+0x176>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d016      	beq.n	800646a <HAL_SPI_TransmitReceive+0x176>
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d113      	bne.n	800646a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	881a      	ldrh	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d119      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x1b8>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d014      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	b292      	uxth	r2, r2
 800648e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064a8:	2301      	movs	r3, #1
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ac:	f7fc ff7e 	bl	80033ac <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d807      	bhi.n	80064cc <HAL_SPI_TransmitReceive+0x1d8>
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d003      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064ca:	e0a7      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1a6      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x130>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1a1      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x130>
 80064e0:	e07c      	b.n	80065dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x1fc>
 80064ea:	8b7b      	ldrh	r3, [r7, #26]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d16b      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006516:	e057      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d11c      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x26c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d017      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x26c>
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b01      	cmp	r3, #1
 8006534:	d114      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b01      	cmp	r3, #1
 800656c:	d119      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x2ae>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d014      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800659e:	2301      	movs	r3, #1
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065a2:	f7fc ff03 	bl	80033ac <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d803      	bhi.n	80065ba <HAL_SPI_TransmitReceive+0x2c6>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d102      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x2cc>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065c6:	e029      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1a2      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x224>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d19d      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f8b1 	bl	8006748 <SPI_EndRxTxTransaction>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065f8:	e010      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	e000      	b.n	800661c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800661a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800662c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006630:	4618      	mov	r0, r3
 8006632:	3730      	adds	r7, #48	; 0x30
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006648:	f7fc feb0 	bl	80033ac <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	4413      	add	r3, r2
 8006656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006658:	f7fc fea8 	bl	80033ac <HAL_GetTick>
 800665c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800665e:	4b39      	ldr	r3, [pc, #228]	; (8006744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	015b      	lsls	r3, r3, #5
 8006664:	0d1b      	lsrs	r3, r3, #20
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800666e:	e054      	b.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d050      	beq.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006678:	f7fc fe98 	bl	80033ac <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	429a      	cmp	r2, r3
 8006686:	d902      	bls.n	800668e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d13d      	bne.n	800670a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800669c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a6:	d111      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b0:	d004      	beq.n	80066bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ba:	d107      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d10f      	bne.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e017      	b.n	800673a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3b01      	subs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	429a      	cmp	r2, r3
 8006736:	d19b      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000004 	.word	0x20000004

08006748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <SPI_EndRxTxTransaction+0x7c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <SPI_EndRxTxTransaction+0x80>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	0d5b      	lsrs	r3, r3, #21
 8006760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006772:	d112      	bne.n	800679a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff5a 	bl	8006638 <SPI_WaitFlagStateUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e00f      	b.n	80067ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b80      	cmp	r3, #128	; 0x80
 80067b2:	d0f2      	beq.n	800679a <SPI_EndRxTxTransaction+0x52>
 80067b4:	e000      	b.n	80067b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067b6:	bf00      	nop
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000004 	.word	0x20000004
 80067c8:	165e9f81 	.word	0x165e9f81

080067cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e041      	b.n	8006862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fc fc02 	bl	8002ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f000 fc5e 	bl	80070cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	d001      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e04e      	b.n	8006922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a23      	ldr	r2, [pc, #140]	; (8006930 <HAL_TIM_Base_Start_IT+0xc4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d022      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ae:	d01d      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <HAL_TIM_Base_Start_IT+0xc8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d018      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <HAL_TIM_Base_Start_IT+0xcc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d013      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	; (800693c <HAL_TIM_Base_Start_IT+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00e      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <HAL_TIM_Base_Start_IT+0xd4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d009      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a19      	ldr	r2, [pc, #100]	; (8006944 <HAL_TIM_Base_Start_IT+0xd8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0x80>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <HAL_TIM_Base_Start_IT+0xdc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d111      	bne.n	8006910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b06      	cmp	r3, #6
 80068fc:	d010      	beq.n	8006920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690e:	e007      	b.n	8006920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40010400 	.word	0x40010400
 8006944:	40014000 	.word	0x40014000
 8006948:	40001800 	.word	0x40001800

0800694c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e041      	b.n	80069e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fc fa78 	bl	8002e68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fb9e 	bl	80070cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <HAL_TIM_IC_Start_IT+0x1e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e013      	b.n	8006a32 <HAL_TIM_IC_Start_IT+0x46>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d104      	bne.n	8006a1a <HAL_TIM_IC_Start_IT+0x2e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e00b      	b.n	8006a32 <HAL_TIM_IC_Start_IT+0x46>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_IC_Start_IT+0x3e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	e003      	b.n	8006a32 <HAL_TIM_IC_Start_IT+0x46>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <HAL_TIM_IC_Start_IT+0x58>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	e013      	b.n	8006a6c <HAL_TIM_IC_Start_IT+0x80>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d104      	bne.n	8006a54 <HAL_TIM_IC_Start_IT+0x68>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	e00b      	b.n	8006a6c <HAL_TIM_IC_Start_IT+0x80>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d104      	bne.n	8006a64 <HAL_TIM_IC_Start_IT+0x78>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e003      	b.n	8006a6c <HAL_TIM_IC_Start_IT+0x80>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d102      	bne.n	8006a7a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a74:	7b7b      	ldrb	r3, [r7, #13]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d001      	beq.n	8006a7e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e0cc      	b.n	8006c18 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_IC_Start_IT+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a8c:	e013      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0xca>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_IC_Start_IT+0xb2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9c:	e00b      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0xca>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d104      	bne.n	8006aae <HAL_TIM_IC_Start_IT+0xc2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aac:	e003      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0xca>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <HAL_TIM_IC_Start_IT+0xda>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	e013      	b.n	8006aee <HAL_TIM_IC_Start_IT+0x102>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_IC_Start_IT+0xea>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	e00b      	b.n	8006aee <HAL_TIM_IC_Start_IT+0x102>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_IC_Start_IT+0xfa>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae4:	e003      	b.n	8006aee <HAL_TIM_IC_Start_IT+0x102>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b0c      	cmp	r3, #12
 8006af2:	d841      	bhi.n	8006b78 <HAL_TIM_IC_Start_IT+0x18c>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <HAL_TIM_IC_Start_IT+0x110>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b79 	.word	0x08006b79
 8006b04:	08006b79 	.word	0x08006b79
 8006b08:	08006b79 	.word	0x08006b79
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006b79 	.word	0x08006b79
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	08006b55 	.word	0x08006b55
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b67 	.word	0x08006b67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0202 	orr.w	r2, r2, #2
 8006b3e:	60da      	str	r2, [r3, #12]
      break;
 8006b40:	e01d      	b.n	8006b7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0204 	orr.w	r2, r2, #4
 8006b50:	60da      	str	r2, [r3, #12]
      break;
 8006b52:	e014      	b.n	8006b7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0208 	orr.w	r2, r2, #8
 8006b62:	60da      	str	r2, [r3, #12]
      break;
 8006b64:	e00b      	b.n	8006b7e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0210 	orr.w	r2, r2, #16
 8006b74:	60da      	str	r2, [r3, #12]
      break;
 8006b76:	e002      	b.n	8006b7e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d148      	bne.n	8006c16 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fd78 	bl	8007682 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a22      	ldr	r2, [pc, #136]	; (8006c20 <HAL_TIM_IC_Start_IT+0x234>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d01d      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <HAL_TIM_IC_Start_IT+0x238>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <HAL_TIM_IC_Start_IT+0x23c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <HAL_TIM_IC_Start_IT+0x240>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <HAL_TIM_IC_Start_IT+0x244>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <HAL_TIM_IC_Start_IT+0x248>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a16      	ldr	r2, [pc, #88]	; (8006c38 <HAL_TIM_IC_Start_IT+0x24c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d111      	bne.n	8006c06 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b06      	cmp	r3, #6
 8006bf2:	d010      	beq.n	8006c16 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c04:	e007      	b.n	8006c16 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40000c00 	.word	0x40000c00
 8006c30:	40010400 	.word	0x40010400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40001800 	.word	0x40001800

08006c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0202 	mvn.w	r2, #2
 8006c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fc fa0c 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa02 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fa09 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0204 	mvn.w	r2, #4
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fc f9e2 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9d8 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9df 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d122      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d11b      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0208 	mvn.w	r2, #8
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2204      	movs	r2, #4
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fc f9b8 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8006d2c:	e005      	b.n	8006d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9ae 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f9b5 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0210 	mvn.w	r2, #16
 8006d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fc f98e 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f984 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f98b 	bl	80070a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d10e      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0201 	mvn.w	r2, #1
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fb f82c 	bl	8001e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d10e      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd8:	2b80      	cmp	r3, #128	; 0x80
 8006dda:	d107      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fcf6 	bl	80077d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d10e      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f950 	bl	80070b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d10e      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0220 	mvn.w	r2, #32
 8006e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fcc0 	bl	80077c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e088      	b.n	8006f7c <HAL_TIM_IC_ConfigChannel+0x130>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f000 fa52 	bl	8007330 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 020c 	bic.w	r2, r2, #12
 8006e9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6999      	ldr	r1, [r3, #24]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	619a      	str	r2, [r3, #24]
 8006eae:	e060      	b.n	8006f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d11c      	bne.n	8006ef0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6819      	ldr	r1, [r3, #0]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f000 fad6 	bl	8007476 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ed8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6999      	ldr	r1, [r3, #24]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	021a      	lsls	r2, r3, #8
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	619a      	str	r2, [r3, #24]
 8006eee:	e040      	b.n	8006f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d11b      	bne.n	8006f2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	6819      	ldr	r1, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f000 fb23 	bl	8007550 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 020c 	bic.w	r2, r2, #12
 8006f18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69d9      	ldr	r1, [r3, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	61da      	str	r2, [r3, #28]
 8006f2c:	e021      	b.n	8006f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	d11c      	bne.n	8006f6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6819      	ldr	r1, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f000 fb40 	bl	80075c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69d9      	ldr	r1, [r3, #28]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
 8006f6c:	e001      	b.n	8006f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e031      	b.n	8007000 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f92c 	bl	800720c <TIM_SlaveTimer_SetConfig>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e018      	b.n	8007000 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fdc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d831      	bhi.n	8007080 <HAL_TIM_ReadCapturedValue+0x78>
 800701c:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <HAL_TIM_ReadCapturedValue+0x1c>)
 800701e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007022:	bf00      	nop
 8007024:	08007059 	.word	0x08007059
 8007028:	08007081 	.word	0x08007081
 800702c:	08007081 	.word	0x08007081
 8007030:	08007081 	.word	0x08007081
 8007034:	08007063 	.word	0x08007063
 8007038:	08007081 	.word	0x08007081
 800703c:	08007081 	.word	0x08007081
 8007040:	08007081 	.word	0x08007081
 8007044:	0800706d 	.word	0x0800706d
 8007048:	08007081 	.word	0x08007081
 800704c:	08007081 	.word	0x08007081
 8007050:	08007081 	.word	0x08007081
 8007054:	08007077 	.word	0x08007077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	60fb      	str	r3, [r7, #12]

      break;
 8007060:	e00f      	b.n	8007082 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	60fb      	str	r3, [r7, #12]

      break;
 800706a:	e00a      	b.n	8007082 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	60fb      	str	r3, [r7, #12]

      break;
 8007074:	e005      	b.n	8007082 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	60fb      	str	r3, [r7, #12]

      break;
 800707e:	e000      	b.n	8007082 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007080:	bf00      	nop
  }

  return tmpreg;
 8007082:	68fb      	ldr	r3, [r7, #12]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a40      	ldr	r2, [pc, #256]	; (80071e0 <TIM_Base_SetConfig+0x114>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3d      	ldr	r2, [pc, #244]	; (80071e4 <TIM_Base_SetConfig+0x118>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3c      	ldr	r2, [pc, #240]	; (80071e8 <TIM_Base_SetConfig+0x11c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3b      	ldr	r2, [pc, #236]	; (80071ec <TIM_Base_SetConfig+0x120>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3a      	ldr	r2, [pc, #232]	; (80071f0 <TIM_Base_SetConfig+0x124>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <TIM_Base_SetConfig+0x114>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d02b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d027      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <TIM_Base_SetConfig+0x118>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d023      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2b      	ldr	r2, [pc, #172]	; (80071e8 <TIM_Base_SetConfig+0x11c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01f      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <TIM_Base_SetConfig+0x120>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <TIM_Base_SetConfig+0x124>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d017      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <TIM_Base_SetConfig+0x128>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <TIM_Base_SetConfig+0x12c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a26      	ldr	r2, [pc, #152]	; (80071fc <TIM_Base_SetConfig+0x130>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00b      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a25      	ldr	r2, [pc, #148]	; (8007200 <TIM_Base_SetConfig+0x134>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d007      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a24      	ldr	r2, [pc, #144]	; (8007204 <TIM_Base_SetConfig+0x138>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d003      	beq.n	800717e <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a23      	ldr	r2, [pc, #140]	; (8007208 <TIM_Base_SetConfig+0x13c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d108      	bne.n	8007190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <TIM_Base_SetConfig+0x114>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d003      	beq.n	80071c4 <TIM_Base_SetConfig+0xf8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <TIM_Base_SetConfig+0x124>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d103      	bne.n	80071cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	615a      	str	r2, [r3, #20]
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40010400 	.word	0x40010400
 80071f4:	40014000 	.word	0x40014000
 80071f8:	40014400 	.word	0x40014400
 80071fc:	40014800 	.word	0x40014800
 8007200:	40001800 	.word	0x40001800
 8007204:	40001c00 	.word	0x40001c00
 8007208:	40002000 	.word	0x40002000

0800720c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007228:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b70      	cmp	r3, #112	; 0x70
 8007254:	d01a      	beq.n	800728c <TIM_SlaveTimer_SetConfig+0x80>
 8007256:	2b70      	cmp	r3, #112	; 0x70
 8007258:	d860      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 800725a:	2b60      	cmp	r3, #96	; 0x60
 800725c:	d054      	beq.n	8007308 <TIM_SlaveTimer_SetConfig+0xfc>
 800725e:	2b60      	cmp	r3, #96	; 0x60
 8007260:	d85c      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 8007262:	2b50      	cmp	r3, #80	; 0x50
 8007264:	d046      	beq.n	80072f4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007266:	2b50      	cmp	r3, #80	; 0x50
 8007268:	d858      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d019      	beq.n	80072a2 <TIM_SlaveTimer_SetConfig+0x96>
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d854      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 8007272:	2b30      	cmp	r3, #48	; 0x30
 8007274:	d055      	beq.n	8007322 <TIM_SlaveTimer_SetConfig+0x116>
 8007276:	2b30      	cmp	r3, #48	; 0x30
 8007278:	d850      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 800727a:	2b20      	cmp	r3, #32
 800727c:	d051      	beq.n	8007322 <TIM_SlaveTimer_SetConfig+0x116>
 800727e:	2b20      	cmp	r3, #32
 8007280:	d84c      	bhi.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04d      	beq.n	8007322 <TIM_SlaveTimer_SetConfig+0x116>
 8007286:	2b10      	cmp	r3, #16
 8007288:	d04b      	beq.n	8007322 <TIM_SlaveTimer_SetConfig+0x116>
 800728a:	e047      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68d9      	ldr	r1, [r3, #12]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f000 f9d1 	bl	8007642 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80072a0:	e040      	b.n	8007324 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d101      	bne.n	80072ae <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e03b      	b.n	8007326 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6a1a      	ldr	r2, [r3, #32]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
      break;
 80072f2:	e017      	b.n	8007324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6899      	ldr	r1, [r3, #8]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	461a      	mov	r2, r3
 8007302:	f000 f889 	bl	8007418 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007306:	e00d      	b.n	8007324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	461a      	mov	r2, r3
 8007316:	f000 f8eb 	bl	80074f0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800731a:	e003      	b.n	8007324 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
      break;
 8007320:	e000      	b.n	8007324 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007322:	bf00      	nop
  }

  return status;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0201 	bic.w	r2, r3, #1
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a28      	ldr	r2, [pc, #160]	; (80073fc <TIM_TI1_SetConfig+0xcc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01b      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007364:	d017      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a25      	ldr	r2, [pc, #148]	; (8007400 <TIM_TI1_SetConfig+0xd0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a24      	ldr	r2, [pc, #144]	; (8007404 <TIM_TI1_SetConfig+0xd4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00f      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a23      	ldr	r2, [pc, #140]	; (8007408 <TIM_TI1_SetConfig+0xd8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00b      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a22      	ldr	r2, [pc, #136]	; (800740c <TIM_TI1_SetConfig+0xdc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <TIM_TI1_SetConfig+0xe0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_TI1_SetConfig+0x66>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4a20      	ldr	r2, [pc, #128]	; (8007414 <TIM_TI1_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d101      	bne.n	800739a <TIM_TI1_SetConfig+0x6a>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <TIM_TI1_SetConfig+0x6c>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0303 	bic.w	r3, r3, #3
 80073a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	e003      	b.n	80073ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f023 030a 	bic.w	r3, r3, #10
 80073d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f003 030a 	and.w	r3, r3, #10
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40010000 	.word	0x40010000
 8007400:	40000400 	.word	0x40000400
 8007404:	40000800 	.word	0x40000800
 8007408:	40000c00 	.word	0x40000c00
 800740c:	40010400 	.word	0x40010400
 8007410:	40014000 	.word	0x40014000
 8007414:	40001800 	.word	0x40001800

08007418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 030a 	bic.w	r3, r3, #10
 8007454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007476:	b480      	push	{r7}
 8007478:	b087      	sub	sp, #28
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f023 0210 	bic.w	r2, r3, #16
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	621a      	str	r2, [r3, #32]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f023 0210 	bic.w	r2, r3, #16
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	031b      	lsls	r3, r3, #12
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	621a      	str	r2, [r3, #32]
}
 8007544:	bf00      	nop
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f023 0303 	bic.w	r3, r3, #3
 800757c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800758c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	b2db      	uxtb	r3, r3
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	621a      	str	r2, [r3, #32]
}
 80075bc:	bf00      	nop
 80075be:	371c      	adds	r7, #28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007606:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	031b      	lsls	r3, r3, #12
 800760c:	b29b      	uxth	r3, r3
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800761a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	031b      	lsls	r3, r3, #12
 8007620:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007642:	b480      	push	{r7}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800765c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	021a      	lsls	r2, r3, #8
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	431a      	orrs	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4313      	orrs	r3, r2
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	609a      	str	r2, [r3, #8]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2201      	movs	r2, #1
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	401a      	ands	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1a      	ldr	r2, [r3, #32]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	431a      	orrs	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e05a      	b.n	800779a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a21      	ldr	r2, [pc, #132]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d022      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d01d      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d018      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1b      	ldr	r2, [pc, #108]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1a      	ldr	r2, [pc, #104]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00e      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d009      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a17      	ldr	r2, [pc, #92]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d004      	beq.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d10c      	bne.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	4313      	orrs	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40010400 	.word	0x40010400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40001800 	.word	0x40001800

080077c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e033      	b.n	8007866 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fb fcb8 	bl	8003188 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f90b 	bl	8007a3c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007844:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007854:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b08a      	sub	sp, #40	; 0x28
 8007872:	af02      	add	r7, sp, #8
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d17c      	bne.n	8007984 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_USART_Transmit+0x28>
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e075      	b.n	8007986 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_USART_Transmit+0x3a>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e06e      	b.n	8007986 <HAL_USART_Transmit+0x118>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2212      	movs	r2, #18
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078be:	f7fb fd75 	bl	80033ac <HAL_GetTick>
 80078c2:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	88fa      	ldrh	r2, [r7, #6]
 80078c8:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d8:	d108      	bne.n	80078ec <HAL_USART_Transmit+0x7e>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e003      	b.n	80078f4 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80078f4:	e02a      	b.n	800794c <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2180      	movs	r1, #128	; 0x80
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f844 	bl	800798e <USART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e03a      	b.n	8007986 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007924:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	3302      	adds	r3, #2
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e007      	b.n	800793e <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	3301      	adds	r3, #1
 800793c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1cf      	bne.n	80078f6 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2140      	movs	r1, #64	; 0x40
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f814 	bl	800798e <USART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e00a      	b.n	8007986 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800799e:	e038      	b.n	8007a12 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d034      	beq.n	8007a12 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <USART_WaitOnFlagUntilTimeout+0x30>
 80079ae:	f7fb fcfd 	bl	80033ac <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d229      	bcs.n	8007a12 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079cc:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0220 	bic.w	r2, r2, #32
 80079dc:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ec:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e00f      	b.n	8007a32 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	bf0c      	ite	eq
 8007a22:	2301      	moveq	r3, #1
 8007a24:	2300      	movne	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d0b7      	beq.n	80079a0 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a40:	b0c6      	sub	sp, #280	; 0x118
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68d9      	ldr	r1, [r3, #12]
 8007a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	f021 030c 	bic.w	r3, r1, #12
 8007a60:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a7e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a84:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007a86:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a94:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007a96:	431a      	orrs	r2, r3
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007aa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ac6:	f023 030c 	bic.w	r3, r3, #12
 8007aca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8007af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afc:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6959      	ldr	r1, [r3, #20]
 8007b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8007b10:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8007b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b8b      	ldr	r3, [pc, #556]	; (8007d48 <USART_SetConfig+0x30c>)
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d006      	beq.n	8007b2c <USART_SetConfig+0xf0>
 8007b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	4b89      	ldr	r3, [pc, #548]	; (8007d4c <USART_SetConfig+0x310>)
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f040 8114 	bne.w	8007d54 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b2c:	f7fd f8a2 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8007b30:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007b34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b3e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007b42:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8007b46:	4622      	mov	r2, r4
 8007b48:	462b      	mov	r3, r5
 8007b4a:	1891      	adds	r1, r2, r2
 8007b4c:	6739      	str	r1, [r7, #112]	; 0x70
 8007b4e:	415b      	adcs	r3, r3
 8007b50:	677b      	str	r3, [r7, #116]	; 0x74
 8007b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007b56:	4621      	mov	r1, r4
 8007b58:	eb12 0801 	adds.w	r8, r2, r1
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	eb43 0901 	adc.w	r9, r3, r1
 8007b62:	f04f 0200 	mov.w	r2, #0
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b76:	4690      	mov	r8, r2
 8007b78:	4699      	mov	r9, r3
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	eb18 0303 	adds.w	r3, r8, r3
 8007b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b84:	462b      	mov	r3, r5
 8007b86:	eb49 0303 	adc.w	r3, r9, r3
 8007b8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b9a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007b9e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	18db      	adds	r3, r3, r3
 8007ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ba8:	4613      	mov	r3, r2
 8007baa:	eb42 0303 	adc.w	r3, r2, r3
 8007bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007bb4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007bb8:	f7f9 f866 	bl	8000c88 <__aeabi_uldivmod>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4b63      	ldr	r3, [pc, #396]	; (8007d50 <USART_SetConfig+0x314>)
 8007bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	011c      	lsls	r4, r3, #4
 8007bca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bd4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bd8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007bdc:	4642      	mov	r2, r8
 8007bde:	464b      	mov	r3, r9
 8007be0:	1891      	adds	r1, r2, r2
 8007be2:	6639      	str	r1, [r7, #96]	; 0x60
 8007be4:	415b      	adcs	r3, r3
 8007be6:	667b      	str	r3, [r7, #100]	; 0x64
 8007be8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007bec:	4641      	mov	r1, r8
 8007bee:	1851      	adds	r1, r2, r1
 8007bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	414b      	adcs	r3, r1
 8007bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007c04:	4659      	mov	r1, fp
 8007c06:	00cb      	lsls	r3, r1, #3
 8007c08:	4651      	mov	r1, sl
 8007c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c0e:	4651      	mov	r1, sl
 8007c10:	00ca      	lsls	r2, r1, #3
 8007c12:	4610      	mov	r0, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	4642      	mov	r2, r8
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c20:	464b      	mov	r3, r9
 8007c22:	460a      	mov	r2, r1
 8007c24:	eb42 0303 	adc.w	r3, r2, r3
 8007c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c38:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c3c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c40:	460b      	mov	r3, r1
 8007c42:	18db      	adds	r3, r3, r3
 8007c44:	653b      	str	r3, [r7, #80]	; 0x50
 8007c46:	4613      	mov	r3, r2
 8007c48:	eb42 0303 	adc.w	r3, r2, r3
 8007c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c52:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c56:	f7f9 f817 	bl	8000c88 <__aeabi_uldivmod>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4b3b      	ldr	r3, [pc, #236]	; (8007d50 <USART_SetConfig+0x314>)
 8007c62:	fba3 2301 	umull	r2, r3, r3, r1
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	2264      	movs	r2, #100	; 0x64
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	1acb      	subs	r3, r1, r3
 8007c70:	00db      	lsls	r3, r3, #3
 8007c72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <USART_SetConfig+0x314>)
 8007c78:	fba3 2302 	umull	r2, r3, r3, r2
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c84:	441c      	add	r4, r3
 8007c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ca8:	4641      	mov	r1, r8
 8007caa:	1851      	adds	r1, r2, r1
 8007cac:	6439      	str	r1, [r7, #64]	; 0x40
 8007cae:	4649      	mov	r1, r9
 8007cb0:	414b      	adcs	r3, r1
 8007cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	00cb      	lsls	r3, r1, #3
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cca:	4651      	mov	r1, sl
 8007ccc:	00ca      	lsls	r2, r1, #3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cdc:	464b      	mov	r3, r9
 8007cde:	460a      	mov	r2, r1
 8007ce0:	eb42 0303 	adc.w	r3, r2, r3
 8007ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	18db      	adds	r3, r3, r3
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d02:	4613      	mov	r3, r2
 8007d04:	eb42 0303 	adc.w	r3, r2, r3
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d12:	f7f8 ffb9 	bl	8000c88 <__aeabi_uldivmod>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <USART_SetConfig+0x314>)
 8007d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d20:	095b      	lsrs	r3, r3, #5
 8007d22:	2164      	movs	r1, #100	; 0x64
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	3332      	adds	r3, #50	; 0x32
 8007d2e:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <USART_SetConfig+0x314>)
 8007d30:	fba2 2303 	umull	r2, r3, r2, r3
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	f003 0207 	and.w	r2, r3, #7
 8007d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4422      	add	r2, r4
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	e109      	b.n	8007f5a <USART_SetConfig+0x51e>
 8007d46:	bf00      	nop
 8007d48:	40011000 	.word	0x40011000
 8007d4c:	40011400 	.word	0x40011400
 8007d50:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d54:	f7fc ff7a 	bl	8004c4c <HAL_RCC_GetPCLK1Freq>
 8007d58:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007d5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d66:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d6a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d6e:	4642      	mov	r2, r8
 8007d70:	464b      	mov	r3, r9
 8007d72:	1891      	adds	r1, r2, r2
 8007d74:	6339      	str	r1, [r7, #48]	; 0x30
 8007d76:	415b      	adcs	r3, r3
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d7e:	4641      	mov	r1, r8
 8007d80:	1854      	adds	r4, r2, r1
 8007d82:	4649      	mov	r1, r9
 8007d84:	eb43 0501 	adc.w	r5, r3, r1
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	f04f 0300 	mov.w	r3, #0
 8007d90:	00eb      	lsls	r3, r5, #3
 8007d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d96:	00e2      	lsls	r2, r4, #3
 8007d98:	4614      	mov	r4, r2
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	4643      	mov	r3, r8
 8007d9e:	18e3      	adds	r3, r4, r3
 8007da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007da4:	464b      	mov	r3, r9
 8007da6:	eb45 0303 	adc.w	r3, r5, r3
 8007daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007dba:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007dbe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	18db      	adds	r3, r3, r3
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dc8:	4613      	mov	r3, r2
 8007dca:	eb42 0303 	adc.w	r3, r2, r3
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dd4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dd8:	f7f8 ff56 	bl	8000c88 <__aeabi_uldivmod>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4b61      	ldr	r3, [pc, #388]	; (8007f68 <USART_SetConfig+0x52c>)
 8007de2:	fba3 2302 	umull	r2, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	011c      	lsls	r4, r3, #4
 8007dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007df4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007df8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	1891      	adds	r1, r2, r2
 8007e02:	6239      	str	r1, [r7, #32]
 8007e04:	415b      	adcs	r3, r3
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
 8007e08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e12:	4649      	mov	r1, r9
 8007e14:	eb43 0b01 	adc.w	fp, r3, r1
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e2c:	4692      	mov	sl, r2
 8007e2e:	469b      	mov	fp, r3
 8007e30:	4643      	mov	r3, r8
 8007e32:	eb1a 0303 	adds.w	r3, sl, r3
 8007e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e54:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007e58:	460b      	mov	r3, r1
 8007e5a:	18db      	adds	r3, r3, r3
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	eb42 0303 	adc.w	r3, r2, r3
 8007e64:	61fb      	str	r3, [r7, #28]
 8007e66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e6a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e6e:	f7f8 ff0b 	bl	8000c88 <__aeabi_uldivmod>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	4b3b      	ldr	r3, [pc, #236]	; (8007f68 <USART_SetConfig+0x52c>)
 8007e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2264      	movs	r2, #100	; 0x64
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	1acb      	subs	r3, r1, r3
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e8e:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <USART_SetConfig+0x52c>)
 8007e90:	fba3 2302 	umull	r2, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e9c:	441c      	add	r4, r3
 8007e9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	1891      	adds	r1, r2, r2
 8007eb6:	6139      	str	r1, [r7, #16]
 8007eb8:	415b      	adcs	r3, r3
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	1851      	adds	r1, r2, r1
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	414b      	adcs	r3, r1
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ed8:	4659      	mov	r1, fp
 8007eda:	00cb      	lsls	r3, r1, #3
 8007edc:	4651      	mov	r1, sl
 8007ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee2:	4651      	mov	r1, sl
 8007ee4:	00ca      	lsls	r2, r1, #3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	4642      	mov	r2, r8
 8007eee:	189b      	adds	r3, r3, r2
 8007ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	eb42 0303 	adc.w	r3, r2, r3
 8007efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007f10:	460b      	mov	r3, r1
 8007f12:	18db      	adds	r3, r3, r3
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	4613      	mov	r3, r2
 8007f18:	eb42 0303 	adc.w	r3, r2, r3
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f26:	f7f8 feaf 	bl	8000c88 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <USART_SetConfig+0x52c>)
 8007f30:	fba3 1302 	umull	r1, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	2164      	movs	r1, #100	; 0x64
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	3332      	adds	r3, #50	; 0x32
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <USART_SetConfig+0x52c>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f003 0207 	and.w	r2, r3, #7
 8007f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4422      	add	r2, r4
 8007f56:	609a      	str	r2, [r3, #8]
  }
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007f60:	46bd      	mov	sp, r7
 8007f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f66:	bf00      	nop
 8007f68:	51eb851f 	.word	0x51eb851f

08007f6c <MX_FATFS_Init>:
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	4904      	ldr	r1, [pc, #16]	; (8007f84 <MX_FATFS_Init+0x18>)
 8007f72:	4805      	ldr	r0, [pc, #20]	; (8007f88 <MX_FATFS_Init+0x1c>)
 8007f74:	f002 ffd4 	bl	800af20 <FATFS_LinkDriver>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <MX_FATFS_Init+0x20>)
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	bf00      	nop
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	200040f8 	.word	0x200040f8
 8007f88:	20000010 	.word	0x20000010
 8007f8c:	200040f4 	.word	0x200040f4

08007f90 <get_fattime>:
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	2300      	movs	r3, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USER_initialize>:
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	71fb      	strb	r3, [r7, #7]
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f9d7 	bl	8008360 <USER_SPI_initialize>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USER_status>:
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	71fb      	strb	r3, [r7, #7]
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fab5 	bl	8008538 <USER_SPI_status>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USER_read>:
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
 8007fe8:	7bf8      	ldrb	r0, [r7, #15]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	f000 fab8 	bl	8008564 <USER_SPI_read>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USER_write>:
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	7bf8      	ldrb	r0, [r7, #15]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	68b9      	ldr	r1, [r7, #8]
 8008016:	f000 fb0b 	bl	8008630 <USER_SPI_write>
 800801a:	4603      	mov	r3, r0
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USER_ioctl>:
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	603a      	str	r2, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	460b      	mov	r3, r1
 8008032:	71bb      	strb	r3, [r7, #6]
 8008034:	79b9      	ldrb	r1, [r7, #6]
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fb74 	bl	8008728 <USER_SPI_ioctl>
 8008040:	4603      	mov	r3, r0
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <SPI_Timer_On>:
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	f7fb f9aa 	bl	80033ac <HAL_GetTick>
 8008058:	4603      	mov	r3, r0
 800805a:	4a04      	ldr	r2, [pc, #16]	; (800806c <SPI_Timer_On+0x20>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	4a04      	ldr	r2, [pc, #16]	; (8008070 <SPI_Timer_On+0x24>)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20004100 	.word	0x20004100
 8008070:	20004104 	.word	0x20004104

08008074 <SPI_Timer_Status>:
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
 8008078:	f7fb f998 	bl	80033ac <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <SPI_Timer_Status+0x24>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1ad2      	subs	r2, r2, r3
 8008084:	4b05      	ldr	r3, [pc, #20]	; (800809c <SPI_Timer_Status+0x28>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	bf34      	ite	cc
 800808c:	2301      	movcc	r3, #1
 800808e:	2300      	movcs	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	4618      	mov	r0, r3
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20004100 	.word	0x20004100
 800809c:	20004104 	.word	0x20004104

080080a0 <xchg_spi>:
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
 80080aa:	f107 020f 	add.w	r2, r7, #15
 80080ae:	1df9      	adds	r1, r7, #7
 80080b0:	2332      	movs	r3, #50	; 0x32
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2301      	movs	r3, #1
 80080b6:	4804      	ldr	r0, [pc, #16]	; (80080c8 <xchg_spi+0x28>)
 80080b8:	f7fe f91c 	bl	80062f4 <HAL_SPI_TransmitReceive>
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20003e40 	.word	0x20003e40

080080cc <rcvr_spi_multi>:
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e00a      	b.n	80080f2 <rcvr_spi_multi+0x26>
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	18d4      	adds	r4, r2, r3
 80080e2:	20ff      	movs	r0, #255	; 0xff
 80080e4:	f7ff ffdc 	bl	80080a0 <xchg_spi>
 80080e8:	4603      	mov	r3, r0
 80080ea:	7023      	strb	r3, [r4, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3f0      	bcc.n	80080dc <rcvr_spi_multi+0x10>
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bd90      	pop	{r4, r7, pc}

08008104 <xmit_spi_multi>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	b29a      	uxth	r2, r3
 8008112:	f04f 33ff 	mov.w	r3, #4294967295
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4803      	ldr	r0, [pc, #12]	; (8008128 <xmit_spi_multi+0x24>)
 800811a:	f7fd ffaf 	bl	800607c <HAL_SPI_Transmit>
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20003e40 	.word	0x20003e40

0800812c <wait_ready>:
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	f7fb f93a 	bl	80033ac <HAL_GetTick>
 8008138:	6178      	str	r0, [r7, #20]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	20ff      	movs	r0, #255	; 0xff
 8008140:	f7ff ffae 	bl	80080a0 <xchg_spi>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2bff      	cmp	r3, #255	; 0xff
 800814c:	d007      	beq.n	800815e <wait_ready+0x32>
 800814e:	f7fb f92d 	bl	80033ac <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	429a      	cmp	r2, r3
 800815c:	d8ef      	bhi.n	800813e <wait_ready+0x12>
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2bff      	cmp	r3, #255	; 0xff
 8008162:	bf0c      	ite	eq
 8008164:	2301      	moveq	r3, #1
 8008166:	2300      	movne	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <despiselect>:
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
 8008178:	2201      	movs	r2, #1
 800817a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800817e:	4804      	ldr	r0, [pc, #16]	; (8008190 <despiselect+0x1c>)
 8008180:	f7fc fc58 	bl	8004a34 <HAL_GPIO_WritePin>
 8008184:	20ff      	movs	r0, #255	; 0xff
 8008186:	f7ff ff8b 	bl	80080a0 <xchg_spi>
 800818a:	bf00      	nop
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40020400 	.word	0x40020400

08008194 <spiselect>:
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
 8008198:	2200      	movs	r2, #0
 800819a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800819e:	480a      	ldr	r0, [pc, #40]	; (80081c8 <spiselect+0x34>)
 80081a0:	f7fc fc48 	bl	8004a34 <HAL_GPIO_WritePin>
 80081a4:	20ff      	movs	r0, #255	; 0xff
 80081a6:	f7ff ff7b 	bl	80080a0 <xchg_spi>
 80081aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081ae:	f7ff ffbd 	bl	800812c <wait_ready>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <spiselect+0x28>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e002      	b.n	80081c2 <spiselect+0x2e>
 80081bc:	f7ff ffda 	bl	8008174 <despiselect>
 80081c0:	2300      	movs	r3, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40020400 	.word	0x40020400

080081cc <rcvr_datablock>:
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	20c8      	movs	r0, #200	; 0xc8
 80081d8:	f7ff ff38 	bl	800804c <SPI_Timer_On>
 80081dc:	20ff      	movs	r0, #255	; 0xff
 80081de:	f7ff ff5f 	bl	80080a0 <xchg_spi>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	2bff      	cmp	r3, #255	; 0xff
 80081ea:	d104      	bne.n	80081f6 <rcvr_datablock+0x2a>
 80081ec:	f7ff ff42 	bl	8008074 <SPI_Timer_Status>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f2      	bne.n	80081dc <rcvr_datablock+0x10>
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2bfe      	cmp	r3, #254	; 0xfe
 80081fa:	d001      	beq.n	8008200 <rcvr_datablock+0x34>
 80081fc:	2300      	movs	r3, #0
 80081fe:	e00a      	b.n	8008216 <rcvr_datablock+0x4a>
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff ff62 	bl	80080cc <rcvr_spi_multi>
 8008208:	20ff      	movs	r0, #255	; 0xff
 800820a:	f7ff ff49 	bl	80080a0 <xchg_spi>
 800820e:	20ff      	movs	r0, #255	; 0xff
 8008210:	f7ff ff46 	bl	80080a0 <xchg_spi>
 8008214:	2301      	movs	r3, #1
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <xmit_datablock>:
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
 800822a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800822e:	f7ff ff7d 	bl	800812c <wait_ready>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d101      	bne.n	800823c <xmit_datablock+0x1e>
 8008238:	2300      	movs	r3, #0
 800823a:	e01e      	b.n	800827a <xmit_datablock+0x5c>
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff ff2e 	bl	80080a0 <xchg_spi>
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	2bfd      	cmp	r3, #253	; 0xfd
 8008248:	d016      	beq.n	8008278 <xmit_datablock+0x5a>
 800824a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff ff58 	bl	8008104 <xmit_spi_multi>
 8008254:	20ff      	movs	r0, #255	; 0xff
 8008256:	f7ff ff23 	bl	80080a0 <xchg_spi>
 800825a:	20ff      	movs	r0, #255	; 0xff
 800825c:	f7ff ff20 	bl	80080a0 <xchg_spi>
 8008260:	20ff      	movs	r0, #255	; 0xff
 8008262:	f7ff ff1d 	bl	80080a0 <xchg_spi>
 8008266:	4603      	mov	r3, r0
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	f003 031f 	and.w	r3, r3, #31
 8008270:	2b05      	cmp	r3, #5
 8008272:	d001      	beq.n	8008278 <xmit_datablock+0x5a>
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <xmit_datablock+0x5c>
 8008278:	2301      	movs	r3, #1
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <send_cmd>:
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	4603      	mov	r3, r0
 800828a:	6039      	str	r1, [r7, #0]
 800828c:	71fb      	strb	r3, [r7, #7]
 800828e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	da0e      	bge.n	80082b4 <send_cmd+0x32>
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829c:	71fb      	strb	r3, [r7, #7]
 800829e:	2100      	movs	r1, #0
 80082a0:	2037      	movs	r0, #55	; 0x37
 80082a2:	f7ff ffee 	bl	8008282 <send_cmd>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d901      	bls.n	80082b4 <send_cmd+0x32>
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	e051      	b.n	8008358 <send_cmd+0xd6>
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d008      	beq.n	80082cc <send_cmd+0x4a>
 80082ba:	f7ff ff5b 	bl	8008174 <despiselect>
 80082be:	f7ff ff69 	bl	8008194 <spiselect>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <send_cmd+0x4a>
 80082c8:	23ff      	movs	r3, #255	; 0xff
 80082ca:	e045      	b.n	8008358 <send_cmd+0xd6>
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fee3 	bl	80080a0 <xchg_spi>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	0e1b      	lsrs	r3, r3, #24
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff fedd 	bl	80080a0 <xchg_spi>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fed7 	bl	80080a0 <xchg_spi>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fed1 	bl	80080a0 <xchg_spi>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fecc 	bl	80080a0 <xchg_spi>
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <send_cmd+0x94>
 8008312:	2395      	movs	r3, #149	; 0x95
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b08      	cmp	r3, #8
 800831a:	d101      	bne.n	8008320 <send_cmd+0x9e>
 800831c:	2387      	movs	r3, #135	; 0x87
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff febc 	bl	80080a0 <xchg_spi>
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	2b0c      	cmp	r3, #12
 800832c:	d102      	bne.n	8008334 <send_cmd+0xb2>
 800832e:	20ff      	movs	r0, #255	; 0xff
 8008330:	f7ff feb6 	bl	80080a0 <xchg_spi>
 8008334:	230a      	movs	r3, #10
 8008336:	73fb      	strb	r3, [r7, #15]
 8008338:	20ff      	movs	r0, #255	; 0xff
 800833a:	f7ff feb1 	bl	80080a0 <xchg_spi>
 800833e:	4603      	mov	r3, r0
 8008340:	73bb      	strb	r3, [r7, #14]
 8008342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	da05      	bge.n	8008356 <send_cmd+0xd4>
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	3b01      	subs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f0      	bne.n	8008338 <send_cmd+0xb6>
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USER_SPI_initialize>:
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <USER_SPI_initialize+0x14>
 8008370:	2301      	movs	r3, #1
 8008372:	e0d6      	b.n	8008522 <USER_SPI_initialize+0x1c2>
 8008374:	4b6d      	ldr	r3, [pc, #436]	; (800852c <USER_SPI_initialize+0x1cc>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <USER_SPI_initialize+0x2a>
 8008382:	4b6a      	ldr	r3, [pc, #424]	; (800852c <USER_SPI_initialize+0x1cc>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e0cb      	b.n	8008522 <USER_SPI_initialize+0x1c2>
 800838a:	4b69      	ldr	r3, [pc, #420]	; (8008530 <USER_SPI_initialize+0x1d0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008394:	4b66      	ldr	r3, [pc, #408]	; (8008530 <USER_SPI_initialize+0x1d0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	230a      	movs	r3, #10
 80083a0:	73fb      	strb	r3, [r7, #15]
 80083a2:	e005      	b.n	80083b0 <USER_SPI_initialize+0x50>
 80083a4:	20ff      	movs	r0, #255	; 0xff
 80083a6:	f7ff fe7b 	bl	80080a0 <xchg_spi>
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1f6      	bne.n	80083a4 <USER_SPI_initialize+0x44>
 80083b6:	2300      	movs	r3, #0
 80083b8:	737b      	strb	r3, [r7, #13]
 80083ba:	2100      	movs	r1, #0
 80083bc:	2000      	movs	r0, #0
 80083be:	f7ff ff60 	bl	8008282 <send_cmd>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	f040 808b 	bne.w	80084e0 <USER_SPI_initialize+0x180>
 80083ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083ce:	f7ff fe3d 	bl	800804c <SPI_Timer_On>
 80083d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083d6:	2008      	movs	r0, #8
 80083d8:	f7ff ff53 	bl	8008282 <send_cmd>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d151      	bne.n	8008486 <USER_SPI_initialize+0x126>
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
 80083e6:	e00d      	b.n	8008404 <USER_SPI_initialize+0xa4>
 80083e8:	7bfc      	ldrb	r4, [r7, #15]
 80083ea:	20ff      	movs	r0, #255	; 0xff
 80083ec:	f7ff fe58 	bl	80080a0 <xchg_spi>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	f104 0310 	add.w	r3, r4, #16
 80083f8:	443b      	add	r3, r7
 80083fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	3301      	adds	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b03      	cmp	r3, #3
 8008408:	d9ee      	bls.n	80083e8 <USER_SPI_initialize+0x88>
 800840a:	7abb      	ldrb	r3, [r7, #10]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d167      	bne.n	80084e0 <USER_SPI_initialize+0x180>
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	2baa      	cmp	r3, #170	; 0xaa
 8008414:	d164      	bne.n	80084e0 <USER_SPI_initialize+0x180>
 8008416:	bf00      	nop
 8008418:	f7ff fe2c 	bl	8008074 <SPI_Timer_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <USER_SPI_initialize+0xd2>
 8008422:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008426:	20a9      	movs	r0, #169	; 0xa9
 8008428:	f7ff ff2b 	bl	8008282 <send_cmd>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f2      	bne.n	8008418 <USER_SPI_initialize+0xb8>
 8008432:	f7ff fe1f 	bl	8008074 <SPI_Timer_Status>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d051      	beq.n	80084e0 <USER_SPI_initialize+0x180>
 800843c:	2100      	movs	r1, #0
 800843e:	203a      	movs	r0, #58	; 0x3a
 8008440:	f7ff ff1f 	bl	8008282 <send_cmd>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d14a      	bne.n	80084e0 <USER_SPI_initialize+0x180>
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
 800844e:	e00d      	b.n	800846c <USER_SPI_initialize+0x10c>
 8008450:	7bfc      	ldrb	r4, [r7, #15]
 8008452:	20ff      	movs	r0, #255	; 0xff
 8008454:	f7ff fe24 	bl	80080a0 <xchg_spi>
 8008458:	4603      	mov	r3, r0
 800845a:	461a      	mov	r2, r3
 800845c:	f104 0310 	add.w	r3, r4, #16
 8008460:	443b      	add	r3, r7
 8008462:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	3301      	adds	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d9ee      	bls.n	8008450 <USER_SPI_initialize+0xf0>
 8008472:	7a3b      	ldrb	r3, [r7, #8]
 8008474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <USER_SPI_initialize+0x120>
 800847c:	230c      	movs	r3, #12
 800847e:	e000      	b.n	8008482 <USER_SPI_initialize+0x122>
 8008480:	2304      	movs	r3, #4
 8008482:	737b      	strb	r3, [r7, #13]
 8008484:	e02c      	b.n	80084e0 <USER_SPI_initialize+0x180>
 8008486:	2100      	movs	r1, #0
 8008488:	20a9      	movs	r0, #169	; 0xa9
 800848a:	f7ff fefa 	bl	8008282 <send_cmd>
 800848e:	4603      	mov	r3, r0
 8008490:	2b01      	cmp	r3, #1
 8008492:	d804      	bhi.n	800849e <USER_SPI_initialize+0x13e>
 8008494:	2302      	movs	r3, #2
 8008496:	737b      	strb	r3, [r7, #13]
 8008498:	23a9      	movs	r3, #169	; 0xa9
 800849a:	73bb      	strb	r3, [r7, #14]
 800849c:	e003      	b.n	80084a6 <USER_SPI_initialize+0x146>
 800849e:	2301      	movs	r3, #1
 80084a0:	737b      	strb	r3, [r7, #13]
 80084a2:	2301      	movs	r3, #1
 80084a4:	73bb      	strb	r3, [r7, #14]
 80084a6:	bf00      	nop
 80084a8:	f7ff fde4 	bl	8008074 <SPI_Timer_Status>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <USER_SPI_initialize+0x162>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7ff fee3 	bl	8008282 <send_cmd>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1f2      	bne.n	80084a8 <USER_SPI_initialize+0x148>
 80084c2:	f7ff fdd7 	bl	8008074 <SPI_Timer_Status>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <USER_SPI_initialize+0x17c>
 80084cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084d0:	2010      	movs	r0, #16
 80084d2:	f7ff fed6 	bl	8008282 <send_cmd>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <USER_SPI_initialize+0x180>
 80084dc:	2300      	movs	r3, #0
 80084de:	737b      	strb	r3, [r7, #13]
 80084e0:	4a14      	ldr	r2, [pc, #80]	; (8008534 <USER_SPI_initialize+0x1d4>)
 80084e2:	7b7b      	ldrb	r3, [r7, #13]
 80084e4:	7013      	strb	r3, [r2, #0]
 80084e6:	f7ff fe45 	bl	8008174 <despiselect>
 80084ea:	7b7b      	ldrb	r3, [r7, #13]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d012      	beq.n	8008516 <USER_SPI_initialize+0x1b6>
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <USER_SPI_initialize+0x1d0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <USER_SPI_initialize+0x1d0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0210 	orr.w	r2, r2, #16
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <USER_SPI_initialize+0x1cc>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	f023 0301 	bic.w	r3, r3, #1
 800850e:	b2da      	uxtb	r2, r3
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <USER_SPI_initialize+0x1cc>)
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e002      	b.n	800851c <USER_SPI_initialize+0x1bc>
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <USER_SPI_initialize+0x1cc>)
 8008518:	2201      	movs	r2, #1
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	4b03      	ldr	r3, [pc, #12]	; (800852c <USER_SPI_initialize+0x1cc>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bd90      	pop	{r4, r7, pc}
 800852a:	bf00      	nop
 800852c:	20000024 	.word	0x20000024
 8008530:	20003e40 	.word	0x20003e40
 8008534:	200040fc 	.word	0x200040fc

08008538 <USER_SPI_status>:
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USER_SPI_status+0x14>
 8008548:	2301      	movs	r3, #1
 800854a:	e002      	b.n	8008552 <USER_SPI_status+0x1a>
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <USER_SPI_status+0x28>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000024 	.word	0x20000024

08008564 <USER_SPI_read>:
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <USER_SPI_read+0x1c>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USER_SPI_read+0x20>
 8008580:	2304      	movs	r3, #4
 8008582:	e04d      	b.n	8008620 <USER_SPI_read+0xbc>
 8008584:	4b28      	ldr	r3, [pc, #160]	; (8008628 <USER_SPI_read+0xc4>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <USER_SPI_read+0x32>
 8008592:	2303      	movs	r3, #3
 8008594:	e044      	b.n	8008620 <USER_SPI_read+0xbc>
 8008596:	4b25      	ldr	r3, [pc, #148]	; (800862c <USER_SPI_read+0xc8>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <USER_SPI_read+0x44>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	025b      	lsls	r3, r3, #9
 80085a6:	607b      	str	r3, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d111      	bne.n	80085d2 <USER_SPI_read+0x6e>
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	2011      	movs	r0, #17
 80085b2:	f7ff fe66 	bl	8008282 <send_cmd>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d129      	bne.n	8008610 <USER_SPI_read+0xac>
 80085bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085c0:	68b8      	ldr	r0, [r7, #8]
 80085c2:	f7ff fe03 	bl	80081cc <rcvr_datablock>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d021      	beq.n	8008610 <USER_SPI_read+0xac>
 80085cc:	2300      	movs	r3, #0
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	e01e      	b.n	8008610 <USER_SPI_read+0xac>
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	2012      	movs	r0, #18
 80085d6:	f7ff fe54 	bl	8008282 <send_cmd>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d117      	bne.n	8008610 <USER_SPI_read+0xac>
 80085e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085e4:	68b8      	ldr	r0, [r7, #8]
 80085e6:	f7ff fdf1 	bl	80081cc <rcvr_datablock>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <USER_SPI_read+0xa2>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085f6:	60bb      	str	r3, [r7, #8]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	603b      	str	r3, [r7, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ed      	bne.n	80085e0 <USER_SPI_read+0x7c>
 8008604:	e000      	b.n	8008608 <USER_SPI_read+0xa4>
 8008606:	bf00      	nop
 8008608:	2100      	movs	r1, #0
 800860a:	200c      	movs	r0, #12
 800860c:	f7ff fe39 	bl	8008282 <send_cmd>
 8008610:	f7ff fdb0 	bl	8008174 <despiselect>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000024 	.word	0x20000024
 800862c:	200040fc 	.word	0x200040fc

08008630 <USER_SPI_write>:
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d102      	bne.n	800864c <USER_SPI_write+0x1c>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <USER_SPI_write+0x20>
 800864c:	2304      	movs	r3, #4
 800864e:	e063      	b.n	8008718 <USER_SPI_write+0xe8>
 8008650:	4b33      	ldr	r3, [pc, #204]	; (8008720 <USER_SPI_write+0xf0>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <USER_SPI_write+0x32>
 800865e:	2303      	movs	r3, #3
 8008660:	e05a      	b.n	8008718 <USER_SPI_write+0xe8>
 8008662:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <USER_SPI_write+0xf0>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <USER_SPI_write+0x44>
 8008670:	2302      	movs	r3, #2
 8008672:	e051      	b.n	8008718 <USER_SPI_write+0xe8>
 8008674:	4b2b      	ldr	r3, [pc, #172]	; (8008724 <USER_SPI_write+0xf4>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <USER_SPI_write+0x56>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	025b      	lsls	r3, r3, #9
 8008684:	607b      	str	r3, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d110      	bne.n	80086ae <USER_SPI_write+0x7e>
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	2018      	movs	r0, #24
 8008690:	f7ff fdf7 	bl	8008282 <send_cmd>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d136      	bne.n	8008708 <USER_SPI_write+0xd8>
 800869a:	21fe      	movs	r1, #254	; 0xfe
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f7ff fdbe 	bl	800821e <xmit_datablock>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d02f      	beq.n	8008708 <USER_SPI_write+0xd8>
 80086a8:	2300      	movs	r3, #0
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	e02c      	b.n	8008708 <USER_SPI_write+0xd8>
 80086ae:	4b1d      	ldr	r3, [pc, #116]	; (8008724 <USER_SPI_write+0xf4>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f003 0306 	and.w	r3, r3, #6
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <USER_SPI_write+0x92>
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	2097      	movs	r0, #151	; 0x97
 80086be:	f7ff fde0 	bl	8008282 <send_cmd>
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	2019      	movs	r0, #25
 80086c6:	f7ff fddc 	bl	8008282 <send_cmd>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11b      	bne.n	8008708 <USER_SPI_write+0xd8>
 80086d0:	21fc      	movs	r1, #252	; 0xfc
 80086d2:	68b8      	ldr	r0, [r7, #8]
 80086d4:	f7ff fda3 	bl	800821e <xmit_datablock>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <USER_SPI_write+0xc4>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1ee      	bne.n	80086d0 <USER_SPI_write+0xa0>
 80086f2:	e000      	b.n	80086f6 <USER_SPI_write+0xc6>
 80086f4:	bf00      	nop
 80086f6:	21fd      	movs	r1, #253	; 0xfd
 80086f8:	2000      	movs	r0, #0
 80086fa:	f7ff fd90 	bl	800821e <xmit_datablock>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <USER_SPI_write+0xd8>
 8008704:	2301      	movs	r3, #1
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	f7ff fd34 	bl	8008174 <despiselect>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	bf14      	ite	ne
 8008712:	2301      	movne	r3, #1
 8008714:	2300      	moveq	r3, #0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000024 	.word	0x20000024
 8008724:	200040fc 	.word	0x200040fc

08008728 <USER_SPI_ioctl>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b08c      	sub	sp, #48	; 0x30
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	603a      	str	r2, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
 8008734:	460b      	mov	r3, r1
 8008736:	71bb      	strb	r3, [r7, #6]
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <USER_SPI_ioctl+0x1a>
 800873e:	2304      	movs	r3, #4
 8008740:	e15a      	b.n	80089f8 <USER_SPI_ioctl+0x2d0>
 8008742:	4baf      	ldr	r3, [pc, #700]	; (8008a00 <USER_SPI_ioctl+0x2d8>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <USER_SPI_ioctl+0x2c>
 8008750:	2303      	movs	r3, #3
 8008752:	e151      	b.n	80089f8 <USER_SPI_ioctl+0x2d0>
 8008754:	2301      	movs	r3, #1
 8008756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800875a:	79bb      	ldrb	r3, [r7, #6]
 800875c:	2b04      	cmp	r3, #4
 800875e:	f200 8136 	bhi.w	80089ce <USER_SPI_ioctl+0x2a6>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <USER_SPI_ioctl+0x40>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	0800877d 	.word	0x0800877d
 800876c:	08008791 	.word	0x08008791
 8008770:	080089cf 	.word	0x080089cf
 8008774:	0800883d 	.word	0x0800883d
 8008778:	08008933 	.word	0x08008933
 800877c:	f7ff fd0a 	bl	8008194 <spiselect>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8127 	beq.w	80089d6 <USER_SPI_ioctl+0x2ae>
 8008788:	2300      	movs	r3, #0
 800878a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800878e:	e122      	b.n	80089d6 <USER_SPI_ioctl+0x2ae>
 8008790:	2100      	movs	r1, #0
 8008792:	2009      	movs	r0, #9
 8008794:	f7ff fd75 	bl	8008282 <send_cmd>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 811d 	bne.w	80089da <USER_SPI_ioctl+0x2b2>
 80087a0:	f107 030c 	add.w	r3, r7, #12
 80087a4:	2110      	movs	r1, #16
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fd10 	bl	80081cc <rcvr_datablock>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 8113 	beq.w	80089da <USER_SPI_ioctl+0x2b2>
 80087b4:	7b3b      	ldrb	r3, [r7, #12]
 80087b6:	099b      	lsrs	r3, r3, #6
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d111      	bne.n	80087e2 <USER_SPI_ioctl+0xba>
 80087be:	7d7b      	ldrb	r3, [r7, #21]
 80087c0:	461a      	mov	r2, r3
 80087c2:	7d3b      	ldrb	r3, [r7, #20]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	4413      	add	r3, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	7cfb      	ldrb	r3, [r7, #19]
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80087d2:	4413      	add	r3, r2
 80087d4:	3301      	adds	r3, #1
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	029a      	lsls	r2, r3, #10
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e028      	b.n	8008834 <USER_SPI_ioctl+0x10c>
 80087e2:	7c7b      	ldrb	r3, [r7, #17]
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	7dbb      	ldrb	r3, [r7, #22]
 80087ec:	09db      	lsrs	r3, r3, #7
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	7d7b      	ldrb	r3, [r7, #21]
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0306 	and.w	r3, r3, #6
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	4413      	add	r3, r2
 8008802:	b2db      	uxtb	r3, r3
 8008804:	3302      	adds	r3, #2
 8008806:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800880a:	7d3b      	ldrb	r3, [r7, #20]
 800880c:	099b      	lsrs	r3, r3, #6
 800880e:	b2db      	uxtb	r3, r3
 8008810:	461a      	mov	r2, r3
 8008812:	7cfb      	ldrb	r3, [r7, #19]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	441a      	add	r2, r3
 8008818:	7cbb      	ldrb	r3, [r7, #18]
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008820:	4413      	add	r3, r2
 8008822:	3301      	adds	r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800882a:	3b09      	subs	r3, #9
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	409a      	lsls	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800883a:	e0ce      	b.n	80089da <USER_SPI_ioctl+0x2b2>
 800883c:	4b71      	ldr	r3, [pc, #452]	; (8008a04 <USER_SPI_ioctl+0x2dc>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d031      	beq.n	80088ac <USER_SPI_ioctl+0x184>
 8008848:	2100      	movs	r1, #0
 800884a:	208d      	movs	r0, #141	; 0x8d
 800884c:	f7ff fd19 	bl	8008282 <send_cmd>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	f040 80c3 	bne.w	80089de <USER_SPI_ioctl+0x2b6>
 8008858:	20ff      	movs	r0, #255	; 0xff
 800885a:	f7ff fc21 	bl	80080a0 <xchg_spi>
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	2110      	movs	r1, #16
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fcb1 	bl	80081cc <rcvr_datablock>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80b6 	beq.w	80089de <USER_SPI_ioctl+0x2b6>
 8008872:	2330      	movs	r3, #48	; 0x30
 8008874:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008878:	e007      	b.n	800888a <USER_SPI_ioctl+0x162>
 800887a:	20ff      	movs	r0, #255	; 0xff
 800887c:	f7ff fc10 	bl	80080a0 <xchg_spi>
 8008880:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008884:	3b01      	subs	r3, #1
 8008886:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800888a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f3      	bne.n	800887a <USER_SPI_ioctl+0x152>
 8008892:	7dbb      	ldrb	r3, [r7, #22]
 8008894:	091b      	lsrs	r3, r3, #4
 8008896:	b2db      	uxtb	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	2310      	movs	r3, #16
 800889c:	fa03 f202 	lsl.w	r2, r3, r2
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088aa:	e098      	b.n	80089de <USER_SPI_ioctl+0x2b6>
 80088ac:	2100      	movs	r1, #0
 80088ae:	2009      	movs	r0, #9
 80088b0:	f7ff fce7 	bl	8008282 <send_cmd>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 8091 	bne.w	80089de <USER_SPI_ioctl+0x2b6>
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	2110      	movs	r1, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fc82 	bl	80081cc <rcvr_datablock>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8087 	beq.w	80089de <USER_SPI_ioctl+0x2b6>
 80088d0:	4b4c      	ldr	r3, [pc, #304]	; (8008a04 <USER_SPI_ioctl+0x2dc>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d012      	beq.n	8008902 <USER_SPI_ioctl+0x1da>
 80088dc:	7dbb      	ldrb	r3, [r7, #22]
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80088e4:	7dfa      	ldrb	r2, [r7, #23]
 80088e6:	09d2      	lsrs	r2, r2, #7
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	4413      	add	r3, r2
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	7e7b      	ldrb	r3, [r7, #25]
 80088f0:	099b      	lsrs	r3, r3, #6
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	e013      	b.n	800892a <USER_SPI_ioctl+0x202>
 8008902:	7dbb      	ldrb	r3, [r7, #22]
 8008904:	109b      	asrs	r3, r3, #2
 8008906:	b29b      	uxth	r3, r3
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	3301      	adds	r3, #1
 800890e:	7dfa      	ldrb	r2, [r7, #23]
 8008910:	00d2      	lsls	r2, r2, #3
 8008912:	f002 0218 	and.w	r2, r2, #24
 8008916:	7df9      	ldrb	r1, [r7, #23]
 8008918:	0949      	lsrs	r1, r1, #5
 800891a:	b2c9      	uxtb	r1, r1
 800891c:	440a      	add	r2, r1
 800891e:	3201      	adds	r2, #1
 8008920:	fb02 f303 	mul.w	r3, r2, r3
 8008924:	461a      	mov	r2, r3
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008930:	e055      	b.n	80089de <USER_SPI_ioctl+0x2b6>
 8008932:	4b34      	ldr	r3, [pc, #208]	; (8008a04 <USER_SPI_ioctl+0x2dc>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0306 	and.w	r3, r3, #6
 800893a:	2b00      	cmp	r3, #0
 800893c:	d051      	beq.n	80089e2 <USER_SPI_ioctl+0x2ba>
 800893e:	f107 020c 	add.w	r2, r7, #12
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	210b      	movs	r1, #11
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff feee 	bl	8008728 <USER_SPI_ioctl>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d149      	bne.n	80089e6 <USER_SPI_ioctl+0x2be>
 8008952:	7b3b      	ldrb	r3, [r7, #12]
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <USER_SPI_ioctl+0x23e>
 800895c:	7dbb      	ldrb	r3, [r7, #22]
 800895e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d041      	beq.n	80089ea <USER_SPI_ioctl+0x2c2>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	623b      	str	r3, [r7, #32]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
 8008976:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <USER_SPI_ioctl+0x2dc>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <USER_SPI_ioctl+0x266>
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	025b      	lsls	r3, r3, #9
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	025b      	lsls	r3, r3, #9
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
 800898e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008990:	2020      	movs	r0, #32
 8008992:	f7ff fc76 	bl	8008282 <send_cmd>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d128      	bne.n	80089ee <USER_SPI_ioctl+0x2c6>
 800899c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800899e:	2021      	movs	r0, #33	; 0x21
 80089a0:	f7ff fc6f 	bl	8008282 <send_cmd>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d121      	bne.n	80089ee <USER_SPI_ioctl+0x2c6>
 80089aa:	2100      	movs	r1, #0
 80089ac:	2026      	movs	r0, #38	; 0x26
 80089ae:	f7ff fc68 	bl	8008282 <send_cmd>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11a      	bne.n	80089ee <USER_SPI_ioctl+0x2c6>
 80089b8:	f247 5030 	movw	r0, #30000	; 0x7530
 80089bc:	f7ff fbb6 	bl	800812c <wait_ready>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d013      	beq.n	80089ee <USER_SPI_ioctl+0x2c6>
 80089c6:	2300      	movs	r3, #0
 80089c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089cc:	e00f      	b.n	80089ee <USER_SPI_ioctl+0x2c6>
 80089ce:	2304      	movs	r3, #4
 80089d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089d4:	e00c      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089d6:	bf00      	nop
 80089d8:	e00a      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089da:	bf00      	nop
 80089dc:	e008      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089de:	bf00      	nop
 80089e0:	e006      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089e2:	bf00      	nop
 80089e4:	e004      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <USER_SPI_ioctl+0x2c8>
 80089ee:	bf00      	nop
 80089f0:	f7ff fbc0 	bl	8008174 <despiselect>
 80089f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f8:	4618      	mov	r0, r3
 80089fa:	3730      	adds	r7, #48	; 0x30
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000024 	.word	0x20000024
 8008a04:	200040fc 	.word	0x200040fc

08008a08 <disk_status>:
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	71fb      	strb	r3, [r7, #7]
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	4a08      	ldr	r2, [pc, #32]	; (8008a38 <disk_status+0x30>)
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	79fa      	ldrb	r2, [r7, #7]
 8008a20:	4905      	ldr	r1, [pc, #20]	; (8008a38 <disk_status+0x30>)
 8008a22:	440a      	add	r2, r1
 8008a24:	7a12      	ldrb	r2, [r2, #8]
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20004130 	.word	0x20004130

08008a3c <disk_initialize>:
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	71fb      	strb	r3, [r7, #7]
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4a0d      	ldr	r2, [pc, #52]	; (8008a84 <disk_initialize+0x48>)
 8008a4e:	5cd3      	ldrb	r3, [r2, r3]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d111      	bne.n	8008a78 <disk_initialize+0x3c>
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <disk_initialize+0x48>)
 8008a58:	2101      	movs	r1, #1
 8008a5a:	54d1      	strb	r1, [r2, r3]
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <disk_initialize+0x48>)
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	79fa      	ldrb	r2, [r7, #7]
 8008a6a:	4906      	ldr	r1, [pc, #24]	; (8008a84 <disk_initialize+0x48>)
 8008a6c:	440a      	add	r2, r1
 8008a6e:	7a12      	ldrb	r2, [r2, #8]
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20004130 	.word	0x20004130

08008a88 <disk_read>:
 8008a88:	b590      	push	{r4, r7, lr}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
 8008a92:	603b      	str	r3, [r7, #0]
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ac4 <disk_read+0x3c>)
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	689c      	ldr	r4, [r3, #8]
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <disk_read+0x3c>)
 8008aa8:	4413      	add	r3, r2
 8008aaa:	7a18      	ldrb	r0, [r3, #8]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	47a0      	blx	r4
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	75fb      	strb	r3, [r7, #23]
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	20004130 	.word	0x20004130

08008ac8 <disk_write>:
 8008ac8:	b590      	push	{r4, r7, lr}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	607a      	str	r2, [r7, #4]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <disk_write+0x3c>)
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	68dc      	ldr	r4, [r3, #12]
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4a07      	ldr	r2, [pc, #28]	; (8008b04 <disk_write+0x3c>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	7a18      	ldrb	r0, [r3, #8]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	47a0      	blx	r4
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	4618      	mov	r0, r3
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd90      	pop	{r4, r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20004130 	.word	0x20004130

08008b08 <disk_ioctl>:
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	603a      	str	r2, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
 8008b14:	460b      	mov	r3, r1
 8008b16:	71bb      	strb	r3, [r7, #6]
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <disk_ioctl+0x38>)
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	79fa      	ldrb	r2, [r7, #7]
 8008b26:	4906      	ldr	r1, [pc, #24]	; (8008b40 <disk_ioctl+0x38>)
 8008b28:	440a      	add	r2, r1
 8008b2a:	7a10      	ldrb	r0, [r2, #8]
 8008b2c:	79b9      	ldrb	r1, [r7, #6]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4798      	blx	r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20004130 	.word	0x20004130

08008b44 <ld_word>:
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	81fb      	strh	r3, [r7, #14]
 8008b54:	89fb      	ldrh	r3, [r7, #14]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	b21a      	sxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	b21b      	sxth	r3, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	81fb      	strh	r3, [r7, #14]
 8008b66:	89fb      	ldrh	r3, [r7, #14]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <ld_dword>:
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3303      	adds	r3, #3
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	3202      	adds	r2, #2
 8008b8c:	7812      	ldrb	r2, [r2, #0]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	3201      	adds	r2, #1
 8008b9a:	7812      	ldrb	r2, [r2, #0]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7812      	ldrb	r2, [r2, #0]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <st_word>:
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	807b      	strh	r3, [r7, #2]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	887a      	ldrh	r2, [r7, #2]
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	887b      	ldrh	r3, [r7, #2]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	807b      	strh	r3, [r7, #2]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	b2d2      	uxtb	r2, r2
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <st_dword>:
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	607a      	str	r2, [r7, #4]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	0a1b      	lsrs	r3, r3, #8
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <mem_cpy>:
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <mem_cpy+0x36>
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	1c53      	adds	r3, r2, #1
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	6179      	str	r1, [r7, #20]
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	607b      	str	r3, [r7, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f1      	bne.n	8008c62 <mem_cpy+0x1a>
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <mem_set>:
 8008c8a:	b480      	push	{r7}
 8008c8c:	b087      	sub	sp, #28
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	617a      	str	r2, [r7, #20]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	607b      	str	r3, [r7, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f3      	bne.n	8008c9a <mem_set+0x10>
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <mem_cmp>:
 8008cc0:	b480      	push	{r7}
 8008cc2:	b089      	sub	sp, #36	; 0x24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	61bb      	str	r3, [r7, #24]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	61fa      	str	r2, [r7, #28]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	61ba      	str	r2, [r7, #24]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	1acb      	subs	r3, r1, r3
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <mem_cmp+0x40>
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0eb      	beq.n	8008cd8 <mem_cmp+0x18>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4618      	mov	r0, r3
 8008d04:	3724      	adds	r7, #36	; 0x24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <chk_chr>:
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
 8008d18:	e002      	b.n	8008d20 <chk_chr+0x12>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	607b      	str	r3, [r7, #4]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <chk_chr+0x26>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d1f2      	bne.n	8008d1a <chk_chr+0xc>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <lock_fs>:
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <lock_fs+0x22>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 f91d 	bl	800af96 <ff_req_grant>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <lock_fs+0x22>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e000      	b.n	8008d68 <lock_fs+0x24>
 8008d66:	2300      	movs	r3, #0
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <unlock_fs>:
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00d      	beq.n	8008d9e <unlock_fs+0x2e>
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d00a      	beq.n	8008d9e <unlock_fs+0x2e>
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	2b0b      	cmp	r3, #11
 8008d8c:	d007      	beq.n	8008d9e <unlock_fs+0x2e>
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	2b0f      	cmp	r3, #15
 8008d92:	d004      	beq.n	8008d9e <unlock_fs+0x2e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f002 f911 	bl	800afc0 <ff_rel_grant>
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <chk_lock>:
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	e029      	b.n	8008e10 <chk_lock+0x68>
 8008dbc:	4a27      	ldr	r2, [pc, #156]	; (8008e5c <chk_lock+0xb4>)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	4413      	add	r3, r2
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01d      	beq.n	8008e06 <chk_lock+0x5e>
 8008dca:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <chk_lock+0xb4>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	4413      	add	r3, r2
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d116      	bne.n	8008e0a <chk_lock+0x62>
 8008ddc:	4a1f      	ldr	r2, [pc, #124]	; (8008e5c <chk_lock+0xb4>)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d10c      	bne.n	8008e0a <chk_lock+0x62>
 8008df0:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <chk_lock+0xb4>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	4413      	add	r3, r2
 8008df8:	3308      	adds	r3, #8
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d102      	bne.n	8008e0a <chk_lock+0x62>
 8008e04:	e007      	b.n	8008e16 <chk_lock+0x6e>
 8008e06:	2301      	movs	r3, #1
 8008e08:	60bb      	str	r3, [r7, #8]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d9d2      	bls.n	8008dbc <chk_lock+0x14>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d109      	bne.n	8008e30 <chk_lock+0x88>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <chk_lock+0x80>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d101      	bne.n	8008e2c <chk_lock+0x84>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e010      	b.n	8008e4e <chk_lock+0xa6>
 8008e2c:	2312      	movs	r3, #18
 8008e2e:	e00e      	b.n	8008e4e <chk_lock+0xa6>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d108      	bne.n	8008e48 <chk_lock+0xa0>
 8008e36:	4a09      	ldr	r2, [pc, #36]	; (8008e5c <chk_lock+0xb4>)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	4413      	add	r3, r2
 8008e3e:	330c      	adds	r3, #12
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e46:	d101      	bne.n	8008e4c <chk_lock+0xa4>
 8008e48:	2310      	movs	r3, #16
 8008e4a:	e000      	b.n	8008e4e <chk_lock+0xa6>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	20004110 	.word	0x20004110

08008e60 <enq_lock>:
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	2300      	movs	r3, #0
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	e002      	b.n	8008e72 <enq_lock+0x12>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d806      	bhi.n	8008e86 <enq_lock+0x26>
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <enq_lock+0x40>)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	4413      	add	r3, r2
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f2      	bne.n	8008e6c <enq_lock+0xc>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	bf14      	ite	ne
 8008e8c:	2301      	movne	r3, #1
 8008e8e:	2300      	moveq	r3, #0
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20004110 	.word	0x20004110

08008ea4 <inc_lock>:
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e01f      	b.n	8008ef4 <inc_lock+0x50>
 8008eb4:	4a41      	ldr	r2, [pc, #260]	; (8008fbc <inc_lock+0x118>)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	4413      	add	r3, r2
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d113      	bne.n	8008eee <inc_lock+0x4a>
 8008ec6:	4a3d      	ldr	r2, [pc, #244]	; (8008fbc <inc_lock+0x118>)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d109      	bne.n	8008eee <inc_lock+0x4a>
 8008eda:	4a38      	ldr	r2, [pc, #224]	; (8008fbc <inc_lock+0x118>)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d006      	beq.n	8008efc <inc_lock+0x58>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d9dc      	bls.n	8008eb4 <inc_lock+0x10>
 8008efa:	e000      	b.n	8008efe <inc_lock+0x5a>
 8008efc:	bf00      	nop
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d132      	bne.n	8008f6a <inc_lock+0xc6>
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	e002      	b.n	8008f10 <inc_lock+0x6c>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d806      	bhi.n	8008f24 <inc_lock+0x80>
 8008f16:	4a29      	ldr	r2, [pc, #164]	; (8008fbc <inc_lock+0x118>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	4413      	add	r3, r2
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f2      	bne.n	8008f0a <inc_lock+0x66>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d101      	bne.n	8008f2e <inc_lock+0x8a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e040      	b.n	8008fb0 <inc_lock+0x10c>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4922      	ldr	r1, [pc, #136]	; (8008fbc <inc_lock+0x118>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	440b      	add	r3, r1
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	491e      	ldr	r1, [pc, #120]	; (8008fbc <inc_lock+0x118>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	440b      	add	r3, r1
 8008f48:	3304      	adds	r3, #4
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	491a      	ldr	r1, [pc, #104]	; (8008fbc <inc_lock+0x118>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	440b      	add	r3, r1
 8008f58:	3308      	adds	r3, #8
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <inc_lock+0x118>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	4413      	add	r3, r2
 8008f64:	330c      	adds	r3, #12
 8008f66:	2200      	movs	r2, #0
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <inc_lock+0xe0>
 8008f70:	4a12      	ldr	r2, [pc, #72]	; (8008fbc <inc_lock+0x118>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	011b      	lsls	r3, r3, #4
 8008f76:	4413      	add	r3, r2
 8008f78:	330c      	adds	r3, #12
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <inc_lock+0xe0>
 8008f80:	2300      	movs	r3, #0
 8008f82:	e015      	b.n	8008fb0 <inc_lock+0x10c>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d108      	bne.n	8008f9c <inc_lock+0xf8>
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <inc_lock+0x118>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4413      	add	r3, r2
 8008f92:	330c      	adds	r3, #12
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	e001      	b.n	8008fa0 <inc_lock+0xfc>
 8008f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fa0:	4906      	ldr	r1, [pc, #24]	; (8008fbc <inc_lock+0x118>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	440b      	add	r3, r1
 8008fa8:	330c      	adds	r3, #12
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20004110 	.word	0x20004110

08008fc0 <clear_lock>:
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e010      	b.n	8008ff0 <clear_lock+0x30>
 8008fce:	4a0d      	ldr	r2, [pc, #52]	; (8009004 <clear_lock+0x44>)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	4413      	add	r3, r2
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d105      	bne.n	8008fea <clear_lock+0x2a>
 8008fde:	4a09      	ldr	r2, [pc, #36]	; (8009004 <clear_lock+0x44>)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	4413      	add	r3, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3301      	adds	r3, #1
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d9eb      	bls.n	8008fce <clear_lock+0xe>
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20004110 	.word	0x20004110

08009008 <sync_window>:
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	78db      	ldrb	r3, [r3, #3]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d034      	beq.n	8009086 <sync_window+0x7e>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7858      	ldrb	r0, [r3, #1]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800902c:	2301      	movs	r3, #1
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	f7ff fd4a 	bl	8008ac8 <disk_write>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <sync_window+0x38>
 800903a:	2301      	movs	r3, #1
 800903c:	73fb      	strb	r3, [r7, #15]
 800903e:	e022      	b.n	8009086 <sync_window+0x7e>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	70da      	strb	r2, [r3, #3]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	1ad2      	subs	r2, r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	429a      	cmp	r2, r3
 8009054:	d217      	bcs.n	8009086 <sync_window+0x7e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	789b      	ldrb	r3, [r3, #2]
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	e010      	b.n	8009080 <sync_window+0x78>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7858      	ldrb	r0, [r3, #1]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009072:	2301      	movs	r3, #1
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	f7ff fd27 	bl	8008ac8 <disk_write>
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d8eb      	bhi.n	800905e <sync_window+0x56>
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <move_window>:
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	73fb      	strb	r3, [r7, #15]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d01b      	beq.n	80090e0 <move_window+0x50>
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff ffad 	bl	8009008 <sync_window>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d113      	bne.n	80090e0 <move_window+0x50>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7858      	ldrb	r0, [r3, #1]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090c2:	2301      	movs	r3, #1
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	f7ff fcdf 	bl	8008a88 <disk_read>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <move_window+0x4a>
 80090d0:	f04f 33ff 	mov.w	r3, #4294967295
 80090d4:	603b      	str	r3, [r7, #0]
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	631a      	str	r2, [r3, #48]	; 0x30
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <sync_fs>:
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff87 	bl	8009008 <sync_window>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d158      	bne.n	80091b6 <sync_fs+0xca>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d148      	bne.n	800919e <sync_fs+0xb2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	791b      	ldrb	r3, [r3, #4]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d144      	bne.n	800919e <sync_fs+0xb2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3334      	adds	r3, #52	; 0x34
 8009118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fdb3 	bl	8008c8a <mem_set>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3334      	adds	r3, #52	; 0x34
 8009128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800912c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fd42 	bl	8008bba <st_word>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3334      	adds	r3, #52	; 0x34
 800913a:	4921      	ldr	r1, [pc, #132]	; (80091c0 <sync_fs+0xd4>)
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fd57 	bl	8008bf0 <st_dword>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3334      	adds	r3, #52	; 0x34
 8009146:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800914a:	491e      	ldr	r1, [pc, #120]	; (80091c4 <sync_fs+0xd8>)
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff fd4f 	bl	8008bf0 <st_dword>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3334      	adds	r3, #52	; 0x34
 8009156:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	4619      	mov	r1, r3
 8009160:	4610      	mov	r0, r2
 8009162:	f7ff fd45 	bl	8008bf0 <st_dword>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3334      	adds	r3, #52	; 0x34
 800916a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7ff fd3b 	bl	8008bf0 <st_dword>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	631a      	str	r2, [r3, #48]	; 0x30
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7858      	ldrb	r0, [r3, #1]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009192:	2301      	movs	r3, #1
 8009194:	f7ff fc98 	bl	8008ac8 <disk_write>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	711a      	strb	r2, [r3, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	2200      	movs	r2, #0
 80091a4:	2100      	movs	r1, #0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fcae 	bl	8008b08 <disk_ioctl>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <sync_fs+0xca>
 80091b2:	2301      	movs	r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	41615252 	.word	0x41615252
 80091c4:	61417272 	.word	0x61417272

080091c8 <clust2sect>:
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	3b02      	subs	r3, #2
 80091d6:	603b      	str	r3, [r7, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	3b02      	subs	r3, #2
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d301      	bcc.n	80091e8 <clust2sect+0x20>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e008      	b.n	80091fa <clust2sect+0x32>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	895b      	ldrh	r3, [r3, #10]
 80091ec:	461a      	mov	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	fb03 f202 	mul.w	r2, r3, r2
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	4413      	add	r3, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <get_fat>:
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d904      	bls.n	8009226 <get_fat+0x20>
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d302      	bcc.n	800922c <get_fat+0x26>
 8009226:	2301      	movs	r3, #1
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e08f      	b.n	800934c <get_fat+0x146>
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d062      	beq.n	8009300 <get_fat+0xfa>
 800923a:	2b03      	cmp	r3, #3
 800923c:	dc7c      	bgt.n	8009338 <get_fat+0x132>
 800923e:	2b01      	cmp	r3, #1
 8009240:	d002      	beq.n	8009248 <get_fat+0x42>
 8009242:	2b02      	cmp	r3, #2
 8009244:	d042      	beq.n	80092cc <get_fat+0xc6>
 8009246:	e077      	b.n	8009338 <get_fat+0x132>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	085b      	lsrs	r3, r3, #1
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	0a5b      	lsrs	r3, r3, #9
 800925e:	4413      	add	r3, r2
 8009260:	4619      	mov	r1, r3
 8009262:	6938      	ldr	r0, [r7, #16]
 8009264:	f7ff ff14 	bl	8009090 <move_window>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d167      	bne.n	800933e <get_fat+0x138>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	60fa      	str	r2, [r7, #12]
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4413      	add	r3, r2
 800927c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	0a5b      	lsrs	r3, r3, #9
 800928a:	4413      	add	r3, r2
 800928c:	4619      	mov	r1, r3
 800928e:	6938      	ldr	r0, [r7, #16]
 8009290:	f7ff fefe 	bl	8009090 <move_window>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d153      	bne.n	8009342 <get_fat+0x13c>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4413      	add	r3, r2
 80092a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092a8:	021b      	lsls	r3, r3, #8
 80092aa:	461a      	mov	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <get_fat+0xbc>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	e002      	b.n	80092c8 <get_fat+0xc2>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e03f      	b.n	800934c <get_fat+0x146>
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	4413      	add	r3, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	6938      	ldr	r0, [r7, #16]
 80092da:	f7ff fed9 	bl	8009090 <move_window>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d130      	bne.n	8009346 <get_fat+0x140>
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80092f2:	4413      	add	r3, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fc25 	bl	8008b44 <ld_word>
 80092fa:	4603      	mov	r3, r0
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e025      	b.n	800934c <get_fat+0x146>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	09db      	lsrs	r3, r3, #7
 8009308:	4413      	add	r3, r2
 800930a:	4619      	mov	r1, r3
 800930c:	6938      	ldr	r0, [r7, #16]
 800930e:	f7ff febf 	bl	8009090 <move_window>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d118      	bne.n	800934a <get_fat+0x144>
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009326:	4413      	add	r3, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fc23 	bl	8008b74 <ld_dword>
 800932e:	4603      	mov	r3, r0
 8009330:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e009      	b.n	800934c <get_fat+0x146>
 8009338:	2301      	movs	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	e006      	b.n	800934c <get_fat+0x146>
 800933e:	bf00      	nop
 8009340:	e004      	b.n	800934c <get_fat+0x146>
 8009342:	bf00      	nop
 8009344:	e002      	b.n	800934c <get_fat+0x146>
 8009346:	bf00      	nop
 8009348:	e000      	b.n	800934c <get_fat+0x146>
 800934a:	bf00      	nop
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <put_fat>:
 8009356:	b590      	push	{r4, r7, lr}
 8009358:	b089      	sub	sp, #36	; 0x24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	2302      	movs	r3, #2
 8009364:	77fb      	strb	r3, [r7, #31]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b01      	cmp	r3, #1
 800936a:	f240 80d9 	bls.w	8009520 <put_fat+0x1ca>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	429a      	cmp	r2, r3
 8009376:	f080 80d3 	bcs.w	8009520 <put_fat+0x1ca>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	2b03      	cmp	r3, #3
 8009380:	f000 8096 	beq.w	80094b0 <put_fat+0x15a>
 8009384:	2b03      	cmp	r3, #3
 8009386:	f300 80cb 	bgt.w	8009520 <put_fat+0x1ca>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d002      	beq.n	8009394 <put_fat+0x3e>
 800938e:	2b02      	cmp	r3, #2
 8009390:	d06e      	beq.n	8009470 <put_fat+0x11a>
 8009392:	e0c5      	b.n	8009520 <put_fat+0x1ca>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	61bb      	str	r3, [r7, #24]
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	4413      	add	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	0a5b      	lsrs	r3, r3, #9
 80093aa:	4413      	add	r3, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fe6e 	bl	8009090 <move_window>
 80093b4:	4603      	mov	r3, r0
 80093b6:	77fb      	strb	r3, [r7, #31]
 80093b8:	7ffb      	ldrb	r3, [r7, #31]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 80a9 	bne.w	8009512 <put_fat+0x1bc>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	1c59      	adds	r1, r3, #1
 80093ca:	61b9      	str	r1, [r7, #24]
 80093cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d0:	4413      	add	r3, r2
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00d      	beq.n	80093fa <put_fat+0xa4>
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	b25b      	sxtb	r3, r3
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	b25a      	sxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	b25b      	sxtb	r3, r3
 80093f2:	4313      	orrs	r3, r2
 80093f4:	b25b      	sxtb	r3, r3
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	e001      	b.n	80093fe <put_fat+0xa8>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	7013      	strb	r3, [r2, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	70da      	strb	r2, [r3, #3]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	0a5b      	lsrs	r3, r3, #9
 8009410:	4413      	add	r3, r2
 8009412:	4619      	mov	r1, r3
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fe3b 	bl	8009090 <move_window>
 800941a:	4603      	mov	r3, r0
 800941c:	77fb      	strb	r3, [r7, #31]
 800941e:	7ffb      	ldrb	r3, [r7, #31]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d178      	bne.n	8009516 <put_fat+0x1c0>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009430:	4413      	add	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <put_fat+0xf0>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	091b      	lsrs	r3, r3, #4
 8009442:	b2db      	uxtb	r3, r3
 8009444:	e00e      	b.n	8009464 <put_fat+0x10e>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b25b      	sxtb	r3, r3
 800944c:	f023 030f 	bic.w	r3, r3, #15
 8009450:	b25a      	sxtb	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	b25b      	sxtb	r3, r3
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	b25b      	sxtb	r3, r3
 800945e:	4313      	orrs	r3, r2
 8009460:	b25b      	sxtb	r3, r3
 8009462:	b2db      	uxtb	r3, r3
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	7013      	strb	r3, [r2, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	70da      	strb	r2, [r3, #3]
 800946e:	e057      	b.n	8009520 <put_fat+0x1ca>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	0a1b      	lsrs	r3, r3, #8
 8009478:	4413      	add	r3, r2
 800947a:	4619      	mov	r1, r3
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff fe07 	bl	8009090 <move_window>
 8009482:	4603      	mov	r3, r0
 8009484:	77fb      	strb	r3, [r7, #31]
 8009486:	7ffb      	ldrb	r3, [r7, #31]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d146      	bne.n	800951a <put_fat+0x1c4>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800949a:	4413      	add	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	b292      	uxth	r2, r2
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fb89 	bl	8008bba <st_word>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2201      	movs	r2, #1
 80094ac:	70da      	strb	r2, [r3, #3]
 80094ae:	e037      	b.n	8009520 <put_fat+0x1ca>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	09db      	lsrs	r3, r3, #7
 80094b8:	4413      	add	r3, r2
 80094ba:	4619      	mov	r1, r3
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fde7 	bl	8009090 <move_window>
 80094c2:	4603      	mov	r3, r0
 80094c4:	77fb      	strb	r3, [r7, #31]
 80094c6:	7ffb      	ldrb	r3, [r7, #31]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d128      	bne.n	800951e <put_fat+0x1c8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80094e0:	4413      	add	r3, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff fb46 	bl	8008b74 <ld_dword>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80094ee:	4323      	orrs	r3, r4
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009500:	4413      	add	r3, r2
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff fb73 	bl	8008bf0 <st_dword>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	70da      	strb	r2, [r3, #3]
 8009510:	e006      	b.n	8009520 <put_fat+0x1ca>
 8009512:	bf00      	nop
 8009514:	e004      	b.n	8009520 <put_fat+0x1ca>
 8009516:	bf00      	nop
 8009518:	e002      	b.n	8009520 <put_fat+0x1ca>
 800951a:	bf00      	nop
 800951c:	e000      	b.n	8009520 <put_fat+0x1ca>
 800951e:	bf00      	nop
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	4618      	mov	r0, r3
 8009524:	3724      	adds	r7, #36	; 0x24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd90      	pop	{r4, r7, pc}

0800952a <remove_chain>:
 800952a:	b580      	push	{r7, lr}
 800952c:	b088      	sub	sp, #32
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	2300      	movs	r3, #0
 8009538:	77fb      	strb	r3, [r7, #31]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d904      	bls.n	8009550 <remove_chain+0x26>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	d301      	bcc.n	8009554 <remove_chain+0x2a>
 8009550:	2302      	movs	r3, #2
 8009552:	e04b      	b.n	80095ec <remove_chain+0xc2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00c      	beq.n	8009574 <remove_chain+0x4a>
 800955a:	f04f 32ff 	mov.w	r2, #4294967295
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	69b8      	ldr	r0, [r7, #24]
 8009562:	f7ff fef8 	bl	8009356 <put_fat>
 8009566:	4603      	mov	r3, r0
 8009568:	77fb      	strb	r3, [r7, #31]
 800956a:	7ffb      	ldrb	r3, [r7, #31]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <remove_chain+0x4a>
 8009570:	7ffb      	ldrb	r3, [r7, #31]
 8009572:	e03b      	b.n	80095ec <remove_chain+0xc2>
 8009574:	68b9      	ldr	r1, [r7, #8]
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff fe45 	bl	8009206 <get_fat>
 800957c:	6178      	str	r0, [r7, #20]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d031      	beq.n	80095e8 <remove_chain+0xbe>
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d101      	bne.n	800958e <remove_chain+0x64>
 800958a:	2302      	movs	r3, #2
 800958c:	e02e      	b.n	80095ec <remove_chain+0xc2>
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d101      	bne.n	800959a <remove_chain+0x70>
 8009596:	2301      	movs	r3, #1
 8009598:	e028      	b.n	80095ec <remove_chain+0xc2>
 800959a:	2200      	movs	r2, #0
 800959c:	68b9      	ldr	r1, [r7, #8]
 800959e:	69b8      	ldr	r0, [r7, #24]
 80095a0:	f7ff fed9 	bl	8009356 <put_fat>
 80095a4:	4603      	mov	r3, r0
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	7ffb      	ldrb	r3, [r7, #31]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <remove_chain+0x88>
 80095ae:	7ffb      	ldrb	r3, [r7, #31]
 80095b0:	e01c      	b.n	80095ec <remove_chain+0xc2>
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	695a      	ldr	r2, [r3, #20]
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	3b02      	subs	r3, #2
 80095bc:	429a      	cmp	r2, r3
 80095be:	d20b      	bcs.n	80095d8 <remove_chain+0xae>
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	615a      	str	r2, [r3, #20]
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	791b      	ldrb	r3, [r3, #4]
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	711a      	strb	r2, [r3, #4]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	60bb      	str	r3, [r7, #8]
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3c6      	bcc.n	8009574 <remove_chain+0x4a>
 80095e6:	e000      	b.n	80095ea <remove_chain+0xc0>
 80095e8:	bf00      	nop
 80095ea:	2300      	movs	r3, #0
 80095ec:	4618      	mov	r0, r3
 80095ee:	3720      	adds	r7, #32
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <create_chain>:
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <create_chain+0x32>
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <create_chain+0x2c>
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	d31b      	bcc.n	8009658 <create_chain+0x64>
 8009620:	2301      	movs	r3, #1
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	e018      	b.n	8009658 <create_chain+0x64>
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fdec 	bl	8009206 <get_fat>
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d801      	bhi.n	800963a <create_chain+0x46>
 8009636:	2301      	movs	r3, #1
 8009638:	e070      	b.n	800971c <create_chain+0x128>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009640:	d101      	bne.n	8009646 <create_chain+0x52>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	e06a      	b.n	800971c <create_chain+0x128>
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	429a      	cmp	r2, r3
 800964e:	d201      	bcs.n	8009654 <create_chain+0x60>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	e063      	b.n	800971c <create_chain+0x128>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	61bb      	str	r3, [r7, #24]
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	61fb      	str	r3, [r7, #28]
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3301      	adds	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	429a      	cmp	r2, r3
 800966a:	d307      	bcc.n	800967c <create_chain+0x88>
 800966c:	2302      	movs	r3, #2
 800966e:	61fb      	str	r3, [r7, #28]
 8009670:	69fa      	ldr	r2, [r7, #28]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d901      	bls.n	800967c <create_chain+0x88>
 8009678:	2300      	movs	r3, #0
 800967a:	e04f      	b.n	800971c <create_chain+0x128>
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff fdc1 	bl	8009206 <get_fat>
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00e      	beq.n	80096aa <create_chain+0xb6>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d003      	beq.n	800969a <create_chain+0xa6>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d101      	bne.n	800969e <create_chain+0xaa>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	e03e      	b.n	800971c <create_chain+0x128>
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d1da      	bne.n	800965c <create_chain+0x68>
 80096a6:	2300      	movs	r3, #0
 80096a8:	e038      	b.n	800971c <create_chain+0x128>
 80096aa:	bf00      	nop
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	6938      	ldr	r0, [r7, #16]
 80096b4:	f7ff fe4f 	bl	8009356 <put_fat>
 80096b8:	4603      	mov	r3, r0
 80096ba:	75fb      	strb	r3, [r7, #23]
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <create_chain+0xe2>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <create_chain+0xe2>
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f7ff fe42 	bl	8009356 <put_fat>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d116      	bne.n	800970a <create_chain+0x116>
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	611a      	str	r2, [r3, #16]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	695a      	ldr	r2, [r3, #20]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	3b02      	subs	r3, #2
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d804      	bhi.n	80096fa <create_chain+0x106>
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	1e5a      	subs	r2, r3, #1
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	615a      	str	r2, [r3, #20]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	b2da      	uxtb	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	711a      	strb	r2, [r3, #4]
 8009708:	e007      	b.n	800971a <create_chain+0x126>
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d102      	bne.n	8009716 <create_chain+0x122>
 8009710:	f04f 33ff 	mov.w	r3, #4294967295
 8009714:	e000      	b.n	8009718 <create_chain+0x124>
 8009716:	2301      	movs	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <clmt_clust>:
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	3304      	adds	r3, #4
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	0a5b      	lsrs	r3, r3, #9
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	8952      	ldrh	r2, [r2, #10]
 8009744:	fbb3 f3f2 	udiv	r3, r3, r2
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	1d1a      	adds	r2, r3, #4
 800974e:	613a      	str	r2, [r7, #16]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60bb      	str	r3, [r7, #8]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <clmt_clust+0x3a>
 800975a:	2300      	movs	r3, #0
 800975c:	e010      	b.n	8009780 <clmt_clust+0x5c>
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	429a      	cmp	r2, r3
 8009764:	d307      	bcc.n	8009776 <clmt_clust+0x52>
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3304      	adds	r3, #4
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	e7e9      	b.n	800974a <clmt_clust+0x26>
 8009776:	bf00      	nop
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	4413      	add	r3, r2
 8009780:	4618      	mov	r0, r3
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <dir_sdi>:
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097a2:	d204      	bcs.n	80097ae <dir_sdi+0x22>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <dir_sdi+0x26>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e063      	b.n	800987a <dir_sdi+0xee>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	615a      	str	r2, [r3, #20]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <dir_sdi+0x46>
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d902      	bls.n	80097d2 <dir_sdi+0x46>
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10c      	bne.n	80097f2 <dir_sdi+0x66>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	8912      	ldrh	r2, [r2, #8]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d301      	bcc.n	80097e8 <dir_sdi+0x5c>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e048      	b.n	800987a <dir_sdi+0xee>
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	61da      	str	r2, [r3, #28]
 80097f0:	e029      	b.n	8009846 <dir_sdi+0xba>
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	895b      	ldrh	r3, [r3, #10]
 80097f6:	025b      	lsls	r3, r3, #9
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	e019      	b.n	8009830 <dir_sdi+0xa4>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6979      	ldr	r1, [r7, #20]
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fd00 	bl	8009206 <get_fat>
 8009806:	6178      	str	r0, [r7, #20]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d101      	bne.n	8009814 <dir_sdi+0x88>
 8009810:	2301      	movs	r3, #1
 8009812:	e032      	b.n	800987a <dir_sdi+0xee>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d904      	bls.n	8009824 <dir_sdi+0x98>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	429a      	cmp	r2, r3
 8009822:	d301      	bcc.n	8009828 <dir_sdi+0x9c>
 8009824:	2302      	movs	r3, #2
 8009826:	e028      	b.n	800987a <dir_sdi+0xee>
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	429a      	cmp	r2, r3
 8009836:	d2e1      	bcs.n	80097fc <dir_sdi+0x70>
 8009838:	6979      	ldr	r1, [r7, #20]
 800983a:	6938      	ldr	r0, [r7, #16]
 800983c:	f7ff fcc4 	bl	80091c8 <clust2sect>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	61da      	str	r2, [r3, #28]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	619a      	str	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <dir_sdi+0xcc>
 8009854:	2302      	movs	r3, #2
 8009856:	e010      	b.n	800987a <dir_sdi+0xee>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	0a5b      	lsrs	r3, r3, #9
 8009860:	441a      	add	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	61da      	str	r2, [r3, #28]
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009872:	441a      	add	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	621a      	str	r2, [r3, #32]
 8009878:	2300      	movs	r3, #0
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <dir_next>:
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	3320      	adds	r3, #32
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <dir_next+0x28>
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098a8:	d301      	bcc.n	80098ae <dir_next+0x2c>
 80098aa:	2304      	movs	r3, #4
 80098ac:	e0aa      	b.n	8009a04 <dir_next+0x182>
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8098 	bne.w	80099ea <dir_next+0x168>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	61da      	str	r2, [r3, #28]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <dir_next+0x62>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	8912      	ldrh	r2, [r2, #8]
 80098d4:	4293      	cmp	r3, r2
 80098d6:	f0c0 8088 	bcc.w	80099ea <dir_next+0x168>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	61da      	str	r2, [r3, #28]
 80098e0:	2304      	movs	r3, #4
 80098e2:	e08f      	b.n	8009a04 <dir_next+0x182>
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	0a5b      	lsrs	r3, r3, #9
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	8952      	ldrh	r2, [r2, #10]
 80098ec:	3a01      	subs	r2, #1
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d17a      	bne.n	80099ea <dir_next+0x168>
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7ff fc82 	bl	8009206 <get_fat>
 8009902:	6178      	str	r0, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d801      	bhi.n	800990e <dir_next+0x8c>
 800990a:	2302      	movs	r3, #2
 800990c:	e07a      	b.n	8009a04 <dir_next+0x182>
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d101      	bne.n	800991a <dir_next+0x98>
 8009916:	2301      	movs	r3, #1
 8009918:	e074      	b.n	8009a04 <dir_next+0x182>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	429a      	cmp	r2, r3
 8009922:	d358      	bcc.n	80099d6 <dir_next+0x154>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d104      	bne.n	8009934 <dir_next+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	61da      	str	r2, [r3, #28]
 8009930:	2304      	movs	r3, #4
 8009932:	e067      	b.n	8009a04 <dir_next+0x182>
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7ff fe59 	bl	80095f4 <create_chain>
 8009942:	6178      	str	r0, [r7, #20]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <dir_next+0xcc>
 800994a:	2307      	movs	r3, #7
 800994c:	e05a      	b.n	8009a04 <dir_next+0x182>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d101      	bne.n	8009958 <dir_next+0xd6>
 8009954:	2302      	movs	r3, #2
 8009956:	e055      	b.n	8009a04 <dir_next+0x182>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d101      	bne.n	8009964 <dir_next+0xe2>
 8009960:	2301      	movs	r3, #1
 8009962:	e04f      	b.n	8009a04 <dir_next+0x182>
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fb4f 	bl	8009008 <sync_window>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <dir_next+0xf2>
 8009970:	2301      	movs	r3, #1
 8009972:	e047      	b.n	8009a04 <dir_next+0x182>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3334      	adds	r3, #52	; 0x34
 8009978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800997c:	2100      	movs	r1, #0
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff f983 	bl	8008c8a <mem_set>
 8009984:	2300      	movs	r3, #0
 8009986:	613b      	str	r3, [r7, #16]
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fc1c 	bl	80091c8 <clust2sect>
 8009990:	4602      	mov	r2, r0
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
 8009996:	e012      	b.n	80099be <dir_next+0x13c>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2201      	movs	r2, #1
 800999c:	70da      	strb	r2, [r3, #3]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff fb32 	bl	8009008 <sync_window>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <dir_next+0x12c>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e02a      	b.n	8009a04 <dir_next+0x182>
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	3301      	adds	r3, #1
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	631a      	str	r2, [r3, #48]	; 0x30
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	895b      	ldrh	r3, [r3, #10]
 80099c2:	461a      	mov	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d3e6      	bcc.n	8009998 <dir_next+0x116>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	1ad2      	subs	r2, r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	631a      	str	r2, [r3, #48]	; 0x30
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	619a      	str	r2, [r3, #24]
 80099dc:	6979      	ldr	r1, [r7, #20]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7ff fbf2 	bl	80091c8 <clust2sect>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	61da      	str	r2, [r3, #28]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	615a      	str	r2, [r3, #20]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fc:	441a      	add	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	621a      	str	r2, [r3, #32]
 8009a02:	2300      	movs	r3, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <dir_alloc>:
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff feb4 	bl	800978c <dir_sdi>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d12b      	bne.n	8009a86 <dir_alloc+0x7a>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	4619      	mov	r1, r3
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff fb29 	bl	8009090 <move_window>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	75fb      	strb	r3, [r7, #23]
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d11d      	bne.n	8009a84 <dir_alloc+0x78>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	2be5      	cmp	r3, #229	; 0xe5
 8009a50:	d004      	beq.n	8009a5c <dir_alloc+0x50>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d107      	bne.n	8009a6c <dir_alloc+0x60>
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	613b      	str	r3, [r7, #16]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d102      	bne.n	8009a70 <dir_alloc+0x64>
 8009a6a:	e00c      	b.n	8009a86 <dir_alloc+0x7a>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	2101      	movs	r1, #1
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff ff05 	bl	8009882 <dir_next>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0d7      	beq.n	8009a32 <dir_alloc+0x26>
 8009a82:	e000      	b.n	8009a86 <dir_alloc+0x7a>
 8009a84:	bf00      	nop
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d101      	bne.n	8009a90 <dir_alloc+0x84>
 8009a8c:	2307      	movs	r3, #7
 8009a8e:	75fb      	strb	r3, [r7, #23]
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <ld_clust>:
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	331a      	adds	r3, #26
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff f84b 	bl	8008b44 <ld_word>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d109      	bne.n	8009ace <ld_clust+0x34>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	3314      	adds	r3, #20
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff f840 	bl	8008b44 <ld_word>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	041b      	lsls	r3, r3, #16
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <st_clust>:
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	331a      	adds	r3, #26
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	b292      	uxth	r2, r2
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff f863 	bl	8008bba <st_word>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d109      	bne.n	8009b10 <st_clust+0x38>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f103 0214 	add.w	r2, r3, #20
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0c1b      	lsrs	r3, r3, #16
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7ff f855 	bl	8008bba <st_word>
 8009b10:	bf00      	nop
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <dir_find>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	2100      	movs	r1, #0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fe2f 	bl	800978c <dir_sdi>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75fb      	strb	r3, [r7, #23]
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <dir_find+0x24>
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	e03e      	b.n	8009bba <dir_find+0xa2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6938      	ldr	r0, [r7, #16]
 8009b44:	f7ff faa4 	bl	8009090 <move_window>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d12f      	bne.n	8009bb2 <dir_find+0x9a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	73fb      	strb	r3, [r7, #15]
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <dir_find+0x4e>
 8009b60:	2304      	movs	r3, #4
 8009b62:	75fb      	strb	r3, [r7, #23]
 8009b64:	e028      	b.n	8009bb8 <dir_find+0xa0>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	330b      	adds	r3, #11
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	719a      	strb	r2, [r3, #6]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	330b      	adds	r3, #11
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0308 	and.w	r3, r3, #8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <dir_find+0x86>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a18      	ldr	r0, [r3, #32]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3324      	adds	r3, #36	; 0x24
 8009b90:	220b      	movs	r2, #11
 8009b92:	4619      	mov	r1, r3
 8009b94:	f7ff f894 	bl	8008cc0 <mem_cmp>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <dir_find+0x9e>
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff fe6e 	bl	8009882 <dir_next>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75fb      	strb	r3, [r7, #23]
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0c5      	beq.n	8009b3c <dir_find+0x24>
 8009bb0:	e002      	b.n	8009bb8 <dir_find+0xa0>
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <dir_find+0xa0>
 8009bb6:	bf00      	nop
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <dir_register>:
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff ff1a 	bl	8009a0c <dir_alloc>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d11c      	bne.n	8009c1c <dir_register+0x5a>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	4619      	mov	r1, r3
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f7ff fa51 	bl	8009090 <move_window>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73fb      	strb	r3, [r7, #15]
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d111      	bne.n	8009c1c <dir_register+0x5a>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff f842 	bl	8008c8a <mem_set>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a18      	ldr	r0, [r3, #32]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3324      	adds	r3, #36	; 0x24
 8009c0e:	220b      	movs	r2, #11
 8009c10:	4619      	mov	r1, r3
 8009c12:	f7ff f819 	bl	8008c48 <mem_cpy>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	70da      	strb	r2, [r3, #3]
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <get_fileinfo>:
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2200      	movs	r2, #0
 8009c34:	725a      	strb	r2, [r3, #9]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d04e      	beq.n	8009cdc <get_fileinfo+0xb6>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	e021      	b.n	8009c8c <get_fileinfo+0x66>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	1c59      	adds	r1, r3, #1
 8009c50:	6179      	str	r1, [r7, #20]
 8009c52:	4413      	add	r3, r2
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	73fb      	strb	r3, [r7, #15]
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	d100      	bne.n	8009c60 <get_fileinfo+0x3a>
 8009c5e:	e015      	b.n	8009c8c <get_fileinfo+0x66>
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	d101      	bne.n	8009c6a <get_fileinfo+0x44>
 8009c66:	23e5      	movs	r3, #229	; 0xe5
 8009c68:	73fb      	strb	r3, [r7, #15]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d106      	bne.n	8009c7e <get_fileinfo+0x58>
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	613a      	str	r2, [r7, #16]
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4413      	add	r3, r2
 8009c7a:	222e      	movs	r2, #46	; 0x2e
 8009c7c:	725a      	strb	r2, [r3, #9]
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	613a      	str	r2, [r7, #16]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	4413      	add	r3, r2
 8009c88:	7bfa      	ldrb	r2, [r7, #15]
 8009c8a:	725a      	strb	r2, [r3, #9]
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b0a      	cmp	r3, #10
 8009c90:	d9da      	bls.n	8009c48 <get_fileinfo+0x22>
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	4413      	add	r3, r2
 8009c98:	3309      	adds	r3, #9
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	7ada      	ldrb	r2, [r3, #11]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	721a      	strb	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	331c      	adds	r3, #28
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe ff60 	bl	8008b74 <ld_dword>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	3316      	adds	r3, #22
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe ff57 	bl	8008b74 <ld_dword>
 8009cc6:	60b8      	str	r0, [r7, #8]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	80da      	strh	r2, [r3, #6]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	0c1b      	lsrs	r3, r3, #16
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	809a      	strh	r2, [r3, #4]
 8009cda:	e000      	b.n	8009cde <get_fileinfo+0xb8>
 8009cdc:	bf00      	nop
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <create_name>:
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3324      	adds	r3, #36	; 0x24
 8009cf8:	60bb      	str	r3, [r7, #8]
 8009cfa:	220b      	movs	r2, #11
 8009cfc:	2120      	movs	r1, #32
 8009cfe:	68b8      	ldr	r0, [r7, #8]
 8009d00:	f7fe ffc3 	bl	8008c8a <mem_set>
 8009d04:	2300      	movs	r3, #0
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	61fa      	str	r2, [r7, #28]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	76fb      	strb	r3, [r7, #27]
 8009d1e:	7efb      	ldrb	r3, [r7, #27]
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	d94e      	bls.n	8009dc2 <create_name+0xde>
 8009d24:	7efb      	ldrb	r3, [r7, #27]
 8009d26:	2b2f      	cmp	r3, #47	; 0x2f
 8009d28:	d006      	beq.n	8009d38 <create_name+0x54>
 8009d2a:	7efb      	ldrb	r3, [r7, #27]
 8009d2c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d2e:	d110      	bne.n	8009d52 <create_name+0x6e>
 8009d30:	e002      	b.n	8009d38 <create_name+0x54>
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	3301      	adds	r3, #1
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b2f      	cmp	r3, #47	; 0x2f
 8009d42:	d0f6      	beq.n	8009d32 <create_name+0x4e>
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	4413      	add	r3, r2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d4e:	d0f0      	beq.n	8009d32 <create_name+0x4e>
 8009d50:	e038      	b.n	8009dc4 <create_name+0xe0>
 8009d52:	7efb      	ldrb	r3, [r7, #27]
 8009d54:	2b2e      	cmp	r3, #46	; 0x2e
 8009d56:	d003      	beq.n	8009d60 <create_name+0x7c>
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d30c      	bcc.n	8009d7a <create_name+0x96>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2b0b      	cmp	r3, #11
 8009d64:	d002      	beq.n	8009d6c <create_name+0x88>
 8009d66:	7efb      	ldrb	r3, [r7, #27]
 8009d68:	2b2e      	cmp	r3, #46	; 0x2e
 8009d6a:	d001      	beq.n	8009d70 <create_name+0x8c>
 8009d6c:	2306      	movs	r3, #6
 8009d6e:	e044      	b.n	8009dfa <create_name+0x116>
 8009d70:	2308      	movs	r3, #8
 8009d72:	613b      	str	r3, [r7, #16]
 8009d74:	230b      	movs	r3, #11
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e022      	b.n	8009dc0 <create_name+0xdc>
 8009d7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da04      	bge.n	8009d8c <create_name+0xa8>
 8009d82:	7efb      	ldrb	r3, [r7, #27]
 8009d84:	3b80      	subs	r3, #128	; 0x80
 8009d86:	4a1f      	ldr	r2, [pc, #124]	; (8009e04 <create_name+0x120>)
 8009d88:	5cd3      	ldrb	r3, [r2, r3]
 8009d8a:	76fb      	strb	r3, [r7, #27]
 8009d8c:	7efb      	ldrb	r3, [r7, #27]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	481d      	ldr	r0, [pc, #116]	; (8009e08 <create_name+0x124>)
 8009d92:	f7fe ffbc 	bl	8008d0e <chk_chr>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <create_name+0xbc>
 8009d9c:	2306      	movs	r3, #6
 8009d9e:	e02c      	b.n	8009dfa <create_name+0x116>
 8009da0:	7efb      	ldrb	r3, [r7, #27]
 8009da2:	2b60      	cmp	r3, #96	; 0x60
 8009da4:	d905      	bls.n	8009db2 <create_name+0xce>
 8009da6:	7efb      	ldrb	r3, [r7, #27]
 8009da8:	2b7a      	cmp	r3, #122	; 0x7a
 8009daa:	d802      	bhi.n	8009db2 <create_name+0xce>
 8009dac:	7efb      	ldrb	r3, [r7, #27]
 8009dae:	3b20      	subs	r3, #32
 8009db0:	76fb      	strb	r3, [r7, #27]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	613a      	str	r2, [r7, #16]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4413      	add	r3, r2
 8009dbc:	7efa      	ldrb	r2, [r7, #27]
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e7a6      	b.n	8009d10 <create_name+0x2c>
 8009dc2:	bf00      	nop
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	441a      	add	r2, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <create_name+0xf4>
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	e010      	b.n	8009dfa <create_name+0x116>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2be5      	cmp	r3, #229	; 0xe5
 8009dde:	d102      	bne.n	8009de6 <create_name+0x102>
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2205      	movs	r2, #5
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	7efb      	ldrb	r3, [r7, #27]
 8009de8:	2b20      	cmp	r3, #32
 8009dea:	d801      	bhi.n	8009df0 <create_name+0x10c>
 8009dec:	2204      	movs	r2, #4
 8009dee:	e000      	b.n	8009df2 <create_name+0x10e>
 8009df0:	2200      	movs	r2, #0
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	330b      	adds	r3, #11
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3720      	adds	r7, #32
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	08011dc4 	.word	0x08011dc4
 8009e08:	08011d48 	.word	0x08011d48

08009e0c <follow_path>:
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	e002      	b.n	8009e28 <follow_path+0x1c>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e2e:	d0f8      	beq.n	8009e22 <follow_path+0x16>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	2b5c      	cmp	r3, #92	; 0x5c
 8009e36:	d0f4      	beq.n	8009e22 <follow_path+0x16>
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	609a      	str	r2, [r3, #8]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2b1f      	cmp	r3, #31
 8009e44:	d80a      	bhi.n	8009e5c <follow_path+0x50>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2280      	movs	r2, #128	; 0x80
 8009e4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fc9b 	bl	800978c <dir_sdi>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]
 8009e5a:	e043      	b.n	8009ee4 <follow_path+0xd8>
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ff3f 	bl	8009ce4 <create_name>
 8009e66:	4603      	mov	r3, r0
 8009e68:	75fb      	strb	r3, [r7, #23]
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d134      	bne.n	8009eda <follow_path+0xce>
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff fe51 	bl	8009b18 <dir_find>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e80:	72fb      	strb	r3, [r7, #11]
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <follow_path+0x92>
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d127      	bne.n	8009ede <follow_path+0xd2>
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d122      	bne.n	8009ede <follow_path+0xd2>
 8009e98:	2305      	movs	r3, #5
 8009e9a:	75fb      	strb	r3, [r7, #23]
 8009e9c:	e01f      	b.n	8009ede <follow_path+0xd2>
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11c      	bne.n	8009ee2 <follow_path+0xd6>
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	799b      	ldrb	r3, [r3, #6]
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <follow_path+0xae>
 8009eb4:	2305      	movs	r3, #5
 8009eb6:	75fb      	strb	r3, [r7, #23]
 8009eb8:	e014      	b.n	8009ee4 <follow_path+0xd8>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec8:	4413      	add	r3, r2
 8009eca:	4619      	mov	r1, r3
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f7ff fde4 	bl	8009a9a <ld_clust>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	609a      	str	r2, [r3, #8]
 8009ed8:	e7c0      	b.n	8009e5c <follow_path+0x50>
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <follow_path+0xd8>
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <follow_path+0xd8>
 8009ee2:	bf00      	nop
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <get_ldnumber>:
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d031      	beq.n	8009f68 <get_ldnumber+0x7a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e002      	b.n	8009f12 <get_ldnumber+0x24>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b20      	cmp	r3, #32
 8009f18:	d903      	bls.n	8009f22 <get_ldnumber+0x34>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b3a      	cmp	r3, #58	; 0x3a
 8009f20:	d1f4      	bne.n	8009f0c <get_ldnumber+0x1e>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b3a      	cmp	r3, #58	; 0x3a
 8009f28:	d11c      	bne.n	8009f64 <get_ldnumber+0x76>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	60fa      	str	r2, [r7, #12]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	3b30      	subs	r3, #48	; 0x30
 8009f3a:	60bb      	str	r3, [r7, #8]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d80e      	bhi.n	8009f60 <get_ldnumber+0x72>
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d10a      	bne.n	8009f60 <get_ldnumber+0x72>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d107      	bne.n	8009f60 <get_ldnumber+0x72>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	e002      	b.n	8009f6a <get_ldnumber+0x7c>
 8009f64:	2300      	movs	r3, #0
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
	...

08009f78 <check_fs>:
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	70da      	strb	r2, [r3, #3]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff f87c 	bl	8009090 <move_window>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <check_fs+0x2a>
 8009f9e:	2304      	movs	r3, #4
 8009fa0:	e038      	b.n	800a014 <check_fs+0x9c>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3334      	adds	r3, #52	; 0x34
 8009fa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fdca 	bl	8008b44 <ld_word>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d001      	beq.n	8009fc0 <check_fs+0x48>
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e029      	b.n	800a014 <check_fs+0x9c>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fc6:	2be9      	cmp	r3, #233	; 0xe9
 8009fc8:	d009      	beq.n	8009fde <check_fs+0x66>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fd0:	2beb      	cmp	r3, #235	; 0xeb
 8009fd2:	d11e      	bne.n	800a012 <check_fs+0x9a>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009fda:	2b90      	cmp	r3, #144	; 0x90
 8009fdc:	d119      	bne.n	800a012 <check_fs+0x9a>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3334      	adds	r3, #52	; 0x34
 8009fe2:	3336      	adds	r3, #54	; 0x36
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fdc5 	bl	8008b74 <ld_dword>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ff0:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <check_fs+0xa4>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d101      	bne.n	8009ffa <check_fs+0x82>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e00c      	b.n	800a014 <check_fs+0x9c>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3334      	adds	r3, #52	; 0x34
 8009ffe:	3352      	adds	r3, #82	; 0x52
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fdb7 	bl	8008b74 <ld_dword>
 800a006:	4603      	mov	r3, r0
 800a008:	4a05      	ldr	r2, [pc, #20]	; (800a020 <check_fs+0xa8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d101      	bne.n	800a012 <check_fs+0x9a>
 800a00e:	2300      	movs	r3, #0
 800a010:	e000      	b.n	800a014 <check_fs+0x9c>
 800a012:	2302      	movs	r3, #2
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	00544146 	.word	0x00544146
 800a020:	33544146 	.word	0x33544146

0800a024 <find_volume>:
 800a024:	b580      	push	{r7, lr}
 800a026:	b096      	sub	sp, #88	; 0x58
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff ff58 	bl	8009eee <get_ldnumber>
 800a03e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	da01      	bge.n	800a04a <find_volume+0x26>
 800a046:	230b      	movs	r3, #11
 800a048:	e235      	b.n	800a4b6 <find_volume+0x492>
 800a04a:	4aa5      	ldr	r2, [pc, #660]	; (800a2e0 <find_volume+0x2bc>)
 800a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a052:	63bb      	str	r3, [r7, #56]	; 0x38
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <find_volume+0x3a>
 800a05a:	230c      	movs	r3, #12
 800a05c:	e22b      	b.n	800a4b6 <find_volume+0x492>
 800a05e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a060:	f7fe fe70 	bl	8008d44 <lock_fs>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <find_volume+0x4a>
 800a06a:	230f      	movs	r3, #15
 800a06c:	e223      	b.n	800a4b6 <find_volume+0x492>
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	f023 0301 	bic.w	r3, r3, #1
 800a07a:	71fb      	strb	r3, [r7, #7]
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01a      	beq.n	800a0ba <find_volume+0x96>
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fcbd 	bl	8008a08 <disk_status>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10c      	bne.n	800a0ba <find_volume+0x96>
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <find_volume+0x92>
 800a0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <find_volume+0x92>
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	e1ff      	b.n	800a4b6 <find_volume+0x492>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e1fd      	b.n	800a4b6 <find_volume+0x492>
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	2200      	movs	r2, #0
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	705a      	strb	r2, [r3, #1]
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	785b      	ldrb	r3, [r3, #1]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fcb5 	bl	8008a3c <disk_initialize>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <find_volume+0xc4>
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e1e6      	b.n	800a4b6 <find_volume+0x492>
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d007      	beq.n	800a0fe <find_volume+0xda>
 800a0ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0f2:	f003 0304 	and.w	r3, r3, #4
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <find_volume+0xda>
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	e1db      	b.n	800a4b6 <find_volume+0x492>
 800a0fe:	2300      	movs	r3, #0
 800a100:	653b      	str	r3, [r7, #80]	; 0x50
 800a102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a106:	f7ff ff37 	bl	8009f78 <check_fs>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a114:	2b02      	cmp	r3, #2
 800a116:	d149      	bne.n	800a1ac <find_volume+0x188>
 800a118:	2300      	movs	r3, #0
 800a11a:	643b      	str	r3, [r7, #64]	; 0x40
 800a11c:	e01e      	b.n	800a15c <find_volume+0x138>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a126:	011b      	lsls	r3, r3, #4
 800a128:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a12c:	4413      	add	r3, r2
 800a12e:	633b      	str	r3, [r7, #48]	; 0x30
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	3304      	adds	r3, #4
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d006      	beq.n	800a148 <find_volume+0x124>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	3308      	adds	r3, #8
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fd18 	bl	8008b74 <ld_dword>
 800a144:	4602      	mov	r2, r0
 800a146:	e000      	b.n	800a14a <find_volume+0x126>
 800a148:	2200      	movs	r2, #0
 800a14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	3358      	adds	r3, #88	; 0x58
 800a150:	443b      	add	r3, r7
 800a152:	f843 2c44 	str.w	r2, [r3, #-68]
 800a156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a158:	3301      	adds	r3, #1
 800a15a:	643b      	str	r3, [r7, #64]	; 0x40
 800a15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d9dd      	bls.n	800a11e <find_volume+0xfa>
 800a162:	2300      	movs	r3, #0
 800a164:	643b      	str	r3, [r7, #64]	; 0x40
 800a166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <find_volume+0x14e>
 800a16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16e:	3b01      	subs	r3, #1
 800a170:	643b      	str	r3, [r7, #64]	; 0x40
 800a172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	3358      	adds	r3, #88	; 0x58
 800a178:	443b      	add	r3, r7
 800a17a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a17e:	653b      	str	r3, [r7, #80]	; 0x50
 800a180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <find_volume+0x16e>
 800a186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a18a:	f7ff fef5 	bl	8009f78 <check_fs>
 800a18e:	4603      	mov	r3, r0
 800a190:	e000      	b.n	800a194 <find_volume+0x170>
 800a192:	2303      	movs	r3, #3
 800a194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d905      	bls.n	800a1ac <find_volume+0x188>
 800a1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	d9e2      	bls.n	800a172 <find_volume+0x14e>
 800a1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d101      	bne.n	800a1b8 <find_volume+0x194>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e17e      	b.n	800a4b6 <find_volume+0x492>
 800a1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d901      	bls.n	800a1c4 <find_volume+0x1a0>
 800a1c0:	230d      	movs	r3, #13
 800a1c2:	e178      	b.n	800a4b6 <find_volume+0x492>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	3334      	adds	r3, #52	; 0x34
 800a1c8:	330b      	adds	r3, #11
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fcba 	bl	8008b44 <ld_word>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d6:	d001      	beq.n	800a1dc <find_volume+0x1b8>
 800a1d8:	230d      	movs	r3, #13
 800a1da:	e16c      	b.n	800a4b6 <find_volume+0x492>
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	3334      	adds	r3, #52	; 0x34
 800a1e0:	3316      	adds	r3, #22
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fcae 	bl	8008b44 <ld_word>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d106      	bne.n	800a200 <find_volume+0x1dc>
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	3334      	adds	r3, #52	; 0x34
 800a1f6:	3324      	adds	r3, #36	; 0x24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fcbb 	bl	8008b74 <ld_dword>
 800a1fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a204:	61da      	str	r2, [r3, #28]
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	709a      	strb	r2, [r3, #2]
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	789b      	ldrb	r3, [r3, #2]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d005      	beq.n	800a224 <find_volume+0x200>
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	789b      	ldrb	r3, [r3, #2]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d001      	beq.n	800a224 <find_volume+0x200>
 800a220:	230d      	movs	r3, #13
 800a222:	e148      	b.n	800a4b6 <find_volume+0x492>
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	789b      	ldrb	r3, [r3, #2]
 800a228:	461a      	mov	r2, r3
 800a22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a22c:	fb02 f303 	mul.w	r3, r2, r3
 800a230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a238:	b29a      	uxth	r2, r3
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	815a      	strh	r2, [r3, #10]
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	895b      	ldrh	r3, [r3, #10]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d008      	beq.n	800a258 <find_volume+0x234>
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	895b      	ldrh	r3, [r3, #10]
 800a24a:	461a      	mov	r2, r3
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	895b      	ldrh	r3, [r3, #10]
 800a250:	3b01      	subs	r3, #1
 800a252:	4013      	ands	r3, r2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <find_volume+0x238>
 800a258:	230d      	movs	r3, #13
 800a25a:	e12c      	b.n	800a4b6 <find_volume+0x492>
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	3334      	adds	r3, #52	; 0x34
 800a260:	3311      	adds	r3, #17
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fc6e 	bl	8008b44 <ld_word>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	811a      	strh	r2, [r3, #8]
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	891b      	ldrh	r3, [r3, #8]
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	b29b      	uxth	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <find_volume+0x25e>
 800a27e:	230d      	movs	r3, #13
 800a280:	e119      	b.n	800a4b6 <find_volume+0x492>
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	3334      	adds	r3, #52	; 0x34
 800a286:	3313      	adds	r3, #19
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fc5b 	bl	8008b44 <ld_word>
 800a28e:	4603      	mov	r3, r0
 800a290:	64bb      	str	r3, [r7, #72]	; 0x48
 800a292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <find_volume+0x282>
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	3334      	adds	r3, #52	; 0x34
 800a29c:	3320      	adds	r3, #32
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fc68 	bl	8008b74 <ld_dword>
 800a2a4:	64b8      	str	r0, [r7, #72]	; 0x48
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	3334      	adds	r3, #52	; 0x34
 800a2aa:	330e      	adds	r3, #14
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fc49 	bl	8008b44 <ld_word>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <find_volume+0x29c>
 800a2bc:	230d      	movs	r3, #13
 800a2be:	e0fa      	b.n	800a4b6 <find_volume+0x492>
 800a2c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	4413      	add	r3, r2
 800a2c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2c8:	8912      	ldrh	r2, [r2, #8]
 800a2ca:	0912      	lsrs	r2, r2, #4
 800a2cc:	b292      	uxth	r2, r2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d204      	bcs.n	800a2e4 <find_volume+0x2c0>
 800a2da:	230d      	movs	r3, #13
 800a2dc:	e0eb      	b.n	800a4b6 <find_volume+0x492>
 800a2de:	bf00      	nop
 800a2e0:	20004108 	.word	0x20004108
 800a2e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2ec:	8952      	ldrh	r2, [r2, #10]
 800a2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <find_volume+0x2da>
 800a2fa:	230d      	movs	r3, #13
 800a2fc:	e0db      	b.n	800a4b6 <find_volume+0x492>
 800a2fe:	2303      	movs	r3, #3
 800a300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d802      	bhi.n	800a314 <find_volume+0x2f0>
 800a30e:	2302      	movs	r3, #2
 800a310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d802      	bhi.n	800a324 <find_volume+0x300>
 800a31e:	2301      	movs	r3, #1
 800a320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	1c9a      	adds	r2, r3, #2
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	619a      	str	r2, [r3, #24]
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a330:	621a      	str	r2, [r3, #32]
 800a332:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a336:	441a      	add	r2, r3
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	625a      	str	r2, [r3, #36]	; 0x24
 800a33c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	441a      	add	r2, r3
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	62da      	str	r2, [r3, #44]	; 0x2c
 800a346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d11e      	bne.n	800a38c <find_volume+0x368>
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	3334      	adds	r3, #52	; 0x34
 800a352:	332a      	adds	r3, #42	; 0x2a
 800a354:	4618      	mov	r0, r3
 800a356:	f7fe fbf5 	bl	8008b44 <ld_word>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <find_volume+0x340>
 800a360:	230d      	movs	r3, #13
 800a362:	e0a8      	b.n	800a4b6 <find_volume+0x492>
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <find_volume+0x34c>
 800a36c:	230d      	movs	r3, #13
 800a36e:	e0a2      	b.n	800a4b6 <find_volume+0x492>
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	3334      	adds	r3, #52	; 0x34
 800a374:	332c      	adds	r3, #44	; 0x2c
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fbfc 	bl	8008b74 <ld_dword>
 800a37c:	4602      	mov	r2, r0
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	629a      	str	r2, [r3, #40]	; 0x28
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	647b      	str	r3, [r7, #68]	; 0x44
 800a38a:	e01f      	b.n	800a3cc <find_volume+0x3a8>
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	891b      	ldrh	r3, [r3, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <find_volume+0x374>
 800a394:	230d      	movs	r3, #13
 800a396:	e08e      	b.n	800a4b6 <find_volume+0x492>
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	441a      	add	r2, r3
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	629a      	str	r2, [r3, #40]	; 0x28
 800a3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d103      	bne.n	800a3b4 <find_volume+0x390>
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	e00a      	b.n	800a3ca <find_volume+0x3a6>
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	4413      	add	r3, r2
 800a3be:	085a      	lsrs	r2, r3, #1
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	4413      	add	r3, r2
 800a3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	69da      	ldr	r2, [r3, #28]
 800a3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a3d6:	0a5b      	lsrs	r3, r3, #9
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d201      	bcs.n	800a3e0 <find_volume+0x3bc>
 800a3dc:	230d      	movs	r3, #13
 800a3de:	e06a      	b.n	800a4b6 <find_volume+0x492>
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	615a      	str	r2, [r3, #20]
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	695a      	ldr	r2, [r3, #20]
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	611a      	str	r2, [r3, #16]
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	2280      	movs	r2, #128	; 0x80
 800a3f4:	711a      	strb	r2, [r3, #4]
 800a3f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d149      	bne.n	800a492 <find_volume+0x46e>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	3334      	adds	r3, #52	; 0x34
 800a402:	3330      	adds	r3, #48	; 0x30
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe fb9d 	bl	8008b44 <ld_word>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d140      	bne.n	800a492 <find_volume+0x46e>
 800a410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a412:	3301      	adds	r3, #1
 800a414:	4619      	mov	r1, r3
 800a416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a418:	f7fe fe3a 	bl	8009090 <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d137      	bne.n	800a492 <find_volume+0x46e>
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2200      	movs	r2, #0
 800a426:	711a      	strb	r2, [r3, #4]
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	3334      	adds	r3, #52	; 0x34
 800a42c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe fb87 	bl	8008b44 <ld_word>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a43e:	429a      	cmp	r2, r3
 800a440:	d127      	bne.n	800a492 <find_volume+0x46e>
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	3334      	adds	r3, #52	; 0x34
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fb94 	bl	8008b74 <ld_dword>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4a1c      	ldr	r2, [pc, #112]	; (800a4c0 <find_volume+0x49c>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d11e      	bne.n	800a492 <find_volume+0x46e>
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	3334      	adds	r3, #52	; 0x34
 800a458:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fb89 	bl	8008b74 <ld_dword>
 800a462:	4603      	mov	r3, r0
 800a464:	4a17      	ldr	r2, [pc, #92]	; (800a4c4 <find_volume+0x4a0>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d113      	bne.n	800a492 <find_volume+0x46e>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	3334      	adds	r3, #52	; 0x34
 800a46e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fb7e 	bl	8008b74 <ld_dword>
 800a478:	4602      	mov	r2, r0
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	615a      	str	r2, [r3, #20]
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	3334      	adds	r3, #52	; 0x34
 800a482:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fb74 	bl	8008b74 <ld_dword>
 800a48c:	4602      	mov	r2, r0
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	611a      	str	r2, [r3, #16]
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <find_volume+0x4a4>)
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <find_volume+0x4a4>)
 800a4a4:	801a      	strh	r2, [r3, #0]
 800a4a6:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <find_volume+0x4a4>)
 800a4a8:	881a      	ldrh	r2, [r3, #0]
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	80da      	strh	r2, [r3, #6]
 800a4ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4b0:	f7fe fd86 	bl	8008fc0 <clear_lock>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3758      	adds	r7, #88	; 0x58
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	41615252 	.word	0x41615252
 800a4c4:	61417272 	.word	0x61417272
 800a4c8:	2000410c 	.word	0x2000410c

0800a4cc <validate>:
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	2309      	movs	r3, #9
 800a4d8:	73fb      	strb	r3, [r7, #15]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d02e      	beq.n	800a53e <validate+0x72>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02a      	beq.n	800a53e <validate+0x72>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d025      	beq.n	800a53e <validate+0x72>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	889a      	ldrh	r2, [r3, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	88db      	ldrh	r3, [r3, #6]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d11e      	bne.n	800a53e <validate+0x72>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fc1d 	bl	8008d44 <lock_fs>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d014      	beq.n	800a53a <validate+0x6e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fa76 	bl	8008a08 <disk_status>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <validate+0x60>
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	e008      	b.n	800a53e <validate+0x72>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2100      	movs	r1, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fc1c 	bl	8008d70 <unlock_fs>
 800a538:	e001      	b.n	800a53e <validate+0x72>
 800a53a:	230f      	movs	r3, #15
 800a53c:	73fb      	strb	r3, [r7, #15]
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <validate+0x7e>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	e000      	b.n	800a54c <validate+0x80>
 800a54a:	2300      	movs	r3, #0
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <f_mount>:
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	4613      	mov	r3, r2
 800a568:	71fb      	strb	r3, [r7, #7]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	f107 0310 	add.w	r3, r7, #16
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff fcbb 	bl	8009eee <get_ldnumber>
 800a578:	61f8      	str	r0, [r7, #28]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	da01      	bge.n	800a584 <f_mount+0x28>
 800a580:	230b      	movs	r3, #11
 800a582:	e048      	b.n	800a616 <f_mount+0xba>
 800a584:	4a26      	ldr	r2, [pc, #152]	; (800a620 <f_mount+0xc4>)
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00f      	beq.n	800a5b4 <f_mount+0x58>
 800a594:	69b8      	ldr	r0, [r7, #24]
 800a596:	f7fe fd13 	bl	8008fc0 <clear_lock>
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fced 	bl	800af7e <ff_del_syncobj>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <f_mount+0x52>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	e033      	b.n	800a616 <f_mount+0xba>
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00f      	beq.n	800a5da <f_mount+0x7e>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	701a      	strb	r2, [r3, #0]
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	330c      	adds	r3, #12
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f000 fcb7 	bl	800af3e <ff_cre_syncobj>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <f_mount+0x7e>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e01d      	b.n	800a616 <f_mount+0xba>
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4910      	ldr	r1, [pc, #64]	; (800a620 <f_mount+0xc4>)
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <f_mount+0x94>
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d001      	beq.n	800a5f4 <f_mount+0x98>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e010      	b.n	800a616 <f_mount+0xba>
 800a5f4:	f107 010c 	add.w	r1, r7, #12
 800a5f8:	f107 0308 	add.w	r3, r7, #8
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fd10 	bl	800a024 <find_volume>
 800a604:	4603      	mov	r3, r0
 800a606:	75fb      	strb	r3, [r7, #23]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	7dfa      	ldrb	r2, [r7, #23]
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fbae 	bl	8008d70 <unlock_fs>
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	4618      	mov	r0, r3
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20004108 	.word	0x20004108

0800a624 <f_open>:
 800a624:	b580      	push	{r7, lr}
 800a626:	b098      	sub	sp, #96	; 0x60
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	71fb      	strb	r3, [r7, #7]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <f_open+0x18>
 800a638:	2309      	movs	r3, #9
 800a63a:	e1b4      	b.n	800a9a6 <f_open+0x382>
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a642:	71fb      	strb	r3, [r7, #7]
 800a644:	79fa      	ldrb	r2, [r7, #7]
 800a646:	f107 0110 	add.w	r1, r7, #16
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fce8 	bl	800a024 <find_volume>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f040 8191 	bne.w	800a986 <f_open+0x362>
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	617b      	str	r3, [r7, #20]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff fbcb 	bl	8009e0c <follow_path>
 800a676:	4603      	mov	r3, r0
 800a678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a67c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a680:	2b00      	cmp	r3, #0
 800a682:	d11a      	bne.n	800a6ba <f_open+0x96>
 800a684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	da03      	bge.n	800a696 <f_open+0x72>
 800a68e:	2306      	movs	r3, #6
 800a690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a694:	e011      	b.n	800a6ba <f_open+0x96>
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bf14      	ite	ne
 800a6a0:	2301      	movne	r3, #1
 800a6a2:	2300      	moveq	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f107 0314 	add.w	r3, r7, #20
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fb7a 	bl	8008da8 <chk_lock>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	f003 031c 	and.w	r3, r3, #28
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d07f      	beq.n	800a7c4 <f_open+0x1a0>
 800a6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d017      	beq.n	800a6fc <f_open+0xd8>
 800a6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d10e      	bne.n	800a6f2 <f_open+0xce>
 800a6d4:	f7fe fbc4 	bl	8008e60 <enq_lock>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <f_open+0xc8>
 800a6de:	f107 0314 	add.w	r3, r7, #20
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fa6d 	bl	8009bc2 <dir_register>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	e000      	b.n	800a6ee <f_open+0xca>
 800a6ec:	2312      	movs	r3, #18
 800a6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	e010      	b.n	800a71e <f_open+0xfa>
 800a6fc:	7ebb      	ldrb	r3, [r7, #26]
 800a6fe:	f003 0311 	and.w	r3, r3, #17
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <f_open+0xea>
 800a706:	2307      	movs	r3, #7
 800a708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a70c:	e007      	b.n	800a71e <f_open+0xfa>
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <f_open+0xfa>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a722:	2b00      	cmp	r3, #0
 800a724:	d168      	bne.n	800a7f8 <f_open+0x1d4>
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d063      	beq.n	800a7f8 <f_open+0x1d4>
 800a730:	f7fd fc2e 	bl	8007f90 <get_fattime>
 800a734:	6538      	str	r0, [r7, #80]	; 0x50
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	330e      	adds	r3, #14
 800a73a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fa57 	bl	8008bf0 <st_dword>
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	3316      	adds	r3, #22
 800a746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fa51 	bl	8008bf0 <st_dword>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	330b      	adds	r3, #11
 800a752:	2220      	movs	r2, #32
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff f99c 	bl	8009a9a <ld_clust>
 800a762:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a768:	2200      	movs	r2, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff f9b4 	bl	8009ad8 <st_clust>
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a772:	331c      	adds	r3, #28
 800a774:	2100      	movs	r1, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fa3a 	bl	8008bf0 <st_dword>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2201      	movs	r2, #1
 800a780:	70da      	strb	r2, [r3, #3]
 800a782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d037      	beq.n	800a7f8 <f_open+0x1d4>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	653b      	str	r3, [r7, #80]	; 0x50
 800a78e:	f107 0314 	add.w	r3, r7, #20
 800a792:	2200      	movs	r2, #0
 800a794:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fec7 	bl	800952a <remove_chain>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d126      	bne.n	800a7f8 <f_open+0x1d4>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fc6e 	bl	8009090 <move_window>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7be:	3a01      	subs	r2, #1
 800a7c0:	611a      	str	r2, [r3, #16]
 800a7c2:	e019      	b.n	800a7f8 <f_open+0x1d4>
 800a7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d115      	bne.n	800a7f8 <f_open+0x1d4>
 800a7cc:	7ebb      	ldrb	r3, [r7, #26]
 800a7ce:	f003 0310 	and.w	r3, r3, #16
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <f_open+0x1ba>
 800a7d6:	2304      	movs	r3, #4
 800a7d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7dc:	e00c      	b.n	800a7f8 <f_open+0x1d4>
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <f_open+0x1d4>
 800a7e8:	7ebb      	ldrb	r3, [r7, #26]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <f_open+0x1d4>
 800a7f2:	2307      	movs	r3, #7
 800a7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d128      	bne.n	800a852 <f_open+0x22e>
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <f_open+0x1ee>
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a810:	71fb      	strb	r3, [r7, #7]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	625a      	str	r2, [r3, #36]	; 0x24
 800a81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	629a      	str	r2, [r3, #40]	; 0x28
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	bf14      	ite	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	2300      	moveq	r3, #0
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	461a      	mov	r2, r3
 800a832:	f107 0314 	add.w	r3, r7, #20
 800a836:	4611      	mov	r1, r2
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fb33 	bl	8008ea4 <inc_lock>
 800a83e:	4602      	mov	r2, r0
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	611a      	str	r2, [r3, #16]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d102      	bne.n	800a852 <f_open+0x22e>
 800a84c:	2302      	movs	r3, #2
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	2b00      	cmp	r3, #0
 800a858:	f040 8095 	bne.w	800a986 <f_open+0x362>
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff f919 	bl	8009a9a <ld_clust>
 800a868:	4602      	mov	r2, r0
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	609a      	str	r2, [r3, #8]
 800a86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a870:	331c      	adds	r3, #28
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe f97e 	bl	8008b74 <ld_dword>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	60da      	str	r2, [r3, #12]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	62da      	str	r2, [r3, #44]	; 0x2c
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	88da      	ldrh	r2, [r3, #6]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	809a      	strh	r2, [r3, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	79fa      	ldrb	r2, [r7, #7]
 800a896:	751a      	strb	r2, [r3, #20]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	755a      	strb	r2, [r3, #21]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	621a      	str	r2, [r3, #32]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	619a      	str	r2, [r3, #24]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3330      	adds	r3, #48	; 0x30
 800a8ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe f9e8 	bl	8008c8a <mem_set>
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d060      	beq.n	800a986 <f_open+0x362>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05c      	beq.n	800a986 <f_open+0x362>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	619a      	str	r2, [r3, #24]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	895b      	ldrh	r3, [r3, #10]
 800a8d8:	025b      	lsls	r3, r3, #9
 800a8da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a8e8:	e016      	b.n	800a918 <f_open+0x2f4>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe fc89 	bl	8009206 <get_fat>
 800a8f4:	65b8      	str	r0, [r7, #88]	; 0x58
 800a8f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d802      	bhi.n	800a902 <f_open+0x2de>
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a908:	d102      	bne.n	800a910 <f_open+0x2ec>
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	657b      	str	r3, [r7, #84]	; 0x54
 800a918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <f_open+0x304>
 800a920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a924:	429a      	cmp	r2, r3
 800a926:	d8e0      	bhi.n	800a8ea <f_open+0x2c6>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a92c:	61da      	str	r2, [r3, #28]
 800a92e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a932:	2b00      	cmp	r3, #0
 800a934:	d127      	bne.n	800a986 <f_open+0x362>
 800a936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d022      	beq.n	800a986 <f_open+0x362>
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fc3f 	bl	80091c8 <clust2sect>
 800a94a:	6478      	str	r0, [r7, #68]	; 0x44
 800a94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <f_open+0x336>
 800a952:	2302      	movs	r3, #2
 800a954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a958:	e015      	b.n	800a986 <f_open+0x362>
 800a95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95c:	0a5a      	lsrs	r2, r3, #9
 800a95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a960:	441a      	add	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	621a      	str	r2, [r3, #32]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	7858      	ldrb	r0, [r3, #1]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6a1a      	ldr	r2, [r3, #32]
 800a974:	2301      	movs	r3, #1
 800a976:	f7fe f887 	bl	8008a88 <disk_read>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <f_open+0x362>
 800a980:	2301      	movs	r3, #1
 800a982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <f_open+0x370>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe f9e7 	bl	8008d70 <unlock_fs>
 800a9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3760      	adds	r7, #96	; 0x60
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <f_write>:
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b08c      	sub	sp, #48	; 0x30
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f107 0210 	add.w	r2, r7, #16
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff fd7c 	bl	800a4cc <validate>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d107      	bne.n	800a9f2 <f_write+0x44>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	7d5b      	ldrb	r3, [r3, #21]
 800a9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <f_write+0x58>
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fe f9b8 	bl	8008d70 <unlock_fs>
 800aa00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa04:	e173      	b.n	800acee <f_write+0x340>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	7d1b      	ldrb	r3, [r3, #20]
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <f_write+0x72>
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2107      	movs	r1, #7
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe f9aa 	bl	8008d70 <unlock_fs>
 800aa1c:	2307      	movs	r3, #7
 800aa1e:	e166      	b.n	800acee <f_write+0x340>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	441a      	add	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	f080 814b 	bcs.w	800acc8 <f_write+0x31a>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	43db      	mvns	r3, r3
 800aa38:	607b      	str	r3, [r7, #4]
 800aa3a:	e145      	b.n	800acc8 <f_write+0x31a>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 8101 	bne.w	800ac4c <f_write+0x29e>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	0a5b      	lsrs	r3, r3, #9
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	8952      	ldrh	r2, [r2, #10]
 800aa54:	3a01      	subs	r2, #1
 800aa56:	4013      	ands	r3, r2
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d14d      	bne.n	800aafc <f_write+0x14e>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10c      	bne.n	800aa82 <f_write+0xd4>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d11a      	bne.n	800aaaa <f_write+0xfc>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fdbb 	bl	80095f4 <create_chain>
 800aa7e:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa80:	e013      	b.n	800aaaa <f_write+0xfc>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <f_write+0xec>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7fe fe47 	bl	8009724 <clmt_clust>
 800aa96:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa98:	e007      	b.n	800aaaa <f_write+0xfc>
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fe fda6 	bl	80095f4 <create_chain>
 800aaa8:	62b8      	str	r0, [r7, #40]	; 0x28
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 8110 	beq.w	800acd2 <f_write+0x324>
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d109      	bne.n	800aacc <f_write+0x11e>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2202      	movs	r2, #2
 800aabc:	755a      	strb	r2, [r3, #21]
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	2102      	movs	r1, #2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f954 	bl	8008d70 <unlock_fs>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e110      	b.n	800acee <f_write+0x340>
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad2:	d109      	bne.n	800aae8 <f_write+0x13a>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2201      	movs	r2, #1
 800aad8:	755a      	strb	r2, [r3, #21]
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	2101      	movs	r1, #1
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe f946 	bl	8008d70 <unlock_fs>
 800aae4:	2301      	movs	r3, #1
 800aae6:	e102      	b.n	800acee <f_write+0x340>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaec:	61da      	str	r2, [r3, #28]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d102      	bne.n	800aafc <f_write+0x14e>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aafa:	609a      	str	r2, [r3, #8]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	7d1b      	ldrb	r3, [r3, #20]
 800ab00:	b25b      	sxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	da1d      	bge.n	800ab42 <f_write+0x194>
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	7858      	ldrb	r0, [r3, #1]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a1a      	ldr	r2, [r3, #32]
 800ab14:	2301      	movs	r3, #1
 800ab16:	f7fd ffd7 	bl	8008ac8 <disk_write>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <f_write+0x186>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	755a      	strb	r2, [r3, #21]
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2101      	movs	r1, #1
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe f920 	bl	8008d70 <unlock_fs>
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0dc      	b.n	800acee <f_write+0x340>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	7d1b      	ldrb	r3, [r3, #20]
 800ab38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	751a      	strb	r2, [r3, #20]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe fb3c 	bl	80091c8 <clust2sect>
 800ab50:	6178      	str	r0, [r7, #20]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d109      	bne.n	800ab6c <f_write+0x1be>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	755a      	strb	r2, [r3, #21]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2102      	movs	r1, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe f904 	bl	8008d70 <unlock_fs>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e0c0      	b.n	800acee <f_write+0x340>
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	4413      	add	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	0a5b      	lsrs	r3, r3, #9
 800ab78:	623b      	str	r3, [r7, #32]
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d041      	beq.n	800ac04 <f_write+0x256>
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	4413      	add	r3, r2
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	8952      	ldrh	r2, [r2, #10]
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d905      	bls.n	800ab9a <f_write+0x1ec>
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	895b      	ldrh	r3, [r3, #10]
 800ab92:	461a      	mov	r2, r3
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	623b      	str	r3, [r7, #32]
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	7858      	ldrb	r0, [r3, #1]
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	69f9      	ldr	r1, [r7, #28]
 800aba4:	f7fd ff90 	bl	8008ac8 <disk_write>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <f_write+0x214>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2201      	movs	r2, #1
 800abb2:	755a      	strb	r2, [r3, #21]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2101      	movs	r1, #1
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe f8d9 	bl	8008d70 <unlock_fs>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e095      	b.n	800acee <f_write+0x340>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a1a      	ldr	r2, [r3, #32]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	6a3a      	ldr	r2, [r7, #32]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d915      	bls.n	800abfc <f_write+0x24e>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6a1a      	ldr	r2, [r3, #32]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	025b      	lsls	r3, r3, #9
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	4413      	add	r3, r2
 800abe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abe8:	4619      	mov	r1, r3
 800abea:	f7fe f82d 	bl	8008c48 <mem_cpy>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	7d1b      	ldrb	r3, [r3, #20]
 800abf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	751a      	strb	r2, [r3, #20]
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	025b      	lsls	r3, r3, #9
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
 800ac02:	e044      	b.n	800ac8e <f_write+0x2e0>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d01b      	beq.n	800ac46 <f_write+0x298>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d215      	bcs.n	800ac46 <f_write+0x298>
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	7858      	ldrb	r0, [r3, #1]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac24:	2301      	movs	r3, #1
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	f7fd ff2e 	bl	8008a88 <disk_read>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d009      	beq.n	800ac46 <f_write+0x298>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	755a      	strb	r2, [r3, #21]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe f897 	bl	8008d70 <unlock_fs>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e053      	b.n	800acee <f_write+0x340>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	621a      	str	r2, [r3, #32]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
 800ac5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d901      	bls.n	800ac66 <f_write+0x2b8>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac74:	4413      	add	r3, r2
 800ac76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac78:	69f9      	ldr	r1, [r7, #28]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fd ffe4 	bl	8008c48 <mem_cpy>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	7d1b      	ldrb	r3, [r3, #20]
 800ac84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	751a      	strb	r2, [r3, #20]
 800ac8e:	69fa      	ldr	r2, [r7, #28]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	4413      	add	r3, r2
 800ac94:	61fb      	str	r3, [r7, #28]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	619a      	str	r2, [r3, #24]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	68da      	ldr	r2, [r3, #12]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	429a      	cmp	r2, r3
 800acac:	bf38      	it	cc
 800acae:	461a      	movcc	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	60da      	str	r2, [r3, #12]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	441a      	add	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	607b      	str	r3, [r7, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f47f aeb6 	bne.w	800aa3c <f_write+0x8e>
 800acd0:	e000      	b.n	800acd4 <f_write+0x326>
 800acd2:	bf00      	nop
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	7d1b      	ldrb	r3, [r3, #20]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	751a      	strb	r2, [r3, #20]
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe f842 	bl	8008d70 <unlock_fs>
 800acec:	2300      	movs	r3, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	3730      	adds	r7, #48	; 0x30
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <f_sync>:
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f107 0208 	add.w	r2, r7, #8
 800ad04:	4611      	mov	r1, r2
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fbe0 	bl	800a4cc <validate>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	75fb      	strb	r3, [r7, #23]
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d16d      	bne.n	800adf2 <f_sync+0xfc>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	7d1b      	ldrb	r3, [r3, #20]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d067      	beq.n	800adf2 <f_sync+0xfc>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7d1b      	ldrb	r3, [r3, #20]
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da1a      	bge.n	800ad62 <f_sync+0x6c>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	7858      	ldrb	r0, [r3, #1]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1a      	ldr	r2, [r3, #32]
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f7fd fec4 	bl	8008ac8 <disk_write>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d006      	beq.n	800ad54 <f_sync+0x5e>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe f810 	bl	8008d70 <unlock_fs>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e055      	b.n	800ae00 <f_sync+0x10a>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	7d1b      	ldrb	r3, [r3, #20]
 800ad58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	751a      	strb	r2, [r3, #20]
 800ad62:	f7fd f915 	bl	8007f90 <get_fattime>
 800ad66:	6138      	str	r0, [r7, #16]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4610      	mov	r0, r2
 800ad72:	f7fe f98d 	bl	8009090 <move_window>
 800ad76:	4603      	mov	r3, r0
 800ad78:	75fb      	strb	r3, [r7, #23]
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d138      	bne.n	800adf2 <f_sync+0xfc>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	330b      	adds	r3, #11
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	330b      	adds	r3, #11
 800ad90:	f042 0220 	orr.w	r2, r2, #32
 800ad94:	b2d2      	uxtb	r2, r2
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	461a      	mov	r2, r3
 800ada2:	68f9      	ldr	r1, [r7, #12]
 800ada4:	f7fe fe98 	bl	8009ad8 <st_clust>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f103 021c 	add.w	r2, r3, #28
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f7fd ff1b 	bl	8008bf0 <st_dword>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3316      	adds	r3, #22
 800adbe:	6939      	ldr	r1, [r7, #16]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fd ff15 	bl	8008bf0 <st_dword>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3312      	adds	r3, #18
 800adca:	2100      	movs	r1, #0
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd fef4 	bl	8008bba <st_word>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2201      	movs	r2, #1
 800add6:	70da      	strb	r2, [r3, #3]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe f986 	bl	80090ec <sync_fs>
 800ade0:	4603      	mov	r3, r0
 800ade2:	75fb      	strb	r3, [r7, #23]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7d1b      	ldrb	r3, [r3, #20]
 800ade8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adec:	b2da      	uxtb	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	751a      	strb	r2, [r3, #20]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	7dfa      	ldrb	r2, [r7, #23]
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fd ffb9 	bl	8008d70 <unlock_fs>
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <f_stat>:
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b090      	sub	sp, #64	; 0x40
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
 800ae12:	f107 010c 	add.w	r1, r7, #12
 800ae16:	1d3b      	adds	r3, r7, #4
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff f902 	bl	800a024 <find_volume>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ae26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11f      	bne.n	800ae6e <f_stat+0x66>
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe ffe8 	bl	8009e0c <follow_path>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ae42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d111      	bne.n	800ae6e <f_stat+0x66>
 800ae4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da03      	bge.n	800ae5c <f_stat+0x54>
 800ae54:	2306      	movs	r3, #6
 800ae56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ae5a:	e008      	b.n	800ae6e <f_stat+0x66>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d005      	beq.n	800ae6e <f_stat+0x66>
 800ae62:	f107 030c 	add.w	r3, r7, #12
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe fedc 	bl	8009c26 <get_fileinfo>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ae74:	4611      	mov	r1, r2
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fd ff7a 	bl	8008d70 <unlock_fs>
 800ae7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae80:	4618      	mov	r0, r3
 800ae82:	3740      	adds	r7, #64	; 0x40
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <FATFS_LinkDriverEx>:
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	71fb      	strb	r3, [r7, #7]
 800ae96:	2301      	movs	r3, #1
 800ae98:	75fb      	strb	r3, [r7, #23]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	75bb      	strb	r3, [r7, #22]
 800ae9e:	4b1f      	ldr	r3, [pc, #124]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aea0:	7a5b      	ldrb	r3, [r3, #9]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d131      	bne.n	800af0c <FATFS_LinkDriverEx+0x84>
 800aea8:	4b1c      	ldr	r3, [pc, #112]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aeaa:	7a5b      	ldrb	r3, [r3, #9]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	5499      	strb	r1, [r3, r2]
 800aeb6:	4b19      	ldr	r3, [pc, #100]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aeb8:	7a5b      	ldrb	r3, [r3, #9]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	4a17      	ldr	r2, [pc, #92]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aec8:	7a5b      	ldrb	r3, [r3, #9]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	4b13      	ldr	r3, [pc, #76]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aed0:	4413      	add	r3, r2
 800aed2:	79fa      	ldrb	r2, [r7, #7]
 800aed4:	721a      	strb	r2, [r3, #8]
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aed8:	7a5b      	ldrb	r3, [r3, #9]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	b2d1      	uxtb	r1, r2
 800aee0:	4a0e      	ldr	r2, [pc, #56]	; (800af1c <FATFS_LinkDriverEx+0x94>)
 800aee2:	7251      	strb	r1, [r2, #9]
 800aee4:	75bb      	strb	r3, [r7, #22]
 800aee6:	7dbb      	ldrb	r3, [r7, #22]
 800aee8:	3330      	adds	r3, #48	; 0x30
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	701a      	strb	r2, [r3, #0]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3301      	adds	r3, #1
 800aef4:	223a      	movs	r2, #58	; 0x3a
 800aef6:	701a      	strb	r2, [r3, #0]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	3302      	adds	r3, #2
 800aefc:	222f      	movs	r2, #47	; 0x2f
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	3303      	adds	r3, #3
 800af04:	2200      	movs	r2, #0
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	2300      	movs	r3, #0
 800af0a:	75fb      	strb	r3, [r7, #23]
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	4618      	mov	r0, r3
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	20004130 	.word	0x20004130

0800af20 <FATFS_LinkDriver>:
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
 800af2a:	2200      	movs	r2, #0
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ffaa 	bl	800ae88 <FATFS_LinkDriverEx>
 800af34:	4603      	mov	r3, r0
 800af36:	4618      	mov	r0, r3
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <ff_cre_syncobj>:
 800af3e:	b580      	push	{r7, lr}
 800af40:	b086      	sub	sp, #24
 800af42:	af00      	add	r7, sp, #0
 800af44:	4603      	mov	r3, r0
 800af46:	6039      	str	r1, [r7, #0]
 800af48:	71fb      	strb	r3, [r7, #7]
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	2300      	movs	r3, #0
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	2101      	movs	r1, #1
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f8cd 	bl	800b0f8 <osSemaphoreCreate>
 800af5e:	4602      	mov	r2, r0
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bf14      	ite	ne
 800af6c:	2301      	movne	r3, #1
 800af6e:	2300      	moveq	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <ff_del_syncobj>:
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f96c 	bl	800b264 <osSemaphoreDelete>
 800af8c:	2301      	movs	r3, #1
 800af8e:	4618      	mov	r0, r3
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <ff_req_grant>:
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8d8 	bl	800b15c <osSemaphoreWait>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <ff_req_grant+0x20>
 800afb2:	2301      	movs	r3, #1
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <ff_rel_grant>:
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f915 	bl	800b1f8 <osSemaphoreRelease>
 800afce:	bf00      	nop
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <makeFreeRtosPriority>:
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	4603      	mov	r3, r0
 800afde:	80fb      	strh	r3, [r7, #6]
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afe8:	2b84      	cmp	r3, #132	; 0x84
 800afea:	d005      	beq.n	800aff8 <makeFreeRtosPriority+0x22>
 800afec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	3303      	adds	r3, #3
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <inHandlerMode>:
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	f3ef 8305 	mrs	r3, IPSR
 800b010:	607b      	str	r3, [r7, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <osKernelStart>:
 800b02a:	b580      	push	{r7, lr}
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	f001 fa67 	bl	800c500 <vTaskStartScheduler>
 800b032:	2300      	movs	r3, #0
 800b034:	4618      	mov	r0, r3
 800b036:	bd80      	pop	{r7, pc}

0800b038 <osThreadCreate>:
 800b038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b03a:	b089      	sub	sp, #36	; 0x24
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d020      	beq.n	800b08c <osThreadCreate+0x54>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01c      	beq.n	800b08c <osThreadCreate+0x54>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	685c      	ldr	r4, [r3, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681d      	ldr	r5, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	691e      	ldr	r6, [r3, #16]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ffb6 	bl	800afd6 <makeFreeRtosPriority>
 800b06a:	4601      	mov	r1, r0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6992      	ldr	r2, [r2, #24]
 800b074:	9202      	str	r2, [sp, #8]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	9100      	str	r1, [sp, #0]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	4632      	mov	r2, r6
 800b07e:	4629      	mov	r1, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f001 f85f 	bl	800c144 <xTaskCreateStatic>
 800b086:	4603      	mov	r3, r0
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	e01c      	b.n	800b0c6 <osThreadCreate+0x8e>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685c      	ldr	r4, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681d      	ldr	r5, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	b29e      	uxth	r6, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff ff98 	bl	800afd6 <makeFreeRtosPriority>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	f107 030c 	add.w	r3, r7, #12
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	9200      	str	r2, [sp, #0]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	4632      	mov	r2, r6
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f001 f8a1 	bl	800c1fe <xTaskCreate>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d001      	beq.n	800b0c6 <osThreadCreate+0x8e>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e000      	b.n	800b0c8 <osThreadCreate+0x90>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0d0 <osDelay>:
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <osDelay+0x16>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	e000      	b.n	800b0e8 <osDelay+0x18>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f001 f9d5 	bl	800c498 <vTaskDelay>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <osSemaphoreCreate>:
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <osSemaphoreCreate+0x32>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10a      	bne.n	800b126 <osSemaphoreCreate+0x2e>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2203      	movs	r2, #3
 800b116:	9200      	str	r2, [sp, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	2100      	movs	r1, #0
 800b11c:	2001      	movs	r0, #1
 800b11e:	f000 f9d1 	bl	800b4c4 <xQueueGenericCreateStatic>
 800b122:	4603      	mov	r3, r0
 800b124:	e016      	b.n	800b154 <osSemaphoreCreate+0x5c>
 800b126:	2300      	movs	r3, #0
 800b128:	e014      	b.n	800b154 <osSemaphoreCreate+0x5c>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d110      	bne.n	800b152 <osSemaphoreCreate+0x5a>
 800b130:	2203      	movs	r2, #3
 800b132:	2100      	movs	r1, #0
 800b134:	2001      	movs	r0, #1
 800b136:	f000 fa3d 	bl	800b5b4 <xQueueGenericCreate>
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <osSemaphoreCreate+0x56>
 800b142:	2300      	movs	r3, #0
 800b144:	2200      	movs	r2, #0
 800b146:	2100      	movs	r1, #0
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 fa8d 	bl	800b668 <xQueueGenericSend>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	e000      	b.n	800b154 <osSemaphoreCreate+0x5c>
 800b152:	2300      	movs	r3, #0
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <osSemaphoreWait>:
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
 800b166:	2300      	movs	r3, #0
 800b168:	60bb      	str	r3, [r7, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <osSemaphoreWait+0x18>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	e03a      	b.n	800b1ea <osSemaphoreWait+0x8e>
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d103      	bne.n	800b188 <osSemaphoreWait+0x2c>
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e009      	b.n	800b19c <osSemaphoreWait+0x40>
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <osSemaphoreWait+0x40>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <osSemaphoreWait+0x40>
 800b198:	2301      	movs	r3, #1
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	f7ff ff33 	bl	800b006 <inHandlerMode>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d017      	beq.n	800b1d6 <osSemaphoreWait+0x7a>
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fdd2 	bl	800bd58 <xQueueReceiveFromISR>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d001      	beq.n	800b1be <osSemaphoreWait+0x62>
 800b1ba:	23ff      	movs	r3, #255	; 0xff
 800b1bc:	e015      	b.n	800b1ea <osSemaphoreWait+0x8e>
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d011      	beq.n	800b1e8 <osSemaphoreWait+0x8c>
 800b1c4:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <osSemaphoreWait+0x98>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	e008      	b.n	800b1e8 <osSemaphoreWait+0x8c>
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fcb1 	bl	800bb40 <xQueueSemaphoreTake>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d001      	beq.n	800b1e8 <osSemaphoreWait+0x8c>
 800b1e4:	23ff      	movs	r3, #255	; 0xff
 800b1e6:	e000      	b.n	800b1ea <osSemaphoreWait+0x8e>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <osSemaphoreRelease>:
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	2300      	movs	r3, #0
 800b206:	60bb      	str	r3, [r7, #8]
 800b208:	f7ff fefd 	bl	800b006 <inHandlerMode>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d016      	beq.n	800b240 <osSemaphoreRelease+0x48>
 800b212:	f107 0308 	add.w	r3, r7, #8
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fb23 	bl	800b864 <xQueueGiveFromISR>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b01      	cmp	r3, #1
 800b222:	d001      	beq.n	800b228 <osSemaphoreRelease+0x30>
 800b224:	23ff      	movs	r3, #255	; 0xff
 800b226:	e017      	b.n	800b258 <osSemaphoreRelease+0x60>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d013      	beq.n	800b256 <osSemaphoreRelease+0x5e>
 800b22e:	4b0c      	ldr	r3, [pc, #48]	; (800b260 <osSemaphoreRelease+0x68>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	e00a      	b.n	800b256 <osSemaphoreRelease+0x5e>
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa0e 	bl	800b668 <xQueueGenericSend>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d001      	beq.n	800b256 <osSemaphoreRelease+0x5e>
 800b252:	23ff      	movs	r3, #255	; 0xff
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	e000ed04 	.word	0xe000ed04

0800b264 <osSemaphoreDelete>:
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	f7ff fecb 	bl	800b006 <inHandlerMode>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <osSemaphoreDelete+0x16>
 800b276:	2382      	movs	r3, #130	; 0x82
 800b278:	e003      	b.n	800b282 <osSemaphoreDelete+0x1e>
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fdec 	bl	800be58 <vQueueDelete>
 800b280:	2300      	movs	r3, #0
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <vListInitialise>:
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f103 0208 	add.w	r2, r3, #8
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	609a      	str	r2, [r3, #8]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f103 0208 	add.w	r2, r3, #8
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60da      	str	r2, [r3, #12]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f103 0208 	add.w	r2, r3, #8
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	611a      	str	r2, [r3, #16]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <vListInitialiseItem>:
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	611a      	str	r2, [r3, #16]
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <vListInsertEnd>:
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	605a      	str	r2, [r3, #4]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	609a      	str	r2, [r3, #8]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	605a      	str	r2, [r3, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	611a      	str	r2, [r3, #16]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <vListInsert>:
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60bb      	str	r3, [r7, #8]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b342:	d103      	bne.n	800b34c <vListInsert+0x20>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e00c      	b.n	800b366 <vListInsert+0x3a>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3308      	adds	r3, #8
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e002      	b.n	800b35a <vListInsert+0x2e>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	60fb      	str	r3, [r7, #12]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	429a      	cmp	r2, r3
 800b364:	d2f6      	bcs.n	800b354 <vListInsert+0x28>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	605a      	str	r2, [r3, #4]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	609a      	str	r2, [r3, #8]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	609a      	str	r2, [r3, #8]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	605a      	str	r2, [r3, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	611a      	str	r2, [r3, #16]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	bf00      	nop
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <uxListRemove>:
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6892      	ldr	r2, [r2, #8]
 800b3b4:	609a      	str	r2, [r3, #8]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6852      	ldr	r2, [r2, #4]
 800b3be:	605a      	str	r2, [r3, #4]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d103      	bne.n	800b3d2 <uxListRemove+0x34>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689a      	ldr	r2, [r3, #8]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	605a      	str	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	611a      	str	r2, [r3, #16]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	1e5a      	subs	r2, r3, #1
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
	...

0800b3f4 <xQueueGenericReset>:
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <xQueueGenericReset+0x2a>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	60bb      	str	r3, [r7, #8]
 800b41a:	bf00      	nop
 800b41c:	e7fe      	b.n	800b41c <xQueueGenericReset+0x28>
 800b41e:	f001 ffd1 	bl	800d3c4 <vPortEnterCritical>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42a:	68f9      	ldr	r1, [r7, #12]
 800b42c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b42e:	fb01 f303 	mul.w	r3, r1, r3
 800b432:	441a      	add	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	609a      	str	r2, [r3, #8]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44e:	3b01      	subs	r3, #1
 800b450:	68f9      	ldr	r1, [r7, #12]
 800b452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	441a      	add	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	60da      	str	r2, [r3, #12]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	22ff      	movs	r2, #255	; 0xff
 800b462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	22ff      	movs	r2, #255	; 0xff
 800b46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d114      	bne.n	800b49e <xQueueGenericReset+0xaa>
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01a      	beq.n	800b4b2 <xQueueGenericReset+0xbe>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3310      	adds	r3, #16
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fa8f 	bl	800c9a4 <xTaskRemoveFromEventList>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d012      	beq.n	800b4b2 <xQueueGenericReset+0xbe>
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <xQueueGenericReset+0xcc>)
 800b48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	e009      	b.n	800b4b2 <xQueueGenericReset+0xbe>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3310      	adds	r3, #16
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fef1 	bl	800b28a <vListInitialise>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3324      	adds	r3, #36	; 0x24
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff feec 	bl	800b28a <vListInitialise>
 800b4b2:	f001 ffb7 	bl	800d424 <vPortExitCritical>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	e000ed04 	.word	0xe000ed04

0800b4c4 <xQueueGenericCreateStatic>:
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08e      	sub	sp, #56	; 0x38
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xQueueGenericCreateStatic+0x2a>
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericCreateStatic+0x28>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <xQueueGenericCreateStatic+0x46>
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
 800b506:	bf00      	nop
 800b508:	e7fe      	b.n	800b508 <xQueueGenericCreateStatic+0x44>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <xQueueGenericCreateStatic+0x52>
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <xQueueGenericCreateStatic+0x56>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <xQueueGenericCreateStatic+0x58>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xQueueGenericCreateStatic+0x72>
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xQueueGenericCreateStatic+0x70>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <xQueueGenericCreateStatic+0x7e>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <xQueueGenericCreateStatic+0x82>
 800b542:	2301      	movs	r3, #1
 800b544:	e000      	b.n	800b548 <xQueueGenericCreateStatic+0x84>
 800b546:	2300      	movs	r3, #0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <xQueueGenericCreateStatic+0x9e>
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xQueueGenericCreateStatic+0x9c>
 800b562:	2348      	movs	r3, #72	; 0x48
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b48      	cmp	r3, #72	; 0x48
 800b56a:	d00a      	beq.n	800b582 <xQueueGenericCreateStatic+0xbe>
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <xQueueGenericCreateStatic+0xbc>
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <xQueueGenericCreateStatic+0xe6>
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b596:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	68b9      	ldr	r1, [r7, #8]
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f83f 	bl	800b628 <prvInitialiseNewQueue>
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3730      	adds	r7, #48	; 0x30
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <xQueueGenericCreate>:
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	71fb      	strb	r3, [r7, #7]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10a      	bne.n	800b5de <xQueueGenericCreate+0x2a>
 800b5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	613b      	str	r3, [r7, #16]
 800b5da:	bf00      	nop
 800b5dc:	e7fe      	b.n	800b5dc <xQueueGenericCreate+0x28>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	fb02 f303 	mul.w	r3, r2, r3
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	3348      	adds	r3, #72	; 0x48
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f002 f80b 	bl	800d608 <pvPortMalloc>
 800b5f2:	61b8      	str	r0, [r7, #24]
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d011      	beq.n	800b61e <xQueueGenericCreate+0x6a>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	3348      	adds	r3, #72	; 0x48
 800b602:	617b      	str	r3, [r7, #20]
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b60c:	79fa      	ldrb	r2, [r7, #7]
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	4613      	mov	r3, r2
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f805 	bl	800b628 <prvInitialiseNewQueue>
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	4618      	mov	r0, r3
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <prvInitialiseNewQueue>:
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	70fb      	strb	r3, [r7, #3]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d103      	bne.n	800b644 <prvInitialiseNewQueue+0x1c>
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e002      	b.n	800b64a <prvInitialiseNewQueue+0x22>
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	63da      	str	r2, [r3, #60]	; 0x3c
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	641a      	str	r2, [r3, #64]	; 0x40
 800b656:	2101      	movs	r1, #1
 800b658:	69b8      	ldr	r0, [r7, #24]
 800b65a:	f7ff fecb 	bl	800b3f4 <xQueueGenericReset>
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <xQueueGenericSend>:
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08e      	sub	sp, #56	; 0x38
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	2300      	movs	r3, #0
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	633b      	str	r3, [r7, #48]	; 0x30
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <xQueueGenericSend+0x32>
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	62bb      	str	r3, [r7, #40]	; 0x28
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xQueueGenericSend+0x30>
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d103      	bne.n	800b6a8 <xQueueGenericSend+0x40>
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <xQueueGenericSend+0x44>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <xQueueGenericSend+0x46>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <xQueueGenericSend+0x60>
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <xQueueGenericSend+0x5e>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d103      	bne.n	800b6d6 <xQueueGenericSend+0x6e>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <xQueueGenericSend+0x72>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e000      	b.n	800b6dc <xQueueGenericSend+0x74>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <xQueueGenericSend+0x8e>
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	623b      	str	r3, [r7, #32]
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xQueueGenericSend+0x8c>
 800b6f6:	f001 fb15 	bl	800cd24 <xTaskGetSchedulerState>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <xQueueGenericSend+0x9e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <xQueueGenericSend+0xa2>
 800b706:	2301      	movs	r3, #1
 800b708:	e000      	b.n	800b70c <xQueueGenericSend+0xa4>
 800b70a:	2300      	movs	r3, #0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10a      	bne.n	800b726 <xQueueGenericSend+0xbe>
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	61fb      	str	r3, [r7, #28]
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xQueueGenericSend+0xbc>
 800b726:	f001 fe4d 	bl	800d3c4 <vPortEnterCritical>
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b732:	429a      	cmp	r2, r3
 800b734:	d302      	bcc.n	800b73c <xQueueGenericSend+0xd4>
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d129      	bne.n	800b790 <xQueueGenericSend+0x128>
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b742:	f000 fbc4 	bl	800bece <prvCopyDataToQueue>
 800b746:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d010      	beq.n	800b772 <xQueueGenericSend+0x10a>
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	3324      	adds	r3, #36	; 0x24
 800b754:	4618      	mov	r0, r3
 800b756:	f001 f925 	bl	800c9a4 <xTaskRemoveFromEventList>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d013      	beq.n	800b788 <xQueueGenericSend+0x120>
 800b760:	4b3f      	ldr	r3, [pc, #252]	; (800b860 <xQueueGenericSend+0x1f8>)
 800b762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	e00a      	b.n	800b788 <xQueueGenericSend+0x120>
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <xQueueGenericSend+0x120>
 800b778:	4b39      	ldr	r3, [pc, #228]	; (800b860 <xQueueGenericSend+0x1f8>)
 800b77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f001 fe4c 	bl	800d424 <vPortExitCritical>
 800b78c:	2301      	movs	r3, #1
 800b78e:	e063      	b.n	800b858 <xQueueGenericSend+0x1f0>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <xQueueGenericSend+0x136>
 800b796:	f001 fe45 	bl	800d424 <vPortExitCritical>
 800b79a:	2300      	movs	r3, #0
 800b79c:	e05c      	b.n	800b858 <xQueueGenericSend+0x1f0>
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <xQueueGenericSend+0x14a>
 800b7a4:	f107 0314 	add.w	r3, r7, #20
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 f95d 	bl	800ca68 <vTaskInternalSetTimeOutState>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b2:	f001 fe37 	bl	800d424 <vPortExitCritical>
 800b7b6:	f000 ff0d 	bl	800c5d4 <vTaskSuspendAll>
 800b7ba:	f001 fe03 	bl	800d3c4 <vPortEnterCritical>
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ca:	d103      	bne.n	800b7d4 <xQueueGenericSend+0x16c>
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7da:	b25b      	sxtb	r3, r3
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d103      	bne.n	800b7ea <xQueueGenericSend+0x182>
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7ea:	f001 fe1b 	bl	800d424 <vPortExitCritical>
 800b7ee:	1d3a      	adds	r2, r7, #4
 800b7f0:	f107 0314 	add.w	r3, r7, #20
 800b7f4:	4611      	mov	r1, r2
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f001 f94c 	bl	800ca94 <xTaskCheckForTimeOut>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d124      	bne.n	800b84c <xQueueGenericSend+0x1e4>
 800b802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b804:	f000 fc5b 	bl	800c0be <prvIsQueueFull>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d018      	beq.n	800b840 <xQueueGenericSend+0x1d8>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	3310      	adds	r3, #16
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	4611      	mov	r1, r2
 800b816:	4618      	mov	r0, r3
 800b818:	f001 f8a0 	bl	800c95c <vTaskPlaceOnEventList>
 800b81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b81e:	f000 fbe6 	bl	800bfee <prvUnlockQueue>
 800b822:	f000 fee5 	bl	800c5f0 <xTaskResumeAll>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f47f af7c 	bne.w	800b726 <xQueueGenericSend+0xbe>
 800b82e:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <xQueueGenericSend+0x1f8>)
 800b830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	e772      	b.n	800b726 <xQueueGenericSend+0xbe>
 800b840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b842:	f000 fbd4 	bl	800bfee <prvUnlockQueue>
 800b846:	f000 fed3 	bl	800c5f0 <xTaskResumeAll>
 800b84a:	e76c      	b.n	800b726 <xQueueGenericSend+0xbe>
 800b84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b84e:	f000 fbce 	bl	800bfee <prvUnlockQueue>
 800b852:	f000 fecd 	bl	800c5f0 <xTaskResumeAll>
 800b856:	2300      	movs	r3, #0
 800b858:	4618      	mov	r0, r3
 800b85a:	3738      	adds	r7, #56	; 0x38
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <xQueueGiveFromISR>:
 800b864:	b580      	push	{r7, lr}
 800b866:	b08e      	sub	sp, #56	; 0x38
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	633b      	str	r3, [r7, #48]	; 0x30
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <xQueueGiveFromISR+0x2a>
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	623b      	str	r3, [r7, #32]
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <xQueueGiveFromISR+0x28>
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <xQueueGiveFromISR+0x48>
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	61fb      	str	r3, [r7, #28]
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <xQueueGiveFromISR+0x46>
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <xQueueGiveFromISR+0x58>
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <xQueueGiveFromISR+0x5c>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <xQueueGiveFromISR+0x5e>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <xQueueGiveFromISR+0x78>
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <xQueueGiveFromISR+0x76>
 800b8dc:	f001 fe54 	bl	800d588 <vPortValidateInterruptPriority>
 800b8e0:	f3ef 8211 	mrs	r2, BASEPRI
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	617a      	str	r2, [r7, #20]
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b900:	62bb      	str	r3, [r7, #40]	; 0x28
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b908:	429a      	cmp	r2, r3
 800b90a:	d22b      	bcs.n	800b964 <xQueueGiveFromISR+0x100>
 800b90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	639a      	str	r2, [r3, #56]	; 0x38
 800b91e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d112      	bne.n	800b94e <xQueueGiveFromISR+0xea>
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d016      	beq.n	800b95e <xQueueGiveFromISR+0xfa>
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	3324      	adds	r3, #36	; 0x24
 800b934:	4618      	mov	r0, r3
 800b936:	f001 f835 	bl	800c9a4 <xTaskRemoveFromEventList>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00e      	beq.n	800b95e <xQueueGiveFromISR+0xfa>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00b      	beq.n	800b95e <xQueueGiveFromISR+0xfa>
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2201      	movs	r2, #1
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	e007      	b.n	800b95e <xQueueGiveFromISR+0xfa>
 800b94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b952:	3301      	adds	r3, #1
 800b954:	b2db      	uxtb	r3, r3
 800b956:	b25a      	sxtb	r2, r3
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b95e:	2301      	movs	r3, #1
 800b960:	637b      	str	r3, [r7, #52]	; 0x34
 800b962:	e001      	b.n	800b968 <xQueueGiveFromISR+0x104>
 800b964:	2300      	movs	r3, #0
 800b966:	637b      	str	r3, [r7, #52]	; 0x34
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	bf00      	nop
 800b974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b976:	4618      	mov	r0, r3
 800b978:	3738      	adds	r7, #56	; 0x38
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <xQueueReceive>:
 800b980:	b580      	push	{r7, lr}
 800b982:	b08c      	sub	sp, #48	; 0x30
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	2300      	movs	r3, #0
 800b98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10a      	bne.n	800b9b0 <xQueueReceive+0x30>
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	623b      	str	r3, [r7, #32]
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <xQueueReceive+0x2e>
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <xQueueReceive+0x3e>
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <xQueueReceive+0x42>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <xQueueReceive+0x44>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <xQueueReceive+0x5e>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <xQueueReceive+0x5c>
 800b9de:	f001 f9a1 	bl	800cd24 <xTaskGetSchedulerState>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <xQueueReceive+0x6e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <xQueueReceive+0x72>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <xQueueReceive+0x74>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <xQueueReceive+0x8e>
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	61bb      	str	r3, [r7, #24]
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xQueueReceive+0x8c>
 800ba0e:	f001 fcd9 	bl	800d3c4 <vPortEnterCritical>
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d01f      	beq.n	800ba5e <xQueueReceive+0xde>
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba22:	f000 fabe 	bl	800bfa2 <prvCopyDataFromQueue>
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	1e5a      	subs	r2, r3, #1
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	639a      	str	r2, [r3, #56]	; 0x38
 800ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00f      	beq.n	800ba56 <xQueueReceive+0xd6>
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	3310      	adds	r3, #16
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 ffb2 	bl	800c9a4 <xTaskRemoveFromEventList>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d007      	beq.n	800ba56 <xQueueReceive+0xd6>
 800ba46:	4b3d      	ldr	r3, [pc, #244]	; (800bb3c <xQueueReceive+0x1bc>)
 800ba48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f001 fce5 	bl	800d424 <vPortExitCritical>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e069      	b.n	800bb32 <xQueueReceive+0x1b2>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d103      	bne.n	800ba6c <xQueueReceive+0xec>
 800ba64:	f001 fcde 	bl	800d424 <vPortExitCritical>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e062      	b.n	800bb32 <xQueueReceive+0x1b2>
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <xQueueReceive+0x100>
 800ba72:	f107 0310 	add.w	r3, r7, #16
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 fff6 	bl	800ca68 <vTaskInternalSetTimeOutState>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba80:	f001 fcd0 	bl	800d424 <vPortExitCritical>
 800ba84:	f000 fda6 	bl	800c5d4 <vTaskSuspendAll>
 800ba88:	f001 fc9c 	bl	800d3c4 <vPortEnterCritical>
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba92:	b25b      	sxtb	r3, r3
 800ba94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba98:	d103      	bne.n	800baa2 <xQueueReceive+0x122>
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d103      	bne.n	800bab8 <xQueueReceive+0x138>
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bab8:	f001 fcb4 	bl	800d424 <vPortExitCritical>
 800babc:	1d3a      	adds	r2, r7, #4
 800babe:	f107 0310 	add.w	r3, r7, #16
 800bac2:	4611      	mov	r1, r2
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 ffe5 	bl	800ca94 <xTaskCheckForTimeOut>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d123      	bne.n	800bb18 <xQueueReceive+0x198>
 800bad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bad2:	f000 fade 	bl	800c092 <prvIsQueueEmpty>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d017      	beq.n	800bb0c <xQueueReceive+0x18c>
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	3324      	adds	r3, #36	; 0x24
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4611      	mov	r1, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 ff39 	bl	800c95c <vTaskPlaceOnEventList>
 800baea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baec:	f000 fa7f 	bl	800bfee <prvUnlockQueue>
 800baf0:	f000 fd7e 	bl	800c5f0 <xTaskResumeAll>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d189      	bne.n	800ba0e <xQueueReceive+0x8e>
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <xQueueReceive+0x1bc>)
 800bafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	e780      	b.n	800ba0e <xQueueReceive+0x8e>
 800bb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0e:	f000 fa6e 	bl	800bfee <prvUnlockQueue>
 800bb12:	f000 fd6d 	bl	800c5f0 <xTaskResumeAll>
 800bb16:	e77a      	b.n	800ba0e <xQueueReceive+0x8e>
 800bb18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb1a:	f000 fa68 	bl	800bfee <prvUnlockQueue>
 800bb1e:	f000 fd67 	bl	800c5f0 <xTaskResumeAll>
 800bb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb24:	f000 fab5 	bl	800c092 <prvIsQueueEmpty>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f43f af6f 	beq.w	800ba0e <xQueueReceive+0x8e>
 800bb30:	2300      	movs	r3, #0
 800bb32:	4618      	mov	r0, r3
 800bb34:	3730      	adds	r7, #48	; 0x30
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <xQueueSemaphoreTake>:
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08e      	sub	sp, #56	; 0x38
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb52:	2300      	movs	r3, #0
 800bb54:	633b      	str	r3, [r7, #48]	; 0x30
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xQueueSemaphoreTake+0x32>
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueSemaphoreTake+0x30>
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <xQueueSemaphoreTake+0x50>
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <xQueueSemaphoreTake+0x4e>
 800bb90:	f001 f8c8 	bl	800cd24 <xTaskGetSchedulerState>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <xQueueSemaphoreTake+0x60>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <xQueueSemaphoreTake+0x64>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e000      	b.n	800bba6 <xQueueSemaphoreTake+0x66>
 800bba4:	2300      	movs	r3, #0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <xQueueSemaphoreTake+0x80>
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	61bb      	str	r3, [r7, #24]
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <xQueueSemaphoreTake+0x7e>
 800bbc0:	f001 fc00 	bl	800d3c4 <vPortEnterCritical>
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d024      	beq.n	800bc1a <xQueueSemaphoreTake+0xda>
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	639a      	str	r2, [r3, #56]	; 0x38
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d104      	bne.n	800bbea <xQueueSemaphoreTake+0xaa>
 800bbe0:	f001 fa48 	bl	800d074 <pvTaskIncrementMutexHeldCount>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	609a      	str	r2, [r3, #8]
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00f      	beq.n	800bc12 <xQueueSemaphoreTake+0xd2>
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	3310      	adds	r3, #16
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fed4 	bl	800c9a4 <xTaskRemoveFromEventList>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d007      	beq.n	800bc12 <xQueueSemaphoreTake+0xd2>
 800bc02:	4b54      	ldr	r3, [pc, #336]	; (800bd54 <xQueueSemaphoreTake+0x214>)
 800bc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f001 fc07 	bl	800d424 <vPortExitCritical>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e097      	b.n	800bd4a <xQueueSemaphoreTake+0x20a>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d111      	bne.n	800bc44 <xQueueSemaphoreTake+0x104>
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <xQueueSemaphoreTake+0xfc>
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueSemaphoreTake+0xfa>
 800bc3c:	f001 fbf2 	bl	800d424 <vPortExitCritical>
 800bc40:	2300      	movs	r3, #0
 800bc42:	e082      	b.n	800bd4a <xQueueSemaphoreTake+0x20a>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d106      	bne.n	800bc58 <xQueueSemaphoreTake+0x118>
 800bc4a:	f107 030c 	add.w	r3, r7, #12
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 ff0a 	bl	800ca68 <vTaskInternalSetTimeOutState>
 800bc54:	2301      	movs	r3, #1
 800bc56:	637b      	str	r3, [r7, #52]	; 0x34
 800bc58:	f001 fbe4 	bl	800d424 <vPortExitCritical>
 800bc5c:	f000 fcba 	bl	800c5d4 <vTaskSuspendAll>
 800bc60:	f001 fbb0 	bl	800d3c4 <vPortEnterCritical>
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc6a:	b25b      	sxtb	r3, r3
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d103      	bne.n	800bc7a <xQueueSemaphoreTake+0x13a>
 800bc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc80:	b25b      	sxtb	r3, r3
 800bc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc86:	d103      	bne.n	800bc90 <xQueueSemaphoreTake+0x150>
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc90:	f001 fbc8 	bl	800d424 <vPortExitCritical>
 800bc94:	463a      	mov	r2, r7
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fef9 	bl	800ca94 <xTaskCheckForTimeOut>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d132      	bne.n	800bd0e <xQueueSemaphoreTake+0x1ce>
 800bca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcaa:	f000 f9f2 	bl	800c092 <prvIsQueueEmpty>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d026      	beq.n	800bd02 <xQueueSemaphoreTake+0x1c2>
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d109      	bne.n	800bcd0 <xQueueSemaphoreTake+0x190>
 800bcbc:	f001 fb82 	bl	800d3c4 <vPortEnterCritical>
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f001 f84b 	bl	800cd60 <xTaskPriorityInherit>
 800bcca:	6338      	str	r0, [r7, #48]	; 0x30
 800bccc:	f001 fbaa 	bl	800d424 <vPortExitCritical>
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	3324      	adds	r3, #36	; 0x24
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fe3f 	bl	800c95c <vTaskPlaceOnEventList>
 800bcde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bce0:	f000 f985 	bl	800bfee <prvUnlockQueue>
 800bce4:	f000 fc84 	bl	800c5f0 <xTaskResumeAll>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f47f af68 	bne.w	800bbc0 <xQueueSemaphoreTake+0x80>
 800bcf0:	4b18      	ldr	r3, [pc, #96]	; (800bd54 <xQueueSemaphoreTake+0x214>)
 800bcf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	e75e      	b.n	800bbc0 <xQueueSemaphoreTake+0x80>
 800bd02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd04:	f000 f973 	bl	800bfee <prvUnlockQueue>
 800bd08:	f000 fc72 	bl	800c5f0 <xTaskResumeAll>
 800bd0c:	e758      	b.n	800bbc0 <xQueueSemaphoreTake+0x80>
 800bd0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd10:	f000 f96d 	bl	800bfee <prvUnlockQueue>
 800bd14:	f000 fc6c 	bl	800c5f0 <xTaskResumeAll>
 800bd18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd1a:	f000 f9ba 	bl	800c092 <prvIsQueueEmpty>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f43f af4d 	beq.w	800bbc0 <xQueueSemaphoreTake+0x80>
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00d      	beq.n	800bd48 <xQueueSemaphoreTake+0x208>
 800bd2c:	f001 fb4a 	bl	800d3c4 <vPortEnterCritical>
 800bd30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd32:	f000 f8b4 	bl	800be9e <prvGetDisinheritPriorityAfterTimeout>
 800bd36:	6278      	str	r0, [r7, #36]	; 0x24
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 f90a 	bl	800cf58 <vTaskPriorityDisinheritAfterTimeout>
 800bd44:	f001 fb6e 	bl	800d424 <vPortExitCritical>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3738      	adds	r7, #56	; 0x38
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	e000ed04 	.word	0xe000ed04

0800bd58 <xQueueReceiveFromISR>:
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08e      	sub	sp, #56	; 0x38
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	633b      	str	r3, [r7, #48]	; 0x30
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <xQueueReceiveFromISR+0x2c>
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	623b      	str	r3, [r7, #32]
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <xQueueReceiveFromISR+0x2a>
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d103      	bne.n	800bd92 <xQueueReceiveFromISR+0x3a>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <xQueueReceiveFromISR+0x3e>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e000      	b.n	800bd98 <xQueueReceiveFromISR+0x40>
 800bd96:	2300      	movs	r3, #0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10a      	bne.n	800bdb2 <xQueueReceiveFromISR+0x5a>
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	61fb      	str	r3, [r7, #28]
 800bdae:	bf00      	nop
 800bdb0:	e7fe      	b.n	800bdb0 <xQueueReceiveFromISR+0x58>
 800bdb2:	f001 fbe9 	bl	800d588 <vPortValidateInterruptPriority>
 800bdb6:	f3ef 8211 	mrs	r2, BASEPRI
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	61ba      	str	r2, [r7, #24]
 800bdcc:	617b      	str	r3, [r7, #20]
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d02f      	beq.n	800be3e <xQueueReceiveFromISR+0xe6>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bde8:	68b9      	ldr	r1, [r7, #8]
 800bdea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdec:	f000 f8d9 	bl	800bfa2 <prvCopyDataFromQueue>
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	1e5a      	subs	r2, r3, #1
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	639a      	str	r2, [r3, #56]	; 0x38
 800bdf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be00:	d112      	bne.n	800be28 <xQueueReceiveFromISR+0xd0>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d016      	beq.n	800be38 <xQueueReceiveFromISR+0xe0>
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	3310      	adds	r3, #16
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fdc8 	bl	800c9a4 <xTaskRemoveFromEventList>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00e      	beq.n	800be38 <xQueueReceiveFromISR+0xe0>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00b      	beq.n	800be38 <xQueueReceiveFromISR+0xe0>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	e007      	b.n	800be38 <xQueueReceiveFromISR+0xe0>
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be2c:	3301      	adds	r3, #1
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	b25a      	sxtb	r2, r3
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be38:	2301      	movs	r3, #1
 800be3a:	637b      	str	r3, [r7, #52]	; 0x34
 800be3c:	e001      	b.n	800be42 <xQueueReceiveFromISR+0xea>
 800be3e:	2300      	movs	r3, #0
 800be40:	637b      	str	r3, [r7, #52]	; 0x34
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	613b      	str	r3, [r7, #16]
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	bf00      	nop
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	4618      	mov	r0, r3
 800be52:	3738      	adds	r7, #56	; 0x38
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <vQueueDelete>:
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <vQueueDelete+0x28>
 800be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	60bb      	str	r3, [r7, #8]
 800be7c:	bf00      	nop
 800be7e:	e7fe      	b.n	800be7e <vQueueDelete+0x26>
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f935 	bl	800c0f0 <vQueueUnregisterQueue>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <vQueueDelete+0x3e>
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f001 fc85 	bl	800d7a0 <vPortFree>
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <prvGetDisinheritPriorityAfterTimeout>:
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d006      	beq.n	800bebc <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f1c3 0307 	rsb	r3, r3, #7
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	e001      	b.n	800bec0 <prvGetDisinheritPriorityAfterTimeout+0x22>
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <prvCopyDataToQueue>:
 800bece:	b580      	push	{r7, lr}
 800bed0:	b086      	sub	sp, #24
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
 800beda:	2300      	movs	r3, #0
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10d      	bne.n	800bf08 <prvCopyDataToQueue+0x3a>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d14d      	bne.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 ffa7 	bl	800ce4c <xTaskPriorityDisinherit>
 800befe:	6178      	str	r0, [r7, #20]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	609a      	str	r2, [r3, #8]
 800bf06:	e043      	b.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d119      	bne.n	800bf42 <prvCopyDataToQueue+0x74>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6858      	ldr	r0, [r3, #4]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf16:	461a      	mov	r2, r3
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	f002 fc16 	bl	800e74a <memcpy>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf26:	441a      	add	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	605a      	str	r2, [r3, #4]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d32b      	bcc.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	605a      	str	r2, [r3, #4]
 800bf40:	e026      	b.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	68d8      	ldr	r0, [r3, #12]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68b9      	ldr	r1, [r7, #8]
 800bf4e:	f002 fbfc 	bl	800e74a <memcpy>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68da      	ldr	r2, [r3, #12]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5a:	425b      	negs	r3, r3
 800bf5c:	441a      	add	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	60da      	str	r2, [r3, #12]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d207      	bcs.n	800bf7e <prvCopyDataToQueue+0xb0>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689a      	ldr	r2, [r3, #8]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	425b      	negs	r3, r3
 800bf78:	441a      	add	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	60da      	str	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d105      	bne.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <prvCopyDataToQueue+0xc2>
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	613b      	str	r3, [r7, #16]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	1c5a      	adds	r2, r3, #1
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <prvCopyDataFromQueue>:
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b082      	sub	sp, #8
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d018      	beq.n	800bfe6 <prvCopyDataFromQueue+0x44>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbc:	441a      	add	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	60da      	str	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68da      	ldr	r2, [r3, #12]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d303      	bcc.n	800bfd6 <prvCopyDataFromQueue+0x34>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	60da      	str	r2, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68d9      	ldr	r1, [r3, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	461a      	mov	r2, r3
 800bfe0:	6838      	ldr	r0, [r7, #0]
 800bfe2:	f002 fbb2 	bl	800e74a <memcpy>
 800bfe6:	bf00      	nop
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <prvUnlockQueue>:
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	f001 f9e5 	bl	800d3c4 <vPortEnterCritical>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c000:	73fb      	strb	r3, [r7, #15]
 800c002:	e011      	b.n	800c028 <prvUnlockQueue+0x3a>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d012      	beq.n	800c032 <prvUnlockQueue+0x44>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3324      	adds	r3, #36	; 0x24
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fcc7 	bl	800c9a4 <xTaskRemoveFromEventList>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <prvUnlockQueue+0x32>
 800c01c:	f000 fd9c 	bl	800cb58 <vTaskMissedYield>
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	3b01      	subs	r3, #1
 800c024:	b2db      	uxtb	r3, r3
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dce9      	bgt.n	800c004 <prvUnlockQueue+0x16>
 800c030:	e000      	b.n	800c034 <prvUnlockQueue+0x46>
 800c032:	bf00      	nop
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	22ff      	movs	r2, #255	; 0xff
 800c038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c03c:	f001 f9f2 	bl	800d424 <vPortExitCritical>
 800c040:	f001 f9c0 	bl	800d3c4 <vPortEnterCritical>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c04a:	73bb      	strb	r3, [r7, #14]
 800c04c:	e011      	b.n	800c072 <prvUnlockQueue+0x84>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d012      	beq.n	800c07c <prvUnlockQueue+0x8e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	3310      	adds	r3, #16
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fca2 	bl	800c9a4 <xTaskRemoveFromEventList>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d001      	beq.n	800c06a <prvUnlockQueue+0x7c>
 800c066:	f000 fd77 	bl	800cb58 <vTaskMissedYield>
 800c06a:	7bbb      	ldrb	r3, [r7, #14]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	73bb      	strb	r3, [r7, #14]
 800c072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dce9      	bgt.n	800c04e <prvUnlockQueue+0x60>
 800c07a:	e000      	b.n	800c07e <prvUnlockQueue+0x90>
 800c07c:	bf00      	nop
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	22ff      	movs	r2, #255	; 0xff
 800c082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c086:	f001 f9cd 	bl	800d424 <vPortExitCritical>
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <prvIsQueueEmpty>:
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	f001 f993 	bl	800d3c4 <vPortEnterCritical>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <prvIsQueueEmpty+0x1a>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	e001      	b.n	800c0b0 <prvIsQueueEmpty+0x1e>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	f001 f9b8 	bl	800d424 <vPortExitCritical>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <prvIsQueueFull>:
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	f001 f97d 	bl	800d3c4 <vPortEnterCritical>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d102      	bne.n	800c0dc <prvIsQueueFull+0x1e>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e001      	b.n	800c0e0 <prvIsQueueFull+0x22>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	f001 f9a0 	bl	800d424 <vPortExitCritical>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <vQueueUnregisterQueue>:
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	e016      	b.n	800c12c <vQueueUnregisterQueue+0x3c>
 800c0fe:	4a10      	ldr	r2, [pc, #64]	; (800c140 <vQueueUnregisterQueue+0x50>)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	4413      	add	r3, r2
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d10b      	bne.n	800c126 <vQueueUnregisterQueue+0x36>
 800c10e:	4a0c      	ldr	r2, [pc, #48]	; (800c140 <vQueueUnregisterQueue+0x50>)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2100      	movs	r1, #0
 800c114:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <vQueueUnregisterQueue+0x50>)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	4413      	add	r3, r2
 800c120:	2200      	movs	r2, #0
 800c122:	605a      	str	r2, [r3, #4]
 800c124:	e006      	b.n	800c134 <vQueueUnregisterQueue+0x44>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3301      	adds	r3, #1
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b07      	cmp	r3, #7
 800c130:	d9e5      	bls.n	800c0fe <vQueueUnregisterQueue+0xe>
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	2000413c 	.word	0x2000413c

0800c144 <xTaskCreateStatic>:
 800c144:	b580      	push	{r7, lr}
 800c146:	b08e      	sub	sp, #56	; 0x38
 800c148:	af04      	add	r7, sp, #16
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10a      	bne.n	800c16e <xTaskCreateStatic+0x2a>
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	623b      	str	r3, [r7, #32]
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xTaskCreateStatic+0x28>
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <xTaskCreateStatic+0x46>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	61fb      	str	r3, [r7, #28]
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xTaskCreateStatic+0x44>
 800c18a:	23a0      	movs	r3, #160	; 0xa0
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2ba0      	cmp	r3, #160	; 0xa0
 800c192:	d00a      	beq.n	800c1aa <xTaskCreateStatic+0x66>
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	61bb      	str	r3, [r7, #24]
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xTaskCreateStatic+0x64>
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d01e      	beq.n	800c1f0 <xTaskCreateStatic+0xac>
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01b      	beq.n	800c1f0 <xTaskCreateStatic+0xac>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c0:	631a      	str	r2, [r3, #48]	; 0x30
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	9303      	str	r3, [sp, #12]
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	f107 0314 	add.w	r3, r7, #20
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 f850 	bl	800c288 <prvInitialiseNewTask>
 800c1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1ea:	f000 f8eb 	bl	800c3c4 <prvAddNewTaskToReadyList>
 800c1ee:	e001      	b.n	800c1f4 <xTaskCreateStatic+0xb0>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3728      	adds	r7, #40	; 0x28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <xTaskCreate>:
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b08c      	sub	sp, #48	; 0x30
 800c202:	af04      	add	r7, sp, #16
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	60b9      	str	r1, [r7, #8]
 800c208:	603b      	str	r3, [r7, #0]
 800c20a:	4613      	mov	r3, r2
 800c20c:	80fb      	strh	r3, [r7, #6]
 800c20e:	88fb      	ldrh	r3, [r7, #6]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4618      	mov	r0, r3
 800c214:	f001 f9f8 	bl	800d608 <pvPortMalloc>
 800c218:	6178      	str	r0, [r7, #20]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00e      	beq.n	800c23e <xTaskCreate+0x40>
 800c220:	20a0      	movs	r0, #160	; 0xa0
 800c222:	f001 f9f1 	bl	800d608 <pvPortMalloc>
 800c226:	61f8      	str	r0, [r7, #28]
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <xTaskCreate+0x38>
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	631a      	str	r2, [r3, #48]	; 0x30
 800c234:	e005      	b.n	800c242 <xTaskCreate+0x44>
 800c236:	6978      	ldr	r0, [r7, #20]
 800c238:	f001 fab2 	bl	800d7a0 <vPortFree>
 800c23c:	e001      	b.n	800c242 <xTaskCreate+0x44>
 800c23e:	2300      	movs	r3, #0
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d017      	beq.n	800c278 <xTaskCreate+0x7a>
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800c250:	88fa      	ldrh	r2, [r7, #6]
 800c252:	2300      	movs	r3, #0
 800c254:	9303      	str	r3, [sp, #12]
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	9302      	str	r3, [sp, #8]
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	9301      	str	r3, [sp, #4]
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 f80e 	bl	800c288 <prvInitialiseNewTask>
 800c26c:	69f8      	ldr	r0, [r7, #28]
 800c26e:	f000 f8a9 	bl	800c3c4 <prvAddNewTaskToReadyList>
 800c272:	2301      	movs	r3, #1
 800c274:	61bb      	str	r3, [r7, #24]
 800c276:	e002      	b.n	800c27e <xTaskCreate+0x80>
 800c278:	f04f 33ff 	mov.w	r3, #4294967295
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <prvInitialiseNewTask>:
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	f023 0307 	bic.w	r3, r3, #7
 800c2ae:	61bb      	str	r3, [r7, #24]
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f003 0307 	and.w	r3, r3, #7
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <prvInitialiseNewTask+0x48>
 800c2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	bf00      	nop
 800c2ce:	e7fe      	b.n	800c2ce <prvInitialiseNewTask+0x46>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d01f      	beq.n	800c316 <prvInitialiseNewTask+0x8e>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	e012      	b.n	800c302 <prvInitialiseNewTask+0x7a>
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	7819      	ldrb	r1, [r3, #0]
 800c2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	3334      	adds	r3, #52	; 0x34
 800c2ec:	460a      	mov	r2, r1
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <prvInitialiseNewTask+0x82>
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	3301      	adds	r3, #1
 800c300:	61fb      	str	r3, [r7, #28]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	2b0f      	cmp	r3, #15
 800c306:	d9e9      	bls.n	800c2dc <prvInitialiseNewTask+0x54>
 800c308:	e000      	b.n	800c30c <prvInitialiseNewTask+0x84>
 800c30a:	bf00      	nop
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c314:	e003      	b.n	800c31e <prvInitialiseNewTask+0x96>
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	2b06      	cmp	r3, #6
 800c322:	d901      	bls.n	800c328 <prvInitialiseNewTask+0xa0>
 800c324:	2306      	movs	r3, #6
 800c326:	62bb      	str	r3, [r7, #40]	; 0x28
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c32c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c332:	645a      	str	r2, [r3, #68]	; 0x44
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	2200      	movs	r2, #0
 800c338:	649a      	str	r2, [r3, #72]	; 0x48
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	3304      	adds	r3, #4
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fe ffc3 	bl	800b2ca <vListInitialiseItem>
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	3318      	adds	r3, #24
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe ffbe 	bl	800b2ca <vListInitialiseItem>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c352:	611a      	str	r2, [r3, #16]
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	f1c3 0207 	rsb	r2, r3, #7
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	619a      	str	r2, [r3, #24]
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c362:	625a      	str	r2, [r3, #36]	; 0x24
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	334c      	adds	r3, #76	; 0x4c
 800c378:	224c      	movs	r2, #76	; 0x4c
 800c37a:	2100      	movs	r1, #0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f002 f8ec 	bl	800e55a <memset>
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	4a0c      	ldr	r2, [pc, #48]	; (800c3b8 <prvInitialiseNewTask+0x130>)
 800c386:	651a      	str	r2, [r3, #80]	; 0x50
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	4a0c      	ldr	r2, [pc, #48]	; (800c3bc <prvInitialiseNewTask+0x134>)
 800c38c:	655a      	str	r2, [r3, #84]	; 0x54
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	4a0b      	ldr	r2, [pc, #44]	; (800c3c0 <prvInitialiseNewTask+0x138>)
 800c392:	659a      	str	r2, [r3, #88]	; 0x58
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	68f9      	ldr	r1, [r7, #12]
 800c398:	69b8      	ldr	r0, [r7, #24]
 800c39a:	f000 fee5 	bl	800d168 <pxPortInitialiseStack>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <prvInitialiseNewTask+0x128>
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	bf00      	nop
 800c3b2:	3720      	adds	r7, #32
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	20007ed0 	.word	0x20007ed0
 800c3bc:	20007f38 	.word	0x20007f38
 800c3c0:	20007fa0 	.word	0x20007fa0

0800c3c4 <prvAddNewTaskToReadyList>:
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	f000 fffa 	bl	800d3c4 <vPortEnterCritical>
 800c3d0:	4b2a      	ldr	r3, [pc, #168]	; (800c47c <prvAddNewTaskToReadyList+0xb8>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	4a29      	ldr	r2, [pc, #164]	; (800c47c <prvAddNewTaskToReadyList+0xb8>)
 800c3d8:	6013      	str	r3, [r2, #0]
 800c3da:	4b29      	ldr	r3, [pc, #164]	; (800c480 <prvAddNewTaskToReadyList+0xbc>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d109      	bne.n	800c3f6 <prvAddNewTaskToReadyList+0x32>
 800c3e2:	4a27      	ldr	r2, [pc, #156]	; (800c480 <prvAddNewTaskToReadyList+0xbc>)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	4b24      	ldr	r3, [pc, #144]	; (800c47c <prvAddNewTaskToReadyList+0xb8>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d110      	bne.n	800c412 <prvAddNewTaskToReadyList+0x4e>
 800c3f0:	f000 fbd6 	bl	800cba0 <prvInitialiseTaskLists>
 800c3f4:	e00d      	b.n	800c412 <prvAddNewTaskToReadyList+0x4e>
 800c3f6:	4b23      	ldr	r3, [pc, #140]	; (800c484 <prvAddNewTaskToReadyList+0xc0>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d109      	bne.n	800c412 <prvAddNewTaskToReadyList+0x4e>
 800c3fe:	4b20      	ldr	r3, [pc, #128]	; (800c480 <prvAddNewTaskToReadyList+0xbc>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	429a      	cmp	r2, r3
 800c40a:	d802      	bhi.n	800c412 <prvAddNewTaskToReadyList+0x4e>
 800c40c:	4a1c      	ldr	r2, [pc, #112]	; (800c480 <prvAddNewTaskToReadyList+0xbc>)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <prvAddNewTaskToReadyList+0xc4>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3301      	adds	r3, #1
 800c418:	4a1b      	ldr	r2, [pc, #108]	; (800c488 <prvAddNewTaskToReadyList+0xc4>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	2201      	movs	r2, #1
 800c422:	409a      	lsls	r2, r3
 800c424:	4b19      	ldr	r3, [pc, #100]	; (800c48c <prvAddNewTaskToReadyList+0xc8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4313      	orrs	r3, r2
 800c42a:	4a18      	ldr	r2, [pc, #96]	; (800c48c <prvAddNewTaskToReadyList+0xc8>)
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c432:	4613      	mov	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4a15      	ldr	r2, [pc, #84]	; (800c490 <prvAddNewTaskToReadyList+0xcc>)
 800c43c:	441a      	add	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3304      	adds	r3, #4
 800c442:	4619      	mov	r1, r3
 800c444:	4610      	mov	r0, r2
 800c446:	f7fe ff4d 	bl	800b2e4 <vListInsertEnd>
 800c44a:	f000 ffeb 	bl	800d424 <vPortExitCritical>
 800c44e:	4b0d      	ldr	r3, [pc, #52]	; (800c484 <prvAddNewTaskToReadyList+0xc0>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00e      	beq.n	800c474 <prvAddNewTaskToReadyList+0xb0>
 800c456:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <prvAddNewTaskToReadyList+0xbc>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	429a      	cmp	r2, r3
 800c462:	d207      	bcs.n	800c474 <prvAddNewTaskToReadyList+0xb0>
 800c464:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <prvAddNewTaskToReadyList+0xd0>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000427c 	.word	0x2000427c
 800c480:	2000417c 	.word	0x2000417c
 800c484:	20004288 	.word	0x20004288
 800c488:	20004298 	.word	0x20004298
 800c48c:	20004284 	.word	0x20004284
 800c490:	20004180 	.word	0x20004180
 800c494:	e000ed04 	.word	0xe000ed04

0800c498 <vTaskDelay>:
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d017      	beq.n	800c4da <vTaskDelay+0x42>
 800c4aa:	4b13      	ldr	r3, [pc, #76]	; (800c4f8 <vTaskDelay+0x60>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00a      	beq.n	800c4c8 <vTaskDelay+0x30>
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	60bb      	str	r3, [r7, #8]
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <vTaskDelay+0x2e>
 800c4c8:	f000 f884 	bl	800c5d4 <vTaskSuspendAll>
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fde4 	bl	800d09c <prvAddCurrentTaskToDelayedList>
 800c4d4:	f000 f88c 	bl	800c5f0 <xTaskResumeAll>
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d107      	bne.n	800c4f0 <vTaskDelay+0x58>
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <vTaskDelay+0x64>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	bf00      	nop
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	200042a4 	.word	0x200042a4
 800c4fc:	e000ed04 	.word	0xe000ed04

0800c500 <vTaskStartScheduler>:
 800c500:	b580      	push	{r7, lr}
 800c502:	b08a      	sub	sp, #40	; 0x28
 800c504:	af04      	add	r7, sp, #16
 800c506:	2300      	movs	r3, #0
 800c508:	60bb      	str	r3, [r7, #8]
 800c50a:	2300      	movs	r3, #0
 800c50c:	607b      	str	r3, [r7, #4]
 800c50e:	463a      	mov	r2, r7
 800c510:	1d39      	adds	r1, r7, #4
 800c512:	f107 0308 	add.w	r3, r7, #8
 800c516:	4618      	mov	r0, r3
 800c518:	f7f5 fa8a 	bl	8001a30 <vApplicationGetIdleTaskMemory>
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	9202      	str	r2, [sp, #8]
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	2300      	movs	r3, #0
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	2300      	movs	r3, #0
 800c52c:	460a      	mov	r2, r1
 800c52e:	4921      	ldr	r1, [pc, #132]	; (800c5b4 <vTaskStartScheduler+0xb4>)
 800c530:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <vTaskStartScheduler+0xb8>)
 800c532:	f7ff fe07 	bl	800c144 <xTaskCreateStatic>
 800c536:	4603      	mov	r3, r0
 800c538:	4a20      	ldr	r2, [pc, #128]	; (800c5bc <vTaskStartScheduler+0xbc>)
 800c53a:	6013      	str	r3, [r2, #0]
 800c53c:	4b1f      	ldr	r3, [pc, #124]	; (800c5bc <vTaskStartScheduler+0xbc>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <vTaskStartScheduler+0x4a>
 800c544:	2301      	movs	r3, #1
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e001      	b.n	800c54e <vTaskStartScheduler+0x4e>
 800c54a:	2300      	movs	r3, #0
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d11b      	bne.n	800c58c <vTaskStartScheduler+0x8c>
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	613b      	str	r3, [r7, #16]
 800c566:	bf00      	nop
 800c568:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <vTaskStartScheduler+0xc0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	334c      	adds	r3, #76	; 0x4c
 800c56e:	4a15      	ldr	r2, [pc, #84]	; (800c5c4 <vTaskStartScheduler+0xc4>)
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <vTaskStartScheduler+0xc8>)
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	4b14      	ldr	r3, [pc, #80]	; (800c5cc <vTaskStartScheduler+0xcc>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	4b13      	ldr	r3, [pc, #76]	; (800c5d0 <vTaskStartScheduler+0xd0>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	f000 fe7b 	bl	800d280 <xPortStartScheduler>
 800c58a:	e00e      	b.n	800c5aa <vTaskStartScheduler+0xaa>
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c592:	d10a      	bne.n	800c5aa <vTaskStartScheduler+0xaa>
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <vTaskStartScheduler+0xa8>
 800c5aa:	bf00      	nop
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	08011d8c 	.word	0x08011d8c
 800c5b8:	0800cb71 	.word	0x0800cb71
 800c5bc:	200042a0 	.word	0x200042a0
 800c5c0:	2000417c 	.word	0x2000417c
 800c5c4:	20000084 	.word	0x20000084
 800c5c8:	2000429c 	.word	0x2000429c
 800c5cc:	20004288 	.word	0x20004288
 800c5d0:	20004280 	.word	0x20004280

0800c5d4 <vTaskSuspendAll>:
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <vTaskSuspendAll+0x18>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	4a03      	ldr	r2, [pc, #12]	; (800c5ec <vTaskSuspendAll+0x18>)
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	bf00      	nop
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	200042a4 	.word	0x200042a4

0800c5f0 <xTaskResumeAll>:
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
 800c5fe:	4b41      	ldr	r3, [pc, #260]	; (800c704 <xTaskResumeAll+0x114>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10a      	bne.n	800c61c <xTaskResumeAll+0x2c>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	bf00      	nop
 800c61a:	e7fe      	b.n	800c61a <xTaskResumeAll+0x2a>
 800c61c:	f000 fed2 	bl	800d3c4 <vPortEnterCritical>
 800c620:	4b38      	ldr	r3, [pc, #224]	; (800c704 <xTaskResumeAll+0x114>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3b01      	subs	r3, #1
 800c626:	4a37      	ldr	r2, [pc, #220]	; (800c704 <xTaskResumeAll+0x114>)
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	4b36      	ldr	r3, [pc, #216]	; (800c704 <xTaskResumeAll+0x114>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d161      	bne.n	800c6f6 <xTaskResumeAll+0x106>
 800c632:	4b35      	ldr	r3, [pc, #212]	; (800c708 <xTaskResumeAll+0x118>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d05d      	beq.n	800c6f6 <xTaskResumeAll+0x106>
 800c63a:	e02e      	b.n	800c69a <xTaskResumeAll+0xaa>
 800c63c:	4b33      	ldr	r3, [pc, #204]	; (800c70c <xTaskResumeAll+0x11c>)
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3318      	adds	r3, #24
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fea8 	bl	800b39e <uxListRemove>
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3304      	adds	r3, #4
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fea3 	bl	800b39e <uxListRemove>
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	2201      	movs	r2, #1
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b2b      	ldr	r3, [pc, #172]	; (800c710 <xTaskResumeAll+0x120>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	4a2a      	ldr	r2, [pc, #168]	; (800c710 <xTaskResumeAll+0x120>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a27      	ldr	r2, [pc, #156]	; (800c714 <xTaskResumeAll+0x124>)
 800c678:	441a      	add	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7fe fe2f 	bl	800b2e4 <vListInsertEnd>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68a:	4b23      	ldr	r3, [pc, #140]	; (800c718 <xTaskResumeAll+0x128>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	429a      	cmp	r2, r3
 800c692:	d302      	bcc.n	800c69a <xTaskResumeAll+0xaa>
 800c694:	4b21      	ldr	r3, [pc, #132]	; (800c71c <xTaskResumeAll+0x12c>)
 800c696:	2201      	movs	r2, #1
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	4b1c      	ldr	r3, [pc, #112]	; (800c70c <xTaskResumeAll+0x11c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1cc      	bne.n	800c63c <xTaskResumeAll+0x4c>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <xTaskResumeAll+0xbc>
 800c6a8:	f000 fb1c 	bl	800cce4 <prvResetNextTaskUnblockTime>
 800c6ac:	4b1c      	ldr	r3, [pc, #112]	; (800c720 <xTaskResumeAll+0x130>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	607b      	str	r3, [r7, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d010      	beq.n	800c6da <xTaskResumeAll+0xea>
 800c6b8:	f000 f836 	bl	800c728 <xTaskIncrementTick>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <xTaskResumeAll+0xd8>
 800c6c2:	4b16      	ldr	r3, [pc, #88]	; (800c71c <xTaskResumeAll+0x12c>)
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	607b      	str	r3, [r7, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1f1      	bne.n	800c6b8 <xTaskResumeAll+0xc8>
 800c6d4:	4b12      	ldr	r3, [pc, #72]	; (800c720 <xTaskResumeAll+0x130>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <xTaskResumeAll+0x12c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d009      	beq.n	800c6f6 <xTaskResumeAll+0x106>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	60bb      	str	r3, [r7, #8]
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	; (800c724 <xTaskResumeAll+0x134>)
 800c6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f000 fe95 	bl	800d424 <vPortExitCritical>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	200042a4 	.word	0x200042a4
 800c708:	2000427c 	.word	0x2000427c
 800c70c:	2000423c 	.word	0x2000423c
 800c710:	20004284 	.word	0x20004284
 800c714:	20004180 	.word	0x20004180
 800c718:	2000417c 	.word	0x2000417c
 800c71c:	20004290 	.word	0x20004290
 800c720:	2000428c 	.word	0x2000428c
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <xTaskIncrementTick>:
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	2300      	movs	r3, #0
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	4b4e      	ldr	r3, [pc, #312]	; (800c86c <xTaskIncrementTick+0x144>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f040 808e 	bne.w	800c858 <xTaskIncrementTick+0x130>
 800c73c:	4b4c      	ldr	r3, [pc, #304]	; (800c870 <xTaskIncrementTick+0x148>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	4a4a      	ldr	r2, [pc, #296]	; (800c870 <xTaskIncrementTick+0x148>)
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d120      	bne.n	800c792 <xTaskIncrementTick+0x6a>
 800c750:	4b48      	ldr	r3, [pc, #288]	; (800c874 <xTaskIncrementTick+0x14c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00a      	beq.n	800c770 <xTaskIncrementTick+0x48>
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	bf00      	nop
 800c76e:	e7fe      	b.n	800c76e <xTaskIncrementTick+0x46>
 800c770:	4b40      	ldr	r3, [pc, #256]	; (800c874 <xTaskIncrementTick+0x14c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	60fb      	str	r3, [r7, #12]
 800c776:	4b40      	ldr	r3, [pc, #256]	; (800c878 <xTaskIncrementTick+0x150>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a3e      	ldr	r2, [pc, #248]	; (800c874 <xTaskIncrementTick+0x14c>)
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	4a3e      	ldr	r2, [pc, #248]	; (800c878 <xTaskIncrementTick+0x150>)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	4b3d      	ldr	r3, [pc, #244]	; (800c87c <xTaskIncrementTick+0x154>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3301      	adds	r3, #1
 800c78a:	4a3c      	ldr	r2, [pc, #240]	; (800c87c <xTaskIncrementTick+0x154>)
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	f000 faa9 	bl	800cce4 <prvResetNextTaskUnblockTime>
 800c792:	4b3b      	ldr	r3, [pc, #236]	; (800c880 <xTaskIncrementTick+0x158>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d348      	bcc.n	800c82e <xTaskIncrementTick+0x106>
 800c79c:	4b35      	ldr	r3, [pc, #212]	; (800c874 <xTaskIncrementTick+0x14c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d104      	bne.n	800c7b0 <xTaskIncrementTick+0x88>
 800c7a6:	4b36      	ldr	r3, [pc, #216]	; (800c880 <xTaskIncrementTick+0x158>)
 800c7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	e03e      	b.n	800c82e <xTaskIncrementTick+0x106>
 800c7b0:	4b30      	ldr	r3, [pc, #192]	; (800c874 <xTaskIncrementTick+0x14c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	60bb      	str	r3, [r7, #8]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	607b      	str	r3, [r7, #4]
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d203      	bcs.n	800c7d0 <xTaskIncrementTick+0xa8>
 800c7c8:	4a2d      	ldr	r2, [pc, #180]	; (800c880 <xTaskIncrementTick+0x158>)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	e02e      	b.n	800c82e <xTaskIncrementTick+0x106>
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe fde2 	bl	800b39e <uxListRemove>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <xTaskIncrementTick+0xc4>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	3318      	adds	r3, #24
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fe fdd9 	bl	800b39e <uxListRemove>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	409a      	lsls	r2, r3
 800c7f4:	4b23      	ldr	r3, [pc, #140]	; (800c884 <xTaskIncrementTick+0x15c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	4a22      	ldr	r2, [pc, #136]	; (800c884 <xTaskIncrementTick+0x15c>)
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4a1f      	ldr	r2, [pc, #124]	; (800c888 <xTaskIncrementTick+0x160>)
 800c80c:	441a      	add	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	3304      	adds	r3, #4
 800c812:	4619      	mov	r1, r3
 800c814:	4610      	mov	r0, r2
 800c816:	f7fe fd65 	bl	800b2e4 <vListInsertEnd>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81e:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <xTaskIncrementTick+0x164>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	429a      	cmp	r2, r3
 800c826:	d3b9      	bcc.n	800c79c <xTaskIncrementTick+0x74>
 800c828:	2301      	movs	r3, #1
 800c82a:	617b      	str	r3, [r7, #20]
 800c82c:	e7b6      	b.n	800c79c <xTaskIncrementTick+0x74>
 800c82e:	4b17      	ldr	r3, [pc, #92]	; (800c88c <xTaskIncrementTick+0x164>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	4914      	ldr	r1, [pc, #80]	; (800c888 <xTaskIncrementTick+0x160>)
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	440b      	add	r3, r1
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d901      	bls.n	800c84a <xTaskIncrementTick+0x122>
 800c846:	2301      	movs	r3, #1
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	4b11      	ldr	r3, [pc, #68]	; (800c890 <xTaskIncrementTick+0x168>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d007      	beq.n	800c862 <xTaskIncrementTick+0x13a>
 800c852:	2301      	movs	r3, #1
 800c854:	617b      	str	r3, [r7, #20]
 800c856:	e004      	b.n	800c862 <xTaskIncrementTick+0x13a>
 800c858:	4b0e      	ldr	r3, [pc, #56]	; (800c894 <xTaskIncrementTick+0x16c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3301      	adds	r3, #1
 800c85e:	4a0d      	ldr	r2, [pc, #52]	; (800c894 <xTaskIncrementTick+0x16c>)
 800c860:	6013      	str	r3, [r2, #0]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	200042a4 	.word	0x200042a4
 800c870:	20004280 	.word	0x20004280
 800c874:	20004234 	.word	0x20004234
 800c878:	20004238 	.word	0x20004238
 800c87c:	20004294 	.word	0x20004294
 800c880:	2000429c 	.word	0x2000429c
 800c884:	20004284 	.word	0x20004284
 800c888:	20004180 	.word	0x20004180
 800c88c:	2000417c 	.word	0x2000417c
 800c890:	20004290 	.word	0x20004290
 800c894:	2000428c 	.word	0x2000428c

0800c898 <vTaskSwitchContext>:
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4b29      	ldr	r3, [pc, #164]	; (800c944 <vTaskSwitchContext+0xac>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <vTaskSwitchContext+0x16>
 800c8a6:	4b28      	ldr	r3, [pc, #160]	; (800c948 <vTaskSwitchContext+0xb0>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	e044      	b.n	800c938 <vTaskSwitchContext+0xa0>
 800c8ae:	4b26      	ldr	r3, [pc, #152]	; (800c948 <vTaskSwitchContext+0xb0>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	4b25      	ldr	r3, [pc, #148]	; (800c94c <vTaskSwitchContext+0xb4>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	fab3 f383 	clz	r3, r3
 800c8c0:	72fb      	strb	r3, [r7, #11]
 800c8c2:	7afb      	ldrb	r3, [r7, #11]
 800c8c4:	f1c3 031f 	rsb	r3, r3, #31
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	4921      	ldr	r1, [pc, #132]	; (800c950 <vTaskSwitchContext+0xb8>)
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4413      	add	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	440b      	add	r3, r1
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <vTaskSwitchContext+0x5c>
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	607b      	str	r3, [r7, #4]
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <vTaskSwitchContext+0x5a>
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4a14      	ldr	r2, [pc, #80]	; (800c950 <vTaskSwitchContext+0xb8>)
 800c900:	4413      	add	r3, r2
 800c902:	613b      	str	r3, [r7, #16]
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	605a      	str	r2, [r3, #4]
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	3308      	adds	r3, #8
 800c916:	429a      	cmp	r2, r3
 800c918:	d104      	bne.n	800c924 <vTaskSwitchContext+0x8c>
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	605a      	str	r2, [r3, #4]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	4a0a      	ldr	r2, [pc, #40]	; (800c954 <vTaskSwitchContext+0xbc>)
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	4b09      	ldr	r3, [pc, #36]	; (800c954 <vTaskSwitchContext+0xbc>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	334c      	adds	r3, #76	; 0x4c
 800c934:	4a08      	ldr	r2, [pc, #32]	; (800c958 <vTaskSwitchContext+0xc0>)
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	bf00      	nop
 800c93a:	371c      	adds	r7, #28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	200042a4 	.word	0x200042a4
 800c948:	20004290 	.word	0x20004290
 800c94c:	20004284 	.word	0x20004284
 800c950:	20004180 	.word	0x20004180
 800c954:	2000417c 	.word	0x2000417c
 800c958:	20000084 	.word	0x20000084

0800c95c <vTaskPlaceOnEventList>:
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <vTaskPlaceOnEventList+0x26>
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <vTaskPlaceOnEventList+0x24>
 800c982:	4b07      	ldr	r3, [pc, #28]	; (800c9a0 <vTaskPlaceOnEventList+0x44>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3318      	adds	r3, #24
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7fe fcce 	bl	800b32c <vListInsert>
 800c990:	2101      	movs	r1, #1
 800c992:	6838      	ldr	r0, [r7, #0]
 800c994:	f000 fb82 	bl	800d09c <prvAddCurrentTaskToDelayedList>
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	2000417c 	.word	0x2000417c

0800c9a4 <xTaskRemoveFromEventList>:
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10a      	bne.n	800c9d0 <xTaskRemoveFromEventList+0x2c>
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <xTaskRemoveFromEventList+0x2a>
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	3318      	adds	r3, #24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe fce2 	bl	800b39e <uxListRemove>
 800c9da:	4b1d      	ldr	r3, [pc, #116]	; (800ca50 <xTaskRemoveFromEventList+0xac>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d11c      	bne.n	800ca1c <xTaskRemoveFromEventList+0x78>
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fcd9 	bl	800b39e <uxListRemove>
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	409a      	lsls	r2, r3
 800c9f4:	4b17      	ldr	r3, [pc, #92]	; (800ca54 <xTaskRemoveFromEventList+0xb0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	4a16      	ldr	r2, [pc, #88]	; (800ca54 <xTaskRemoveFromEventList+0xb0>)
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4a13      	ldr	r2, [pc, #76]	; (800ca58 <xTaskRemoveFromEventList+0xb4>)
 800ca0c:	441a      	add	r2, r3
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	3304      	adds	r3, #4
 800ca12:	4619      	mov	r1, r3
 800ca14:	4610      	mov	r0, r2
 800ca16:	f7fe fc65 	bl	800b2e4 <vListInsertEnd>
 800ca1a:	e005      	b.n	800ca28 <xTaskRemoveFromEventList+0x84>
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3318      	adds	r3, #24
 800ca20:	4619      	mov	r1, r3
 800ca22:	480e      	ldr	r0, [pc, #56]	; (800ca5c <xTaskRemoveFromEventList+0xb8>)
 800ca24:	f7fe fc5e 	bl	800b2e4 <vListInsertEnd>
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2c:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <xTaskRemoveFromEventList+0xbc>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d905      	bls.n	800ca42 <xTaskRemoveFromEventList+0x9e>
 800ca36:	2301      	movs	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <xTaskRemoveFromEventList+0xc0>)
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e001      	b.n	800ca46 <xTaskRemoveFromEventList+0xa2>
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200042a4 	.word	0x200042a4
 800ca54:	20004284 	.word	0x20004284
 800ca58:	20004180 	.word	0x20004180
 800ca5c:	2000423c 	.word	0x2000423c
 800ca60:	2000417c 	.word	0x2000417c
 800ca64:	20004290 	.word	0x20004290

0800ca68 <vTaskInternalSetTimeOutState>:
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <vTaskInternalSetTimeOutState+0x24>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <vTaskInternalSetTimeOutState+0x28>)
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	605a      	str	r2, [r3, #4]
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	20004294 	.word	0x20004294
 800ca90:	20004280 	.word	0x20004280

0800ca94 <xTaskCheckForTimeOut>:
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <xTaskCheckForTimeOut+0x26>
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	613b      	str	r3, [r7, #16]
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xTaskCheckForTimeOut+0x24>
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10a      	bne.n	800cad6 <xTaskCheckForTimeOut+0x42>
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xTaskCheckForTimeOut+0x40>
 800cad6:	f000 fc75 	bl	800d3c4 <vPortEnterCritical>
 800cada:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <xTaskCheckForTimeOut+0xbc>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	61bb      	str	r3, [r7, #24]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	69ba      	ldr	r2, [r7, #24]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	617b      	str	r3, [r7, #20]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf2:	d102      	bne.n	800cafa <xTaskCheckForTimeOut+0x66>
 800caf4:	2300      	movs	r3, #0
 800caf6:	61fb      	str	r3, [r7, #28]
 800caf8:	e023      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <xTaskCheckForTimeOut+0xc0>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d007      	beq.n	800cb16 <xTaskCheckForTimeOut+0x82>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	69ba      	ldr	r2, [r7, #24]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d302      	bcc.n	800cb16 <xTaskCheckForTimeOut+0x82>
 800cb10:	2301      	movs	r3, #1
 800cb12:	61fb      	str	r3, [r7, #28]
 800cb14:	e015      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d20b      	bcs.n	800cb38 <xTaskCheckForTimeOut+0xa4>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff ff9b 	bl	800ca68 <vTaskInternalSetTimeOutState>
 800cb32:	2300      	movs	r3, #0
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e004      	b.n	800cb42 <xTaskCheckForTimeOut+0xae>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	2301      	movs	r3, #1
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	f000 fc6f 	bl	800d424 <vPortExitCritical>
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	20004280 	.word	0x20004280
 800cb54:	20004294 	.word	0x20004294

0800cb58 <vTaskMissedYield>:
 800cb58:	b480      	push	{r7}
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	4b03      	ldr	r3, [pc, #12]	; (800cb6c <vTaskMissedYield+0x14>)
 800cb5e:	2201      	movs	r2, #1
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	bf00      	nop
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr
 800cb6c:	20004290 	.word	0x20004290

0800cb70 <prvIdleTask>:
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	f000 f852 	bl	800cc20 <prvCheckTasksWaitingTermination>
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <prvIdleTask+0x28>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d9f9      	bls.n	800cb78 <prvIdleTask+0x8>
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <prvIdleTask+0x2c>)
 800cb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	e7f0      	b.n	800cb78 <prvIdleTask+0x8>
 800cb96:	bf00      	nop
 800cb98:	20004180 	.word	0x20004180
 800cb9c:	e000ed04 	.word	0xe000ed04

0800cba0 <prvInitialiseTaskLists>:
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	2300      	movs	r3, #0
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	e00c      	b.n	800cbc6 <prvInitialiseTaskLists+0x26>
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	4413      	add	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4a12      	ldr	r2, [pc, #72]	; (800cc00 <prvInitialiseTaskLists+0x60>)
 800cbb8:	4413      	add	r3, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fb65 	bl	800b28a <vListInitialise>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b06      	cmp	r3, #6
 800cbca:	d9ef      	bls.n	800cbac <prvInitialiseTaskLists+0xc>
 800cbcc:	480d      	ldr	r0, [pc, #52]	; (800cc04 <prvInitialiseTaskLists+0x64>)
 800cbce:	f7fe fb5c 	bl	800b28a <vListInitialise>
 800cbd2:	480d      	ldr	r0, [pc, #52]	; (800cc08 <prvInitialiseTaskLists+0x68>)
 800cbd4:	f7fe fb59 	bl	800b28a <vListInitialise>
 800cbd8:	480c      	ldr	r0, [pc, #48]	; (800cc0c <prvInitialiseTaskLists+0x6c>)
 800cbda:	f7fe fb56 	bl	800b28a <vListInitialise>
 800cbde:	480c      	ldr	r0, [pc, #48]	; (800cc10 <prvInitialiseTaskLists+0x70>)
 800cbe0:	f7fe fb53 	bl	800b28a <vListInitialise>
 800cbe4:	480b      	ldr	r0, [pc, #44]	; (800cc14 <prvInitialiseTaskLists+0x74>)
 800cbe6:	f7fe fb50 	bl	800b28a <vListInitialise>
 800cbea:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <prvInitialiseTaskLists+0x78>)
 800cbec:	4a05      	ldr	r2, [pc, #20]	; (800cc04 <prvInitialiseTaskLists+0x64>)
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <prvInitialiseTaskLists+0x7c>)
 800cbf2:	4a05      	ldr	r2, [pc, #20]	; (800cc08 <prvInitialiseTaskLists+0x68>)
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20004180 	.word	0x20004180
 800cc04:	2000420c 	.word	0x2000420c
 800cc08:	20004220 	.word	0x20004220
 800cc0c:	2000423c 	.word	0x2000423c
 800cc10:	20004250 	.word	0x20004250
 800cc14:	20004268 	.word	0x20004268
 800cc18:	20004234 	.word	0x20004234
 800cc1c:	20004238 	.word	0x20004238

0800cc20 <prvCheckTasksWaitingTermination>:
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	e019      	b.n	800cc5c <prvCheckTasksWaitingTermination+0x3c>
 800cc28:	f000 fbcc 	bl	800d3c4 <vPortEnterCritical>
 800cc2c:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <prvCheckTasksWaitingTermination+0x50>)
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	607b      	str	r3, [r7, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe fbb0 	bl	800b39e <uxListRemove>
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <prvCheckTasksWaitingTermination+0x54>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	4a0b      	ldr	r2, [pc, #44]	; (800cc74 <prvCheckTasksWaitingTermination+0x54>)
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	4a0a      	ldr	r2, [pc, #40]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc50:	6013      	str	r3, [r2, #0]
 800cc52:	f000 fbe7 	bl	800d424 <vPortExitCritical>
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f810 	bl	800cc7c <prvDeleteTCB>
 800cc5c:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <prvCheckTasksWaitingTermination+0x58>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e1      	bne.n	800cc28 <prvCheckTasksWaitingTermination+0x8>
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20004250 	.word	0x20004250
 800cc74:	2000427c 	.word	0x2000427c
 800cc78:	20004264 	.word	0x20004264

0800cc7c <prvDeleteTCB>:
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	334c      	adds	r3, #76	; 0x4c
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f001 fca5 	bl	800e5d8 <_reclaim_reent>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d108      	bne.n	800ccaa <prvDeleteTCB+0x2e>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 fd7f 	bl	800d7a0 <vPortFree>
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fd7c 	bl	800d7a0 <vPortFree>
 800cca8:	e018      	b.n	800ccdc <prvDeleteTCB+0x60>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d103      	bne.n	800ccbc <prvDeleteTCB+0x40>
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fd73 	bl	800d7a0 <vPortFree>
 800ccba:	e00f      	b.n	800ccdc <prvDeleteTCB+0x60>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d00a      	beq.n	800ccdc <prvDeleteTCB+0x60>
 800ccc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <prvDeleteTCB+0x5e>
 800ccdc:	bf00      	nop
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <prvResetNextTaskUnblockTime>:
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d104      	bne.n	800ccfe <prvResetNextTaskUnblockTime+0x1a>
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800ccf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	e008      	b.n	800cd10 <prvResetNextTaskUnblockTime+0x2c>
 800ccfe:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	4a04      	ldr	r2, [pc, #16]	; (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	20004234 	.word	0x20004234
 800cd20:	2000429c 	.word	0x2000429c

0800cd24 <xTaskGetSchedulerState>:
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <xTaskGetSchedulerState+0x34>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <xTaskGetSchedulerState+0x14>
 800cd32:	2301      	movs	r3, #1
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	e008      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
 800cd38:	4b08      	ldr	r3, [pc, #32]	; (800cd5c <xTaskGetSchedulerState+0x38>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <xTaskGetSchedulerState+0x22>
 800cd40:	2302      	movs	r3, #2
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	e001      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20004288 	.word	0x20004288
 800cd5c:	200042a4 	.word	0x200042a4

0800cd60 <xTaskPriorityInherit>:
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60bb      	str	r3, [r7, #8]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d05e      	beq.n	800ce34 <xTaskPriorityInherit+0xd4>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	4b31      	ldr	r3, [pc, #196]	; (800ce40 <xTaskPriorityInherit+0xe0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d24e      	bcs.n	800ce22 <xTaskPriorityInherit+0xc2>
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	db06      	blt.n	800cd9a <xTaskPriorityInherit+0x3a>
 800cd8c:	4b2c      	ldr	r3, [pc, #176]	; (800ce40 <xTaskPriorityInherit+0xe0>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd92:	f1c3 0207 	rsb	r2, r3, #7
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	619a      	str	r2, [r3, #24]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6959      	ldr	r1, [r3, #20]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4a26      	ldr	r2, [pc, #152]	; (800ce44 <xTaskPriorityInherit+0xe4>)
 800cdac:	4413      	add	r3, r2
 800cdae:	4299      	cmp	r1, r3
 800cdb0:	d12f      	bne.n	800ce12 <xTaskPriorityInherit+0xb2>
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe faf1 	bl	800b39e <uxListRemove>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <xTaskPriorityInherit+0x78>
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdcc:	43da      	mvns	r2, r3
 800cdce:	4b1e      	ldr	r3, [pc, #120]	; (800ce48 <xTaskPriorityInherit+0xe8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	4a1c      	ldr	r2, [pc, #112]	; (800ce48 <xTaskPriorityInherit+0xe8>)
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	4b19      	ldr	r3, [pc, #100]	; (800ce40 <xTaskPriorityInherit+0xe0>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	62da      	str	r2, [r3, #44]	; 0x2c
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde6:	2201      	movs	r2, #1
 800cde8:	409a      	lsls	r2, r3
 800cdea:	4b17      	ldr	r3, [pc, #92]	; (800ce48 <xTaskPriorityInherit+0xe8>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	4a15      	ldr	r2, [pc, #84]	; (800ce48 <xTaskPriorityInherit+0xe8>)
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4a10      	ldr	r2, [pc, #64]	; (800ce44 <xTaskPriorityInherit+0xe4>)
 800ce02:	441a      	add	r2, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	3304      	adds	r3, #4
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	f7fe fa6a 	bl	800b2e4 <vListInsertEnd>
 800ce10:	e004      	b.n	800ce1c <xTaskPriorityInherit+0xbc>
 800ce12:	4b0b      	ldr	r3, [pc, #44]	; (800ce40 <xTaskPriorityInherit+0xe0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]
 800ce20:	e008      	b.n	800ce34 <xTaskPriorityInherit+0xd4>
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce26:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <xTaskPriorityInherit+0xe0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d201      	bcs.n	800ce34 <xTaskPriorityInherit+0xd4>
 800ce30:	2301      	movs	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	2000417c 	.word	0x2000417c
 800ce44:	20004180 	.word	0x20004180
 800ce48:	20004284 	.word	0x20004284

0800ce4c <xTaskPriorityDisinherit>:
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	617b      	str	r3, [r7, #20]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d06e      	beq.n	800cf40 <xTaskPriorityDisinherit+0xf4>
 800ce62:	4b3a      	ldr	r3, [pc, #232]	; (800cf4c <xTaskPriorityDisinherit+0x100>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d00a      	beq.n	800ce82 <xTaskPriorityDisinherit+0x36>
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <xTaskPriorityDisinherit+0x34>
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10a      	bne.n	800cea0 <xTaskPriorityDisinherit+0x54>
 800ce8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	60bb      	str	r3, [r7, #8]
 800ce9c:	bf00      	nop
 800ce9e:	e7fe      	b.n	800ce9e <xTaskPriorityDisinherit+0x52>
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cea4:	1e5a      	subs	r2, r3, #1
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	649a      	str	r2, [r3, #72]	; 0x48
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d044      	beq.n	800cf40 <xTaskPriorityDisinherit+0xf4>
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d140      	bne.n	800cf40 <xTaskPriorityDisinherit+0xf4>
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fa6b 	bl	800b39e <uxListRemove>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d115      	bne.n	800cefa <xTaskPriorityDisinherit+0xae>
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced2:	491f      	ldr	r1, [pc, #124]	; (800cf50 <xTaskPriorityDisinherit+0x104>)
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d10a      	bne.n	800cefa <xTaskPriorityDisinherit+0xae>
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee8:	2201      	movs	r2, #1
 800ceea:	fa02 f303 	lsl.w	r3, r2, r3
 800ceee:	43da      	mvns	r2, r3
 800cef0:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <xTaskPriorityDisinherit+0x108>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4013      	ands	r3, r2
 800cef6:	4a17      	ldr	r2, [pc, #92]	; (800cf54 <xTaskPriorityDisinherit+0x108>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf06:	f1c3 0207 	rsb	r2, r3, #7
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	619a      	str	r2, [r3, #24]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	2201      	movs	r2, #1
 800cf14:	409a      	lsls	r2, r3
 800cf16:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <xTaskPriorityDisinherit+0x108>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	4a0d      	ldr	r2, [pc, #52]	; (800cf54 <xTaskPriorityDisinherit+0x108>)
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf24:	4613      	mov	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4a08      	ldr	r2, [pc, #32]	; (800cf50 <xTaskPriorityDisinherit+0x104>)
 800cf2e:	441a      	add	r2, r3
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f7fe f9d4 	bl	800b2e4 <vListInsertEnd>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	4618      	mov	r0, r3
 800cf44:	3718      	adds	r7, #24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	2000417c 	.word	0x2000417c
 800cf50:	20004180 	.word	0x20004180
 800cf54:	20004284 	.word	0x20004284

0800cf58 <vTaskPriorityDisinheritAfterTimeout>:
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	61bb      	str	r3, [r7, #24]
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d077      	beq.n	800d060 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	60fb      	str	r3, [r7, #12]
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d902      	bls.n	800cf9e <vTaskPriorityDisinheritAfterTimeout+0x46>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	e002      	b.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	69bb      	ldr	r3, [r7, #24]
 800cfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d058      	beq.n	800d060 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d153      	bne.n	800d060 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800cfb8:	4b2b      	ldr	r3, [pc, #172]	; (800d068 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	69ba      	ldr	r2, [r7, #24]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d10a      	bne.n	800cfd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	60bb      	str	r3, [r7, #8]
 800cfd4:	bf00      	nop
 800cfd6:	e7fe      	b.n	800cfd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	69fa      	ldr	r2, [r7, #28]
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	db04      	blt.n	800cff6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	f1c3 0207 	rsb	r2, r3, #7
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	619a      	str	r2, [r3, #24]
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	6959      	ldr	r1, [r3, #20]
 800cffa:	693a      	ldr	r2, [r7, #16]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4a19      	ldr	r2, [pc, #100]	; (800d06c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d006:	4413      	add	r3, r2
 800d008:	4299      	cmp	r1, r3
 800d00a:	d129      	bne.n	800d060 <vTaskPriorityDisinheritAfterTimeout+0x108>
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	3304      	adds	r3, #4
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe f9c4 	bl	800b39e <uxListRemove>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10a      	bne.n	800d032 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d020:	2201      	movs	r2, #1
 800d022:	fa02 f303 	lsl.w	r3, r2, r3
 800d026:	43da      	mvns	r2, r3
 800d028:	4b11      	ldr	r3, [pc, #68]	; (800d070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4013      	ands	r3, r2
 800d02e:	4a10      	ldr	r2, [pc, #64]	; (800d070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d030:	6013      	str	r3, [r2, #0]
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	2201      	movs	r2, #1
 800d038:	409a      	lsls	r2, r3
 800d03a:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4313      	orrs	r3, r2
 800d040:	4a0b      	ldr	r2, [pc, #44]	; (800d070 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d048:	4613      	mov	r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	4a06      	ldr	r2, [pc, #24]	; (800d06c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d052:	441a      	add	r2, r3
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	3304      	adds	r3, #4
 800d058:	4619      	mov	r1, r3
 800d05a:	4610      	mov	r0, r2
 800d05c:	f7fe f942 	bl	800b2e4 <vListInsertEnd>
 800d060:	bf00      	nop
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	2000417c 	.word	0x2000417c
 800d06c:	20004180 	.word	0x20004180
 800d070:	20004284 	.word	0x20004284

0800d074 <pvTaskIncrementMutexHeldCount>:
 800d074:	b480      	push	{r7}
 800d076:	af00      	add	r7, sp, #0
 800d078:	4b07      	ldr	r3, [pc, #28]	; (800d098 <pvTaskIncrementMutexHeldCount+0x24>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <pvTaskIncrementMutexHeldCount+0x16>
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <pvTaskIncrementMutexHeldCount+0x24>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d086:	3201      	adds	r2, #1
 800d088:	649a      	str	r2, [r3, #72]	; 0x48
 800d08a:	4b03      	ldr	r3, [pc, #12]	; (800d098 <pvTaskIncrementMutexHeldCount+0x24>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4618      	mov	r0, r3
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	2000417c 	.word	0x2000417c

0800d09c <prvAddCurrentTaskToDelayedList>:
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
 800d0a6:	4b29      	ldr	r3, [pc, #164]	; (800d14c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	4b28      	ldr	r3, [pc, #160]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe f973 	bl	800b39e <uxListRemove>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10b      	bne.n	800d0d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d0be:	4b24      	ldr	r3, [pc, #144]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ca:	43da      	mvns	r2, r3
 800d0cc:	4b21      	ldr	r3, [pc, #132]	; (800d154 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	4a20      	ldr	r2, [pc, #128]	; (800d154 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d10a      	bne.n	800d0f4 <prvAddCurrentTaskToDelayedList+0x58>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <prvAddCurrentTaskToDelayedList+0x58>
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	481a      	ldr	r0, [pc, #104]	; (800d158 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d0ee:	f7fe f8f9 	bl	800b2e4 <vListInsertEnd>
 800d0f2:	e026      	b.n	800d142 <prvAddCurrentTaskToDelayedList+0xa6>
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	60bb      	str	r3, [r7, #8]
 800d0fc:	4b14      	ldr	r3, [pc, #80]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	605a      	str	r2, [r3, #4]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d209      	bcs.n	800d120 <prvAddCurrentTaskToDelayedList+0x84>
 800d10c:	4b13      	ldr	r3, [pc, #76]	; (800d15c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3304      	adds	r3, #4
 800d116:	4619      	mov	r1, r3
 800d118:	4610      	mov	r0, r2
 800d11a:	f7fe f907 	bl	800b32c <vListInsert>
 800d11e:	e010      	b.n	800d142 <prvAddCurrentTaskToDelayedList+0xa6>
 800d120:	4b0f      	ldr	r3, [pc, #60]	; (800d160 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	4b0a      	ldr	r3, [pc, #40]	; (800d150 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3304      	adds	r3, #4
 800d12a:	4619      	mov	r1, r3
 800d12c:	4610      	mov	r0, r2
 800d12e:	f7fe f8fd 	bl	800b32c <vListInsert>
 800d132:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d202      	bcs.n	800d142 <prvAddCurrentTaskToDelayedList+0xa6>
 800d13c:	4a09      	ldr	r2, [pc, #36]	; (800d164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20004280 	.word	0x20004280
 800d150:	2000417c 	.word	0x2000417c
 800d154:	20004284 	.word	0x20004284
 800d158:	20004268 	.word	0x20004268
 800d15c:	20004238 	.word	0x20004238
 800d160:	20004234 	.word	0x20004234
 800d164:	2000429c 	.word	0x2000429c

0800d168 <pxPortInitialiseStack>:
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	3b04      	subs	r3, #4
 800d178:	60fb      	str	r3, [r7, #12]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3b04      	subs	r3, #4
 800d186:	60fb      	str	r3, [r7, #12]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f023 0201 	bic.w	r2, r3, #1
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3b04      	subs	r3, #4
 800d196:	60fb      	str	r3, [r7, #12]
 800d198:	4a0c      	ldr	r2, [pc, #48]	; (800d1cc <pxPortInitialiseStack+0x64>)
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3b14      	subs	r3, #20
 800d1a2:	60fb      	str	r3, [r7, #12]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	601a      	str	r2, [r3, #0]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3b04      	subs	r3, #4
 800d1ae:	60fb      	str	r3, [r7, #12]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f06f 0202 	mvn.w	r2, #2
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3b20      	subs	r3, #32
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	0800d1d1 	.word	0x0800d1d1

0800d1d0 <prvTaskExitError>:
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <prvTaskExitError+0x54>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e2:	d00a      	beq.n	800d1fa <prvTaskExitError+0x2a>
 800d1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	60fb      	str	r3, [r7, #12]
 800d1f6:	bf00      	nop
 800d1f8:	e7fe      	b.n	800d1f8 <prvTaskExitError+0x28>
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	60bb      	str	r3, [r7, #8]
 800d20c:	bf00      	nop
 800d20e:	bf00      	nop
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0fc      	beq.n	800d210 <prvTaskExitError+0x40>
 800d216:	bf00      	nop
 800d218:	bf00      	nop
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20000028 	.word	0x20000028
	...

0800d230 <SVC_Handler>:
 800d230:	4b07      	ldr	r3, [pc, #28]	; (800d250 <pxCurrentTCBConst2>)
 800d232:	6819      	ldr	r1, [r3, #0]
 800d234:	6808      	ldr	r0, [r1, #0]
 800d236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23a:	f380 8809 	msr	PSP, r0
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f04f 0000 	mov.w	r0, #0
 800d246:	f380 8811 	msr	BASEPRI, r0
 800d24a:	4770      	bx	lr
 800d24c:	f3af 8000 	nop.w

0800d250 <pxCurrentTCBConst2>:
 800d250:	2000417c 	.word	0x2000417c
 800d254:	bf00      	nop
 800d256:	bf00      	nop

0800d258 <prvPortStartFirstTask>:
 800d258:	4808      	ldr	r0, [pc, #32]	; (800d27c <prvPortStartFirstTask+0x24>)
 800d25a:	6800      	ldr	r0, [r0, #0]
 800d25c:	6800      	ldr	r0, [r0, #0]
 800d25e:	f380 8808 	msr	MSP, r0
 800d262:	f04f 0000 	mov.w	r0, #0
 800d266:	f380 8814 	msr	CONTROL, r0
 800d26a:	b662      	cpsie	i
 800d26c:	b661      	cpsie	f
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	df00      	svc	0
 800d278:	bf00      	nop
 800d27a:	bf00      	nop
 800d27c:	e000ed08 	.word	0xe000ed08

0800d280 <xPortStartScheduler>:
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	4b46      	ldr	r3, [pc, #280]	; (800d3a0 <xPortStartScheduler+0x120>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a46      	ldr	r2, [pc, #280]	; (800d3a4 <xPortStartScheduler+0x124>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d10a      	bne.n	800d2a6 <xPortStartScheduler+0x26>
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	613b      	str	r3, [r7, #16]
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <xPortStartScheduler+0x24>
 800d2a6:	4b3e      	ldr	r3, [pc, #248]	; (800d3a0 <xPortStartScheduler+0x120>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a3f      	ldr	r2, [pc, #252]	; (800d3a8 <xPortStartScheduler+0x128>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d10a      	bne.n	800d2c6 <xPortStartScheduler+0x46>
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	bf00      	nop
 800d2c4:	e7fe      	b.n	800d2c4 <xPortStartScheduler+0x44>
 800d2c6:	4b39      	ldr	r3, [pc, #228]	; (800d3ac <xPortStartScheduler+0x12c>)
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	607b      	str	r3, [r7, #4]
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	22ff      	movs	r2, #255	; 0xff
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	70fb      	strb	r3, [r7, #3]
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	4b31      	ldr	r3, [pc, #196]	; (800d3b0 <xPortStartScheduler+0x130>)
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	4b31      	ldr	r3, [pc, #196]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d2f0:	2207      	movs	r2, #7
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e009      	b.n	800d30a <xPortStartScheduler+0x8a>
 800d2f6:	4b2f      	ldr	r3, [pc, #188]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	4a2d      	ldr	r2, [pc, #180]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	78fb      	ldrb	r3, [r7, #3]
 800d302:	b2db      	uxtb	r3, r3
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	b2db      	uxtb	r3, r3
 800d308:	70fb      	strb	r3, [r7, #3]
 800d30a:	78fb      	ldrb	r3, [r7, #3]
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d312:	2b80      	cmp	r3, #128	; 0x80
 800d314:	d0ef      	beq.n	800d2f6 <xPortStartScheduler+0x76>
 800d316:	4b27      	ldr	r3, [pc, #156]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f1c3 0307 	rsb	r3, r3, #7
 800d31e:	2b04      	cmp	r3, #4
 800d320:	d00a      	beq.n	800d338 <xPortStartScheduler+0xb8>
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	60bb      	str	r3, [r7, #8]
 800d334:	bf00      	nop
 800d336:	e7fe      	b.n	800d336 <xPortStartScheduler+0xb6>
 800d338:	4b1e      	ldr	r3, [pc, #120]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	4a1d      	ldr	r2, [pc, #116]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d34a:	4a1a      	ldr	r2, [pc, #104]	; (800d3b4 <xPortStartScheduler+0x134>)
 800d34c:	6013      	str	r3, [r2, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	b2da      	uxtb	r2, r3
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	4b18      	ldr	r3, [pc, #96]	; (800d3b8 <xPortStartScheduler+0x138>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a17      	ldr	r2, [pc, #92]	; (800d3b8 <xPortStartScheduler+0x138>)
 800d35c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d360:	6013      	str	r3, [r2, #0]
 800d362:	4b15      	ldr	r3, [pc, #84]	; (800d3b8 <xPortStartScheduler+0x138>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a14      	ldr	r2, [pc, #80]	; (800d3b8 <xPortStartScheduler+0x138>)
 800d368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	f000 f8dd 	bl	800d52c <vPortSetupTimerInterrupt>
 800d372:	4b12      	ldr	r3, [pc, #72]	; (800d3bc <xPortStartScheduler+0x13c>)
 800d374:	2200      	movs	r2, #0
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f000 f8fc 	bl	800d574 <vPortEnableVFP>
 800d37c:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <xPortStartScheduler+0x140>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a0f      	ldr	r2, [pc, #60]	; (800d3c0 <xPortStartScheduler+0x140>)
 800d382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	f7ff ff66 	bl	800d258 <prvPortStartFirstTask>
 800d38c:	f7ff fa84 	bl	800c898 <vTaskSwitchContext>
 800d390:	f7ff ff1e 	bl	800d1d0 <prvTaskExitError>
 800d394:	2300      	movs	r3, #0
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	e000ed00 	.word	0xe000ed00
 800d3a4:	410fc271 	.word	0x410fc271
 800d3a8:	410fc270 	.word	0x410fc270
 800d3ac:	e000e400 	.word	0xe000e400
 800d3b0:	200042a8 	.word	0x200042a8
 800d3b4:	200042ac 	.word	0x200042ac
 800d3b8:	e000ed20 	.word	0xe000ed20
 800d3bc:	20000028 	.word	0x20000028
 800d3c0:	e000ef34 	.word	0xe000ef34

0800d3c4 <vPortEnterCritical>:
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	607b      	str	r3, [r7, #4]
 800d3dc:	bf00      	nop
 800d3de:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <vPortEnterCritical+0x58>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	4a0d      	ldr	r2, [pc, #52]	; (800d41c <vPortEnterCritical+0x58>)
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	4b0c      	ldr	r3, [pc, #48]	; (800d41c <vPortEnterCritical+0x58>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d10f      	bne.n	800d410 <vPortEnterCritical+0x4c>
 800d3f0:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <vPortEnterCritical+0x5c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <vPortEnterCritical+0x4c>
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	603b      	str	r3, [r7, #0]
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <vPortEnterCritical+0x4a>
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	20000028 	.word	0x20000028
 800d420:	e000ed04 	.word	0xe000ed04

0800d424 <vPortExitCritical>:
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4b12      	ldr	r3, [pc, #72]	; (800d474 <vPortExitCritical+0x50>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10a      	bne.n	800d448 <vPortExitCritical+0x24>
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	607b      	str	r3, [r7, #4]
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <vPortExitCritical+0x22>
 800d448:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <vPortExitCritical+0x50>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	4a09      	ldr	r2, [pc, #36]	; (800d474 <vPortExitCritical+0x50>)
 800d450:	6013      	str	r3, [r2, #0]
 800d452:	4b08      	ldr	r3, [pc, #32]	; (800d474 <vPortExitCritical+0x50>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <vPortExitCritical+0x42>
 800d45a:	2300      	movs	r3, #0
 800d45c:	603b      	str	r3, [r7, #0]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	20000028 	.word	0x20000028
	...

0800d480 <PendSV_Handler>:
 800d480:	f3ef 8009 	mrs	r0, PSP
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	4b15      	ldr	r3, [pc, #84]	; (800d4e0 <pxCurrentTCBConst>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	f01e 0f10 	tst.w	lr, #16
 800d490:	bf08      	it	eq
 800d492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	6010      	str	r0, [r2, #0]
 800d49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d4a4:	f380 8811 	msr	BASEPRI, r0
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f7ff f9f2 	bl	800c898 <vTaskSwitchContext>
 800d4b4:	f04f 0000 	mov.w	r0, #0
 800d4b8:	f380 8811 	msr	BASEPRI, r0
 800d4bc:	bc09      	pop	{r0, r3}
 800d4be:	6819      	ldr	r1, [r3, #0]
 800d4c0:	6808      	ldr	r0, [r1, #0]
 800d4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c6:	f01e 0f10 	tst.w	lr, #16
 800d4ca:	bf08      	it	eq
 800d4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4d0:	f380 8809 	msr	PSP, r0
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	f3af 8000 	nop.w

0800d4e0 <pxCurrentTCBConst>:
 800d4e0:	2000417c 	.word	0x2000417c
 800d4e4:	bf00      	nop
 800d4e6:	bf00      	nop

0800d4e8 <SysTick_Handler>:
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	607b      	str	r3, [r7, #4]
 800d500:	bf00      	nop
 800d502:	f7ff f911 	bl	800c728 <xTaskIncrementTick>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d003      	beq.n	800d514 <SysTick_Handler+0x2c>
 800d50c:	4b06      	ldr	r3, [pc, #24]	; (800d528 <SysTick_Handler+0x40>)
 800d50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d512:	601a      	str	r2, [r3, #0]
 800d514:	2300      	movs	r3, #0
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	bf00      	nop
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <vPortSetupTimerInterrupt>:
 800d52c:	b480      	push	{r7}
 800d52e:	af00      	add	r7, sp, #0
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <vPortSetupTimerInterrupt+0x34>)
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <vPortSetupTimerInterrupt+0x38>)
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	4b0a      	ldr	r3, [pc, #40]	; (800d568 <vPortSetupTimerInterrupt+0x3c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a0a      	ldr	r2, [pc, #40]	; (800d56c <vPortSetupTimerInterrupt+0x40>)
 800d542:	fba2 2303 	umull	r2, r3, r2, r3
 800d546:	099b      	lsrs	r3, r3, #6
 800d548:	4a09      	ldr	r2, [pc, #36]	; (800d570 <vPortSetupTimerInterrupt+0x44>)
 800d54a:	3b01      	subs	r3, #1
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	4b04      	ldr	r3, [pc, #16]	; (800d560 <vPortSetupTimerInterrupt+0x34>)
 800d550:	2207      	movs	r2, #7
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	bf00      	nop
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	e000e010 	.word	0xe000e010
 800d564:	e000e018 	.word	0xe000e018
 800d568:	20000004 	.word	0x20000004
 800d56c:	10624dd3 	.word	0x10624dd3
 800d570:	e000e014 	.word	0xe000e014

0800d574 <vPortEnableVFP>:
 800d574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d584 <vPortEnableVFP+0x10>
 800d578:	6801      	ldr	r1, [r0, #0]
 800d57a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d57e:	6001      	str	r1, [r0, #0]
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	e000ed88 	.word	0xe000ed88

0800d588 <vPortValidateInterruptPriority>:
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	f3ef 8305 	mrs	r3, IPSR
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d914      	bls.n	800d5c4 <vPortValidateInterruptPriority+0x3c>
 800d59a:	4a17      	ldr	r2, [pc, #92]	; (800d5f8 <vPortValidateInterruptPriority+0x70>)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4413      	add	r3, r2
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	72fb      	strb	r3, [r7, #11]
 800d5a4:	4b15      	ldr	r3, [pc, #84]	; (800d5fc <vPortValidateInterruptPriority+0x74>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	7afa      	ldrb	r2, [r7, #11]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d20a      	bcs.n	800d5c4 <vPortValidateInterruptPriority+0x3c>
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	607b      	str	r3, [r7, #4]
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <vPortValidateInterruptPriority+0x3a>
 800d5c4:	4b0e      	ldr	r3, [pc, #56]	; (800d600 <vPortValidateInterruptPriority+0x78>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d5cc:	4b0d      	ldr	r3, [pc, #52]	; (800d604 <vPortValidateInterruptPriority+0x7c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d90a      	bls.n	800d5ea <vPortValidateInterruptPriority+0x62>
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	603b      	str	r3, [r7, #0]
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <vPortValidateInterruptPriority+0x60>
 800d5ea:	bf00      	nop
 800d5ec:	3714      	adds	r7, #20
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	e000e3f0 	.word	0xe000e3f0
 800d5fc:	200042a8 	.word	0x200042a8
 800d600:	e000ed0c 	.word	0xe000ed0c
 800d604:	200042ac 	.word	0x200042ac

0800d608 <pvPortMalloc>:
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08a      	sub	sp, #40	; 0x28
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	2300      	movs	r3, #0
 800d612:	61fb      	str	r3, [r7, #28]
 800d614:	f7fe ffde 	bl	800c5d4 <vTaskSuspendAll>
 800d618:	4b5b      	ldr	r3, [pc, #364]	; (800d788 <pvPortMalloc+0x180>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <pvPortMalloc+0x1c>
 800d620:	f000 f920 	bl	800d864 <prvHeapInit>
 800d624:	4b59      	ldr	r3, [pc, #356]	; (800d78c <pvPortMalloc+0x184>)
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f040 8093 	bne.w	800d758 <pvPortMalloc+0x150>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d01d      	beq.n	800d674 <pvPortMalloc+0x6c>
 800d638:	2208      	movs	r2, #8
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	607b      	str	r3, [r7, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f003 0307 	and.w	r3, r3, #7
 800d646:	2b00      	cmp	r3, #0
 800d648:	d014      	beq.n	800d674 <pvPortMalloc+0x6c>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f023 0307 	bic.w	r3, r3, #7
 800d650:	3308      	adds	r3, #8
 800d652:	607b      	str	r3, [r7, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <pvPortMalloc+0x6c>
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <pvPortMalloc+0x6a>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d06e      	beq.n	800d758 <pvPortMalloc+0x150>
 800d67a:	4b45      	ldr	r3, [pc, #276]	; (800d790 <pvPortMalloc+0x188>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d869      	bhi.n	800d758 <pvPortMalloc+0x150>
 800d684:	4b43      	ldr	r3, [pc, #268]	; (800d794 <pvPortMalloc+0x18c>)
 800d686:	623b      	str	r3, [r7, #32]
 800d688:	4b42      	ldr	r3, [pc, #264]	; (800d794 <pvPortMalloc+0x18c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	627b      	str	r3, [r7, #36]	; 0x24
 800d68e:	e004      	b.n	800d69a <pvPortMalloc+0x92>
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	623b      	str	r3, [r7, #32]
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	627b      	str	r3, [r7, #36]	; 0x24
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d903      	bls.n	800d6ac <pvPortMalloc+0xa4>
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1f1      	bne.n	800d690 <pvPortMalloc+0x88>
 800d6ac:	4b36      	ldr	r3, [pc, #216]	; (800d788 <pvPortMalloc+0x180>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d050      	beq.n	800d758 <pvPortMalloc+0x150>
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2208      	movs	r2, #8
 800d6bc:	4413      	add	r3, r2
 800d6be:	61fb      	str	r3, [r7, #28]
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	601a      	str	r2, [r3, #0]
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	1ad2      	subs	r2, r2, r3
 800d6d0:	2308      	movs	r3, #8
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d91f      	bls.n	800d718 <pvPortMalloc+0x110>
 800d6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	f003 0307 	and.w	r3, r3, #7
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d00a      	beq.n	800d700 <pvPortMalloc+0xf8>
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <pvPortMalloc+0xf6>
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	1ad2      	subs	r2, r2, r3
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	605a      	str	r2, [r3, #4]
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	605a      	str	r2, [r3, #4]
 800d712:	69b8      	ldr	r0, [r7, #24]
 800d714:	f000 f908 	bl	800d928 <prvInsertBlockIntoFreeList>
 800d718:	4b1d      	ldr	r3, [pc, #116]	; (800d790 <pvPortMalloc+0x188>)
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	4a1b      	ldr	r2, [pc, #108]	; (800d790 <pvPortMalloc+0x188>)
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	4b1a      	ldr	r3, [pc, #104]	; (800d790 <pvPortMalloc+0x188>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	4b1b      	ldr	r3, [pc, #108]	; (800d798 <pvPortMalloc+0x190>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d203      	bcs.n	800d73a <pvPortMalloc+0x132>
 800d732:	4b17      	ldr	r3, [pc, #92]	; (800d790 <pvPortMalloc+0x188>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a18      	ldr	r2, [pc, #96]	; (800d798 <pvPortMalloc+0x190>)
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	4b13      	ldr	r3, [pc, #76]	; (800d78c <pvPortMalloc+0x184>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	431a      	orrs	r2, r3
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	605a      	str	r2, [r3, #4]
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	2200      	movs	r2, #0
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	4b13      	ldr	r3, [pc, #76]	; (800d79c <pvPortMalloc+0x194>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	4a11      	ldr	r2, [pc, #68]	; (800d79c <pvPortMalloc+0x194>)
 800d756:	6013      	str	r3, [r2, #0]
 800d758:	f7fe ff4a 	bl	800c5f0 <xTaskResumeAll>
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	f003 0307 	and.w	r3, r3, #7
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <pvPortMalloc+0x174>
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <pvPortMalloc+0x172>
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	4618      	mov	r0, r3
 800d780:	3728      	adds	r7, #40	; 0x28
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20007eb8 	.word	0x20007eb8
 800d78c:	20007ecc 	.word	0x20007ecc
 800d790:	20007ebc 	.word	0x20007ebc
 800d794:	20007eb0 	.word	0x20007eb0
 800d798:	20007ec0 	.word	0x20007ec0
 800d79c:	20007ec4 	.word	0x20007ec4

0800d7a0 <vPortFree>:
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	617b      	str	r3, [r7, #20]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d04d      	beq.n	800d84e <vPortFree+0xae>
 800d7b2:	2308      	movs	r3, #8
 800d7b4:	425b      	negs	r3, r3
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	617b      	str	r3, [r7, #20]
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	4b24      	ldr	r3, [pc, #144]	; (800d858 <vPortFree+0xb8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10a      	bne.n	800d7e4 <vPortFree+0x44>
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	60fb      	str	r3, [r7, #12]
 800d7e0:	bf00      	nop
 800d7e2:	e7fe      	b.n	800d7e2 <vPortFree+0x42>
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <vPortFree+0x62>
 800d7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	60bb      	str	r3, [r7, #8]
 800d7fe:	bf00      	nop
 800d800:	e7fe      	b.n	800d800 <vPortFree+0x60>
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	685a      	ldr	r2, [r3, #4]
 800d806:	4b14      	ldr	r3, [pc, #80]	; (800d858 <vPortFree+0xb8>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4013      	ands	r3, r2
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d01e      	beq.n	800d84e <vPortFree+0xae>
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d11a      	bne.n	800d84e <vPortFree+0xae>
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <vPortFree+0xb8>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	43db      	mvns	r3, r3
 800d822:	401a      	ands	r2, r3
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	605a      	str	r2, [r3, #4]
 800d828:	f7fe fed4 	bl	800c5d4 <vTaskSuspendAll>
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <vPortFree+0xbc>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4413      	add	r3, r2
 800d836:	4a09      	ldr	r2, [pc, #36]	; (800d85c <vPortFree+0xbc>)
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	6938      	ldr	r0, [r7, #16]
 800d83c:	f000 f874 	bl	800d928 <prvInsertBlockIntoFreeList>
 800d840:	4b07      	ldr	r3, [pc, #28]	; (800d860 <vPortFree+0xc0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	4a06      	ldr	r2, [pc, #24]	; (800d860 <vPortFree+0xc0>)
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	f7fe fed1 	bl	800c5f0 <xTaskResumeAll>
 800d84e:	bf00      	nop
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20007ecc 	.word	0x20007ecc
 800d85c:	20007ebc 	.word	0x20007ebc
 800d860:	20007ec8 	.word	0x20007ec8

0800d864 <prvHeapInit>:
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d86e:	60bb      	str	r3, [r7, #8]
 800d870:	4b27      	ldr	r3, [pc, #156]	; (800d910 <prvHeapInit+0xac>)
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f003 0307 	and.w	r3, r3, #7
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00c      	beq.n	800d898 <prvHeapInit+0x34>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3307      	adds	r3, #7
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	4a1f      	ldr	r2, [pc, #124]	; (800d910 <prvHeapInit+0xac>)
 800d894:	4413      	add	r3, r2
 800d896:	60bb      	str	r3, [r7, #8]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	607b      	str	r3, [r7, #4]
 800d89c:	4a1d      	ldr	r2, [pc, #116]	; (800d914 <prvHeapInit+0xb0>)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	4b1c      	ldr	r3, [pc, #112]	; (800d914 <prvHeapInit+0xb0>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	605a      	str	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f023 0307 	bic.w	r3, r3, #7
 800d8be:	60fb      	str	r3, [r7, #12]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4a15      	ldr	r2, [pc, #84]	; (800d918 <prvHeapInit+0xb4>)
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	4b14      	ldr	r3, [pc, #80]	; (800d918 <prvHeapInit+0xb4>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	605a      	str	r2, [r3, #4]
 800d8ce:	4b12      	ldr	r3, [pc, #72]	; (800d918 <prvHeapInit+0xb4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	1ad2      	subs	r2, r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	605a      	str	r2, [r3, #4]
 800d8e4:	4b0c      	ldr	r3, [pc, #48]	; (800d918 <prvHeapInit+0xb4>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	4a0a      	ldr	r2, [pc, #40]	; (800d91c <prvHeapInit+0xb8>)
 800d8f2:	6013      	str	r3, [r2, #0]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	4a09      	ldr	r2, [pc, #36]	; (800d920 <prvHeapInit+0xbc>)
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	4b09      	ldr	r3, [pc, #36]	; (800d924 <prvHeapInit+0xc0>)
 800d8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	bf00      	nop
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	200042b0 	.word	0x200042b0
 800d914:	20007eb0 	.word	0x20007eb0
 800d918:	20007eb8 	.word	0x20007eb8
 800d91c:	20007ec0 	.word	0x20007ec0
 800d920:	20007ebc 	.word	0x20007ebc
 800d924:	20007ecc 	.word	0x20007ecc

0800d928 <prvInsertBlockIntoFreeList>:
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	4b28      	ldr	r3, [pc, #160]	; (800d9d4 <prvInsertBlockIntoFreeList+0xac>)
 800d932:	60fb      	str	r3, [r7, #12]
 800d934:	e002      	b.n	800d93c <prvInsertBlockIntoFreeList+0x14>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	429a      	cmp	r2, r3
 800d944:	d8f7      	bhi.n	800d936 <prvInsertBlockIntoFreeList+0xe>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	60bb      	str	r3, [r7, #8]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	4413      	add	r3, r2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	429a      	cmp	r2, r3
 800d956:	d108      	bne.n	800d96a <prvInsertBlockIntoFreeList+0x42>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	441a      	add	r2, r3
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	605a      	str	r2, [r3, #4]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	60bb      	str	r3, [r7, #8]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	441a      	add	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d118      	bne.n	800d9b0 <prvInsertBlockIntoFreeList+0x88>
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d00d      	beq.n	800d9a6 <prvInsertBlockIntoFreeList+0x7e>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	441a      	add	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	605a      	str	r2, [r3, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	e008      	b.n	800d9b8 <prvInsertBlockIntoFreeList+0x90>
 800d9a6:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	e003      	b.n	800d9b8 <prvInsertBlockIntoFreeList+0x90>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d002      	beq.n	800d9c6 <prvInsertBlockIntoFreeList+0x9e>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20007eb0 	.word	0x20007eb0
 800d9d8:	20007eb8 	.word	0x20007eb8

0800d9dc <__cvt>:
 800d9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e0:	ec55 4b10 	vmov	r4, r5, d0
 800d9e4:	2d00      	cmp	r5, #0
 800d9e6:	460e      	mov	r6, r1
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	bfbb      	ittet	lt
 800d9ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d9f2:	461d      	movlt	r5, r3
 800d9f4:	2300      	movge	r3, #0
 800d9f6:	232d      	movlt	r3, #45	; 0x2d
 800d9f8:	700b      	strb	r3, [r1, #0]
 800d9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da00:	4691      	mov	r9, r2
 800da02:	f023 0820 	bic.w	r8, r3, #32
 800da06:	bfbc      	itt	lt
 800da08:	4622      	movlt	r2, r4
 800da0a:	4614      	movlt	r4, r2
 800da0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da10:	d005      	beq.n	800da1e <__cvt+0x42>
 800da12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da16:	d100      	bne.n	800da1a <__cvt+0x3e>
 800da18:	3601      	adds	r6, #1
 800da1a:	2102      	movs	r1, #2
 800da1c:	e000      	b.n	800da20 <__cvt+0x44>
 800da1e:	2103      	movs	r1, #3
 800da20:	ab03      	add	r3, sp, #12
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	ab02      	add	r3, sp, #8
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	ec45 4b10 	vmov	d0, r4, r5
 800da2c:	4653      	mov	r3, sl
 800da2e:	4632      	mov	r2, r6
 800da30:	f000 ff22 	bl	800e878 <_dtoa_r>
 800da34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da38:	4607      	mov	r7, r0
 800da3a:	d102      	bne.n	800da42 <__cvt+0x66>
 800da3c:	f019 0f01 	tst.w	r9, #1
 800da40:	d022      	beq.n	800da88 <__cvt+0xac>
 800da42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da46:	eb07 0906 	add.w	r9, r7, r6
 800da4a:	d110      	bne.n	800da6e <__cvt+0x92>
 800da4c:	783b      	ldrb	r3, [r7, #0]
 800da4e:	2b30      	cmp	r3, #48	; 0x30
 800da50:	d10a      	bne.n	800da68 <__cvt+0x8c>
 800da52:	2200      	movs	r2, #0
 800da54:	2300      	movs	r3, #0
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7f3 f855 	bl	8000b08 <__aeabi_dcmpeq>
 800da5e:	b918      	cbnz	r0, 800da68 <__cvt+0x8c>
 800da60:	f1c6 0601 	rsb	r6, r6, #1
 800da64:	f8ca 6000 	str.w	r6, [sl]
 800da68:	f8da 3000 	ldr.w	r3, [sl]
 800da6c:	4499      	add	r9, r3
 800da6e:	2200      	movs	r2, #0
 800da70:	2300      	movs	r3, #0
 800da72:	4620      	mov	r0, r4
 800da74:	4629      	mov	r1, r5
 800da76:	f7f3 f847 	bl	8000b08 <__aeabi_dcmpeq>
 800da7a:	b108      	cbz	r0, 800da80 <__cvt+0xa4>
 800da7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800da80:	2230      	movs	r2, #48	; 0x30
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	454b      	cmp	r3, r9
 800da86:	d307      	bcc.n	800da98 <__cvt+0xbc>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da8c:	1bdb      	subs	r3, r3, r7
 800da8e:	4638      	mov	r0, r7
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	b004      	add	sp, #16
 800da94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da98:	1c59      	adds	r1, r3, #1
 800da9a:	9103      	str	r1, [sp, #12]
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	e7f0      	b.n	800da82 <__cvt+0xa6>

0800daa0 <__exponent>:
 800daa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daa2:	4603      	mov	r3, r0
 800daa4:	2900      	cmp	r1, #0
 800daa6:	bfb8      	it	lt
 800daa8:	4249      	neglt	r1, r1
 800daaa:	f803 2b02 	strb.w	r2, [r3], #2
 800daae:	bfb4      	ite	lt
 800dab0:	222d      	movlt	r2, #45	; 0x2d
 800dab2:	222b      	movge	r2, #43	; 0x2b
 800dab4:	2909      	cmp	r1, #9
 800dab6:	7042      	strb	r2, [r0, #1]
 800dab8:	dd2a      	ble.n	800db10 <__exponent+0x70>
 800daba:	f10d 0207 	add.w	r2, sp, #7
 800dabe:	4617      	mov	r7, r2
 800dac0:	260a      	movs	r6, #10
 800dac2:	4694      	mov	ip, r2
 800dac4:	fb91 f5f6 	sdiv	r5, r1, r6
 800dac8:	fb06 1415 	mls	r4, r6, r5, r1
 800dacc:	3430      	adds	r4, #48	; 0x30
 800dace:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800dad2:	460c      	mov	r4, r1
 800dad4:	2c63      	cmp	r4, #99	; 0x63
 800dad6:	f102 32ff 	add.w	r2, r2, #4294967295
 800dada:	4629      	mov	r1, r5
 800dadc:	dcf1      	bgt.n	800dac2 <__exponent+0x22>
 800dade:	3130      	adds	r1, #48	; 0x30
 800dae0:	f1ac 0402 	sub.w	r4, ip, #2
 800dae4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dae8:	1c41      	adds	r1, r0, #1
 800daea:	4622      	mov	r2, r4
 800daec:	42ba      	cmp	r2, r7
 800daee:	d30a      	bcc.n	800db06 <__exponent+0x66>
 800daf0:	f10d 0209 	add.w	r2, sp, #9
 800daf4:	eba2 020c 	sub.w	r2, r2, ip
 800daf8:	42bc      	cmp	r4, r7
 800dafa:	bf88      	it	hi
 800dafc:	2200      	movhi	r2, #0
 800dafe:	4413      	add	r3, r2
 800db00:	1a18      	subs	r0, r3, r0
 800db02:	b003      	add	sp, #12
 800db04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db06:	f812 5b01 	ldrb.w	r5, [r2], #1
 800db0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800db0e:	e7ed      	b.n	800daec <__exponent+0x4c>
 800db10:	2330      	movs	r3, #48	; 0x30
 800db12:	3130      	adds	r1, #48	; 0x30
 800db14:	7083      	strb	r3, [r0, #2]
 800db16:	70c1      	strb	r1, [r0, #3]
 800db18:	1d03      	adds	r3, r0, #4
 800db1a:	e7f1      	b.n	800db00 <__exponent+0x60>

0800db1c <_printf_float>:
 800db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	ed2d 8b02 	vpush	{d8}
 800db24:	b08d      	sub	sp, #52	; 0x34
 800db26:	460c      	mov	r4, r1
 800db28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db2c:	4616      	mov	r6, r2
 800db2e:	461f      	mov	r7, r3
 800db30:	4605      	mov	r5, r0
 800db32:	f000 fd3d 	bl	800e5b0 <_localeconv_r>
 800db36:	f8d0 a000 	ldr.w	sl, [r0]
 800db3a:	4650      	mov	r0, sl
 800db3c:	f7f2 fbb8 	bl	80002b0 <strlen>
 800db40:	2300      	movs	r3, #0
 800db42:	930a      	str	r3, [sp, #40]	; 0x28
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	9305      	str	r3, [sp, #20]
 800db48:	f8d8 3000 	ldr.w	r3, [r8]
 800db4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db50:	3307      	adds	r3, #7
 800db52:	f023 0307 	bic.w	r3, r3, #7
 800db56:	f103 0208 	add.w	r2, r3, #8
 800db5a:	f8c8 2000 	str.w	r2, [r8]
 800db5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	f8cd 8018 	str.w	r8, [sp, #24]
 800db6c:	ee08 0a10 	vmov	s16, r0
 800db70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800db74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db78:	4b9e      	ldr	r3, [pc, #632]	; (800ddf4 <_printf_float+0x2d8>)
 800db7a:	f04f 32ff 	mov.w	r2, #4294967295
 800db7e:	f7f2 fff5 	bl	8000b6c <__aeabi_dcmpun>
 800db82:	bb88      	cbnz	r0, 800dbe8 <_printf_float+0xcc>
 800db84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db88:	4b9a      	ldr	r3, [pc, #616]	; (800ddf4 <_printf_float+0x2d8>)
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	f7f2 ffcf 	bl	8000b30 <__aeabi_dcmple>
 800db92:	bb48      	cbnz	r0, 800dbe8 <_printf_float+0xcc>
 800db94:	2200      	movs	r2, #0
 800db96:	2300      	movs	r3, #0
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 ffbe 	bl	8000b1c <__aeabi_dcmplt>
 800dba0:	b110      	cbz	r0, 800dba8 <_printf_float+0x8c>
 800dba2:	232d      	movs	r3, #45	; 0x2d
 800dba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba8:	4a93      	ldr	r2, [pc, #588]	; (800ddf8 <_printf_float+0x2dc>)
 800dbaa:	4b94      	ldr	r3, [pc, #592]	; (800ddfc <_printf_float+0x2e0>)
 800dbac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dbb0:	bf94      	ite	ls
 800dbb2:	4690      	movls	r8, r2
 800dbb4:	4698      	movhi	r8, r3
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	6123      	str	r3, [r4, #16]
 800dbba:	9b05      	ldr	r3, [sp, #20]
 800dbbc:	f023 0304 	bic.w	r3, r3, #4
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	f04f 0900 	mov.w	r9, #0
 800dbc6:	9700      	str	r7, [sp, #0]
 800dbc8:	4633      	mov	r3, r6
 800dbca:	aa0b      	add	r2, sp, #44	; 0x2c
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f000 f9da 	bl	800df88 <_printf_common>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	f040 8090 	bne.w	800dcfa <_printf_float+0x1de>
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295
 800dbde:	b00d      	add	sp, #52	; 0x34
 800dbe0:	ecbd 8b02 	vpop	{d8}
 800dbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe8:	4642      	mov	r2, r8
 800dbea:	464b      	mov	r3, r9
 800dbec:	4640      	mov	r0, r8
 800dbee:	4649      	mov	r1, r9
 800dbf0:	f7f2 ffbc 	bl	8000b6c <__aeabi_dcmpun>
 800dbf4:	b140      	cbz	r0, 800dc08 <_printf_float+0xec>
 800dbf6:	464b      	mov	r3, r9
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	bfbc      	itt	lt
 800dbfc:	232d      	movlt	r3, #45	; 0x2d
 800dbfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc02:	4a7f      	ldr	r2, [pc, #508]	; (800de00 <_printf_float+0x2e4>)
 800dc04:	4b7f      	ldr	r3, [pc, #508]	; (800de04 <_printf_float+0x2e8>)
 800dc06:	e7d1      	b.n	800dbac <_printf_float+0x90>
 800dc08:	6863      	ldr	r3, [r4, #4]
 800dc0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc0e:	9206      	str	r2, [sp, #24]
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	d13f      	bne.n	800dc94 <_printf_float+0x178>
 800dc14:	2306      	movs	r3, #6
 800dc16:	6063      	str	r3, [r4, #4]
 800dc18:	9b05      	ldr	r3, [sp, #20]
 800dc1a:	6861      	ldr	r1, [r4, #4]
 800dc1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc20:	2300      	movs	r3, #0
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	ab0a      	add	r3, sp, #40	; 0x28
 800dc26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc2a:	ab09      	add	r3, sp, #36	; 0x24
 800dc2c:	ec49 8b10 	vmov	d0, r8, r9
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	6022      	str	r2, [r4, #0]
 800dc34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f7ff fecf 	bl	800d9dc <__cvt>
 800dc3e:	9b06      	ldr	r3, [sp, #24]
 800dc40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc42:	2b47      	cmp	r3, #71	; 0x47
 800dc44:	4680      	mov	r8, r0
 800dc46:	d108      	bne.n	800dc5a <_printf_float+0x13e>
 800dc48:	1cc8      	adds	r0, r1, #3
 800dc4a:	db02      	blt.n	800dc52 <_printf_float+0x136>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	4299      	cmp	r1, r3
 800dc50:	dd41      	ble.n	800dcd6 <_printf_float+0x1ba>
 800dc52:	f1ab 0302 	sub.w	r3, fp, #2
 800dc56:	fa5f fb83 	uxtb.w	fp, r3
 800dc5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc5e:	d820      	bhi.n	800dca2 <_printf_float+0x186>
 800dc60:	3901      	subs	r1, #1
 800dc62:	465a      	mov	r2, fp
 800dc64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc68:	9109      	str	r1, [sp, #36]	; 0x24
 800dc6a:	f7ff ff19 	bl	800daa0 <__exponent>
 800dc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc70:	1813      	adds	r3, r2, r0
 800dc72:	2a01      	cmp	r2, #1
 800dc74:	4681      	mov	r9, r0
 800dc76:	6123      	str	r3, [r4, #16]
 800dc78:	dc02      	bgt.n	800dc80 <_printf_float+0x164>
 800dc7a:	6822      	ldr	r2, [r4, #0]
 800dc7c:	07d2      	lsls	r2, r2, #31
 800dc7e:	d501      	bpl.n	800dc84 <_printf_float+0x168>
 800dc80:	3301      	adds	r3, #1
 800dc82:	6123      	str	r3, [r4, #16]
 800dc84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d09c      	beq.n	800dbc6 <_printf_float+0xaa>
 800dc8c:	232d      	movs	r3, #45	; 0x2d
 800dc8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc92:	e798      	b.n	800dbc6 <_printf_float+0xaa>
 800dc94:	9a06      	ldr	r2, [sp, #24]
 800dc96:	2a47      	cmp	r2, #71	; 0x47
 800dc98:	d1be      	bne.n	800dc18 <_printf_float+0xfc>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1bc      	bne.n	800dc18 <_printf_float+0xfc>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e7b9      	b.n	800dc16 <_printf_float+0xfa>
 800dca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dca6:	d118      	bne.n	800dcda <_printf_float+0x1be>
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	6863      	ldr	r3, [r4, #4]
 800dcac:	dd0b      	ble.n	800dcc6 <_printf_float+0x1aa>
 800dcae:	6121      	str	r1, [r4, #16]
 800dcb0:	b913      	cbnz	r3, 800dcb8 <_printf_float+0x19c>
 800dcb2:	6822      	ldr	r2, [r4, #0]
 800dcb4:	07d0      	lsls	r0, r2, #31
 800dcb6:	d502      	bpl.n	800dcbe <_printf_float+0x1a2>
 800dcb8:	3301      	adds	r3, #1
 800dcba:	440b      	add	r3, r1
 800dcbc:	6123      	str	r3, [r4, #16]
 800dcbe:	65a1      	str	r1, [r4, #88]	; 0x58
 800dcc0:	f04f 0900 	mov.w	r9, #0
 800dcc4:	e7de      	b.n	800dc84 <_printf_float+0x168>
 800dcc6:	b913      	cbnz	r3, 800dcce <_printf_float+0x1b2>
 800dcc8:	6822      	ldr	r2, [r4, #0]
 800dcca:	07d2      	lsls	r2, r2, #31
 800dccc:	d501      	bpl.n	800dcd2 <_printf_float+0x1b6>
 800dcce:	3302      	adds	r3, #2
 800dcd0:	e7f4      	b.n	800dcbc <_printf_float+0x1a0>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e7f2      	b.n	800dcbc <_printf_float+0x1a0>
 800dcd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcdc:	4299      	cmp	r1, r3
 800dcde:	db05      	blt.n	800dcec <_printf_float+0x1d0>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	6121      	str	r1, [r4, #16]
 800dce4:	07d8      	lsls	r0, r3, #31
 800dce6:	d5ea      	bpl.n	800dcbe <_printf_float+0x1a2>
 800dce8:	1c4b      	adds	r3, r1, #1
 800dcea:	e7e7      	b.n	800dcbc <_printf_float+0x1a0>
 800dcec:	2900      	cmp	r1, #0
 800dcee:	bfd4      	ite	le
 800dcf0:	f1c1 0202 	rsble	r2, r1, #2
 800dcf4:	2201      	movgt	r2, #1
 800dcf6:	4413      	add	r3, r2
 800dcf8:	e7e0      	b.n	800dcbc <_printf_float+0x1a0>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	055a      	lsls	r2, r3, #21
 800dcfe:	d407      	bmi.n	800dd10 <_printf_float+0x1f4>
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	4642      	mov	r2, r8
 800dd04:	4631      	mov	r1, r6
 800dd06:	4628      	mov	r0, r5
 800dd08:	47b8      	blx	r7
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	d12c      	bne.n	800dd68 <_printf_float+0x24c>
 800dd0e:	e764      	b.n	800dbda <_printf_float+0xbe>
 800dd10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd14:	f240 80e0 	bls.w	800ded8 <_printf_float+0x3bc>
 800dd18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f7f2 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d034      	beq.n	800dd92 <_printf_float+0x276>
 800dd28:	4a37      	ldr	r2, [pc, #220]	; (800de08 <_printf_float+0x2ec>)
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	4628      	mov	r0, r5
 800dd30:	47b8      	blx	r7
 800dd32:	3001      	adds	r0, #1
 800dd34:	f43f af51 	beq.w	800dbda <_printf_float+0xbe>
 800dd38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	db02      	blt.n	800dd46 <_printf_float+0x22a>
 800dd40:	6823      	ldr	r3, [r4, #0]
 800dd42:	07d8      	lsls	r0, r3, #31
 800dd44:	d510      	bpl.n	800dd68 <_printf_float+0x24c>
 800dd46:	ee18 3a10 	vmov	r3, s16
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4628      	mov	r0, r5
 800dd50:	47b8      	blx	r7
 800dd52:	3001      	adds	r0, #1
 800dd54:	f43f af41 	beq.w	800dbda <_printf_float+0xbe>
 800dd58:	f04f 0800 	mov.w	r8, #0
 800dd5c:	f104 091a 	add.w	r9, r4, #26
 800dd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd62:	3b01      	subs	r3, #1
 800dd64:	4543      	cmp	r3, r8
 800dd66:	dc09      	bgt.n	800dd7c <_printf_float+0x260>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	079b      	lsls	r3, r3, #30
 800dd6c:	f100 8107 	bmi.w	800df7e <_printf_float+0x462>
 800dd70:	68e0      	ldr	r0, [r4, #12]
 800dd72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd74:	4298      	cmp	r0, r3
 800dd76:	bfb8      	it	lt
 800dd78:	4618      	movlt	r0, r3
 800dd7a:	e730      	b.n	800dbde <_printf_float+0xc2>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	464a      	mov	r2, r9
 800dd80:	4631      	mov	r1, r6
 800dd82:	4628      	mov	r0, r5
 800dd84:	47b8      	blx	r7
 800dd86:	3001      	adds	r0, #1
 800dd88:	f43f af27 	beq.w	800dbda <_printf_float+0xbe>
 800dd8c:	f108 0801 	add.w	r8, r8, #1
 800dd90:	e7e6      	b.n	800dd60 <_printf_float+0x244>
 800dd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	dc39      	bgt.n	800de0c <_printf_float+0x2f0>
 800dd98:	4a1b      	ldr	r2, [pc, #108]	; (800de08 <_printf_float+0x2ec>)
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	4631      	mov	r1, r6
 800dd9e:	4628      	mov	r0, r5
 800dda0:	47b8      	blx	r7
 800dda2:	3001      	adds	r0, #1
 800dda4:	f43f af19 	beq.w	800dbda <_printf_float+0xbe>
 800dda8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ddac:	4313      	orrs	r3, r2
 800ddae:	d102      	bne.n	800ddb6 <_printf_float+0x29a>
 800ddb0:	6823      	ldr	r3, [r4, #0]
 800ddb2:	07d9      	lsls	r1, r3, #31
 800ddb4:	d5d8      	bpl.n	800dd68 <_printf_float+0x24c>
 800ddb6:	ee18 3a10 	vmov	r3, s16
 800ddba:	4652      	mov	r2, sl
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	47b8      	blx	r7
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	f43f af09 	beq.w	800dbda <_printf_float+0xbe>
 800ddc8:	f04f 0900 	mov.w	r9, #0
 800ddcc:	f104 0a1a 	add.w	sl, r4, #26
 800ddd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd2:	425b      	negs	r3, r3
 800ddd4:	454b      	cmp	r3, r9
 800ddd6:	dc01      	bgt.n	800dddc <_printf_float+0x2c0>
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddda:	e792      	b.n	800dd02 <_printf_float+0x1e6>
 800dddc:	2301      	movs	r3, #1
 800ddde:	4652      	mov	r2, sl
 800dde0:	4631      	mov	r1, r6
 800dde2:	4628      	mov	r0, r5
 800dde4:	47b8      	blx	r7
 800dde6:	3001      	adds	r0, #1
 800dde8:	f43f aef7 	beq.w	800dbda <_printf_float+0xbe>
 800ddec:	f109 0901 	add.w	r9, r9, #1
 800ddf0:	e7ee      	b.n	800ddd0 <_printf_float+0x2b4>
 800ddf2:	bf00      	nop
 800ddf4:	7fefffff 	.word	0x7fefffff
 800ddf8:	08011e44 	.word	0x08011e44
 800ddfc:	08011e48 	.word	0x08011e48
 800de00:	08011e4c 	.word	0x08011e4c
 800de04:	08011e50 	.word	0x08011e50
 800de08:	08011e54 	.word	0x08011e54
 800de0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de10:	429a      	cmp	r2, r3
 800de12:	bfa8      	it	ge
 800de14:	461a      	movge	r2, r3
 800de16:	2a00      	cmp	r2, #0
 800de18:	4691      	mov	r9, r2
 800de1a:	dc37      	bgt.n	800de8c <_printf_float+0x370>
 800de1c:	f04f 0b00 	mov.w	fp, #0
 800de20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de24:	f104 021a 	add.w	r2, r4, #26
 800de28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	eba3 0309 	sub.w	r3, r3, r9
 800de30:	455b      	cmp	r3, fp
 800de32:	dc33      	bgt.n	800de9c <_printf_float+0x380>
 800de34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de38:	429a      	cmp	r2, r3
 800de3a:	db3b      	blt.n	800deb4 <_printf_float+0x398>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	07da      	lsls	r2, r3, #31
 800de40:	d438      	bmi.n	800deb4 <_printf_float+0x398>
 800de42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800de46:	eba2 0903 	sub.w	r9, r2, r3
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	1ad2      	subs	r2, r2, r3
 800de4e:	4591      	cmp	r9, r2
 800de50:	bfa8      	it	ge
 800de52:	4691      	movge	r9, r2
 800de54:	f1b9 0f00 	cmp.w	r9, #0
 800de58:	dc35      	bgt.n	800dec6 <_printf_float+0x3aa>
 800de5a:	f04f 0800 	mov.w	r8, #0
 800de5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de62:	f104 0a1a 	add.w	sl, r4, #26
 800de66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de6a:	1a9b      	subs	r3, r3, r2
 800de6c:	eba3 0309 	sub.w	r3, r3, r9
 800de70:	4543      	cmp	r3, r8
 800de72:	f77f af79 	ble.w	800dd68 <_printf_float+0x24c>
 800de76:	2301      	movs	r3, #1
 800de78:	4652      	mov	r2, sl
 800de7a:	4631      	mov	r1, r6
 800de7c:	4628      	mov	r0, r5
 800de7e:	47b8      	blx	r7
 800de80:	3001      	adds	r0, #1
 800de82:	f43f aeaa 	beq.w	800dbda <_printf_float+0xbe>
 800de86:	f108 0801 	add.w	r8, r8, #1
 800de8a:	e7ec      	b.n	800de66 <_printf_float+0x34a>
 800de8c:	4613      	mov	r3, r2
 800de8e:	4631      	mov	r1, r6
 800de90:	4642      	mov	r2, r8
 800de92:	4628      	mov	r0, r5
 800de94:	47b8      	blx	r7
 800de96:	3001      	adds	r0, #1
 800de98:	d1c0      	bne.n	800de1c <_printf_float+0x300>
 800de9a:	e69e      	b.n	800dbda <_printf_float+0xbe>
 800de9c:	2301      	movs	r3, #1
 800de9e:	4631      	mov	r1, r6
 800dea0:	4628      	mov	r0, r5
 800dea2:	9205      	str	r2, [sp, #20]
 800dea4:	47b8      	blx	r7
 800dea6:	3001      	adds	r0, #1
 800dea8:	f43f ae97 	beq.w	800dbda <_printf_float+0xbe>
 800deac:	9a05      	ldr	r2, [sp, #20]
 800deae:	f10b 0b01 	add.w	fp, fp, #1
 800deb2:	e7b9      	b.n	800de28 <_printf_float+0x30c>
 800deb4:	ee18 3a10 	vmov	r3, s16
 800deb8:	4652      	mov	r2, sl
 800deba:	4631      	mov	r1, r6
 800debc:	4628      	mov	r0, r5
 800debe:	47b8      	blx	r7
 800dec0:	3001      	adds	r0, #1
 800dec2:	d1be      	bne.n	800de42 <_printf_float+0x326>
 800dec4:	e689      	b.n	800dbda <_printf_float+0xbe>
 800dec6:	9a05      	ldr	r2, [sp, #20]
 800dec8:	464b      	mov	r3, r9
 800deca:	4442      	add	r2, r8
 800decc:	4631      	mov	r1, r6
 800dece:	4628      	mov	r0, r5
 800ded0:	47b8      	blx	r7
 800ded2:	3001      	adds	r0, #1
 800ded4:	d1c1      	bne.n	800de5a <_printf_float+0x33e>
 800ded6:	e680      	b.n	800dbda <_printf_float+0xbe>
 800ded8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800deda:	2a01      	cmp	r2, #1
 800dedc:	dc01      	bgt.n	800dee2 <_printf_float+0x3c6>
 800dede:	07db      	lsls	r3, r3, #31
 800dee0:	d53a      	bpl.n	800df58 <_printf_float+0x43c>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4642      	mov	r2, r8
 800dee6:	4631      	mov	r1, r6
 800dee8:	4628      	mov	r0, r5
 800deea:	47b8      	blx	r7
 800deec:	3001      	adds	r0, #1
 800deee:	f43f ae74 	beq.w	800dbda <_printf_float+0xbe>
 800def2:	ee18 3a10 	vmov	r3, s16
 800def6:	4652      	mov	r2, sl
 800def8:	4631      	mov	r1, r6
 800defa:	4628      	mov	r0, r5
 800defc:	47b8      	blx	r7
 800defe:	3001      	adds	r0, #1
 800df00:	f43f ae6b 	beq.w	800dbda <_printf_float+0xbe>
 800df04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df08:	2200      	movs	r2, #0
 800df0a:	2300      	movs	r3, #0
 800df0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800df10:	f7f2 fdfa 	bl	8000b08 <__aeabi_dcmpeq>
 800df14:	b9d8      	cbnz	r0, 800df4e <_printf_float+0x432>
 800df16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df1a:	f108 0201 	add.w	r2, r8, #1
 800df1e:	4631      	mov	r1, r6
 800df20:	4628      	mov	r0, r5
 800df22:	47b8      	blx	r7
 800df24:	3001      	adds	r0, #1
 800df26:	d10e      	bne.n	800df46 <_printf_float+0x42a>
 800df28:	e657      	b.n	800dbda <_printf_float+0xbe>
 800df2a:	2301      	movs	r3, #1
 800df2c:	4652      	mov	r2, sl
 800df2e:	4631      	mov	r1, r6
 800df30:	4628      	mov	r0, r5
 800df32:	47b8      	blx	r7
 800df34:	3001      	adds	r0, #1
 800df36:	f43f ae50 	beq.w	800dbda <_printf_float+0xbe>
 800df3a:	f108 0801 	add.w	r8, r8, #1
 800df3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df40:	3b01      	subs	r3, #1
 800df42:	4543      	cmp	r3, r8
 800df44:	dcf1      	bgt.n	800df2a <_printf_float+0x40e>
 800df46:	464b      	mov	r3, r9
 800df48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df4c:	e6da      	b.n	800dd04 <_printf_float+0x1e8>
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	f104 0a1a 	add.w	sl, r4, #26
 800df56:	e7f2      	b.n	800df3e <_printf_float+0x422>
 800df58:	2301      	movs	r3, #1
 800df5a:	4642      	mov	r2, r8
 800df5c:	e7df      	b.n	800df1e <_printf_float+0x402>
 800df5e:	2301      	movs	r3, #1
 800df60:	464a      	mov	r2, r9
 800df62:	4631      	mov	r1, r6
 800df64:	4628      	mov	r0, r5
 800df66:	47b8      	blx	r7
 800df68:	3001      	adds	r0, #1
 800df6a:	f43f ae36 	beq.w	800dbda <_printf_float+0xbe>
 800df6e:	f108 0801 	add.w	r8, r8, #1
 800df72:	68e3      	ldr	r3, [r4, #12]
 800df74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df76:	1a5b      	subs	r3, r3, r1
 800df78:	4543      	cmp	r3, r8
 800df7a:	dcf0      	bgt.n	800df5e <_printf_float+0x442>
 800df7c:	e6f8      	b.n	800dd70 <_printf_float+0x254>
 800df7e:	f04f 0800 	mov.w	r8, #0
 800df82:	f104 0919 	add.w	r9, r4, #25
 800df86:	e7f4      	b.n	800df72 <_printf_float+0x456>

0800df88 <_printf_common>:
 800df88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df8c:	4616      	mov	r6, r2
 800df8e:	4699      	mov	r9, r3
 800df90:	688a      	ldr	r2, [r1, #8]
 800df92:	690b      	ldr	r3, [r1, #16]
 800df94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df98:	4293      	cmp	r3, r2
 800df9a:	bfb8      	it	lt
 800df9c:	4613      	movlt	r3, r2
 800df9e:	6033      	str	r3, [r6, #0]
 800dfa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfa4:	4607      	mov	r7, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	b10a      	cbz	r2, 800dfae <_printf_common+0x26>
 800dfaa:	3301      	adds	r3, #1
 800dfac:	6033      	str	r3, [r6, #0]
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	0699      	lsls	r1, r3, #26
 800dfb2:	bf42      	ittt	mi
 800dfb4:	6833      	ldrmi	r3, [r6, #0]
 800dfb6:	3302      	addmi	r3, #2
 800dfb8:	6033      	strmi	r3, [r6, #0]
 800dfba:	6825      	ldr	r5, [r4, #0]
 800dfbc:	f015 0506 	ands.w	r5, r5, #6
 800dfc0:	d106      	bne.n	800dfd0 <_printf_common+0x48>
 800dfc2:	f104 0a19 	add.w	sl, r4, #25
 800dfc6:	68e3      	ldr	r3, [r4, #12]
 800dfc8:	6832      	ldr	r2, [r6, #0]
 800dfca:	1a9b      	subs	r3, r3, r2
 800dfcc:	42ab      	cmp	r3, r5
 800dfce:	dc26      	bgt.n	800e01e <_printf_common+0x96>
 800dfd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfd4:	1e13      	subs	r3, r2, #0
 800dfd6:	6822      	ldr	r2, [r4, #0]
 800dfd8:	bf18      	it	ne
 800dfda:	2301      	movne	r3, #1
 800dfdc:	0692      	lsls	r2, r2, #26
 800dfde:	d42b      	bmi.n	800e038 <_printf_common+0xb0>
 800dfe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	47c0      	blx	r8
 800dfea:	3001      	adds	r0, #1
 800dfec:	d01e      	beq.n	800e02c <_printf_common+0xa4>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	6922      	ldr	r2, [r4, #16]
 800dff2:	f003 0306 	and.w	r3, r3, #6
 800dff6:	2b04      	cmp	r3, #4
 800dff8:	bf02      	ittt	eq
 800dffa:	68e5      	ldreq	r5, [r4, #12]
 800dffc:	6833      	ldreq	r3, [r6, #0]
 800dffe:	1aed      	subeq	r5, r5, r3
 800e000:	68a3      	ldr	r3, [r4, #8]
 800e002:	bf0c      	ite	eq
 800e004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e008:	2500      	movne	r5, #0
 800e00a:	4293      	cmp	r3, r2
 800e00c:	bfc4      	itt	gt
 800e00e:	1a9b      	subgt	r3, r3, r2
 800e010:	18ed      	addgt	r5, r5, r3
 800e012:	2600      	movs	r6, #0
 800e014:	341a      	adds	r4, #26
 800e016:	42b5      	cmp	r5, r6
 800e018:	d11a      	bne.n	800e050 <_printf_common+0xc8>
 800e01a:	2000      	movs	r0, #0
 800e01c:	e008      	b.n	800e030 <_printf_common+0xa8>
 800e01e:	2301      	movs	r3, #1
 800e020:	4652      	mov	r2, sl
 800e022:	4649      	mov	r1, r9
 800e024:	4638      	mov	r0, r7
 800e026:	47c0      	blx	r8
 800e028:	3001      	adds	r0, #1
 800e02a:	d103      	bne.n	800e034 <_printf_common+0xac>
 800e02c:	f04f 30ff 	mov.w	r0, #4294967295
 800e030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e034:	3501      	adds	r5, #1
 800e036:	e7c6      	b.n	800dfc6 <_printf_common+0x3e>
 800e038:	18e1      	adds	r1, r4, r3
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	2030      	movs	r0, #48	; 0x30
 800e03e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e042:	4422      	add	r2, r4
 800e044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e04c:	3302      	adds	r3, #2
 800e04e:	e7c7      	b.n	800dfe0 <_printf_common+0x58>
 800e050:	2301      	movs	r3, #1
 800e052:	4622      	mov	r2, r4
 800e054:	4649      	mov	r1, r9
 800e056:	4638      	mov	r0, r7
 800e058:	47c0      	blx	r8
 800e05a:	3001      	adds	r0, #1
 800e05c:	d0e6      	beq.n	800e02c <_printf_common+0xa4>
 800e05e:	3601      	adds	r6, #1
 800e060:	e7d9      	b.n	800e016 <_printf_common+0x8e>
	...

0800e064 <_printf_i>:
 800e064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e068:	7e0f      	ldrb	r7, [r1, #24]
 800e06a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e06c:	2f78      	cmp	r7, #120	; 0x78
 800e06e:	4691      	mov	r9, r2
 800e070:	4680      	mov	r8, r0
 800e072:	460c      	mov	r4, r1
 800e074:	469a      	mov	sl, r3
 800e076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e07a:	d807      	bhi.n	800e08c <_printf_i+0x28>
 800e07c:	2f62      	cmp	r7, #98	; 0x62
 800e07e:	d80a      	bhi.n	800e096 <_printf_i+0x32>
 800e080:	2f00      	cmp	r7, #0
 800e082:	f000 80d4 	beq.w	800e22e <_printf_i+0x1ca>
 800e086:	2f58      	cmp	r7, #88	; 0x58
 800e088:	f000 80c0 	beq.w	800e20c <_printf_i+0x1a8>
 800e08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e094:	e03a      	b.n	800e10c <_printf_i+0xa8>
 800e096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e09a:	2b15      	cmp	r3, #21
 800e09c:	d8f6      	bhi.n	800e08c <_printf_i+0x28>
 800e09e:	a101      	add	r1, pc, #4	; (adr r1, 800e0a4 <_printf_i+0x40>)
 800e0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0a4:	0800e0fd 	.word	0x0800e0fd
 800e0a8:	0800e111 	.word	0x0800e111
 800e0ac:	0800e08d 	.word	0x0800e08d
 800e0b0:	0800e08d 	.word	0x0800e08d
 800e0b4:	0800e08d 	.word	0x0800e08d
 800e0b8:	0800e08d 	.word	0x0800e08d
 800e0bc:	0800e111 	.word	0x0800e111
 800e0c0:	0800e08d 	.word	0x0800e08d
 800e0c4:	0800e08d 	.word	0x0800e08d
 800e0c8:	0800e08d 	.word	0x0800e08d
 800e0cc:	0800e08d 	.word	0x0800e08d
 800e0d0:	0800e215 	.word	0x0800e215
 800e0d4:	0800e13d 	.word	0x0800e13d
 800e0d8:	0800e1cf 	.word	0x0800e1cf
 800e0dc:	0800e08d 	.word	0x0800e08d
 800e0e0:	0800e08d 	.word	0x0800e08d
 800e0e4:	0800e237 	.word	0x0800e237
 800e0e8:	0800e08d 	.word	0x0800e08d
 800e0ec:	0800e13d 	.word	0x0800e13d
 800e0f0:	0800e08d 	.word	0x0800e08d
 800e0f4:	0800e08d 	.word	0x0800e08d
 800e0f8:	0800e1d7 	.word	0x0800e1d7
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	1d1a      	adds	r2, r3, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	602a      	str	r2, [r5, #0]
 800e104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e10c:	2301      	movs	r3, #1
 800e10e:	e09f      	b.n	800e250 <_printf_i+0x1ec>
 800e110:	6820      	ldr	r0, [r4, #0]
 800e112:	682b      	ldr	r3, [r5, #0]
 800e114:	0607      	lsls	r7, r0, #24
 800e116:	f103 0104 	add.w	r1, r3, #4
 800e11a:	6029      	str	r1, [r5, #0]
 800e11c:	d501      	bpl.n	800e122 <_printf_i+0xbe>
 800e11e:	681e      	ldr	r6, [r3, #0]
 800e120:	e003      	b.n	800e12a <_printf_i+0xc6>
 800e122:	0646      	lsls	r6, r0, #25
 800e124:	d5fb      	bpl.n	800e11e <_printf_i+0xba>
 800e126:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e12a:	2e00      	cmp	r6, #0
 800e12c:	da03      	bge.n	800e136 <_printf_i+0xd2>
 800e12e:	232d      	movs	r3, #45	; 0x2d
 800e130:	4276      	negs	r6, r6
 800e132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e136:	485a      	ldr	r0, [pc, #360]	; (800e2a0 <_printf_i+0x23c>)
 800e138:	230a      	movs	r3, #10
 800e13a:	e012      	b.n	800e162 <_printf_i+0xfe>
 800e13c:	682b      	ldr	r3, [r5, #0]
 800e13e:	6820      	ldr	r0, [r4, #0]
 800e140:	1d19      	adds	r1, r3, #4
 800e142:	6029      	str	r1, [r5, #0]
 800e144:	0605      	lsls	r5, r0, #24
 800e146:	d501      	bpl.n	800e14c <_printf_i+0xe8>
 800e148:	681e      	ldr	r6, [r3, #0]
 800e14a:	e002      	b.n	800e152 <_printf_i+0xee>
 800e14c:	0641      	lsls	r1, r0, #25
 800e14e:	d5fb      	bpl.n	800e148 <_printf_i+0xe4>
 800e150:	881e      	ldrh	r6, [r3, #0]
 800e152:	4853      	ldr	r0, [pc, #332]	; (800e2a0 <_printf_i+0x23c>)
 800e154:	2f6f      	cmp	r7, #111	; 0x6f
 800e156:	bf0c      	ite	eq
 800e158:	2308      	moveq	r3, #8
 800e15a:	230a      	movne	r3, #10
 800e15c:	2100      	movs	r1, #0
 800e15e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e162:	6865      	ldr	r5, [r4, #4]
 800e164:	60a5      	str	r5, [r4, #8]
 800e166:	2d00      	cmp	r5, #0
 800e168:	bfa2      	ittt	ge
 800e16a:	6821      	ldrge	r1, [r4, #0]
 800e16c:	f021 0104 	bicge.w	r1, r1, #4
 800e170:	6021      	strge	r1, [r4, #0]
 800e172:	b90e      	cbnz	r6, 800e178 <_printf_i+0x114>
 800e174:	2d00      	cmp	r5, #0
 800e176:	d04b      	beq.n	800e210 <_printf_i+0x1ac>
 800e178:	4615      	mov	r5, r2
 800e17a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e17e:	fb03 6711 	mls	r7, r3, r1, r6
 800e182:	5dc7      	ldrb	r7, [r0, r7]
 800e184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e188:	4637      	mov	r7, r6
 800e18a:	42bb      	cmp	r3, r7
 800e18c:	460e      	mov	r6, r1
 800e18e:	d9f4      	bls.n	800e17a <_printf_i+0x116>
 800e190:	2b08      	cmp	r3, #8
 800e192:	d10b      	bne.n	800e1ac <_printf_i+0x148>
 800e194:	6823      	ldr	r3, [r4, #0]
 800e196:	07de      	lsls	r6, r3, #31
 800e198:	d508      	bpl.n	800e1ac <_printf_i+0x148>
 800e19a:	6923      	ldr	r3, [r4, #16]
 800e19c:	6861      	ldr	r1, [r4, #4]
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	bfde      	ittt	le
 800e1a2:	2330      	movle	r3, #48	; 0x30
 800e1a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1ac:	1b52      	subs	r2, r2, r5
 800e1ae:	6122      	str	r2, [r4, #16]
 800e1b0:	f8cd a000 	str.w	sl, [sp]
 800e1b4:	464b      	mov	r3, r9
 800e1b6:	aa03      	add	r2, sp, #12
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	f7ff fee4 	bl	800df88 <_printf_common>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d14a      	bne.n	800e25a <_printf_i+0x1f6>
 800e1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c8:	b004      	add	sp, #16
 800e1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	f043 0320 	orr.w	r3, r3, #32
 800e1d4:	6023      	str	r3, [r4, #0]
 800e1d6:	4833      	ldr	r0, [pc, #204]	; (800e2a4 <_printf_i+0x240>)
 800e1d8:	2778      	movs	r7, #120	; 0x78
 800e1da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	6829      	ldr	r1, [r5, #0]
 800e1e2:	061f      	lsls	r7, r3, #24
 800e1e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1e8:	d402      	bmi.n	800e1f0 <_printf_i+0x18c>
 800e1ea:	065f      	lsls	r7, r3, #25
 800e1ec:	bf48      	it	mi
 800e1ee:	b2b6      	uxthmi	r6, r6
 800e1f0:	07df      	lsls	r7, r3, #31
 800e1f2:	bf48      	it	mi
 800e1f4:	f043 0320 	orrmi.w	r3, r3, #32
 800e1f8:	6029      	str	r1, [r5, #0]
 800e1fa:	bf48      	it	mi
 800e1fc:	6023      	strmi	r3, [r4, #0]
 800e1fe:	b91e      	cbnz	r6, 800e208 <_printf_i+0x1a4>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	f023 0320 	bic.w	r3, r3, #32
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	2310      	movs	r3, #16
 800e20a:	e7a7      	b.n	800e15c <_printf_i+0xf8>
 800e20c:	4824      	ldr	r0, [pc, #144]	; (800e2a0 <_printf_i+0x23c>)
 800e20e:	e7e4      	b.n	800e1da <_printf_i+0x176>
 800e210:	4615      	mov	r5, r2
 800e212:	e7bd      	b.n	800e190 <_printf_i+0x12c>
 800e214:	682b      	ldr	r3, [r5, #0]
 800e216:	6826      	ldr	r6, [r4, #0]
 800e218:	6961      	ldr	r1, [r4, #20]
 800e21a:	1d18      	adds	r0, r3, #4
 800e21c:	6028      	str	r0, [r5, #0]
 800e21e:	0635      	lsls	r5, r6, #24
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	d501      	bpl.n	800e228 <_printf_i+0x1c4>
 800e224:	6019      	str	r1, [r3, #0]
 800e226:	e002      	b.n	800e22e <_printf_i+0x1ca>
 800e228:	0670      	lsls	r0, r6, #25
 800e22a:	d5fb      	bpl.n	800e224 <_printf_i+0x1c0>
 800e22c:	8019      	strh	r1, [r3, #0]
 800e22e:	2300      	movs	r3, #0
 800e230:	6123      	str	r3, [r4, #16]
 800e232:	4615      	mov	r5, r2
 800e234:	e7bc      	b.n	800e1b0 <_printf_i+0x14c>
 800e236:	682b      	ldr	r3, [r5, #0]
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	602a      	str	r2, [r5, #0]
 800e23c:	681d      	ldr	r5, [r3, #0]
 800e23e:	6862      	ldr	r2, [r4, #4]
 800e240:	2100      	movs	r1, #0
 800e242:	4628      	mov	r0, r5
 800e244:	f7f1 ffe4 	bl	8000210 <memchr>
 800e248:	b108      	cbz	r0, 800e24e <_printf_i+0x1ea>
 800e24a:	1b40      	subs	r0, r0, r5
 800e24c:	6060      	str	r0, [r4, #4]
 800e24e:	6863      	ldr	r3, [r4, #4]
 800e250:	6123      	str	r3, [r4, #16]
 800e252:	2300      	movs	r3, #0
 800e254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e258:	e7aa      	b.n	800e1b0 <_printf_i+0x14c>
 800e25a:	6923      	ldr	r3, [r4, #16]
 800e25c:	462a      	mov	r2, r5
 800e25e:	4649      	mov	r1, r9
 800e260:	4640      	mov	r0, r8
 800e262:	47d0      	blx	sl
 800e264:	3001      	adds	r0, #1
 800e266:	d0ad      	beq.n	800e1c4 <_printf_i+0x160>
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	079b      	lsls	r3, r3, #30
 800e26c:	d413      	bmi.n	800e296 <_printf_i+0x232>
 800e26e:	68e0      	ldr	r0, [r4, #12]
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	4298      	cmp	r0, r3
 800e274:	bfb8      	it	lt
 800e276:	4618      	movlt	r0, r3
 800e278:	e7a6      	b.n	800e1c8 <_printf_i+0x164>
 800e27a:	2301      	movs	r3, #1
 800e27c:	4632      	mov	r2, r6
 800e27e:	4649      	mov	r1, r9
 800e280:	4640      	mov	r0, r8
 800e282:	47d0      	blx	sl
 800e284:	3001      	adds	r0, #1
 800e286:	d09d      	beq.n	800e1c4 <_printf_i+0x160>
 800e288:	3501      	adds	r5, #1
 800e28a:	68e3      	ldr	r3, [r4, #12]
 800e28c:	9903      	ldr	r1, [sp, #12]
 800e28e:	1a5b      	subs	r3, r3, r1
 800e290:	42ab      	cmp	r3, r5
 800e292:	dcf2      	bgt.n	800e27a <_printf_i+0x216>
 800e294:	e7eb      	b.n	800e26e <_printf_i+0x20a>
 800e296:	2500      	movs	r5, #0
 800e298:	f104 0619 	add.w	r6, r4, #25
 800e29c:	e7f5      	b.n	800e28a <_printf_i+0x226>
 800e29e:	bf00      	nop
 800e2a0:	08011e56 	.word	0x08011e56
 800e2a4:	08011e67 	.word	0x08011e67

0800e2a8 <std>:
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	b510      	push	{r4, lr}
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2b6:	6083      	str	r3, [r0, #8]
 800e2b8:	8181      	strh	r1, [r0, #12]
 800e2ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e2bc:	81c2      	strh	r2, [r0, #14]
 800e2be:	6183      	str	r3, [r0, #24]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	2208      	movs	r2, #8
 800e2c4:	305c      	adds	r0, #92	; 0x5c
 800e2c6:	f000 f948 	bl	800e55a <memset>
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <std+0x58>)
 800e2cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e2ce:	4b0d      	ldr	r3, [pc, #52]	; (800e304 <std+0x5c>)
 800e2d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <std+0x60>)
 800e2d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2d6:	4b0d      	ldr	r3, [pc, #52]	; (800e30c <std+0x64>)
 800e2d8:	6323      	str	r3, [r4, #48]	; 0x30
 800e2da:	4b0d      	ldr	r3, [pc, #52]	; (800e310 <std+0x68>)
 800e2dc:	6224      	str	r4, [r4, #32]
 800e2de:	429c      	cmp	r4, r3
 800e2e0:	d006      	beq.n	800e2f0 <std+0x48>
 800e2e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e2e6:	4294      	cmp	r4, r2
 800e2e8:	d002      	beq.n	800e2f0 <std+0x48>
 800e2ea:	33d0      	adds	r3, #208	; 0xd0
 800e2ec:	429c      	cmp	r4, r3
 800e2ee:	d105      	bne.n	800e2fc <std+0x54>
 800e2f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2f8:	f000 ba24 	b.w	800e744 <__retarget_lock_init_recursive>
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	bf00      	nop
 800e300:	0800e4d5 	.word	0x0800e4d5
 800e304:	0800e4f7 	.word	0x0800e4f7
 800e308:	0800e52f 	.word	0x0800e52f
 800e30c:	0800e553 	.word	0x0800e553
 800e310:	20007ed0 	.word	0x20007ed0

0800e314 <stdio_exit_handler>:
 800e314:	4a02      	ldr	r2, [pc, #8]	; (800e320 <stdio_exit_handler+0xc>)
 800e316:	4903      	ldr	r1, [pc, #12]	; (800e324 <stdio_exit_handler+0x10>)
 800e318:	4803      	ldr	r0, [pc, #12]	; (800e328 <stdio_exit_handler+0x14>)
 800e31a:	f000 b869 	b.w	800e3f0 <_fwalk_sglue>
 800e31e:	bf00      	nop
 800e320:	2000002c 	.word	0x2000002c
 800e324:	08010111 	.word	0x08010111
 800e328:	20000038 	.word	0x20000038

0800e32c <cleanup_stdio>:
 800e32c:	6841      	ldr	r1, [r0, #4]
 800e32e:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <cleanup_stdio+0x34>)
 800e330:	4299      	cmp	r1, r3
 800e332:	b510      	push	{r4, lr}
 800e334:	4604      	mov	r4, r0
 800e336:	d001      	beq.n	800e33c <cleanup_stdio+0x10>
 800e338:	f001 feea 	bl	8010110 <_fflush_r>
 800e33c:	68a1      	ldr	r1, [r4, #8]
 800e33e:	4b09      	ldr	r3, [pc, #36]	; (800e364 <cleanup_stdio+0x38>)
 800e340:	4299      	cmp	r1, r3
 800e342:	d002      	beq.n	800e34a <cleanup_stdio+0x1e>
 800e344:	4620      	mov	r0, r4
 800e346:	f001 fee3 	bl	8010110 <_fflush_r>
 800e34a:	68e1      	ldr	r1, [r4, #12]
 800e34c:	4b06      	ldr	r3, [pc, #24]	; (800e368 <cleanup_stdio+0x3c>)
 800e34e:	4299      	cmp	r1, r3
 800e350:	d004      	beq.n	800e35c <cleanup_stdio+0x30>
 800e352:	4620      	mov	r0, r4
 800e354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e358:	f001 beda 	b.w	8010110 <_fflush_r>
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	bf00      	nop
 800e360:	20007ed0 	.word	0x20007ed0
 800e364:	20007f38 	.word	0x20007f38
 800e368:	20007fa0 	.word	0x20007fa0

0800e36c <global_stdio_init.part.0>:
 800e36c:	b510      	push	{r4, lr}
 800e36e:	4b0b      	ldr	r3, [pc, #44]	; (800e39c <global_stdio_init.part.0+0x30>)
 800e370:	4c0b      	ldr	r4, [pc, #44]	; (800e3a0 <global_stdio_init.part.0+0x34>)
 800e372:	4a0c      	ldr	r2, [pc, #48]	; (800e3a4 <global_stdio_init.part.0+0x38>)
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	4620      	mov	r0, r4
 800e378:	2200      	movs	r2, #0
 800e37a:	2104      	movs	r1, #4
 800e37c:	f7ff ff94 	bl	800e2a8 <std>
 800e380:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e384:	2201      	movs	r2, #1
 800e386:	2109      	movs	r1, #9
 800e388:	f7ff ff8e 	bl	800e2a8 <std>
 800e38c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e390:	2202      	movs	r2, #2
 800e392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e396:	2112      	movs	r1, #18
 800e398:	f7ff bf86 	b.w	800e2a8 <std>
 800e39c:	20008008 	.word	0x20008008
 800e3a0:	20007ed0 	.word	0x20007ed0
 800e3a4:	0800e315 	.word	0x0800e315

0800e3a8 <__sfp_lock_acquire>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__sfp_lock_acquire+0x8>)
 800e3aa:	f000 b9cc 	b.w	800e746 <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	20008011 	.word	0x20008011

0800e3b4 <__sfp_lock_release>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__sfp_lock_release+0x8>)
 800e3b6:	f000 b9c7 	b.w	800e748 <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	20008011 	.word	0x20008011

0800e3c0 <__sinit>:
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	f7ff fff0 	bl	800e3a8 <__sfp_lock_acquire>
 800e3c8:	6a23      	ldr	r3, [r4, #32]
 800e3ca:	b11b      	cbz	r3, 800e3d4 <__sinit+0x14>
 800e3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3d0:	f7ff bff0 	b.w	800e3b4 <__sfp_lock_release>
 800e3d4:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <__sinit+0x28>)
 800e3d6:	6223      	str	r3, [r4, #32]
 800e3d8:	4b04      	ldr	r3, [pc, #16]	; (800e3ec <__sinit+0x2c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1f5      	bne.n	800e3cc <__sinit+0xc>
 800e3e0:	f7ff ffc4 	bl	800e36c <global_stdio_init.part.0>
 800e3e4:	e7f2      	b.n	800e3cc <__sinit+0xc>
 800e3e6:	bf00      	nop
 800e3e8:	0800e32d 	.word	0x0800e32d
 800e3ec:	20008008 	.word	0x20008008

0800e3f0 <_fwalk_sglue>:
 800e3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f4:	4607      	mov	r7, r0
 800e3f6:	4688      	mov	r8, r1
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	2600      	movs	r6, #0
 800e3fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e400:	f1b9 0901 	subs.w	r9, r9, #1
 800e404:	d505      	bpl.n	800e412 <_fwalk_sglue+0x22>
 800e406:	6824      	ldr	r4, [r4, #0]
 800e408:	2c00      	cmp	r4, #0
 800e40a:	d1f7      	bne.n	800e3fc <_fwalk_sglue+0xc>
 800e40c:	4630      	mov	r0, r6
 800e40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e412:	89ab      	ldrh	r3, [r5, #12]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d907      	bls.n	800e428 <_fwalk_sglue+0x38>
 800e418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e41c:	3301      	adds	r3, #1
 800e41e:	d003      	beq.n	800e428 <_fwalk_sglue+0x38>
 800e420:	4629      	mov	r1, r5
 800e422:	4638      	mov	r0, r7
 800e424:	47c0      	blx	r8
 800e426:	4306      	orrs	r6, r0
 800e428:	3568      	adds	r5, #104	; 0x68
 800e42a:	e7e9      	b.n	800e400 <_fwalk_sglue+0x10>

0800e42c <sniprintf>:
 800e42c:	b40c      	push	{r2, r3}
 800e42e:	b530      	push	{r4, r5, lr}
 800e430:	4b17      	ldr	r3, [pc, #92]	; (800e490 <sniprintf+0x64>)
 800e432:	1e0c      	subs	r4, r1, #0
 800e434:	681d      	ldr	r5, [r3, #0]
 800e436:	b09d      	sub	sp, #116	; 0x74
 800e438:	da08      	bge.n	800e44c <sniprintf+0x20>
 800e43a:	238b      	movs	r3, #139	; 0x8b
 800e43c:	602b      	str	r3, [r5, #0]
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295
 800e442:	b01d      	add	sp, #116	; 0x74
 800e444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e448:	b002      	add	sp, #8
 800e44a:	4770      	bx	lr
 800e44c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e450:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e454:	bf14      	ite	ne
 800e456:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e45a:	4623      	moveq	r3, r4
 800e45c:	9304      	str	r3, [sp, #16]
 800e45e:	9307      	str	r3, [sp, #28]
 800e460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e464:	9002      	str	r0, [sp, #8]
 800e466:	9006      	str	r0, [sp, #24]
 800e468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e46c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e46e:	ab21      	add	r3, sp, #132	; 0x84
 800e470:	a902      	add	r1, sp, #8
 800e472:	4628      	mov	r0, r5
 800e474:	9301      	str	r3, [sp, #4]
 800e476:	f001 fcc7 	bl	800fe08 <_svfiprintf_r>
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	bfbc      	itt	lt
 800e47e:	238b      	movlt	r3, #139	; 0x8b
 800e480:	602b      	strlt	r3, [r5, #0]
 800e482:	2c00      	cmp	r4, #0
 800e484:	d0dd      	beq.n	800e442 <sniprintf+0x16>
 800e486:	9b02      	ldr	r3, [sp, #8]
 800e488:	2200      	movs	r2, #0
 800e48a:	701a      	strb	r2, [r3, #0]
 800e48c:	e7d9      	b.n	800e442 <sniprintf+0x16>
 800e48e:	bf00      	nop
 800e490:	20000084 	.word	0x20000084

0800e494 <siprintf>:
 800e494:	b40e      	push	{r1, r2, r3}
 800e496:	b500      	push	{lr}
 800e498:	b09c      	sub	sp, #112	; 0x70
 800e49a:	ab1d      	add	r3, sp, #116	; 0x74
 800e49c:	9002      	str	r0, [sp, #8]
 800e49e:	9006      	str	r0, [sp, #24]
 800e4a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4a4:	4809      	ldr	r0, [pc, #36]	; (800e4cc <siprintf+0x38>)
 800e4a6:	9107      	str	r1, [sp, #28]
 800e4a8:	9104      	str	r1, [sp, #16]
 800e4aa:	4909      	ldr	r1, [pc, #36]	; (800e4d0 <siprintf+0x3c>)
 800e4ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b0:	9105      	str	r1, [sp, #20]
 800e4b2:	6800      	ldr	r0, [r0, #0]
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	a902      	add	r1, sp, #8
 800e4b8:	f001 fca6 	bl	800fe08 <_svfiprintf_r>
 800e4bc:	9b02      	ldr	r3, [sp, #8]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	b01c      	add	sp, #112	; 0x70
 800e4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4c8:	b003      	add	sp, #12
 800e4ca:	4770      	bx	lr
 800e4cc:	20000084 	.word	0x20000084
 800e4d0:	ffff0208 	.word	0xffff0208

0800e4d4 <__sread>:
 800e4d4:	b510      	push	{r4, lr}
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4dc:	f000 f8e4 	bl	800e6a8 <_read_r>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	bfab      	itete	ge
 800e4e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4e6:	89a3      	ldrhlt	r3, [r4, #12]
 800e4e8:	181b      	addge	r3, r3, r0
 800e4ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4ee:	bfac      	ite	ge
 800e4f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4f2:	81a3      	strhlt	r3, [r4, #12]
 800e4f4:	bd10      	pop	{r4, pc}

0800e4f6 <__swrite>:
 800e4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fa:	461f      	mov	r7, r3
 800e4fc:	898b      	ldrh	r3, [r1, #12]
 800e4fe:	05db      	lsls	r3, r3, #23
 800e500:	4605      	mov	r5, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4616      	mov	r6, r2
 800e506:	d505      	bpl.n	800e514 <__swrite+0x1e>
 800e508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e50c:	2302      	movs	r3, #2
 800e50e:	2200      	movs	r2, #0
 800e510:	f000 f8b8 	bl	800e684 <_lseek_r>
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e51a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	4632      	mov	r2, r6
 800e522:	463b      	mov	r3, r7
 800e524:	4628      	mov	r0, r5
 800e526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e52a:	f000 b8cf 	b.w	800e6cc <_write_r>

0800e52e <__sseek>:
 800e52e:	b510      	push	{r4, lr}
 800e530:	460c      	mov	r4, r1
 800e532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e536:	f000 f8a5 	bl	800e684 <_lseek_r>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	bf15      	itete	ne
 800e540:	6560      	strne	r0, [r4, #84]	; 0x54
 800e542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e54a:	81a3      	strheq	r3, [r4, #12]
 800e54c:	bf18      	it	ne
 800e54e:	81a3      	strhne	r3, [r4, #12]
 800e550:	bd10      	pop	{r4, pc}

0800e552 <__sclose>:
 800e552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e556:	f000 b82f 	b.w	800e5b8 <_close_r>

0800e55a <memset>:
 800e55a:	4402      	add	r2, r0
 800e55c:	4603      	mov	r3, r0
 800e55e:	4293      	cmp	r3, r2
 800e560:	d100      	bne.n	800e564 <memset+0xa>
 800e562:	4770      	bx	lr
 800e564:	f803 1b01 	strb.w	r1, [r3], #1
 800e568:	e7f9      	b.n	800e55e <memset+0x4>

0800e56a <strcat>:
 800e56a:	b510      	push	{r4, lr}
 800e56c:	4602      	mov	r2, r0
 800e56e:	7814      	ldrb	r4, [r2, #0]
 800e570:	4613      	mov	r3, r2
 800e572:	3201      	adds	r2, #1
 800e574:	2c00      	cmp	r4, #0
 800e576:	d1fa      	bne.n	800e56e <strcat+0x4>
 800e578:	3b01      	subs	r3, #1
 800e57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e582:	2a00      	cmp	r2, #0
 800e584:	d1f9      	bne.n	800e57a <strcat+0x10>
 800e586:	bd10      	pop	{r4, pc}

0800e588 <strncpy>:
 800e588:	b510      	push	{r4, lr}
 800e58a:	3901      	subs	r1, #1
 800e58c:	4603      	mov	r3, r0
 800e58e:	b132      	cbz	r2, 800e59e <strncpy+0x16>
 800e590:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e594:	f803 4b01 	strb.w	r4, [r3], #1
 800e598:	3a01      	subs	r2, #1
 800e59a:	2c00      	cmp	r4, #0
 800e59c:	d1f7      	bne.n	800e58e <strncpy+0x6>
 800e59e:	441a      	add	r2, r3
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d100      	bne.n	800e5a8 <strncpy+0x20>
 800e5a6:	bd10      	pop	{r4, pc}
 800e5a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ac:	e7f9      	b.n	800e5a2 <strncpy+0x1a>
	...

0800e5b0 <_localeconv_r>:
 800e5b0:	4800      	ldr	r0, [pc, #0]	; (800e5b4 <_localeconv_r+0x4>)
 800e5b2:	4770      	bx	lr
 800e5b4:	20000178 	.word	0x20000178

0800e5b8 <_close_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4d06      	ldr	r5, [pc, #24]	; (800e5d4 <_close_r+0x1c>)
 800e5bc:	2300      	movs	r3, #0
 800e5be:	4604      	mov	r4, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	602b      	str	r3, [r5, #0]
 800e5c4:	f7f4 f86f 	bl	80026a6 <_close>
 800e5c8:	1c43      	adds	r3, r0, #1
 800e5ca:	d102      	bne.n	800e5d2 <_close_r+0x1a>
 800e5cc:	682b      	ldr	r3, [r5, #0]
 800e5ce:	b103      	cbz	r3, 800e5d2 <_close_r+0x1a>
 800e5d0:	6023      	str	r3, [r4, #0]
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	2000800c 	.word	0x2000800c

0800e5d8 <_reclaim_reent>:
 800e5d8:	4b29      	ldr	r3, [pc, #164]	; (800e680 <_reclaim_reent+0xa8>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	b570      	push	{r4, r5, r6, lr}
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	d04b      	beq.n	800e67c <_reclaim_reent+0xa4>
 800e5e4:	69c3      	ldr	r3, [r0, #28]
 800e5e6:	b143      	cbz	r3, 800e5fa <_reclaim_reent+0x22>
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d144      	bne.n	800e678 <_reclaim_reent+0xa0>
 800e5ee:	69e3      	ldr	r3, [r4, #28]
 800e5f0:	6819      	ldr	r1, [r3, #0]
 800e5f2:	b111      	cbz	r1, 800e5fa <_reclaim_reent+0x22>
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 ff31 	bl	800f45c <_free_r>
 800e5fa:	6961      	ldr	r1, [r4, #20]
 800e5fc:	b111      	cbz	r1, 800e604 <_reclaim_reent+0x2c>
 800e5fe:	4620      	mov	r0, r4
 800e600:	f000 ff2c 	bl	800f45c <_free_r>
 800e604:	69e1      	ldr	r1, [r4, #28]
 800e606:	b111      	cbz	r1, 800e60e <_reclaim_reent+0x36>
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 ff27 	bl	800f45c <_free_r>
 800e60e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e610:	b111      	cbz	r1, 800e618 <_reclaim_reent+0x40>
 800e612:	4620      	mov	r0, r4
 800e614:	f000 ff22 	bl	800f45c <_free_r>
 800e618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e61a:	b111      	cbz	r1, 800e622 <_reclaim_reent+0x4a>
 800e61c:	4620      	mov	r0, r4
 800e61e:	f000 ff1d 	bl	800f45c <_free_r>
 800e622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e624:	b111      	cbz	r1, 800e62c <_reclaim_reent+0x54>
 800e626:	4620      	mov	r0, r4
 800e628:	f000 ff18 	bl	800f45c <_free_r>
 800e62c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e62e:	b111      	cbz	r1, 800e636 <_reclaim_reent+0x5e>
 800e630:	4620      	mov	r0, r4
 800e632:	f000 ff13 	bl	800f45c <_free_r>
 800e636:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e638:	b111      	cbz	r1, 800e640 <_reclaim_reent+0x68>
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 ff0e 	bl	800f45c <_free_r>
 800e640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e642:	b111      	cbz	r1, 800e64a <_reclaim_reent+0x72>
 800e644:	4620      	mov	r0, r4
 800e646:	f000 ff09 	bl	800f45c <_free_r>
 800e64a:	6a23      	ldr	r3, [r4, #32]
 800e64c:	b1b3      	cbz	r3, 800e67c <_reclaim_reent+0xa4>
 800e64e:	4620      	mov	r0, r4
 800e650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e654:	4718      	bx	r3
 800e656:	5949      	ldr	r1, [r1, r5]
 800e658:	b941      	cbnz	r1, 800e66c <_reclaim_reent+0x94>
 800e65a:	3504      	adds	r5, #4
 800e65c:	69e3      	ldr	r3, [r4, #28]
 800e65e:	2d80      	cmp	r5, #128	; 0x80
 800e660:	68d9      	ldr	r1, [r3, #12]
 800e662:	d1f8      	bne.n	800e656 <_reclaim_reent+0x7e>
 800e664:	4620      	mov	r0, r4
 800e666:	f000 fef9 	bl	800f45c <_free_r>
 800e66a:	e7c0      	b.n	800e5ee <_reclaim_reent+0x16>
 800e66c:	680e      	ldr	r6, [r1, #0]
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 fef4 	bl	800f45c <_free_r>
 800e674:	4631      	mov	r1, r6
 800e676:	e7ef      	b.n	800e658 <_reclaim_reent+0x80>
 800e678:	2500      	movs	r5, #0
 800e67a:	e7ef      	b.n	800e65c <_reclaim_reent+0x84>
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	bf00      	nop
 800e680:	20000084 	.word	0x20000084

0800e684 <_lseek_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4d07      	ldr	r5, [pc, #28]	; (800e6a4 <_lseek_r+0x20>)
 800e688:	4604      	mov	r4, r0
 800e68a:	4608      	mov	r0, r1
 800e68c:	4611      	mov	r1, r2
 800e68e:	2200      	movs	r2, #0
 800e690:	602a      	str	r2, [r5, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	f7f4 f82e 	bl	80026f4 <_lseek>
 800e698:	1c43      	adds	r3, r0, #1
 800e69a:	d102      	bne.n	800e6a2 <_lseek_r+0x1e>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	b103      	cbz	r3, 800e6a2 <_lseek_r+0x1e>
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	bd38      	pop	{r3, r4, r5, pc}
 800e6a4:	2000800c 	.word	0x2000800c

0800e6a8 <_read_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4d07      	ldr	r5, [pc, #28]	; (800e6c8 <_read_r+0x20>)
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	4608      	mov	r0, r1
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	602a      	str	r2, [r5, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f7f3 ffbc 	bl	8002634 <_read>
 800e6bc:	1c43      	adds	r3, r0, #1
 800e6be:	d102      	bne.n	800e6c6 <_read_r+0x1e>
 800e6c0:	682b      	ldr	r3, [r5, #0]
 800e6c2:	b103      	cbz	r3, 800e6c6 <_read_r+0x1e>
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	2000800c 	.word	0x2000800c

0800e6cc <_write_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4d07      	ldr	r5, [pc, #28]	; (800e6ec <_write_r+0x20>)
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	4608      	mov	r0, r1
 800e6d4:	4611      	mov	r1, r2
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	602a      	str	r2, [r5, #0]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	f7f3 ffc7 	bl	800266e <_write>
 800e6e0:	1c43      	adds	r3, r0, #1
 800e6e2:	d102      	bne.n	800e6ea <_write_r+0x1e>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	b103      	cbz	r3, 800e6ea <_write_r+0x1e>
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	2000800c 	.word	0x2000800c

0800e6f0 <__errno>:
 800e6f0:	4b01      	ldr	r3, [pc, #4]	; (800e6f8 <__errno+0x8>)
 800e6f2:	6818      	ldr	r0, [r3, #0]
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	20000084 	.word	0x20000084

0800e6fc <__libc_init_array>:
 800e6fc:	b570      	push	{r4, r5, r6, lr}
 800e6fe:	4d0d      	ldr	r5, [pc, #52]	; (800e734 <__libc_init_array+0x38>)
 800e700:	4c0d      	ldr	r4, [pc, #52]	; (800e738 <__libc_init_array+0x3c>)
 800e702:	1b64      	subs	r4, r4, r5
 800e704:	10a4      	asrs	r4, r4, #2
 800e706:	2600      	movs	r6, #0
 800e708:	42a6      	cmp	r6, r4
 800e70a:	d109      	bne.n	800e720 <__libc_init_array+0x24>
 800e70c:	4d0b      	ldr	r5, [pc, #44]	; (800e73c <__libc_init_array+0x40>)
 800e70e:	4c0c      	ldr	r4, [pc, #48]	; (800e740 <__libc_init_array+0x44>)
 800e710:	f003 f9d2 	bl	8011ab8 <_init>
 800e714:	1b64      	subs	r4, r4, r5
 800e716:	10a4      	asrs	r4, r4, #2
 800e718:	2600      	movs	r6, #0
 800e71a:	42a6      	cmp	r6, r4
 800e71c:	d105      	bne.n	800e72a <__libc_init_array+0x2e>
 800e71e:	bd70      	pop	{r4, r5, r6, pc}
 800e720:	f855 3b04 	ldr.w	r3, [r5], #4
 800e724:	4798      	blx	r3
 800e726:	3601      	adds	r6, #1
 800e728:	e7ee      	b.n	800e708 <__libc_init_array+0xc>
 800e72a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e72e:	4798      	blx	r3
 800e730:	3601      	adds	r6, #1
 800e732:	e7f2      	b.n	800e71a <__libc_init_array+0x1e>
 800e734:	080121f0 	.word	0x080121f0
 800e738:	080121f0 	.word	0x080121f0
 800e73c:	080121f0 	.word	0x080121f0
 800e740:	080121f4 	.word	0x080121f4

0800e744 <__retarget_lock_init_recursive>:
 800e744:	4770      	bx	lr

0800e746 <__retarget_lock_acquire_recursive>:
 800e746:	4770      	bx	lr

0800e748 <__retarget_lock_release_recursive>:
 800e748:	4770      	bx	lr

0800e74a <memcpy>:
 800e74a:	440a      	add	r2, r1
 800e74c:	4291      	cmp	r1, r2
 800e74e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e752:	d100      	bne.n	800e756 <memcpy+0xc>
 800e754:	4770      	bx	lr
 800e756:	b510      	push	{r4, lr}
 800e758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e75c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e760:	4291      	cmp	r1, r2
 800e762:	d1f9      	bne.n	800e758 <memcpy+0xe>
 800e764:	bd10      	pop	{r4, pc}

0800e766 <quorem>:
 800e766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76a:	6903      	ldr	r3, [r0, #16]
 800e76c:	690c      	ldr	r4, [r1, #16]
 800e76e:	42a3      	cmp	r3, r4
 800e770:	4607      	mov	r7, r0
 800e772:	db7e      	blt.n	800e872 <quorem+0x10c>
 800e774:	3c01      	subs	r4, #1
 800e776:	f101 0814 	add.w	r8, r1, #20
 800e77a:	f100 0514 	add.w	r5, r0, #20
 800e77e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e78c:	3301      	adds	r3, #1
 800e78e:	429a      	cmp	r2, r3
 800e790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e798:	fbb2 f6f3 	udiv	r6, r2, r3
 800e79c:	d331      	bcc.n	800e802 <quorem+0x9c>
 800e79e:	f04f 0e00 	mov.w	lr, #0
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	46ac      	mov	ip, r5
 800e7a6:	46f2      	mov	sl, lr
 800e7a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7ac:	b293      	uxth	r3, r2
 800e7ae:	fb06 e303 	mla	r3, r6, r3, lr
 800e7b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7b6:	0c1a      	lsrs	r2, r3, #16
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	ebaa 0303 	sub.w	r3, sl, r3
 800e7be:	f8dc a000 	ldr.w	sl, [ip]
 800e7c2:	fa13 f38a 	uxtah	r3, r3, sl
 800e7c6:	fb06 220e 	mla	r2, r6, lr, r2
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	9b00      	ldr	r3, [sp, #0]
 800e7ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7e0:	4581      	cmp	r9, r0
 800e7e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7e6:	f84c 3b04 	str.w	r3, [ip], #4
 800e7ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7ee:	d2db      	bcs.n	800e7a8 <quorem+0x42>
 800e7f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7f4:	b92b      	cbnz	r3, 800e802 <quorem+0x9c>
 800e7f6:	9b01      	ldr	r3, [sp, #4]
 800e7f8:	3b04      	subs	r3, #4
 800e7fa:	429d      	cmp	r5, r3
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	d32c      	bcc.n	800e85a <quorem+0xf4>
 800e800:	613c      	str	r4, [r7, #16]
 800e802:	4638      	mov	r0, r7
 800e804:	f001 f9a6 	bl	800fb54 <__mcmp>
 800e808:	2800      	cmp	r0, #0
 800e80a:	db22      	blt.n	800e852 <quorem+0xec>
 800e80c:	3601      	adds	r6, #1
 800e80e:	4629      	mov	r1, r5
 800e810:	2000      	movs	r0, #0
 800e812:	f858 2b04 	ldr.w	r2, [r8], #4
 800e816:	f8d1 c000 	ldr.w	ip, [r1]
 800e81a:	b293      	uxth	r3, r2
 800e81c:	1ac3      	subs	r3, r0, r3
 800e81e:	0c12      	lsrs	r2, r2, #16
 800e820:	fa13 f38c 	uxtah	r3, r3, ip
 800e824:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e828:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e832:	45c1      	cmp	r9, r8
 800e834:	f841 3b04 	str.w	r3, [r1], #4
 800e838:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e83c:	d2e9      	bcs.n	800e812 <quorem+0xac>
 800e83e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e846:	b922      	cbnz	r2, 800e852 <quorem+0xec>
 800e848:	3b04      	subs	r3, #4
 800e84a:	429d      	cmp	r5, r3
 800e84c:	461a      	mov	r2, r3
 800e84e:	d30a      	bcc.n	800e866 <quorem+0x100>
 800e850:	613c      	str	r4, [r7, #16]
 800e852:	4630      	mov	r0, r6
 800e854:	b003      	add	sp, #12
 800e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85a:	6812      	ldr	r2, [r2, #0]
 800e85c:	3b04      	subs	r3, #4
 800e85e:	2a00      	cmp	r2, #0
 800e860:	d1ce      	bne.n	800e800 <quorem+0x9a>
 800e862:	3c01      	subs	r4, #1
 800e864:	e7c9      	b.n	800e7fa <quorem+0x94>
 800e866:	6812      	ldr	r2, [r2, #0]
 800e868:	3b04      	subs	r3, #4
 800e86a:	2a00      	cmp	r2, #0
 800e86c:	d1f0      	bne.n	800e850 <quorem+0xea>
 800e86e:	3c01      	subs	r4, #1
 800e870:	e7eb      	b.n	800e84a <quorem+0xe4>
 800e872:	2000      	movs	r0, #0
 800e874:	e7ee      	b.n	800e854 <quorem+0xee>
	...

0800e878 <_dtoa_r>:
 800e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	ed2d 8b04 	vpush	{d8-d9}
 800e880:	69c5      	ldr	r5, [r0, #28]
 800e882:	b093      	sub	sp, #76	; 0x4c
 800e884:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e888:	ec57 6b10 	vmov	r6, r7, d0
 800e88c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e890:	9107      	str	r1, [sp, #28]
 800e892:	4604      	mov	r4, r0
 800e894:	920a      	str	r2, [sp, #40]	; 0x28
 800e896:	930d      	str	r3, [sp, #52]	; 0x34
 800e898:	b975      	cbnz	r5, 800e8b8 <_dtoa_r+0x40>
 800e89a:	2010      	movs	r0, #16
 800e89c:	f000 fe2a 	bl	800f4f4 <malloc>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	61e0      	str	r0, [r4, #28]
 800e8a4:	b920      	cbnz	r0, 800e8b0 <_dtoa_r+0x38>
 800e8a6:	4bae      	ldr	r3, [pc, #696]	; (800eb60 <_dtoa_r+0x2e8>)
 800e8a8:	21ef      	movs	r1, #239	; 0xef
 800e8aa:	48ae      	ldr	r0, [pc, #696]	; (800eb64 <_dtoa_r+0x2ec>)
 800e8ac:	f001 fc82 	bl	80101b4 <__assert_func>
 800e8b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8b4:	6005      	str	r5, [r0, #0]
 800e8b6:	60c5      	str	r5, [r0, #12]
 800e8b8:	69e3      	ldr	r3, [r4, #28]
 800e8ba:	6819      	ldr	r1, [r3, #0]
 800e8bc:	b151      	cbz	r1, 800e8d4 <_dtoa_r+0x5c>
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	604a      	str	r2, [r1, #4]
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	4093      	lsls	r3, r2
 800e8c6:	608b      	str	r3, [r1, #8]
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 ff07 	bl	800f6dc <_Bfree>
 800e8ce:	69e3      	ldr	r3, [r4, #28]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	1e3b      	subs	r3, r7, #0
 800e8d6:	bfbb      	ittet	lt
 800e8d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8dc:	9303      	strlt	r3, [sp, #12]
 800e8de:	2300      	movge	r3, #0
 800e8e0:	2201      	movlt	r2, #1
 800e8e2:	bfac      	ite	ge
 800e8e4:	f8c8 3000 	strge.w	r3, [r8]
 800e8e8:	f8c8 2000 	strlt.w	r2, [r8]
 800e8ec:	4b9e      	ldr	r3, [pc, #632]	; (800eb68 <_dtoa_r+0x2f0>)
 800e8ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e8f2:	ea33 0308 	bics.w	r3, r3, r8
 800e8f6:	d11b      	bne.n	800e930 <_dtoa_r+0xb8>
 800e8f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e904:	4333      	orrs	r3, r6
 800e906:	f000 8593 	beq.w	800f430 <_dtoa_r+0xbb8>
 800e90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e90c:	b963      	cbnz	r3, 800e928 <_dtoa_r+0xb0>
 800e90e:	4b97      	ldr	r3, [pc, #604]	; (800eb6c <_dtoa_r+0x2f4>)
 800e910:	e027      	b.n	800e962 <_dtoa_r+0xea>
 800e912:	4b97      	ldr	r3, [pc, #604]	; (800eb70 <_dtoa_r+0x2f8>)
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	3308      	adds	r3, #8
 800e918:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e91a:	6013      	str	r3, [r2, #0]
 800e91c:	9800      	ldr	r0, [sp, #0]
 800e91e:	b013      	add	sp, #76	; 0x4c
 800e920:	ecbd 8b04 	vpop	{d8-d9}
 800e924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e928:	4b90      	ldr	r3, [pc, #576]	; (800eb6c <_dtoa_r+0x2f4>)
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	3303      	adds	r3, #3
 800e92e:	e7f3      	b.n	800e918 <_dtoa_r+0xa0>
 800e930:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e934:	2200      	movs	r2, #0
 800e936:	ec51 0b17 	vmov	r0, r1, d7
 800e93a:	eeb0 8a47 	vmov.f32	s16, s14
 800e93e:	eef0 8a67 	vmov.f32	s17, s15
 800e942:	2300      	movs	r3, #0
 800e944:	f7f2 f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 800e948:	4681      	mov	r9, r0
 800e94a:	b160      	cbz	r0, 800e966 <_dtoa_r+0xee>
 800e94c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e94e:	2301      	movs	r3, #1
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8568 	beq.w	800f42a <_dtoa_r+0xbb2>
 800e95a:	4b86      	ldr	r3, [pc, #536]	; (800eb74 <_dtoa_r+0x2fc>)
 800e95c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e95e:	6013      	str	r3, [r2, #0]
 800e960:	3b01      	subs	r3, #1
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	e7da      	b.n	800e91c <_dtoa_r+0xa4>
 800e966:	aa10      	add	r2, sp, #64	; 0x40
 800e968:	a911      	add	r1, sp, #68	; 0x44
 800e96a:	4620      	mov	r0, r4
 800e96c:	eeb0 0a48 	vmov.f32	s0, s16
 800e970:	eef0 0a68 	vmov.f32	s1, s17
 800e974:	f001 f994 	bl	800fca0 <__d2b>
 800e978:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e97c:	4682      	mov	sl, r0
 800e97e:	2d00      	cmp	r5, #0
 800e980:	d07f      	beq.n	800ea82 <_dtoa_r+0x20a>
 800e982:	ee18 3a90 	vmov	r3, s17
 800e986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e98a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e98e:	ec51 0b18 	vmov	r0, r1, d8
 800e992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e99a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e99e:	4619      	mov	r1, r3
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	4b75      	ldr	r3, [pc, #468]	; (800eb78 <_dtoa_r+0x300>)
 800e9a4:	f7f1 fc90 	bl	80002c8 <__aeabi_dsub>
 800e9a8:	a367      	add	r3, pc, #412	; (adr r3, 800eb48 <_dtoa_r+0x2d0>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f7f1 fe43 	bl	8000638 <__aeabi_dmul>
 800e9b2:	a367      	add	r3, pc, #412	; (adr r3, 800eb50 <_dtoa_r+0x2d8>)
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fc88 	bl	80002cc <__adddf3>
 800e9bc:	4606      	mov	r6, r0
 800e9be:	4628      	mov	r0, r5
 800e9c0:	460f      	mov	r7, r1
 800e9c2:	f7f1 fdcf 	bl	8000564 <__aeabi_i2d>
 800e9c6:	a364      	add	r3, pc, #400	; (adr r3, 800eb58 <_dtoa_r+0x2e0>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fe34 	bl	8000638 <__aeabi_dmul>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	f7f1 fc78 	bl	80002cc <__adddf3>
 800e9dc:	4606      	mov	r6, r0
 800e9de:	460f      	mov	r7, r1
 800e9e0:	f7f2 f8da 	bl	8000b98 <__aeabi_d2iz>
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	4683      	mov	fp, r0
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	f7f2 f895 	bl	8000b1c <__aeabi_dcmplt>
 800e9f2:	b148      	cbz	r0, 800ea08 <_dtoa_r+0x190>
 800e9f4:	4658      	mov	r0, fp
 800e9f6:	f7f1 fdb5 	bl	8000564 <__aeabi_i2d>
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	463b      	mov	r3, r7
 800e9fe:	f7f2 f883 	bl	8000b08 <__aeabi_dcmpeq>
 800ea02:	b908      	cbnz	r0, 800ea08 <_dtoa_r+0x190>
 800ea04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea08:	f1bb 0f16 	cmp.w	fp, #22
 800ea0c:	d857      	bhi.n	800eabe <_dtoa_r+0x246>
 800ea0e:	4b5b      	ldr	r3, [pc, #364]	; (800eb7c <_dtoa_r+0x304>)
 800ea10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	ec51 0b18 	vmov	r0, r1, d8
 800ea1c:	f7f2 f87e 	bl	8000b1c <__aeabi_dcmplt>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d04e      	beq.n	800eac2 <_dtoa_r+0x24a>
 800ea24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea28:	2300      	movs	r3, #0
 800ea2a:	930c      	str	r3, [sp, #48]	; 0x30
 800ea2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea2e:	1b5b      	subs	r3, r3, r5
 800ea30:	1e5a      	subs	r2, r3, #1
 800ea32:	bf45      	ittet	mi
 800ea34:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea38:	9305      	strmi	r3, [sp, #20]
 800ea3a:	2300      	movpl	r3, #0
 800ea3c:	2300      	movmi	r3, #0
 800ea3e:	9206      	str	r2, [sp, #24]
 800ea40:	bf54      	ite	pl
 800ea42:	9305      	strpl	r3, [sp, #20]
 800ea44:	9306      	strmi	r3, [sp, #24]
 800ea46:	f1bb 0f00 	cmp.w	fp, #0
 800ea4a:	db3c      	blt.n	800eac6 <_dtoa_r+0x24e>
 800ea4c:	9b06      	ldr	r3, [sp, #24]
 800ea4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ea52:	445b      	add	r3, fp
 800ea54:	9306      	str	r3, [sp, #24]
 800ea56:	2300      	movs	r3, #0
 800ea58:	9308      	str	r3, [sp, #32]
 800ea5a:	9b07      	ldr	r3, [sp, #28]
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	d868      	bhi.n	800eb32 <_dtoa_r+0x2ba>
 800ea60:	2b05      	cmp	r3, #5
 800ea62:	bfc4      	itt	gt
 800ea64:	3b04      	subgt	r3, #4
 800ea66:	9307      	strgt	r3, [sp, #28]
 800ea68:	9b07      	ldr	r3, [sp, #28]
 800ea6a:	f1a3 0302 	sub.w	r3, r3, #2
 800ea6e:	bfcc      	ite	gt
 800ea70:	2500      	movgt	r5, #0
 800ea72:	2501      	movle	r5, #1
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	f200 8085 	bhi.w	800eb84 <_dtoa_r+0x30c>
 800ea7a:	e8df f003 	tbb	[pc, r3]
 800ea7e:	3b2e      	.short	0x3b2e
 800ea80:	5839      	.short	0x5839
 800ea82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea86:	441d      	add	r5, r3
 800ea88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea8c:	2b20      	cmp	r3, #32
 800ea8e:	bfc1      	itttt	gt
 800ea90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea94:	fa08 f803 	lslgt.w	r8, r8, r3
 800ea98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ea9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eaa0:	bfd6      	itet	le
 800eaa2:	f1c3 0320 	rsble	r3, r3, #32
 800eaa6:	ea48 0003 	orrgt.w	r0, r8, r3
 800eaaa:	fa06 f003 	lslle.w	r0, r6, r3
 800eaae:	f7f1 fd49 	bl	8000544 <__aeabi_ui2d>
 800eab2:	2201      	movs	r2, #1
 800eab4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800eab8:	3d01      	subs	r5, #1
 800eaba:	920e      	str	r2, [sp, #56]	; 0x38
 800eabc:	e76f      	b.n	800e99e <_dtoa_r+0x126>
 800eabe:	2301      	movs	r3, #1
 800eac0:	e7b3      	b.n	800ea2a <_dtoa_r+0x1b2>
 800eac2:	900c      	str	r0, [sp, #48]	; 0x30
 800eac4:	e7b2      	b.n	800ea2c <_dtoa_r+0x1b4>
 800eac6:	9b05      	ldr	r3, [sp, #20]
 800eac8:	eba3 030b 	sub.w	r3, r3, fp
 800eacc:	9305      	str	r3, [sp, #20]
 800eace:	f1cb 0300 	rsb	r3, fp, #0
 800ead2:	9308      	str	r3, [sp, #32]
 800ead4:	2300      	movs	r3, #0
 800ead6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ead8:	e7bf      	b.n	800ea5a <_dtoa_r+0x1e2>
 800eada:	2300      	movs	r3, #0
 800eadc:	9309      	str	r3, [sp, #36]	; 0x24
 800eade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dc52      	bgt.n	800eb8a <_dtoa_r+0x312>
 800eae4:	2301      	movs	r3, #1
 800eae6:	9301      	str	r3, [sp, #4]
 800eae8:	9304      	str	r3, [sp, #16]
 800eaea:	461a      	mov	r2, r3
 800eaec:	920a      	str	r2, [sp, #40]	; 0x28
 800eaee:	e00b      	b.n	800eb08 <_dtoa_r+0x290>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e7f3      	b.n	800eadc <_dtoa_r+0x264>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eafa:	445b      	add	r3, fp
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	3301      	adds	r3, #1
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	bfb8      	it	lt
 800eb06:	2301      	movlt	r3, #1
 800eb08:	69e0      	ldr	r0, [r4, #28]
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	2204      	movs	r2, #4
 800eb0e:	f102 0614 	add.w	r6, r2, #20
 800eb12:	429e      	cmp	r6, r3
 800eb14:	d93d      	bls.n	800eb92 <_dtoa_r+0x31a>
 800eb16:	6041      	str	r1, [r0, #4]
 800eb18:	4620      	mov	r0, r4
 800eb1a:	f000 fd9f 	bl	800f65c <_Balloc>
 800eb1e:	9000      	str	r0, [sp, #0]
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d139      	bne.n	800eb98 <_dtoa_r+0x320>
 800eb24:	4b16      	ldr	r3, [pc, #88]	; (800eb80 <_dtoa_r+0x308>)
 800eb26:	4602      	mov	r2, r0
 800eb28:	f240 11af 	movw	r1, #431	; 0x1af
 800eb2c:	e6bd      	b.n	800e8aa <_dtoa_r+0x32>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e7e1      	b.n	800eaf6 <_dtoa_r+0x27e>
 800eb32:	2501      	movs	r5, #1
 800eb34:	2300      	movs	r3, #0
 800eb36:	9307      	str	r3, [sp, #28]
 800eb38:	9509      	str	r5, [sp, #36]	; 0x24
 800eb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3e:	9301      	str	r3, [sp, #4]
 800eb40:	9304      	str	r3, [sp, #16]
 800eb42:	2200      	movs	r2, #0
 800eb44:	2312      	movs	r3, #18
 800eb46:	e7d1      	b.n	800eaec <_dtoa_r+0x274>
 800eb48:	636f4361 	.word	0x636f4361
 800eb4c:	3fd287a7 	.word	0x3fd287a7
 800eb50:	8b60c8b3 	.word	0x8b60c8b3
 800eb54:	3fc68a28 	.word	0x3fc68a28
 800eb58:	509f79fb 	.word	0x509f79fb
 800eb5c:	3fd34413 	.word	0x3fd34413
 800eb60:	08011e85 	.word	0x08011e85
 800eb64:	08011e9c 	.word	0x08011e9c
 800eb68:	7ff00000 	.word	0x7ff00000
 800eb6c:	08011e81 	.word	0x08011e81
 800eb70:	08011e78 	.word	0x08011e78
 800eb74:	08011e55 	.word	0x08011e55
 800eb78:	3ff80000 	.word	0x3ff80000
 800eb7c:	08011f88 	.word	0x08011f88
 800eb80:	08011ef4 	.word	0x08011ef4
 800eb84:	2301      	movs	r3, #1
 800eb86:	9309      	str	r3, [sp, #36]	; 0x24
 800eb88:	e7d7      	b.n	800eb3a <_dtoa_r+0x2c2>
 800eb8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb8c:	9301      	str	r3, [sp, #4]
 800eb8e:	9304      	str	r3, [sp, #16]
 800eb90:	e7ba      	b.n	800eb08 <_dtoa_r+0x290>
 800eb92:	3101      	adds	r1, #1
 800eb94:	0052      	lsls	r2, r2, #1
 800eb96:	e7ba      	b.n	800eb0e <_dtoa_r+0x296>
 800eb98:	69e3      	ldr	r3, [r4, #28]
 800eb9a:	9a00      	ldr	r2, [sp, #0]
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	2b0e      	cmp	r3, #14
 800eba2:	f200 80a8 	bhi.w	800ecf6 <_dtoa_r+0x47e>
 800eba6:	2d00      	cmp	r5, #0
 800eba8:	f000 80a5 	beq.w	800ecf6 <_dtoa_r+0x47e>
 800ebac:	f1bb 0f00 	cmp.w	fp, #0
 800ebb0:	dd38      	ble.n	800ec24 <_dtoa_r+0x3ac>
 800ebb2:	4bc0      	ldr	r3, [pc, #768]	; (800eeb4 <_dtoa_r+0x63c>)
 800ebb4:	f00b 020f 	and.w	r2, fp, #15
 800ebb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ebc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ebc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ebc8:	d019      	beq.n	800ebfe <_dtoa_r+0x386>
 800ebca:	4bbb      	ldr	r3, [pc, #748]	; (800eeb8 <_dtoa_r+0x640>)
 800ebcc:	ec51 0b18 	vmov	r0, r1, d8
 800ebd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebd4:	f7f1 fe5a 	bl	800088c <__aeabi_ddiv>
 800ebd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebdc:	f008 080f 	and.w	r8, r8, #15
 800ebe0:	2503      	movs	r5, #3
 800ebe2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800eeb8 <_dtoa_r+0x640>
 800ebe6:	f1b8 0f00 	cmp.w	r8, #0
 800ebea:	d10a      	bne.n	800ec02 <_dtoa_r+0x38a>
 800ebec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebf0:	4632      	mov	r2, r6
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	f7f1 fe4a 	bl	800088c <__aeabi_ddiv>
 800ebf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebfc:	e02b      	b.n	800ec56 <_dtoa_r+0x3de>
 800ebfe:	2502      	movs	r5, #2
 800ec00:	e7ef      	b.n	800ebe2 <_dtoa_r+0x36a>
 800ec02:	f018 0f01 	tst.w	r8, #1
 800ec06:	d008      	beq.n	800ec1a <_dtoa_r+0x3a2>
 800ec08:	4630      	mov	r0, r6
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ec10:	f7f1 fd12 	bl	8000638 <__aeabi_dmul>
 800ec14:	3501      	adds	r5, #1
 800ec16:	4606      	mov	r6, r0
 800ec18:	460f      	mov	r7, r1
 800ec1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec1e:	f109 0908 	add.w	r9, r9, #8
 800ec22:	e7e0      	b.n	800ebe6 <_dtoa_r+0x36e>
 800ec24:	f000 809f 	beq.w	800ed66 <_dtoa_r+0x4ee>
 800ec28:	f1cb 0600 	rsb	r6, fp, #0
 800ec2c:	4ba1      	ldr	r3, [pc, #644]	; (800eeb4 <_dtoa_r+0x63c>)
 800ec2e:	4fa2      	ldr	r7, [pc, #648]	; (800eeb8 <_dtoa_r+0x640>)
 800ec30:	f006 020f 	and.w	r2, r6, #15
 800ec34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	ec51 0b18 	vmov	r0, r1, d8
 800ec40:	f7f1 fcfa 	bl	8000638 <__aeabi_dmul>
 800ec44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec48:	1136      	asrs	r6, r6, #4
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	2502      	movs	r5, #2
 800ec4e:	2e00      	cmp	r6, #0
 800ec50:	d17e      	bne.n	800ed50 <_dtoa_r+0x4d8>
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1d0      	bne.n	800ebf8 <_dtoa_r+0x380>
 800ec56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 8084 	beq.w	800ed6a <_dtoa_r+0x4f2>
 800ec62:	4b96      	ldr	r3, [pc, #600]	; (800eebc <_dtoa_r+0x644>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 ff57 	bl	8000b1c <__aeabi_dcmplt>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	d07b      	beq.n	800ed6a <_dtoa_r+0x4f2>
 800ec72:	9b04      	ldr	r3, [sp, #16]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d078      	beq.n	800ed6a <_dtoa_r+0x4f2>
 800ec78:	9b01      	ldr	r3, [sp, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	dd39      	ble.n	800ecf2 <_dtoa_r+0x47a>
 800ec7e:	4b90      	ldr	r3, [pc, #576]	; (800eec0 <_dtoa_r+0x648>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	4640      	mov	r0, r8
 800ec84:	4649      	mov	r1, r9
 800ec86:	f7f1 fcd7 	bl	8000638 <__aeabi_dmul>
 800ec8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec8e:	9e01      	ldr	r6, [sp, #4]
 800ec90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ec94:	3501      	adds	r5, #1
 800ec96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7f1 fc62 	bl	8000564 <__aeabi_i2d>
 800eca0:	4642      	mov	r2, r8
 800eca2:	464b      	mov	r3, r9
 800eca4:	f7f1 fcc8 	bl	8000638 <__aeabi_dmul>
 800eca8:	4b86      	ldr	r3, [pc, #536]	; (800eec4 <_dtoa_r+0x64c>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f7f1 fb0e 	bl	80002cc <__adddf3>
 800ecb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ecb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecb8:	9303      	str	r3, [sp, #12]
 800ecba:	2e00      	cmp	r6, #0
 800ecbc:	d158      	bne.n	800ed70 <_dtoa_r+0x4f8>
 800ecbe:	4b82      	ldr	r3, [pc, #520]	; (800eec8 <_dtoa_r+0x650>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	f7f1 faff 	bl	80002c8 <__aeabi_dsub>
 800ecca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecce:	4680      	mov	r8, r0
 800ecd0:	4689      	mov	r9, r1
 800ecd2:	f7f1 ff41 	bl	8000b58 <__aeabi_dcmpgt>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f040 8296 	bne.w	800f208 <_dtoa_r+0x990>
 800ecdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ece0:	4640      	mov	r0, r8
 800ece2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ece6:	4649      	mov	r1, r9
 800ece8:	f7f1 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	f040 8289 	bne.w	800f204 <_dtoa_r+0x98c>
 800ecf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ecf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	f2c0 814e 	blt.w	800ef9a <_dtoa_r+0x722>
 800ecfe:	f1bb 0f0e 	cmp.w	fp, #14
 800ed02:	f300 814a 	bgt.w	800ef9a <_dtoa_r+0x722>
 800ed06:	4b6b      	ldr	r3, [pc, #428]	; (800eeb4 <_dtoa_r+0x63c>)
 800ed08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f280 80dc 	bge.w	800eed0 <_dtoa_r+0x658>
 800ed18:	9b04      	ldr	r3, [sp, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f300 80d8 	bgt.w	800eed0 <_dtoa_r+0x658>
 800ed20:	f040 826f 	bne.w	800f202 <_dtoa_r+0x98a>
 800ed24:	4b68      	ldr	r3, [pc, #416]	; (800eec8 <_dtoa_r+0x650>)
 800ed26:	2200      	movs	r2, #0
 800ed28:	4640      	mov	r0, r8
 800ed2a:	4649      	mov	r1, r9
 800ed2c:	f7f1 fc84 	bl	8000638 <__aeabi_dmul>
 800ed30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed34:	f7f1 ff06 	bl	8000b44 <__aeabi_dcmpge>
 800ed38:	9e04      	ldr	r6, [sp, #16]
 800ed3a:	4637      	mov	r7, r6
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	f040 8245 	bne.w	800f1cc <_dtoa_r+0x954>
 800ed42:	9d00      	ldr	r5, [sp, #0]
 800ed44:	2331      	movs	r3, #49	; 0x31
 800ed46:	f805 3b01 	strb.w	r3, [r5], #1
 800ed4a:	f10b 0b01 	add.w	fp, fp, #1
 800ed4e:	e241      	b.n	800f1d4 <_dtoa_r+0x95c>
 800ed50:	07f2      	lsls	r2, r6, #31
 800ed52:	d505      	bpl.n	800ed60 <_dtoa_r+0x4e8>
 800ed54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed58:	f7f1 fc6e 	bl	8000638 <__aeabi_dmul>
 800ed5c:	3501      	adds	r5, #1
 800ed5e:	2301      	movs	r3, #1
 800ed60:	1076      	asrs	r6, r6, #1
 800ed62:	3708      	adds	r7, #8
 800ed64:	e773      	b.n	800ec4e <_dtoa_r+0x3d6>
 800ed66:	2502      	movs	r5, #2
 800ed68:	e775      	b.n	800ec56 <_dtoa_r+0x3de>
 800ed6a:	9e04      	ldr	r6, [sp, #16]
 800ed6c:	465f      	mov	r7, fp
 800ed6e:	e792      	b.n	800ec96 <_dtoa_r+0x41e>
 800ed70:	9900      	ldr	r1, [sp, #0]
 800ed72:	4b50      	ldr	r3, [pc, #320]	; (800eeb4 <_dtoa_r+0x63c>)
 800ed74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed78:	4431      	add	r1, r6
 800ed7a:	9102      	str	r1, [sp, #8]
 800ed7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed7e:	eeb0 9a47 	vmov.f32	s18, s14
 800ed82:	eef0 9a67 	vmov.f32	s19, s15
 800ed86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed8e:	2900      	cmp	r1, #0
 800ed90:	d044      	beq.n	800ee1c <_dtoa_r+0x5a4>
 800ed92:	494e      	ldr	r1, [pc, #312]	; (800eecc <_dtoa_r+0x654>)
 800ed94:	2000      	movs	r0, #0
 800ed96:	f7f1 fd79 	bl	800088c <__aeabi_ddiv>
 800ed9a:	ec53 2b19 	vmov	r2, r3, d9
 800ed9e:	f7f1 fa93 	bl	80002c8 <__aeabi_dsub>
 800eda2:	9d00      	ldr	r5, [sp, #0]
 800eda4:	ec41 0b19 	vmov	d9, r0, r1
 800eda8:	4649      	mov	r1, r9
 800edaa:	4640      	mov	r0, r8
 800edac:	f7f1 fef4 	bl	8000b98 <__aeabi_d2iz>
 800edb0:	4606      	mov	r6, r0
 800edb2:	f7f1 fbd7 	bl	8000564 <__aeabi_i2d>
 800edb6:	4602      	mov	r2, r0
 800edb8:	460b      	mov	r3, r1
 800edba:	4640      	mov	r0, r8
 800edbc:	4649      	mov	r1, r9
 800edbe:	f7f1 fa83 	bl	80002c8 <__aeabi_dsub>
 800edc2:	3630      	adds	r6, #48	; 0x30
 800edc4:	f805 6b01 	strb.w	r6, [r5], #1
 800edc8:	ec53 2b19 	vmov	r2, r3, d9
 800edcc:	4680      	mov	r8, r0
 800edce:	4689      	mov	r9, r1
 800edd0:	f7f1 fea4 	bl	8000b1c <__aeabi_dcmplt>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d164      	bne.n	800eea2 <_dtoa_r+0x62a>
 800edd8:	4642      	mov	r2, r8
 800edda:	464b      	mov	r3, r9
 800eddc:	4937      	ldr	r1, [pc, #220]	; (800eebc <_dtoa_r+0x644>)
 800edde:	2000      	movs	r0, #0
 800ede0:	f7f1 fa72 	bl	80002c8 <__aeabi_dsub>
 800ede4:	ec53 2b19 	vmov	r2, r3, d9
 800ede8:	f7f1 fe98 	bl	8000b1c <__aeabi_dcmplt>
 800edec:	2800      	cmp	r0, #0
 800edee:	f040 80b6 	bne.w	800ef5e <_dtoa_r+0x6e6>
 800edf2:	9b02      	ldr	r3, [sp, #8]
 800edf4:	429d      	cmp	r5, r3
 800edf6:	f43f af7c 	beq.w	800ecf2 <_dtoa_r+0x47a>
 800edfa:	4b31      	ldr	r3, [pc, #196]	; (800eec0 <_dtoa_r+0x648>)
 800edfc:	ec51 0b19 	vmov	r0, r1, d9
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7f1 fc19 	bl	8000638 <__aeabi_dmul>
 800ee06:	4b2e      	ldr	r3, [pc, #184]	; (800eec0 <_dtoa_r+0x648>)
 800ee08:	ec41 0b19 	vmov	d9, r0, r1
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	4640      	mov	r0, r8
 800ee10:	4649      	mov	r1, r9
 800ee12:	f7f1 fc11 	bl	8000638 <__aeabi_dmul>
 800ee16:	4680      	mov	r8, r0
 800ee18:	4689      	mov	r9, r1
 800ee1a:	e7c5      	b.n	800eda8 <_dtoa_r+0x530>
 800ee1c:	ec51 0b17 	vmov	r0, r1, d7
 800ee20:	f7f1 fc0a 	bl	8000638 <__aeabi_dmul>
 800ee24:	9b02      	ldr	r3, [sp, #8]
 800ee26:	9d00      	ldr	r5, [sp, #0]
 800ee28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee2a:	ec41 0b19 	vmov	d9, r0, r1
 800ee2e:	4649      	mov	r1, r9
 800ee30:	4640      	mov	r0, r8
 800ee32:	f7f1 feb1 	bl	8000b98 <__aeabi_d2iz>
 800ee36:	4606      	mov	r6, r0
 800ee38:	f7f1 fb94 	bl	8000564 <__aeabi_i2d>
 800ee3c:	3630      	adds	r6, #48	; 0x30
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	4640      	mov	r0, r8
 800ee44:	4649      	mov	r1, r9
 800ee46:	f7f1 fa3f 	bl	80002c8 <__aeabi_dsub>
 800ee4a:	f805 6b01 	strb.w	r6, [r5], #1
 800ee4e:	9b02      	ldr	r3, [sp, #8]
 800ee50:	429d      	cmp	r5, r3
 800ee52:	4680      	mov	r8, r0
 800ee54:	4689      	mov	r9, r1
 800ee56:	f04f 0200 	mov.w	r2, #0
 800ee5a:	d124      	bne.n	800eea6 <_dtoa_r+0x62e>
 800ee5c:	4b1b      	ldr	r3, [pc, #108]	; (800eecc <_dtoa_r+0x654>)
 800ee5e:	ec51 0b19 	vmov	r0, r1, d9
 800ee62:	f7f1 fa33 	bl	80002cc <__adddf3>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	f7f1 fe73 	bl	8000b58 <__aeabi_dcmpgt>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d173      	bne.n	800ef5e <_dtoa_r+0x6e6>
 800ee76:	ec53 2b19 	vmov	r2, r3, d9
 800ee7a:	4914      	ldr	r1, [pc, #80]	; (800eecc <_dtoa_r+0x654>)
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	f7f1 fa23 	bl	80002c8 <__aeabi_dsub>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4640      	mov	r0, r8
 800ee88:	4649      	mov	r1, r9
 800ee8a:	f7f1 fe47 	bl	8000b1c <__aeabi_dcmplt>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f43f af2f 	beq.w	800ecf2 <_dtoa_r+0x47a>
 800ee94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee96:	1e6b      	subs	r3, r5, #1
 800ee98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee9e:	2b30      	cmp	r3, #48	; 0x30
 800eea0:	d0f8      	beq.n	800ee94 <_dtoa_r+0x61c>
 800eea2:	46bb      	mov	fp, r7
 800eea4:	e04a      	b.n	800ef3c <_dtoa_r+0x6c4>
 800eea6:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <_dtoa_r+0x648>)
 800eea8:	f7f1 fbc6 	bl	8000638 <__aeabi_dmul>
 800eeac:	4680      	mov	r8, r0
 800eeae:	4689      	mov	r9, r1
 800eeb0:	e7bd      	b.n	800ee2e <_dtoa_r+0x5b6>
 800eeb2:	bf00      	nop
 800eeb4:	08011f88 	.word	0x08011f88
 800eeb8:	08011f60 	.word	0x08011f60
 800eebc:	3ff00000 	.word	0x3ff00000
 800eec0:	40240000 	.word	0x40240000
 800eec4:	401c0000 	.word	0x401c0000
 800eec8:	40140000 	.word	0x40140000
 800eecc:	3fe00000 	.word	0x3fe00000
 800eed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eed4:	9d00      	ldr	r5, [sp, #0]
 800eed6:	4642      	mov	r2, r8
 800eed8:	464b      	mov	r3, r9
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 fcd5 	bl	800088c <__aeabi_ddiv>
 800eee2:	f7f1 fe59 	bl	8000b98 <__aeabi_d2iz>
 800eee6:	9001      	str	r0, [sp, #4]
 800eee8:	f7f1 fb3c 	bl	8000564 <__aeabi_i2d>
 800eeec:	4642      	mov	r2, r8
 800eeee:	464b      	mov	r3, r9
 800eef0:	f7f1 fba2 	bl	8000638 <__aeabi_dmul>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	4630      	mov	r0, r6
 800eefa:	4639      	mov	r1, r7
 800eefc:	f7f1 f9e4 	bl	80002c8 <__aeabi_dsub>
 800ef00:	9e01      	ldr	r6, [sp, #4]
 800ef02:	9f04      	ldr	r7, [sp, #16]
 800ef04:	3630      	adds	r6, #48	; 0x30
 800ef06:	f805 6b01 	strb.w	r6, [r5], #1
 800ef0a:	9e00      	ldr	r6, [sp, #0]
 800ef0c:	1bae      	subs	r6, r5, r6
 800ef0e:	42b7      	cmp	r7, r6
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	d134      	bne.n	800ef80 <_dtoa_r+0x708>
 800ef16:	f7f1 f9d9 	bl	80002cc <__adddf3>
 800ef1a:	4642      	mov	r2, r8
 800ef1c:	464b      	mov	r3, r9
 800ef1e:	4606      	mov	r6, r0
 800ef20:	460f      	mov	r7, r1
 800ef22:	f7f1 fe19 	bl	8000b58 <__aeabi_dcmpgt>
 800ef26:	b9c8      	cbnz	r0, 800ef5c <_dtoa_r+0x6e4>
 800ef28:	4642      	mov	r2, r8
 800ef2a:	464b      	mov	r3, r9
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	4639      	mov	r1, r7
 800ef30:	f7f1 fdea 	bl	8000b08 <__aeabi_dcmpeq>
 800ef34:	b110      	cbz	r0, 800ef3c <_dtoa_r+0x6c4>
 800ef36:	9b01      	ldr	r3, [sp, #4]
 800ef38:	07db      	lsls	r3, r3, #31
 800ef3a:	d40f      	bmi.n	800ef5c <_dtoa_r+0x6e4>
 800ef3c:	4651      	mov	r1, sl
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 fbcc 	bl	800f6dc <_Bfree>
 800ef44:	2300      	movs	r3, #0
 800ef46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef48:	702b      	strb	r3, [r5, #0]
 800ef4a:	f10b 0301 	add.w	r3, fp, #1
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f43f ace2 	beq.w	800e91c <_dtoa_r+0xa4>
 800ef58:	601d      	str	r5, [r3, #0]
 800ef5a:	e4df      	b.n	800e91c <_dtoa_r+0xa4>
 800ef5c:	465f      	mov	r7, fp
 800ef5e:	462b      	mov	r3, r5
 800ef60:	461d      	mov	r5, r3
 800ef62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef66:	2a39      	cmp	r2, #57	; 0x39
 800ef68:	d106      	bne.n	800ef78 <_dtoa_r+0x700>
 800ef6a:	9a00      	ldr	r2, [sp, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d1f7      	bne.n	800ef60 <_dtoa_r+0x6e8>
 800ef70:	9900      	ldr	r1, [sp, #0]
 800ef72:	2230      	movs	r2, #48	; 0x30
 800ef74:	3701      	adds	r7, #1
 800ef76:	700a      	strb	r2, [r1, #0]
 800ef78:	781a      	ldrb	r2, [r3, #0]
 800ef7a:	3201      	adds	r2, #1
 800ef7c:	701a      	strb	r2, [r3, #0]
 800ef7e:	e790      	b.n	800eea2 <_dtoa_r+0x62a>
 800ef80:	4ba3      	ldr	r3, [pc, #652]	; (800f210 <_dtoa_r+0x998>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	f7f1 fb58 	bl	8000638 <__aeabi_dmul>
 800ef88:	2200      	movs	r2, #0
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	460f      	mov	r7, r1
 800ef90:	f7f1 fdba 	bl	8000b08 <__aeabi_dcmpeq>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d09e      	beq.n	800eed6 <_dtoa_r+0x65e>
 800ef98:	e7d0      	b.n	800ef3c <_dtoa_r+0x6c4>
 800ef9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef9c:	2a00      	cmp	r2, #0
 800ef9e:	f000 80ca 	beq.w	800f136 <_dtoa_r+0x8be>
 800efa2:	9a07      	ldr	r2, [sp, #28]
 800efa4:	2a01      	cmp	r2, #1
 800efa6:	f300 80ad 	bgt.w	800f104 <_dtoa_r+0x88c>
 800efaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efac:	2a00      	cmp	r2, #0
 800efae:	f000 80a5 	beq.w	800f0fc <_dtoa_r+0x884>
 800efb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efb6:	9e08      	ldr	r6, [sp, #32]
 800efb8:	9d05      	ldr	r5, [sp, #20]
 800efba:	9a05      	ldr	r2, [sp, #20]
 800efbc:	441a      	add	r2, r3
 800efbe:	9205      	str	r2, [sp, #20]
 800efc0:	9a06      	ldr	r2, [sp, #24]
 800efc2:	2101      	movs	r1, #1
 800efc4:	441a      	add	r2, r3
 800efc6:	4620      	mov	r0, r4
 800efc8:	9206      	str	r2, [sp, #24]
 800efca:	f000 fc3d 	bl	800f848 <__i2b>
 800efce:	4607      	mov	r7, r0
 800efd0:	b165      	cbz	r5, 800efec <_dtoa_r+0x774>
 800efd2:	9b06      	ldr	r3, [sp, #24]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dd09      	ble.n	800efec <_dtoa_r+0x774>
 800efd8:	42ab      	cmp	r3, r5
 800efda:	9a05      	ldr	r2, [sp, #20]
 800efdc:	bfa8      	it	ge
 800efde:	462b      	movge	r3, r5
 800efe0:	1ad2      	subs	r2, r2, r3
 800efe2:	9205      	str	r2, [sp, #20]
 800efe4:	9a06      	ldr	r2, [sp, #24]
 800efe6:	1aed      	subs	r5, r5, r3
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	9b08      	ldr	r3, [sp, #32]
 800efee:	b1f3      	cbz	r3, 800f02e <_dtoa_r+0x7b6>
 800eff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 80a3 	beq.w	800f13e <_dtoa_r+0x8c6>
 800eff8:	2e00      	cmp	r6, #0
 800effa:	dd10      	ble.n	800f01e <_dtoa_r+0x7a6>
 800effc:	4639      	mov	r1, r7
 800effe:	4632      	mov	r2, r6
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fce1 	bl	800f9c8 <__pow5mult>
 800f006:	4652      	mov	r2, sl
 800f008:	4601      	mov	r1, r0
 800f00a:	4607      	mov	r7, r0
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 fc31 	bl	800f874 <__multiply>
 800f012:	4651      	mov	r1, sl
 800f014:	4680      	mov	r8, r0
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fb60 	bl	800f6dc <_Bfree>
 800f01c:	46c2      	mov	sl, r8
 800f01e:	9b08      	ldr	r3, [sp, #32]
 800f020:	1b9a      	subs	r2, r3, r6
 800f022:	d004      	beq.n	800f02e <_dtoa_r+0x7b6>
 800f024:	4651      	mov	r1, sl
 800f026:	4620      	mov	r0, r4
 800f028:	f000 fcce 	bl	800f9c8 <__pow5mult>
 800f02c:	4682      	mov	sl, r0
 800f02e:	2101      	movs	r1, #1
 800f030:	4620      	mov	r0, r4
 800f032:	f000 fc09 	bl	800f848 <__i2b>
 800f036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	4606      	mov	r6, r0
 800f03c:	f340 8081 	ble.w	800f142 <_dtoa_r+0x8ca>
 800f040:	461a      	mov	r2, r3
 800f042:	4601      	mov	r1, r0
 800f044:	4620      	mov	r0, r4
 800f046:	f000 fcbf 	bl	800f9c8 <__pow5mult>
 800f04a:	9b07      	ldr	r3, [sp, #28]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	4606      	mov	r6, r0
 800f050:	dd7a      	ble.n	800f148 <_dtoa_r+0x8d0>
 800f052:	f04f 0800 	mov.w	r8, #0
 800f056:	6933      	ldr	r3, [r6, #16]
 800f058:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f05c:	6918      	ldr	r0, [r3, #16]
 800f05e:	f000 fba5 	bl	800f7ac <__hi0bits>
 800f062:	f1c0 0020 	rsb	r0, r0, #32
 800f066:	9b06      	ldr	r3, [sp, #24]
 800f068:	4418      	add	r0, r3
 800f06a:	f010 001f 	ands.w	r0, r0, #31
 800f06e:	f000 8094 	beq.w	800f19a <_dtoa_r+0x922>
 800f072:	f1c0 0320 	rsb	r3, r0, #32
 800f076:	2b04      	cmp	r3, #4
 800f078:	f340 8085 	ble.w	800f186 <_dtoa_r+0x90e>
 800f07c:	9b05      	ldr	r3, [sp, #20]
 800f07e:	f1c0 001c 	rsb	r0, r0, #28
 800f082:	4403      	add	r3, r0
 800f084:	9305      	str	r3, [sp, #20]
 800f086:	9b06      	ldr	r3, [sp, #24]
 800f088:	4403      	add	r3, r0
 800f08a:	4405      	add	r5, r0
 800f08c:	9306      	str	r3, [sp, #24]
 800f08e:	9b05      	ldr	r3, [sp, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	dd05      	ble.n	800f0a0 <_dtoa_r+0x828>
 800f094:	4651      	mov	r1, sl
 800f096:	461a      	mov	r2, r3
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fcef 	bl	800fa7c <__lshift>
 800f09e:	4682      	mov	sl, r0
 800f0a0:	9b06      	ldr	r3, [sp, #24]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dd05      	ble.n	800f0b2 <_dtoa_r+0x83a>
 800f0a6:	4631      	mov	r1, r6
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 fce6 	bl	800fa7c <__lshift>
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d072      	beq.n	800f19e <_dtoa_r+0x926>
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4650      	mov	r0, sl
 800f0bc:	f000 fd4a 	bl	800fb54 <__mcmp>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	da6c      	bge.n	800f19e <_dtoa_r+0x926>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4651      	mov	r1, sl
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 fb28 	bl	800f720 <__multadd>
 800f0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0d6:	4682      	mov	sl, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 81b0 	beq.w	800f43e <_dtoa_r+0xbc6>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	220a      	movs	r2, #10
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f000 fb1b 	bl	800f720 <__multadd>
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	f300 8096 	bgt.w	800f220 <_dtoa_r+0x9a8>
 800f0f4:	9b07      	ldr	r3, [sp, #28]
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	dc59      	bgt.n	800f1ae <_dtoa_r+0x936>
 800f0fa:	e091      	b.n	800f220 <_dtoa_r+0x9a8>
 800f0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f102:	e758      	b.n	800efb6 <_dtoa_r+0x73e>
 800f104:	9b04      	ldr	r3, [sp, #16]
 800f106:	1e5e      	subs	r6, r3, #1
 800f108:	9b08      	ldr	r3, [sp, #32]
 800f10a:	42b3      	cmp	r3, r6
 800f10c:	bfbf      	itttt	lt
 800f10e:	9b08      	ldrlt	r3, [sp, #32]
 800f110:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f112:	9608      	strlt	r6, [sp, #32]
 800f114:	1af3      	sublt	r3, r6, r3
 800f116:	bfb4      	ite	lt
 800f118:	18d2      	addlt	r2, r2, r3
 800f11a:	1b9e      	subge	r6, r3, r6
 800f11c:	9b04      	ldr	r3, [sp, #16]
 800f11e:	bfbc      	itt	lt
 800f120:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f122:	2600      	movlt	r6, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	bfb7      	itett	lt
 800f128:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f12c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f130:	1a9d      	sublt	r5, r3, r2
 800f132:	2300      	movlt	r3, #0
 800f134:	e741      	b.n	800efba <_dtoa_r+0x742>
 800f136:	9e08      	ldr	r6, [sp, #32]
 800f138:	9d05      	ldr	r5, [sp, #20]
 800f13a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f13c:	e748      	b.n	800efd0 <_dtoa_r+0x758>
 800f13e:	9a08      	ldr	r2, [sp, #32]
 800f140:	e770      	b.n	800f024 <_dtoa_r+0x7ac>
 800f142:	9b07      	ldr	r3, [sp, #28]
 800f144:	2b01      	cmp	r3, #1
 800f146:	dc19      	bgt.n	800f17c <_dtoa_r+0x904>
 800f148:	9b02      	ldr	r3, [sp, #8]
 800f14a:	b9bb      	cbnz	r3, 800f17c <_dtoa_r+0x904>
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f152:	b99b      	cbnz	r3, 800f17c <_dtoa_r+0x904>
 800f154:	9b03      	ldr	r3, [sp, #12]
 800f156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f15a:	0d1b      	lsrs	r3, r3, #20
 800f15c:	051b      	lsls	r3, r3, #20
 800f15e:	b183      	cbz	r3, 800f182 <_dtoa_r+0x90a>
 800f160:	9b05      	ldr	r3, [sp, #20]
 800f162:	3301      	adds	r3, #1
 800f164:	9305      	str	r3, [sp, #20]
 800f166:	9b06      	ldr	r3, [sp, #24]
 800f168:	3301      	adds	r3, #1
 800f16a:	9306      	str	r3, [sp, #24]
 800f16c:	f04f 0801 	mov.w	r8, #1
 800f170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f172:	2b00      	cmp	r3, #0
 800f174:	f47f af6f 	bne.w	800f056 <_dtoa_r+0x7de>
 800f178:	2001      	movs	r0, #1
 800f17a:	e774      	b.n	800f066 <_dtoa_r+0x7ee>
 800f17c:	f04f 0800 	mov.w	r8, #0
 800f180:	e7f6      	b.n	800f170 <_dtoa_r+0x8f8>
 800f182:	4698      	mov	r8, r3
 800f184:	e7f4      	b.n	800f170 <_dtoa_r+0x8f8>
 800f186:	d082      	beq.n	800f08e <_dtoa_r+0x816>
 800f188:	9a05      	ldr	r2, [sp, #20]
 800f18a:	331c      	adds	r3, #28
 800f18c:	441a      	add	r2, r3
 800f18e:	9205      	str	r2, [sp, #20]
 800f190:	9a06      	ldr	r2, [sp, #24]
 800f192:	441a      	add	r2, r3
 800f194:	441d      	add	r5, r3
 800f196:	9206      	str	r2, [sp, #24]
 800f198:	e779      	b.n	800f08e <_dtoa_r+0x816>
 800f19a:	4603      	mov	r3, r0
 800f19c:	e7f4      	b.n	800f188 <_dtoa_r+0x910>
 800f19e:	9b04      	ldr	r3, [sp, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dc37      	bgt.n	800f214 <_dtoa_r+0x99c>
 800f1a4:	9b07      	ldr	r3, [sp, #28]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	dd34      	ble.n	800f214 <_dtoa_r+0x99c>
 800f1aa:	9b04      	ldr	r3, [sp, #16]
 800f1ac:	9301      	str	r3, [sp, #4]
 800f1ae:	9b01      	ldr	r3, [sp, #4]
 800f1b0:	b963      	cbnz	r3, 800f1cc <_dtoa_r+0x954>
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	2205      	movs	r2, #5
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f000 fab2 	bl	800f720 <__multadd>
 800f1bc:	4601      	mov	r1, r0
 800f1be:	4606      	mov	r6, r0
 800f1c0:	4650      	mov	r0, sl
 800f1c2:	f000 fcc7 	bl	800fb54 <__mcmp>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f73f adbb 	bgt.w	800ed42 <_dtoa_r+0x4ca>
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ce:	9d00      	ldr	r5, [sp, #0]
 800f1d0:	ea6f 0b03 	mvn.w	fp, r3
 800f1d4:	f04f 0800 	mov.w	r8, #0
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f000 fa7e 	bl	800f6dc <_Bfree>
 800f1e0:	2f00      	cmp	r7, #0
 800f1e2:	f43f aeab 	beq.w	800ef3c <_dtoa_r+0x6c4>
 800f1e6:	f1b8 0f00 	cmp.w	r8, #0
 800f1ea:	d005      	beq.n	800f1f8 <_dtoa_r+0x980>
 800f1ec:	45b8      	cmp	r8, r7
 800f1ee:	d003      	beq.n	800f1f8 <_dtoa_r+0x980>
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fa72 	bl	800f6dc <_Bfree>
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 fa6e 	bl	800f6dc <_Bfree>
 800f200:	e69c      	b.n	800ef3c <_dtoa_r+0x6c4>
 800f202:	2600      	movs	r6, #0
 800f204:	4637      	mov	r7, r6
 800f206:	e7e1      	b.n	800f1cc <_dtoa_r+0x954>
 800f208:	46bb      	mov	fp, r7
 800f20a:	4637      	mov	r7, r6
 800f20c:	e599      	b.n	800ed42 <_dtoa_r+0x4ca>
 800f20e:	bf00      	nop
 800f210:	40240000 	.word	0x40240000
 800f214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 80c8 	beq.w	800f3ac <_dtoa_r+0xb34>
 800f21c:	9b04      	ldr	r3, [sp, #16]
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	2d00      	cmp	r5, #0
 800f222:	dd05      	ble.n	800f230 <_dtoa_r+0x9b8>
 800f224:	4639      	mov	r1, r7
 800f226:	462a      	mov	r2, r5
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 fc27 	bl	800fa7c <__lshift>
 800f22e:	4607      	mov	r7, r0
 800f230:	f1b8 0f00 	cmp.w	r8, #0
 800f234:	d05b      	beq.n	800f2ee <_dtoa_r+0xa76>
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	4620      	mov	r0, r4
 800f23a:	f000 fa0f 	bl	800f65c <_Balloc>
 800f23e:	4605      	mov	r5, r0
 800f240:	b928      	cbnz	r0, 800f24e <_dtoa_r+0x9d6>
 800f242:	4b83      	ldr	r3, [pc, #524]	; (800f450 <_dtoa_r+0xbd8>)
 800f244:	4602      	mov	r2, r0
 800f246:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f24a:	f7ff bb2e 	b.w	800e8aa <_dtoa_r+0x32>
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	3202      	adds	r2, #2
 800f252:	0092      	lsls	r2, r2, #2
 800f254:	f107 010c 	add.w	r1, r7, #12
 800f258:	300c      	adds	r0, #12
 800f25a:	f7ff fa76 	bl	800e74a <memcpy>
 800f25e:	2201      	movs	r2, #1
 800f260:	4629      	mov	r1, r5
 800f262:	4620      	mov	r0, r4
 800f264:	f000 fc0a 	bl	800fa7c <__lshift>
 800f268:	9b00      	ldr	r3, [sp, #0]
 800f26a:	3301      	adds	r3, #1
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f272:	4413      	add	r3, r2
 800f274:	9308      	str	r3, [sp, #32]
 800f276:	9b02      	ldr	r3, [sp, #8]
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	46b8      	mov	r8, r7
 800f27e:	9306      	str	r3, [sp, #24]
 800f280:	4607      	mov	r7, r0
 800f282:	9b04      	ldr	r3, [sp, #16]
 800f284:	4631      	mov	r1, r6
 800f286:	3b01      	subs	r3, #1
 800f288:	4650      	mov	r0, sl
 800f28a:	9301      	str	r3, [sp, #4]
 800f28c:	f7ff fa6b 	bl	800e766 <quorem>
 800f290:	4641      	mov	r1, r8
 800f292:	9002      	str	r0, [sp, #8]
 800f294:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f298:	4650      	mov	r0, sl
 800f29a:	f000 fc5b 	bl	800fb54 <__mcmp>
 800f29e:	463a      	mov	r2, r7
 800f2a0:	9005      	str	r0, [sp, #20]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 fc71 	bl	800fb8c <__mdiff>
 800f2aa:	68c2      	ldr	r2, [r0, #12]
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	bb02      	cbnz	r2, 800f2f2 <_dtoa_r+0xa7a>
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	4650      	mov	r0, sl
 800f2b4:	f000 fc4e 	bl	800fb54 <__mcmp>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	4620      	mov	r0, r4
 800f2be:	9209      	str	r2, [sp, #36]	; 0x24
 800f2c0:	f000 fa0c 	bl	800f6dc <_Bfree>
 800f2c4:	9b07      	ldr	r3, [sp, #28]
 800f2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2c8:	9d04      	ldr	r5, [sp, #16]
 800f2ca:	ea43 0102 	orr.w	r1, r3, r2
 800f2ce:	9b06      	ldr	r3, [sp, #24]
 800f2d0:	4319      	orrs	r1, r3
 800f2d2:	d110      	bne.n	800f2f6 <_dtoa_r+0xa7e>
 800f2d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f2d8:	d029      	beq.n	800f32e <_dtoa_r+0xab6>
 800f2da:	9b05      	ldr	r3, [sp, #20]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	dd02      	ble.n	800f2e6 <_dtoa_r+0xa6e>
 800f2e0:	9b02      	ldr	r3, [sp, #8]
 800f2e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f2e6:	9b01      	ldr	r3, [sp, #4]
 800f2e8:	f883 9000 	strb.w	r9, [r3]
 800f2ec:	e774      	b.n	800f1d8 <_dtoa_r+0x960>
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	e7ba      	b.n	800f268 <_dtoa_r+0x9f0>
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	e7e1      	b.n	800f2ba <_dtoa_r+0xa42>
 800f2f6:	9b05      	ldr	r3, [sp, #20]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	db04      	blt.n	800f306 <_dtoa_r+0xa8e>
 800f2fc:	9907      	ldr	r1, [sp, #28]
 800f2fe:	430b      	orrs	r3, r1
 800f300:	9906      	ldr	r1, [sp, #24]
 800f302:	430b      	orrs	r3, r1
 800f304:	d120      	bne.n	800f348 <_dtoa_r+0xad0>
 800f306:	2a00      	cmp	r2, #0
 800f308:	dded      	ble.n	800f2e6 <_dtoa_r+0xa6e>
 800f30a:	4651      	mov	r1, sl
 800f30c:	2201      	movs	r2, #1
 800f30e:	4620      	mov	r0, r4
 800f310:	f000 fbb4 	bl	800fa7c <__lshift>
 800f314:	4631      	mov	r1, r6
 800f316:	4682      	mov	sl, r0
 800f318:	f000 fc1c 	bl	800fb54 <__mcmp>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	dc03      	bgt.n	800f328 <_dtoa_r+0xab0>
 800f320:	d1e1      	bne.n	800f2e6 <_dtoa_r+0xa6e>
 800f322:	f019 0f01 	tst.w	r9, #1
 800f326:	d0de      	beq.n	800f2e6 <_dtoa_r+0xa6e>
 800f328:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f32c:	d1d8      	bne.n	800f2e0 <_dtoa_r+0xa68>
 800f32e:	9a01      	ldr	r2, [sp, #4]
 800f330:	2339      	movs	r3, #57	; 0x39
 800f332:	7013      	strb	r3, [r2, #0]
 800f334:	462b      	mov	r3, r5
 800f336:	461d      	mov	r5, r3
 800f338:	3b01      	subs	r3, #1
 800f33a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f33e:	2a39      	cmp	r2, #57	; 0x39
 800f340:	d06c      	beq.n	800f41c <_dtoa_r+0xba4>
 800f342:	3201      	adds	r2, #1
 800f344:	701a      	strb	r2, [r3, #0]
 800f346:	e747      	b.n	800f1d8 <_dtoa_r+0x960>
 800f348:	2a00      	cmp	r2, #0
 800f34a:	dd07      	ble.n	800f35c <_dtoa_r+0xae4>
 800f34c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f350:	d0ed      	beq.n	800f32e <_dtoa_r+0xab6>
 800f352:	9a01      	ldr	r2, [sp, #4]
 800f354:	f109 0301 	add.w	r3, r9, #1
 800f358:	7013      	strb	r3, [r2, #0]
 800f35a:	e73d      	b.n	800f1d8 <_dtoa_r+0x960>
 800f35c:	9b04      	ldr	r3, [sp, #16]
 800f35e:	9a08      	ldr	r2, [sp, #32]
 800f360:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f364:	4293      	cmp	r3, r2
 800f366:	d043      	beq.n	800f3f0 <_dtoa_r+0xb78>
 800f368:	4651      	mov	r1, sl
 800f36a:	2300      	movs	r3, #0
 800f36c:	220a      	movs	r2, #10
 800f36e:	4620      	mov	r0, r4
 800f370:	f000 f9d6 	bl	800f720 <__multadd>
 800f374:	45b8      	cmp	r8, r7
 800f376:	4682      	mov	sl, r0
 800f378:	f04f 0300 	mov.w	r3, #0
 800f37c:	f04f 020a 	mov.w	r2, #10
 800f380:	4641      	mov	r1, r8
 800f382:	4620      	mov	r0, r4
 800f384:	d107      	bne.n	800f396 <_dtoa_r+0xb1e>
 800f386:	f000 f9cb 	bl	800f720 <__multadd>
 800f38a:	4680      	mov	r8, r0
 800f38c:	4607      	mov	r7, r0
 800f38e:	9b04      	ldr	r3, [sp, #16]
 800f390:	3301      	adds	r3, #1
 800f392:	9304      	str	r3, [sp, #16]
 800f394:	e775      	b.n	800f282 <_dtoa_r+0xa0a>
 800f396:	f000 f9c3 	bl	800f720 <__multadd>
 800f39a:	4639      	mov	r1, r7
 800f39c:	4680      	mov	r8, r0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	220a      	movs	r2, #10
 800f3a2:	4620      	mov	r0, r4
 800f3a4:	f000 f9bc 	bl	800f720 <__multadd>
 800f3a8:	4607      	mov	r7, r0
 800f3aa:	e7f0      	b.n	800f38e <_dtoa_r+0xb16>
 800f3ac:	9b04      	ldr	r3, [sp, #16]
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	9d00      	ldr	r5, [sp, #0]
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	4650      	mov	r0, sl
 800f3b6:	f7ff f9d6 	bl	800e766 <quorem>
 800f3ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f3be:	9b00      	ldr	r3, [sp, #0]
 800f3c0:	f805 9b01 	strb.w	r9, [r5], #1
 800f3c4:	1aea      	subs	r2, r5, r3
 800f3c6:	9b01      	ldr	r3, [sp, #4]
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	dd07      	ble.n	800f3dc <_dtoa_r+0xb64>
 800f3cc:	4651      	mov	r1, sl
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	220a      	movs	r2, #10
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f9a4 	bl	800f720 <__multadd>
 800f3d8:	4682      	mov	sl, r0
 800f3da:	e7ea      	b.n	800f3b2 <_dtoa_r+0xb3a>
 800f3dc:	9b01      	ldr	r3, [sp, #4]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	bfc8      	it	gt
 800f3e2:	461d      	movgt	r5, r3
 800f3e4:	9b00      	ldr	r3, [sp, #0]
 800f3e6:	bfd8      	it	le
 800f3e8:	2501      	movle	r5, #1
 800f3ea:	441d      	add	r5, r3
 800f3ec:	f04f 0800 	mov.w	r8, #0
 800f3f0:	4651      	mov	r1, sl
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f000 fb41 	bl	800fa7c <__lshift>
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	4682      	mov	sl, r0
 800f3fe:	f000 fba9 	bl	800fb54 <__mcmp>
 800f402:	2800      	cmp	r0, #0
 800f404:	dc96      	bgt.n	800f334 <_dtoa_r+0xabc>
 800f406:	d102      	bne.n	800f40e <_dtoa_r+0xb96>
 800f408:	f019 0f01 	tst.w	r9, #1
 800f40c:	d192      	bne.n	800f334 <_dtoa_r+0xabc>
 800f40e:	462b      	mov	r3, r5
 800f410:	461d      	mov	r5, r3
 800f412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f416:	2a30      	cmp	r2, #48	; 0x30
 800f418:	d0fa      	beq.n	800f410 <_dtoa_r+0xb98>
 800f41a:	e6dd      	b.n	800f1d8 <_dtoa_r+0x960>
 800f41c:	9a00      	ldr	r2, [sp, #0]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d189      	bne.n	800f336 <_dtoa_r+0xabe>
 800f422:	f10b 0b01 	add.w	fp, fp, #1
 800f426:	2331      	movs	r3, #49	; 0x31
 800f428:	e796      	b.n	800f358 <_dtoa_r+0xae0>
 800f42a:	4b0a      	ldr	r3, [pc, #40]	; (800f454 <_dtoa_r+0xbdc>)
 800f42c:	f7ff ba99 	b.w	800e962 <_dtoa_r+0xea>
 800f430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f432:	2b00      	cmp	r3, #0
 800f434:	f47f aa6d 	bne.w	800e912 <_dtoa_r+0x9a>
 800f438:	4b07      	ldr	r3, [pc, #28]	; (800f458 <_dtoa_r+0xbe0>)
 800f43a:	f7ff ba92 	b.w	800e962 <_dtoa_r+0xea>
 800f43e:	9b01      	ldr	r3, [sp, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	dcb5      	bgt.n	800f3b0 <_dtoa_r+0xb38>
 800f444:	9b07      	ldr	r3, [sp, #28]
 800f446:	2b02      	cmp	r3, #2
 800f448:	f73f aeb1 	bgt.w	800f1ae <_dtoa_r+0x936>
 800f44c:	e7b0      	b.n	800f3b0 <_dtoa_r+0xb38>
 800f44e:	bf00      	nop
 800f450:	08011ef4 	.word	0x08011ef4
 800f454:	08011e54 	.word	0x08011e54
 800f458:	08011e78 	.word	0x08011e78

0800f45c <_free_r>:
 800f45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f45e:	2900      	cmp	r1, #0
 800f460:	d044      	beq.n	800f4ec <_free_r+0x90>
 800f462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f466:	9001      	str	r0, [sp, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f1a1 0404 	sub.w	r4, r1, #4
 800f46e:	bfb8      	it	lt
 800f470:	18e4      	addlt	r4, r4, r3
 800f472:	f000 f8e7 	bl	800f644 <__malloc_lock>
 800f476:	4a1e      	ldr	r2, [pc, #120]	; (800f4f0 <_free_r+0x94>)
 800f478:	9801      	ldr	r0, [sp, #4]
 800f47a:	6813      	ldr	r3, [r2, #0]
 800f47c:	b933      	cbnz	r3, 800f48c <_free_r+0x30>
 800f47e:	6063      	str	r3, [r4, #4]
 800f480:	6014      	str	r4, [r2, #0]
 800f482:	b003      	add	sp, #12
 800f484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f488:	f000 b8e2 	b.w	800f650 <__malloc_unlock>
 800f48c:	42a3      	cmp	r3, r4
 800f48e:	d908      	bls.n	800f4a2 <_free_r+0x46>
 800f490:	6825      	ldr	r5, [r4, #0]
 800f492:	1961      	adds	r1, r4, r5
 800f494:	428b      	cmp	r3, r1
 800f496:	bf01      	itttt	eq
 800f498:	6819      	ldreq	r1, [r3, #0]
 800f49a:	685b      	ldreq	r3, [r3, #4]
 800f49c:	1949      	addeq	r1, r1, r5
 800f49e:	6021      	streq	r1, [r4, #0]
 800f4a0:	e7ed      	b.n	800f47e <_free_r+0x22>
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	b10b      	cbz	r3, 800f4ac <_free_r+0x50>
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	d9fa      	bls.n	800f4a2 <_free_r+0x46>
 800f4ac:	6811      	ldr	r1, [r2, #0]
 800f4ae:	1855      	adds	r5, r2, r1
 800f4b0:	42a5      	cmp	r5, r4
 800f4b2:	d10b      	bne.n	800f4cc <_free_r+0x70>
 800f4b4:	6824      	ldr	r4, [r4, #0]
 800f4b6:	4421      	add	r1, r4
 800f4b8:	1854      	adds	r4, r2, r1
 800f4ba:	42a3      	cmp	r3, r4
 800f4bc:	6011      	str	r1, [r2, #0]
 800f4be:	d1e0      	bne.n	800f482 <_free_r+0x26>
 800f4c0:	681c      	ldr	r4, [r3, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	6053      	str	r3, [r2, #4]
 800f4c6:	440c      	add	r4, r1
 800f4c8:	6014      	str	r4, [r2, #0]
 800f4ca:	e7da      	b.n	800f482 <_free_r+0x26>
 800f4cc:	d902      	bls.n	800f4d4 <_free_r+0x78>
 800f4ce:	230c      	movs	r3, #12
 800f4d0:	6003      	str	r3, [r0, #0]
 800f4d2:	e7d6      	b.n	800f482 <_free_r+0x26>
 800f4d4:	6825      	ldr	r5, [r4, #0]
 800f4d6:	1961      	adds	r1, r4, r5
 800f4d8:	428b      	cmp	r3, r1
 800f4da:	bf04      	itt	eq
 800f4dc:	6819      	ldreq	r1, [r3, #0]
 800f4de:	685b      	ldreq	r3, [r3, #4]
 800f4e0:	6063      	str	r3, [r4, #4]
 800f4e2:	bf04      	itt	eq
 800f4e4:	1949      	addeq	r1, r1, r5
 800f4e6:	6021      	streq	r1, [r4, #0]
 800f4e8:	6054      	str	r4, [r2, #4]
 800f4ea:	e7ca      	b.n	800f482 <_free_r+0x26>
 800f4ec:	b003      	add	sp, #12
 800f4ee:	bd30      	pop	{r4, r5, pc}
 800f4f0:	20008014 	.word	0x20008014

0800f4f4 <malloc>:
 800f4f4:	4b02      	ldr	r3, [pc, #8]	; (800f500 <malloc+0xc>)
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	6818      	ldr	r0, [r3, #0]
 800f4fa:	f000 b823 	b.w	800f544 <_malloc_r>
 800f4fe:	bf00      	nop
 800f500:	20000084 	.word	0x20000084

0800f504 <sbrk_aligned>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	4e0e      	ldr	r6, [pc, #56]	; (800f540 <sbrk_aligned+0x3c>)
 800f508:	460c      	mov	r4, r1
 800f50a:	6831      	ldr	r1, [r6, #0]
 800f50c:	4605      	mov	r5, r0
 800f50e:	b911      	cbnz	r1, 800f516 <sbrk_aligned+0x12>
 800f510:	f000 fe40 	bl	8010194 <_sbrk_r>
 800f514:	6030      	str	r0, [r6, #0]
 800f516:	4621      	mov	r1, r4
 800f518:	4628      	mov	r0, r5
 800f51a:	f000 fe3b 	bl	8010194 <_sbrk_r>
 800f51e:	1c43      	adds	r3, r0, #1
 800f520:	d00a      	beq.n	800f538 <sbrk_aligned+0x34>
 800f522:	1cc4      	adds	r4, r0, #3
 800f524:	f024 0403 	bic.w	r4, r4, #3
 800f528:	42a0      	cmp	r0, r4
 800f52a:	d007      	beq.n	800f53c <sbrk_aligned+0x38>
 800f52c:	1a21      	subs	r1, r4, r0
 800f52e:	4628      	mov	r0, r5
 800f530:	f000 fe30 	bl	8010194 <_sbrk_r>
 800f534:	3001      	adds	r0, #1
 800f536:	d101      	bne.n	800f53c <sbrk_aligned+0x38>
 800f538:	f04f 34ff 	mov.w	r4, #4294967295
 800f53c:	4620      	mov	r0, r4
 800f53e:	bd70      	pop	{r4, r5, r6, pc}
 800f540:	20008018 	.word	0x20008018

0800f544 <_malloc_r>:
 800f544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f548:	1ccd      	adds	r5, r1, #3
 800f54a:	f025 0503 	bic.w	r5, r5, #3
 800f54e:	3508      	adds	r5, #8
 800f550:	2d0c      	cmp	r5, #12
 800f552:	bf38      	it	cc
 800f554:	250c      	movcc	r5, #12
 800f556:	2d00      	cmp	r5, #0
 800f558:	4607      	mov	r7, r0
 800f55a:	db01      	blt.n	800f560 <_malloc_r+0x1c>
 800f55c:	42a9      	cmp	r1, r5
 800f55e:	d905      	bls.n	800f56c <_malloc_r+0x28>
 800f560:	230c      	movs	r3, #12
 800f562:	603b      	str	r3, [r7, #0]
 800f564:	2600      	movs	r6, #0
 800f566:	4630      	mov	r0, r6
 800f568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f56c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f640 <_malloc_r+0xfc>
 800f570:	f000 f868 	bl	800f644 <__malloc_lock>
 800f574:	f8d8 3000 	ldr.w	r3, [r8]
 800f578:	461c      	mov	r4, r3
 800f57a:	bb5c      	cbnz	r4, 800f5d4 <_malloc_r+0x90>
 800f57c:	4629      	mov	r1, r5
 800f57e:	4638      	mov	r0, r7
 800f580:	f7ff ffc0 	bl	800f504 <sbrk_aligned>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	4604      	mov	r4, r0
 800f588:	d155      	bne.n	800f636 <_malloc_r+0xf2>
 800f58a:	f8d8 4000 	ldr.w	r4, [r8]
 800f58e:	4626      	mov	r6, r4
 800f590:	2e00      	cmp	r6, #0
 800f592:	d145      	bne.n	800f620 <_malloc_r+0xdc>
 800f594:	2c00      	cmp	r4, #0
 800f596:	d048      	beq.n	800f62a <_malloc_r+0xe6>
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	4631      	mov	r1, r6
 800f59c:	4638      	mov	r0, r7
 800f59e:	eb04 0903 	add.w	r9, r4, r3
 800f5a2:	f000 fdf7 	bl	8010194 <_sbrk_r>
 800f5a6:	4581      	cmp	r9, r0
 800f5a8:	d13f      	bne.n	800f62a <_malloc_r+0xe6>
 800f5aa:	6821      	ldr	r1, [r4, #0]
 800f5ac:	1a6d      	subs	r5, r5, r1
 800f5ae:	4629      	mov	r1, r5
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff ffa7 	bl	800f504 <sbrk_aligned>
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	d037      	beq.n	800f62a <_malloc_r+0xe6>
 800f5ba:	6823      	ldr	r3, [r4, #0]
 800f5bc:	442b      	add	r3, r5
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d038      	beq.n	800f63a <_malloc_r+0xf6>
 800f5c8:	685a      	ldr	r2, [r3, #4]
 800f5ca:	42a2      	cmp	r2, r4
 800f5cc:	d12b      	bne.n	800f626 <_malloc_r+0xe2>
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	605a      	str	r2, [r3, #4]
 800f5d2:	e00f      	b.n	800f5f4 <_malloc_r+0xb0>
 800f5d4:	6822      	ldr	r2, [r4, #0]
 800f5d6:	1b52      	subs	r2, r2, r5
 800f5d8:	d41f      	bmi.n	800f61a <_malloc_r+0xd6>
 800f5da:	2a0b      	cmp	r2, #11
 800f5dc:	d917      	bls.n	800f60e <_malloc_r+0xca>
 800f5de:	1961      	adds	r1, r4, r5
 800f5e0:	42a3      	cmp	r3, r4
 800f5e2:	6025      	str	r5, [r4, #0]
 800f5e4:	bf18      	it	ne
 800f5e6:	6059      	strne	r1, [r3, #4]
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	bf08      	it	eq
 800f5ec:	f8c8 1000 	streq.w	r1, [r8]
 800f5f0:	5162      	str	r2, [r4, r5]
 800f5f2:	604b      	str	r3, [r1, #4]
 800f5f4:	4638      	mov	r0, r7
 800f5f6:	f104 060b 	add.w	r6, r4, #11
 800f5fa:	f000 f829 	bl	800f650 <__malloc_unlock>
 800f5fe:	f026 0607 	bic.w	r6, r6, #7
 800f602:	1d23      	adds	r3, r4, #4
 800f604:	1af2      	subs	r2, r6, r3
 800f606:	d0ae      	beq.n	800f566 <_malloc_r+0x22>
 800f608:	1b9b      	subs	r3, r3, r6
 800f60a:	50a3      	str	r3, [r4, r2]
 800f60c:	e7ab      	b.n	800f566 <_malloc_r+0x22>
 800f60e:	42a3      	cmp	r3, r4
 800f610:	6862      	ldr	r2, [r4, #4]
 800f612:	d1dd      	bne.n	800f5d0 <_malloc_r+0x8c>
 800f614:	f8c8 2000 	str.w	r2, [r8]
 800f618:	e7ec      	b.n	800f5f4 <_malloc_r+0xb0>
 800f61a:	4623      	mov	r3, r4
 800f61c:	6864      	ldr	r4, [r4, #4]
 800f61e:	e7ac      	b.n	800f57a <_malloc_r+0x36>
 800f620:	4634      	mov	r4, r6
 800f622:	6876      	ldr	r6, [r6, #4]
 800f624:	e7b4      	b.n	800f590 <_malloc_r+0x4c>
 800f626:	4613      	mov	r3, r2
 800f628:	e7cc      	b.n	800f5c4 <_malloc_r+0x80>
 800f62a:	230c      	movs	r3, #12
 800f62c:	603b      	str	r3, [r7, #0]
 800f62e:	4638      	mov	r0, r7
 800f630:	f000 f80e 	bl	800f650 <__malloc_unlock>
 800f634:	e797      	b.n	800f566 <_malloc_r+0x22>
 800f636:	6025      	str	r5, [r4, #0]
 800f638:	e7dc      	b.n	800f5f4 <_malloc_r+0xb0>
 800f63a:	605b      	str	r3, [r3, #4]
 800f63c:	deff      	udf	#255	; 0xff
 800f63e:	bf00      	nop
 800f640:	20008014 	.word	0x20008014

0800f644 <__malloc_lock>:
 800f644:	4801      	ldr	r0, [pc, #4]	; (800f64c <__malloc_lock+0x8>)
 800f646:	f7ff b87e 	b.w	800e746 <__retarget_lock_acquire_recursive>
 800f64a:	bf00      	nop
 800f64c:	20008010 	.word	0x20008010

0800f650 <__malloc_unlock>:
 800f650:	4801      	ldr	r0, [pc, #4]	; (800f658 <__malloc_unlock+0x8>)
 800f652:	f7ff b879 	b.w	800e748 <__retarget_lock_release_recursive>
 800f656:	bf00      	nop
 800f658:	20008010 	.word	0x20008010

0800f65c <_Balloc>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	69c6      	ldr	r6, [r0, #28]
 800f660:	4604      	mov	r4, r0
 800f662:	460d      	mov	r5, r1
 800f664:	b976      	cbnz	r6, 800f684 <_Balloc+0x28>
 800f666:	2010      	movs	r0, #16
 800f668:	f7ff ff44 	bl	800f4f4 <malloc>
 800f66c:	4602      	mov	r2, r0
 800f66e:	61e0      	str	r0, [r4, #28]
 800f670:	b920      	cbnz	r0, 800f67c <_Balloc+0x20>
 800f672:	4b18      	ldr	r3, [pc, #96]	; (800f6d4 <_Balloc+0x78>)
 800f674:	4818      	ldr	r0, [pc, #96]	; (800f6d8 <_Balloc+0x7c>)
 800f676:	216b      	movs	r1, #107	; 0x6b
 800f678:	f000 fd9c 	bl	80101b4 <__assert_func>
 800f67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f680:	6006      	str	r6, [r0, #0]
 800f682:	60c6      	str	r6, [r0, #12]
 800f684:	69e6      	ldr	r6, [r4, #28]
 800f686:	68f3      	ldr	r3, [r6, #12]
 800f688:	b183      	cbz	r3, 800f6ac <_Balloc+0x50>
 800f68a:	69e3      	ldr	r3, [r4, #28]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f692:	b9b8      	cbnz	r0, 800f6c4 <_Balloc+0x68>
 800f694:	2101      	movs	r1, #1
 800f696:	fa01 f605 	lsl.w	r6, r1, r5
 800f69a:	1d72      	adds	r2, r6, #5
 800f69c:	0092      	lsls	r2, r2, #2
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 fda6 	bl	80101f0 <_calloc_r>
 800f6a4:	b160      	cbz	r0, 800f6c0 <_Balloc+0x64>
 800f6a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f6aa:	e00e      	b.n	800f6ca <_Balloc+0x6e>
 800f6ac:	2221      	movs	r2, #33	; 0x21
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 fd9d 	bl	80101f0 <_calloc_r>
 800f6b6:	69e3      	ldr	r3, [r4, #28]
 800f6b8:	60f0      	str	r0, [r6, #12]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e4      	bne.n	800f68a <_Balloc+0x2e>
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	6802      	ldr	r2, [r0, #0]
 800f6c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6d0:	e7f7      	b.n	800f6c2 <_Balloc+0x66>
 800f6d2:	bf00      	nop
 800f6d4:	08011e85 	.word	0x08011e85
 800f6d8:	08011f05 	.word	0x08011f05

0800f6dc <_Bfree>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	69c6      	ldr	r6, [r0, #28]
 800f6e0:	4605      	mov	r5, r0
 800f6e2:	460c      	mov	r4, r1
 800f6e4:	b976      	cbnz	r6, 800f704 <_Bfree+0x28>
 800f6e6:	2010      	movs	r0, #16
 800f6e8:	f7ff ff04 	bl	800f4f4 <malloc>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	61e8      	str	r0, [r5, #28]
 800f6f0:	b920      	cbnz	r0, 800f6fc <_Bfree+0x20>
 800f6f2:	4b09      	ldr	r3, [pc, #36]	; (800f718 <_Bfree+0x3c>)
 800f6f4:	4809      	ldr	r0, [pc, #36]	; (800f71c <_Bfree+0x40>)
 800f6f6:	218f      	movs	r1, #143	; 0x8f
 800f6f8:	f000 fd5c 	bl	80101b4 <__assert_func>
 800f6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f700:	6006      	str	r6, [r0, #0]
 800f702:	60c6      	str	r6, [r0, #12]
 800f704:	b13c      	cbz	r4, 800f716 <_Bfree+0x3a>
 800f706:	69eb      	ldr	r3, [r5, #28]
 800f708:	6862      	ldr	r2, [r4, #4]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f710:	6021      	str	r1, [r4, #0]
 800f712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	08011e85 	.word	0x08011e85
 800f71c:	08011f05 	.word	0x08011f05

0800f720 <__multadd>:
 800f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f724:	690d      	ldr	r5, [r1, #16]
 800f726:	4607      	mov	r7, r0
 800f728:	460c      	mov	r4, r1
 800f72a:	461e      	mov	r6, r3
 800f72c:	f101 0c14 	add.w	ip, r1, #20
 800f730:	2000      	movs	r0, #0
 800f732:	f8dc 3000 	ldr.w	r3, [ip]
 800f736:	b299      	uxth	r1, r3
 800f738:	fb02 6101 	mla	r1, r2, r1, r6
 800f73c:	0c1e      	lsrs	r6, r3, #16
 800f73e:	0c0b      	lsrs	r3, r1, #16
 800f740:	fb02 3306 	mla	r3, r2, r6, r3
 800f744:	b289      	uxth	r1, r1
 800f746:	3001      	adds	r0, #1
 800f748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f74c:	4285      	cmp	r5, r0
 800f74e:	f84c 1b04 	str.w	r1, [ip], #4
 800f752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f756:	dcec      	bgt.n	800f732 <__multadd+0x12>
 800f758:	b30e      	cbz	r6, 800f79e <__multadd+0x7e>
 800f75a:	68a3      	ldr	r3, [r4, #8]
 800f75c:	42ab      	cmp	r3, r5
 800f75e:	dc19      	bgt.n	800f794 <__multadd+0x74>
 800f760:	6861      	ldr	r1, [r4, #4]
 800f762:	4638      	mov	r0, r7
 800f764:	3101      	adds	r1, #1
 800f766:	f7ff ff79 	bl	800f65c <_Balloc>
 800f76a:	4680      	mov	r8, r0
 800f76c:	b928      	cbnz	r0, 800f77a <__multadd+0x5a>
 800f76e:	4602      	mov	r2, r0
 800f770:	4b0c      	ldr	r3, [pc, #48]	; (800f7a4 <__multadd+0x84>)
 800f772:	480d      	ldr	r0, [pc, #52]	; (800f7a8 <__multadd+0x88>)
 800f774:	21ba      	movs	r1, #186	; 0xba
 800f776:	f000 fd1d 	bl	80101b4 <__assert_func>
 800f77a:	6922      	ldr	r2, [r4, #16]
 800f77c:	3202      	adds	r2, #2
 800f77e:	f104 010c 	add.w	r1, r4, #12
 800f782:	0092      	lsls	r2, r2, #2
 800f784:	300c      	adds	r0, #12
 800f786:	f7fe ffe0 	bl	800e74a <memcpy>
 800f78a:	4621      	mov	r1, r4
 800f78c:	4638      	mov	r0, r7
 800f78e:	f7ff ffa5 	bl	800f6dc <_Bfree>
 800f792:	4644      	mov	r4, r8
 800f794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f798:	3501      	adds	r5, #1
 800f79a:	615e      	str	r6, [r3, #20]
 800f79c:	6125      	str	r5, [r4, #16]
 800f79e:	4620      	mov	r0, r4
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	08011ef4 	.word	0x08011ef4
 800f7a8:	08011f05 	.word	0x08011f05

0800f7ac <__hi0bits>:
 800f7ac:	0c03      	lsrs	r3, r0, #16
 800f7ae:	041b      	lsls	r3, r3, #16
 800f7b0:	b9d3      	cbnz	r3, 800f7e8 <__hi0bits+0x3c>
 800f7b2:	0400      	lsls	r0, r0, #16
 800f7b4:	2310      	movs	r3, #16
 800f7b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7ba:	bf04      	itt	eq
 800f7bc:	0200      	lsleq	r0, r0, #8
 800f7be:	3308      	addeq	r3, #8
 800f7c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f7c4:	bf04      	itt	eq
 800f7c6:	0100      	lsleq	r0, r0, #4
 800f7c8:	3304      	addeq	r3, #4
 800f7ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f7ce:	bf04      	itt	eq
 800f7d0:	0080      	lsleq	r0, r0, #2
 800f7d2:	3302      	addeq	r3, #2
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	db05      	blt.n	800f7e4 <__hi0bits+0x38>
 800f7d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7dc:	f103 0301 	add.w	r3, r3, #1
 800f7e0:	bf08      	it	eq
 800f7e2:	2320      	moveq	r3, #32
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	4770      	bx	lr
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e7e4      	b.n	800f7b6 <__hi0bits+0xa>

0800f7ec <__lo0bits>:
 800f7ec:	6803      	ldr	r3, [r0, #0]
 800f7ee:	f013 0207 	ands.w	r2, r3, #7
 800f7f2:	d00c      	beq.n	800f80e <__lo0bits+0x22>
 800f7f4:	07d9      	lsls	r1, r3, #31
 800f7f6:	d422      	bmi.n	800f83e <__lo0bits+0x52>
 800f7f8:	079a      	lsls	r2, r3, #30
 800f7fa:	bf49      	itett	mi
 800f7fc:	085b      	lsrmi	r3, r3, #1
 800f7fe:	089b      	lsrpl	r3, r3, #2
 800f800:	6003      	strmi	r3, [r0, #0]
 800f802:	2201      	movmi	r2, #1
 800f804:	bf5c      	itt	pl
 800f806:	6003      	strpl	r3, [r0, #0]
 800f808:	2202      	movpl	r2, #2
 800f80a:	4610      	mov	r0, r2
 800f80c:	4770      	bx	lr
 800f80e:	b299      	uxth	r1, r3
 800f810:	b909      	cbnz	r1, 800f816 <__lo0bits+0x2a>
 800f812:	0c1b      	lsrs	r3, r3, #16
 800f814:	2210      	movs	r2, #16
 800f816:	b2d9      	uxtb	r1, r3
 800f818:	b909      	cbnz	r1, 800f81e <__lo0bits+0x32>
 800f81a:	3208      	adds	r2, #8
 800f81c:	0a1b      	lsrs	r3, r3, #8
 800f81e:	0719      	lsls	r1, r3, #28
 800f820:	bf04      	itt	eq
 800f822:	091b      	lsreq	r3, r3, #4
 800f824:	3204      	addeq	r2, #4
 800f826:	0799      	lsls	r1, r3, #30
 800f828:	bf04      	itt	eq
 800f82a:	089b      	lsreq	r3, r3, #2
 800f82c:	3202      	addeq	r2, #2
 800f82e:	07d9      	lsls	r1, r3, #31
 800f830:	d403      	bmi.n	800f83a <__lo0bits+0x4e>
 800f832:	085b      	lsrs	r3, r3, #1
 800f834:	f102 0201 	add.w	r2, r2, #1
 800f838:	d003      	beq.n	800f842 <__lo0bits+0x56>
 800f83a:	6003      	str	r3, [r0, #0]
 800f83c:	e7e5      	b.n	800f80a <__lo0bits+0x1e>
 800f83e:	2200      	movs	r2, #0
 800f840:	e7e3      	b.n	800f80a <__lo0bits+0x1e>
 800f842:	2220      	movs	r2, #32
 800f844:	e7e1      	b.n	800f80a <__lo0bits+0x1e>
	...

0800f848 <__i2b>:
 800f848:	b510      	push	{r4, lr}
 800f84a:	460c      	mov	r4, r1
 800f84c:	2101      	movs	r1, #1
 800f84e:	f7ff ff05 	bl	800f65c <_Balloc>
 800f852:	4602      	mov	r2, r0
 800f854:	b928      	cbnz	r0, 800f862 <__i2b+0x1a>
 800f856:	4b05      	ldr	r3, [pc, #20]	; (800f86c <__i2b+0x24>)
 800f858:	4805      	ldr	r0, [pc, #20]	; (800f870 <__i2b+0x28>)
 800f85a:	f240 1145 	movw	r1, #325	; 0x145
 800f85e:	f000 fca9 	bl	80101b4 <__assert_func>
 800f862:	2301      	movs	r3, #1
 800f864:	6144      	str	r4, [r0, #20]
 800f866:	6103      	str	r3, [r0, #16]
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	bf00      	nop
 800f86c:	08011ef4 	.word	0x08011ef4
 800f870:	08011f05 	.word	0x08011f05

0800f874 <__multiply>:
 800f874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f878:	4691      	mov	r9, r2
 800f87a:	690a      	ldr	r2, [r1, #16]
 800f87c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f880:	429a      	cmp	r2, r3
 800f882:	bfb8      	it	lt
 800f884:	460b      	movlt	r3, r1
 800f886:	460c      	mov	r4, r1
 800f888:	bfbc      	itt	lt
 800f88a:	464c      	movlt	r4, r9
 800f88c:	4699      	movlt	r9, r3
 800f88e:	6927      	ldr	r7, [r4, #16]
 800f890:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f894:	68a3      	ldr	r3, [r4, #8]
 800f896:	6861      	ldr	r1, [r4, #4]
 800f898:	eb07 060a 	add.w	r6, r7, sl
 800f89c:	42b3      	cmp	r3, r6
 800f89e:	b085      	sub	sp, #20
 800f8a0:	bfb8      	it	lt
 800f8a2:	3101      	addlt	r1, #1
 800f8a4:	f7ff feda 	bl	800f65c <_Balloc>
 800f8a8:	b930      	cbnz	r0, 800f8b8 <__multiply+0x44>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	4b44      	ldr	r3, [pc, #272]	; (800f9c0 <__multiply+0x14c>)
 800f8ae:	4845      	ldr	r0, [pc, #276]	; (800f9c4 <__multiply+0x150>)
 800f8b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f8b4:	f000 fc7e 	bl	80101b4 <__assert_func>
 800f8b8:	f100 0514 	add.w	r5, r0, #20
 800f8bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8c0:	462b      	mov	r3, r5
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	4543      	cmp	r3, r8
 800f8c6:	d321      	bcc.n	800f90c <__multiply+0x98>
 800f8c8:	f104 0314 	add.w	r3, r4, #20
 800f8cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f8d0:	f109 0314 	add.w	r3, r9, #20
 800f8d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8d8:	9202      	str	r2, [sp, #8]
 800f8da:	1b3a      	subs	r2, r7, r4
 800f8dc:	3a15      	subs	r2, #21
 800f8de:	f022 0203 	bic.w	r2, r2, #3
 800f8e2:	3204      	adds	r2, #4
 800f8e4:	f104 0115 	add.w	r1, r4, #21
 800f8e8:	428f      	cmp	r7, r1
 800f8ea:	bf38      	it	cc
 800f8ec:	2204      	movcc	r2, #4
 800f8ee:	9201      	str	r2, [sp, #4]
 800f8f0:	9a02      	ldr	r2, [sp, #8]
 800f8f2:	9303      	str	r3, [sp, #12]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d80c      	bhi.n	800f912 <__multiply+0x9e>
 800f8f8:	2e00      	cmp	r6, #0
 800f8fa:	dd03      	ble.n	800f904 <__multiply+0x90>
 800f8fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f900:	2b00      	cmp	r3, #0
 800f902:	d05b      	beq.n	800f9bc <__multiply+0x148>
 800f904:	6106      	str	r6, [r0, #16]
 800f906:	b005      	add	sp, #20
 800f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90c:	f843 2b04 	str.w	r2, [r3], #4
 800f910:	e7d8      	b.n	800f8c4 <__multiply+0x50>
 800f912:	f8b3 a000 	ldrh.w	sl, [r3]
 800f916:	f1ba 0f00 	cmp.w	sl, #0
 800f91a:	d024      	beq.n	800f966 <__multiply+0xf2>
 800f91c:	f104 0e14 	add.w	lr, r4, #20
 800f920:	46a9      	mov	r9, r5
 800f922:	f04f 0c00 	mov.w	ip, #0
 800f926:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f92a:	f8d9 1000 	ldr.w	r1, [r9]
 800f92e:	fa1f fb82 	uxth.w	fp, r2
 800f932:	b289      	uxth	r1, r1
 800f934:	fb0a 110b 	mla	r1, sl, fp, r1
 800f938:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f93c:	f8d9 2000 	ldr.w	r2, [r9]
 800f940:	4461      	add	r1, ip
 800f942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f946:	fb0a c20b 	mla	r2, sl, fp, ip
 800f94a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f94e:	b289      	uxth	r1, r1
 800f950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f954:	4577      	cmp	r7, lr
 800f956:	f849 1b04 	str.w	r1, [r9], #4
 800f95a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f95e:	d8e2      	bhi.n	800f926 <__multiply+0xb2>
 800f960:	9a01      	ldr	r2, [sp, #4]
 800f962:	f845 c002 	str.w	ip, [r5, r2]
 800f966:	9a03      	ldr	r2, [sp, #12]
 800f968:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f96c:	3304      	adds	r3, #4
 800f96e:	f1b9 0f00 	cmp.w	r9, #0
 800f972:	d021      	beq.n	800f9b8 <__multiply+0x144>
 800f974:	6829      	ldr	r1, [r5, #0]
 800f976:	f104 0c14 	add.w	ip, r4, #20
 800f97a:	46ae      	mov	lr, r5
 800f97c:	f04f 0a00 	mov.w	sl, #0
 800f980:	f8bc b000 	ldrh.w	fp, [ip]
 800f984:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f988:	fb09 220b 	mla	r2, r9, fp, r2
 800f98c:	4452      	add	r2, sl
 800f98e:	b289      	uxth	r1, r1
 800f990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f994:	f84e 1b04 	str.w	r1, [lr], #4
 800f998:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f99c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9a0:	f8be 1000 	ldrh.w	r1, [lr]
 800f9a4:	fb09 110a 	mla	r1, r9, sl, r1
 800f9a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f9ac:	4567      	cmp	r7, ip
 800f9ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f9b2:	d8e5      	bhi.n	800f980 <__multiply+0x10c>
 800f9b4:	9a01      	ldr	r2, [sp, #4]
 800f9b6:	50a9      	str	r1, [r5, r2]
 800f9b8:	3504      	adds	r5, #4
 800f9ba:	e799      	b.n	800f8f0 <__multiply+0x7c>
 800f9bc:	3e01      	subs	r6, #1
 800f9be:	e79b      	b.n	800f8f8 <__multiply+0x84>
 800f9c0:	08011ef4 	.word	0x08011ef4
 800f9c4:	08011f05 	.word	0x08011f05

0800f9c8 <__pow5mult>:
 800f9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9cc:	4615      	mov	r5, r2
 800f9ce:	f012 0203 	ands.w	r2, r2, #3
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460f      	mov	r7, r1
 800f9d6:	d007      	beq.n	800f9e8 <__pow5mult+0x20>
 800f9d8:	4c25      	ldr	r4, [pc, #148]	; (800fa70 <__pow5mult+0xa8>)
 800f9da:	3a01      	subs	r2, #1
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9e2:	f7ff fe9d 	bl	800f720 <__multadd>
 800f9e6:	4607      	mov	r7, r0
 800f9e8:	10ad      	asrs	r5, r5, #2
 800f9ea:	d03d      	beq.n	800fa68 <__pow5mult+0xa0>
 800f9ec:	69f4      	ldr	r4, [r6, #28]
 800f9ee:	b97c      	cbnz	r4, 800fa10 <__pow5mult+0x48>
 800f9f0:	2010      	movs	r0, #16
 800f9f2:	f7ff fd7f 	bl	800f4f4 <malloc>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	61f0      	str	r0, [r6, #28]
 800f9fa:	b928      	cbnz	r0, 800fa08 <__pow5mult+0x40>
 800f9fc:	4b1d      	ldr	r3, [pc, #116]	; (800fa74 <__pow5mult+0xac>)
 800f9fe:	481e      	ldr	r0, [pc, #120]	; (800fa78 <__pow5mult+0xb0>)
 800fa00:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fa04:	f000 fbd6 	bl	80101b4 <__assert_func>
 800fa08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa0c:	6004      	str	r4, [r0, #0]
 800fa0e:	60c4      	str	r4, [r0, #12]
 800fa10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fa14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa18:	b94c      	cbnz	r4, 800fa2e <__pow5mult+0x66>
 800fa1a:	f240 2171 	movw	r1, #625	; 0x271
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7ff ff12 	bl	800f848 <__i2b>
 800fa24:	2300      	movs	r3, #0
 800fa26:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	6003      	str	r3, [r0, #0]
 800fa2e:	f04f 0900 	mov.w	r9, #0
 800fa32:	07eb      	lsls	r3, r5, #31
 800fa34:	d50a      	bpl.n	800fa4c <__pow5mult+0x84>
 800fa36:	4639      	mov	r1, r7
 800fa38:	4622      	mov	r2, r4
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f7ff ff1a 	bl	800f874 <__multiply>
 800fa40:	4639      	mov	r1, r7
 800fa42:	4680      	mov	r8, r0
 800fa44:	4630      	mov	r0, r6
 800fa46:	f7ff fe49 	bl	800f6dc <_Bfree>
 800fa4a:	4647      	mov	r7, r8
 800fa4c:	106d      	asrs	r5, r5, #1
 800fa4e:	d00b      	beq.n	800fa68 <__pow5mult+0xa0>
 800fa50:	6820      	ldr	r0, [r4, #0]
 800fa52:	b938      	cbnz	r0, 800fa64 <__pow5mult+0x9c>
 800fa54:	4622      	mov	r2, r4
 800fa56:	4621      	mov	r1, r4
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f7ff ff0b 	bl	800f874 <__multiply>
 800fa5e:	6020      	str	r0, [r4, #0]
 800fa60:	f8c0 9000 	str.w	r9, [r0]
 800fa64:	4604      	mov	r4, r0
 800fa66:	e7e4      	b.n	800fa32 <__pow5mult+0x6a>
 800fa68:	4638      	mov	r0, r7
 800fa6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa6e:	bf00      	nop
 800fa70:	08012050 	.word	0x08012050
 800fa74:	08011e85 	.word	0x08011e85
 800fa78:	08011f05 	.word	0x08011f05

0800fa7c <__lshift>:
 800fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa80:	460c      	mov	r4, r1
 800fa82:	6849      	ldr	r1, [r1, #4]
 800fa84:	6923      	ldr	r3, [r4, #16]
 800fa86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	4607      	mov	r7, r0
 800fa8e:	4691      	mov	r9, r2
 800fa90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa94:	f108 0601 	add.w	r6, r8, #1
 800fa98:	42b3      	cmp	r3, r6
 800fa9a:	db0b      	blt.n	800fab4 <__lshift+0x38>
 800fa9c:	4638      	mov	r0, r7
 800fa9e:	f7ff fddd 	bl	800f65c <_Balloc>
 800faa2:	4605      	mov	r5, r0
 800faa4:	b948      	cbnz	r0, 800faba <__lshift+0x3e>
 800faa6:	4602      	mov	r2, r0
 800faa8:	4b28      	ldr	r3, [pc, #160]	; (800fb4c <__lshift+0xd0>)
 800faaa:	4829      	ldr	r0, [pc, #164]	; (800fb50 <__lshift+0xd4>)
 800faac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fab0:	f000 fb80 	bl	80101b4 <__assert_func>
 800fab4:	3101      	adds	r1, #1
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	e7ee      	b.n	800fa98 <__lshift+0x1c>
 800faba:	2300      	movs	r3, #0
 800fabc:	f100 0114 	add.w	r1, r0, #20
 800fac0:	f100 0210 	add.w	r2, r0, #16
 800fac4:	4618      	mov	r0, r3
 800fac6:	4553      	cmp	r3, sl
 800fac8:	db33      	blt.n	800fb32 <__lshift+0xb6>
 800faca:	6920      	ldr	r0, [r4, #16]
 800facc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fad0:	f104 0314 	add.w	r3, r4, #20
 800fad4:	f019 091f 	ands.w	r9, r9, #31
 800fad8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fadc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fae0:	d02b      	beq.n	800fb3a <__lshift+0xbe>
 800fae2:	f1c9 0e20 	rsb	lr, r9, #32
 800fae6:	468a      	mov	sl, r1
 800fae8:	2200      	movs	r2, #0
 800faea:	6818      	ldr	r0, [r3, #0]
 800faec:	fa00 f009 	lsl.w	r0, r0, r9
 800faf0:	4310      	orrs	r0, r2
 800faf2:	f84a 0b04 	str.w	r0, [sl], #4
 800faf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fafa:	459c      	cmp	ip, r3
 800fafc:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb00:	d8f3      	bhi.n	800faea <__lshift+0x6e>
 800fb02:	ebac 0304 	sub.w	r3, ip, r4
 800fb06:	3b15      	subs	r3, #21
 800fb08:	f023 0303 	bic.w	r3, r3, #3
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	f104 0015 	add.w	r0, r4, #21
 800fb12:	4584      	cmp	ip, r0
 800fb14:	bf38      	it	cc
 800fb16:	2304      	movcc	r3, #4
 800fb18:	50ca      	str	r2, [r1, r3]
 800fb1a:	b10a      	cbz	r2, 800fb20 <__lshift+0xa4>
 800fb1c:	f108 0602 	add.w	r6, r8, #2
 800fb20:	3e01      	subs	r6, #1
 800fb22:	4638      	mov	r0, r7
 800fb24:	612e      	str	r6, [r5, #16]
 800fb26:	4621      	mov	r1, r4
 800fb28:	f7ff fdd8 	bl	800f6dc <_Bfree>
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb32:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb36:	3301      	adds	r3, #1
 800fb38:	e7c5      	b.n	800fac6 <__lshift+0x4a>
 800fb3a:	3904      	subs	r1, #4
 800fb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb40:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb44:	459c      	cmp	ip, r3
 800fb46:	d8f9      	bhi.n	800fb3c <__lshift+0xc0>
 800fb48:	e7ea      	b.n	800fb20 <__lshift+0xa4>
 800fb4a:	bf00      	nop
 800fb4c:	08011ef4 	.word	0x08011ef4
 800fb50:	08011f05 	.word	0x08011f05

0800fb54 <__mcmp>:
 800fb54:	b530      	push	{r4, r5, lr}
 800fb56:	6902      	ldr	r2, [r0, #16]
 800fb58:	690c      	ldr	r4, [r1, #16]
 800fb5a:	1b12      	subs	r2, r2, r4
 800fb5c:	d10e      	bne.n	800fb7c <__mcmp+0x28>
 800fb5e:	f100 0314 	add.w	r3, r0, #20
 800fb62:	3114      	adds	r1, #20
 800fb64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb74:	42a5      	cmp	r5, r4
 800fb76:	d003      	beq.n	800fb80 <__mcmp+0x2c>
 800fb78:	d305      	bcc.n	800fb86 <__mcmp+0x32>
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	bd30      	pop	{r4, r5, pc}
 800fb80:	4283      	cmp	r3, r0
 800fb82:	d3f3      	bcc.n	800fb6c <__mcmp+0x18>
 800fb84:	e7fa      	b.n	800fb7c <__mcmp+0x28>
 800fb86:	f04f 32ff 	mov.w	r2, #4294967295
 800fb8a:	e7f7      	b.n	800fb7c <__mcmp+0x28>

0800fb8c <__mdiff>:
 800fb8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb90:	460c      	mov	r4, r1
 800fb92:	4606      	mov	r6, r0
 800fb94:	4611      	mov	r1, r2
 800fb96:	4620      	mov	r0, r4
 800fb98:	4690      	mov	r8, r2
 800fb9a:	f7ff ffdb 	bl	800fb54 <__mcmp>
 800fb9e:	1e05      	subs	r5, r0, #0
 800fba0:	d110      	bne.n	800fbc4 <__mdiff+0x38>
 800fba2:	4629      	mov	r1, r5
 800fba4:	4630      	mov	r0, r6
 800fba6:	f7ff fd59 	bl	800f65c <_Balloc>
 800fbaa:	b930      	cbnz	r0, 800fbba <__mdiff+0x2e>
 800fbac:	4b3a      	ldr	r3, [pc, #232]	; (800fc98 <__mdiff+0x10c>)
 800fbae:	4602      	mov	r2, r0
 800fbb0:	f240 2137 	movw	r1, #567	; 0x237
 800fbb4:	4839      	ldr	r0, [pc, #228]	; (800fc9c <__mdiff+0x110>)
 800fbb6:	f000 fafd 	bl	80101b4 <__assert_func>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc4:	bfa4      	itt	ge
 800fbc6:	4643      	movge	r3, r8
 800fbc8:	46a0      	movge	r8, r4
 800fbca:	4630      	mov	r0, r6
 800fbcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fbd0:	bfa6      	itte	ge
 800fbd2:	461c      	movge	r4, r3
 800fbd4:	2500      	movge	r5, #0
 800fbd6:	2501      	movlt	r5, #1
 800fbd8:	f7ff fd40 	bl	800f65c <_Balloc>
 800fbdc:	b920      	cbnz	r0, 800fbe8 <__mdiff+0x5c>
 800fbde:	4b2e      	ldr	r3, [pc, #184]	; (800fc98 <__mdiff+0x10c>)
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	f240 2145 	movw	r1, #581	; 0x245
 800fbe6:	e7e5      	b.n	800fbb4 <__mdiff+0x28>
 800fbe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fbec:	6926      	ldr	r6, [r4, #16]
 800fbee:	60c5      	str	r5, [r0, #12]
 800fbf0:	f104 0914 	add.w	r9, r4, #20
 800fbf4:	f108 0514 	add.w	r5, r8, #20
 800fbf8:	f100 0e14 	add.w	lr, r0, #20
 800fbfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fc00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fc04:	f108 0210 	add.w	r2, r8, #16
 800fc08:	46f2      	mov	sl, lr
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc14:	fa11 f88b 	uxtah	r8, r1, fp
 800fc18:	b299      	uxth	r1, r3
 800fc1a:	0c1b      	lsrs	r3, r3, #16
 800fc1c:	eba8 0801 	sub.w	r8, r8, r1
 800fc20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc28:	fa1f f888 	uxth.w	r8, r8
 800fc2c:	1419      	asrs	r1, r3, #16
 800fc2e:	454e      	cmp	r6, r9
 800fc30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc34:	f84a 3b04 	str.w	r3, [sl], #4
 800fc38:	d8e8      	bhi.n	800fc0c <__mdiff+0x80>
 800fc3a:	1b33      	subs	r3, r6, r4
 800fc3c:	3b15      	subs	r3, #21
 800fc3e:	f023 0303 	bic.w	r3, r3, #3
 800fc42:	3304      	adds	r3, #4
 800fc44:	3415      	adds	r4, #21
 800fc46:	42a6      	cmp	r6, r4
 800fc48:	bf38      	it	cc
 800fc4a:	2304      	movcc	r3, #4
 800fc4c:	441d      	add	r5, r3
 800fc4e:	4473      	add	r3, lr
 800fc50:	469e      	mov	lr, r3
 800fc52:	462e      	mov	r6, r5
 800fc54:	4566      	cmp	r6, ip
 800fc56:	d30e      	bcc.n	800fc76 <__mdiff+0xea>
 800fc58:	f10c 0203 	add.w	r2, ip, #3
 800fc5c:	1b52      	subs	r2, r2, r5
 800fc5e:	f022 0203 	bic.w	r2, r2, #3
 800fc62:	3d03      	subs	r5, #3
 800fc64:	45ac      	cmp	ip, r5
 800fc66:	bf38      	it	cc
 800fc68:	2200      	movcc	r2, #0
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc70:	b17a      	cbz	r2, 800fc92 <__mdiff+0x106>
 800fc72:	6107      	str	r7, [r0, #16]
 800fc74:	e7a4      	b.n	800fbc0 <__mdiff+0x34>
 800fc76:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc7a:	fa11 f288 	uxtah	r2, r1, r8
 800fc7e:	1414      	asrs	r4, r2, #16
 800fc80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc84:	b292      	uxth	r2, r2
 800fc86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc8a:	f84e 2b04 	str.w	r2, [lr], #4
 800fc8e:	1421      	asrs	r1, r4, #16
 800fc90:	e7e0      	b.n	800fc54 <__mdiff+0xc8>
 800fc92:	3f01      	subs	r7, #1
 800fc94:	e7ea      	b.n	800fc6c <__mdiff+0xe0>
 800fc96:	bf00      	nop
 800fc98:	08011ef4 	.word	0x08011ef4
 800fc9c:	08011f05 	.word	0x08011f05

0800fca0 <__d2b>:
 800fca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fca4:	460f      	mov	r7, r1
 800fca6:	2101      	movs	r1, #1
 800fca8:	ec59 8b10 	vmov	r8, r9, d0
 800fcac:	4616      	mov	r6, r2
 800fcae:	f7ff fcd5 	bl	800f65c <_Balloc>
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	b930      	cbnz	r0, 800fcc4 <__d2b+0x24>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b24      	ldr	r3, [pc, #144]	; (800fd4c <__d2b+0xac>)
 800fcba:	4825      	ldr	r0, [pc, #148]	; (800fd50 <__d2b+0xb0>)
 800fcbc:	f240 310f 	movw	r1, #783	; 0x30f
 800fcc0:	f000 fa78 	bl	80101b4 <__assert_func>
 800fcc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fccc:	bb2d      	cbnz	r5, 800fd1a <__d2b+0x7a>
 800fcce:	9301      	str	r3, [sp, #4]
 800fcd0:	f1b8 0300 	subs.w	r3, r8, #0
 800fcd4:	d026      	beq.n	800fd24 <__d2b+0x84>
 800fcd6:	4668      	mov	r0, sp
 800fcd8:	9300      	str	r3, [sp, #0]
 800fcda:	f7ff fd87 	bl	800f7ec <__lo0bits>
 800fcde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fce2:	b1e8      	cbz	r0, 800fd20 <__d2b+0x80>
 800fce4:	f1c0 0320 	rsb	r3, r0, #32
 800fce8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcec:	430b      	orrs	r3, r1
 800fcee:	40c2      	lsrs	r2, r0
 800fcf0:	6163      	str	r3, [r4, #20]
 800fcf2:	9201      	str	r2, [sp, #4]
 800fcf4:	9b01      	ldr	r3, [sp, #4]
 800fcf6:	61a3      	str	r3, [r4, #24]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	bf14      	ite	ne
 800fcfc:	2202      	movne	r2, #2
 800fcfe:	2201      	moveq	r2, #1
 800fd00:	6122      	str	r2, [r4, #16]
 800fd02:	b1bd      	cbz	r5, 800fd34 <__d2b+0x94>
 800fd04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd08:	4405      	add	r5, r0
 800fd0a:	603d      	str	r5, [r7, #0]
 800fd0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd10:	6030      	str	r0, [r6, #0]
 800fd12:	4620      	mov	r0, r4
 800fd14:	b003      	add	sp, #12
 800fd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd1e:	e7d6      	b.n	800fcce <__d2b+0x2e>
 800fd20:	6161      	str	r1, [r4, #20]
 800fd22:	e7e7      	b.n	800fcf4 <__d2b+0x54>
 800fd24:	a801      	add	r0, sp, #4
 800fd26:	f7ff fd61 	bl	800f7ec <__lo0bits>
 800fd2a:	9b01      	ldr	r3, [sp, #4]
 800fd2c:	6163      	str	r3, [r4, #20]
 800fd2e:	3020      	adds	r0, #32
 800fd30:	2201      	movs	r2, #1
 800fd32:	e7e5      	b.n	800fd00 <__d2b+0x60>
 800fd34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd3c:	6038      	str	r0, [r7, #0]
 800fd3e:	6918      	ldr	r0, [r3, #16]
 800fd40:	f7ff fd34 	bl	800f7ac <__hi0bits>
 800fd44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd48:	e7e2      	b.n	800fd10 <__d2b+0x70>
 800fd4a:	bf00      	nop
 800fd4c:	08011ef4 	.word	0x08011ef4
 800fd50:	08011f05 	.word	0x08011f05

0800fd54 <__ssputs_r>:
 800fd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd58:	688e      	ldr	r6, [r1, #8]
 800fd5a:	461f      	mov	r7, r3
 800fd5c:	42be      	cmp	r6, r7
 800fd5e:	680b      	ldr	r3, [r1, #0]
 800fd60:	4682      	mov	sl, r0
 800fd62:	460c      	mov	r4, r1
 800fd64:	4690      	mov	r8, r2
 800fd66:	d82c      	bhi.n	800fdc2 <__ssputs_r+0x6e>
 800fd68:	898a      	ldrh	r2, [r1, #12]
 800fd6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd6e:	d026      	beq.n	800fdbe <__ssputs_r+0x6a>
 800fd70:	6965      	ldr	r5, [r4, #20]
 800fd72:	6909      	ldr	r1, [r1, #16]
 800fd74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd78:	eba3 0901 	sub.w	r9, r3, r1
 800fd7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd80:	1c7b      	adds	r3, r7, #1
 800fd82:	444b      	add	r3, r9
 800fd84:	106d      	asrs	r5, r5, #1
 800fd86:	429d      	cmp	r5, r3
 800fd88:	bf38      	it	cc
 800fd8a:	461d      	movcc	r5, r3
 800fd8c:	0553      	lsls	r3, r2, #21
 800fd8e:	d527      	bpl.n	800fde0 <__ssputs_r+0x8c>
 800fd90:	4629      	mov	r1, r5
 800fd92:	f7ff fbd7 	bl	800f544 <_malloc_r>
 800fd96:	4606      	mov	r6, r0
 800fd98:	b360      	cbz	r0, 800fdf4 <__ssputs_r+0xa0>
 800fd9a:	6921      	ldr	r1, [r4, #16]
 800fd9c:	464a      	mov	r2, r9
 800fd9e:	f7fe fcd4 	bl	800e74a <memcpy>
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdac:	81a3      	strh	r3, [r4, #12]
 800fdae:	6126      	str	r6, [r4, #16]
 800fdb0:	6165      	str	r5, [r4, #20]
 800fdb2:	444e      	add	r6, r9
 800fdb4:	eba5 0509 	sub.w	r5, r5, r9
 800fdb8:	6026      	str	r6, [r4, #0]
 800fdba:	60a5      	str	r5, [r4, #8]
 800fdbc:	463e      	mov	r6, r7
 800fdbe:	42be      	cmp	r6, r7
 800fdc0:	d900      	bls.n	800fdc4 <__ssputs_r+0x70>
 800fdc2:	463e      	mov	r6, r7
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	4632      	mov	r2, r6
 800fdc8:	4641      	mov	r1, r8
 800fdca:	f000 f9c9 	bl	8010160 <memmove>
 800fdce:	68a3      	ldr	r3, [r4, #8]
 800fdd0:	1b9b      	subs	r3, r3, r6
 800fdd2:	60a3      	str	r3, [r4, #8]
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	4433      	add	r3, r6
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	2000      	movs	r0, #0
 800fddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde0:	462a      	mov	r2, r5
 800fde2:	f000 fa2d 	bl	8010240 <_realloc_r>
 800fde6:	4606      	mov	r6, r0
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d1e0      	bne.n	800fdae <__ssputs_r+0x5a>
 800fdec:	6921      	ldr	r1, [r4, #16]
 800fdee:	4650      	mov	r0, sl
 800fdf0:	f7ff fb34 	bl	800f45c <_free_r>
 800fdf4:	230c      	movs	r3, #12
 800fdf6:	f8ca 3000 	str.w	r3, [sl]
 800fdfa:	89a3      	ldrh	r3, [r4, #12]
 800fdfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	f04f 30ff 	mov.w	r0, #4294967295
 800fe06:	e7e9      	b.n	800fddc <__ssputs_r+0x88>

0800fe08 <_svfiprintf_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	4698      	mov	r8, r3
 800fe0e:	898b      	ldrh	r3, [r1, #12]
 800fe10:	061b      	lsls	r3, r3, #24
 800fe12:	b09d      	sub	sp, #116	; 0x74
 800fe14:	4607      	mov	r7, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	4614      	mov	r4, r2
 800fe1a:	d50e      	bpl.n	800fe3a <_svfiprintf_r+0x32>
 800fe1c:	690b      	ldr	r3, [r1, #16]
 800fe1e:	b963      	cbnz	r3, 800fe3a <_svfiprintf_r+0x32>
 800fe20:	2140      	movs	r1, #64	; 0x40
 800fe22:	f7ff fb8f 	bl	800f544 <_malloc_r>
 800fe26:	6028      	str	r0, [r5, #0]
 800fe28:	6128      	str	r0, [r5, #16]
 800fe2a:	b920      	cbnz	r0, 800fe36 <_svfiprintf_r+0x2e>
 800fe2c:	230c      	movs	r3, #12
 800fe2e:	603b      	str	r3, [r7, #0]
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	e0d0      	b.n	800ffd8 <_svfiprintf_r+0x1d0>
 800fe36:	2340      	movs	r3, #64	; 0x40
 800fe38:	616b      	str	r3, [r5, #20]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3e:	2320      	movs	r3, #32
 800fe40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe48:	2330      	movs	r3, #48	; 0x30
 800fe4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fff0 <_svfiprintf_r+0x1e8>
 800fe4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe52:	f04f 0901 	mov.w	r9, #1
 800fe56:	4623      	mov	r3, r4
 800fe58:	469a      	mov	sl, r3
 800fe5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe5e:	b10a      	cbz	r2, 800fe64 <_svfiprintf_r+0x5c>
 800fe60:	2a25      	cmp	r2, #37	; 0x25
 800fe62:	d1f9      	bne.n	800fe58 <_svfiprintf_r+0x50>
 800fe64:	ebba 0b04 	subs.w	fp, sl, r4
 800fe68:	d00b      	beq.n	800fe82 <_svfiprintf_r+0x7a>
 800fe6a:	465b      	mov	r3, fp
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	4629      	mov	r1, r5
 800fe70:	4638      	mov	r0, r7
 800fe72:	f7ff ff6f 	bl	800fd54 <__ssputs_r>
 800fe76:	3001      	adds	r0, #1
 800fe78:	f000 80a9 	beq.w	800ffce <_svfiprintf_r+0x1c6>
 800fe7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe7e:	445a      	add	r2, fp
 800fe80:	9209      	str	r2, [sp, #36]	; 0x24
 800fe82:	f89a 3000 	ldrb.w	r3, [sl]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 80a1 	beq.w	800ffce <_svfiprintf_r+0x1c6>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe96:	f10a 0a01 	add.w	sl, sl, #1
 800fe9a:	9304      	str	r3, [sp, #16]
 800fe9c:	9307      	str	r3, [sp, #28]
 800fe9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fea2:	931a      	str	r3, [sp, #104]	; 0x68
 800fea4:	4654      	mov	r4, sl
 800fea6:	2205      	movs	r2, #5
 800fea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feac:	4850      	ldr	r0, [pc, #320]	; (800fff0 <_svfiprintf_r+0x1e8>)
 800feae:	f7f0 f9af 	bl	8000210 <memchr>
 800feb2:	9a04      	ldr	r2, [sp, #16]
 800feb4:	b9d8      	cbnz	r0, 800feee <_svfiprintf_r+0xe6>
 800feb6:	06d0      	lsls	r0, r2, #27
 800feb8:	bf44      	itt	mi
 800feba:	2320      	movmi	r3, #32
 800febc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fec0:	0711      	lsls	r1, r2, #28
 800fec2:	bf44      	itt	mi
 800fec4:	232b      	movmi	r3, #43	; 0x2b
 800fec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feca:	f89a 3000 	ldrb.w	r3, [sl]
 800fece:	2b2a      	cmp	r3, #42	; 0x2a
 800fed0:	d015      	beq.n	800fefe <_svfiprintf_r+0xf6>
 800fed2:	9a07      	ldr	r2, [sp, #28]
 800fed4:	4654      	mov	r4, sl
 800fed6:	2000      	movs	r0, #0
 800fed8:	f04f 0c0a 	mov.w	ip, #10
 800fedc:	4621      	mov	r1, r4
 800fede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fee2:	3b30      	subs	r3, #48	; 0x30
 800fee4:	2b09      	cmp	r3, #9
 800fee6:	d94d      	bls.n	800ff84 <_svfiprintf_r+0x17c>
 800fee8:	b1b0      	cbz	r0, 800ff18 <_svfiprintf_r+0x110>
 800feea:	9207      	str	r2, [sp, #28]
 800feec:	e014      	b.n	800ff18 <_svfiprintf_r+0x110>
 800feee:	eba0 0308 	sub.w	r3, r0, r8
 800fef2:	fa09 f303 	lsl.w	r3, r9, r3
 800fef6:	4313      	orrs	r3, r2
 800fef8:	9304      	str	r3, [sp, #16]
 800fefa:	46a2      	mov	sl, r4
 800fefc:	e7d2      	b.n	800fea4 <_svfiprintf_r+0x9c>
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	1d19      	adds	r1, r3, #4
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	9103      	str	r1, [sp, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	bfbb      	ittet	lt
 800ff0a:	425b      	neglt	r3, r3
 800ff0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff10:	9307      	strge	r3, [sp, #28]
 800ff12:	9307      	strlt	r3, [sp, #28]
 800ff14:	bfb8      	it	lt
 800ff16:	9204      	strlt	r2, [sp, #16]
 800ff18:	7823      	ldrb	r3, [r4, #0]
 800ff1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff1c:	d10c      	bne.n	800ff38 <_svfiprintf_r+0x130>
 800ff1e:	7863      	ldrb	r3, [r4, #1]
 800ff20:	2b2a      	cmp	r3, #42	; 0x2a
 800ff22:	d134      	bne.n	800ff8e <_svfiprintf_r+0x186>
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	1d1a      	adds	r2, r3, #4
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	9203      	str	r2, [sp, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bfb8      	it	lt
 800ff30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff34:	3402      	adds	r4, #2
 800ff36:	9305      	str	r3, [sp, #20]
 800ff38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010000 <_svfiprintf_r+0x1f8>
 800ff3c:	7821      	ldrb	r1, [r4, #0]
 800ff3e:	2203      	movs	r2, #3
 800ff40:	4650      	mov	r0, sl
 800ff42:	f7f0 f965 	bl	8000210 <memchr>
 800ff46:	b138      	cbz	r0, 800ff58 <_svfiprintf_r+0x150>
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	eba0 000a 	sub.w	r0, r0, sl
 800ff4e:	2240      	movs	r2, #64	; 0x40
 800ff50:	4082      	lsls	r2, r0
 800ff52:	4313      	orrs	r3, r2
 800ff54:	3401      	adds	r4, #1
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5c:	4825      	ldr	r0, [pc, #148]	; (800fff4 <_svfiprintf_r+0x1ec>)
 800ff5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff62:	2206      	movs	r2, #6
 800ff64:	f7f0 f954 	bl	8000210 <memchr>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d038      	beq.n	800ffde <_svfiprintf_r+0x1d6>
 800ff6c:	4b22      	ldr	r3, [pc, #136]	; (800fff8 <_svfiprintf_r+0x1f0>)
 800ff6e:	bb1b      	cbnz	r3, 800ffb8 <_svfiprintf_r+0x1b0>
 800ff70:	9b03      	ldr	r3, [sp, #12]
 800ff72:	3307      	adds	r3, #7
 800ff74:	f023 0307 	bic.w	r3, r3, #7
 800ff78:	3308      	adds	r3, #8
 800ff7a:	9303      	str	r3, [sp, #12]
 800ff7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff7e:	4433      	add	r3, r6
 800ff80:	9309      	str	r3, [sp, #36]	; 0x24
 800ff82:	e768      	b.n	800fe56 <_svfiprintf_r+0x4e>
 800ff84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff88:	460c      	mov	r4, r1
 800ff8a:	2001      	movs	r0, #1
 800ff8c:	e7a6      	b.n	800fedc <_svfiprintf_r+0xd4>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	3401      	adds	r4, #1
 800ff92:	9305      	str	r3, [sp, #20]
 800ff94:	4619      	mov	r1, r3
 800ff96:	f04f 0c0a 	mov.w	ip, #10
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffa0:	3a30      	subs	r2, #48	; 0x30
 800ffa2:	2a09      	cmp	r2, #9
 800ffa4:	d903      	bls.n	800ffae <_svfiprintf_r+0x1a6>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0c6      	beq.n	800ff38 <_svfiprintf_r+0x130>
 800ffaa:	9105      	str	r1, [sp, #20]
 800ffac:	e7c4      	b.n	800ff38 <_svfiprintf_r+0x130>
 800ffae:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e7f0      	b.n	800ff9a <_svfiprintf_r+0x192>
 800ffb8:	ab03      	add	r3, sp, #12
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	462a      	mov	r2, r5
 800ffbe:	4b0f      	ldr	r3, [pc, #60]	; (800fffc <_svfiprintf_r+0x1f4>)
 800ffc0:	a904      	add	r1, sp, #16
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7fd fdaa 	bl	800db1c <_printf_float>
 800ffc8:	1c42      	adds	r2, r0, #1
 800ffca:	4606      	mov	r6, r0
 800ffcc:	d1d6      	bne.n	800ff7c <_svfiprintf_r+0x174>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	065b      	lsls	r3, r3, #25
 800ffd2:	f53f af2d 	bmi.w	800fe30 <_svfiprintf_r+0x28>
 800ffd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffd8:	b01d      	add	sp, #116	; 0x74
 800ffda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffde:	ab03      	add	r3, sp, #12
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	462a      	mov	r2, r5
 800ffe4:	4b05      	ldr	r3, [pc, #20]	; (800fffc <_svfiprintf_r+0x1f4>)
 800ffe6:	a904      	add	r1, sp, #16
 800ffe8:	4638      	mov	r0, r7
 800ffea:	f7fe f83b 	bl	800e064 <_printf_i>
 800ffee:	e7eb      	b.n	800ffc8 <_svfiprintf_r+0x1c0>
 800fff0:	0801205c 	.word	0x0801205c
 800fff4:	08012066 	.word	0x08012066
 800fff8:	0800db1d 	.word	0x0800db1d
 800fffc:	0800fd55 	.word	0x0800fd55
 8010000:	08012062 	.word	0x08012062

08010004 <__sflush_r>:
 8010004:	898a      	ldrh	r2, [r1, #12]
 8010006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000a:	4605      	mov	r5, r0
 801000c:	0710      	lsls	r0, r2, #28
 801000e:	460c      	mov	r4, r1
 8010010:	d458      	bmi.n	80100c4 <__sflush_r+0xc0>
 8010012:	684b      	ldr	r3, [r1, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	dc05      	bgt.n	8010024 <__sflush_r+0x20>
 8010018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801001a:	2b00      	cmp	r3, #0
 801001c:	dc02      	bgt.n	8010024 <__sflush_r+0x20>
 801001e:	2000      	movs	r0, #0
 8010020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010026:	2e00      	cmp	r6, #0
 8010028:	d0f9      	beq.n	801001e <__sflush_r+0x1a>
 801002a:	2300      	movs	r3, #0
 801002c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010030:	682f      	ldr	r7, [r5, #0]
 8010032:	6a21      	ldr	r1, [r4, #32]
 8010034:	602b      	str	r3, [r5, #0]
 8010036:	d032      	beq.n	801009e <__sflush_r+0x9a>
 8010038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801003a:	89a3      	ldrh	r3, [r4, #12]
 801003c:	075a      	lsls	r2, r3, #29
 801003e:	d505      	bpl.n	801004c <__sflush_r+0x48>
 8010040:	6863      	ldr	r3, [r4, #4]
 8010042:	1ac0      	subs	r0, r0, r3
 8010044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010046:	b10b      	cbz	r3, 801004c <__sflush_r+0x48>
 8010048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801004a:	1ac0      	subs	r0, r0, r3
 801004c:	2300      	movs	r3, #0
 801004e:	4602      	mov	r2, r0
 8010050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010052:	6a21      	ldr	r1, [r4, #32]
 8010054:	4628      	mov	r0, r5
 8010056:	47b0      	blx	r6
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	d106      	bne.n	801006c <__sflush_r+0x68>
 801005e:	6829      	ldr	r1, [r5, #0]
 8010060:	291d      	cmp	r1, #29
 8010062:	d82b      	bhi.n	80100bc <__sflush_r+0xb8>
 8010064:	4a29      	ldr	r2, [pc, #164]	; (801010c <__sflush_r+0x108>)
 8010066:	410a      	asrs	r2, r1
 8010068:	07d6      	lsls	r6, r2, #31
 801006a:	d427      	bmi.n	80100bc <__sflush_r+0xb8>
 801006c:	2200      	movs	r2, #0
 801006e:	6062      	str	r2, [r4, #4]
 8010070:	04d9      	lsls	r1, r3, #19
 8010072:	6922      	ldr	r2, [r4, #16]
 8010074:	6022      	str	r2, [r4, #0]
 8010076:	d504      	bpl.n	8010082 <__sflush_r+0x7e>
 8010078:	1c42      	adds	r2, r0, #1
 801007a:	d101      	bne.n	8010080 <__sflush_r+0x7c>
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	b903      	cbnz	r3, 8010082 <__sflush_r+0x7e>
 8010080:	6560      	str	r0, [r4, #84]	; 0x54
 8010082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010084:	602f      	str	r7, [r5, #0]
 8010086:	2900      	cmp	r1, #0
 8010088:	d0c9      	beq.n	801001e <__sflush_r+0x1a>
 801008a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801008e:	4299      	cmp	r1, r3
 8010090:	d002      	beq.n	8010098 <__sflush_r+0x94>
 8010092:	4628      	mov	r0, r5
 8010094:	f7ff f9e2 	bl	800f45c <_free_r>
 8010098:	2000      	movs	r0, #0
 801009a:	6360      	str	r0, [r4, #52]	; 0x34
 801009c:	e7c0      	b.n	8010020 <__sflush_r+0x1c>
 801009e:	2301      	movs	r3, #1
 80100a0:	4628      	mov	r0, r5
 80100a2:	47b0      	blx	r6
 80100a4:	1c41      	adds	r1, r0, #1
 80100a6:	d1c8      	bne.n	801003a <__sflush_r+0x36>
 80100a8:	682b      	ldr	r3, [r5, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d0c5      	beq.n	801003a <__sflush_r+0x36>
 80100ae:	2b1d      	cmp	r3, #29
 80100b0:	d001      	beq.n	80100b6 <__sflush_r+0xb2>
 80100b2:	2b16      	cmp	r3, #22
 80100b4:	d101      	bne.n	80100ba <__sflush_r+0xb6>
 80100b6:	602f      	str	r7, [r5, #0]
 80100b8:	e7b1      	b.n	801001e <__sflush_r+0x1a>
 80100ba:	89a3      	ldrh	r3, [r4, #12]
 80100bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100c0:	81a3      	strh	r3, [r4, #12]
 80100c2:	e7ad      	b.n	8010020 <__sflush_r+0x1c>
 80100c4:	690f      	ldr	r7, [r1, #16]
 80100c6:	2f00      	cmp	r7, #0
 80100c8:	d0a9      	beq.n	801001e <__sflush_r+0x1a>
 80100ca:	0793      	lsls	r3, r2, #30
 80100cc:	680e      	ldr	r6, [r1, #0]
 80100ce:	bf08      	it	eq
 80100d0:	694b      	ldreq	r3, [r1, #20]
 80100d2:	600f      	str	r7, [r1, #0]
 80100d4:	bf18      	it	ne
 80100d6:	2300      	movne	r3, #0
 80100d8:	eba6 0807 	sub.w	r8, r6, r7
 80100dc:	608b      	str	r3, [r1, #8]
 80100de:	f1b8 0f00 	cmp.w	r8, #0
 80100e2:	dd9c      	ble.n	801001e <__sflush_r+0x1a>
 80100e4:	6a21      	ldr	r1, [r4, #32]
 80100e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100e8:	4643      	mov	r3, r8
 80100ea:	463a      	mov	r2, r7
 80100ec:	4628      	mov	r0, r5
 80100ee:	47b0      	blx	r6
 80100f0:	2800      	cmp	r0, #0
 80100f2:	dc06      	bgt.n	8010102 <__sflush_r+0xfe>
 80100f4:	89a3      	ldrh	r3, [r4, #12]
 80100f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100fa:	81a3      	strh	r3, [r4, #12]
 80100fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010100:	e78e      	b.n	8010020 <__sflush_r+0x1c>
 8010102:	4407      	add	r7, r0
 8010104:	eba8 0800 	sub.w	r8, r8, r0
 8010108:	e7e9      	b.n	80100de <__sflush_r+0xda>
 801010a:	bf00      	nop
 801010c:	dfbffffe 	.word	0xdfbffffe

08010110 <_fflush_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	690b      	ldr	r3, [r1, #16]
 8010114:	4605      	mov	r5, r0
 8010116:	460c      	mov	r4, r1
 8010118:	b913      	cbnz	r3, 8010120 <_fflush_r+0x10>
 801011a:	2500      	movs	r5, #0
 801011c:	4628      	mov	r0, r5
 801011e:	bd38      	pop	{r3, r4, r5, pc}
 8010120:	b118      	cbz	r0, 801012a <_fflush_r+0x1a>
 8010122:	6a03      	ldr	r3, [r0, #32]
 8010124:	b90b      	cbnz	r3, 801012a <_fflush_r+0x1a>
 8010126:	f7fe f94b 	bl	800e3c0 <__sinit>
 801012a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d0f3      	beq.n	801011a <_fflush_r+0xa>
 8010132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010134:	07d0      	lsls	r0, r2, #31
 8010136:	d404      	bmi.n	8010142 <_fflush_r+0x32>
 8010138:	0599      	lsls	r1, r3, #22
 801013a:	d402      	bmi.n	8010142 <_fflush_r+0x32>
 801013c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801013e:	f7fe fb02 	bl	800e746 <__retarget_lock_acquire_recursive>
 8010142:	4628      	mov	r0, r5
 8010144:	4621      	mov	r1, r4
 8010146:	f7ff ff5d 	bl	8010004 <__sflush_r>
 801014a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801014c:	07da      	lsls	r2, r3, #31
 801014e:	4605      	mov	r5, r0
 8010150:	d4e4      	bmi.n	801011c <_fflush_r+0xc>
 8010152:	89a3      	ldrh	r3, [r4, #12]
 8010154:	059b      	lsls	r3, r3, #22
 8010156:	d4e1      	bmi.n	801011c <_fflush_r+0xc>
 8010158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801015a:	f7fe faf5 	bl	800e748 <__retarget_lock_release_recursive>
 801015e:	e7dd      	b.n	801011c <_fflush_r+0xc>

08010160 <memmove>:
 8010160:	4288      	cmp	r0, r1
 8010162:	b510      	push	{r4, lr}
 8010164:	eb01 0402 	add.w	r4, r1, r2
 8010168:	d902      	bls.n	8010170 <memmove+0x10>
 801016a:	4284      	cmp	r4, r0
 801016c:	4623      	mov	r3, r4
 801016e:	d807      	bhi.n	8010180 <memmove+0x20>
 8010170:	1e43      	subs	r3, r0, #1
 8010172:	42a1      	cmp	r1, r4
 8010174:	d008      	beq.n	8010188 <memmove+0x28>
 8010176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801017a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801017e:	e7f8      	b.n	8010172 <memmove+0x12>
 8010180:	4402      	add	r2, r0
 8010182:	4601      	mov	r1, r0
 8010184:	428a      	cmp	r2, r1
 8010186:	d100      	bne.n	801018a <memmove+0x2a>
 8010188:	bd10      	pop	{r4, pc}
 801018a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801018e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010192:	e7f7      	b.n	8010184 <memmove+0x24>

08010194 <_sbrk_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	4d06      	ldr	r5, [pc, #24]	; (80101b0 <_sbrk_r+0x1c>)
 8010198:	2300      	movs	r3, #0
 801019a:	4604      	mov	r4, r0
 801019c:	4608      	mov	r0, r1
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	f7f2 fab6 	bl	8002710 <_sbrk>
 80101a4:	1c43      	adds	r3, r0, #1
 80101a6:	d102      	bne.n	80101ae <_sbrk_r+0x1a>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	b103      	cbz	r3, 80101ae <_sbrk_r+0x1a>
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	2000800c 	.word	0x2000800c

080101b4 <__assert_func>:
 80101b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101b6:	4614      	mov	r4, r2
 80101b8:	461a      	mov	r2, r3
 80101ba:	4b09      	ldr	r3, [pc, #36]	; (80101e0 <__assert_func+0x2c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4605      	mov	r5, r0
 80101c0:	68d8      	ldr	r0, [r3, #12]
 80101c2:	b14c      	cbz	r4, 80101d8 <__assert_func+0x24>
 80101c4:	4b07      	ldr	r3, [pc, #28]	; (80101e4 <__assert_func+0x30>)
 80101c6:	9100      	str	r1, [sp, #0]
 80101c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101cc:	4906      	ldr	r1, [pc, #24]	; (80101e8 <__assert_func+0x34>)
 80101ce:	462b      	mov	r3, r5
 80101d0:	f000 f872 	bl	80102b8 <fiprintf>
 80101d4:	f000 f882 	bl	80102dc <abort>
 80101d8:	4b04      	ldr	r3, [pc, #16]	; (80101ec <__assert_func+0x38>)
 80101da:	461c      	mov	r4, r3
 80101dc:	e7f3      	b.n	80101c6 <__assert_func+0x12>
 80101de:	bf00      	nop
 80101e0:	20000084 	.word	0x20000084
 80101e4:	08012077 	.word	0x08012077
 80101e8:	08012084 	.word	0x08012084
 80101ec:	080120b2 	.word	0x080120b2

080101f0 <_calloc_r>:
 80101f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101f2:	fba1 2402 	umull	r2, r4, r1, r2
 80101f6:	b94c      	cbnz	r4, 801020c <_calloc_r+0x1c>
 80101f8:	4611      	mov	r1, r2
 80101fa:	9201      	str	r2, [sp, #4]
 80101fc:	f7ff f9a2 	bl	800f544 <_malloc_r>
 8010200:	9a01      	ldr	r2, [sp, #4]
 8010202:	4605      	mov	r5, r0
 8010204:	b930      	cbnz	r0, 8010214 <_calloc_r+0x24>
 8010206:	4628      	mov	r0, r5
 8010208:	b003      	add	sp, #12
 801020a:	bd30      	pop	{r4, r5, pc}
 801020c:	220c      	movs	r2, #12
 801020e:	6002      	str	r2, [r0, #0]
 8010210:	2500      	movs	r5, #0
 8010212:	e7f8      	b.n	8010206 <_calloc_r+0x16>
 8010214:	4621      	mov	r1, r4
 8010216:	f7fe f9a0 	bl	800e55a <memset>
 801021a:	e7f4      	b.n	8010206 <_calloc_r+0x16>

0801021c <__ascii_mbtowc>:
 801021c:	b082      	sub	sp, #8
 801021e:	b901      	cbnz	r1, 8010222 <__ascii_mbtowc+0x6>
 8010220:	a901      	add	r1, sp, #4
 8010222:	b142      	cbz	r2, 8010236 <__ascii_mbtowc+0x1a>
 8010224:	b14b      	cbz	r3, 801023a <__ascii_mbtowc+0x1e>
 8010226:	7813      	ldrb	r3, [r2, #0]
 8010228:	600b      	str	r3, [r1, #0]
 801022a:	7812      	ldrb	r2, [r2, #0]
 801022c:	1e10      	subs	r0, r2, #0
 801022e:	bf18      	it	ne
 8010230:	2001      	movne	r0, #1
 8010232:	b002      	add	sp, #8
 8010234:	4770      	bx	lr
 8010236:	4610      	mov	r0, r2
 8010238:	e7fb      	b.n	8010232 <__ascii_mbtowc+0x16>
 801023a:	f06f 0001 	mvn.w	r0, #1
 801023e:	e7f8      	b.n	8010232 <__ascii_mbtowc+0x16>

08010240 <_realloc_r>:
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	4680      	mov	r8, r0
 8010246:	4614      	mov	r4, r2
 8010248:	460e      	mov	r6, r1
 801024a:	b921      	cbnz	r1, 8010256 <_realloc_r+0x16>
 801024c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010250:	4611      	mov	r1, r2
 8010252:	f7ff b977 	b.w	800f544 <_malloc_r>
 8010256:	b92a      	cbnz	r2, 8010264 <_realloc_r+0x24>
 8010258:	f7ff f900 	bl	800f45c <_free_r>
 801025c:	4625      	mov	r5, r4
 801025e:	4628      	mov	r0, r5
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010264:	f000 f841 	bl	80102ea <_malloc_usable_size_r>
 8010268:	4284      	cmp	r4, r0
 801026a:	4607      	mov	r7, r0
 801026c:	d802      	bhi.n	8010274 <_realloc_r+0x34>
 801026e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010272:	d812      	bhi.n	801029a <_realloc_r+0x5a>
 8010274:	4621      	mov	r1, r4
 8010276:	4640      	mov	r0, r8
 8010278:	f7ff f964 	bl	800f544 <_malloc_r>
 801027c:	4605      	mov	r5, r0
 801027e:	2800      	cmp	r0, #0
 8010280:	d0ed      	beq.n	801025e <_realloc_r+0x1e>
 8010282:	42bc      	cmp	r4, r7
 8010284:	4622      	mov	r2, r4
 8010286:	4631      	mov	r1, r6
 8010288:	bf28      	it	cs
 801028a:	463a      	movcs	r2, r7
 801028c:	f7fe fa5d 	bl	800e74a <memcpy>
 8010290:	4631      	mov	r1, r6
 8010292:	4640      	mov	r0, r8
 8010294:	f7ff f8e2 	bl	800f45c <_free_r>
 8010298:	e7e1      	b.n	801025e <_realloc_r+0x1e>
 801029a:	4635      	mov	r5, r6
 801029c:	e7df      	b.n	801025e <_realloc_r+0x1e>

0801029e <__ascii_wctomb>:
 801029e:	b149      	cbz	r1, 80102b4 <__ascii_wctomb+0x16>
 80102a0:	2aff      	cmp	r2, #255	; 0xff
 80102a2:	bf85      	ittet	hi
 80102a4:	238a      	movhi	r3, #138	; 0x8a
 80102a6:	6003      	strhi	r3, [r0, #0]
 80102a8:	700a      	strbls	r2, [r1, #0]
 80102aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80102ae:	bf98      	it	ls
 80102b0:	2001      	movls	r0, #1
 80102b2:	4770      	bx	lr
 80102b4:	4608      	mov	r0, r1
 80102b6:	4770      	bx	lr

080102b8 <fiprintf>:
 80102b8:	b40e      	push	{r1, r2, r3}
 80102ba:	b503      	push	{r0, r1, lr}
 80102bc:	4601      	mov	r1, r0
 80102be:	ab03      	add	r3, sp, #12
 80102c0:	4805      	ldr	r0, [pc, #20]	; (80102d8 <fiprintf+0x20>)
 80102c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102c6:	6800      	ldr	r0, [r0, #0]
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	f000 f83f 	bl	801034c <_vfiprintf_r>
 80102ce:	b002      	add	sp, #8
 80102d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102d4:	b003      	add	sp, #12
 80102d6:	4770      	bx	lr
 80102d8:	20000084 	.word	0x20000084

080102dc <abort>:
 80102dc:	b508      	push	{r3, lr}
 80102de:	2006      	movs	r0, #6
 80102e0:	f000 fa0c 	bl	80106fc <raise>
 80102e4:	2001      	movs	r0, #1
 80102e6:	f7f2 f99b 	bl	8002620 <_exit>

080102ea <_malloc_usable_size_r>:
 80102ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102ee:	1f18      	subs	r0, r3, #4
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	bfbc      	itt	lt
 80102f4:	580b      	ldrlt	r3, [r1, r0]
 80102f6:	18c0      	addlt	r0, r0, r3
 80102f8:	4770      	bx	lr

080102fa <__sfputc_r>:
 80102fa:	6893      	ldr	r3, [r2, #8]
 80102fc:	3b01      	subs	r3, #1
 80102fe:	2b00      	cmp	r3, #0
 8010300:	b410      	push	{r4}
 8010302:	6093      	str	r3, [r2, #8]
 8010304:	da08      	bge.n	8010318 <__sfputc_r+0x1e>
 8010306:	6994      	ldr	r4, [r2, #24]
 8010308:	42a3      	cmp	r3, r4
 801030a:	db01      	blt.n	8010310 <__sfputc_r+0x16>
 801030c:	290a      	cmp	r1, #10
 801030e:	d103      	bne.n	8010318 <__sfputc_r+0x1e>
 8010310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010314:	f000 b934 	b.w	8010580 <__swbuf_r>
 8010318:	6813      	ldr	r3, [r2, #0]
 801031a:	1c58      	adds	r0, r3, #1
 801031c:	6010      	str	r0, [r2, #0]
 801031e:	7019      	strb	r1, [r3, #0]
 8010320:	4608      	mov	r0, r1
 8010322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010326:	4770      	bx	lr

08010328 <__sfputs_r>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	4606      	mov	r6, r0
 801032c:	460f      	mov	r7, r1
 801032e:	4614      	mov	r4, r2
 8010330:	18d5      	adds	r5, r2, r3
 8010332:	42ac      	cmp	r4, r5
 8010334:	d101      	bne.n	801033a <__sfputs_r+0x12>
 8010336:	2000      	movs	r0, #0
 8010338:	e007      	b.n	801034a <__sfputs_r+0x22>
 801033a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033e:	463a      	mov	r2, r7
 8010340:	4630      	mov	r0, r6
 8010342:	f7ff ffda 	bl	80102fa <__sfputc_r>
 8010346:	1c43      	adds	r3, r0, #1
 8010348:	d1f3      	bne.n	8010332 <__sfputs_r+0xa>
 801034a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801034c <_vfiprintf_r>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	460d      	mov	r5, r1
 8010352:	b09d      	sub	sp, #116	; 0x74
 8010354:	4614      	mov	r4, r2
 8010356:	4698      	mov	r8, r3
 8010358:	4606      	mov	r6, r0
 801035a:	b118      	cbz	r0, 8010364 <_vfiprintf_r+0x18>
 801035c:	6a03      	ldr	r3, [r0, #32]
 801035e:	b90b      	cbnz	r3, 8010364 <_vfiprintf_r+0x18>
 8010360:	f7fe f82e 	bl	800e3c0 <__sinit>
 8010364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010366:	07d9      	lsls	r1, r3, #31
 8010368:	d405      	bmi.n	8010376 <_vfiprintf_r+0x2a>
 801036a:	89ab      	ldrh	r3, [r5, #12]
 801036c:	059a      	lsls	r2, r3, #22
 801036e:	d402      	bmi.n	8010376 <_vfiprintf_r+0x2a>
 8010370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010372:	f7fe f9e8 	bl	800e746 <__retarget_lock_acquire_recursive>
 8010376:	89ab      	ldrh	r3, [r5, #12]
 8010378:	071b      	lsls	r3, r3, #28
 801037a:	d501      	bpl.n	8010380 <_vfiprintf_r+0x34>
 801037c:	692b      	ldr	r3, [r5, #16]
 801037e:	b99b      	cbnz	r3, 80103a8 <_vfiprintf_r+0x5c>
 8010380:	4629      	mov	r1, r5
 8010382:	4630      	mov	r0, r6
 8010384:	f000 f93a 	bl	80105fc <__swsetup_r>
 8010388:	b170      	cbz	r0, 80103a8 <_vfiprintf_r+0x5c>
 801038a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801038c:	07dc      	lsls	r4, r3, #31
 801038e:	d504      	bpl.n	801039a <_vfiprintf_r+0x4e>
 8010390:	f04f 30ff 	mov.w	r0, #4294967295
 8010394:	b01d      	add	sp, #116	; 0x74
 8010396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039a:	89ab      	ldrh	r3, [r5, #12]
 801039c:	0598      	lsls	r0, r3, #22
 801039e:	d4f7      	bmi.n	8010390 <_vfiprintf_r+0x44>
 80103a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103a2:	f7fe f9d1 	bl	800e748 <__retarget_lock_release_recursive>
 80103a6:	e7f3      	b.n	8010390 <_vfiprintf_r+0x44>
 80103a8:	2300      	movs	r3, #0
 80103aa:	9309      	str	r3, [sp, #36]	; 0x24
 80103ac:	2320      	movs	r3, #32
 80103ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80103b6:	2330      	movs	r3, #48	; 0x30
 80103b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801056c <_vfiprintf_r+0x220>
 80103bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103c0:	f04f 0901 	mov.w	r9, #1
 80103c4:	4623      	mov	r3, r4
 80103c6:	469a      	mov	sl, r3
 80103c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103cc:	b10a      	cbz	r2, 80103d2 <_vfiprintf_r+0x86>
 80103ce:	2a25      	cmp	r2, #37	; 0x25
 80103d0:	d1f9      	bne.n	80103c6 <_vfiprintf_r+0x7a>
 80103d2:	ebba 0b04 	subs.w	fp, sl, r4
 80103d6:	d00b      	beq.n	80103f0 <_vfiprintf_r+0xa4>
 80103d8:	465b      	mov	r3, fp
 80103da:	4622      	mov	r2, r4
 80103dc:	4629      	mov	r1, r5
 80103de:	4630      	mov	r0, r6
 80103e0:	f7ff ffa2 	bl	8010328 <__sfputs_r>
 80103e4:	3001      	adds	r0, #1
 80103e6:	f000 80a9 	beq.w	801053c <_vfiprintf_r+0x1f0>
 80103ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103ec:	445a      	add	r2, fp
 80103ee:	9209      	str	r2, [sp, #36]	; 0x24
 80103f0:	f89a 3000 	ldrb.w	r3, [sl]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f000 80a1 	beq.w	801053c <_vfiprintf_r+0x1f0>
 80103fa:	2300      	movs	r3, #0
 80103fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010404:	f10a 0a01 	add.w	sl, sl, #1
 8010408:	9304      	str	r3, [sp, #16]
 801040a:	9307      	str	r3, [sp, #28]
 801040c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010410:	931a      	str	r3, [sp, #104]	; 0x68
 8010412:	4654      	mov	r4, sl
 8010414:	2205      	movs	r2, #5
 8010416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801041a:	4854      	ldr	r0, [pc, #336]	; (801056c <_vfiprintf_r+0x220>)
 801041c:	f7ef fef8 	bl	8000210 <memchr>
 8010420:	9a04      	ldr	r2, [sp, #16]
 8010422:	b9d8      	cbnz	r0, 801045c <_vfiprintf_r+0x110>
 8010424:	06d1      	lsls	r1, r2, #27
 8010426:	bf44      	itt	mi
 8010428:	2320      	movmi	r3, #32
 801042a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801042e:	0713      	lsls	r3, r2, #28
 8010430:	bf44      	itt	mi
 8010432:	232b      	movmi	r3, #43	; 0x2b
 8010434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010438:	f89a 3000 	ldrb.w	r3, [sl]
 801043c:	2b2a      	cmp	r3, #42	; 0x2a
 801043e:	d015      	beq.n	801046c <_vfiprintf_r+0x120>
 8010440:	9a07      	ldr	r2, [sp, #28]
 8010442:	4654      	mov	r4, sl
 8010444:	2000      	movs	r0, #0
 8010446:	f04f 0c0a 	mov.w	ip, #10
 801044a:	4621      	mov	r1, r4
 801044c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010450:	3b30      	subs	r3, #48	; 0x30
 8010452:	2b09      	cmp	r3, #9
 8010454:	d94d      	bls.n	80104f2 <_vfiprintf_r+0x1a6>
 8010456:	b1b0      	cbz	r0, 8010486 <_vfiprintf_r+0x13a>
 8010458:	9207      	str	r2, [sp, #28]
 801045a:	e014      	b.n	8010486 <_vfiprintf_r+0x13a>
 801045c:	eba0 0308 	sub.w	r3, r0, r8
 8010460:	fa09 f303 	lsl.w	r3, r9, r3
 8010464:	4313      	orrs	r3, r2
 8010466:	9304      	str	r3, [sp, #16]
 8010468:	46a2      	mov	sl, r4
 801046a:	e7d2      	b.n	8010412 <_vfiprintf_r+0xc6>
 801046c:	9b03      	ldr	r3, [sp, #12]
 801046e:	1d19      	adds	r1, r3, #4
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	9103      	str	r1, [sp, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	bfbb      	ittet	lt
 8010478:	425b      	neglt	r3, r3
 801047a:	f042 0202 	orrlt.w	r2, r2, #2
 801047e:	9307      	strge	r3, [sp, #28]
 8010480:	9307      	strlt	r3, [sp, #28]
 8010482:	bfb8      	it	lt
 8010484:	9204      	strlt	r2, [sp, #16]
 8010486:	7823      	ldrb	r3, [r4, #0]
 8010488:	2b2e      	cmp	r3, #46	; 0x2e
 801048a:	d10c      	bne.n	80104a6 <_vfiprintf_r+0x15a>
 801048c:	7863      	ldrb	r3, [r4, #1]
 801048e:	2b2a      	cmp	r3, #42	; 0x2a
 8010490:	d134      	bne.n	80104fc <_vfiprintf_r+0x1b0>
 8010492:	9b03      	ldr	r3, [sp, #12]
 8010494:	1d1a      	adds	r2, r3, #4
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	9203      	str	r2, [sp, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	bfb8      	it	lt
 801049e:	f04f 33ff 	movlt.w	r3, #4294967295
 80104a2:	3402      	adds	r4, #2
 80104a4:	9305      	str	r3, [sp, #20]
 80104a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801057c <_vfiprintf_r+0x230>
 80104aa:	7821      	ldrb	r1, [r4, #0]
 80104ac:	2203      	movs	r2, #3
 80104ae:	4650      	mov	r0, sl
 80104b0:	f7ef feae 	bl	8000210 <memchr>
 80104b4:	b138      	cbz	r0, 80104c6 <_vfiprintf_r+0x17a>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	eba0 000a 	sub.w	r0, r0, sl
 80104bc:	2240      	movs	r2, #64	; 0x40
 80104be:	4082      	lsls	r2, r0
 80104c0:	4313      	orrs	r3, r2
 80104c2:	3401      	adds	r4, #1
 80104c4:	9304      	str	r3, [sp, #16]
 80104c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ca:	4829      	ldr	r0, [pc, #164]	; (8010570 <_vfiprintf_r+0x224>)
 80104cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104d0:	2206      	movs	r2, #6
 80104d2:	f7ef fe9d 	bl	8000210 <memchr>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d03f      	beq.n	801055a <_vfiprintf_r+0x20e>
 80104da:	4b26      	ldr	r3, [pc, #152]	; (8010574 <_vfiprintf_r+0x228>)
 80104dc:	bb1b      	cbnz	r3, 8010526 <_vfiprintf_r+0x1da>
 80104de:	9b03      	ldr	r3, [sp, #12]
 80104e0:	3307      	adds	r3, #7
 80104e2:	f023 0307 	bic.w	r3, r3, #7
 80104e6:	3308      	adds	r3, #8
 80104e8:	9303      	str	r3, [sp, #12]
 80104ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ec:	443b      	add	r3, r7
 80104ee:	9309      	str	r3, [sp, #36]	; 0x24
 80104f0:	e768      	b.n	80103c4 <_vfiprintf_r+0x78>
 80104f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80104f6:	460c      	mov	r4, r1
 80104f8:	2001      	movs	r0, #1
 80104fa:	e7a6      	b.n	801044a <_vfiprintf_r+0xfe>
 80104fc:	2300      	movs	r3, #0
 80104fe:	3401      	adds	r4, #1
 8010500:	9305      	str	r3, [sp, #20]
 8010502:	4619      	mov	r1, r3
 8010504:	f04f 0c0a 	mov.w	ip, #10
 8010508:	4620      	mov	r0, r4
 801050a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801050e:	3a30      	subs	r2, #48	; 0x30
 8010510:	2a09      	cmp	r2, #9
 8010512:	d903      	bls.n	801051c <_vfiprintf_r+0x1d0>
 8010514:	2b00      	cmp	r3, #0
 8010516:	d0c6      	beq.n	80104a6 <_vfiprintf_r+0x15a>
 8010518:	9105      	str	r1, [sp, #20]
 801051a:	e7c4      	b.n	80104a6 <_vfiprintf_r+0x15a>
 801051c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010520:	4604      	mov	r4, r0
 8010522:	2301      	movs	r3, #1
 8010524:	e7f0      	b.n	8010508 <_vfiprintf_r+0x1bc>
 8010526:	ab03      	add	r3, sp, #12
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	462a      	mov	r2, r5
 801052c:	4b12      	ldr	r3, [pc, #72]	; (8010578 <_vfiprintf_r+0x22c>)
 801052e:	a904      	add	r1, sp, #16
 8010530:	4630      	mov	r0, r6
 8010532:	f7fd faf3 	bl	800db1c <_printf_float>
 8010536:	4607      	mov	r7, r0
 8010538:	1c78      	adds	r0, r7, #1
 801053a:	d1d6      	bne.n	80104ea <_vfiprintf_r+0x19e>
 801053c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801053e:	07d9      	lsls	r1, r3, #31
 8010540:	d405      	bmi.n	801054e <_vfiprintf_r+0x202>
 8010542:	89ab      	ldrh	r3, [r5, #12]
 8010544:	059a      	lsls	r2, r3, #22
 8010546:	d402      	bmi.n	801054e <_vfiprintf_r+0x202>
 8010548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801054a:	f7fe f8fd 	bl	800e748 <__retarget_lock_release_recursive>
 801054e:	89ab      	ldrh	r3, [r5, #12]
 8010550:	065b      	lsls	r3, r3, #25
 8010552:	f53f af1d 	bmi.w	8010390 <_vfiprintf_r+0x44>
 8010556:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010558:	e71c      	b.n	8010394 <_vfiprintf_r+0x48>
 801055a:	ab03      	add	r3, sp, #12
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	462a      	mov	r2, r5
 8010560:	4b05      	ldr	r3, [pc, #20]	; (8010578 <_vfiprintf_r+0x22c>)
 8010562:	a904      	add	r1, sp, #16
 8010564:	4630      	mov	r0, r6
 8010566:	f7fd fd7d 	bl	800e064 <_printf_i>
 801056a:	e7e4      	b.n	8010536 <_vfiprintf_r+0x1ea>
 801056c:	0801205c 	.word	0x0801205c
 8010570:	08012066 	.word	0x08012066
 8010574:	0800db1d 	.word	0x0800db1d
 8010578:	08010329 	.word	0x08010329
 801057c:	08012062 	.word	0x08012062

08010580 <__swbuf_r>:
 8010580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010582:	460e      	mov	r6, r1
 8010584:	4614      	mov	r4, r2
 8010586:	4605      	mov	r5, r0
 8010588:	b118      	cbz	r0, 8010592 <__swbuf_r+0x12>
 801058a:	6a03      	ldr	r3, [r0, #32]
 801058c:	b90b      	cbnz	r3, 8010592 <__swbuf_r+0x12>
 801058e:	f7fd ff17 	bl	800e3c0 <__sinit>
 8010592:	69a3      	ldr	r3, [r4, #24]
 8010594:	60a3      	str	r3, [r4, #8]
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	071a      	lsls	r2, r3, #28
 801059a:	d525      	bpl.n	80105e8 <__swbuf_r+0x68>
 801059c:	6923      	ldr	r3, [r4, #16]
 801059e:	b31b      	cbz	r3, 80105e8 <__swbuf_r+0x68>
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	6922      	ldr	r2, [r4, #16]
 80105a4:	1a98      	subs	r0, r3, r2
 80105a6:	6963      	ldr	r3, [r4, #20]
 80105a8:	b2f6      	uxtb	r6, r6
 80105aa:	4283      	cmp	r3, r0
 80105ac:	4637      	mov	r7, r6
 80105ae:	dc04      	bgt.n	80105ba <__swbuf_r+0x3a>
 80105b0:	4621      	mov	r1, r4
 80105b2:	4628      	mov	r0, r5
 80105b4:	f7ff fdac 	bl	8010110 <_fflush_r>
 80105b8:	b9e0      	cbnz	r0, 80105f4 <__swbuf_r+0x74>
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	3b01      	subs	r3, #1
 80105be:	60a3      	str	r3, [r4, #8]
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	1c5a      	adds	r2, r3, #1
 80105c4:	6022      	str	r2, [r4, #0]
 80105c6:	701e      	strb	r6, [r3, #0]
 80105c8:	6962      	ldr	r2, [r4, #20]
 80105ca:	1c43      	adds	r3, r0, #1
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d004      	beq.n	80105da <__swbuf_r+0x5a>
 80105d0:	89a3      	ldrh	r3, [r4, #12]
 80105d2:	07db      	lsls	r3, r3, #31
 80105d4:	d506      	bpl.n	80105e4 <__swbuf_r+0x64>
 80105d6:	2e0a      	cmp	r6, #10
 80105d8:	d104      	bne.n	80105e4 <__swbuf_r+0x64>
 80105da:	4621      	mov	r1, r4
 80105dc:	4628      	mov	r0, r5
 80105de:	f7ff fd97 	bl	8010110 <_fflush_r>
 80105e2:	b938      	cbnz	r0, 80105f4 <__swbuf_r+0x74>
 80105e4:	4638      	mov	r0, r7
 80105e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105e8:	4621      	mov	r1, r4
 80105ea:	4628      	mov	r0, r5
 80105ec:	f000 f806 	bl	80105fc <__swsetup_r>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d0d5      	beq.n	80105a0 <__swbuf_r+0x20>
 80105f4:	f04f 37ff 	mov.w	r7, #4294967295
 80105f8:	e7f4      	b.n	80105e4 <__swbuf_r+0x64>
	...

080105fc <__swsetup_r>:
 80105fc:	b538      	push	{r3, r4, r5, lr}
 80105fe:	4b2a      	ldr	r3, [pc, #168]	; (80106a8 <__swsetup_r+0xac>)
 8010600:	4605      	mov	r5, r0
 8010602:	6818      	ldr	r0, [r3, #0]
 8010604:	460c      	mov	r4, r1
 8010606:	b118      	cbz	r0, 8010610 <__swsetup_r+0x14>
 8010608:	6a03      	ldr	r3, [r0, #32]
 801060a:	b90b      	cbnz	r3, 8010610 <__swsetup_r+0x14>
 801060c:	f7fd fed8 	bl	800e3c0 <__sinit>
 8010610:	89a3      	ldrh	r3, [r4, #12]
 8010612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010616:	0718      	lsls	r0, r3, #28
 8010618:	d422      	bmi.n	8010660 <__swsetup_r+0x64>
 801061a:	06d9      	lsls	r1, r3, #27
 801061c:	d407      	bmi.n	801062e <__swsetup_r+0x32>
 801061e:	2309      	movs	r3, #9
 8010620:	602b      	str	r3, [r5, #0]
 8010622:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010626:	81a3      	strh	r3, [r4, #12]
 8010628:	f04f 30ff 	mov.w	r0, #4294967295
 801062c:	e034      	b.n	8010698 <__swsetup_r+0x9c>
 801062e:	0758      	lsls	r0, r3, #29
 8010630:	d512      	bpl.n	8010658 <__swsetup_r+0x5c>
 8010632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010634:	b141      	cbz	r1, 8010648 <__swsetup_r+0x4c>
 8010636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801063a:	4299      	cmp	r1, r3
 801063c:	d002      	beq.n	8010644 <__swsetup_r+0x48>
 801063e:	4628      	mov	r0, r5
 8010640:	f7fe ff0c 	bl	800f45c <_free_r>
 8010644:	2300      	movs	r3, #0
 8010646:	6363      	str	r3, [r4, #52]	; 0x34
 8010648:	89a3      	ldrh	r3, [r4, #12]
 801064a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801064e:	81a3      	strh	r3, [r4, #12]
 8010650:	2300      	movs	r3, #0
 8010652:	6063      	str	r3, [r4, #4]
 8010654:	6923      	ldr	r3, [r4, #16]
 8010656:	6023      	str	r3, [r4, #0]
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f043 0308 	orr.w	r3, r3, #8
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	6923      	ldr	r3, [r4, #16]
 8010662:	b94b      	cbnz	r3, 8010678 <__swsetup_r+0x7c>
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801066a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801066e:	d003      	beq.n	8010678 <__swsetup_r+0x7c>
 8010670:	4621      	mov	r1, r4
 8010672:	4628      	mov	r0, r5
 8010674:	f000 f884 	bl	8010780 <__smakebuf_r>
 8010678:	89a0      	ldrh	r0, [r4, #12]
 801067a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801067e:	f010 0301 	ands.w	r3, r0, #1
 8010682:	d00a      	beq.n	801069a <__swsetup_r+0x9e>
 8010684:	2300      	movs	r3, #0
 8010686:	60a3      	str	r3, [r4, #8]
 8010688:	6963      	ldr	r3, [r4, #20]
 801068a:	425b      	negs	r3, r3
 801068c:	61a3      	str	r3, [r4, #24]
 801068e:	6923      	ldr	r3, [r4, #16]
 8010690:	b943      	cbnz	r3, 80106a4 <__swsetup_r+0xa8>
 8010692:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010696:	d1c4      	bne.n	8010622 <__swsetup_r+0x26>
 8010698:	bd38      	pop	{r3, r4, r5, pc}
 801069a:	0781      	lsls	r1, r0, #30
 801069c:	bf58      	it	pl
 801069e:	6963      	ldrpl	r3, [r4, #20]
 80106a0:	60a3      	str	r3, [r4, #8]
 80106a2:	e7f4      	b.n	801068e <__swsetup_r+0x92>
 80106a4:	2000      	movs	r0, #0
 80106a6:	e7f7      	b.n	8010698 <__swsetup_r+0x9c>
 80106a8:	20000084 	.word	0x20000084

080106ac <_raise_r>:
 80106ac:	291f      	cmp	r1, #31
 80106ae:	b538      	push	{r3, r4, r5, lr}
 80106b0:	4604      	mov	r4, r0
 80106b2:	460d      	mov	r5, r1
 80106b4:	d904      	bls.n	80106c0 <_raise_r+0x14>
 80106b6:	2316      	movs	r3, #22
 80106b8:	6003      	str	r3, [r0, #0]
 80106ba:	f04f 30ff 	mov.w	r0, #4294967295
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80106c2:	b112      	cbz	r2, 80106ca <_raise_r+0x1e>
 80106c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106c8:	b94b      	cbnz	r3, 80106de <_raise_r+0x32>
 80106ca:	4620      	mov	r0, r4
 80106cc:	f000 f830 	bl	8010730 <_getpid_r>
 80106d0:	462a      	mov	r2, r5
 80106d2:	4601      	mov	r1, r0
 80106d4:	4620      	mov	r0, r4
 80106d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106da:	f000 b817 	b.w	801070c <_kill_r>
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d00a      	beq.n	80106f8 <_raise_r+0x4c>
 80106e2:	1c59      	adds	r1, r3, #1
 80106e4:	d103      	bne.n	80106ee <_raise_r+0x42>
 80106e6:	2316      	movs	r3, #22
 80106e8:	6003      	str	r3, [r0, #0]
 80106ea:	2001      	movs	r0, #1
 80106ec:	e7e7      	b.n	80106be <_raise_r+0x12>
 80106ee:	2400      	movs	r4, #0
 80106f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106f4:	4628      	mov	r0, r5
 80106f6:	4798      	blx	r3
 80106f8:	2000      	movs	r0, #0
 80106fa:	e7e0      	b.n	80106be <_raise_r+0x12>

080106fc <raise>:
 80106fc:	4b02      	ldr	r3, [pc, #8]	; (8010708 <raise+0xc>)
 80106fe:	4601      	mov	r1, r0
 8010700:	6818      	ldr	r0, [r3, #0]
 8010702:	f7ff bfd3 	b.w	80106ac <_raise_r>
 8010706:	bf00      	nop
 8010708:	20000084 	.word	0x20000084

0801070c <_kill_r>:
 801070c:	b538      	push	{r3, r4, r5, lr}
 801070e:	4d07      	ldr	r5, [pc, #28]	; (801072c <_kill_r+0x20>)
 8010710:	2300      	movs	r3, #0
 8010712:	4604      	mov	r4, r0
 8010714:	4608      	mov	r0, r1
 8010716:	4611      	mov	r1, r2
 8010718:	602b      	str	r3, [r5, #0]
 801071a:	f7f1 ff71 	bl	8002600 <_kill>
 801071e:	1c43      	adds	r3, r0, #1
 8010720:	d102      	bne.n	8010728 <_kill_r+0x1c>
 8010722:	682b      	ldr	r3, [r5, #0]
 8010724:	b103      	cbz	r3, 8010728 <_kill_r+0x1c>
 8010726:	6023      	str	r3, [r4, #0]
 8010728:	bd38      	pop	{r3, r4, r5, pc}
 801072a:	bf00      	nop
 801072c:	2000800c 	.word	0x2000800c

08010730 <_getpid_r>:
 8010730:	f7f1 bf5e 	b.w	80025f0 <_getpid>

08010734 <__swhatbuf_r>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	460c      	mov	r4, r1
 8010738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073c:	2900      	cmp	r1, #0
 801073e:	b096      	sub	sp, #88	; 0x58
 8010740:	4615      	mov	r5, r2
 8010742:	461e      	mov	r6, r3
 8010744:	da0d      	bge.n	8010762 <__swhatbuf_r+0x2e>
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	f013 0f80 	tst.w	r3, #128	; 0x80
 801074c:	f04f 0100 	mov.w	r1, #0
 8010750:	bf0c      	ite	eq
 8010752:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010756:	2340      	movne	r3, #64	; 0x40
 8010758:	2000      	movs	r0, #0
 801075a:	6031      	str	r1, [r6, #0]
 801075c:	602b      	str	r3, [r5, #0]
 801075e:	b016      	add	sp, #88	; 0x58
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	466a      	mov	r2, sp
 8010764:	f000 f848 	bl	80107f8 <_fstat_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	dbec      	blt.n	8010746 <__swhatbuf_r+0x12>
 801076c:	9901      	ldr	r1, [sp, #4]
 801076e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010772:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010776:	4259      	negs	r1, r3
 8010778:	4159      	adcs	r1, r3
 801077a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801077e:	e7eb      	b.n	8010758 <__swhatbuf_r+0x24>

08010780 <__smakebuf_r>:
 8010780:	898b      	ldrh	r3, [r1, #12]
 8010782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010784:	079d      	lsls	r5, r3, #30
 8010786:	4606      	mov	r6, r0
 8010788:	460c      	mov	r4, r1
 801078a:	d507      	bpl.n	801079c <__smakebuf_r+0x1c>
 801078c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	6123      	str	r3, [r4, #16]
 8010794:	2301      	movs	r3, #1
 8010796:	6163      	str	r3, [r4, #20]
 8010798:	b002      	add	sp, #8
 801079a:	bd70      	pop	{r4, r5, r6, pc}
 801079c:	ab01      	add	r3, sp, #4
 801079e:	466a      	mov	r2, sp
 80107a0:	f7ff ffc8 	bl	8010734 <__swhatbuf_r>
 80107a4:	9900      	ldr	r1, [sp, #0]
 80107a6:	4605      	mov	r5, r0
 80107a8:	4630      	mov	r0, r6
 80107aa:	f7fe fecb 	bl	800f544 <_malloc_r>
 80107ae:	b948      	cbnz	r0, 80107c4 <__smakebuf_r+0x44>
 80107b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b4:	059a      	lsls	r2, r3, #22
 80107b6:	d4ef      	bmi.n	8010798 <__smakebuf_r+0x18>
 80107b8:	f023 0303 	bic.w	r3, r3, #3
 80107bc:	f043 0302 	orr.w	r3, r3, #2
 80107c0:	81a3      	strh	r3, [r4, #12]
 80107c2:	e7e3      	b.n	801078c <__smakebuf_r+0xc>
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	6020      	str	r0, [r4, #0]
 80107c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107cc:	81a3      	strh	r3, [r4, #12]
 80107ce:	9b00      	ldr	r3, [sp, #0]
 80107d0:	6163      	str	r3, [r4, #20]
 80107d2:	9b01      	ldr	r3, [sp, #4]
 80107d4:	6120      	str	r0, [r4, #16]
 80107d6:	b15b      	cbz	r3, 80107f0 <__smakebuf_r+0x70>
 80107d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107dc:	4630      	mov	r0, r6
 80107de:	f000 f81d 	bl	801081c <_isatty_r>
 80107e2:	b128      	cbz	r0, 80107f0 <__smakebuf_r+0x70>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f023 0303 	bic.w	r3, r3, #3
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	431d      	orrs	r5, r3
 80107f4:	81a5      	strh	r5, [r4, #12]
 80107f6:	e7cf      	b.n	8010798 <__smakebuf_r+0x18>

080107f8 <_fstat_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	; (8010818 <_fstat_r+0x20>)
 80107fc:	2300      	movs	r3, #0
 80107fe:	4604      	mov	r4, r0
 8010800:	4608      	mov	r0, r1
 8010802:	4611      	mov	r1, r2
 8010804:	602b      	str	r3, [r5, #0]
 8010806:	f7f1 ff5a 	bl	80026be <_fstat>
 801080a:	1c43      	adds	r3, r0, #1
 801080c:	d102      	bne.n	8010814 <_fstat_r+0x1c>
 801080e:	682b      	ldr	r3, [r5, #0]
 8010810:	b103      	cbz	r3, 8010814 <_fstat_r+0x1c>
 8010812:	6023      	str	r3, [r4, #0]
 8010814:	bd38      	pop	{r3, r4, r5, pc}
 8010816:	bf00      	nop
 8010818:	2000800c 	.word	0x2000800c

0801081c <_isatty_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d06      	ldr	r5, [pc, #24]	; (8010838 <_isatty_r+0x1c>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	f7f1 ff59 	bl	80026de <_isatty>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_isatty_r+0x1a>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_isatty_r+0x1a>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	2000800c 	.word	0x2000800c
 801083c:	00000000 	.word	0x00000000

08010840 <log>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	ed2d 8b02 	vpush	{d8}
 8010846:	ec55 4b10 	vmov	r4, r5, d0
 801084a:	f000 f8bd 	bl	80109c8 <__ieee754_log>
 801084e:	4622      	mov	r2, r4
 8010850:	462b      	mov	r3, r5
 8010852:	4620      	mov	r0, r4
 8010854:	4629      	mov	r1, r5
 8010856:	eeb0 8a40 	vmov.f32	s16, s0
 801085a:	eef0 8a60 	vmov.f32	s17, s1
 801085e:	f7f0 f985 	bl	8000b6c <__aeabi_dcmpun>
 8010862:	b998      	cbnz	r0, 801088c <log+0x4c>
 8010864:	2200      	movs	r2, #0
 8010866:	2300      	movs	r3, #0
 8010868:	4620      	mov	r0, r4
 801086a:	4629      	mov	r1, r5
 801086c:	f7f0 f974 	bl	8000b58 <__aeabi_dcmpgt>
 8010870:	b960      	cbnz	r0, 801088c <log+0x4c>
 8010872:	2200      	movs	r2, #0
 8010874:	2300      	movs	r3, #0
 8010876:	4620      	mov	r0, r4
 8010878:	4629      	mov	r1, r5
 801087a:	f7f0 f945 	bl	8000b08 <__aeabi_dcmpeq>
 801087e:	b160      	cbz	r0, 801089a <log+0x5a>
 8010880:	f7fd ff36 	bl	800e6f0 <__errno>
 8010884:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80108b0 <log+0x70>
 8010888:	2322      	movs	r3, #34	; 0x22
 801088a:	6003      	str	r3, [r0, #0]
 801088c:	eeb0 0a48 	vmov.f32	s0, s16
 8010890:	eef0 0a68 	vmov.f32	s1, s17
 8010894:	ecbd 8b02 	vpop	{d8}
 8010898:	bd38      	pop	{r3, r4, r5, pc}
 801089a:	f7fd ff29 	bl	800e6f0 <__errno>
 801089e:	ecbd 8b02 	vpop	{d8}
 80108a2:	2321      	movs	r3, #33	; 0x21
 80108a4:	6003      	str	r3, [r0, #0]
 80108a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108aa:	4803      	ldr	r0, [pc, #12]	; (80108b8 <log+0x78>)
 80108ac:	f000 b884 	b.w	80109b8 <nan>
 80108b0:	00000000 	.word	0x00000000
 80108b4:	fff00000 	.word	0xfff00000
 80108b8:	080120b2 	.word	0x080120b2

080108bc <pow>:
 80108bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108be:	ed2d 8b02 	vpush	{d8}
 80108c2:	eeb0 8a40 	vmov.f32	s16, s0
 80108c6:	eef0 8a60 	vmov.f32	s17, s1
 80108ca:	ec55 4b11 	vmov	r4, r5, d1
 80108ce:	f000 fa37 	bl	8010d40 <__ieee754_pow>
 80108d2:	4622      	mov	r2, r4
 80108d4:	462b      	mov	r3, r5
 80108d6:	4620      	mov	r0, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	ec57 6b10 	vmov	r6, r7, d0
 80108de:	f7f0 f945 	bl	8000b6c <__aeabi_dcmpun>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d13b      	bne.n	801095e <pow+0xa2>
 80108e6:	ec51 0b18 	vmov	r0, r1, d8
 80108ea:	2200      	movs	r2, #0
 80108ec:	2300      	movs	r3, #0
 80108ee:	f7f0 f90b 	bl	8000b08 <__aeabi_dcmpeq>
 80108f2:	b1b8      	cbz	r0, 8010924 <pow+0x68>
 80108f4:	2200      	movs	r2, #0
 80108f6:	2300      	movs	r3, #0
 80108f8:	4620      	mov	r0, r4
 80108fa:	4629      	mov	r1, r5
 80108fc:	f7f0 f904 	bl	8000b08 <__aeabi_dcmpeq>
 8010900:	2800      	cmp	r0, #0
 8010902:	d146      	bne.n	8010992 <pow+0xd6>
 8010904:	ec45 4b10 	vmov	d0, r4, r5
 8010908:	f000 f848 	bl	801099c <finite>
 801090c:	b338      	cbz	r0, 801095e <pow+0xa2>
 801090e:	2200      	movs	r2, #0
 8010910:	2300      	movs	r3, #0
 8010912:	4620      	mov	r0, r4
 8010914:	4629      	mov	r1, r5
 8010916:	f7f0 f901 	bl	8000b1c <__aeabi_dcmplt>
 801091a:	b300      	cbz	r0, 801095e <pow+0xa2>
 801091c:	f7fd fee8 	bl	800e6f0 <__errno>
 8010920:	2322      	movs	r3, #34	; 0x22
 8010922:	e01b      	b.n	801095c <pow+0xa0>
 8010924:	ec47 6b10 	vmov	d0, r6, r7
 8010928:	f000 f838 	bl	801099c <finite>
 801092c:	b9e0      	cbnz	r0, 8010968 <pow+0xac>
 801092e:	eeb0 0a48 	vmov.f32	s0, s16
 8010932:	eef0 0a68 	vmov.f32	s1, s17
 8010936:	f000 f831 	bl	801099c <finite>
 801093a:	b1a8      	cbz	r0, 8010968 <pow+0xac>
 801093c:	ec45 4b10 	vmov	d0, r4, r5
 8010940:	f000 f82c 	bl	801099c <finite>
 8010944:	b180      	cbz	r0, 8010968 <pow+0xac>
 8010946:	4632      	mov	r2, r6
 8010948:	463b      	mov	r3, r7
 801094a:	4630      	mov	r0, r6
 801094c:	4639      	mov	r1, r7
 801094e:	f7f0 f90d 	bl	8000b6c <__aeabi_dcmpun>
 8010952:	2800      	cmp	r0, #0
 8010954:	d0e2      	beq.n	801091c <pow+0x60>
 8010956:	f7fd fecb 	bl	800e6f0 <__errno>
 801095a:	2321      	movs	r3, #33	; 0x21
 801095c:	6003      	str	r3, [r0, #0]
 801095e:	ecbd 8b02 	vpop	{d8}
 8010962:	ec47 6b10 	vmov	d0, r6, r7
 8010966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010968:	2200      	movs	r2, #0
 801096a:	2300      	movs	r3, #0
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7f0 f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 8010974:	2800      	cmp	r0, #0
 8010976:	d0f2      	beq.n	801095e <pow+0xa2>
 8010978:	eeb0 0a48 	vmov.f32	s0, s16
 801097c:	eef0 0a68 	vmov.f32	s1, s17
 8010980:	f000 f80c 	bl	801099c <finite>
 8010984:	2800      	cmp	r0, #0
 8010986:	d0ea      	beq.n	801095e <pow+0xa2>
 8010988:	ec45 4b10 	vmov	d0, r4, r5
 801098c:	f000 f806 	bl	801099c <finite>
 8010990:	e7c3      	b.n	801091a <pow+0x5e>
 8010992:	4f01      	ldr	r7, [pc, #4]	; (8010998 <pow+0xdc>)
 8010994:	2600      	movs	r6, #0
 8010996:	e7e2      	b.n	801095e <pow+0xa2>
 8010998:	3ff00000 	.word	0x3ff00000

0801099c <finite>:
 801099c:	b082      	sub	sp, #8
 801099e:	ed8d 0b00 	vstr	d0, [sp]
 80109a2:	9801      	ldr	r0, [sp, #4]
 80109a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80109a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80109ac:	0fc0      	lsrs	r0, r0, #31
 80109ae:	b002      	add	sp, #8
 80109b0:	4770      	bx	lr
 80109b2:	0000      	movs	r0, r0
 80109b4:	0000      	movs	r0, r0
	...

080109b8 <nan>:
 80109b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80109c0 <nan+0x8>
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	00000000 	.word	0x00000000
 80109c4:	7ff80000 	.word	0x7ff80000

080109c8 <__ieee754_log>:
 80109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109cc:	ec51 0b10 	vmov	r0, r1, d0
 80109d0:	ed2d 8b04 	vpush	{d8-d9}
 80109d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80109d8:	b083      	sub	sp, #12
 80109da:	460d      	mov	r5, r1
 80109dc:	da29      	bge.n	8010a32 <__ieee754_log+0x6a>
 80109de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109e2:	4303      	orrs	r3, r0
 80109e4:	ee10 2a10 	vmov	r2, s0
 80109e8:	d10c      	bne.n	8010a04 <__ieee754_log+0x3c>
 80109ea:	49cf      	ldr	r1, [pc, #828]	; (8010d28 <__ieee754_log+0x360>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	2300      	movs	r3, #0
 80109f0:	2000      	movs	r0, #0
 80109f2:	f7ef ff4b 	bl	800088c <__aeabi_ddiv>
 80109f6:	ec41 0b10 	vmov	d0, r0, r1
 80109fa:	b003      	add	sp, #12
 80109fc:	ecbd 8b04 	vpop	{d8-d9}
 8010a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a04:	2900      	cmp	r1, #0
 8010a06:	da05      	bge.n	8010a14 <__ieee754_log+0x4c>
 8010a08:	460b      	mov	r3, r1
 8010a0a:	f7ef fc5d 	bl	80002c8 <__aeabi_dsub>
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2300      	movs	r3, #0
 8010a12:	e7ee      	b.n	80109f2 <__ieee754_log+0x2a>
 8010a14:	4bc5      	ldr	r3, [pc, #788]	; (8010d2c <__ieee754_log+0x364>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	f7ef fe0e 	bl	8000638 <__aeabi_dmul>
 8010a1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010a20:	460d      	mov	r5, r1
 8010a22:	4ac3      	ldr	r2, [pc, #780]	; (8010d30 <__ieee754_log+0x368>)
 8010a24:	4295      	cmp	r5, r2
 8010a26:	dd06      	ble.n	8010a36 <__ieee754_log+0x6e>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	f7ef fc4e 	bl	80002cc <__adddf3>
 8010a30:	e7e1      	b.n	80109f6 <__ieee754_log+0x2e>
 8010a32:	2300      	movs	r3, #0
 8010a34:	e7f5      	b.n	8010a22 <__ieee754_log+0x5a>
 8010a36:	152c      	asrs	r4, r5, #20
 8010a38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010a3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010a40:	441c      	add	r4, r3
 8010a42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010a46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010a52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010a56:	ea42 0105 	orr.w	r1, r2, r5
 8010a5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010a5e:	2200      	movs	r2, #0
 8010a60:	4bb4      	ldr	r3, [pc, #720]	; (8010d34 <__ieee754_log+0x36c>)
 8010a62:	f7ef fc31 	bl	80002c8 <__aeabi_dsub>
 8010a66:	1cab      	adds	r3, r5, #2
 8010a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	4682      	mov	sl, r0
 8010a70:	468b      	mov	fp, r1
 8010a72:	f04f 0200 	mov.w	r2, #0
 8010a76:	dc53      	bgt.n	8010b20 <__ieee754_log+0x158>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	f7f0 f845 	bl	8000b08 <__aeabi_dcmpeq>
 8010a7e:	b1d0      	cbz	r0, 8010ab6 <__ieee754_log+0xee>
 8010a80:	2c00      	cmp	r4, #0
 8010a82:	f000 8122 	beq.w	8010cca <__ieee754_log+0x302>
 8010a86:	4620      	mov	r0, r4
 8010a88:	f7ef fd6c 	bl	8000564 <__aeabi_i2d>
 8010a8c:	a390      	add	r3, pc, #576	; (adr r3, 8010cd0 <__ieee754_log+0x308>)
 8010a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a92:	4606      	mov	r6, r0
 8010a94:	460f      	mov	r7, r1
 8010a96:	f7ef fdcf 	bl	8000638 <__aeabi_dmul>
 8010a9a:	a38f      	add	r3, pc, #572	; (adr r3, 8010cd8 <__ieee754_log+0x310>)
 8010a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	460d      	mov	r5, r1
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	f7ef fdc6 	bl	8000638 <__aeabi_dmul>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	e7ba      	b.n	8010a2c <__ieee754_log+0x64>
 8010ab6:	a38a      	add	r3, pc, #552	; (adr r3, 8010ce0 <__ieee754_log+0x318>)
 8010ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abc:	4650      	mov	r0, sl
 8010abe:	4659      	mov	r1, fp
 8010ac0:	f7ef fdba 	bl	8000638 <__aeabi_dmul>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	2000      	movs	r0, #0
 8010aca:	499b      	ldr	r1, [pc, #620]	; (8010d38 <__ieee754_log+0x370>)
 8010acc:	f7ef fbfc 	bl	80002c8 <__aeabi_dsub>
 8010ad0:	4652      	mov	r2, sl
 8010ad2:	4606      	mov	r6, r0
 8010ad4:	460f      	mov	r7, r1
 8010ad6:	465b      	mov	r3, fp
 8010ad8:	4650      	mov	r0, sl
 8010ada:	4659      	mov	r1, fp
 8010adc:	f7ef fdac 	bl	8000638 <__aeabi_dmul>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	4630      	mov	r0, r6
 8010ae6:	4639      	mov	r1, r7
 8010ae8:	f7ef fda6 	bl	8000638 <__aeabi_dmul>
 8010aec:	4606      	mov	r6, r0
 8010aee:	460f      	mov	r7, r1
 8010af0:	b914      	cbnz	r4, 8010af8 <__ieee754_log+0x130>
 8010af2:	4632      	mov	r2, r6
 8010af4:	463b      	mov	r3, r7
 8010af6:	e0a2      	b.n	8010c3e <__ieee754_log+0x276>
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7ef fd33 	bl	8000564 <__aeabi_i2d>
 8010afe:	a374      	add	r3, pc, #464	; (adr r3, 8010cd0 <__ieee754_log+0x308>)
 8010b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b04:	4680      	mov	r8, r0
 8010b06:	4689      	mov	r9, r1
 8010b08:	f7ef fd96 	bl	8000638 <__aeabi_dmul>
 8010b0c:	a372      	add	r3, pc, #456	; (adr r3, 8010cd8 <__ieee754_log+0x310>)
 8010b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b12:	4604      	mov	r4, r0
 8010b14:	460d      	mov	r5, r1
 8010b16:	4640      	mov	r0, r8
 8010b18:	4649      	mov	r1, r9
 8010b1a:	f7ef fd8d 	bl	8000638 <__aeabi_dmul>
 8010b1e:	e0a7      	b.n	8010c70 <__ieee754_log+0x2a8>
 8010b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b24:	f7ef fbd2 	bl	80002cc <__adddf3>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	4650      	mov	r0, sl
 8010b2e:	4659      	mov	r1, fp
 8010b30:	f7ef feac 	bl	800088c <__aeabi_ddiv>
 8010b34:	ec41 0b18 	vmov	d8, r0, r1
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7ef fd13 	bl	8000564 <__aeabi_i2d>
 8010b3e:	ec53 2b18 	vmov	r2, r3, d8
 8010b42:	ec41 0b19 	vmov	d9, r0, r1
 8010b46:	ec51 0b18 	vmov	r0, r1, d8
 8010b4a:	f7ef fd75 	bl	8000638 <__aeabi_dmul>
 8010b4e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010b52:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010b56:	9301      	str	r3, [sp, #4]
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4680      	mov	r8, r0
 8010b5e:	4689      	mov	r9, r1
 8010b60:	f7ef fd6a 	bl	8000638 <__aeabi_dmul>
 8010b64:	a360      	add	r3, pc, #384	; (adr r3, 8010ce8 <__ieee754_log+0x320>)
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460f      	mov	r7, r1
 8010b6e:	f7ef fd63 	bl	8000638 <__aeabi_dmul>
 8010b72:	a35f      	add	r3, pc, #380	; (adr r3, 8010cf0 <__ieee754_log+0x328>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	f7ef fba8 	bl	80002cc <__adddf3>
 8010b7c:	4632      	mov	r2, r6
 8010b7e:	463b      	mov	r3, r7
 8010b80:	f7ef fd5a 	bl	8000638 <__aeabi_dmul>
 8010b84:	a35c      	add	r3, pc, #368	; (adr r3, 8010cf8 <__ieee754_log+0x330>)
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fb9f 	bl	80002cc <__adddf3>
 8010b8e:	4632      	mov	r2, r6
 8010b90:	463b      	mov	r3, r7
 8010b92:	f7ef fd51 	bl	8000638 <__aeabi_dmul>
 8010b96:	a35a      	add	r3, pc, #360	; (adr r3, 8010d00 <__ieee754_log+0x338>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	f7ef fb96 	bl	80002cc <__adddf3>
 8010ba0:	4642      	mov	r2, r8
 8010ba2:	464b      	mov	r3, r9
 8010ba4:	f7ef fd48 	bl	8000638 <__aeabi_dmul>
 8010ba8:	a357      	add	r3, pc, #348	; (adr r3, 8010d08 <__ieee754_log+0x340>)
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	4680      	mov	r8, r0
 8010bb0:	4689      	mov	r9, r1
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	4639      	mov	r1, r7
 8010bb6:	f7ef fd3f 	bl	8000638 <__aeabi_dmul>
 8010bba:	a355      	add	r3, pc, #340	; (adr r3, 8010d10 <__ieee754_log+0x348>)
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	f7ef fb84 	bl	80002cc <__adddf3>
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	463b      	mov	r3, r7
 8010bc8:	f7ef fd36 	bl	8000638 <__aeabi_dmul>
 8010bcc:	a352      	add	r3, pc, #328	; (adr r3, 8010d18 <__ieee754_log+0x350>)
 8010bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd2:	f7ef fb7b 	bl	80002cc <__adddf3>
 8010bd6:	4632      	mov	r2, r6
 8010bd8:	463b      	mov	r3, r7
 8010bda:	f7ef fd2d 	bl	8000638 <__aeabi_dmul>
 8010bde:	460b      	mov	r3, r1
 8010be0:	4602      	mov	r2, r0
 8010be2:	4649      	mov	r1, r9
 8010be4:	4640      	mov	r0, r8
 8010be6:	f7ef fb71 	bl	80002cc <__adddf3>
 8010bea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010bee:	9b01      	ldr	r3, [sp, #4]
 8010bf0:	3551      	adds	r5, #81	; 0x51
 8010bf2:	431d      	orrs	r5, r3
 8010bf4:	2d00      	cmp	r5, #0
 8010bf6:	4680      	mov	r8, r0
 8010bf8:	4689      	mov	r9, r1
 8010bfa:	dd48      	ble.n	8010c8e <__ieee754_log+0x2c6>
 8010bfc:	4b4e      	ldr	r3, [pc, #312]	; (8010d38 <__ieee754_log+0x370>)
 8010bfe:	2200      	movs	r2, #0
 8010c00:	4650      	mov	r0, sl
 8010c02:	4659      	mov	r1, fp
 8010c04:	f7ef fd18 	bl	8000638 <__aeabi_dmul>
 8010c08:	4652      	mov	r2, sl
 8010c0a:	465b      	mov	r3, fp
 8010c0c:	f7ef fd14 	bl	8000638 <__aeabi_dmul>
 8010c10:	4602      	mov	r2, r0
 8010c12:	460b      	mov	r3, r1
 8010c14:	4606      	mov	r6, r0
 8010c16:	460f      	mov	r7, r1
 8010c18:	4640      	mov	r0, r8
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	f7ef fb56 	bl	80002cc <__adddf3>
 8010c20:	ec53 2b18 	vmov	r2, r3, d8
 8010c24:	f7ef fd08 	bl	8000638 <__aeabi_dmul>
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	b964      	cbnz	r4, 8010c48 <__ieee754_log+0x280>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	4630      	mov	r0, r6
 8010c34:	4639      	mov	r1, r7
 8010c36:	f7ef fb47 	bl	80002c8 <__aeabi_dsub>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	4650      	mov	r0, sl
 8010c40:	4659      	mov	r1, fp
 8010c42:	f7ef fb41 	bl	80002c8 <__aeabi_dsub>
 8010c46:	e6d6      	b.n	80109f6 <__ieee754_log+0x2e>
 8010c48:	a321      	add	r3, pc, #132	; (adr r3, 8010cd0 <__ieee754_log+0x308>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	ec51 0b19 	vmov	r0, r1, d9
 8010c52:	f7ef fcf1 	bl	8000638 <__aeabi_dmul>
 8010c56:	a320      	add	r3, pc, #128	; (adr r3, 8010cd8 <__ieee754_log+0x310>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	460d      	mov	r5, r1
 8010c60:	ec51 0b19 	vmov	r0, r1, d9
 8010c64:	f7ef fce8 	bl	8000638 <__aeabi_dmul>
 8010c68:	4642      	mov	r2, r8
 8010c6a:	464b      	mov	r3, r9
 8010c6c:	f7ef fb2e 	bl	80002cc <__adddf3>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4630      	mov	r0, r6
 8010c76:	4639      	mov	r1, r7
 8010c78:	f7ef fb26 	bl	80002c8 <__aeabi_dsub>
 8010c7c:	4652      	mov	r2, sl
 8010c7e:	465b      	mov	r3, fp
 8010c80:	f7ef fb22 	bl	80002c8 <__aeabi_dsub>
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	4620      	mov	r0, r4
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	e7d9      	b.n	8010c42 <__ieee754_log+0x27a>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	460b      	mov	r3, r1
 8010c92:	4650      	mov	r0, sl
 8010c94:	4659      	mov	r1, fp
 8010c96:	f7ef fb17 	bl	80002c8 <__aeabi_dsub>
 8010c9a:	ec53 2b18 	vmov	r2, r3, d8
 8010c9e:	f7ef fccb 	bl	8000638 <__aeabi_dmul>
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	460f      	mov	r7, r1
 8010ca6:	2c00      	cmp	r4, #0
 8010ca8:	f43f af23 	beq.w	8010af2 <__ieee754_log+0x12a>
 8010cac:	a308      	add	r3, pc, #32	; (adr r3, 8010cd0 <__ieee754_log+0x308>)
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	ec51 0b19 	vmov	r0, r1, d9
 8010cb6:	f7ef fcbf 	bl	8000638 <__aeabi_dmul>
 8010cba:	a307      	add	r3, pc, #28	; (adr r3, 8010cd8 <__ieee754_log+0x310>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	460d      	mov	r5, r1
 8010cc4:	ec51 0b19 	vmov	r0, r1, d9
 8010cc8:	e727      	b.n	8010b1a <__ieee754_log+0x152>
 8010cca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010d20 <__ieee754_log+0x358>
 8010cce:	e694      	b.n	80109fa <__ieee754_log+0x32>
 8010cd0:	fee00000 	.word	0xfee00000
 8010cd4:	3fe62e42 	.word	0x3fe62e42
 8010cd8:	35793c76 	.word	0x35793c76
 8010cdc:	3dea39ef 	.word	0x3dea39ef
 8010ce0:	55555555 	.word	0x55555555
 8010ce4:	3fd55555 	.word	0x3fd55555
 8010ce8:	df3e5244 	.word	0xdf3e5244
 8010cec:	3fc2f112 	.word	0x3fc2f112
 8010cf0:	96cb03de 	.word	0x96cb03de
 8010cf4:	3fc74664 	.word	0x3fc74664
 8010cf8:	94229359 	.word	0x94229359
 8010cfc:	3fd24924 	.word	0x3fd24924
 8010d00:	55555593 	.word	0x55555593
 8010d04:	3fe55555 	.word	0x3fe55555
 8010d08:	d078c69f 	.word	0xd078c69f
 8010d0c:	3fc39a09 	.word	0x3fc39a09
 8010d10:	1d8e78af 	.word	0x1d8e78af
 8010d14:	3fcc71c5 	.word	0x3fcc71c5
 8010d18:	9997fa04 	.word	0x9997fa04
 8010d1c:	3fd99999 	.word	0x3fd99999
	...
 8010d28:	c3500000 	.word	0xc3500000
 8010d2c:	43500000 	.word	0x43500000
 8010d30:	7fefffff 	.word	0x7fefffff
 8010d34:	3ff00000 	.word	0x3ff00000
 8010d38:	3fe00000 	.word	0x3fe00000
 8010d3c:	00000000 	.word	0x00000000

08010d40 <__ieee754_pow>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	ed2d 8b06 	vpush	{d8-d10}
 8010d48:	b089      	sub	sp, #36	; 0x24
 8010d4a:	ed8d 1b00 	vstr	d1, [sp]
 8010d4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010d52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010d56:	ea58 0102 	orrs.w	r1, r8, r2
 8010d5a:	ec57 6b10 	vmov	r6, r7, d0
 8010d5e:	d115      	bne.n	8010d8c <__ieee754_pow+0x4c>
 8010d60:	19b3      	adds	r3, r6, r6
 8010d62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010d66:	4152      	adcs	r2, r2
 8010d68:	4299      	cmp	r1, r3
 8010d6a:	4b89      	ldr	r3, [pc, #548]	; (8010f90 <__ieee754_pow+0x250>)
 8010d6c:	4193      	sbcs	r3, r2
 8010d6e:	f080 84d1 	bcs.w	8011714 <__ieee754_pow+0x9d4>
 8010d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d76:	4630      	mov	r0, r6
 8010d78:	4639      	mov	r1, r7
 8010d7a:	f7ef faa7 	bl	80002cc <__adddf3>
 8010d7e:	ec41 0b10 	vmov	d0, r0, r1
 8010d82:	b009      	add	sp, #36	; 0x24
 8010d84:	ecbd 8b06 	vpop	{d8-d10}
 8010d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8c:	4b81      	ldr	r3, [pc, #516]	; (8010f94 <__ieee754_pow+0x254>)
 8010d8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010d92:	429c      	cmp	r4, r3
 8010d94:	ee10 aa10 	vmov	sl, s0
 8010d98:	463d      	mov	r5, r7
 8010d9a:	dc06      	bgt.n	8010daa <__ieee754_pow+0x6a>
 8010d9c:	d101      	bne.n	8010da2 <__ieee754_pow+0x62>
 8010d9e:	2e00      	cmp	r6, #0
 8010da0:	d1e7      	bne.n	8010d72 <__ieee754_pow+0x32>
 8010da2:	4598      	cmp	r8, r3
 8010da4:	dc01      	bgt.n	8010daa <__ieee754_pow+0x6a>
 8010da6:	d10f      	bne.n	8010dc8 <__ieee754_pow+0x88>
 8010da8:	b172      	cbz	r2, 8010dc8 <__ieee754_pow+0x88>
 8010daa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010dae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010db2:	ea55 050a 	orrs.w	r5, r5, sl
 8010db6:	d1dc      	bne.n	8010d72 <__ieee754_pow+0x32>
 8010db8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010dbc:	18db      	adds	r3, r3, r3
 8010dbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010dc2:	4152      	adcs	r2, r2
 8010dc4:	429d      	cmp	r5, r3
 8010dc6:	e7d0      	b.n	8010d6a <__ieee754_pow+0x2a>
 8010dc8:	2d00      	cmp	r5, #0
 8010dca:	da3b      	bge.n	8010e44 <__ieee754_pow+0x104>
 8010dcc:	4b72      	ldr	r3, [pc, #456]	; (8010f98 <__ieee754_pow+0x258>)
 8010dce:	4598      	cmp	r8, r3
 8010dd0:	dc51      	bgt.n	8010e76 <__ieee754_pow+0x136>
 8010dd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010dd6:	4598      	cmp	r8, r3
 8010dd8:	f340 84ab 	ble.w	8011732 <__ieee754_pow+0x9f2>
 8010ddc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010de0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010de4:	2b14      	cmp	r3, #20
 8010de6:	dd0f      	ble.n	8010e08 <__ieee754_pow+0xc8>
 8010de8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010dec:	fa22 f103 	lsr.w	r1, r2, r3
 8010df0:	fa01 f303 	lsl.w	r3, r1, r3
 8010df4:	4293      	cmp	r3, r2
 8010df6:	f040 849c 	bne.w	8011732 <__ieee754_pow+0x9f2>
 8010dfa:	f001 0101 	and.w	r1, r1, #1
 8010dfe:	f1c1 0302 	rsb	r3, r1, #2
 8010e02:	9304      	str	r3, [sp, #16]
 8010e04:	b182      	cbz	r2, 8010e28 <__ieee754_pow+0xe8>
 8010e06:	e05f      	b.n	8010ec8 <__ieee754_pow+0x188>
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	d15b      	bne.n	8010ec4 <__ieee754_pow+0x184>
 8010e0c:	f1c3 0314 	rsb	r3, r3, #20
 8010e10:	fa48 f103 	asr.w	r1, r8, r3
 8010e14:	fa01 f303 	lsl.w	r3, r1, r3
 8010e18:	4543      	cmp	r3, r8
 8010e1a:	f040 8487 	bne.w	801172c <__ieee754_pow+0x9ec>
 8010e1e:	f001 0101 	and.w	r1, r1, #1
 8010e22:	f1c1 0302 	rsb	r3, r1, #2
 8010e26:	9304      	str	r3, [sp, #16]
 8010e28:	4b5c      	ldr	r3, [pc, #368]	; (8010f9c <__ieee754_pow+0x25c>)
 8010e2a:	4598      	cmp	r8, r3
 8010e2c:	d132      	bne.n	8010e94 <__ieee754_pow+0x154>
 8010e2e:	f1b9 0f00 	cmp.w	r9, #0
 8010e32:	f280 8477 	bge.w	8011724 <__ieee754_pow+0x9e4>
 8010e36:	4959      	ldr	r1, [pc, #356]	; (8010f9c <__ieee754_pow+0x25c>)
 8010e38:	4632      	mov	r2, r6
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f7ef fd25 	bl	800088c <__aeabi_ddiv>
 8010e42:	e79c      	b.n	8010d7e <__ieee754_pow+0x3e>
 8010e44:	2300      	movs	r3, #0
 8010e46:	9304      	str	r3, [sp, #16]
 8010e48:	2a00      	cmp	r2, #0
 8010e4a:	d13d      	bne.n	8010ec8 <__ieee754_pow+0x188>
 8010e4c:	4b51      	ldr	r3, [pc, #324]	; (8010f94 <__ieee754_pow+0x254>)
 8010e4e:	4598      	cmp	r8, r3
 8010e50:	d1ea      	bne.n	8010e28 <__ieee754_pow+0xe8>
 8010e52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010e56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010e5a:	ea53 030a 	orrs.w	r3, r3, sl
 8010e5e:	f000 8459 	beq.w	8011714 <__ieee754_pow+0x9d4>
 8010e62:	4b4f      	ldr	r3, [pc, #316]	; (8010fa0 <__ieee754_pow+0x260>)
 8010e64:	429c      	cmp	r4, r3
 8010e66:	dd08      	ble.n	8010e7a <__ieee754_pow+0x13a>
 8010e68:	f1b9 0f00 	cmp.w	r9, #0
 8010e6c:	f2c0 8456 	blt.w	801171c <__ieee754_pow+0x9dc>
 8010e70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e74:	e783      	b.n	8010d7e <__ieee754_pow+0x3e>
 8010e76:	2302      	movs	r3, #2
 8010e78:	e7e5      	b.n	8010e46 <__ieee754_pow+0x106>
 8010e7a:	f1b9 0f00 	cmp.w	r9, #0
 8010e7e:	f04f 0000 	mov.w	r0, #0
 8010e82:	f04f 0100 	mov.w	r1, #0
 8010e86:	f6bf af7a 	bge.w	8010d7e <__ieee754_pow+0x3e>
 8010e8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010e8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e92:	e774      	b.n	8010d7e <__ieee754_pow+0x3e>
 8010e94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010e98:	d106      	bne.n	8010ea8 <__ieee754_pow+0x168>
 8010e9a:	4632      	mov	r2, r6
 8010e9c:	463b      	mov	r3, r7
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7ef fbc9 	bl	8000638 <__aeabi_dmul>
 8010ea6:	e76a      	b.n	8010d7e <__ieee754_pow+0x3e>
 8010ea8:	4b3e      	ldr	r3, [pc, #248]	; (8010fa4 <__ieee754_pow+0x264>)
 8010eaa:	4599      	cmp	r9, r3
 8010eac:	d10c      	bne.n	8010ec8 <__ieee754_pow+0x188>
 8010eae:	2d00      	cmp	r5, #0
 8010eb0:	db0a      	blt.n	8010ec8 <__ieee754_pow+0x188>
 8010eb2:	ec47 6b10 	vmov	d0, r6, r7
 8010eb6:	b009      	add	sp, #36	; 0x24
 8010eb8:	ecbd 8b06 	vpop	{d8-d10}
 8010ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec0:	f000 bd20 	b.w	8011904 <__ieee754_sqrt>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9304      	str	r3, [sp, #16]
 8010ec8:	ec47 6b10 	vmov	d0, r6, r7
 8010ecc:	f000 fc62 	bl	8011794 <fabs>
 8010ed0:	ec51 0b10 	vmov	r0, r1, d0
 8010ed4:	f1ba 0f00 	cmp.w	sl, #0
 8010ed8:	d129      	bne.n	8010f2e <__ieee754_pow+0x1ee>
 8010eda:	b124      	cbz	r4, 8010ee6 <__ieee754_pow+0x1a6>
 8010edc:	4b2f      	ldr	r3, [pc, #188]	; (8010f9c <__ieee754_pow+0x25c>)
 8010ede:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d123      	bne.n	8010f2e <__ieee754_pow+0x1ee>
 8010ee6:	f1b9 0f00 	cmp.w	r9, #0
 8010eea:	da05      	bge.n	8010ef8 <__ieee754_pow+0x1b8>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	492a      	ldr	r1, [pc, #168]	; (8010f9c <__ieee754_pow+0x25c>)
 8010ef4:	f7ef fcca 	bl	800088c <__aeabi_ddiv>
 8010ef8:	2d00      	cmp	r5, #0
 8010efa:	f6bf af40 	bge.w	8010d7e <__ieee754_pow+0x3e>
 8010efe:	9b04      	ldr	r3, [sp, #16]
 8010f00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010f04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f08:	431c      	orrs	r4, r3
 8010f0a:	d108      	bne.n	8010f1e <__ieee754_pow+0x1de>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	460b      	mov	r3, r1
 8010f10:	4610      	mov	r0, r2
 8010f12:	4619      	mov	r1, r3
 8010f14:	f7ef f9d8 	bl	80002c8 <__aeabi_dsub>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	e78f      	b.n	8010e3e <__ieee754_pow+0xfe>
 8010f1e:	9b04      	ldr	r3, [sp, #16]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	f47f af2c 	bne.w	8010d7e <__ieee754_pow+0x3e>
 8010f26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	e727      	b.n	8010d7e <__ieee754_pow+0x3e>
 8010f2e:	0feb      	lsrs	r3, r5, #31
 8010f30:	3b01      	subs	r3, #1
 8010f32:	9306      	str	r3, [sp, #24]
 8010f34:	9a06      	ldr	r2, [sp, #24]
 8010f36:	9b04      	ldr	r3, [sp, #16]
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	d102      	bne.n	8010f42 <__ieee754_pow+0x202>
 8010f3c:	4632      	mov	r2, r6
 8010f3e:	463b      	mov	r3, r7
 8010f40:	e7e6      	b.n	8010f10 <__ieee754_pow+0x1d0>
 8010f42:	4b19      	ldr	r3, [pc, #100]	; (8010fa8 <__ieee754_pow+0x268>)
 8010f44:	4598      	cmp	r8, r3
 8010f46:	f340 80fb 	ble.w	8011140 <__ieee754_pow+0x400>
 8010f4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010f4e:	4598      	cmp	r8, r3
 8010f50:	4b13      	ldr	r3, [pc, #76]	; (8010fa0 <__ieee754_pow+0x260>)
 8010f52:	dd0c      	ble.n	8010f6e <__ieee754_pow+0x22e>
 8010f54:	429c      	cmp	r4, r3
 8010f56:	dc0f      	bgt.n	8010f78 <__ieee754_pow+0x238>
 8010f58:	f1b9 0f00 	cmp.w	r9, #0
 8010f5c:	da0f      	bge.n	8010f7e <__ieee754_pow+0x23e>
 8010f5e:	2000      	movs	r0, #0
 8010f60:	b009      	add	sp, #36	; 0x24
 8010f62:	ecbd 8b06 	vpop	{d8-d10}
 8010f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6a:	f000 bcc2 	b.w	80118f2 <__math_oflow>
 8010f6e:	429c      	cmp	r4, r3
 8010f70:	dbf2      	blt.n	8010f58 <__ieee754_pow+0x218>
 8010f72:	4b0a      	ldr	r3, [pc, #40]	; (8010f9c <__ieee754_pow+0x25c>)
 8010f74:	429c      	cmp	r4, r3
 8010f76:	dd19      	ble.n	8010fac <__ieee754_pow+0x26c>
 8010f78:	f1b9 0f00 	cmp.w	r9, #0
 8010f7c:	dcef      	bgt.n	8010f5e <__ieee754_pow+0x21e>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	b009      	add	sp, #36	; 0x24
 8010f82:	ecbd 8b06 	vpop	{d8-d10}
 8010f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8a:	f000 bca9 	b.w	80118e0 <__math_uflow>
 8010f8e:	bf00      	nop
 8010f90:	fff00000 	.word	0xfff00000
 8010f94:	7ff00000 	.word	0x7ff00000
 8010f98:	433fffff 	.word	0x433fffff
 8010f9c:	3ff00000 	.word	0x3ff00000
 8010fa0:	3fefffff 	.word	0x3fefffff
 8010fa4:	3fe00000 	.word	0x3fe00000
 8010fa8:	41e00000 	.word	0x41e00000
 8010fac:	4b60      	ldr	r3, [pc, #384]	; (8011130 <__ieee754_pow+0x3f0>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f7ef f98a 	bl	80002c8 <__aeabi_dsub>
 8010fb4:	a354      	add	r3, pc, #336	; (adr r3, 8011108 <__ieee754_pow+0x3c8>)
 8010fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fba:	4604      	mov	r4, r0
 8010fbc:	460d      	mov	r5, r1
 8010fbe:	f7ef fb3b 	bl	8000638 <__aeabi_dmul>
 8010fc2:	a353      	add	r3, pc, #332	; (adr r3, 8011110 <__ieee754_pow+0x3d0>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	4606      	mov	r6, r0
 8010fca:	460f      	mov	r7, r1
 8010fcc:	4620      	mov	r0, r4
 8010fce:	4629      	mov	r1, r5
 8010fd0:	f7ef fb32 	bl	8000638 <__aeabi_dmul>
 8010fd4:	4b57      	ldr	r3, [pc, #348]	; (8011134 <__ieee754_pow+0x3f4>)
 8010fd6:	4682      	mov	sl, r0
 8010fd8:	468b      	mov	fp, r1
 8010fda:	2200      	movs	r2, #0
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4629      	mov	r1, r5
 8010fe0:	f7ef fb2a 	bl	8000638 <__aeabi_dmul>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	a14b      	add	r1, pc, #300	; (adr r1, 8011118 <__ieee754_pow+0x3d8>)
 8010fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fee:	f7ef f96b 	bl	80002c8 <__aeabi_dsub>
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	f7ef fb1f 	bl	8000638 <__aeabi_dmul>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	2000      	movs	r0, #0
 8011000:	494d      	ldr	r1, [pc, #308]	; (8011138 <__ieee754_pow+0x3f8>)
 8011002:	f7ef f961 	bl	80002c8 <__aeabi_dsub>
 8011006:	4622      	mov	r2, r4
 8011008:	4680      	mov	r8, r0
 801100a:	4689      	mov	r9, r1
 801100c:	462b      	mov	r3, r5
 801100e:	4620      	mov	r0, r4
 8011010:	4629      	mov	r1, r5
 8011012:	f7ef fb11 	bl	8000638 <__aeabi_dmul>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	4640      	mov	r0, r8
 801101c:	4649      	mov	r1, r9
 801101e:	f7ef fb0b 	bl	8000638 <__aeabi_dmul>
 8011022:	a33f      	add	r3, pc, #252	; (adr r3, 8011120 <__ieee754_pow+0x3e0>)
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	f7ef fb06 	bl	8000638 <__aeabi_dmul>
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	4650      	mov	r0, sl
 8011032:	4659      	mov	r1, fp
 8011034:	f7ef f948 	bl	80002c8 <__aeabi_dsub>
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	4680      	mov	r8, r0
 801103e:	4689      	mov	r9, r1
 8011040:	4630      	mov	r0, r6
 8011042:	4639      	mov	r1, r7
 8011044:	f7ef f942 	bl	80002cc <__adddf3>
 8011048:	2000      	movs	r0, #0
 801104a:	4632      	mov	r2, r6
 801104c:	463b      	mov	r3, r7
 801104e:	4604      	mov	r4, r0
 8011050:	460d      	mov	r5, r1
 8011052:	f7ef f939 	bl	80002c8 <__aeabi_dsub>
 8011056:	4602      	mov	r2, r0
 8011058:	460b      	mov	r3, r1
 801105a:	4640      	mov	r0, r8
 801105c:	4649      	mov	r1, r9
 801105e:	f7ef f933 	bl	80002c8 <__aeabi_dsub>
 8011062:	9b04      	ldr	r3, [sp, #16]
 8011064:	9a06      	ldr	r2, [sp, #24]
 8011066:	3b01      	subs	r3, #1
 8011068:	4313      	orrs	r3, r2
 801106a:	4682      	mov	sl, r0
 801106c:	468b      	mov	fp, r1
 801106e:	f040 81e7 	bne.w	8011440 <__ieee754_pow+0x700>
 8011072:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011128 <__ieee754_pow+0x3e8>
 8011076:	eeb0 8a47 	vmov.f32	s16, s14
 801107a:	eef0 8a67 	vmov.f32	s17, s15
 801107e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011082:	2600      	movs	r6, #0
 8011084:	4632      	mov	r2, r6
 8011086:	463b      	mov	r3, r7
 8011088:	e9dd 0100 	ldrd	r0, r1, [sp]
 801108c:	f7ef f91c 	bl	80002c8 <__aeabi_dsub>
 8011090:	4622      	mov	r2, r4
 8011092:	462b      	mov	r3, r5
 8011094:	f7ef fad0 	bl	8000638 <__aeabi_dmul>
 8011098:	e9dd 2300 	ldrd	r2, r3, [sp]
 801109c:	4680      	mov	r8, r0
 801109e:	4689      	mov	r9, r1
 80110a0:	4650      	mov	r0, sl
 80110a2:	4659      	mov	r1, fp
 80110a4:	f7ef fac8 	bl	8000638 <__aeabi_dmul>
 80110a8:	4602      	mov	r2, r0
 80110aa:	460b      	mov	r3, r1
 80110ac:	4640      	mov	r0, r8
 80110ae:	4649      	mov	r1, r9
 80110b0:	f7ef f90c 	bl	80002cc <__adddf3>
 80110b4:	4632      	mov	r2, r6
 80110b6:	463b      	mov	r3, r7
 80110b8:	4680      	mov	r8, r0
 80110ba:	4689      	mov	r9, r1
 80110bc:	4620      	mov	r0, r4
 80110be:	4629      	mov	r1, r5
 80110c0:	f7ef faba 	bl	8000638 <__aeabi_dmul>
 80110c4:	460b      	mov	r3, r1
 80110c6:	4604      	mov	r4, r0
 80110c8:	460d      	mov	r5, r1
 80110ca:	4602      	mov	r2, r0
 80110cc:	4649      	mov	r1, r9
 80110ce:	4640      	mov	r0, r8
 80110d0:	f7ef f8fc 	bl	80002cc <__adddf3>
 80110d4:	4b19      	ldr	r3, [pc, #100]	; (801113c <__ieee754_pow+0x3fc>)
 80110d6:	4299      	cmp	r1, r3
 80110d8:	ec45 4b19 	vmov	d9, r4, r5
 80110dc:	4606      	mov	r6, r0
 80110de:	460f      	mov	r7, r1
 80110e0:	468b      	mov	fp, r1
 80110e2:	f340 82f0 	ble.w	80116c6 <__ieee754_pow+0x986>
 80110e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80110ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80110ee:	4303      	orrs	r3, r0
 80110f0:	f000 81e4 	beq.w	80114bc <__ieee754_pow+0x77c>
 80110f4:	ec51 0b18 	vmov	r0, r1, d8
 80110f8:	2200      	movs	r2, #0
 80110fa:	2300      	movs	r3, #0
 80110fc:	f7ef fd0e 	bl	8000b1c <__aeabi_dcmplt>
 8011100:	3800      	subs	r0, #0
 8011102:	bf18      	it	ne
 8011104:	2001      	movne	r0, #1
 8011106:	e72b      	b.n	8010f60 <__ieee754_pow+0x220>
 8011108:	60000000 	.word	0x60000000
 801110c:	3ff71547 	.word	0x3ff71547
 8011110:	f85ddf44 	.word	0xf85ddf44
 8011114:	3e54ae0b 	.word	0x3e54ae0b
 8011118:	55555555 	.word	0x55555555
 801111c:	3fd55555 	.word	0x3fd55555
 8011120:	652b82fe 	.word	0x652b82fe
 8011124:	3ff71547 	.word	0x3ff71547
 8011128:	00000000 	.word	0x00000000
 801112c:	bff00000 	.word	0xbff00000
 8011130:	3ff00000 	.word	0x3ff00000
 8011134:	3fd00000 	.word	0x3fd00000
 8011138:	3fe00000 	.word	0x3fe00000
 801113c:	408fffff 	.word	0x408fffff
 8011140:	4bd5      	ldr	r3, [pc, #852]	; (8011498 <__ieee754_pow+0x758>)
 8011142:	402b      	ands	r3, r5
 8011144:	2200      	movs	r2, #0
 8011146:	b92b      	cbnz	r3, 8011154 <__ieee754_pow+0x414>
 8011148:	4bd4      	ldr	r3, [pc, #848]	; (801149c <__ieee754_pow+0x75c>)
 801114a:	f7ef fa75 	bl	8000638 <__aeabi_dmul>
 801114e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011152:	460c      	mov	r4, r1
 8011154:	1523      	asrs	r3, r4, #20
 8011156:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801115a:	4413      	add	r3, r2
 801115c:	9305      	str	r3, [sp, #20]
 801115e:	4bd0      	ldr	r3, [pc, #832]	; (80114a0 <__ieee754_pow+0x760>)
 8011160:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011164:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011168:	429c      	cmp	r4, r3
 801116a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801116e:	dd08      	ble.n	8011182 <__ieee754_pow+0x442>
 8011170:	4bcc      	ldr	r3, [pc, #816]	; (80114a4 <__ieee754_pow+0x764>)
 8011172:	429c      	cmp	r4, r3
 8011174:	f340 8162 	ble.w	801143c <__ieee754_pow+0x6fc>
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	3301      	adds	r3, #1
 801117c:	9305      	str	r3, [sp, #20]
 801117e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011182:	2400      	movs	r4, #0
 8011184:	00e3      	lsls	r3, r4, #3
 8011186:	9307      	str	r3, [sp, #28]
 8011188:	4bc7      	ldr	r3, [pc, #796]	; (80114a8 <__ieee754_pow+0x768>)
 801118a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801118e:	ed93 7b00 	vldr	d7, [r3]
 8011192:	4629      	mov	r1, r5
 8011194:	ec53 2b17 	vmov	r2, r3, d7
 8011198:	eeb0 9a47 	vmov.f32	s18, s14
 801119c:	eef0 9a67 	vmov.f32	s19, s15
 80111a0:	4682      	mov	sl, r0
 80111a2:	f7ef f891 	bl	80002c8 <__aeabi_dsub>
 80111a6:	4652      	mov	r2, sl
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	462b      	mov	r3, r5
 80111ae:	ec51 0b19 	vmov	r0, r1, d9
 80111b2:	f7ef f88b 	bl	80002cc <__adddf3>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	2000      	movs	r0, #0
 80111bc:	49bb      	ldr	r1, [pc, #748]	; (80114ac <__ieee754_pow+0x76c>)
 80111be:	f7ef fb65 	bl	800088c <__aeabi_ddiv>
 80111c2:	ec41 0b1a 	vmov	d10, r0, r1
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	4630      	mov	r0, r6
 80111cc:	4639      	mov	r1, r7
 80111ce:	f7ef fa33 	bl	8000638 <__aeabi_dmul>
 80111d2:	2300      	movs	r3, #0
 80111d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d8:	9302      	str	r3, [sp, #8]
 80111da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80111de:	46ab      	mov	fp, r5
 80111e0:	106d      	asrs	r5, r5, #1
 80111e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80111e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80111ea:	ec41 0b18 	vmov	d8, r0, r1
 80111ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80111f2:	2200      	movs	r2, #0
 80111f4:	4640      	mov	r0, r8
 80111f6:	4649      	mov	r1, r9
 80111f8:	4614      	mov	r4, r2
 80111fa:	461d      	mov	r5, r3
 80111fc:	f7ef fa1c 	bl	8000638 <__aeabi_dmul>
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4630      	mov	r0, r6
 8011206:	4639      	mov	r1, r7
 8011208:	f7ef f85e 	bl	80002c8 <__aeabi_dsub>
 801120c:	ec53 2b19 	vmov	r2, r3, d9
 8011210:	4606      	mov	r6, r0
 8011212:	460f      	mov	r7, r1
 8011214:	4620      	mov	r0, r4
 8011216:	4629      	mov	r1, r5
 8011218:	f7ef f856 	bl	80002c8 <__aeabi_dsub>
 801121c:	4602      	mov	r2, r0
 801121e:	460b      	mov	r3, r1
 8011220:	4650      	mov	r0, sl
 8011222:	4659      	mov	r1, fp
 8011224:	f7ef f850 	bl	80002c8 <__aeabi_dsub>
 8011228:	4642      	mov	r2, r8
 801122a:	464b      	mov	r3, r9
 801122c:	f7ef fa04 	bl	8000638 <__aeabi_dmul>
 8011230:	4602      	mov	r2, r0
 8011232:	460b      	mov	r3, r1
 8011234:	4630      	mov	r0, r6
 8011236:	4639      	mov	r1, r7
 8011238:	f7ef f846 	bl	80002c8 <__aeabi_dsub>
 801123c:	ec53 2b1a 	vmov	r2, r3, d10
 8011240:	f7ef f9fa 	bl	8000638 <__aeabi_dmul>
 8011244:	ec53 2b18 	vmov	r2, r3, d8
 8011248:	ec41 0b19 	vmov	d9, r0, r1
 801124c:	ec51 0b18 	vmov	r0, r1, d8
 8011250:	f7ef f9f2 	bl	8000638 <__aeabi_dmul>
 8011254:	a37c      	add	r3, pc, #496	; (adr r3, 8011448 <__ieee754_pow+0x708>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	4604      	mov	r4, r0
 801125c:	460d      	mov	r5, r1
 801125e:	f7ef f9eb 	bl	8000638 <__aeabi_dmul>
 8011262:	a37b      	add	r3, pc, #492	; (adr r3, 8011450 <__ieee754_pow+0x710>)
 8011264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011268:	f7ef f830 	bl	80002cc <__adddf3>
 801126c:	4622      	mov	r2, r4
 801126e:	462b      	mov	r3, r5
 8011270:	f7ef f9e2 	bl	8000638 <__aeabi_dmul>
 8011274:	a378      	add	r3, pc, #480	; (adr r3, 8011458 <__ieee754_pow+0x718>)
 8011276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127a:	f7ef f827 	bl	80002cc <__adddf3>
 801127e:	4622      	mov	r2, r4
 8011280:	462b      	mov	r3, r5
 8011282:	f7ef f9d9 	bl	8000638 <__aeabi_dmul>
 8011286:	a376      	add	r3, pc, #472	; (adr r3, 8011460 <__ieee754_pow+0x720>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	f7ef f81e 	bl	80002cc <__adddf3>
 8011290:	4622      	mov	r2, r4
 8011292:	462b      	mov	r3, r5
 8011294:	f7ef f9d0 	bl	8000638 <__aeabi_dmul>
 8011298:	a373      	add	r3, pc, #460	; (adr r3, 8011468 <__ieee754_pow+0x728>)
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	f7ef f815 	bl	80002cc <__adddf3>
 80112a2:	4622      	mov	r2, r4
 80112a4:	462b      	mov	r3, r5
 80112a6:	f7ef f9c7 	bl	8000638 <__aeabi_dmul>
 80112aa:	a371      	add	r3, pc, #452	; (adr r3, 8011470 <__ieee754_pow+0x730>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	f7ef f80c 	bl	80002cc <__adddf3>
 80112b4:	4622      	mov	r2, r4
 80112b6:	4606      	mov	r6, r0
 80112b8:	460f      	mov	r7, r1
 80112ba:	462b      	mov	r3, r5
 80112bc:	4620      	mov	r0, r4
 80112be:	4629      	mov	r1, r5
 80112c0:	f7ef f9ba 	bl	8000638 <__aeabi_dmul>
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	4630      	mov	r0, r6
 80112ca:	4639      	mov	r1, r7
 80112cc:	f7ef f9b4 	bl	8000638 <__aeabi_dmul>
 80112d0:	4642      	mov	r2, r8
 80112d2:	4604      	mov	r4, r0
 80112d4:	460d      	mov	r5, r1
 80112d6:	464b      	mov	r3, r9
 80112d8:	ec51 0b18 	vmov	r0, r1, d8
 80112dc:	f7ee fff6 	bl	80002cc <__adddf3>
 80112e0:	ec53 2b19 	vmov	r2, r3, d9
 80112e4:	f7ef f9a8 	bl	8000638 <__aeabi_dmul>
 80112e8:	4622      	mov	r2, r4
 80112ea:	462b      	mov	r3, r5
 80112ec:	f7ee ffee 	bl	80002cc <__adddf3>
 80112f0:	4642      	mov	r2, r8
 80112f2:	4682      	mov	sl, r0
 80112f4:	468b      	mov	fp, r1
 80112f6:	464b      	mov	r3, r9
 80112f8:	4640      	mov	r0, r8
 80112fa:	4649      	mov	r1, r9
 80112fc:	f7ef f99c 	bl	8000638 <__aeabi_dmul>
 8011300:	4b6b      	ldr	r3, [pc, #428]	; (80114b0 <__ieee754_pow+0x770>)
 8011302:	2200      	movs	r2, #0
 8011304:	4606      	mov	r6, r0
 8011306:	460f      	mov	r7, r1
 8011308:	f7ee ffe0 	bl	80002cc <__adddf3>
 801130c:	4652      	mov	r2, sl
 801130e:	465b      	mov	r3, fp
 8011310:	f7ee ffdc 	bl	80002cc <__adddf3>
 8011314:	2000      	movs	r0, #0
 8011316:	4604      	mov	r4, r0
 8011318:	460d      	mov	r5, r1
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	4640      	mov	r0, r8
 8011320:	4649      	mov	r1, r9
 8011322:	f7ef f989 	bl	8000638 <__aeabi_dmul>
 8011326:	4b62      	ldr	r3, [pc, #392]	; (80114b0 <__ieee754_pow+0x770>)
 8011328:	4680      	mov	r8, r0
 801132a:	4689      	mov	r9, r1
 801132c:	2200      	movs	r2, #0
 801132e:	4620      	mov	r0, r4
 8011330:	4629      	mov	r1, r5
 8011332:	f7ee ffc9 	bl	80002c8 <__aeabi_dsub>
 8011336:	4632      	mov	r2, r6
 8011338:	463b      	mov	r3, r7
 801133a:	f7ee ffc5 	bl	80002c8 <__aeabi_dsub>
 801133e:	4602      	mov	r2, r0
 8011340:	460b      	mov	r3, r1
 8011342:	4650      	mov	r0, sl
 8011344:	4659      	mov	r1, fp
 8011346:	f7ee ffbf 	bl	80002c8 <__aeabi_dsub>
 801134a:	ec53 2b18 	vmov	r2, r3, d8
 801134e:	f7ef f973 	bl	8000638 <__aeabi_dmul>
 8011352:	4622      	mov	r2, r4
 8011354:	4606      	mov	r6, r0
 8011356:	460f      	mov	r7, r1
 8011358:	462b      	mov	r3, r5
 801135a:	ec51 0b19 	vmov	r0, r1, d9
 801135e:	f7ef f96b 	bl	8000638 <__aeabi_dmul>
 8011362:	4602      	mov	r2, r0
 8011364:	460b      	mov	r3, r1
 8011366:	4630      	mov	r0, r6
 8011368:	4639      	mov	r1, r7
 801136a:	f7ee ffaf 	bl	80002cc <__adddf3>
 801136e:	4606      	mov	r6, r0
 8011370:	460f      	mov	r7, r1
 8011372:	4602      	mov	r2, r0
 8011374:	460b      	mov	r3, r1
 8011376:	4640      	mov	r0, r8
 8011378:	4649      	mov	r1, r9
 801137a:	f7ee ffa7 	bl	80002cc <__adddf3>
 801137e:	a33e      	add	r3, pc, #248	; (adr r3, 8011478 <__ieee754_pow+0x738>)
 8011380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011384:	2000      	movs	r0, #0
 8011386:	4604      	mov	r4, r0
 8011388:	460d      	mov	r5, r1
 801138a:	f7ef f955 	bl	8000638 <__aeabi_dmul>
 801138e:	4642      	mov	r2, r8
 8011390:	ec41 0b18 	vmov	d8, r0, r1
 8011394:	464b      	mov	r3, r9
 8011396:	4620      	mov	r0, r4
 8011398:	4629      	mov	r1, r5
 801139a:	f7ee ff95 	bl	80002c8 <__aeabi_dsub>
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4630      	mov	r0, r6
 80113a4:	4639      	mov	r1, r7
 80113a6:	f7ee ff8f 	bl	80002c8 <__aeabi_dsub>
 80113aa:	a335      	add	r3, pc, #212	; (adr r3, 8011480 <__ieee754_pow+0x740>)
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	f7ef f942 	bl	8000638 <__aeabi_dmul>
 80113b4:	a334      	add	r3, pc, #208	; (adr r3, 8011488 <__ieee754_pow+0x748>)
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	4606      	mov	r6, r0
 80113bc:	460f      	mov	r7, r1
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ef f939 	bl	8000638 <__aeabi_dmul>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4630      	mov	r0, r6
 80113cc:	4639      	mov	r1, r7
 80113ce:	f7ee ff7d 	bl	80002cc <__adddf3>
 80113d2:	9a07      	ldr	r2, [sp, #28]
 80113d4:	4b37      	ldr	r3, [pc, #220]	; (80114b4 <__ieee754_pow+0x774>)
 80113d6:	4413      	add	r3, r2
 80113d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113dc:	f7ee ff76 	bl	80002cc <__adddf3>
 80113e0:	4682      	mov	sl, r0
 80113e2:	9805      	ldr	r0, [sp, #20]
 80113e4:	468b      	mov	fp, r1
 80113e6:	f7ef f8bd 	bl	8000564 <__aeabi_i2d>
 80113ea:	9a07      	ldr	r2, [sp, #28]
 80113ec:	4b32      	ldr	r3, [pc, #200]	; (80114b8 <__ieee754_pow+0x778>)
 80113ee:	4413      	add	r3, r2
 80113f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80113f4:	4606      	mov	r6, r0
 80113f6:	460f      	mov	r7, r1
 80113f8:	4652      	mov	r2, sl
 80113fa:	465b      	mov	r3, fp
 80113fc:	ec51 0b18 	vmov	r0, r1, d8
 8011400:	f7ee ff64 	bl	80002cc <__adddf3>
 8011404:	4642      	mov	r2, r8
 8011406:	464b      	mov	r3, r9
 8011408:	f7ee ff60 	bl	80002cc <__adddf3>
 801140c:	4632      	mov	r2, r6
 801140e:	463b      	mov	r3, r7
 8011410:	f7ee ff5c 	bl	80002cc <__adddf3>
 8011414:	2000      	movs	r0, #0
 8011416:	4632      	mov	r2, r6
 8011418:	463b      	mov	r3, r7
 801141a:	4604      	mov	r4, r0
 801141c:	460d      	mov	r5, r1
 801141e:	f7ee ff53 	bl	80002c8 <__aeabi_dsub>
 8011422:	4642      	mov	r2, r8
 8011424:	464b      	mov	r3, r9
 8011426:	f7ee ff4f 	bl	80002c8 <__aeabi_dsub>
 801142a:	ec53 2b18 	vmov	r2, r3, d8
 801142e:	f7ee ff4b 	bl	80002c8 <__aeabi_dsub>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4650      	mov	r0, sl
 8011438:	4659      	mov	r1, fp
 801143a:	e610      	b.n	801105e <__ieee754_pow+0x31e>
 801143c:	2401      	movs	r4, #1
 801143e:	e6a1      	b.n	8011184 <__ieee754_pow+0x444>
 8011440:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011490 <__ieee754_pow+0x750>
 8011444:	e617      	b.n	8011076 <__ieee754_pow+0x336>
 8011446:	bf00      	nop
 8011448:	4a454eef 	.word	0x4a454eef
 801144c:	3fca7e28 	.word	0x3fca7e28
 8011450:	93c9db65 	.word	0x93c9db65
 8011454:	3fcd864a 	.word	0x3fcd864a
 8011458:	a91d4101 	.word	0xa91d4101
 801145c:	3fd17460 	.word	0x3fd17460
 8011460:	518f264d 	.word	0x518f264d
 8011464:	3fd55555 	.word	0x3fd55555
 8011468:	db6fabff 	.word	0xdb6fabff
 801146c:	3fdb6db6 	.word	0x3fdb6db6
 8011470:	33333303 	.word	0x33333303
 8011474:	3fe33333 	.word	0x3fe33333
 8011478:	e0000000 	.word	0xe0000000
 801147c:	3feec709 	.word	0x3feec709
 8011480:	dc3a03fd 	.word	0xdc3a03fd
 8011484:	3feec709 	.word	0x3feec709
 8011488:	145b01f5 	.word	0x145b01f5
 801148c:	be3e2fe0 	.word	0xbe3e2fe0
 8011490:	00000000 	.word	0x00000000
 8011494:	3ff00000 	.word	0x3ff00000
 8011498:	7ff00000 	.word	0x7ff00000
 801149c:	43400000 	.word	0x43400000
 80114a0:	0003988e 	.word	0x0003988e
 80114a4:	000bb679 	.word	0x000bb679
 80114a8:	080121b8 	.word	0x080121b8
 80114ac:	3ff00000 	.word	0x3ff00000
 80114b0:	40080000 	.word	0x40080000
 80114b4:	080121d8 	.word	0x080121d8
 80114b8:	080121c8 	.word	0x080121c8
 80114bc:	a3b3      	add	r3, pc, #716	; (adr r3, 801178c <__ieee754_pow+0xa4c>)
 80114be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c2:	4640      	mov	r0, r8
 80114c4:	4649      	mov	r1, r9
 80114c6:	f7ee ff01 	bl	80002cc <__adddf3>
 80114ca:	4622      	mov	r2, r4
 80114cc:	ec41 0b1a 	vmov	d10, r0, r1
 80114d0:	462b      	mov	r3, r5
 80114d2:	4630      	mov	r0, r6
 80114d4:	4639      	mov	r1, r7
 80114d6:	f7ee fef7 	bl	80002c8 <__aeabi_dsub>
 80114da:	4602      	mov	r2, r0
 80114dc:	460b      	mov	r3, r1
 80114de:	ec51 0b1a 	vmov	r0, r1, d10
 80114e2:	f7ef fb39 	bl	8000b58 <__aeabi_dcmpgt>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	f47f ae04 	bne.w	80110f4 <__ieee754_pow+0x3b4>
 80114ec:	4aa2      	ldr	r2, [pc, #648]	; (8011778 <__ieee754_pow+0xa38>)
 80114ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80114f2:	4293      	cmp	r3, r2
 80114f4:	f340 8107 	ble.w	8011706 <__ieee754_pow+0x9c6>
 80114f8:	151b      	asrs	r3, r3, #20
 80114fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80114fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011502:	fa4a fa03 	asr.w	sl, sl, r3
 8011506:	44da      	add	sl, fp
 8011508:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801150c:	489b      	ldr	r0, [pc, #620]	; (801177c <__ieee754_pow+0xa3c>)
 801150e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011512:	4108      	asrs	r0, r1
 8011514:	ea00 030a 	and.w	r3, r0, sl
 8011518:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801151c:	f1c1 0114 	rsb	r1, r1, #20
 8011520:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011524:	fa4a fa01 	asr.w	sl, sl, r1
 8011528:	f1bb 0f00 	cmp.w	fp, #0
 801152c:	f04f 0200 	mov.w	r2, #0
 8011530:	4620      	mov	r0, r4
 8011532:	4629      	mov	r1, r5
 8011534:	bfb8      	it	lt
 8011536:	f1ca 0a00 	rsblt	sl, sl, #0
 801153a:	f7ee fec5 	bl	80002c8 <__aeabi_dsub>
 801153e:	ec41 0b19 	vmov	d9, r0, r1
 8011542:	4642      	mov	r2, r8
 8011544:	464b      	mov	r3, r9
 8011546:	ec51 0b19 	vmov	r0, r1, d9
 801154a:	f7ee febf 	bl	80002cc <__adddf3>
 801154e:	a37a      	add	r3, pc, #488	; (adr r3, 8011738 <__ieee754_pow+0x9f8>)
 8011550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011554:	2000      	movs	r0, #0
 8011556:	4604      	mov	r4, r0
 8011558:	460d      	mov	r5, r1
 801155a:	f7ef f86d 	bl	8000638 <__aeabi_dmul>
 801155e:	ec53 2b19 	vmov	r2, r3, d9
 8011562:	4606      	mov	r6, r0
 8011564:	460f      	mov	r7, r1
 8011566:	4620      	mov	r0, r4
 8011568:	4629      	mov	r1, r5
 801156a:	f7ee fead 	bl	80002c8 <__aeabi_dsub>
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	4640      	mov	r0, r8
 8011574:	4649      	mov	r1, r9
 8011576:	f7ee fea7 	bl	80002c8 <__aeabi_dsub>
 801157a:	a371      	add	r3, pc, #452	; (adr r3, 8011740 <__ieee754_pow+0xa00>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	f7ef f85a 	bl	8000638 <__aeabi_dmul>
 8011584:	a370      	add	r3, pc, #448	; (adr r3, 8011748 <__ieee754_pow+0xa08>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	4680      	mov	r8, r0
 801158c:	4689      	mov	r9, r1
 801158e:	4620      	mov	r0, r4
 8011590:	4629      	mov	r1, r5
 8011592:	f7ef f851 	bl	8000638 <__aeabi_dmul>
 8011596:	4602      	mov	r2, r0
 8011598:	460b      	mov	r3, r1
 801159a:	4640      	mov	r0, r8
 801159c:	4649      	mov	r1, r9
 801159e:	f7ee fe95 	bl	80002cc <__adddf3>
 80115a2:	4604      	mov	r4, r0
 80115a4:	460d      	mov	r5, r1
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	4630      	mov	r0, r6
 80115ac:	4639      	mov	r1, r7
 80115ae:	f7ee fe8d 	bl	80002cc <__adddf3>
 80115b2:	4632      	mov	r2, r6
 80115b4:	463b      	mov	r3, r7
 80115b6:	4680      	mov	r8, r0
 80115b8:	4689      	mov	r9, r1
 80115ba:	f7ee fe85 	bl	80002c8 <__aeabi_dsub>
 80115be:	4602      	mov	r2, r0
 80115c0:	460b      	mov	r3, r1
 80115c2:	4620      	mov	r0, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	f7ee fe7f 	bl	80002c8 <__aeabi_dsub>
 80115ca:	4642      	mov	r2, r8
 80115cc:	4606      	mov	r6, r0
 80115ce:	460f      	mov	r7, r1
 80115d0:	464b      	mov	r3, r9
 80115d2:	4640      	mov	r0, r8
 80115d4:	4649      	mov	r1, r9
 80115d6:	f7ef f82f 	bl	8000638 <__aeabi_dmul>
 80115da:	a35d      	add	r3, pc, #372	; (adr r3, 8011750 <__ieee754_pow+0xa10>)
 80115dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e0:	4604      	mov	r4, r0
 80115e2:	460d      	mov	r5, r1
 80115e4:	f7ef f828 	bl	8000638 <__aeabi_dmul>
 80115e8:	a35b      	add	r3, pc, #364	; (adr r3, 8011758 <__ieee754_pow+0xa18>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ee fe6b 	bl	80002c8 <__aeabi_dsub>
 80115f2:	4622      	mov	r2, r4
 80115f4:	462b      	mov	r3, r5
 80115f6:	f7ef f81f 	bl	8000638 <__aeabi_dmul>
 80115fa:	a359      	add	r3, pc, #356	; (adr r3, 8011760 <__ieee754_pow+0xa20>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f7ee fe64 	bl	80002cc <__adddf3>
 8011604:	4622      	mov	r2, r4
 8011606:	462b      	mov	r3, r5
 8011608:	f7ef f816 	bl	8000638 <__aeabi_dmul>
 801160c:	a356      	add	r3, pc, #344	; (adr r3, 8011768 <__ieee754_pow+0xa28>)
 801160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011612:	f7ee fe59 	bl	80002c8 <__aeabi_dsub>
 8011616:	4622      	mov	r2, r4
 8011618:	462b      	mov	r3, r5
 801161a:	f7ef f80d 	bl	8000638 <__aeabi_dmul>
 801161e:	a354      	add	r3, pc, #336	; (adr r3, 8011770 <__ieee754_pow+0xa30>)
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	f7ee fe52 	bl	80002cc <__adddf3>
 8011628:	4622      	mov	r2, r4
 801162a:	462b      	mov	r3, r5
 801162c:	f7ef f804 	bl	8000638 <__aeabi_dmul>
 8011630:	4602      	mov	r2, r0
 8011632:	460b      	mov	r3, r1
 8011634:	4640      	mov	r0, r8
 8011636:	4649      	mov	r1, r9
 8011638:	f7ee fe46 	bl	80002c8 <__aeabi_dsub>
 801163c:	4604      	mov	r4, r0
 801163e:	460d      	mov	r5, r1
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	4640      	mov	r0, r8
 8011646:	4649      	mov	r1, r9
 8011648:	f7ee fff6 	bl	8000638 <__aeabi_dmul>
 801164c:	2200      	movs	r2, #0
 801164e:	ec41 0b19 	vmov	d9, r0, r1
 8011652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011656:	4620      	mov	r0, r4
 8011658:	4629      	mov	r1, r5
 801165a:	f7ee fe35 	bl	80002c8 <__aeabi_dsub>
 801165e:	4602      	mov	r2, r0
 8011660:	460b      	mov	r3, r1
 8011662:	ec51 0b19 	vmov	r0, r1, d9
 8011666:	f7ef f911 	bl	800088c <__aeabi_ddiv>
 801166a:	4632      	mov	r2, r6
 801166c:	4604      	mov	r4, r0
 801166e:	460d      	mov	r5, r1
 8011670:	463b      	mov	r3, r7
 8011672:	4640      	mov	r0, r8
 8011674:	4649      	mov	r1, r9
 8011676:	f7ee ffdf 	bl	8000638 <__aeabi_dmul>
 801167a:	4632      	mov	r2, r6
 801167c:	463b      	mov	r3, r7
 801167e:	f7ee fe25 	bl	80002cc <__adddf3>
 8011682:	4602      	mov	r2, r0
 8011684:	460b      	mov	r3, r1
 8011686:	4620      	mov	r0, r4
 8011688:	4629      	mov	r1, r5
 801168a:	f7ee fe1d 	bl	80002c8 <__aeabi_dsub>
 801168e:	4642      	mov	r2, r8
 8011690:	464b      	mov	r3, r9
 8011692:	f7ee fe19 	bl	80002c8 <__aeabi_dsub>
 8011696:	460b      	mov	r3, r1
 8011698:	4602      	mov	r2, r0
 801169a:	4939      	ldr	r1, [pc, #228]	; (8011780 <__ieee754_pow+0xa40>)
 801169c:	2000      	movs	r0, #0
 801169e:	f7ee fe13 	bl	80002c8 <__aeabi_dsub>
 80116a2:	ec41 0b10 	vmov	d0, r0, r1
 80116a6:	ee10 3a90 	vmov	r3, s1
 80116aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80116ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80116b2:	da2b      	bge.n	801170c <__ieee754_pow+0x9cc>
 80116b4:	4650      	mov	r0, sl
 80116b6:	f000 f877 	bl	80117a8 <scalbn>
 80116ba:	ec51 0b10 	vmov	r0, r1, d0
 80116be:	ec53 2b18 	vmov	r2, r3, d8
 80116c2:	f7ff bbee 	b.w	8010ea2 <__ieee754_pow+0x162>
 80116c6:	4b2f      	ldr	r3, [pc, #188]	; (8011784 <__ieee754_pow+0xa44>)
 80116c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80116cc:	429e      	cmp	r6, r3
 80116ce:	f77f af0d 	ble.w	80114ec <__ieee754_pow+0x7ac>
 80116d2:	4b2d      	ldr	r3, [pc, #180]	; (8011788 <__ieee754_pow+0xa48>)
 80116d4:	440b      	add	r3, r1
 80116d6:	4303      	orrs	r3, r0
 80116d8:	d009      	beq.n	80116ee <__ieee754_pow+0x9ae>
 80116da:	ec51 0b18 	vmov	r0, r1, d8
 80116de:	2200      	movs	r2, #0
 80116e0:	2300      	movs	r3, #0
 80116e2:	f7ef fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80116e6:	3800      	subs	r0, #0
 80116e8:	bf18      	it	ne
 80116ea:	2001      	movne	r0, #1
 80116ec:	e448      	b.n	8010f80 <__ieee754_pow+0x240>
 80116ee:	4622      	mov	r2, r4
 80116f0:	462b      	mov	r3, r5
 80116f2:	f7ee fde9 	bl	80002c8 <__aeabi_dsub>
 80116f6:	4642      	mov	r2, r8
 80116f8:	464b      	mov	r3, r9
 80116fa:	f7ef fa23 	bl	8000b44 <__aeabi_dcmpge>
 80116fe:	2800      	cmp	r0, #0
 8011700:	f43f aef4 	beq.w	80114ec <__ieee754_pow+0x7ac>
 8011704:	e7e9      	b.n	80116da <__ieee754_pow+0x99a>
 8011706:	f04f 0a00 	mov.w	sl, #0
 801170a:	e71a      	b.n	8011542 <__ieee754_pow+0x802>
 801170c:	ec51 0b10 	vmov	r0, r1, d0
 8011710:	4619      	mov	r1, r3
 8011712:	e7d4      	b.n	80116be <__ieee754_pow+0x97e>
 8011714:	491a      	ldr	r1, [pc, #104]	; (8011780 <__ieee754_pow+0xa40>)
 8011716:	2000      	movs	r0, #0
 8011718:	f7ff bb31 	b.w	8010d7e <__ieee754_pow+0x3e>
 801171c:	2000      	movs	r0, #0
 801171e:	2100      	movs	r1, #0
 8011720:	f7ff bb2d 	b.w	8010d7e <__ieee754_pow+0x3e>
 8011724:	4630      	mov	r0, r6
 8011726:	4639      	mov	r1, r7
 8011728:	f7ff bb29 	b.w	8010d7e <__ieee754_pow+0x3e>
 801172c:	9204      	str	r2, [sp, #16]
 801172e:	f7ff bb7b 	b.w	8010e28 <__ieee754_pow+0xe8>
 8011732:	2300      	movs	r3, #0
 8011734:	f7ff bb65 	b.w	8010e02 <__ieee754_pow+0xc2>
 8011738:	00000000 	.word	0x00000000
 801173c:	3fe62e43 	.word	0x3fe62e43
 8011740:	fefa39ef 	.word	0xfefa39ef
 8011744:	3fe62e42 	.word	0x3fe62e42
 8011748:	0ca86c39 	.word	0x0ca86c39
 801174c:	be205c61 	.word	0xbe205c61
 8011750:	72bea4d0 	.word	0x72bea4d0
 8011754:	3e663769 	.word	0x3e663769
 8011758:	c5d26bf1 	.word	0xc5d26bf1
 801175c:	3ebbbd41 	.word	0x3ebbbd41
 8011760:	af25de2c 	.word	0xaf25de2c
 8011764:	3f11566a 	.word	0x3f11566a
 8011768:	16bebd93 	.word	0x16bebd93
 801176c:	3f66c16c 	.word	0x3f66c16c
 8011770:	5555553e 	.word	0x5555553e
 8011774:	3fc55555 	.word	0x3fc55555
 8011778:	3fe00000 	.word	0x3fe00000
 801177c:	fff00000 	.word	0xfff00000
 8011780:	3ff00000 	.word	0x3ff00000
 8011784:	4090cbff 	.word	0x4090cbff
 8011788:	3f6f3400 	.word	0x3f6f3400
 801178c:	652b82fe 	.word	0x652b82fe
 8011790:	3c971547 	.word	0x3c971547

08011794 <fabs>:
 8011794:	ec51 0b10 	vmov	r0, r1, d0
 8011798:	ee10 2a10 	vmov	r2, s0
 801179c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80117a0:	ec43 2b10 	vmov	d0, r2, r3
 80117a4:	4770      	bx	lr
	...

080117a8 <scalbn>:
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	ec55 4b10 	vmov	r4, r5, d0
 80117ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80117b2:	4606      	mov	r6, r0
 80117b4:	462b      	mov	r3, r5
 80117b6:	b999      	cbnz	r1, 80117e0 <scalbn+0x38>
 80117b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80117bc:	4323      	orrs	r3, r4
 80117be:	d03f      	beq.n	8011840 <scalbn+0x98>
 80117c0:	4b35      	ldr	r3, [pc, #212]	; (8011898 <scalbn+0xf0>)
 80117c2:	4629      	mov	r1, r5
 80117c4:	ee10 0a10 	vmov	r0, s0
 80117c8:	2200      	movs	r2, #0
 80117ca:	f7ee ff35 	bl	8000638 <__aeabi_dmul>
 80117ce:	4b33      	ldr	r3, [pc, #204]	; (801189c <scalbn+0xf4>)
 80117d0:	429e      	cmp	r6, r3
 80117d2:	4604      	mov	r4, r0
 80117d4:	460d      	mov	r5, r1
 80117d6:	da10      	bge.n	80117fa <scalbn+0x52>
 80117d8:	a327      	add	r3, pc, #156	; (adr r3, 8011878 <scalbn+0xd0>)
 80117da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117de:	e01f      	b.n	8011820 <scalbn+0x78>
 80117e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80117e4:	4291      	cmp	r1, r2
 80117e6:	d10c      	bne.n	8011802 <scalbn+0x5a>
 80117e8:	ee10 2a10 	vmov	r2, s0
 80117ec:	4620      	mov	r0, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	f7ee fd6c 	bl	80002cc <__adddf3>
 80117f4:	4604      	mov	r4, r0
 80117f6:	460d      	mov	r5, r1
 80117f8:	e022      	b.n	8011840 <scalbn+0x98>
 80117fa:	460b      	mov	r3, r1
 80117fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011800:	3936      	subs	r1, #54	; 0x36
 8011802:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011806:	4296      	cmp	r6, r2
 8011808:	dd0d      	ble.n	8011826 <scalbn+0x7e>
 801180a:	2d00      	cmp	r5, #0
 801180c:	a11c      	add	r1, pc, #112	; (adr r1, 8011880 <scalbn+0xd8>)
 801180e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011812:	da02      	bge.n	801181a <scalbn+0x72>
 8011814:	a11c      	add	r1, pc, #112	; (adr r1, 8011888 <scalbn+0xe0>)
 8011816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801181a:	a319      	add	r3, pc, #100	; (adr r3, 8011880 <scalbn+0xd8>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	f7ee ff0a 	bl	8000638 <__aeabi_dmul>
 8011824:	e7e6      	b.n	80117f4 <scalbn+0x4c>
 8011826:	1872      	adds	r2, r6, r1
 8011828:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801182c:	428a      	cmp	r2, r1
 801182e:	dcec      	bgt.n	801180a <scalbn+0x62>
 8011830:	2a00      	cmp	r2, #0
 8011832:	dd08      	ble.n	8011846 <scalbn+0x9e>
 8011834:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011838:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801183c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011840:	ec45 4b10 	vmov	d0, r4, r5
 8011844:	bd70      	pop	{r4, r5, r6, pc}
 8011846:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801184a:	da08      	bge.n	801185e <scalbn+0xb6>
 801184c:	2d00      	cmp	r5, #0
 801184e:	a10a      	add	r1, pc, #40	; (adr r1, 8011878 <scalbn+0xd0>)
 8011850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011854:	dac0      	bge.n	80117d8 <scalbn+0x30>
 8011856:	a10e      	add	r1, pc, #56	; (adr r1, 8011890 <scalbn+0xe8>)
 8011858:	e9d1 0100 	ldrd	r0, r1, [r1]
 801185c:	e7bc      	b.n	80117d8 <scalbn+0x30>
 801185e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011862:	3236      	adds	r2, #54	; 0x36
 8011864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011868:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801186c:	4620      	mov	r0, r4
 801186e:	4b0c      	ldr	r3, [pc, #48]	; (80118a0 <scalbn+0xf8>)
 8011870:	2200      	movs	r2, #0
 8011872:	e7d5      	b.n	8011820 <scalbn+0x78>
 8011874:	f3af 8000 	nop.w
 8011878:	c2f8f359 	.word	0xc2f8f359
 801187c:	01a56e1f 	.word	0x01a56e1f
 8011880:	8800759c 	.word	0x8800759c
 8011884:	7e37e43c 	.word	0x7e37e43c
 8011888:	8800759c 	.word	0x8800759c
 801188c:	fe37e43c 	.word	0xfe37e43c
 8011890:	c2f8f359 	.word	0xc2f8f359
 8011894:	81a56e1f 	.word	0x81a56e1f
 8011898:	43500000 	.word	0x43500000
 801189c:	ffff3cb0 	.word	0xffff3cb0
 80118a0:	3c900000 	.word	0x3c900000

080118a4 <with_errno>:
 80118a4:	b570      	push	{r4, r5, r6, lr}
 80118a6:	4604      	mov	r4, r0
 80118a8:	460d      	mov	r5, r1
 80118aa:	4616      	mov	r6, r2
 80118ac:	f7fc ff20 	bl	800e6f0 <__errno>
 80118b0:	4629      	mov	r1, r5
 80118b2:	6006      	str	r6, [r0, #0]
 80118b4:	4620      	mov	r0, r4
 80118b6:	bd70      	pop	{r4, r5, r6, pc}

080118b8 <xflow>:
 80118b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ba:	4614      	mov	r4, r2
 80118bc:	461d      	mov	r5, r3
 80118be:	b108      	cbz	r0, 80118c4 <xflow+0xc>
 80118c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80118c4:	e9cd 2300 	strd	r2, r3, [sp]
 80118c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118cc:	4620      	mov	r0, r4
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ee feb2 	bl	8000638 <__aeabi_dmul>
 80118d4:	2222      	movs	r2, #34	; 0x22
 80118d6:	b003      	add	sp, #12
 80118d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118dc:	f7ff bfe2 	b.w	80118a4 <with_errno>

080118e0 <__math_uflow>:
 80118e0:	b508      	push	{r3, lr}
 80118e2:	2200      	movs	r2, #0
 80118e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80118e8:	f7ff ffe6 	bl	80118b8 <xflow>
 80118ec:	ec41 0b10 	vmov	d0, r0, r1
 80118f0:	bd08      	pop	{r3, pc}

080118f2 <__math_oflow>:
 80118f2:	b508      	push	{r3, lr}
 80118f4:	2200      	movs	r2, #0
 80118f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80118fa:	f7ff ffdd 	bl	80118b8 <xflow>
 80118fe:	ec41 0b10 	vmov	d0, r0, r1
 8011902:	bd08      	pop	{r3, pc}

08011904 <__ieee754_sqrt>:
 8011904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011908:	ec55 4b10 	vmov	r4, r5, d0
 801190c:	4e67      	ldr	r6, [pc, #412]	; (8011aac <__ieee754_sqrt+0x1a8>)
 801190e:	43ae      	bics	r6, r5
 8011910:	ee10 0a10 	vmov	r0, s0
 8011914:	ee10 2a10 	vmov	r2, s0
 8011918:	4629      	mov	r1, r5
 801191a:	462b      	mov	r3, r5
 801191c:	d10d      	bne.n	801193a <__ieee754_sqrt+0x36>
 801191e:	f7ee fe8b 	bl	8000638 <__aeabi_dmul>
 8011922:	4602      	mov	r2, r0
 8011924:	460b      	mov	r3, r1
 8011926:	4620      	mov	r0, r4
 8011928:	4629      	mov	r1, r5
 801192a:	f7ee fccf 	bl	80002cc <__adddf3>
 801192e:	4604      	mov	r4, r0
 8011930:	460d      	mov	r5, r1
 8011932:	ec45 4b10 	vmov	d0, r4, r5
 8011936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193a:	2d00      	cmp	r5, #0
 801193c:	dc0b      	bgt.n	8011956 <__ieee754_sqrt+0x52>
 801193e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011942:	4326      	orrs	r6, r4
 8011944:	d0f5      	beq.n	8011932 <__ieee754_sqrt+0x2e>
 8011946:	b135      	cbz	r5, 8011956 <__ieee754_sqrt+0x52>
 8011948:	f7ee fcbe 	bl	80002c8 <__aeabi_dsub>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	f7ee ff9c 	bl	800088c <__aeabi_ddiv>
 8011954:	e7eb      	b.n	801192e <__ieee754_sqrt+0x2a>
 8011956:	1509      	asrs	r1, r1, #20
 8011958:	f000 808d 	beq.w	8011a76 <__ieee754_sqrt+0x172>
 801195c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011960:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011968:	07c9      	lsls	r1, r1, #31
 801196a:	bf5c      	itt	pl
 801196c:	005b      	lslpl	r3, r3, #1
 801196e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011972:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011976:	bf58      	it	pl
 8011978:	0052      	lslpl	r2, r2, #1
 801197a:	2500      	movs	r5, #0
 801197c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011980:	1076      	asrs	r6, r6, #1
 8011982:	0052      	lsls	r2, r2, #1
 8011984:	f04f 0e16 	mov.w	lr, #22
 8011988:	46ac      	mov	ip, r5
 801198a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801198e:	eb0c 0001 	add.w	r0, ip, r1
 8011992:	4298      	cmp	r0, r3
 8011994:	bfde      	ittt	le
 8011996:	1a1b      	suble	r3, r3, r0
 8011998:	eb00 0c01 	addle.w	ip, r0, r1
 801199c:	186d      	addle	r5, r5, r1
 801199e:	005b      	lsls	r3, r3, #1
 80119a0:	f1be 0e01 	subs.w	lr, lr, #1
 80119a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80119a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80119ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80119b0:	d1ed      	bne.n	801198e <__ieee754_sqrt+0x8a>
 80119b2:	4674      	mov	r4, lr
 80119b4:	2720      	movs	r7, #32
 80119b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80119ba:	4563      	cmp	r3, ip
 80119bc:	eb01 000e 	add.w	r0, r1, lr
 80119c0:	dc02      	bgt.n	80119c8 <__ieee754_sqrt+0xc4>
 80119c2:	d113      	bne.n	80119ec <__ieee754_sqrt+0xe8>
 80119c4:	4290      	cmp	r0, r2
 80119c6:	d811      	bhi.n	80119ec <__ieee754_sqrt+0xe8>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	eb00 0e01 	add.w	lr, r0, r1
 80119ce:	da57      	bge.n	8011a80 <__ieee754_sqrt+0x17c>
 80119d0:	f1be 0f00 	cmp.w	lr, #0
 80119d4:	db54      	blt.n	8011a80 <__ieee754_sqrt+0x17c>
 80119d6:	f10c 0801 	add.w	r8, ip, #1
 80119da:	eba3 030c 	sub.w	r3, r3, ip
 80119de:	4290      	cmp	r0, r2
 80119e0:	bf88      	it	hi
 80119e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80119e6:	1a12      	subs	r2, r2, r0
 80119e8:	440c      	add	r4, r1
 80119ea:	46c4      	mov	ip, r8
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	3f01      	subs	r7, #1
 80119f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80119f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80119f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80119fc:	d1dd      	bne.n	80119ba <__ieee754_sqrt+0xb6>
 80119fe:	4313      	orrs	r3, r2
 8011a00:	d01b      	beq.n	8011a3a <__ieee754_sqrt+0x136>
 8011a02:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011ab0 <__ieee754_sqrt+0x1ac>
 8011a06:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011ab4 <__ieee754_sqrt+0x1b0>
 8011a0a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011a0e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011a12:	f7ee fc59 	bl	80002c8 <__aeabi_dsub>
 8011a16:	e9da 8900 	ldrd	r8, r9, [sl]
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ef f885 	bl	8000b30 <__aeabi_dcmple>
 8011a26:	b140      	cbz	r0, 8011a3a <__ieee754_sqrt+0x136>
 8011a28:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011a2c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011a30:	e9db 2300 	ldrd	r2, r3, [fp]
 8011a34:	d126      	bne.n	8011a84 <__ieee754_sqrt+0x180>
 8011a36:	3501      	adds	r5, #1
 8011a38:	463c      	mov	r4, r7
 8011a3a:	106a      	asrs	r2, r5, #1
 8011a3c:	0863      	lsrs	r3, r4, #1
 8011a3e:	07e9      	lsls	r1, r5, #31
 8011a40:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011a44:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011a48:	bf48      	it	mi
 8011a4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011a4e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011a52:	461c      	mov	r4, r3
 8011a54:	e76d      	b.n	8011932 <__ieee754_sqrt+0x2e>
 8011a56:	0ad3      	lsrs	r3, r2, #11
 8011a58:	3815      	subs	r0, #21
 8011a5a:	0552      	lsls	r2, r2, #21
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d0fa      	beq.n	8011a56 <__ieee754_sqrt+0x152>
 8011a60:	02dc      	lsls	r4, r3, #11
 8011a62:	d50a      	bpl.n	8011a7a <__ieee754_sqrt+0x176>
 8011a64:	f1c1 0420 	rsb	r4, r1, #32
 8011a68:	fa22 f404 	lsr.w	r4, r2, r4
 8011a6c:	1e4d      	subs	r5, r1, #1
 8011a6e:	408a      	lsls	r2, r1
 8011a70:	4323      	orrs	r3, r4
 8011a72:	1b41      	subs	r1, r0, r5
 8011a74:	e772      	b.n	801195c <__ieee754_sqrt+0x58>
 8011a76:	4608      	mov	r0, r1
 8011a78:	e7f0      	b.n	8011a5c <__ieee754_sqrt+0x158>
 8011a7a:	005b      	lsls	r3, r3, #1
 8011a7c:	3101      	adds	r1, #1
 8011a7e:	e7ef      	b.n	8011a60 <__ieee754_sqrt+0x15c>
 8011a80:	46e0      	mov	r8, ip
 8011a82:	e7aa      	b.n	80119da <__ieee754_sqrt+0xd6>
 8011a84:	f7ee fc22 	bl	80002cc <__adddf3>
 8011a88:	e9da 8900 	ldrd	r8, r9, [sl]
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4640      	mov	r0, r8
 8011a92:	4649      	mov	r1, r9
 8011a94:	f7ef f842 	bl	8000b1c <__aeabi_dcmplt>
 8011a98:	b120      	cbz	r0, 8011aa4 <__ieee754_sqrt+0x1a0>
 8011a9a:	1ca0      	adds	r0, r4, #2
 8011a9c:	bf08      	it	eq
 8011a9e:	3501      	addeq	r5, #1
 8011aa0:	3402      	adds	r4, #2
 8011aa2:	e7ca      	b.n	8011a3a <__ieee754_sqrt+0x136>
 8011aa4:	3401      	adds	r4, #1
 8011aa6:	f024 0401 	bic.w	r4, r4, #1
 8011aaa:	e7c6      	b.n	8011a3a <__ieee754_sqrt+0x136>
 8011aac:	7ff00000 	.word	0x7ff00000
 8011ab0:	200001f8 	.word	0x200001f8
 8011ab4:	20000200 	.word	0x20000200

08011ab8 <_init>:
 8011ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aba:	bf00      	nop
 8011abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011abe:	bc08      	pop	{r3}
 8011ac0:	469e      	mov	lr, r3
 8011ac2:	4770      	bx	lr

08011ac4 <_fini>:
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac6:	bf00      	nop
 8011ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aca:	bc08      	pop	{r3}
 8011acc:	469e      	mov	lr, r3
 8011ace:	4770      	bx	lr

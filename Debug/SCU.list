
SCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08011678  08011678  00021678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d38  08011d38  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08011d38  08011d38  00021d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d40  08011d40  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d40  08011d40  00021d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d44  08011d44  00021d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011d48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc4  20000208  08011f50  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005dcc  08011f50  00035dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002287b  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064ec  00000000  00000000  00052af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  00058fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001710  00000000  00000000  0005ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cc25  00000000  00000000  0005c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0ab  00000000  00000000  0008916d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4ddf  00000000  00000000  000b4218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009020  00000000  00000000  001a8ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001b2018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011660 	.word	0x08011660

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	08011660 	.word	0x08011660

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <queueAccelerationPacket>:
	angular_rate_buffer.buf_wrap		= false;
}


int queueAccelerationPacket(uint8_t data[])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f8e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <queueAccelerationPacket+0x22>
 8000f96:	4b27      	ldr	r3, [pc, #156]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f98:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000f9e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d30f      	bcc.n	8000fc6 <queueAccelerationPacket+0x42>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fa8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
	if ((acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos < acceleration_buffer.buf_start_pos) ||
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d035      	beq.n	8001022 <queueAccelerationPacket+0x9e>
		(!acceleration_buffer.buf_wrap && acceleration_buffer.buf_end_pos >= acceleration_buffer.buf_start_pos))
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fb8:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fbe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d32d      	bcc.n	8001022 <queueAccelerationPacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		acceleration_buffer.queue[acceleration_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fc8:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fd6:	00c9      	lsls	r1, r1, #3
 8000fd8:	4401      	add	r1, r0
 8000fda:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		acceleration_buffer.buf_end_pos++;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fe0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000fea:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(acceleration_buffer.buf_end_pos % BUFFER_SIZE < acceleration_buffer.buf_end_pos)
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ff0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <queueAccelerationPacket+0xb0>)
 8000ffc:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001000:	429a      	cmp	r2, r3
 8001002:	d20c      	bcs.n	800101e <queueAccelerationPacket+0x9a>
		{
			acceleration_buffer.buf_end_pos = acceleration_buffer.buf_end_pos % BUFFER_SIZE;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001006:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001012:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			acceleration_buffer.buf_wrap = true;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <queueAccelerationPacket+0xb0>)
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 800101e:	2300      	movs	r3, #0
 8001020:	e001      	b.n	8001026 <queueAccelerationPacket+0xa2>
	}

	return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000228 	.word	0x20000228

08001038 <queueAngularRatePacket>:

int queueAngularRatePacket(uint8_t data[])
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	// check if space in buffer
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001042:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <queueAngularRatePacket+0x22>
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800104c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001052:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001056:	429a      	cmp	r2, r3
 8001058:	d30f      	bcc.n	800107a <queueAngularRatePacket+0x42>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800105c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
	if ((angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos < angular_rate_buffer.buf_start_pos) ||
 8001066:	2b00      	cmp	r3, #0
 8001068:	d035      	beq.n	80010d6 <queueAngularRatePacket+0x9e>
		(!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_end_pos >= angular_rate_buffer.buf_start_pos))
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800106c:	f893 2401 	ldrb.w	r2, [r3, #1025]	; 0x401
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001072:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001076:	429a      	cmp	r2, r3
 8001078:	d32d      	bcc.n	80010d6 <queueAngularRatePacket+0x9e>
	{
		// add packet **NOTE a packet is 8 bytes so we can just grab the 8 bytes at once (arrays are contiguous in memory)**
		angular_rate_buffer.queue[angular_rate_buffer.buf_end_pos] = ((uint64_t*)data)[0];
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800107c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001080:	4619      	mov	r1, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800108a:	00c9      	lsls	r1, r1, #3
 800108c:	4401      	add	r1, r0
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

		// increment end position
		angular_rate_buffer.buf_end_pos++;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <queueAngularRatePacket+0xb0>)
 8001094:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <queueAngularRatePacket+0xb0>)
 800109e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

		// check for buffer wrap
		if(angular_rate_buffer.buf_end_pos % BUFFER_SIZE < angular_rate_buffer.buf_end_pos)
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010a4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010b0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d20c      	bcs.n	80010d2 <queueAngularRatePacket+0x9a>
		{
			angular_rate_buffer.buf_end_pos = angular_rate_buffer.buf_end_pos % BUFFER_SIZE;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010ba:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80010be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010c6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
			angular_rate_buffer.buf_wrap = true;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <queueAngularRatePacket+0xb0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
		}

		return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <queueAngularRatePacket+0xa2>
	}

	return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000630 	.word	0x20000630

080010ec <dequeueAccelerationPacket>:

uint64_t dequeueAccelerationPacket()
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!acceleration_buffer.buf_wrap && acceleration_buffer.buf_start_pos == acceleration_buffer.buf_end_pos)
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <dequeueAccelerationPacket+0x98>)
 80010f4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <dequeueAccelerationPacket+0x30>
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001104:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800110a:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800110e:	429a      	cmp	r2, r3
 8001110:	d104      	bne.n	800111c <dequeueAccelerationPacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e02b      	b.n	8001174 <dequeueAccelerationPacket+0x88>
	}

	// get data value
	temp = acceleration_buffer.queue[acceleration_buffer.buf_start_pos];
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800111e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 2300 	strd	r2, r3, [r7]

	acceleration_buffer.buf_start_pos++;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001132:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800113c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (acceleration_buffer.buf_start_pos % BUFFER_SIZE < acceleration_buffer.buf_start_pos)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001142:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800114e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <dequeueAccelerationPacket+0x84>
	{
		acceleration_buffer.buf_start_pos = acceleration_buffer.buf_start_pos % BUFFER_SIZE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001158:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <dequeueAccelerationPacket+0x98>)
 8001164:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		acceleration_buffer.buf_wrap = false;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <dequeueAccelerationPacket+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000228 	.word	0x20000228

08001188 <dequeueAngularRatePacket>:

uint64_t dequeueAngularRatePacket()
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint64_t temp;

	// check if buffer empty
	if (!angular_rate_buffer.buf_wrap && angular_rate_buffer.buf_start_pos == angular_rate_buffer.buf_end_pos)
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001190:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8001194:	f083 0301 	eor.w	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00c      	beq.n	80011b8 <dequeueAngularRatePacket+0x30>
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a0:	f893 2400 	ldrb.w	r2, [r3, #1024]	; 0x400
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011a6:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <dequeueAngularRatePacket+0x30>
	{
		return 0; // check and make sure to return a number that should not be possible!!!
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e02b      	b.n	8001210 <dequeueAngularRatePacket+0x88>
	}

	// get data value
	temp = angular_rate_buffer.queue[angular_rate_buffer.buf_start_pos];
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ba:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	e9c7 2300 	strd	r2, r3, [r7]

	angular_rate_buffer.buf_start_pos++;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ce:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

	// check for buffer wrap
	if (angular_rate_buffer.buf_start_pos % BUFFER_SIZE < angular_rate_buffer.buf_start_pos)
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011de:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011ea:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <dequeueAngularRatePacket+0x84>
	{
		angular_rate_buffer.buf_start_pos = angular_rate_buffer.buf_start_pos % BUFFER_SIZE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <dequeueAngularRatePacket+0x98>)
 80011f4:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80011f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001200:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		angular_rate_buffer.buf_wrap = false;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <dequeueAngularRatePacket+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	}

	return temp;
 800120c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000630 	.word	0x20000630

08001224 <processAccelerationPacket>:

void processAccelerationPacket(uint64_t packet)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
	float x_acceleration;
	float y_acceleration;
	float z_acceleration;

	data = (uint16_t*) &packet;
 8001232:	463b      	mov	r3, r7
 8001234:	617b      	str	r3, [r7, #20]

	y_acceleration = ((float)data[0] / 100) - 320;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012b4 <processAccelerationPacket+0x90>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80012b8 <processAccelerationPacket+0x94>
 800124e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	x_acceleration = ((float)data[1] / 100) - 320;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	eddf 6a13 	vldr	s13, [pc, #76]	; 80012b4 <processAccelerationPacket+0x90>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012b8 <processAccelerationPacket+0x94>
 8001270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	z_acceleration = ((float)data[2] / 100) - 320;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3304      	adds	r3, #4
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012b4 <processAccelerationPacket+0x90>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012b8 <processAccelerationPacket+0x94>
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Acceleration", x_acceleration, y_acceleration, z_acceleration);
 800129a:	ed97 1a02 	vldr	s2, [r7, #8]
 800129e:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <processAccelerationPacket+0x98>)
 80012a8:	f000 f858 	bl	800135c <printPacket>
	/* Logging Ends */
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	43a00000 	.word	0x43a00000
 80012bc:	08011678 	.word	0x08011678

080012c0 <processAngularRatePacket>:

void processAngularRatePacket(uint64_t packet)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t *data = NULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	float x_angular_rate;
	float y_angular_rate;
	float z_angular_rate;

	data = (uint16_t*) &packet;
 80012ce:	463b      	mov	r3, r7
 80012d0:	617b      	str	r3, [r7, #20]

	y_angular_rate = ((float)data[0] / 128) - 250;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001350 <processAngularRatePacket+0x90>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001354 <processAngularRatePacket+0x94>
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	edc7 7a04 	vstr	s15, [r7, #16]
	x_angular_rate = ((float)data[1] / 128) - 250;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3302      	adds	r3, #2
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001350 <processAngularRatePacket+0x90>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001354 <processAngularRatePacket+0x94>
 800130c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	z_angular_rate = ((float)data[2] / 128) - 250;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3304      	adds	r3, #4
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001322:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001350 <processAngularRatePacket+0x90>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001354 <processAngularRatePacket+0x94>
 800132e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001332:	edc7 7a02 	vstr	s15, [r7, #8]

	/* TODO SCU#35 */
	/* Logging Starts */
	printPacket("Angular Rate", x_angular_rate, y_angular_rate, z_angular_rate);
 8001336:	ed97 1a02 	vldr	s2, [r7, #8]
 800133a:	edd7 0a04 	vldr	s1, [r7, #16]
 800133e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <processAngularRatePacket+0x98>)
 8001344:	f000 f80a 	bl	800135c <printPacket>
	/* Logging Ends */
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	43000000 	.word	0x43000000
 8001354:	437a0000 	.word	0x437a0000
 8001358:	08011688 	.word	0x08011688

0800135c <printPacket>:

void printPacket(char *data_name, float x, float y, float z)
{
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001364:	af0a      	add	r7, sp, #40	; 0x28
 8001366:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136e:	6018      	str	r0, [r3, #0]
 8001370:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001374:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001378:	ed83 0a00 	vstr	s0, [r3]
 800137c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001384:	edc3 0a00 	vstr	s1, [r3]
 8001388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800138c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001390:	ed83 1a00 	vstr	s2, [r3]
	char tempMsg[512];

	sprintf(tempMsg, "%s X: %f\r\n%s Y: %f\r\n%s Z: %f\r\n", data_name, x, data_name, y, data_name, z);
 8001394:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001398:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4680      	mov	r8, r0
 80013b6:	4689      	mov	r9, r1
 80013b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013bc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80013ce:	f5a1 7101 	sub.w	r1, r1, #516	; 0x204
 80013d2:	f107 0010 	add.w	r0, r7, #16
 80013d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9306      	str	r3, [sp, #24]
 80013e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	e9cd 4500 	strd	r4, r5, [sp]
 80013fa:	680a      	ldr	r2, [r1, #0]
 80013fc:	490a      	ldr	r1, [pc, #40]	; (8001428 <printPacket+0xcc>)
 80013fe:	f00c fe31 	bl	800e064 <siprintf>

	HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 20);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff52 	bl	80002b0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	2314      	movs	r3, #20
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <printPacket+0xd0>)
 8001418:	f006 f98f 	bl	800773a <HAL_USART_Transmit>
}
 800141c:	bf00      	nop
 800141e:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001428:	08011698 	.word	0x08011698
 800142c:	20001e5c 	.word	0x20001e5c

08001430 <StartIMUPacketProcessTask>:

void StartIMUPacketProcessTask(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	uint64_t packet;
	for (;;)
	{
		// should probably check to make sure queues are in valid state
		packet = dequeueAccelerationPacket();
 8001438:	f7ff fe58 	bl	80010ec <dequeueAccelerationPacket>
 800143c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAccelerationPacket(packet);
 8001440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001444:	f7ff feee 	bl	8001224 <processAccelerationPacket>

		packet = dequeueAngularRatePacket();
 8001448:	f7ff fe9e 	bl	8001188 <dequeueAngularRatePacket>
 800144c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		// need to check if packet valid
		processAngularRatePacket(packet);
 8001450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001454:	f7ff ff34 	bl	80012c0 <processAngularRatePacket>

		osDelay(500);
 8001458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145c:	f009 fd00 	bl	800ae60 <osDelay>
		packet = dequeueAccelerationPacket();
 8001460:	e7ea      	b.n	8001438 <StartIMUPacketProcessTask+0x8>
	...

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001478:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_ADC1_Init+0x240>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014a6:	4a80      	ldr	r2, [pc, #512]	; (80016a8 <MX_ADC1_Init+0x244>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	4876      	ldr	r0, [pc, #472]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014c6:	f001 fee3 	bl	8003290 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fcc6 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014dc:	2303      	movs	r3, #3
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	486e      	ldr	r0, [pc, #440]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80014e6:	f002 f83b 	bl	8003560 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fcb6 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4867      	ldr	r0, [pc, #412]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001502:	f002 f82d 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 fca8 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001510:	2302      	movs	r3, #2
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4860      	ldr	r0, [pc, #384]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800151e:	f002 f81f 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001528:	f000 fc9a 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800152c:	2303      	movs	r3, #3
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4859      	ldr	r0, [pc, #356]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800153a:	f002 f811 	bl	8003560 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001544:	f000 fc8c 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001548:	2304      	movs	r3, #4
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800154c:	2305      	movs	r3, #5
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4852      	ldr	r0, [pc, #328]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001556:	f002 f803 	bl	8003560 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fc7e 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001564:	2305      	movs	r3, #5
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001568:	2306      	movs	r3, #6
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	484b      	ldr	r0, [pc, #300]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001572:	f001 fff5 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800157c:	f000 fc70 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4844      	ldr	r0, [pc, #272]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800158e:	f001 ffe7 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001598:	f000 fc62 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800159c:	2307      	movs	r3, #7
 800159e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015a0:	2308      	movs	r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	483d      	ldr	r0, [pc, #244]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015aa:	f001 ffd9 	bl	8003560 <HAL_ADC_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80015b4:	f000 fc54 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015b8:	2308      	movs	r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80015bc:	2309      	movs	r3, #9
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015c6:	f001 ffcb 	bl	8003560 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80015d0:	f000 fc46 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d4:	2309      	movs	r3, #9
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015e2:	f001 ffbd 	bl	8003560 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80015ec:	f000 fc38 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f0:	230a      	movs	r3, #10
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80015f4:	230b      	movs	r3, #11
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_ADC1_Init+0x23c>)
 80015fe:	f001 ffaf 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 fc2a 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	230b      	movs	r3, #11
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001610:	230c      	movs	r3, #12
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800161a:	f001 ffa1 	bl	8003560 <HAL_ADC_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001624:	f000 fc1c 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001628:	230c      	movs	r3, #12
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800162c:	230d      	movs	r3, #13
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001636:	f001 ff93 	bl	8003560 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001640:	f000 fc0e 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001644:	230d      	movs	r3, #13
 8001646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001648:	230e      	movs	r3, #14
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_ADC1_Init+0x23c>)
 8001652:	f001 ff85 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800165c:	f000 fc00 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001660:	230e      	movs	r3, #14
 8001662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001664:	230f      	movs	r3, #15
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800166e:	f001 ff77 	bl	8003560 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001678:	f000 fbf2 	bl	8001e60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800167c:	230f      	movs	r3, #15
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001680:	2310      	movs	r3, #16
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_ADC1_Init+0x23c>)
 800168a:	f001 ff69 	bl	8003560 <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001694:	f000 fbe4 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000a80 	.word	0x20000a80
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_ADC_MspInit+0x144>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 808b 	bne.w	80017e6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	; 0x30
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	; 0x30
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0x148>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001740:	233f      	movs	r3, #63	; 0x3f
 8001742:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4829      	ldr	r0, [pc, #164]	; (80017f8 <HAL_ADC_MspInit+0x14c>)
 8001754:	f002 ff40 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001758:	23ff      	movs	r3, #255	; 0xff
 800175a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <HAL_ADC_MspInit+0x150>)
 800176c:	f002 ff34 	bl	80045d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0x154>)
 8001784:	f002 ff28 	bl	80045d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800178a:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <HAL_ADC_MspInit+0x15c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x158>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_ADC_MspInit+0x158>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017cc:	f002 fb94 	bl	8003ef8 <HAL_DMA_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 80017d6:	f000 fb43 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_ADC_MspInit+0x158>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3730      	adds	r7, #48	; 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	20000ac8 	.word	0x20000ac8
 8001808:	40026410 	.word	0x40026410

0800180c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	newData_thermistor = 1;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_ADC_ConvCpltCallback+0x20>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	newData_shock_pot = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_ADC_ConvCpltCallback+0x24>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000a7c 	.word	0x20000a7c
 8001830:	20000a78 	.word	0x20000a78

08001834 <StartAdcDma>:

void StartAdcDma(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	const int DELAY = 500;
 800183c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001840:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_Readings, adc_channel_count);
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <StartAdcDma+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <StartAdcDma+0x28>)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <StartAdcDma+0x2c>)
 800184c:	f001 fd64 	bl	8003318 <HAL_ADC_Start_DMA>

	osDelay(DELAY);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f009 fb05 	bl	800ae60 <osDelay>
  {
 8001856:	e7f4      	b.n	8001842 <StartAdcDma+0xe>
 8001858:	20000000 	.word	0x20000000
 800185c:	20000a38 	.word	0x20000a38
 8001860:	20000a80 	.word	0x20000a80

08001864 <CAN_Polling>:
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef CAN_Polling(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	int a = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 800186a:	2100      	movs	r1, #0
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <CAN_Polling+0x3c>)
 800186e:	f002 fa39 	bl	8003ce4 <HAL_CAN_GetRxFifoFillLevel>
 8001872:	4603      	mov	r3, r0
 8001874:	607b      	str	r3, [r7, #4]
	if (a < 1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dc01      	bgt.n	8001880 <CAN_Polling+0x1c>
	{
		return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00b      	b.n	8001898 <CAN_Polling+0x34>
	}

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CAN_Polling+0x40>)
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <CAN_Polling+0x44>)
 8001884:	2100      	movs	r1, #0
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <CAN_Polling+0x3c>)
 8001888:	f002 f91a 	bl	8003ac0 <HAL_CAN_GetRxMessage>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <CAN_Polling+0x32>
	{
		return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <CAN_Polling+0x34>
	}

	return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000b4c 	.word	0x20000b4c
 80018a4:	20000b44 	.word	0x20000b44
 80018a8:	20000b28 	.word	0x20000b28

080018ac <StartCanTask>:

void StartCanTask(void const * argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
//	imuState state;
//	char canMsg[40];
	for (;;)
	{
		if (CAN_Polling() == HAL_OK)
 80018b4:	f7ff ffd6 	bl	8001864 <CAN_Polling>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <StartCanTask+0x3c>
		{
			if (RxHeader.IDE == CAN_ID_EXT)
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <StartCanTask+0x48>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d110      	bne.n	80018e8 <StartCanTask+0x3c>
			{
				switch (RxHeader.ExtId)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <StartCanTask+0x48>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <StartCanTask+0x4c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <StartCanTask+0x2c>
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <StartCanTask+0x50>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <StartCanTask+0x34>
 80018d6:	e007      	b.n	80018e8 <StartCanTask+0x3c>
				{
					case IMU_ACCELERATION_CAN_EXT_ID:
						queueAccelerationPacket(RxData);
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <StartCanTask+0x54>)
 80018da:	f7ff fb53 	bl	8000f84 <queueAccelerationPacket>
//						imuProcessAccelerationPacket(&state, RxData);
//						sprintf(canMsg, "IMU Acceleration Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018de:	e003      	b.n	80018e8 <StartCanTask+0x3c>
					case IMU_ANGULAR_RATE_CAN_EXT_ID:
						queueAngularRatePacket(RxData);
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <StartCanTask+0x54>)
 80018e2:	f7ff fba9 	bl	8001038 <queueAngularRatePacket>
//						imuProcessAngularRatePacket(&state, RxData);
//						sprintf(canMsg, "IMU Angular Rate Packet\r\n");
//						HAL_USART_Transmit(&husart1, (uint8_t *) canMsg, strlen(canMsg)+1, 10);
						break;
 80018e6:	bf00      	nop
				/* Logging Starts */

				/* Logging Ends */
			}
		}
		osDelay(500);
 80018e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ec:	f009 fab8 	bl	800ae60 <osDelay>
		if (CAN_Polling() == HAL_OK)
 80018f0:	e7e0      	b.n	80018b4 <StartCanTask+0x8>
 80018f2:	bf00      	nop
 80018f4:	20000b28 	.word	0x20000b28
 80018f8:	08f02d80 	.word	0x08f02d80
 80018fc:	0cf02a80 	.word	0x0cf02a80
 8001900:	20000b44 	.word	0x20000b44

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	2038      	movs	r0, #56	; 0x38
 800192c:	f002 faba 	bl	8003ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f002 fad3 	bl	8003edc <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00000000 	.word	0x00000000

08001948 <calculateFlowrate>:
const int DELAY = 500;													// time in ms
static const double conversionFactor = (1000/DELAY)*(1.0/1000.0);		// convert L/s to m^3/s
extern volatile int flowmeter_pulse_count;

// gets flowrate as m^3/s
double calculateFlowrate(){
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	volatile double flowrate;

	flowrate = flowmeter_pulse_count*conversionFactor/PPL;	// calculate flowrate
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <calculateFlowrate+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe06 	bl	8000564 <__aeabi_i2d>
 8001958:	a313      	add	r3, pc, #76	; (adr r3, 80019a8 <calculateFlowrate+0x60>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe6b 	bl	8000638 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	f640 0398 	movw	r3, #2200	; 0x898
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdf8 	bl	8000564 <__aeabi_i2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe ff86 	bl	800088c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2300 	strd	r2, r3, [r7]
	flowmeter_pulse_count = 0;								// reset pulse_count
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <calculateFlowrate+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

	return flowrate;
 800198e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001992:	ec43 2b17 	vmov	d7, r2, r3
}
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019ac:	3f60624d 	.word	0x3f60624d
 80019b0:	20001d30 	.word	0x20001d30

080019b4 <StartGetFlowrateTask>:

// calculates flowrate every DELAY ms
void StartGetFlowrateTask(void const * argument){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	volatile double flowrate;
	char tempMsg[50];
	char* time;

	for (;;){
		flowrate = calculateFlowrate();		// calculates flowrate
 80019bc:	f7ff ffc4 	bl	8001948 <calculateFlowrate>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

		/* TODO SCU#35 */
		/* Logging Starts */
		time = get_time();
 80019cc:	f000 fa9e 	bl	8001f0c <get_time>
 80019d0:	64f8      	str	r0, [r7, #76]	; 0x4c
		HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80019d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019d4:	f7fe fc6c 	bl	80002b0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	230a      	movs	r3, #10
 80019de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019e0:	480e      	ldr	r0, [pc, #56]	; (8001a1c <StartGetFlowrateTask+0x68>)
 80019e2:	f005 feaa 	bl	800773a <HAL_USART_Transmit>

		sprintf(tempMsg, ",%f,,,,\r\n", flowrate);
 80019e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <StartGetFlowrateTask+0x6c>)
 80019f0:	f00c fb38 	bl	800e064 <siprintf>
		HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc59 	bl	80002b0 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f107 010c 	add.w	r1, r7, #12
 8001a06:	230a      	movs	r3, #10
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <StartGetFlowrateTask+0x68>)
 8001a0a:	f005 fe96 	bl	800773a <HAL_USART_Transmit>
		/* Logging Ends */

		osDelay(DELAY);
 8001a0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 fa24 	bl	800ae60 <osDelay>
		flowrate = calculateFlowrate();		// calculates flowrate
 8001a18:	e7d0      	b.n	80019bc <StartGetFlowrateTask+0x8>
 8001a1a:	bf00      	nop
 8001a1c:	20001e5c 	.word	0x20001e5c
 8001a20:	080116b8 	.word	0x080116b8

08001a24 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <vApplicationGetIdleTaskMemory+0x30>)
 8001a3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20001430 	.word	0x20001430
 8001a54:	200014d0 	.word	0x200014d0

08001a58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b0b8      	sub	sp, #224	; 0xe0
 8001a5c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <MX_FREERTOS_Init+0x13c>)
 8001a60:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001a64:	461d      	mov	r5, r3
 8001a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f009 f9a5 	bl	800adc8 <osThreadCreate>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a45      	ldr	r2, [pc, #276]	; (8001b98 <MX_FREERTOS_Init+0x140>)
 8001a82:	6013      	str	r3, [r2, #0]

  /* definition and creation of readAdcTask */
  osThreadStaticDef(readAdcTask, StartAdcDma, osPriorityNormal, 0, 512, readAdcTaskBuffer, &readAdcTaskControlBlock);
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <MX_FREERTOS_Init+0x144>)
 8001a86:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAdcTaskHandle = osThreadCreate(osThread(readAdcTask), NULL);
 8001a98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f009 f992 	bl	800adc8 <osThreadCreate>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a3e      	ldr	r2, [pc, #248]	; (8001ba0 <MX_FREERTOS_Init+0x148>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(readTempTask, StartReadTempTask, osPriorityNormal, 0, 512);
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <MX_FREERTOS_Init+0x14c>)
 8001aac:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readTempTask), NULL);
 8001abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f009 f97f 	bl	800adc8 <osThreadCreate>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <MX_FREERTOS_Init+0x150>)
 8001ace:	6013      	str	r3, [r2, #0]

  // Shock Pot Reading Thread
  osThreadDef(readDistTask, StartReadDistTask, osPriorityNormal, 0, 512);
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <MX_FREERTOS_Init+0x154>)
 8001ad2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempTaskHandle = osThreadCreate(osThread(readDistTask), NULL);
 8001ae4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f009 f96c 	bl	800adc8 <osThreadCreate>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <MX_FREERTOS_Init+0x150>)
 8001af4:	6013      	str	r3, [r2, #0]

  // Flow Meter Reading Thread
  osThreadDef(readFlowmeterTask, StartGetFlowrateTask, osPriorityNormal, 0, 512);
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <MX_FREERTOS_Init+0x158>)
 8001af8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001afc:	461d      	mov	r5, r3
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readFlowmeterTaskHandle = osThreadCreate(osThread(readFlowmeterTask), NULL);
 8001b0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f009 f959 	bl	800adc8 <osThreadCreate>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <MX_FREERTOS_Init+0x15c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  // CAN Receiver Thread
  osThreadDef(canReceiverTask, StartCanTask, osPriorityNormal, 0, 512);
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_FREERTOS_Init+0x160>)
 8001b1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b22:	461d      	mov	r5, r3
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canReceiverTaskHandle = osThreadCreate(osThread(canReceiverTask), NULL);
 8001b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 f946 	bl	800adc8 <osThreadCreate>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <MX_FREERTOS_Init+0x164>)
 8001b40:	6013      	str	r3, [r2, #0]

  // IMU Packet Processing Thread
  osThreadDef(imuPacketProcessTask, StartIMUPacketProcessTask, osPriorityNormal, 0, 512);
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_FREERTOS_Init+0x168>)
 8001b44:	f107 041c 	add.w	r4, r7, #28
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuPacketProcessHandle = osThreadCreate(osThread(imuPacketProcessTask), NULL);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 f933 	bl	800adc8 <osThreadCreate>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <MX_FREERTOS_Init+0x16c>)
 8001b66:	6013      	str	r3, [r2, #0]

  // Wheel Speed Reading Thread
  osThreadDef(readWheelSpeedsTask, StartGetWheelSpeedTask, osPriorityNormal, 0, 512);
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_FREERTOS_Init+0x170>)
 8001b6a:	463c      	mov	r4, r7
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readWheelSpeedsHandle = osThreadCreate(osThread(readWheelSpeedsTask), NULL);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f009 f922 	bl	800adc8 <osThreadCreate>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <MX_FREERTOS_Init+0x174>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001b8a:	bf00      	nop
 8001b8c:	37e0      	adds	r7, #224	; 0xe0
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	080116d0 	.word	0x080116d0
 8001b98:	20000b88 	.word	0x20000b88
 8001b9c:	080116f8 	.word	0x080116f8
 8001ba0:	20000b8c 	.word	0x20000b8c
 8001ba4:	08011724 	.word	0x08011724
 8001ba8:	20000b74 	.word	0x20000b74
 8001bac:	08011750 	.word	0x08011750
 8001bb0:	08011780 	.word	0x08011780
 8001bb4:	20000b78 	.word	0x20000b78
 8001bb8:	080117ac 	.word	0x080117ac
 8001bbc:	20000b7c 	.word	0x20000b7c
 8001bc0:	080117e0 	.word	0x080117e0
 8001bc4:	20000b80 	.word	0x20000b80
 8001bc8:	08011810 	.word	0x08011810
 8001bcc:	20000b84 	.word	0x20000b84

08001bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f009 f941 	bl	800ae60 <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <StartDefaultTask+0x8>

08001be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_GPIO_Init+0xb4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c52:	f002 fe55 	bl	8004900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	480b      	ldr	r0, [pc, #44]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c6a:	f002 fcb5 	bl	80045d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xb8>)
 8001c88:	f002 fca6 	bl	80045d8 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca6:	f001 fab1 	bl	800320c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001caa:	f000 f863 	bl	8001d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cae:	f7ff ff97 	bl	8001be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb2:	f7ff fe27 	bl	8001904 <MX_DMA_Init>
  MX_ADC1_Init();
 8001cb6:	f7ff fbd5 	bl	8001464 <MX_ADC1_Init>
  MX_USART1_Init();
 8001cba:	f001 f9a3 	bl	8003004 <MX_USART1_Init>
  MX_TIM12_Init();
 8001cbe:	f000 ffd1 	bl	8002c64 <MX_TIM12_Init>
//  MX_CAN1_Init();
  MX_TIM3_Init();
 8001cc2:	f000 fe87 	bl	80029d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cc6:	f000 ff05 	bl	8002ad4 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001cca:	f006 f8b5 	bl	8007e38 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cce:	f000 fa8f 	bl	80021f0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001cd2:	f000 f8cb 	bl	8001e6c <MX_RTC_Init>
  MX_TIM11_Init();
 8001cd6:	f000 ff7d 	bl	8002bd4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1); 		// Start input capture
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4820      	ldr	r0, [pc, #128]	; (8001d60 <main+0xc0>)
 8001cde:	f004 fdeb 	bl	80068b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); 		// Start input capture
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	481f      	ldr	r0, [pc, #124]	; (8001d64 <main+0xc4>)
 8001ce6:	f004 fde7 	bl	80068b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); 		// Start input capture
 8001cea:	2100      	movs	r1, #0
 8001cec:	481e      	ldr	r0, [pc, #120]	; (8001d68 <main+0xc8>)
 8001cee:	f004 fde3 	bl	80068b8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1); 		// Start input capture
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	481d      	ldr	r0, [pc, #116]	; (8001d6c <main+0xcc>)
 8001cf6:	f004 fddf 	bl	80068b8 <HAL_TIM_IC_Start_IT>
  // Init_SD_Card();

  FRESULT fres_mount = sd_mount();
 8001cfa:	f000 f93b 	bl	8001f74 <sd_mount>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  // DSTATUS dres = disk_status(0);

  FRESULT fres_open_file = sd_open_log_file();
 8001d04:	f000 f944 	bl	8001f90 <sd_open_log_file>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  //char start_time[20] = get_time();

  for(int i = 0; i < 1910; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e014      	b.n	8001d3e <main+0x9e>
	#define BUF_LEN 21
	char buff[BUF_LEN];

	uint32_t length = snprintf(buff, BUF_LEN, "%f\n", 333.333f) + 1;
 8001d14:	1d38      	adds	r0, r7, #4
 8001d16:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <main+0xb8>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <main+0xd0>)
 8001d22:	2115      	movs	r1, #21
 8001d24:	f00c f96a 	bl	800dffc <sniprintf>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]

	sd_log_to_file(buff, length);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	69f9      	ldr	r1, [r7, #28]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f95a 	bl	8001fec <sd_log_to_file>
  for(int i = 0; i < 1910; i++) {
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	f240 7275 	movw	r2, #1909	; 0x775
 8001d44:	4293      	cmp	r3, r2
 8001d46:	dde5      	ble.n	8001d14 <main+0x74>
//  sd_eject();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d48:	f7ff fe86 	bl	8001a58 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d4c:	f009 f835 	bl	800adba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <main+0xb0>
 8001d52:	bf00      	nop
 8001d54:	f3af 8000 	nop.w
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	4074d554 	.word	0x4074d554
 8001d60:	20001dcc 	.word	0x20001dcc
 8001d64:	20001d3c 	.word	0x20001d3c
 8001d68:	20001d84 	.word	0x20001d84
 8001d6c:	20001e14 	.word	0x20001e14
 8001d70:	0801182c 	.word	0x0801182c

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	; 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2234      	movs	r2, #52	; 0x34
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00c f9d1 	bl	800e12a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	f107 0308 	add.w	r3, r7, #8
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <SystemClock_Config+0xc0>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <SystemClock_Config+0xc0>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <SystemClock_Config+0xc0>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <SystemClock_Config+0xc4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <SystemClock_Config+0xc4>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <SystemClock_Config+0xc4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001dd4:	230a      	movs	r3, #10
 8001dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de0:	2310      	movs	r3, #16
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001de4:	2301      	movs	r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fbbf 	bl	8005574 <HAL_RCC_OscConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dfc:	f000 f830 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e00:	230f      	movs	r3, #15
 8001e02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fd8a 	bl	8004934 <HAL_RCC_ClockConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e26:	f000 f81b 	bl	8001e60 <Error_Handler>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3750      	adds	r7, #80	; 0x50
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4e:	f001 f9ff 	bl	8003250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40014400 	.word	0x40014400

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <MX_RTC_Init+0x48>)
 8001e74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e7e:	227f      	movs	r2, #127	; 0x7f
 8001e80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e84:	22ff      	movs	r2, #255	; 0xff
 8001e86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_RTC_Init+0x44>)
 8001e9c:	f003 fe08 	bl	8005ab0 <HAL_RTC_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ea6:	f7ff ffdb 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200016d0 	.word	0x200016d0
 8001eb4:	40002800 	.word	0x40002800

08001eb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09a      	sub	sp, #104	; 0x68
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	225c      	movs	r2, #92	; 0x5c
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00c f92e 	bl	800e12a <memset>
  if(rtcHandle->Instance==RTC)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RTC_MspInit+0x4c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fe70 	bl	8004bcc <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ef2:	f7ff ffb5 	bl	8001e60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RTC_MspInit+0x50>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001efc:	bf00      	nop
 8001efe:	3768      	adds	r7, #104	; 0x68
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40002800 	.word	0x40002800
 8001f08:	42470e3c 	.word	0x42470e3c

08001f0c <get_time>:
//	time[0] = 'a';
//	time[1] = '\0';
//	return time;
//}
char* get_time(void)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af02      	add	r7, sp, #8
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	 static char time[20];

	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4813      	ldr	r0, [pc, #76]	; (8001f68 <get_time+0x5c>)
 8001f1a:	f003 fe3f 	bl	8005b9c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <get_time+0x5c>)
 8001f28:	f003 fe96 	bl	8005c58 <HAL_RTC_GetDate>

	/* Display time Format: hh:mm:ss.SS */
	 sprintf(time, "%02u:%02u:%02u.%02lu", gTime.Hours, gTime.Minutes, gTime.Seconds, (uint32_t) (gTime.SecondFraction - gTime.SubSeconds) * 100 / (gTime.SecondFraction + 1));
 8001f2c:	783b      	ldrb	r3, [r7, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	461c      	mov	r4, r3
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	4619      	mov	r1, r3
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2264      	movs	r2, #100	; 0x64
 8001f40:	fb03 f202 	mul.w	r2, r3, r2
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3301      	adds	r3, #1
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	9100      	str	r1, [sp, #0]
 8001f50:	4623      	mov	r3, r4
 8001f52:	4602      	mov	r2, r0
 8001f54:	4905      	ldr	r1, [pc, #20]	; (8001f6c <get_time+0x60>)
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <get_time+0x64>)
 8001f58:	f00c f884 	bl	800e064 <siprintf>

	 return time;
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <get_time+0x64>)
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200016d0 	.word	0x200016d0
 8001f6c:	08011830 	.word	0x08011830
 8001f70:	200016f0 	.word	0x200016f0

08001f74 <sd_mount>:
FIL logFile; 	//File handle

uint32_t write_count = 0; // how many writes have occured since we've synced them
uint32_t log_index = 0;

FRESULT sd_mount(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	return f_mount(&FatFs, "", 1);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4903      	ldr	r1, [pc, #12]	; (8001f88 <sd_mount+0x14>)
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <sd_mount+0x18>)
 8001f7e:	f008 f9f5 	bl	800a36c <f_mount>
 8001f82:	4603      	mov	r3, r0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08011858 	.word	0x08011858
 8001f8c:	20001704 	.word	0x20001704

08001f90 <sd_open_log_file>:

FRESULT sd_open_log_file(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b092      	sub	sp, #72	; 0x48
 8001f94:	af00      	add	r7, sp, #0
	FRESULT fres = FR_NOT_READY;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	char LOG_BUFFER[64] = {0};
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	223c      	movs	r2, #60	; 0x3c
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00c f8be 	bl	800e12a <memset>

	snprintf(LOG_BUFFER, 64, LOG_FILE, log_index++);
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <sd_open_log_file+0x50>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <sd_open_log_file+0x50>)
 8001fb6:	600a      	str	r2, [r1, #0]
 8001fb8:	1d38      	adds	r0, r7, #4
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <sd_open_log_file+0x54>)
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	f00c f81d 	bl	800dffc <sniprintf>
	fres = f_open(&logFile, LOG_BUFFER, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	221a      	movs	r2, #26
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <sd_open_log_file+0x58>)
 8001fca:	f008 fa33 	bl	800a434 <f_open>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	return fres;
 8001fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3748      	adds	r7, #72	; 0x48
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20001b6c 	.word	0x20001b6c
 8001fe4:	0801185c 	.word	0x0801185c
 8001fe8:	20001938 	.word	0x20001938

08001fec <sd_log_to_file>:

FRESULT sd_log_to_file(char *buff, UINT n) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	UINT bytesWritten;
	FRESULT fres = f_write(&logFile, buff, n, &bytesWritten);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4812      	ldr	r0, [pc, #72]	; (8002048 <sd_log_to_file+0x5c>)
 8002000:	f008 fbdd 	bl	800a7be <f_write>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]

	if(fres == FR_OK) {
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <sd_log_to_file+0x50>
		write_count++;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <sd_log_to_file+0x60>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <sd_log_to_file+0x60>)
 8002016:	6013      	str	r3, [r2, #0]
		if(write_count % WRITES_UNTIL_SYNC == 0) { // check if time to sync
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <sd_log_to_file+0x60>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <sd_log_to_file+0x64>)
 800201e:	fba3 1302 	umull	r1, r3, r3, r2
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2164      	movs	r1, #100	; 0x64
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <sd_log_to_file+0x50>
			f_sync(&logFile); // sync, if we didn't do this file write wouldn't be pushed to the sd card and we've have to close the file to write them
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <sd_log_to_file+0x5c>)
 8002032:	f008 fd68 	bl	800ab06 <f_sync>
			write_count = 0;
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <sd_log_to_file+0x60>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
		}
	}

	return fres;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20001938 	.word	0x20001938
 800204c:	20001b68 	.word	0x20001b68
 8002050:	51eb851f 	.word	0x51eb851f

08002054 <getDistance>:
// INPUT PARAMTERS:
//			voltage - voltage measured across the shock pot
//
// RETURN:	distance in mm of type double
//*********************************************************************
double getDistance(double voltage){
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	ed87 0b00 	vstr	d0, [r7]
	double dist = MAX_DIST * voltage / vDD;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <getDistance+0x58>)
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa91 	bl	8000588 <__aeabi_f2d>
 8002066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800206a:	f7fe fae5 	bl	8000638 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4614      	mov	r4, r2
 8002074:	461d      	mov	r5, r3
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <getDistance+0x5c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fa84 	bl	8000588 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4620      	mov	r0, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f7fe fc00 	bl	800088c <__aeabi_ddiv>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return dist;
 8002094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002098:	ec43 2b17 	vmov	d7, r2, r3
}
 800209c:	eeb0 0a47 	vmov.f32	s0, s14
 80020a0:	eef0 0a67 	vmov.f32	s1, s15
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	42480000 	.word	0x42480000
 80020b0:	08011908 	.word	0x08011908

080020b4 <StartReadDistTask>:
// readDist_task
//
// PURPOSE: Main loop for freeRTOS thread. Waits for ADC conversion and
//			translates voltages into distance
//*********************************************************************
void StartReadDistTask(void const * argument){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80020ba:	af02      	add	r7, sp, #8
 80020bc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80020c0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80020c4:	6018      	str	r0, [r3, #0]
	char msgDist[20];
	float voltages[16];
	char distMsg[50];

	for (;;){
		if (newData_shock_pot == 1){
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <StartReadDistTask+0x120>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d17d      	bne.n	80021ca <StartReadDistTask+0x116>
			// calculate distances for each ADC channel
			for(int i = 0; i < 16; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80020d4:	e05d      	b.n	8002192 <StartReadDistTask+0xde>
				  voltages[i] = ADC_TO_Voltage * ADC_Readings[i];
 80020d6:	4a40      	ldr	r2, [pc, #256]	; (80021d8 <StartReadDistTask+0x124>)
 80020d8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa2f 	bl	8000544 <__aeabi_ui2d>
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <StartReadDistTask+0x128>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe faa4 	bl	8000638 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd76 	bl	8000be8 <__aeabi_d2f>
 80020fc:	4601      	mov	r1, r0
 80020fe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002102:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002106:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	6019      	str	r1, [r3, #0]
				  dist[i] = getDistance(voltages[i]);
 8002110:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002114:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002118:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa30 	bl	8000588 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	ec43 2b10 	vmov	d0, r2, r3
 8002130:	f7ff ff90 	bl	8002054 <getDistance>
 8002134:	eeb0 7a40 	vmov.f32	s14, s0
 8002138:	eef0 7a60 	vmov.f32	s15, s1
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <StartReadDistTask+0x12c>)
 800213e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	ed83 7b00 	vstr	d7, [r3]
				  sprintf(msgDist, "ADC %d %.5f \n", i, voltages[i]);
 800214a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800214e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002152:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fa13 	bl	8000588 <__aeabi_f2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800216a:	e9cd 2300 	strd	r2, r3, [sp]
 800216e:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8002172:	491c      	ldr	r1, [pc, #112]	; (80021e4 <StartReadDistTask+0x130>)
 8002174:	f00b ff76 	bl	800e064 <siprintf>
				  strcat(msg,msgDist);
 8002178:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800217c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f00b ffd9 	bl	800e13a <strcat>
			for(int i = 0; i < 16; i++) {
 8002188:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800218c:	3301      	adds	r3, #1
 800218e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002192:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002196:	2b0f      	cmp	r3, #15
 8002198:	dd9d      	ble.n	80020d6 <StartReadDistTask+0x22>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			// add ADC channel 0 to message
			sprintf(distMsg, "Distance: %f\r\n", dist[0]);
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <StartReadDistTask+0x12c>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f107 000c 	add.w	r0, r7, #12
 80021a4:	4910      	ldr	r1, [pc, #64]	; (80021e8 <StartReadDistTask+0x134>)
 80021a6:	f00b ff5d 	bl	800e064 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) distMsg, strlen(distMsg), 10);
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f87e 	bl	80002b0 <strlen>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	f107 010c 	add.w	r1, r7, #12
 80021bc:	230a      	movs	r3, #10
 80021be:	480b      	ldr	r0, [pc, #44]	; (80021ec <StartReadDistTask+0x138>)
 80021c0:	f005 fabb 	bl	800773a <HAL_USART_Transmit>
			/* Logging Ends */

			newData_shock_pot = 0;					// reset ADC conversion flag
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <StartReadDistTask+0x120>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
		}

		// wait 500ms
		osDelay(500);
 80021ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021ce:	f008 fe47 	bl	800ae60 <osDelay>
		if (newData_shock_pot == 1){
 80021d2:	e778      	b.n	80020c6 <StartReadDistTask+0x12>
 80021d4:	20000a78 	.word	0x20000a78
 80021d8:	20000a38 	.word	0x20000a38
 80021dc:	08011900 	.word	0x08011900
 80021e0:	20001b70 	.word	0x20001b70
 80021e4:	08011868 	.word	0x08011868
 80021e8:	08011878 	.word	0x08011878
 80021ec:	20001e5c 	.word	0x20001e5c

080021f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_SPI1_Init+0x64>)
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <MX_SPI1_Init+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_SPI1_Init+0x64>)
 80021fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_SPI1_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_SPI1_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_SPI1_Init+0x64>)
 800221c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_SPI1_Init+0x64>)
 8002224:	2230      	movs	r2, #48	; 0x30
 8002226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_SPI1_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <MX_SPI1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_SPI1_Init+0x64>)
 800223c:	220a      	movs	r2, #10
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_SPI1_Init+0x64>)
 8002242:	f003 fdf8 	bl	8005e36 <HAL_SPI_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800224c:	f7ff fe08 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20001bf0 	.word	0x20001bf0
 8002258:	40013000 	.word	0x40013000

0800225c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_SPI_MspInit+0x84>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d12b      	bne.n	80022d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 8002288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_SPI_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022b6:	2338      	movs	r3, #56	; 0x38
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022c6:	2305      	movs	r3, #5
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_SPI_MspInit+0x8c>)
 80022d2:	f002 f981 	bl	80045d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013000 	.word	0x40013000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020400 	.word	0x40020400

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_MspInit+0x54>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_MspInit+0x54>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_MspInit+0x54>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_MspInit+0x54>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_MspInit+0x54>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_MspInit+0x54>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	210f      	movs	r1, #15
 800232e:	f06f 0001 	mvn.w	r0, #1
 8002332:	f001 fdb7 	bl	8003ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_InitTick+0xd0>)
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <HAL_InitTick+0xd0>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	6453      	str	r3, [r2, #68]	; 0x44
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_InitTick+0xd0>)
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fbf4 	bl	8004b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002380:	f002 fbde 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8002384:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <HAL_InitTick+0xd4>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	3b01      	subs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_InitTick+0xd8>)
 8002396:	4a22      	ldr	r2, [pc, #136]	; (8002420 <HAL_InitTick+0xdc>)
 8002398:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_InitTick+0xd8>)
 800239c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_InitTick+0xd8>)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HAL_InitTick+0xd8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_InitTick+0xd8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_InitTick+0xd8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <HAL_InitTick+0xd8>)
 80023bc:	f004 f96c 	bl	8006698 <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d11b      	bne.n	8002406 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80023ce:	4813      	ldr	r0, [pc, #76]	; (800241c <HAL_InitTick+0xd8>)
 80023d0:	f004 f9b2 	bl	8006738 <HAL_TIM_Base_Start_IT>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d111      	bne.n	8002406 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023e2:	2019      	movs	r0, #25
 80023e4:	f001 fd7a 	bl	8003edc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	d808      	bhi.n	8002400 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023ee:	2200      	movs	r2, #0
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	2019      	movs	r0, #25
 80023f4:	f001 fd56 	bl	8003ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_InitTick+0xe0>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e002      	b.n	8002406 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800240a:	4618      	mov	r0, r3
 800240c:	3730      	adds	r7, #48	; 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	431bde83 	.word	0x431bde83
 800241c:	20001c48 	.word	0x20001c48
 8002420:	40014400 	.word	0x40014400
 8002424:	20000008 	.word	0x20000008

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800245a:	f004 fb55 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001c48 	.word	0x20001c48

08002468 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800246e:	f004 fb4b 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20001dcc 	.word	0x20001dcc

0800247c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM3_IRQHandler+0x10>)
 8002482:	f004 fb41 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20001d3c 	.word	0x20001d3c

08002490 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM4_IRQHandler+0x10>)
 8002496:	f004 fb37 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20001d84 	.word	0x20001d84

080024a4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80024aa:	f004 fb2d 	bl	8006b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20001e14 	.word	0x20001e14

080024b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA2_Stream0_IRQHandler+0x10>)
 80024be:	f001 fe21 	bl	8004104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000ac8 	.word	0x20000ac8

080024cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	return 1;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_kill>:

int _kill(int pid, int sig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024e6:	f00b fed7 	bl	800e298 <__errno>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2216      	movs	r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
	return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_exit>:

void _exit (int status)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ffe7 	bl	80024dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800250e:	e7fe      	b.n	800250e <_exit+0x12>

08002510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e00a      	b.n	8002538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002522:	f3af 8000 	nop.w
 8002526:	4601      	mov	r1, r0
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	dbf0      	blt.n	8002522 <_read+0x12>
	}

return len;
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e009      	b.n	8002570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60ba      	str	r2, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf1      	blt.n	800255c <_write+0x12>
	}
	return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_close>:

int _close(int file)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025aa:	605a      	str	r2, [r3, #4]
	return 0;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_isatty>:

int _isatty(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	return 1;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
	return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f00b fe3c 	bl	800e298 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20020000 	.word	0x20020000
 800264c:	00000400 	.word	0x00000400
 8002650:	20001c90 	.word	0x20001c90
 8002654:	20005dd0 	.word	0x20005dd0

08002658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <SystemInit+0x20>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <SystemInit+0x20>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00
 800267c:	00000000 	.word	0x00000000

08002680 <get_NTC_Resistance>:
double volatile naturalLogR;
double volatile temperature;
double volatile R_NTC;

// takes the input voltage and returns the resistance
void get_NTC_Resistance(double voltageReading){
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	ed87 0b00 	vstr	d0, [r7]
	if (voltageReading >= (vDD-0.1) || voltageReading <= 0){R_NTC = 0;}
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <get_NTC_Resistance+0xb0>)
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff7b 	bl	8000588 <__aeabi_f2d>
 8002692:	a325      	add	r3, pc, #148	; (adr r3, 8002728 <get_NTC_Resistance+0xa8>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	f7fd fe16 	bl	80002c8 <__aeabi_dsub>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026a4:	f7fe fa4e 	bl	8000b44 <__aeabi_dcmpge>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <get_NTC_Resistance+0x44>
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ba:	f7fe fa39 	bl	8000b30 <__aeabi_dcmple>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <get_NTC_Resistance+0x54>
 80026c4:	491b      	ldr	r1, [pc, #108]	; (8002734 <get_NTC_Resistance+0xb4>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9c1 2300 	strd	r2, r3, [r1]
 80026d2:	e025      	b.n	8002720 <get_NTC_Resistance+0xa0>
	else {R_NTC = (vDD/voltageReading - 1) * constResistance;}
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <get_NTC_Resistance+0xb0>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff56 	bl	8000588 <__aeabi_f2d>
 80026dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e0:	f7fe f8d4 	bl	800088c <__aeabi_ddiv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <get_NTC_Resistance+0xb8>)
 80026f2:	f7fd fde9 	bl	80002c8 <__aeabi_dsub>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4614      	mov	r4, r2
 80026fc:	461d      	mov	r5, r3
 80026fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd ff1e 	bl	8000544 <__aeabi_ui2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4620      	mov	r0, r4
 800270e:	4629      	mov	r1, r5
 8002710:	f7fd ff92 	bl	8000638 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4906      	ldr	r1, [pc, #24]	; (8002734 <get_NTC_Resistance+0xb4>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	9999999a 	.word	0x9999999a
 800272c:	3fb99999 	.word	0x3fb99999
 8002730:	40533333 	.word	0x40533333
 8002734:	20001d28 	.word	0x20001d28
 8002738:	3ff00000 	.word	0x3ff00000
 800273c:	00000000 	.word	0x00000000

08002740 <getTemperature>:

// takes the input voltage and returns the temperature
double getTemperature(double voltageReading){		// USING STEINHART & HART EQUATION
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	ed87 0b00 	vstr	d0, [r7]
	get_NTC_Resistance(voltageReading);
 800274a:	ed97 0b00 	vldr	d0, [r7]
 800274e:	f7ff ff97 	bl	8002680 <get_NTC_Resistance>
	if (R_NTC < 1){temperature = -1;}
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <getTemperature+0x120>)
 8002754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b41      	ldr	r3, [pc, #260]	; (8002864 <getTemperature+0x124>)
 800275e:	f7fe f9dd 	bl	8000b1c <__aeabi_dcmplt>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <getTemperature+0x36>
 8002768:	493f      	ldr	r1, [pc, #252]	; (8002868 <getTemperature+0x128>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <getTemperature+0x12c>)
 8002770:	e9c1 2300 	strd	r2, r3, [r1]
 8002774:	e051      	b.n	800281a <getTemperature+0xda>
	else{
		naturalLogR = log(R_NTC);
 8002776:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <getTemperature+0x120>)
 8002778:	ed93 7b00 	vldr	d7, [r3]
 800277c:	eeb0 0a47 	vmov.f32	s0, s14
 8002780:	eef0 0a67 	vmov.f32	s1, s15
 8002784:	f00d fe30 	bl	80103e8 <log>
 8002788:	eeb0 7a40 	vmov.f32	s14, s0
 800278c:	eef0 7a60 	vmov.f32	s15, s1
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <getTemperature+0x130>)
 8002792:	ed83 7b00 	vstr	d7, [r3]
		temperature = -273.15 + (1 / (A + B * naturalLogR + C * pow(naturalLogR, 3)));
 8002796:	a128      	add	r1, pc, #160	; (adr r1, 8002838 <getTemperature+0xf8>)
 8002798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <getTemperature+0x130>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fd ff49 	bl	8000638 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	a324      	add	r3, pc, #144	; (adr r3, 8002840 <getTemperature+0x100>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fd8a 	bl	80002cc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <getTemperature+0x130>)
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8002848 <getTemperature+0x108>
 80027ca:	eeb0 0a47 	vmov.f32	s0, s14
 80027ce:	eef0 0a67 	vmov.f32	s1, s15
 80027d2:	f00d fe47 	bl	8010464 <pow>
 80027d6:	ec51 0b10 	vmov	r0, r1, d0
 80027da:	a31d      	add	r3, pc, #116	; (adr r3, 8002850 <getTemperature+0x110>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd ff2a 	bl	8000638 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd6e 	bl	80002cc <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	491a      	ldr	r1, [pc, #104]	; (8002864 <getTemperature+0x124>)
 80027fa:	f7fe f847 	bl	800088c <__aeabi_ddiv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	a314      	add	r3, pc, #80	; (adr r3, 8002858 <getTemperature+0x118>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd fd5c 	bl	80002c8 <__aeabi_dsub>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4914      	ldr	r1, [pc, #80]	; (8002868 <getTemperature+0x128>)
 8002816:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return temperature;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <getTemperature+0x128>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	ec43 2b17 	vmov	d7, r2, r3
}
 8002824:	eeb0 0a47 	vmov.f32	s0, s14
 8002828:	eef0 0a67 	vmov.f32	s1, s15
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bdb0      	pop	{r4, r5, r7, pc}
 8002832:	bf00      	nop
 8002834:	f3af 8000 	nop.w
 8002838:	ac3ea183 	.word	0xac3ea183
 800283c:	3f314eaa 	.word	0x3f314eaa
 8002840:	f0bcee5a 	.word	0xf0bcee5a
 8002844:	3f54f675 	.word	0x3f54f675
 8002848:	00000000 	.word	0x00000000
 800284c:	40080000 	.word	0x40080000
 8002850:	61e3fc4e 	.word	0x61e3fc4e
 8002854:	3e825c55 	.word	0x3e825c55
 8002858:	66666666 	.word	0x66666666
 800285c:	40711266 	.word	0x40711266
 8002860:	20001d28 	.word	0x20001d28
 8002864:	3ff00000 	.word	0x3ff00000
 8002868:	20001d20 	.word	0x20001d20
 800286c:	bff00000 	.word	0xbff00000
 8002870:	20001d18 	.word	0x20001d18
 8002874:	00000000 	.word	0x00000000

08002878 <StartReadTempTask>:

void StartReadTempTask(void const * argument){
 8002878:	b580      	push	{r7, lr}
 800287a:	b092      	sub	sp, #72	; 0x48
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	char tempMsg[50];
	char* time;

	for (;;){
		if (newData_thermistor == 1) {
 8002880:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <StartReadTempTask+0x140>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 808a 	bne.w	800299e <StartReadTempTask+0x126>
			for(int i = 0; i < 16; i++) {
 800288a:	2300      	movs	r3, #0
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
 800288e:	e022      	b.n	80028d6 <StartReadTempTask+0x5e>
				  temperatures[i] = getTemperature(ADC_TO_Voltage * ADC_Readings[i]);
 8002890:	4a4a      	ldr	r2, [pc, #296]	; (80029bc <StartReadTempTask+0x144>)
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fe53 	bl	8000544 <__aeabi_ui2d>
 800289e:	a344      	add	r3, pc, #272	; (adr r3, 80029b0 <StartReadTempTask+0x138>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fec8 	bl	8000638 <__aeabi_dmul>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	ec43 2b17 	vmov	d7, r2, r3
 80028b0:	eeb0 0a47 	vmov.f32	s0, s14
 80028b4:	eef0 0a67 	vmov.f32	s1, s15
 80028b8:	f7ff ff42 	bl	8002740 <getTemperature>
 80028bc:	eeb0 7a40 	vmov.f32	s14, s0
 80028c0:	eef0 7a60 	vmov.f32	s15, s1
 80028c4:	4a3e      	ldr	r2, [pc, #248]	; (80029c0 <StartReadTempTask+0x148>)
 80028c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	ed83 7b00 	vstr	d7, [r3]
			for(int i = 0; i < 16; i++) {
 80028d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d2:	3301      	adds	r3, #1
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
 80028d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	ddd9      	ble.n	8002890 <StartReadTempTask+0x18>
			}

			/* TODO SCU#35 */
			/* Logging Starts */
			time = get_time();
 80028dc:	f7ff fb16 	bl	8001f0c <get_time>
 80028e0:	6438      	str	r0, [r7, #64]	; 0x40
			HAL_USART_Transmit(&husart1, (uint8_t *) time, strlen(time), 10);
 80028e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028e4:	f7fd fce4 	bl	80002b0 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	230a      	movs	r3, #10
 80028ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028f0:	4834      	ldr	r0, [pc, #208]	; (80029c4 <StartReadTempTask+0x14c>)
 80028f2:	f004 ff22 	bl	800773a <HAL_USART_Transmit>

			sprintf(tempMsg, ",,%f,", temperatures[0]);
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <StartReadTempTask+0x148>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f107 000c 	add.w	r0, r7, #12
 8002900:	4931      	ldr	r1, [pc, #196]	; (80029c8 <StartReadTempTask+0x150>)
 8002902:	f00b fbaf 	bl	800e064 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fcd0 	bl	80002b0 <strlen>
 8002910:	4603      	mov	r3, r0
 8002912:	b29a      	uxth	r2, r3
 8002914:	f107 010c 	add.w	r1, r7, #12
 8002918:	230a      	movs	r3, #10
 800291a:	482a      	ldr	r0, [pc, #168]	; (80029c4 <StartReadTempTask+0x14c>)
 800291c:	f004 ff0d 	bl	800773a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[1]);
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <StartReadTempTask+0x148>)
 8002922:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002926:	f107 000c 	add.w	r0, r7, #12
 800292a:	4928      	ldr	r1, [pc, #160]	; (80029cc <StartReadTempTask+0x154>)
 800292c:	f00b fb9a 	bl	800e064 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fcbb 	bl	80002b0 <strlen>
 800293a:	4603      	mov	r3, r0
 800293c:	b29a      	uxth	r2, r3
 800293e:	f107 010c 	add.w	r1, r7, #12
 8002942:	230a      	movs	r3, #10
 8002944:	481f      	ldr	r0, [pc, #124]	; (80029c4 <StartReadTempTask+0x14c>)
 8002946:	f004 fef8 	bl	800773a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f,", temperatures[2]);
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <StartReadTempTask+0x148>)
 800294c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002950:	f107 000c 	add.w	r0, r7, #12
 8002954:	491d      	ldr	r1, [pc, #116]	; (80029cc <StartReadTempTask+0x154>)
 8002956:	f00b fb85 	bl	800e064 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fca6 	bl	80002b0 <strlen>
 8002964:	4603      	mov	r3, r0
 8002966:	b29a      	uxth	r2, r3
 8002968:	f107 010c 	add.w	r1, r7, #12
 800296c:	230a      	movs	r3, #10
 800296e:	4815      	ldr	r0, [pc, #84]	; (80029c4 <StartReadTempTask+0x14c>)
 8002970:	f004 fee3 	bl	800773a <HAL_USART_Transmit>

			sprintf(tempMsg, "%f\r\n", temperatures[3]);
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <StartReadTempTask+0x148>)
 8002976:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800297a:	f107 000c 	add.w	r0, r7, #12
 800297e:	4914      	ldr	r1, [pc, #80]	; (80029d0 <StartReadTempTask+0x158>)
 8002980:	f00b fb70 	bl	800e064 <siprintf>
			HAL_USART_Transmit(&husart1, (uint8_t *) tempMsg, strlen(tempMsg), 10);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fc91 	bl	80002b0 <strlen>
 800298e:	4603      	mov	r3, r0
 8002990:	b29a      	uxth	r2, r3
 8002992:	f107 010c 	add.w	r1, r7, #12
 8002996:	230a      	movs	r3, #10
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <StartReadTempTask+0x14c>)
 800299a:	f004 fece 	bl	800773a <HAL_USART_Transmit>
			/* Logging Ends */
		}

		newData_thermistor = 0;
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <StartReadTempTask+0x140>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
		osDelay(500);
 80029a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029a8:	f008 fa5a 	bl	800ae60 <osDelay>
		if (newData_thermistor == 1) {
 80029ac:	e768      	b.n	8002880 <StartReadTempTask+0x8>
 80029ae:	bf00      	nop
 80029b0:	e734d9b4 	.word	0xe734d9b4
 80029b4:	3f4a680c 	.word	0x3f4a680c
 80029b8:	20000a7c 	.word	0x20000a7c
 80029bc:	20000a38 	.word	0x20000a38
 80029c0:	20001c98 	.word	0x20001c98
 80029c4:	20001e5c 	.word	0x20001e5c
 80029c8:	08011888 	.word	0x08011888
 80029cc:	08011890 	.word	0x08011890
 80029d0:	08011894 	.word	0x08011894

080029d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a00:	4b32      	ldr	r3, [pc, #200]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a02:	4a33      	ldr	r2, [pc, #204]	; (8002ad0 <MX_TIM3_Init+0xfc>)
 8002a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a26:	4829      	ldr	r0, [pc, #164]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a28:	f003 fef6 	bl	8006818 <HAL_TIM_IC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002a32:	f7ff fa15 	bl	8001e60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002a36:	2304      	movs	r3, #4
 8002a38:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002a3a:	2350      	movs	r3, #80	; 0x50
 8002a3c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	481e      	ldr	r0, [pc, #120]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a52:	f004 f9fd 	bl	8006e50 <HAL_TIM_SlaveConfigSynchro>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a5c:	f7ff fa00 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	2200      	movs	r2, #0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4814      	ldr	r0, [pc, #80]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a7a:	f004 f94d 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a84:	f7ff f9ec 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2204      	movs	r2, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002a9a:	f004 f93d 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002aa4:	f7ff f9dc 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_TIM3_Init+0xf8>)
 8002ab6:	f004 fd6f 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002ac0:	f7ff f9ce 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	3730      	adds	r7, #48	; 0x30
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20001d3c 	.word	0x20001d3c
 8002ad0:	40000400 	.word	0x40000400

08002ad4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ada:	f107 031c 	add.w	r3, r7, #28
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <MX_TIM4_Init+0xfc>)
 8002b04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b26:	4829      	ldr	r0, [pc, #164]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b28:	f003 fe76 	bl	8006818 <HAL_TIM_IC_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002b32:	f7ff f995 	bl	8001e60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002b36:	2304      	movs	r3, #4
 8002b38:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b3a:	2350      	movs	r3, #80	; 0x50
 8002b3c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	481e      	ldr	r0, [pc, #120]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b52:	f004 f97d 	bl	8006e50 <HAL_TIM_SlaveConfigSynchro>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f7ff f980 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b64:	2301      	movs	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4814      	ldr	r0, [pc, #80]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b7a:	f004 f8cd 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002b84:	f7ff f96c 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2204      	movs	r2, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002b9a:	f004 f8bd 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002ba4:	f7ff f95c 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM4_Init+0xf8>)
 8002bb6:	f004 fcef 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002bc0:	f7ff f94e 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20001d84 	.word	0x20001d84
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bda:	463b      	mov	r3, r7
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <MX_TIM11_Init+0x8c>)
 8002bea:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bfe:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002c0c:	4813      	ldr	r0, [pc, #76]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002c0e:	f003 fd43 	bl	8006698 <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002c18:	f7ff f922 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002c1c:	480f      	ldr	r0, [pc, #60]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002c1e:	f003 fdfb 	bl	8006818 <HAL_TIM_IC_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002c28:	f7ff f91a 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c30:	2301      	movs	r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4619      	mov	r1, r3
 8002c42:	4806      	ldr	r0, [pc, #24]	; (8002c5c <MX_TIM11_Init+0x88>)
 8002c44:	f004 f868 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002c4e:	f7ff f907 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20001dcc 	.word	0x20001dcc
 8002c60:	40014800 	.word	0x40014800

08002c64 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002c88:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <MX_TIM12_Init+0xd4>)
 8002c8a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002cac:	4821      	ldr	r0, [pc, #132]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002cae:	f003 fdb3 	bl	8006818 <HAL_TIM_IC_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM12_Init+0x58>
  {
    Error_Handler();
 8002cb8:	f7ff f8d2 	bl	8001e60 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002cc0:	2350      	movs	r3, #80	; 0x50
 8002cc2:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4817      	ldr	r0, [pc, #92]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002cd8:	f004 f8ba 	bl	8006e50 <HAL_TIM_SlaveConfigSynchro>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002ce2:	f7ff f8bd 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002cfe:	f004 f80b 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 8002d08:	f7ff f8aa 	bl	8001e60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	2204      	movs	r2, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <MX_TIM12_Init+0xd0>)
 8002d1c:	f003 fffc 	bl	8006d18 <HAL_TIM_IC_ConfigChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM12_Init+0xc6>
  {
    Error_Handler();
 8002d26:	f7ff f89b 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	; 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20001e14 	.word	0x20001e14
 8002d38:	40001800 	.word	0x40001800

08002d3c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a57      	ldr	r2, [pc, #348]	; (8002eb8 <HAL_TIM_IC_MspInit+0x17c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d134      	bne.n	8002dc8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a55      	ldr	r2, [pc, #340]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a4e      	ldr	r2, [pc, #312]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da6:	2302      	movs	r3, #2
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dae:	4619      	mov	r1, r3
 8002db0:	4843      	ldr	r0, [pc, #268]	; (8002ec0 <HAL_TIM_IC_MspInit+0x184>)
 8002db2:	f001 fc11 	bl	80045d8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2105      	movs	r1, #5
 8002dba:	201d      	movs	r0, #29
 8002dbc:	f001 f872 	bl	8003ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dc0:	201d      	movs	r0, #29
 8002dc2:	f001 f88b 	bl	8003edc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002dc6:	e073      	b.n	8002eb0 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM4)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <HAL_TIM_IC_MspInit+0x188>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d134      	bne.n	8002e3c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e0a:	2340      	movs	r3, #64	; 0x40
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e22:	4619      	mov	r1, r3
 8002e24:	4828      	ldr	r0, [pc, #160]	; (8002ec8 <HAL_TIM_IC_MspInit+0x18c>)
 8002e26:	f001 fbd7 	bl	80045d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	201e      	movs	r0, #30
 8002e30:	f001 f838 	bl	8003ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e34:	201e      	movs	r0, #30
 8002e36:	f001 f851 	bl	8003edc <HAL_NVIC_EnableIRQ>
}
 8002e3a:	e039      	b.n	8002eb0 <HAL_TIM_IC_MspInit+0x174>
  else if(tim_icHandle->Instance==TIM12)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_TIM_IC_MspInit+0x190>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d134      	bne.n	8002eb0 <HAL_TIM_IC_MspInit+0x174>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_TIM_IC_MspInit+0x180>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002e90:	2309      	movs	r3, #9
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <HAL_TIM_IC_MspInit+0x18c>)
 8002e9c:	f001 fb9c 	bl	80045d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2105      	movs	r1, #5
 8002ea4:	202b      	movs	r0, #43	; 0x2b
 8002ea6:	f000 fffd 	bl	8003ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002eaa:	202b      	movs	r0, #43	; 0x2b
 8002eac:	f001 f816 	bl	8003edc <HAL_NVIC_EnableIRQ>
}
 8002eb0:	bf00      	nop
 8002eb2:	3738      	adds	r7, #56	; 0x38
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40001800 	.word	0x40001800

08002ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM11)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <HAL_TIM_Base_MspInit+0x94>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d134      	bne.n	8002f5c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f00:	6453      	str	r3, [r2, #68]	; 0x44
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_TIM_Base_MspInit+0x98>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4809      	ldr	r0, [pc, #36]	; (8002f6c <HAL_TIM_Base_MspInit+0x9c>)
 8002f48:	f001 fb46 	bl	80045d8 <HAL_GPIO_Init>

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2105      	movs	r1, #5
 8002f50:	201a      	movs	r0, #26
 8002f52:	f000 ffa7 	bl	8003ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f56:	201a      	movs	r0, #26
 8002f58:	f000 ffc0 	bl	8003edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_TIM_IC_CaptureCallback>:
}

/* USER CODE BEGIN 1 */
// function called when timer interrupt occurs
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
		}
	}
	*/

	// when interrupt is caused by timer 3
	if(htim->Instance == TIM3)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10c      	bne.n	8002f9c <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002f82:	2100      	movs	r1, #0
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f003 ffa5 	bl	8006ed4 <HAL_TIM_ReadCapturedValue>
 8002f8a:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			wheel_FL_pulse_count++;	// increment pulse_count
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002f9a:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 4
	if(htim->Instance == TIM4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f003 ff93 	bl	8006ed4 <HAL_TIM_ReadCapturedValue>
 8002fae:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			wheel_FR_pulse_count++;	// increment pulse_count
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8002fbe:	6013      	str	r3, [r2, #0]
		}
	}

	// when interrupt is caused by timer 12
	if(htim->Instance == TIM12)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_TIM_IC_CaptureCallback+0x8c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_TIM_IC_CaptureCallback+0x74>
	{

		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002fca:	2100      	movs	r1, #0
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f003 ff81 	bl	8006ed4 <HAL_TIM_ReadCapturedValue>
 8002fd2:	60f8      	str	r0, [r7, #12]

		// check if timer is initialized
		if(ICValue != 0)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			flowmeter_pulse_count++;	// increment pulse_count
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002fe2:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	20001d34 	.word	0x20001d34
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	20001d38 	.word	0x20001d38
 8002ffc:	40001800 	.word	0x40001800
 8003000:	20001d30 	.word	0x20001d30

08003004 <MX_USART1_Init>:

USART_HandleTypeDef husart1;

/* USART1 init function */
void MX_USART1_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <MX_USART1_Init+0x50>)
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <MX_USART1_Init+0x54>)
 800300c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <MX_USART1_Init+0x50>)
 8003010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003014:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <MX_USART1_Init+0x50>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <MX_USART1_Init+0x50>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_USART1_Init+0x50>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <MX_USART1_Init+0x50>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <MX_USART1_Init+0x50>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <MX_USART1_Init+0x50>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_USART1_Init+0x50>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <MX_USART1_Init+0x50>)
 8003042:	f004 fb39 	bl	80076b8 <HAL_USART_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800304c:	f7fe ff08 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20001e5c 	.word	0x20001e5c
 8003058:	40011000 	.word	0x40011000

0800305c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(usartHandle->Instance==USART1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_USART_MspInit+0x84>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12c      	bne.n	80030d8 <HAL_USART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_USART_MspInit+0x88>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_USART_MspInit+0x88>)
 8003088:	f043 0310 	orr.w	r3, r3, #16
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_USART_MspInit+0x88>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_USART_MspInit+0x88>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_USART_MspInit+0x88>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_USART_MspInit+0x88>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80030b6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80030ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030c8:	2307      	movs	r3, #7
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <HAL_USART_MspInit+0x8c>)
 80030d4:	f001 fa80 	bl	80045d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030d8:	bf00      	nop
 80030da:	3728      	adds	r7, #40	; 0x28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	00000000 	.word	0x00000000

080030f0 <calculateWheelSpeed>:

extern volatile int wheel_FL_pulse_count;
extern volatile int wheel_FR_pulse_count;

// gets wheel speeds as m/s
double calculateWheelSpeed(int pulse_count){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	volatile double wheel_speed;

	wheel_speed = pulse_count*conversionFactor*WHEEL_CIRCUMFERENCE/NUM_TEETH;	// calculate wheel speed
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd fa33 	bl	8000564 <__aeabi_i2d>
 80030fe:	a315      	add	r3, pc, #84	; (adr r3, 8003154 <calculateWheelSpeed+0x64>)
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f7fd fa98 	bl	8000638 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	a312      	add	r3, pc, #72	; (adr r3, 800315c <calculateWheelSpeed+0x6c>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa8f 	bl	8000638 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <calculateWheelSpeed+0x60>)
 8003128:	f7fd fbb0 	bl	800088c <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return wheel_speed;
 8003134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003138:	ec43 2b17 	vmov	d7, r2, r3
}
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	eef0 0a67 	vmov.f32	s1, s15
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	40240000 	.word	0x40240000
 8003154:	d2f1a9fc 	.word	0xd2f1a9fc
 8003158:	3f60624d 	.word	0x3f60624d
 800315c:	f01b866e 	.word	0xf01b866e
 8003160:	400921f9 	.word	0x400921f9

08003164 <StartGetWheelSpeedTask>:

void StartGetWheelSpeedTask(void const * argument){
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	volatile double FL_speed;
	volatile double FR_speed;

	for (;;){
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 800316c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003170:	f007 fe76 	bl	800ae60 <osDelay>

		// calculates wheel speeds
		FL_speed = calculateWheelSpeed(wheel_FL_pulse_count);
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <StartGetWheelSpeedTask+0x4c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ffb9 	bl	80030f0 <calculateWheelSpeed>
 800317e:	eeb0 7a40 	vmov.f32	s14, s0
 8003182:	eef0 7a60 	vmov.f32	s15, s1
 8003186:	ed87 7b04 	vstr	d7, [r7, #16]
		FR_speed = calculateWheelSpeed(wheel_FR_pulse_count);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <StartGetWheelSpeedTask+0x50>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ffae 	bl	80030f0 <calculateWheelSpeed>
 8003194:	eeb0 7a40 	vmov.f32	s14, s0
 8003198:	eef0 7a60 	vmov.f32	s15, s1
 800319c:	ed87 7b02 	vstr	d7, [r7, #8]


		/* Logging Ends */

		// reset counts
		wheel_FL_pulse_count = 0;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <StartGetWheelSpeedTask+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
		wheel_FR_pulse_count = 0;
 80031a6:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <StartGetWheelSpeedTask+0x50>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
		osDelay(pdMS_TO_TICKS(DELAY));	// wait DELAY ms
 80031ac:	e7de      	b.n	800316c <StartGetWheelSpeedTask+0x8>
 80031ae:	bf00      	nop
 80031b0:	20001d34 	.word	0x20001d34
 80031b4:	20001d38 	.word	0x20001d38

080031b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031bc:	480d      	ldr	r0, [pc, #52]	; (80031f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031be:	490e      	ldr	r1, [pc, #56]	; (80031f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031d4:	4c0b      	ldr	r4, [pc, #44]	; (8003204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e2:	f7ff fa39 	bl	8002658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031e6:	f00b f85d 	bl	800e2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ea:	f7fe fd59 	bl	8001ca0 <main>
  bx  lr    
 80031ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80031fc:	08011d48 	.word	0x08011d48
  ldr r2, =_sbss
 8003200:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003204:	20005dcc 	.word	0x20005dcc

08003208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC_IRQHandler>
	...

0800320c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_Init+0x40>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_Init+0x40>)
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_Init+0x40>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003234:	2003      	movs	r0, #3
 8003236:	f000 fe2a 	bl	8003e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323a:	200f      	movs	r0, #15
 800323c:	f7ff f882 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003240:	f7ff f854 	bl	80022ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00

08003250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_IncTick+0x20>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_IncTick+0x24>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4413      	add	r3, r2
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_IncTick+0x24>)
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2000000c 	.word	0x2000000c
 8003274:	20001ea0 	.word	0x20001ea0

08003278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return uwTick;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_GetTick+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20001ea0 	.word	0x20001ea0

08003290 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e033      	b.n	800330e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe f9fc 	bl	80016ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d6:	f023 0302 	bic.w	r3, r3, #2
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa6e 	bl	80037c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
 80032fe:	e001      	b.n	8003304 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADC_Start_DMA+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e0e9      	b.n	800350a <HAL_ADC_Start_DMA+0x1f2>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d018      	beq.n	800337e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800335c:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_ADC_Start_DMA+0x1fc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6d      	ldr	r2, [pc, #436]	; (8003518 <HAL_ADC_Start_DMA+0x200>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0c9a      	lsrs	r2, r3, #18
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003370:	e002      	b.n	8003378 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3b01      	subs	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d107      	bne.n	800339e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800339c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	f040 80a1 	bne.w	80034f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	d106      	bne.n	80033fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f023 0206 	bic.w	r2, r3, #6
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
 80033fa:	e002      	b.n	8003402 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800340a:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_ADC_Start_DMA+0x204>)
 800340c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_ADC_Start_DMA+0x208>)
 8003414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_ADC_Start_DMA+0x20c>)
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	4a41      	ldr	r2, [pc, #260]	; (8003528 <HAL_ADC_Start_DMA+0x210>)
 8003424:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800342e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800343e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	334c      	adds	r3, #76	; 0x4c
 800345a:	4619      	mov	r1, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f000 fdf8 	bl	8004054 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12a      	bne.n	80034c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_ADC_Start_DMA+0x214>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d015      	beq.n	80034a6 <HAL_ADC_Start_DMA+0x18e>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_ADC_Start_DMA+0x218>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d105      	bne.n	8003490 <HAL_ADC_Start_DMA+0x178>
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_ADC_Start_DMA+0x204>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_ADC_Start_DMA+0x21c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d136      	bne.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
 800349a:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_ADC_Start_DMA+0x204>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d130      	bne.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d129      	bne.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	e020      	b.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_ADC_Start_DMA+0x214>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d11b      	bne.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034ec:	609a      	str	r2, [r3, #8]
 80034ee:	e00b      	b.n	8003508 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f043 0210 	orr.w	r2, r3, #16
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000004 	.word	0x20000004
 8003518:	431bde83 	.word	0x431bde83
 800351c:	40012300 	.word	0x40012300
 8003520:	080039bd 	.word	0x080039bd
 8003524:	08003a77 	.word	0x08003a77
 8003528:	08003a93 	.word	0x08003a93
 800352c:	40012000 	.word	0x40012000
 8003530:	40012100 	.word	0x40012100
 8003534:	40012200 	.word	0x40012200

08003538 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x1c>
 8003578:	2302      	movs	r3, #2
 800357a:	e113      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x244>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b09      	cmp	r3, #9
 800358a:	d925      	bls.n	80035d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	3b1e      	subs	r3, #30
 80035a2:	2207      	movs	r2, #7
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43da      	mvns	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	400a      	ands	r2, r1
 80035b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	4603      	mov	r3, r0
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4403      	add	r3, r0
 80035ca:	3b1e      	subs	r3, #30
 80035cc:	409a      	lsls	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	e022      	b.n	800361e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6919      	ldr	r1, [r3, #16]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	2207      	movs	r2, #7
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	400a      	ands	r2, r1
 80035fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6919      	ldr	r1, [r3, #16]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	4618      	mov	r0, r3
 800360e:	4603      	mov	r3, r0
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4403      	add	r3, r0
 8003614:	409a      	lsls	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b06      	cmp	r3, #6
 8003624:	d824      	bhi.n	8003670 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	3b05      	subs	r3, #5
 8003638:	221f      	movs	r2, #31
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43da      	mvns	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	400a      	ands	r2, r1
 8003646:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	3b05      	subs	r3, #5
 8003662:	fa00 f203 	lsl.w	r2, r0, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	635a      	str	r2, [r3, #52]	; 0x34
 800366e:	e04c      	b.n	800370a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d824      	bhi.n	80036c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b23      	subs	r3, #35	; 0x23
 800368a:	221f      	movs	r2, #31
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43da      	mvns	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	400a      	ands	r2, r1
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	3b23      	subs	r3, #35	; 0x23
 80036b4:	fa00 f203 	lsl.w	r2, r0, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
 80036c0:	e023      	b.n	800370a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	3b41      	subs	r3, #65	; 0x41
 80036d4:	221f      	movs	r2, #31
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	400a      	ands	r2, r1
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	4618      	mov	r0, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	3b41      	subs	r3, #65	; 0x41
 80036fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_ADC_ConfigChannel+0x250>)
 800370c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <HAL_ADC_ConfigChannel+0x254>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10f      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1d8>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b12      	cmp	r3, #18
 800371e:	d10b      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_ADC_ConfigChannel+0x254>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d12b      	bne.n	800379a <HAL_ADC_ConfigChannel+0x23a>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_ADC_ConfigChannel+0x258>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_ADC_ConfigChannel+0x1f4>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b11      	cmp	r3, #17
 8003752:	d122      	bne.n	800379a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <HAL_ADC_ConfigChannel+0x258>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_ADC_ConfigChannel+0x25c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <HAL_ADC_ConfigChannel+0x260>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	0c9a      	lsrs	r2, r3, #18
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800378c:	e002      	b.n	8003794 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3b01      	subs	r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f9      	bne.n	800378e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40012300 	.word	0x40012300
 80037b4:	40012000 	.word	0x40012000
 80037b8:	10000012 	.word	0x10000012
 80037bc:	20000004 	.word	0x20000004
 80037c0:	431bde83 	.word	0x431bde83

080037c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037cc:	4b79      	ldr	r3, [pc, #484]	; (80039b4 <ADC_Init+0x1f0>)
 80037ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800381c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <ADC_Init+0x1f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800386a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800388c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e00f      	b.n	80038c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0202 	bic.w	r2, r2, #2
 80038d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7e1b      	ldrb	r3, [r3, #24]
 80038dc:	005a      	lsls	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800390e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	3b01      	subs	r3, #1
 800391c:	035a      	lsls	r2, r3, #13
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	e007      	b.n	8003938 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003936:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	3b01      	subs	r3, #1
 8003954:	051a      	lsls	r2, r3, #20
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800396c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800397a:	025a      	lsls	r2, r3, #9
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6899      	ldr	r1, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	029a      	lsls	r2, r3, #10
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40012300 	.word	0x40012300
 80039b8:	0f000001 	.word	0x0f000001

080039bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d13c      	bne.n	8003a50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d12b      	bne.n	8003a48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d127      	bne.n	8003a48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d119      	bne.n	8003a48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0220 	bic.w	r2, r2, #32
 8003a22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7fd fedf 	bl	800180c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a4e:	e00e      	b.n	8003a6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff fd75 	bl	800354c <HAL_ADC_ErrorCallback>
}
 8003a62:	e004      	b.n	8003a6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff fd57 	bl	8003538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fd4a 	bl	800354c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d003      	beq.n	8003ae4 <HAL_CAN_GetRxMessage+0x24>
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 80f3 	bne.w	8003cca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d116      	bne.n	8003b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0e7      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d107      	bne.n	8003b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0d8      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	331b      	adds	r3, #27
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0204 	and.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	331b      	adds	r3, #27
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	0d5b      	lsrs	r3, r3, #21
 8003b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e00b      	b.n	8003b76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	331b      	adds	r3, #27
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	331b      	adds	r3, #27
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0202 	and.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	331b      	adds	r3, #27
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 020f 	and.w	r2, r3, #15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	331b      	adds	r3, #27
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0a1a      	lsrs	r2, r3, #8
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1a      	lsrs	r2, r3, #16
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0e1a      	lsrs	r2, r3, #24
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	3303      	adds	r3, #3
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0a1a      	lsrs	r2, r3, #8
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3305      	adds	r3, #5
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0c1a      	lsrs	r2, r3, #16
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3306      	adds	r3, #6
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e1a      	lsrs	r2, r3, #24
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0220 	orr.w	r2, r2, #32
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e007      	b.n	8003cc6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e006      	b.n	8003cd8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d002      	beq.n	8003d06 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d10f      	bne.n	8003d26 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e005      	b.n	8003d26 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d50:	4013      	ands	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <__NVIC_GetPriorityGrouping+0x18>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0307 	and.w	r3, r3, #7
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0b      	blt.n	8003dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <__NVIC_EnableIRQ+0x38>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ff4c 	bl	8003d34 <__NVIC_SetPriorityGrouping>
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb6:	f7ff ff61 	bl	8003d7c <__NVIC_GetPriorityGrouping>
 8003eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f7ff ffb1 	bl	8003e28 <NVIC_EncodePriority>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff80 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003ed4:	bf00      	nop
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff54 	bl	8003d98 <__NVIC_EnableIRQ>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f04:	f7ff f9b8 	bl	8003278 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e099      	b.n	8004048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f34:	e00f      	b.n	8003f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f36:	f7ff f99f 	bl	8003278 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d908      	bls.n	8003f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e078      	b.n	8004048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e8      	bne.n	8003f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_DMA_Init+0x158>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d107      	bne.n	8003fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0307 	bic.w	r3, r3, #7
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d117      	bne.n	800401a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fa6f 	bl	80044e0 <DMA_CheckFifoParam>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004016:	2301      	movs	r3, #1
 8004018:	e016      	b.n	8004048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa26 	bl	8004474 <DMA_CalcBaseAndBitshift>
 8004028:	4603      	mov	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	223f      	movs	r2, #63	; 0x3f
 8004032:	409a      	lsls	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	f010803f 	.word	0xf010803f

08004054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_DMA_Start_IT+0x26>
 8004076:	2302      	movs	r3, #2
 8004078:	e040      	b.n	80040fc <HAL_DMA_Start_IT+0xa8>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d12f      	bne.n	80040ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f9b8 	bl	8004418 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	223f      	movs	r2, #63	; 0x3f
 80040ae:	409a      	lsls	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0216 	orr.w	r2, r2, #22
 80040c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0208 	orr.w	r2, r2, #8
 80040da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e005      	b.n	80040fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004110:	4b8e      	ldr	r3, [pc, #568]	; (800434c <HAL_DMA_IRQHandler+0x248>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a8e      	ldr	r2, [pc, #568]	; (8004350 <HAL_DMA_IRQHandler+0x24c>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	0a9b      	lsrs	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	2208      	movs	r2, #8
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01a      	beq.n	8004170 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	2208      	movs	r2, #8
 800415e:	409a      	lsls	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d012      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2201      	movs	r2, #1
 8004194:	409a      	lsls	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f043 0202 	orr.w	r2, r3, #2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	2204      	movs	r2, #4
 80041ac:	409a      	lsls	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d012      	beq.n	80041dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	2204      	movs	r2, #4
 80041ca:	409a      	lsls	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	2210      	movs	r2, #16
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d043      	beq.n	8004274 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d03c      	beq.n	8004274 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2210      	movs	r2, #16
 8004200:	409a      	lsls	r2, r3
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d018      	beq.n	8004246 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d024      	beq.n	8004274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
 8004232:	e01f      	b.n	8004274 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
 8004244:	e016      	b.n	8004274 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0208 	bic.w	r2, r2, #8
 8004262:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2220      	movs	r2, #32
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 808f 	beq.w	80043a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8087 	beq.w	80043a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2220      	movs	r2, #32
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d136      	bne.n	800431c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0216 	bic.w	r2, r2, #22
 80042bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_DMA_IRQHandler+0x1da>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0208 	bic.w	r2, r2, #8
 80042ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	223f      	movs	r2, #63	; 0x3f
 80042f4:	409a      	lsls	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	d07e      	beq.n	8004410 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
        }
        return;
 800431a:	e079      	b.n	8004410 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01d      	beq.n	8004366 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10d      	bne.n	8004354 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	2b00      	cmp	r3, #0
 800433e:	d031      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
 8004348:	e02c      	b.n	80043a4 <HAL_DMA_IRQHandler+0x2a0>
 800434a:	bf00      	nop
 800434c:	20000004 	.word	0x20000004
 8004350:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d023      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
 8004364:	e01e      	b.n	80043a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0210 	bic.w	r2, r2, #16
 8004382:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d032      	beq.n	8004412 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2205      	movs	r2, #5
 80043bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d307      	bcc.n	80043ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f2      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x2cc>
 80043ea:	e000      	b.n	80043ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
 800440e:	e000      	b.n	8004412 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004410:	bf00      	nop
    }
  }
}
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004434:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d108      	bne.n	8004458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004456:	e007      	b.n	8004468 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
}
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3b10      	subs	r3, #16
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <DMA_CalcBaseAndBitshift+0x68>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d909      	bls.n	80044b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	1d1a      	adds	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	659a      	str	r2, [r3, #88]	; 0x58
 80044b4:	e007      	b.n	80044c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	0801190c 	.word	0x0801190c

080044e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d11f      	bne.n	800453a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d856      	bhi.n	80045ae <DMA_CheckFifoParam+0xce>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <DMA_CheckFifoParam+0x28>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	0800452b 	.word	0x0800452b
 8004510:	08004519 	.word	0x08004519
 8004514:	080045af 	.word	0x080045af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d046      	beq.n	80045b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004528:	e043      	b.n	80045b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004532:	d140      	bne.n	80045b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004538:	e03d      	b.n	80045b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	d121      	bne.n	8004588 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d837      	bhi.n	80045ba <DMA_CheckFifoParam+0xda>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <DMA_CheckFifoParam+0x70>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004561 	.word	0x08004561
 8004554:	08004567 	.word	0x08004567
 8004558:	08004561 	.word	0x08004561
 800455c:	08004579 	.word	0x08004579
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      break;
 8004564:	e030      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d025      	beq.n	80045be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e022      	b.n	80045be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004580:	d11f      	bne.n	80045c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004586:	e01c      	b.n	80045c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d903      	bls.n	8004596 <DMA_CheckFifoParam+0xb6>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d003      	beq.n	800459c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004594:	e018      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
      break;
 800459a:	e015      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e00b      	b.n	80045c6 <DMA_CheckFifoParam+0xe6>
      break;
 80045ae:	bf00      	nop
 80045b0:	e00a      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;
 80045b2:	bf00      	nop
 80045b4:	e008      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e006      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ba:	bf00      	nop
 80045bc:	e004      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e002      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
    }
  } 
  
  return status; 
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop

080045d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	; 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e165      	b.n	80048c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045f4:	2201      	movs	r2, #1
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	429a      	cmp	r2, r3
 800460e:	f040 8154 	bne.w	80048ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d005      	beq.n	800462a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004626:	2b02      	cmp	r3, #2
 8004628:	d130      	bne.n	800468c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	2203      	movs	r2, #3
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 0201 	and.w	r2, r3, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b03      	cmp	r3, #3
 8004696:	d017      	beq.n	80046c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2203      	movs	r2, #3
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d123      	bne.n	800471c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	220f      	movs	r2, #15
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	08da      	lsrs	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3208      	adds	r2, #8
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2203      	movs	r2, #3
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0203 	and.w	r2, r3, #3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80ae 	beq.w	80048ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b5d      	ldr	r3, [pc, #372]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800476c:	6453      	str	r3, [r2, #68]	; 0x44
 800476e:	4b5a      	ldr	r3, [pc, #360]	; (80048d8 <HAL_GPIO_Init+0x300>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800477a:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_GPIO_Init+0x304>)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	3302      	adds	r3, #2
 8004782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4f      	ldr	r2, [pc, #316]	; (80048e0 <HAL_GPIO_Init+0x308>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d025      	beq.n	80047f2 <HAL_GPIO_Init+0x21a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4e      	ldr	r2, [pc, #312]	; (80048e4 <HAL_GPIO_Init+0x30c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01f      	beq.n	80047ee <HAL_GPIO_Init+0x216>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4d      	ldr	r2, [pc, #308]	; (80048e8 <HAL_GPIO_Init+0x310>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d019      	beq.n	80047ea <HAL_GPIO_Init+0x212>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4c      	ldr	r2, [pc, #304]	; (80048ec <HAL_GPIO_Init+0x314>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_GPIO_Init+0x20e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4b      	ldr	r2, [pc, #300]	; (80048f0 <HAL_GPIO_Init+0x318>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00d      	beq.n	80047e2 <HAL_GPIO_Init+0x20a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a4a      	ldr	r2, [pc, #296]	; (80048f4 <HAL_GPIO_Init+0x31c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <HAL_GPIO_Init+0x206>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a49      	ldr	r2, [pc, #292]	; (80048f8 <HAL_GPIO_Init+0x320>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_GPIO_Init+0x202>
 80047d6:	2306      	movs	r3, #6
 80047d8:	e00c      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047da:	2307      	movs	r3, #7
 80047dc:	e00a      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047de:	2305      	movs	r3, #5
 80047e0:	e008      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047e2:	2304      	movs	r3, #4
 80047e4:	e006      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047e6:	2303      	movs	r3, #3
 80047e8:	e004      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_GPIO_Init+0x21c>
 80047f2:	2300      	movs	r3, #0
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	f002 0203 	and.w	r2, r2, #3
 80047fa:	0092      	lsls	r2, r2, #2
 80047fc:	4093      	lsls	r3, r2
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004804:	4935      	ldr	r1, [pc, #212]	; (80048dc <HAL_GPIO_Init+0x304>)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	3302      	adds	r3, #2
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004812:	4b3a      	ldr	r3, [pc, #232]	; (80048fc <HAL_GPIO_Init+0x324>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004836:	4a31      	ldr	r2, [pc, #196]	; (80048fc <HAL_GPIO_Init+0x324>)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800483c:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <HAL_GPIO_Init+0x324>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_GPIO_Init+0x324>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004866:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_GPIO_Init+0x324>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800488a:	4a1c      	ldr	r2, [pc, #112]	; (80048fc <HAL_GPIO_Init+0x324>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <HAL_GPIO_Init+0x324>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_GPIO_Init+0x324>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	f67f ae96 	bls.w	80045f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3724      	adds	r7, #36	; 0x24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40020000 	.word	0x40020000
 80048e4:	40020400 	.word	0x40020400
 80048e8:	40020800 	.word	0x40020800
 80048ec:	40020c00 	.word	0x40020c00
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40021400 	.word	0x40021400
 80048f8:	40021800 	.word	0x40021800
 80048fc:	40013c00 	.word	0x40013c00

08004900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	807b      	strh	r3, [r7, #2]
 800490c:	4613      	mov	r3, r2
 800490e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004910:	787b      	ldrb	r3, [r7, #1]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004916:	887a      	ldrh	r2, [r7, #2]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800491c:	e003      	b.n	8004926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800491e:	887b      	ldrh	r3, [r7, #2]
 8004920:	041a      	lsls	r2, r3, #16
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	619a      	str	r2, [r3, #24]
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0cc      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b68      	ldr	r3, [pc, #416]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90c      	bls.n	8004970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b63      	ldr	r3, [pc, #396]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0b8      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004988:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a58      	ldr	r2, [pc, #352]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a0:	4b53      	ldr	r3, [pc, #332]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a52      	ldr	r2, [pc, #328]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	494d      	ldr	r1, [pc, #308]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d044      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d119      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e06f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e067      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4934      	ldr	r1, [pc, #208]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fe fc28 	bl	8003278 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fe fc24 	bl	8003278 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e04f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d20c      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b20      	ldr	r3, [pc, #128]	; (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e032      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4916      	ldr	r1, [pc, #88]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	490e      	ldr	r1, [pc, #56]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aba:	f000 fbb1 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	490a      	ldr	r1, [pc, #40]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	5ccb      	ldrb	r3, [r1, r3]
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fd fc32 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023c00 	.word	0x40023c00
 8004af0:	40023800 	.word	0x40023800
 8004af4:	080118e8 	.word	0x080118e8
 8004af8:	20000004 	.word	0x20000004
 8004afc:	20000008 	.word	0x20000008

08004b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	080118f8 	.word	0x080118f8

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	080118f8 	.word	0x080118f8

08004b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	220f      	movs	r2, #15
 8004b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_GetClockConfig+0x60>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40023c00 	.word	0x40023c00

08004bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c04:	4b6f      	ldr	r3, [pc, #444]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	496c      	ldr	r1, [pc, #432]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004c22:	2301      	movs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c32:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	4960      	ldr	r1, [pc, #384]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004c50:	2301      	movs	r3, #1
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d017      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c60:	4b58      	ldr	r3, [pc, #352]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4955      	ldr	r1, [pc, #340]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004c80:	2301      	movs	r3, #1
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d017      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c9c:	4b49      	ldr	r3, [pc, #292]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	4946      	ldr	r1, [pc, #280]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 808a 	beq.w	8004dee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a38      	ldr	r2, [pc, #224]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cea:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cf6:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d02:	f7fe fab9 	bl	8003278 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d0a:	f7fe fab5 	bl	8003278 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e278      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d28:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02f      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d028      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d50:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d114      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fe fa83 	bl	8003278 <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fe fa7f 	bl	8003278 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e240      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ee      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da4:	d114      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	4902      	ldr	r1, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]
 8004dc0:	e00c      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	42470e40 	.word	0x42470e40
 8004dd0:	4b4a      	ldr	r3, [pc, #296]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a49      	ldr	r2, [pc, #292]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dda:	6093      	str	r3, [r2, #8]
 8004ddc:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	4944      	ldr	r1, [pc, #272]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004e00:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004e02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e10:	4b3a      	ldr	r3, [pc, #232]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	4937      	ldr	r1, [pc, #220]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e32:	4b32      	ldr	r3, [pc, #200]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e38:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	492e      	ldr	r1, [pc, #184]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d011      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e54:	4b29      	ldr	r3, [pc, #164]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	4926      	ldr	r1, [pc, #152]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e72:	d101      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004e74:	2301      	movs	r3, #1
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004e84:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	491a      	ldr	r1, [pc, #104]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d011      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	4911      	ldr	r1, [pc, #68]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec4:	d101      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d005      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed8:	f040 80ff 	bne.w	80050da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee2:	f7fe f9c9 	bl	8003278 <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee8:	e00e      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eea:	f7fe f9c5 	bl	8003278 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d907      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e188      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	424711e0 	.word	0x424711e0
 8004f04:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f08:	4b7e      	ldr	r3, [pc, #504]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ea      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d028      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d124      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004f3c:	4b71      	ldr	r3, [pc, #452]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	3301      	adds	r3, #1
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f54:	0e1b      	lsrs	r3, r3, #24
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	431a      	orrs	r2, r3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	4961      	ldr	r1, [pc, #388]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d035      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fb0:	d130      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004fb2:	4b54      	ldr	r3, [pc, #336]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fca:	0f1b      	lsrs	r3, r3, #28
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	071b      	lsls	r3, r3, #28
 8004ff4:	4943      	ldr	r1, [pc, #268]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ffc:	4b41      	ldr	r3, [pc, #260]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005002:	f023 021f 	bic.w	r2, r3, #31
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	493d      	ldr	r1, [pc, #244]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d029      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005028:	d124      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005042:	0f1b      	lsrs	r3, r3, #28
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	019b      	lsls	r3, r3, #6
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	3b01      	subs	r3, #1
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	431a      	orrs	r2, r3
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	431a      	orrs	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	071b      	lsls	r3, r3, #28
 800506c:	4925      	ldr	r1, [pc, #148]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	4917      	ldr	r1, [pc, #92]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ae:	4b16      	ldr	r3, [pc, #88]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fe f8e0 	bl	8003278 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050bc:	f7fe f8dc 	bl	8003278 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e09f      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 8095 	bne.w	800520c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fe f8c6 	bl	8003278 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ee:	e00f      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050f0:	f7fe f8c2 	bl	8003278 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d908      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e085      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800
 8005108:	42470068 	.word	0x42470068
 800510c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d0e8      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d02b      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	2b00      	cmp	r3, #0
 8005144:	d127      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	3301      	adds	r3, #1
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	431a      	orrs	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	4928      	ldr	r1, [pc, #160]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800517e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005182:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	3b01      	subs	r3, #1
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4922      	ldr	r1, [pc, #136]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01d      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x612>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051aa:	d118      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ac:	4b1a      	ldr	r3, [pc, #104]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	0e1b      	lsrs	r3, r3, #24
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	019b      	lsls	r3, r3, #6
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	4910      	ldr	r1, [pc, #64]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fe f848 	bl	8003278 <HAL_GetTick>
 80051e8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80051ec:	f7fe f844 	bl	8003278 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e007      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520a:	d1ef      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3730      	adds	r7, #48	; 0x30
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	42470070 	.word	0x42470070

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b0a6      	sub	sp, #152	; 0x98
 8005226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005246:	4bc8      	ldr	r3, [pc, #800]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b0c      	cmp	r3, #12
 8005250:	f200 817e 	bhi.w	8005550 <HAL_RCC_GetSysClockFreq+0x330>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005291 	.word	0x08005291
 8005260:	08005551 	.word	0x08005551
 8005264:	08005551 	.word	0x08005551
 8005268:	08005551 	.word	0x08005551
 800526c:	08005299 	.word	0x08005299
 8005270:	08005551 	.word	0x08005551
 8005274:	08005551 	.word	0x08005551
 8005278:	08005551 	.word	0x08005551
 800527c:	080052a1 	.word	0x080052a1
 8005280:	08005551 	.word	0x08005551
 8005284:	08005551 	.word	0x08005551
 8005288:	08005551 	.word	0x08005551
 800528c:	0800540b 	.word	0x0800540b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4bb6      	ldr	r3, [pc, #728]	; (800556c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005296:	e15f      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005298:	4bb5      	ldr	r3, [pc, #724]	; (8005570 <HAL_RCC_GetSysClockFreq+0x350>)
 800529a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800529e:	e15b      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a0:	4bb1      	ldr	r3, [pc, #708]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ac:	4bae      	ldr	r3, [pc, #696]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d031      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b8:	4bab      	ldr	r3, [pc, #684]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	099b      	lsrs	r3, r3, #6
 80052be:	2200      	movs	r2, #0
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	663b      	str	r3, [r7, #96]	; 0x60
 80052cc:	2300      	movs	r3, #0
 80052ce:	667b      	str	r3, [r7, #100]	; 0x64
 80052d0:	4ba7      	ldr	r3, [pc, #668]	; (8005570 <HAL_RCC_GetSysClockFreq+0x350>)
 80052d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80052d6:	462a      	mov	r2, r5
 80052d8:	fb03 f202 	mul.w	r2, r3, r2
 80052dc:	2300      	movs	r3, #0
 80052de:	4621      	mov	r1, r4
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	4413      	add	r3, r2
 80052e6:	4aa2      	ldr	r2, [pc, #648]	; (8005570 <HAL_RCC_GetSysClockFreq+0x350>)
 80052e8:	4621      	mov	r1, r4
 80052ea:	fba1 1202 	umull	r1, r2, r1, r2
 80052ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052f0:	460a      	mov	r2, r1
 80052f2:	67ba      	str	r2, [r7, #120]	; 0x78
 80052f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80052f6:	4413      	add	r3, r2
 80052f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052fe:	2200      	movs	r2, #0
 8005300:	65bb      	str	r3, [r7, #88]	; 0x58
 8005302:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005308:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800530c:	f7fb fcbc 	bl	8000c88 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4613      	mov	r3, r2
 8005316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800531a:	e064      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531c:	4b92      	ldr	r3, [pc, #584]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	099b      	lsrs	r3, r3, #6
 8005322:	2200      	movs	r2, #0
 8005324:	653b      	str	r3, [r7, #80]	; 0x50
 8005326:	657a      	str	r2, [r7, #84]	; 0x54
 8005328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	2300      	movs	r3, #0
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005338:	4622      	mov	r2, r4
 800533a:	462b      	mov	r3, r5
 800533c:	f04f 0000 	mov.w	r0, #0
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	0159      	lsls	r1, r3, #5
 8005346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534a:	0150      	lsls	r0, r2, #5
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4621      	mov	r1, r4
 8005352:	1a51      	subs	r1, r2, r1
 8005354:	6139      	str	r1, [r7, #16]
 8005356:	4629      	mov	r1, r5
 8005358:	eb63 0301 	sbc.w	r3, r3, r1
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800536a:	4659      	mov	r1, fp
 800536c:	018b      	lsls	r3, r1, #6
 800536e:	4651      	mov	r1, sl
 8005370:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005374:	4651      	mov	r1, sl
 8005376:	018a      	lsls	r2, r1, #6
 8005378:	4651      	mov	r1, sl
 800537a:	ebb2 0801 	subs.w	r8, r2, r1
 800537e:	4659      	mov	r1, fp
 8005380:	eb63 0901 	sbc.w	r9, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005390:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005394:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005398:	4690      	mov	r8, r2
 800539a:	4699      	mov	r9, r3
 800539c:	4623      	mov	r3, r4
 800539e:	eb18 0303 	adds.w	r3, r8, r3
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	462b      	mov	r3, r5
 80053a6:	eb49 0303 	adc.w	r3, r9, r3
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053b8:	4629      	mov	r1, r5
 80053ba:	028b      	lsls	r3, r1, #10
 80053bc:	4621      	mov	r1, r4
 80053be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053c2:	4621      	mov	r1, r4
 80053c4:	028a      	lsls	r2, r1, #10
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ce:	2200      	movs	r2, #0
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
 80053d2:	647a      	str	r2, [r7, #68]	; 0x44
 80053d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d8:	f7fb fc56 	bl	8000c88 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053e6:	4b60      	ldr	r3, [pc, #384]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80053f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005408:	e0a6      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800540a:	4b57      	ldr	r3, [pc, #348]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005416:	4b54      	ldr	r3, [pc, #336]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02a      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	2200      	movs	r2, #0
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
 800542c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005434:	2100      	movs	r1, #0
 8005436:	4b4e      	ldr	r3, [pc, #312]	; (8005570 <HAL_RCC_GetSysClockFreq+0x350>)
 8005438:	fb03 f201 	mul.w	r2, r3, r1
 800543c:	2300      	movs	r3, #0
 800543e:	fb00 f303 	mul.w	r3, r0, r3
 8005442:	4413      	add	r3, r2
 8005444:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <HAL_RCC_GetSysClockFreq+0x350>)
 8005446:	fba0 1202 	umull	r1, r2, r0, r2
 800544a:	677a      	str	r2, [r7, #116]	; 0x74
 800544c:	460a      	mov	r2, r1
 800544e:	673a      	str	r2, [r7, #112]	; 0x70
 8005450:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005452:	4413      	add	r3, r2
 8005454:	677b      	str	r3, [r7, #116]	; 0x74
 8005456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545a:	2200      	movs	r2, #0
 800545c:	633b      	str	r3, [r7, #48]	; 0x30
 800545e:	637a      	str	r2, [r7, #52]	; 0x34
 8005460:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005464:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005468:	f7fb fc0e 	bl	8000c88 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4613      	mov	r3, r2
 8005472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005476:	e05b      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005478:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	2200      	movs	r2, #0
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
 8005482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	2300      	movs	r3, #0
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	f04f 0000 	mov.w	r0, #0
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	0159      	lsls	r1, r3, #5
 80054a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a6:	0150      	lsls	r0, r2, #5
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4641      	mov	r1, r8
 80054ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80054b2:	4649      	mov	r1, r9
 80054b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054cc:	ebb2 040a 	subs.w	r4, r2, sl
 80054d0:	eb63 050b 	sbc.w	r5, r3, fp
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	00eb      	lsls	r3, r5, #3
 80054de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e2:	00e2      	lsls	r2, r4, #3
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
 80054e8:	4643      	mov	r3, r8
 80054ea:	18e3      	adds	r3, r4, r3
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	464b      	mov	r3, r9
 80054f0:	eb45 0303 	adc.w	r3, r5, r3
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005502:	4629      	mov	r1, r5
 8005504:	028b      	lsls	r3, r1, #10
 8005506:	4621      	mov	r1, r4
 8005508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800550c:	4621      	mov	r1, r4
 800550e:	028a      	lsls	r2, r1, #10
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005518:	2200      	movs	r2, #0
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	61fa      	str	r2, [r7, #28]
 800551e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005522:	f7fb fbb1 	bl	8000c88 <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4613      	mov	r3, r2
 800552c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_GetSysClockFreq+0x348>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0f1b      	lsrs	r3, r3, #28
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800553e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005542:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005546:	fbb2 f3f3 	udiv	r3, r2, r3
 800554a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800554e:	e003      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005556:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800555c:	4618      	mov	r0, r3
 800555e:	3798      	adds	r7, #152	; 0x98
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	00f42400 	.word	0x00f42400
 8005570:	017d7840 	.word	0x017d7840

08005574 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e28d      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8083 	beq.w	800569a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005594:	4b94      	ldr	r3, [pc, #592]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 030c 	and.w	r3, r3, #12
 800559c:	2b04      	cmp	r3, #4
 800559e:	d019      	beq.n	80055d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055a0:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055ac:	4b8e      	ldr	r3, [pc, #568]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055b8:	d00c      	beq.n	80055d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ba:	4b8b      	ldr	r3, [pc, #556]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d112      	bne.n	80055ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c6:	4b88      	ldr	r3, [pc, #544]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d2:	d10b      	bne.n	80055ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	4b84      	ldr	r3, [pc, #528]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d05b      	beq.n	8005698 <HAL_RCC_OscConfig+0x124>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d157      	bne.n	8005698 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e25a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d106      	bne.n	8005604 <HAL_RCC_OscConfig+0x90>
 80055f6:	4b7c      	ldr	r3, [pc, #496]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a7b      	ldr	r2, [pc, #492]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e01d      	b.n	8005640 <HAL_RCC_OscConfig+0xcc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800560c:	d10c      	bne.n	8005628 <HAL_RCC_OscConfig+0xb4>
 800560e:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a75      	ldr	r2, [pc, #468]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4b73      	ldr	r3, [pc, #460]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a72      	ldr	r2, [pc, #456]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e00b      	b.n	8005640 <HAL_RCC_OscConfig+0xcc>
 8005628:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a6e      	ldr	r2, [pc, #440]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6b      	ldr	r2, [pc, #428]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800563a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fd fe16 	bl	8003278 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005650:	f7fd fe12 	bl	8003278 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b64      	cmp	r3, #100	; 0x64
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e21f      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4b61      	ldr	r3, [pc, #388]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0xdc>
 800566e:	e014      	b.n	800569a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fd fe02 	bl	8003278 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005678:	f7fd fdfe 	bl	8003278 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e20b      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568a:	4b57      	ldr	r3, [pc, #348]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x104>
 8005696:	e000      	b.n	800569a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d06f      	beq.n	8005786 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056a6:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d017      	beq.n	80056e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056b2:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d105      	bne.n	80056ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056be:	4b4a      	ldr	r3, [pc, #296]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d11c      	bne.n	8005710 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d6:	4b44      	ldr	r3, [pc, #272]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_RCC_OscConfig+0x186>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e1d3      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b3b      	ldr	r3, [pc, #236]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4937      	ldr	r1, [pc, #220]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	e03a      	b.n	8005786 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b34      	ldr	r3, [pc, #208]	; (80057ec <HAL_RCC_OscConfig+0x278>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fd fdab 	bl	8003278 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005726:	f7fd fda7 	bl	8003278 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1b4      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	4b2b      	ldr	r3, [pc, #172]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005744:	4b28      	ldr	r3, [pc, #160]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4925      	ldr	r1, [pc, #148]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 8005754:	4313      	orrs	r3, r2
 8005756:	600b      	str	r3, [r1, #0]
 8005758:	e015      	b.n	8005786 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575a:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x278>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fd fd8a 	bl	8003278 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005768:	f7fd fd86 	bl	8003278 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e193      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d036      	beq.n	8005800 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d016      	beq.n	80057c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579a:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fd fd6a 	bl	8003278 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fd fd66 	bl	8003278 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e173      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCC_OscConfig+0x274>)
 80057bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x234>
 80057c6:	e01b      	b.n	8005800 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ce:	f7fd fd53 	bl	8003278 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d4:	e00e      	b.n	80057f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d6:	f7fd fd4f 	bl	8003278 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d907      	bls.n	80057f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e15c      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
 80057e8:	40023800 	.word	0x40023800
 80057ec:	42470000 	.word	0x42470000
 80057f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80057f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ea      	bne.n	80057d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8097 	beq.w	800593c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005812:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	4b7f      	ldr	r3, [pc, #508]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a7e      	ldr	r2, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40
 800582e:	4b7c      	ldr	r3, [pc, #496]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	4b79      	ldr	r3, [pc, #484]	; (8005a24 <HAL_RCC_OscConfig+0x4b0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d118      	bne.n	800587c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584a:	4b76      	ldr	r3, [pc, #472]	; (8005a24 <HAL_RCC_OscConfig+0x4b0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a75      	ldr	r2, [pc, #468]	; (8005a24 <HAL_RCC_OscConfig+0x4b0>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005856:	f7fd fd0f 	bl	8003278 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fd fd0b 	bl	8003278 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e118      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4b6c      	ldr	r3, [pc, #432]	; (8005a24 <HAL_RCC_OscConfig+0x4b0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x31e>
 8005884:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a65      	ldr	r2, [pc, #404]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e01c      	b.n	80058cc <HAL_RCC_OscConfig+0x358>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x340>
 800589a:	4b61      	ldr	r3, [pc, #388]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4a60      	ldr	r2, [pc, #384]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058a0:	f043 0304 	orr.w	r3, r3, #4
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
 80058a6:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	4a5d      	ldr	r2, [pc, #372]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6713      	str	r3, [r2, #112]	; 0x70
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0x358>
 80058b4:	4b5a      	ldr	r3, [pc, #360]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	4a59      	ldr	r2, [pc, #356]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
 80058c0:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	4a56      	ldr	r2, [pc, #344]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058c6:	f023 0304 	bic.w	r3, r3, #4
 80058ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd fcd0 	bl	8003278 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058dc:	f7fd fccc 	bl	8003278 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e0d7      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f2:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0ee      	beq.n	80058dc <HAL_RCC_OscConfig+0x368>
 80058fe:	e014      	b.n	800592a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fd fcba 	bl	8003278 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005906:	e00a      	b.n	800591e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005908:	f7fd fcb6 	bl	8003278 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	; 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e0c1      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591e:	4b40      	ldr	r3, [pc, #256]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1ee      	bne.n	8005908 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	4a3a      	ldr	r2, [pc, #232]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80ad 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005946:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b08      	cmp	r3, #8
 8005950:	d060      	beq.n	8005a14 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d145      	bne.n	80059e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595a:	4b33      	ldr	r3, [pc, #204]	; (8005a28 <HAL_RCC_OscConfig+0x4b4>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005960:	f7fd fc8a 	bl	8003278 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005968:	f7fd fc86 	bl	8003278 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e093      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	3b01      	subs	r3, #1
 80059a0:	041b      	lsls	r3, r3, #16
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	071b      	lsls	r3, r3, #28
 80059b2:	491b      	ldr	r1, [pc, #108]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b8:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <HAL_RCC_OscConfig+0x4b4>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fd fc5b 	bl	8003278 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fd fc57 	bl	8003278 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e064      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x452>
 80059e4:	e05c      	b.n	8005aa0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_RCC_OscConfig+0x4b4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd fc44 	bl	8003278 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fd fc40 	bl	8003278 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e04d      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f0      	bne.n	80059f4 <HAL_RCC_OscConfig+0x480>
 8005a12:	e045      	b.n	8005aa0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e040      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
 8005a20:	40023800 	.word	0x40023800
 8005a24:	40007000 	.word	0x40007000
 8005a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a2c:	4b1f      	ldr	r3, [pc, #124]	; (8005aac <HAL_RCC_OscConfig+0x538>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d030      	beq.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d129      	bne.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d122      	bne.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d119      	bne.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10f      	bne.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800

08005ab0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e066      	b.n	8005b94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7f5b      	ldrb	r3, [r3, #29]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc f9ee 	bl	8001eb8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	22ca      	movs	r2, #202	; 0xca
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2253      	movs	r2, #83	; 0x53
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f927 	bl	8005d46 <RTC_EnterInitMode>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d12c      	bne.n	8005b5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6899      	ldr	r1, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	68d2      	ldr	r2, [r2, #12]
 8005b3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6919      	ldr	r1, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	041a      	lsls	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f92e 	bl	8005db4 <RTC_ExitInitMode>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d113      	bne.n	8005b8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005bce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	0d9b      	lsrs	r3, r3, #22
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d11a      	bne.n	8005c4e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f8ee 	bl	8005dfe <RTC_Bcd2ToByte>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f8e5 	bl	8005dfe <RTC_Bcd2ToByte>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	789b      	ldrb	r3, [r3, #2]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f8dc 	bl	8005dfe <RTC_Bcd2ToByte>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11a      	bne.n	8005cec <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f89f 	bl	8005dfe <RTC_Bcd2ToByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f896 	bl	8005dfe <RTC_Bcd2ToByte>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	789b      	ldrb	r3, [r3, #2]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f88d 	bl	8005dfe <RTC_Bcd2ToByte>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d10:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d12:	f7fd fab1 	bl	8003278 <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d18:	e009      	b.n	8005d2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d1a:	f7fd faad 	bl	8003278 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d28:	d901      	bls.n	8005d2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e007      	b.n	8005d3e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ee      	beq.n	8005d1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d122      	bne.n	8005daa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d74:	f7fd fa80 	bl	8003278 <HAL_GetTick>
 8005d78:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d7a:	e00c      	b.n	8005d96 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d7c:	f7fd fa7c 	bl	8003278 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d8a:	d904      	bls.n	8005d96 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <RTC_EnterInitMode+0x64>
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d1e8      	bne.n	8005d7c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff89 	bl	8005cf6 <HAL_RTC_WaitForSynchro>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d004      	beq.n	8005df4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2204      	movs	r2, #4
 8005dee:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	4603      	mov	r3, r0
 8005e06:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	4413      	add	r3, r2
 8005e28:	b2db      	uxtb	r3, r3
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e07b      	b.n	8005f40 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e58:	d009      	beq.n	8005e6e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	61da      	str	r2, [r3, #28]
 8005e60:	e005      	b.n	8005e6e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fc f9e7 	bl	800225c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	ea42 0103 	orr.w	r1, r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	f003 0104 	and.w	r1, r3, #4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f003 0210 	and.w	r2, r3, #16
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d101      	bne.n	8005f6a <HAL_SPI_Transmit+0x22>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e126      	b.n	80061b8 <HAL_SPI_Transmit+0x270>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f72:	f7fd f981 	bl	8003278 <HAL_GetTick>
 8005f76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f8c:	e10b      	b.n	80061a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_SPI_Transmit+0x52>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f9e:	e102      	b.n	80061a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe6:	d10f      	bne.n	8006008 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d007      	beq.n	8006026 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d14b      	bne.n	80060c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_SPI_Transmit+0xf6>
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d13e      	bne.n	80060bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	881a      	ldrh	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	1c9a      	adds	r2, r3, #2
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006062:	e02b      	b.n	80060bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d112      	bne.n	8006098 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	881a      	ldrh	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	86da      	strh	r2, [r3, #54]	; 0x36
 8006096:	e011      	b.n	80060bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006098:	f7fd f8ee 	bl	8003278 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d803      	bhi.n	80060b0 <HAL_SPI_Transmit+0x168>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ae:	d102      	bne.n	80060b6 <HAL_SPI_Transmit+0x16e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060ba:	e074      	b.n	80061a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ce      	bne.n	8006064 <HAL_SPI_Transmit+0x11c>
 80060c6:	e04c      	b.n	8006162 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_Transmit+0x18e>
 80060d0:	8afb      	ldrh	r3, [r7, #22]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d140      	bne.n	8006158 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060fc:	e02c      	b.n	8006158 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d113      	bne.n	8006134 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	86da      	strh	r2, [r3, #54]	; 0x36
 8006132:	e011      	b.n	8006158 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006134:	f7fd f8a0 	bl	8003278 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_Transmit+0x204>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800614a:	d102      	bne.n	8006152 <HAL_SPI_Transmit+0x20a>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006156:	e026      	b.n	80061a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1cd      	bne.n	80060fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa54 	bl	8006614 <SPI_EndRxTxTransaction>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e000      	b.n	80061a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061ce:	2301      	movs	r3, #1
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x26>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e18a      	b.n	80064fc <HAL_SPI_TransmitReceive+0x33c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ee:	f7fd f843 	bl	8003278 <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620c:	2b01      	cmp	r3, #1
 800620e:	d00f      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x70>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006216:	d107      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x68>
 8006220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006224:	2b04      	cmp	r3, #4
 8006226:	d003      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006228:	2302      	movs	r3, #2
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800622e:	e15b      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x82>
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006248:	e14e      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b04      	cmp	r3, #4
 8006254:	d003      	beq.n	800625e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2205      	movs	r2, #5
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	887a      	ldrh	r2, [r7, #2]
 800626e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d007      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ba:	d178      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x10a>
 80062c4:	8b7b      	ldrh	r3, [r7, #26]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d166      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ee:	e053      	b.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d11b      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x176>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d016      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x176>
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d113      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	881a      	ldrh	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d119      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x1b8>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	b292      	uxth	r2, r2
 800635a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006374:	2301      	movs	r3, #1
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006378:	f7fc ff7e 	bl	8003278 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006384:	429a      	cmp	r2, r3
 8006386:	d807      	bhi.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638e:	d003      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006396:	e0a7      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1a6      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x130>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1a1      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x130>
 80063ac:	e07c      	b.n	80064a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x1fc>
 80063b6:	8b7b      	ldrh	r3, [r7, #26]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d16b      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	e057      	b.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d11c      	bne.n	800642c <HAL_SPI_TransmitReceive+0x26c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <HAL_SPI_TransmitReceive+0x26c>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d114      	bne.n	800642c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b01      	cmp	r3, #1
 8006438:	d119      	bne.n	800646e <HAL_SPI_TransmitReceive+0x2ae>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800646a:	2301      	movs	r3, #1
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800646e:	f7fc ff03 	bl	8003278 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647a:	429a      	cmp	r2, r3
 800647c:	d803      	bhi.n	8006486 <HAL_SPI_TransmitReceive+0x2c6>
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006484:	d102      	bne.n	800648c <HAL_SPI_TransmitReceive+0x2cc>
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006492:	e029      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1a2      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x224>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d19d      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f8b1 	bl	8006614 <SPI_EndRxTxTransaction>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064c4:	e010      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e000      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3730      	adds	r7, #48	; 0x30
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006514:	f7fc feb0 	bl	8003278 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	4413      	add	r3, r2
 8006522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006524:	f7fc fea8 	bl	8003278 <HAL_GetTick>
 8006528:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800652a:	4b39      	ldr	r3, [pc, #228]	; (8006610 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	015b      	lsls	r3, r3, #5
 8006530:	0d1b      	lsrs	r3, r3, #20
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	fb02 f303 	mul.w	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800653a:	e054      	b.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006542:	d050      	beq.n	80065e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006544:	f7fc fe98 	bl	8003278 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	429a      	cmp	r2, r3
 8006552:	d902      	bls.n	800655a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d13d      	bne.n	80065d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006572:	d111      	bne.n	8006598 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657c:	d004      	beq.n	8006588 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006586:	d107      	bne.n	8006598 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a0:	d10f      	bne.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e017      	b.n	8006606 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	429a      	cmp	r2, r3
 8006602:	d19b      	bne.n	800653c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000004 	.word	0x20000004

08006614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006620:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <SPI_EndRxTxTransaction+0x7c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <SPI_EndRxTxTransaction+0x80>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0d5b      	lsrs	r3, r3, #21
 800662c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d112      	bne.n	8006666 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	2180      	movs	r1, #128	; 0x80
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff ff5a 	bl	8006504 <SPI_WaitFlagStateUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e00f      	b.n	8006686 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	3b01      	subs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b80      	cmp	r3, #128	; 0x80
 800667e:	d0f2      	beq.n	8006666 <SPI_EndRxTxTransaction+0x52>
 8006680:	e000      	b.n	8006684 <SPI_EndRxTxTransaction+0x70>
        break;
 8006682:	bf00      	nop
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000004 	.word	0x20000004
 8006694:	165e9f81 	.word	0x165e9f81

08006698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e041      	b.n	800672e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fc fc06 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f000 fc5e 	bl	8006f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e04e      	b.n	80067ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a23      	ldr	r2, [pc, #140]	; (80067fc <HAL_TIM_Base_Start_IT+0xc4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677a:	d01d      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <HAL_TIM_Base_Start_IT+0xc8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <HAL_TIM_Base_Start_IT+0xcc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <HAL_TIM_Base_Start_IT+0xd0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1b      	ldr	r2, [pc, #108]	; (800680c <HAL_TIM_Base_Start_IT+0xd4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <HAL_TIM_Base_Start_IT+0xd8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x80>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_TIM_Base_Start_IT+0xdc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d111      	bne.n	80067dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b06      	cmp	r3, #6
 80067c8:	d010      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	e007      	b.n	80067ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40001800 	.word	0x40001800

08006818 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e041      	b.n	80068ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fc fa7c 	bl	8002d3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f000 fb9e 	bl	8006f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_IC_Start_IT+0x1e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	e013      	b.n	80068fe <HAL_TIM_IC_Start_IT+0x46>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_IC_Start_IT+0x2e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	e00b      	b.n	80068fe <HAL_TIM_IC_Start_IT+0x46>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_IC_Start_IT+0x3e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e003      	b.n	80068fe <HAL_TIM_IC_Start_IT+0x46>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <HAL_TIM_IC_Start_IT+0x58>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e013      	b.n	8006938 <HAL_TIM_IC_Start_IT+0x80>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d104      	bne.n	8006920 <HAL_TIM_IC_Start_IT+0x68>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800691c:	b2db      	uxtb	r3, r3
 800691e:	e00b      	b.n	8006938 <HAL_TIM_IC_Start_IT+0x80>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b08      	cmp	r3, #8
 8006924:	d104      	bne.n	8006930 <HAL_TIM_IC_Start_IT+0x78>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e003      	b.n	8006938 <HAL_TIM_IC_Start_IT+0x80>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006936:	b2db      	uxtb	r3, r3
 8006938:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d102      	bne.n	8006946 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006940:	7b7b      	ldrb	r3, [r7, #13]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e0cc      	b.n	8006ae4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_IC_Start_IT+0xa2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006958:	e013      	b.n	8006982 <HAL_TIM_IC_Start_IT+0xca>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d104      	bne.n	800696a <HAL_TIM_IC_Start_IT+0xb2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006968:	e00b      	b.n	8006982 <HAL_TIM_IC_Start_IT+0xca>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d104      	bne.n	800697a <HAL_TIM_IC_Start_IT+0xc2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006978:	e003      	b.n	8006982 <HAL_TIM_IC_Start_IT+0xca>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_TIM_IC_Start_IT+0xda>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006990:	e013      	b.n	80069ba <HAL_TIM_IC_Start_IT+0x102>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_IC_Start_IT+0xea>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069a0:	e00b      	b.n	80069ba <HAL_TIM_IC_Start_IT+0x102>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_IC_Start_IT+0xfa>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b0:	e003      	b.n	80069ba <HAL_TIM_IC_Start_IT+0x102>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b0c      	cmp	r3, #12
 80069be:	d841      	bhi.n	8006a44 <HAL_TIM_IC_Start_IT+0x18c>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <HAL_TIM_IC_Start_IT+0x110>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a45 	.word	0x08006a45
 80069d4:	08006a45 	.word	0x08006a45
 80069d8:	08006a0f 	.word	0x08006a0f
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	08006a45 	.word	0x08006a45
 80069e4:	08006a45 	.word	0x08006a45
 80069e8:	08006a21 	.word	0x08006a21
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006a33 	.word	0x08006a33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0202 	orr.w	r2, r2, #2
 8006a0a:	60da      	str	r2, [r3, #12]
      break;
 8006a0c:	e01d      	b.n	8006a4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0204 	orr.w	r2, r2, #4
 8006a1c:	60da      	str	r2, [r3, #12]
      break;
 8006a1e:	e014      	b.n	8006a4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0208 	orr.w	r2, r2, #8
 8006a2e:	60da      	str	r2, [r3, #12]
      break;
 8006a30:	e00b      	b.n	8006a4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0210 	orr.w	r2, r2, #16
 8006a40:	60da      	str	r2, [r3, #12]
      break;
 8006a42:	e002      	b.n	8006a4a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d148      	bne.n	8006ae2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fd78 	bl	800754e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_TIM_IC_Start_IT+0x234>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <HAL_TIM_IC_Start_IT+0x238>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIM_IC_Start_IT+0x240>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <HAL_TIM_IC_Start_IT+0x244>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIM_IC_Start_IT+0x248>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_IC_Start_IT+0x1f6>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_IC_Start_IT+0x24c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d111      	bne.n	8006ad2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d010      	beq.n	8006ae2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad0:	e007      	b.n	8006ae2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40001800 	.word	0x40001800

08006b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d122      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d11b      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0202 	mvn.w	r2, #2
 8006b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fc fa10 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8006b50:	e005      	b.n	8006b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa02 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa09 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d122      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11b      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f06f 0204 	mvn.w	r2, #4
 8006b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fc f9e6 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8006ba4:	e005      	b.n	8006bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f9d8 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f9df 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d122      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d11b      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0208 	mvn.w	r2, #8
 8006bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2204      	movs	r2, #4
 8006be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fc f9bc 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8006bf8:	e005      	b.n	8006c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9ae 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f9b5 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d122      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d11b      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0210 	mvn.w	r2, #16
 8006c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2208      	movs	r2, #8
 8006c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fc f992 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8006c4c:	e005      	b.n	8006c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f984 	bl	8006f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f98b 	bl	8006f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10e      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0201 	mvn.w	r2, #1
 8006c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb f8d8 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d10e      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d107      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fcf6 	bl	80076a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d10e      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d107      	bne.n	8006ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f950 	bl	8006f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d10e      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d107      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0220 	mvn.w	r2, #32
 8006d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fcc0 	bl	8007690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e088      	b.n	8006e48 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6819      	ldr	r1, [r3, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f000 fa52 	bl	80071fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699a      	ldr	r2, [r3, #24]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 020c 	bic.w	r2, r2, #12
 8006d66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6999      	ldr	r1, [r3, #24]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	619a      	str	r2, [r3, #24]
 8006d7a:	e060      	b.n	8006e3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d11c      	bne.n	8006dbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6819      	ldr	r1, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f000 fad6 	bl	8007342 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006da4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6999      	ldr	r1, [r3, #24]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	021a      	lsls	r2, r3, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	619a      	str	r2, [r3, #24]
 8006dba:	e040      	b.n	8006e3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d11b      	bne.n	8006dfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6819      	ldr	r1, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f000 fb23 	bl	800741c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 020c 	bic.w	r2, r2, #12
 8006de4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69d9      	ldr	r1, [r3, #28]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	61da      	str	r2, [r3, #28]
 8006df8:	e021      	b.n	8006e3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b0c      	cmp	r3, #12
 8006dfe:	d11c      	bne.n	8006e3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6819      	ldr	r1, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f000 fb40 	bl	8007494 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69d9      	ldr	r1, [r3, #28]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	61da      	str	r2, [r3, #28]
 8006e38:	e001      	b.n	8006e3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e031      	b.n	8006ecc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f92c 	bl	80070d8 <TIM_SlaveTimer_SetConfig>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e018      	b.n	8006ecc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eb8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d831      	bhi.n	8006f4c <HAL_TIM_ReadCapturedValue+0x78>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f25 	.word	0x08006f25
 8006ef4:	08006f4d 	.word	0x08006f4d
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f2f 	.word	0x08006f2f
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f4d 	.word	0x08006f4d
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f43 	.word	0x08006f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	60fb      	str	r3, [r7, #12]

      break;
 8006f2c:	e00f      	b.n	8006f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	60fb      	str	r3, [r7, #12]

      break;
 8006f36:	e00a      	b.n	8006f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	60fb      	str	r3, [r7, #12]

      break;
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	60fb      	str	r3, [r7, #12]

      break;
 8006f4a:	e000      	b.n	8006f4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f4c:	bf00      	nop
  }

  return tmpreg;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a40      	ldr	r2, [pc, #256]	; (80070ac <TIM_Base_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d013      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d00f      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3d      	ldr	r2, [pc, #244]	; (80070b0 <TIM_Base_SetConfig+0x118>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3c      	ldr	r2, [pc, #240]	; (80070b4 <TIM_Base_SetConfig+0x11c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3b      	ldr	r2, [pc, #236]	; (80070b8 <TIM_Base_SetConfig+0x120>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <TIM_Base_SetConfig+0x124>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d108      	bne.n	8006fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2f      	ldr	r2, [pc, #188]	; (80070ac <TIM_Base_SetConfig+0x114>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d02b      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff8:	d027      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <TIM_Base_SetConfig+0x118>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d023      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <TIM_Base_SetConfig+0x11c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01f      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <TIM_Base_SetConfig+0x120>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01b      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a29      	ldr	r2, [pc, #164]	; (80070bc <TIM_Base_SetConfig+0x124>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d017      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <TIM_Base_SetConfig+0x128>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <TIM_Base_SetConfig+0x12c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00f      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <TIM_Base_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00b      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a25      	ldr	r2, [pc, #148]	; (80070cc <TIM_Base_SetConfig+0x134>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d007      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <TIM_Base_SetConfig+0x138>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d003      	beq.n	800704a <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a23      	ldr	r2, [pc, #140]	; (80070d4 <TIM_Base_SetConfig+0x13c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <TIM_Base_SetConfig+0x114>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_Base_SetConfig+0xf8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <TIM_Base_SetConfig+0x124>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d103      	bne.n	8007098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	615a      	str	r2, [r3, #20]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40010400 	.word	0x40010400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800
 80070cc:	40001800 	.word	0x40001800
 80070d0:	40001c00 	.word	0x40001c00
 80070d4:	40002000 	.word	0x40002000

080070d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 0307 	bic.w	r3, r3, #7
 8007106:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b70      	cmp	r3, #112	; 0x70
 8007120:	d01a      	beq.n	8007158 <TIM_SlaveTimer_SetConfig+0x80>
 8007122:	2b70      	cmp	r3, #112	; 0x70
 8007124:	d860      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007126:	2b60      	cmp	r3, #96	; 0x60
 8007128:	d054      	beq.n	80071d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800712a:	2b60      	cmp	r3, #96	; 0x60
 800712c:	d85c      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800712e:	2b50      	cmp	r3, #80	; 0x50
 8007130:	d046      	beq.n	80071c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007132:	2b50      	cmp	r3, #80	; 0x50
 8007134:	d858      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007136:	2b40      	cmp	r3, #64	; 0x40
 8007138:	d019      	beq.n	800716e <TIM_SlaveTimer_SetConfig+0x96>
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d854      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800713e:	2b30      	cmp	r3, #48	; 0x30
 8007140:	d055      	beq.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
 8007142:	2b30      	cmp	r3, #48	; 0x30
 8007144:	d850      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d051      	beq.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
 800714a:	2b20      	cmp	r3, #32
 800714c:	d84c      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04d      	beq.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
 8007152:	2b10      	cmp	r3, #16
 8007154:	d04b      	beq.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
 8007156:	e047      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	68d9      	ldr	r1, [r3, #12]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f000 f9d1 	bl	800750e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800716c:	e040      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b05      	cmp	r3, #5
 8007174:	d101      	bne.n	800717a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03b      	b.n	80071f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
      break;
 80071be:	e017      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	6899      	ldr	r1, [r3, #8]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	461a      	mov	r2, r3
 80071ce:	f000 f889 	bl	80072e4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80071d2:	e00d      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6818      	ldr	r0, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	461a      	mov	r2, r3
 80071e2:	f000 f8eb 	bl	80073bc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80071e6:	e003      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]
      break;
 80071ec:	e000      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80071ee:	bf00      	nop
  }

  return status;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <TIM_TI1_SetConfig+0xcc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d01b      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d017      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a25      	ldr	r2, [pc, #148]	; (80072cc <TIM_TI1_SetConfig+0xd0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a24      	ldr	r2, [pc, #144]	; (80072d0 <TIM_TI1_SetConfig+0xd4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00f      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <TIM_TI1_SetConfig+0xd8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <TIM_TI1_SetConfig+0xdc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <TIM_TI1_SetConfig+0xe0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_TI1_SetConfig+0x66>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <TIM_TI1_SetConfig+0xe4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <TIM_TI1_SetConfig+0x6a>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <TIM_TI1_SetConfig+0x6c>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e003      	b.n	8007286 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	b2db      	uxtb	r3, r3
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f023 030a 	bic.w	r3, r3, #10
 80072a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f003 030a 	and.w	r3, r3, #10
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40010400 	.word	0x40010400
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40001800 	.word	0x40001800

080072e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 030a 	bic.w	r3, r3, #10
 8007320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f023 0210 	bic.w	r2, r3, #16
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	031b      	lsls	r3, r3, #12
 8007386:	b29b      	uxth	r3, r3
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007394:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	621a      	str	r2, [r3, #32]
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f023 0210 	bic.w	r2, r3, #16
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	031b      	lsls	r3, r3, #12
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	621a      	str	r2, [r3, #32]
}
 8007410:	bf00      	nop
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 0303 	bic.w	r3, r3, #3
 8007448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	b2db      	uxtb	r3, r3
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800746c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	621a      	str	r2, [r3, #32]
}
 8007488:	bf00      	nop
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	031b      	lsls	r3, r3, #12
 80074d8:	b29b      	uxth	r3, r3
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	031b      	lsls	r3, r3, #12
 80074ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	021a      	lsls	r2, r3, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	431a      	orrs	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	609a      	str	r2, [r3, #8]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800754e:	b480      	push	{r7}
 8007550:	b087      	sub	sp, #28
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	2201      	movs	r2, #1
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	43db      	mvns	r3, r3
 8007570:	401a      	ands	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1a      	ldr	r2, [r3, #32]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	431a      	orrs	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	621a      	str	r2, [r3, #32]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e05a      	b.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a21      	ldr	r2, [pc, #132]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d022      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fc:	d01d      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d018      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1a      	ldr	r2, [pc, #104]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00e      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a18      	ldr	r2, [pc, #96]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10c      	bne.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4313      	orrs	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40001800 	.word	0x40001800

08007690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e033      	b.n	8007732 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fb fcbc 	bl	800305c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f90b 	bl	8007908 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695a      	ldr	r2, [r3, #20]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007710:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007720:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b08a      	sub	sp, #40	; 0x28
 800773e:	af02      	add	r7, sp, #8
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d17c      	bne.n	8007850 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_USART_Transmit+0x28>
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e075      	b.n	8007852 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_USART_Transmit+0x3a>
 8007770:	2302      	movs	r3, #2
 8007772:	e06e      	b.n	8007852 <HAL_USART_Transmit+0x118>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2212      	movs	r2, #18
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800778a:	f7fb fd75 	bl	8003278 <HAL_GetTick>
 800778e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	88fa      	ldrh	r2, [r7, #6]
 8007794:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a4:	d108      	bne.n	80077b8 <HAL_USART_Transmit+0x7e>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	e003      	b.n	80077c0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80077c0:	e02a      	b.n	8007818 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f844 	bl	800785a <USART_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e03a      	b.n	8007852 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f0:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	3302      	adds	r3, #2
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	e007      	b.n	800780a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	3301      	adds	r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1cf      	bne.n	80077c2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2200      	movs	r2, #0
 800782a:	2140      	movs	r1, #64	; 0x40
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f814 	bl	800785a <USART_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e00a      	b.n	8007852 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800786a:	e038      	b.n	80078de <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007872:	d034      	beq.n	80078de <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <USART_WaitOnFlagUntilTimeout+0x30>
 800787a:	f7fb fcfd 	bl	8003278 <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	429a      	cmp	r2, r3
 8007888:	d229      	bcs.n	80078de <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007898:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0220 	bic.w	r2, r2, #32
 80078a8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078b8:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e00f      	b.n	80078fe <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4013      	ands	r3, r2
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d0b7      	beq.n	800786c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800790c:	b0c6      	sub	sp, #280	; 0x118
 800790e:	af00      	add	r7, sp, #0
 8007910:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8007914:	2300      	movs	r3, #0
 8007916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800791a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68d9      	ldr	r1, [r3, #12]
 8007922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	f021 030c 	bic.w	r3, r1, #12
 800792c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800792e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007942:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800794c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007950:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007952:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	431a      	orrs	r2, r3
 800795c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007960:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007962:	431a      	orrs	r2, r3
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007968:	4313      	orrs	r3, r2
 800796a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800796e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007992:	f023 030c 	bic.w	r3, r3, #12
 8007996:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800799a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80079ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6959      	ldr	r1, [r3, #20]
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80079dc:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80079de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b8b      	ldr	r3, [pc, #556]	; (8007c14 <USART_SetConfig+0x30c>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d006      	beq.n	80079f8 <USART_SetConfig+0xf0>
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	4b89      	ldr	r3, [pc, #548]	; (8007c18 <USART_SetConfig+0x310>)
 80079f2:	429a      	cmp	r2, r3
 80079f4:	f040 8114 	bne.w	8007c20 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fd f8a2 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 80079fc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a0a:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007a0e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	1891      	adds	r1, r2, r2
 8007a18:	6739      	str	r1, [r7, #112]	; 0x70
 8007a1a:	415b      	adcs	r3, r3
 8007a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8007a1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007a22:	4621      	mov	r1, r4
 8007a24:	eb12 0801 	adds.w	r8, r2, r1
 8007a28:	4629      	mov	r1, r5
 8007a2a:	eb43 0901 	adc.w	r9, r3, r1
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a42:	4690      	mov	r8, r2
 8007a44:	4699      	mov	r9, r3
 8007a46:	4623      	mov	r3, r4
 8007a48:	eb18 0303 	adds.w	r3, r8, r3
 8007a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a50:	462b      	mov	r3, r5
 8007a52:	eb49 0303 	adc.w	r3, r9, r3
 8007a56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a66:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007a6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	18db      	adds	r3, r3, r3
 8007a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a74:	4613      	mov	r3, r2
 8007a76:	eb42 0303 	adc.w	r3, r2, r3
 8007a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a80:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007a84:	f7f9 f900 	bl	8000c88 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <USART_SetConfig+0x314>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	011c      	lsls	r4, r3, #4
 8007a96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aa0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007aa4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	6639      	str	r1, [r7, #96]	; 0x60
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ab4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007ab8:	4641      	mov	r1, r8
 8007aba:	1851      	adds	r1, r2, r1
 8007abc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007abe:	4649      	mov	r1, r9
 8007ac0:	414b      	adcs	r3, r1
 8007ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	00cb      	lsls	r3, r1, #3
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ada:	4651      	mov	r1, sl
 8007adc:	00ca      	lsls	r2, r1, #3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007aec:	464b      	mov	r3, r9
 8007aee:	460a      	mov	r2, r1
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b04:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	18db      	adds	r3, r3, r3
 8007b10:	653b      	str	r3, [r7, #80]	; 0x50
 8007b12:	4613      	mov	r3, r2
 8007b14:	eb42 0303 	adc.w	r3, r2, r3
 8007b18:	657b      	str	r3, [r7, #84]	; 0x54
 8007b1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b1e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b22:	f7f9 f8b1 	bl	8000c88 <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <USART_SetConfig+0x314>)
 8007b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	2264      	movs	r2, #100	; 0x64
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	1acb      	subs	r3, r1, r3
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b42:	4b36      	ldr	r3, [pc, #216]	; (8007c1c <USART_SetConfig+0x314>)
 8007b44:	fba3 2302 	umull	r2, r3, r3, r2
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b50:	441c      	add	r4, r3
 8007b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	1891      	adds	r1, r2, r2
 8007b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b6c:	415b      	adcs	r3, r3
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b74:	4641      	mov	r1, r8
 8007b76:	1851      	adds	r1, r2, r1
 8007b78:	6439      	str	r1, [r7, #64]	; 0x40
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	414b      	adcs	r3, r1
 8007b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	00cb      	lsls	r3, r1, #3
 8007b90:	4651      	mov	r1, sl
 8007b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b96:	4651      	mov	r1, sl
 8007b98:	00ca      	lsls	r2, r1, #3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	189b      	adds	r3, r3, r2
 8007ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	460a      	mov	r2, r1
 8007bac:	eb42 0303 	adc.w	r3, r2, r3
 8007bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	18db      	adds	r3, r3, r3
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bce:	4613      	mov	r3, r2
 8007bd0:	eb42 0303 	adc.w	r3, r2, r3
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bde:	f7f9 f853 	bl	8000c88 <__aeabi_uldivmod>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <USART_SetConfig+0x314>)
 8007be8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	2164      	movs	r1, #100	; 0x64
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	3332      	adds	r3, #50	; 0x32
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <USART_SetConfig+0x314>)
 8007bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	f003 0207 	and.w	r2, r3, #7
 8007c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4422      	add	r2, r4
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	e109      	b.n	8007e26 <USART_SetConfig+0x51e>
 8007c12:	bf00      	nop
 8007c14:	40011000 	.word	0x40011000
 8007c18:	40011400 	.word	0x40011400
 8007c1c:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fc ff7a 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8007c24:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007c28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c32:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c36:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c3a:	4642      	mov	r2, r8
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	1891      	adds	r1, r2, r2
 8007c40:	6339      	str	r1, [r7, #48]	; 0x30
 8007c42:	415b      	adcs	r3, r3
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	1854      	adds	r4, r2, r1
 8007c4e:	4649      	mov	r1, r9
 8007c50:	eb43 0501 	adc.w	r5, r3, r1
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	00eb      	lsls	r3, r5, #3
 8007c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c62:	00e2      	lsls	r2, r4, #3
 8007c64:	4614      	mov	r4, r2
 8007c66:	461d      	mov	r5, r3
 8007c68:	4643      	mov	r3, r8
 8007c6a:	18e3      	adds	r3, r4, r3
 8007c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c70:	464b      	mov	r3, r9
 8007c72:	eb45 0303 	adc.w	r3, r5, r3
 8007c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c86:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c8a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c8e:	460b      	mov	r3, r1
 8007c90:	18db      	adds	r3, r3, r3
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c94:	4613      	mov	r3, r2
 8007c96:	eb42 0303 	adc.w	r3, r2, r3
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ca4:	f7f8 fff0 	bl	8000c88 <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4b61      	ldr	r3, [pc, #388]	; (8007e34 <USART_SetConfig+0x52c>)
 8007cae:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	011c      	lsls	r4, r3, #4
 8007cb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cc4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	1891      	adds	r1, r2, r2
 8007cce:	6239      	str	r1, [r7, #32]
 8007cd0:	415b      	adcs	r3, r3
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cd8:	4641      	mov	r1, r8
 8007cda:	eb12 0a01 	adds.w	sl, r2, r1
 8007cde:	4649      	mov	r1, r9
 8007ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf8:	4692      	mov	sl, r2
 8007cfa:	469b      	mov	fp, r3
 8007cfc:	4643      	mov	r3, r8
 8007cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8007d02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d06:	464b      	mov	r3, r9
 8007d08:	eb4b 0303 	adc.w	r3, fp, r3
 8007d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d1c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d20:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007d24:	460b      	mov	r3, r1
 8007d26:	18db      	adds	r3, r3, r3
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	eb42 0303 	adc.w	r3, r2, r3
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d36:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d3a:	f7f8 ffa5 	bl	8000c88 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	4b3b      	ldr	r3, [pc, #236]	; (8007e34 <USART_SetConfig+0x52c>)
 8007d46:	fba3 2301 	umull	r2, r3, r3, r1
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	2264      	movs	r2, #100	; 0x64
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	1acb      	subs	r3, r1, r3
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <USART_SetConfig+0x52c>)
 8007d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d68:	441c      	add	r4, r3
 8007d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	6139      	str	r1, [r7, #16]
 8007d84:	415b      	adcs	r3, r3
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	1851      	adds	r1, r2, r1
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4649      	mov	r1, r9
 8007d94:	414b      	adcs	r3, r1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007da4:	4659      	mov	r1, fp
 8007da6:	00cb      	lsls	r3, r1, #3
 8007da8:	4651      	mov	r1, sl
 8007daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dae:	4651      	mov	r1, sl
 8007db0:	00ca      	lsls	r2, r1, #3
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	4642      	mov	r2, r8
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007dd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007ddc:	460b      	mov	r3, r1
 8007dde:	18db      	adds	r3, r3, r3
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	eb42 0303 	adc.w	r3, r2, r3
 8007de8:	607b      	str	r3, [r7, #4]
 8007dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007df2:	f7f8 ff49 	bl	8000c88 <__aeabi_uldivmod>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <USART_SetConfig+0x52c>)
 8007dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	2164      	movs	r1, #100	; 0x64
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	3332      	adds	r3, #50	; 0x32
 8007e0e:	4a09      	ldr	r2, [pc, #36]	; (8007e34 <USART_SetConfig+0x52c>)
 8007e10:	fba2 2303 	umull	r2, r3, r2, r3
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f003 0207 	and.w	r2, r3, #7
 8007e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4422      	add	r2, r4
 8007e22:	609a      	str	r2, [r3, #8]
  }
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e32:	bf00      	nop
 8007e34:	51eb851f 	.word	0x51eb851f

08007e38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e3c:	4904      	ldr	r1, [pc, #16]	; (8007e50 <MX_FATFS_Init+0x18>)
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <MX_FATFS_Init+0x1c>)
 8007e40:	f002 ff36 	bl	800acb0 <FATFS_LinkDriver>
 8007e44:	4603      	mov	r3, r0
 8007e46:	461a      	mov	r2, r3
 8007e48:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <MX_FATFS_Init+0x20>)
 8007e4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e4c:	bf00      	nop
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20001ea8 	.word	0x20001ea8
 8007e54:	20000010 	.word	0x20000010
 8007e58:	20001ea4 	.word	0x20001ea4

08007e5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv);
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f9d7 	bl	800822c <USER_SPI_initialize>
 8007e7e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_status(pdrv);
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fab5 	bl	8008404 <USER_SPI_status>
 8007e9a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8007eb4:	7bf8      	ldrb	r0, [r7, #15]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	f000 fab8 	bl	8008430 <USER_SPI_read>
 8007ec0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8007eda:	7bf8      	ldrb	r0, [r7, #15]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	f000 fb0b 	bl	80084fc <USER_SPI_write>
 8007ee6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	603a      	str	r2, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
 8007efc:	460b      	mov	r3, r1
 8007efe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007f00:	79b9      	ldrb	r1, [r7, #6]
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb74 	bl	80085f4 <USER_SPI_ioctl>
 8007f0c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007f20:	f7fb f9aa 	bl	8003278 <HAL_GetTick>
 8007f24:	4603      	mov	r3, r0
 8007f26:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <SPI_Timer_On+0x20>)
 8007f28:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007f2a:	4a04      	ldr	r2, [pc, #16]	; (8007f3c <SPI_Timer_On+0x24>)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6013      	str	r3, [r2, #0]
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20001eb0 	.word	0x20001eb0
 8007f3c:	20001eb4 	.word	0x20001eb4

08007f40 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007f44:	f7fb f998 	bl	8003278 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <SPI_Timer_Status+0x24>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <SPI_Timer_Status+0x28>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	bf34      	ite	cc
 8007f58:	2301      	movcc	r3, #1
 8007f5a:	2300      	movcs	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001eb0 	.word	0x20001eb0
 8007f68:	20001eb4 	.word	0x20001eb4

08007f6c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007f76:	f107 020f 	add.w	r2, r7, #15
 8007f7a:	1df9      	adds	r1, r7, #7
 8007f7c:	2332      	movs	r3, #50	; 0x32
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2301      	movs	r3, #1
 8007f82:	4804      	ldr	r0, [pc, #16]	; (8007f94 <xchg_spi+0x28>)
 8007f84:	f7fe f91c 	bl	80061c0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20001bf0 	.word	0x20001bf0

08007f98 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e00a      	b.n	8007fbe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	18d4      	adds	r4, r2, r3
 8007fae:	20ff      	movs	r0, #255	; 0xff
 8007fb0:	f7ff ffdc 	bl	8007f6c <xchg_spi>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d3f0      	bcc.n	8007fa8 <rcvr_spi_multi+0x10>
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}

08007fd0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4803      	ldr	r0, [pc, #12]	; (8007ff4 <xmit_spi_multi+0x24>)
 8007fe6:	f7fd ffaf 	bl	8005f48 <HAL_SPI_Transmit>
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001bf0 	.word	0x20001bf0

08007ff8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008000:	f7fb f93a 	bl	8003278 <HAL_GetTick>
 8008004:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800800a:	20ff      	movs	r0, #255	; 0xff
 800800c:	f7ff ffae 	bl	8007f6c <xchg_spi>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	2bff      	cmp	r3, #255	; 0xff
 8008018:	d007      	beq.n	800802a <wait_ready+0x32>
 800801a:	f7fb f92d 	bl	8003278 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d8ef      	bhi.n	800800a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2bff      	cmp	r3, #255	; 0xff
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008044:	2201      	movs	r2, #1
 8008046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800804a:	4804      	ldr	r0, [pc, #16]	; (800805c <despiselect+0x1c>)
 800804c:	f7fc fc58 	bl	8004900 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008050:	20ff      	movs	r0, #255	; 0xff
 8008052:	f7ff ff8b 	bl	8007f6c <xchg_spi>

}
 8008056:	bf00      	nop
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40020400 	.word	0x40020400

08008060 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008064:	2200      	movs	r2, #0
 8008066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800806a:	480a      	ldr	r0, [pc, #40]	; (8008094 <spiselect+0x34>)
 800806c:	f7fc fc48 	bl	8004900 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008070:	20ff      	movs	r0, #255	; 0xff
 8008072:	f7ff ff7b 	bl	8007f6c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800807a:	f7ff ffbd 	bl	8007ff8 <wait_ready>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <spiselect+0x28>
 8008084:	2301      	movs	r3, #1
 8008086:	e002      	b.n	800808e <spiselect+0x2e>

	despiselect();
 8008088:	f7ff ffda 	bl	8008040 <despiselect>
	return 0;	/* Timeout */
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40020400 	.word	0x40020400

08008098 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80080a2:	20c8      	movs	r0, #200	; 0xc8
 80080a4:	f7ff ff38 	bl	8007f18 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80080a8:	20ff      	movs	r0, #255	; 0xff
 80080aa:	f7ff ff5f 	bl	8007f6c <xchg_spi>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	2bff      	cmp	r3, #255	; 0xff
 80080b6:	d104      	bne.n	80080c2 <rcvr_datablock+0x2a>
 80080b8:	f7ff ff42 	bl	8007f40 <SPI_Timer_Status>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f2      	bne.n	80080a8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2bfe      	cmp	r3, #254	; 0xfe
 80080c6:	d001      	beq.n	80080cc <rcvr_datablock+0x34>
 80080c8:	2300      	movs	r3, #0
 80080ca:	e00a      	b.n	80080e2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff ff62 	bl	8007f98 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80080d4:	20ff      	movs	r0, #255	; 0xff
 80080d6:	f7ff ff49 	bl	8007f6c <xchg_spi>
 80080da:	20ff      	movs	r0, #255	; 0xff
 80080dc:	f7ff ff46 	bl	8007f6c <xchg_spi>

	return 1;						/* Function succeeded */
 80080e0:	2301      	movs	r3, #1
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80080f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080fa:	f7ff ff7d 	bl	8007ff8 <wait_ready>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <xmit_datablock+0x1e>
 8008104:	2300      	movs	r3, #0
 8008106:	e01e      	b.n	8008146 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff ff2e 	bl	8007f6c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	2bfd      	cmp	r3, #253	; 0xfd
 8008114:	d016      	beq.n	8008144 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008116:	f44f 7100 	mov.w	r1, #512	; 0x200
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ff58 	bl	8007fd0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008120:	20ff      	movs	r0, #255	; 0xff
 8008122:	f7ff ff23 	bl	8007f6c <xchg_spi>
 8008126:	20ff      	movs	r0, #255	; 0xff
 8008128:	f7ff ff20 	bl	8007f6c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800812c:	20ff      	movs	r0, #255	; 0xff
 800812e:	f7ff ff1d 	bl	8007f6c <xchg_spi>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	f003 031f 	and.w	r3, r3, #31
 800813c:	2b05      	cmp	r3, #5
 800813e:	d001      	beq.n	8008144 <xmit_datablock+0x5a>
 8008140:	2300      	movs	r3, #0
 8008142:	e000      	b.n	8008146 <xmit_datablock+0x5c>
	}
	return 1;
 8008144:	2301      	movs	r3, #1
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	4603      	mov	r3, r0
 8008156:	6039      	str	r1, [r7, #0]
 8008158:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800815a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da0e      	bge.n	8008180 <send_cmd+0x32>
		cmd &= 0x7F;
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008168:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800816a:	2100      	movs	r1, #0
 800816c:	2037      	movs	r0, #55	; 0x37
 800816e:	f7ff ffee 	bl	800814e <send_cmd>
 8008172:	4603      	mov	r3, r0
 8008174:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d901      	bls.n	8008180 <send_cmd+0x32>
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	e051      	b.n	8008224 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	2b0c      	cmp	r3, #12
 8008184:	d008      	beq.n	8008198 <send_cmd+0x4a>
		despiselect();
 8008186:	f7ff ff5b 	bl	8008040 <despiselect>
		if (!spiselect()) return 0xFF;
 800818a:	f7ff ff69 	bl	8008060 <spiselect>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <send_cmd+0x4a>
 8008194:	23ff      	movs	r3, #255	; 0xff
 8008196:	e045      	b.n	8008224 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fee3 	bl	8007f6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff fedd 	bl	8007f6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	0c1b      	lsrs	r3, r3, #16
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fed7 	bl	8007f6c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff fed1 	bl	8007f6c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fecc 	bl	8007f6c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <send_cmd+0x94>
 80081de:	2395      	movs	r3, #149	; 0x95
 80081e0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d101      	bne.n	80081ec <send_cmd+0x9e>
 80081e8:	2387      	movs	r3, #135	; 0x87
 80081ea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff febc 	bl	8007f6c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	2b0c      	cmp	r3, #12
 80081f8:	d102      	bne.n	8008200 <send_cmd+0xb2>
 80081fa:	20ff      	movs	r0, #255	; 0xff
 80081fc:	f7ff feb6 	bl	8007f6c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008200:	230a      	movs	r3, #10
 8008202:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008204:	20ff      	movs	r0, #255	; 0xff
 8008206:	f7ff feb1 	bl	8007f6c <xchg_spi>
 800820a:	4603      	mov	r3, r0
 800820c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800820e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008212:	2b00      	cmp	r3, #0
 8008214:	da05      	bge.n	8008222 <send_cmd+0xd4>
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	3b01      	subs	r3, #1
 800821a:	73fb      	strb	r3, [r7, #15]
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008222:	7bbb      	ldrb	r3, [r7, #14]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800822c:	b590      	push	{r4, r7, lr}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USER_SPI_initialize+0x14>
 800823c:	2301      	movs	r3, #1
 800823e:	e0d6      	b.n	80083ee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008240:	4b6d      	ldr	r3, [pc, #436]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <USER_SPI_initialize+0x2a>
 800824e:	4b6a      	ldr	r3, [pc, #424]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e0cb      	b.n	80083ee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008256:	4b69      	ldr	r3, [pc, #420]	; (80083fc <USER_SPI_initialize+0x1d0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008260:	4b66      	ldr	r3, [pc, #408]	; (80083fc <USER_SPI_initialize+0x1d0>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8008268:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800826a:	230a      	movs	r3, #10
 800826c:	73fb      	strb	r3, [r7, #15]
 800826e:	e005      	b.n	800827c <USER_SPI_initialize+0x50>
 8008270:	20ff      	movs	r0, #255	; 0xff
 8008272:	f7ff fe7b 	bl	8007f6c <xchg_spi>
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	3b01      	subs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f6      	bne.n	8008270 <USER_SPI_initialize+0x44>

	ty = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008286:	2100      	movs	r1, #0
 8008288:	2000      	movs	r0, #0
 800828a:	f7ff ff60 	bl	800814e <send_cmd>
 800828e:	4603      	mov	r3, r0
 8008290:	2b01      	cmp	r3, #1
 8008292:	f040 808b 	bne.w	80083ac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008296:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800829a:	f7ff fe3d 	bl	8007f18 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800829e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082a2:	2008      	movs	r0, #8
 80082a4:	f7ff ff53 	bl	800814e <send_cmd>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d151      	bne.n	8008352 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
 80082b2:	e00d      	b.n	80082d0 <USER_SPI_initialize+0xa4>
 80082b4:	7bfc      	ldrb	r4, [r7, #15]
 80082b6:	20ff      	movs	r0, #255	; 0xff
 80082b8:	f7ff fe58 	bl	8007f6c <xchg_spi>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	f104 0310 	add.w	r3, r4, #16
 80082c4:	443b      	add	r3, r7
 80082c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	3301      	adds	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d9ee      	bls.n	80082b4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80082d6:	7abb      	ldrb	r3, [r7, #10]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d167      	bne.n	80083ac <USER_SPI_initialize+0x180>
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	2baa      	cmp	r3, #170	; 0xaa
 80082e0:	d164      	bne.n	80083ac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80082e2:	bf00      	nop
 80082e4:	f7ff fe2c 	bl	8007f40 <SPI_Timer_Status>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <USER_SPI_initialize+0xd2>
 80082ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082f2:	20a9      	movs	r0, #169	; 0xa9
 80082f4:	f7ff ff2b 	bl	800814e <send_cmd>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f2      	bne.n	80082e4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80082fe:	f7ff fe1f 	bl	8007f40 <SPI_Timer_Status>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d051      	beq.n	80083ac <USER_SPI_initialize+0x180>
 8008308:	2100      	movs	r1, #0
 800830a:	203a      	movs	r0, #58	; 0x3a
 800830c:	f7ff ff1f 	bl	800814e <send_cmd>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d14a      	bne.n	80083ac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	e00d      	b.n	8008338 <USER_SPI_initialize+0x10c>
 800831c:	7bfc      	ldrb	r4, [r7, #15]
 800831e:	20ff      	movs	r0, #255	; 0xff
 8008320:	f7ff fe24 	bl	8007f6c <xchg_spi>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	f104 0310 	add.w	r3, r4, #16
 800832c:	443b      	add	r3, r7
 800832e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	3301      	adds	r3, #1
 8008336:	73fb      	strb	r3, [r7, #15]
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d9ee      	bls.n	800831c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800833e:	7a3b      	ldrb	r3, [r7, #8]
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <USER_SPI_initialize+0x120>
 8008348:	230c      	movs	r3, #12
 800834a:	e000      	b.n	800834e <USER_SPI_initialize+0x122>
 800834c:	2304      	movs	r3, #4
 800834e:	737b      	strb	r3, [r7, #13]
 8008350:	e02c      	b.n	80083ac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008352:	2100      	movs	r1, #0
 8008354:	20a9      	movs	r0, #169	; 0xa9
 8008356:	f7ff fefa 	bl	800814e <send_cmd>
 800835a:	4603      	mov	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d804      	bhi.n	800836a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008360:	2302      	movs	r3, #2
 8008362:	737b      	strb	r3, [r7, #13]
 8008364:	23a9      	movs	r3, #169	; 0xa9
 8008366:	73bb      	strb	r3, [r7, #14]
 8008368:	e003      	b.n	8008372 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800836a:	2301      	movs	r3, #1
 800836c:	737b      	strb	r3, [r7, #13]
 800836e:	2301      	movs	r3, #1
 8008370:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008372:	bf00      	nop
 8008374:	f7ff fde4 	bl	8007f40 <SPI_Timer_Status>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <USER_SPI_initialize+0x162>
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2100      	movs	r1, #0
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fee3 	bl	800814e <send_cmd>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f2      	bne.n	8008374 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800838e:	f7ff fdd7 	bl	8007f40 <SPI_Timer_Status>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <USER_SPI_initialize+0x17c>
 8008398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800839c:	2010      	movs	r0, #16
 800839e:	f7ff fed6 	bl	800814e <send_cmd>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <USER_SPI_initialize+0x180>
				ty = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <USER_SPI_initialize+0x1d4>)
 80083ae:	7b7b      	ldrb	r3, [r7, #13]
 80083b0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80083b2:	f7ff fe45 	bl	8008040 <despiselect>

	if (ty) {			/* OK */
 80083b6:	7b7b      	ldrb	r3, [r7, #13]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d012      	beq.n	80083e2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <USER_SPI_initialize+0x1d0>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80083c6:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <USER_SPI_initialize+0x1d0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0210 	orr.w	r2, r2, #16
 80083ce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f023 0301 	bic.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e002      	b.n	80083e8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80083e8:	4b03      	ldr	r3, [pc, #12]	; (80083f8 <USER_SPI_initialize+0x1cc>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b2db      	uxtb	r3, r3
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000024 	.word	0x20000024
 80083fc:	20001bf0 	.word	0x20001bf0
 8008400:	20001eac 	.word	0x20001eac

08008404 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USER_SPI_status+0x14>
 8008414:	2301      	movs	r3, #1
 8008416:	e002      	b.n	800841e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008418:	4b04      	ldr	r3, [pc, #16]	; (800842c <USER_SPI_status+0x28>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	b2db      	uxtb	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000024 	.word	0x20000024

08008430 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	607a      	str	r2, [r7, #4]
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <USER_SPI_read+0x1c>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <USER_SPI_read+0x20>
 800844c:	2304      	movs	r3, #4
 800844e:	e04d      	b.n	80084ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008450:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <USER_SPI_read+0xc4>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <USER_SPI_read+0x32>
 800845e:	2303      	movs	r3, #3
 8008460:	e044      	b.n	80084ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008462:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <USER_SPI_read+0xc8>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d102      	bne.n	8008474 <USER_SPI_read+0x44>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	025b      	lsls	r3, r3, #9
 8008472:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d111      	bne.n	800849e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	2011      	movs	r0, #17
 800847e:	f7ff fe66 	bl	800814e <send_cmd>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d129      	bne.n	80084dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800848c:	68b8      	ldr	r0, [r7, #8]
 800848e:	f7ff fe03 	bl	8008098 <rcvr_datablock>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d021      	beq.n	80084dc <USER_SPI_read+0xac>
			count = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	e01e      	b.n	80084dc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	2012      	movs	r0, #18
 80084a2:	f7ff fe54 	bl	800814e <send_cmd>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d117      	bne.n	80084dc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80084ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	f7ff fdf1 	bl	8008098 <rcvr_datablock>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <USER_SPI_read+0xa2>
				buff += 512;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	603b      	str	r3, [r7, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1ed      	bne.n	80084ac <USER_SPI_read+0x7c>
 80084d0:	e000      	b.n	80084d4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80084d2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80084d4:	2100      	movs	r1, #0
 80084d6:	200c      	movs	r0, #12
 80084d8:	f7ff fe39 	bl	800814e <send_cmd>
		}
	}
	despiselect();
 80084dc:	f7ff fdb0 	bl	8008040 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bf14      	ite	ne
 80084e6:	2301      	movne	r3, #1
 80084e8:	2300      	moveq	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000024 	.word	0x20000024
 80084f8:	20001eac 	.word	0x20001eac

080084fc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <USER_SPI_write+0x1c>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USER_SPI_write+0x20>
 8008518:	2304      	movs	r3, #4
 800851a:	e063      	b.n	80085e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800851c:	4b33      	ldr	r3, [pc, #204]	; (80085ec <USER_SPI_write+0xf0>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <USER_SPI_write+0x32>
 800852a:	2303      	movs	r3, #3
 800852c:	e05a      	b.n	80085e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <USER_SPI_write+0xf0>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USER_SPI_write+0x44>
 800853c:	2302      	movs	r3, #2
 800853e:	e051      	b.n	80085e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008540:	4b2b      	ldr	r3, [pc, #172]	; (80085f0 <USER_SPI_write+0xf4>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <USER_SPI_write+0x56>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	025b      	lsls	r3, r3, #9
 8008550:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d110      	bne.n	800857a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	2018      	movs	r0, #24
 800855c:	f7ff fdf7 	bl	800814e <send_cmd>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d136      	bne.n	80085d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008566:	21fe      	movs	r1, #254	; 0xfe
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f7ff fdbe 	bl	80080ea <xmit_datablock>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d02f      	beq.n	80085d4 <USER_SPI_write+0xd8>
			count = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	e02c      	b.n	80085d4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800857a:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <USER_SPI_write+0xf4>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0306 	and.w	r3, r3, #6
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <USER_SPI_write+0x92>
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	2097      	movs	r0, #151	; 0x97
 800858a:	f7ff fde0 	bl	800814e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	2019      	movs	r0, #25
 8008592:	f7ff fddc 	bl	800814e <send_cmd>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d11b      	bne.n	80085d4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800859c:	21fc      	movs	r1, #252	; 0xfc
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f7ff fda3 	bl	80080ea <xmit_datablock>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <USER_SPI_write+0xc4>
				buff += 512;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1ee      	bne.n	800859c <USER_SPI_write+0xa0>
 80085be:	e000      	b.n	80085c2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80085c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80085c2:	21fd      	movs	r1, #253	; 0xfd
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7ff fd90 	bl	80080ea <xmit_datablock>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <USER_SPI_write+0xd8>
 80085d0:	2301      	movs	r3, #1
 80085d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80085d4:	f7ff fd34 	bl	8008040 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf14      	ite	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	2300      	moveq	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000024 	.word	0x20000024
 80085f0:	20001eac 	.word	0x20001eac

080085f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08c      	sub	sp, #48	; 0x30
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	603a      	str	r2, [r7, #0]
 80085fe:	71fb      	strb	r3, [r7, #7]
 8008600:	460b      	mov	r3, r1
 8008602:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <USER_SPI_ioctl+0x1a>
 800860a:	2304      	movs	r3, #4
 800860c:	e15a      	b.n	80088c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800860e:	4baf      	ldr	r3, [pc, #700]	; (80088cc <USER_SPI_ioctl+0x2d8>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <USER_SPI_ioctl+0x2c>
 800861c:	2303      	movs	r3, #3
 800861e:	e151      	b.n	80088c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8008626:	79bb      	ldrb	r3, [r7, #6]
 8008628:	2b04      	cmp	r3, #4
 800862a:	f200 8136 	bhi.w	800889a <USER_SPI_ioctl+0x2a6>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <USER_SPI_ioctl+0x40>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008649 	.word	0x08008649
 8008638:	0800865d 	.word	0x0800865d
 800863c:	0800889b 	.word	0x0800889b
 8008640:	08008709 	.word	0x08008709
 8008644:	080087ff 	.word	0x080087ff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008648:	f7ff fd0a 	bl	8008060 <spiselect>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8127 	beq.w	80088a2 <USER_SPI_ioctl+0x2ae>
 8008654:	2300      	movs	r3, #0
 8008656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800865a:	e122      	b.n	80088a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800865c:	2100      	movs	r1, #0
 800865e:	2009      	movs	r0, #9
 8008660:	f7ff fd75 	bl	800814e <send_cmd>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 811d 	bne.w	80088a6 <USER_SPI_ioctl+0x2b2>
 800866c:	f107 030c 	add.w	r3, r7, #12
 8008670:	2110      	movs	r1, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fd10 	bl	8008098 <rcvr_datablock>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8113 	beq.w	80088a6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008680:	7b3b      	ldrb	r3, [r7, #12]
 8008682:	099b      	lsrs	r3, r3, #6
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b01      	cmp	r3, #1
 8008688:	d111      	bne.n	80086ae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800868a:	7d7b      	ldrb	r3, [r7, #21]
 800868c:	461a      	mov	r2, r3
 800868e:	7d3b      	ldrb	r3, [r7, #20]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	4413      	add	r3, r2
 8008694:	461a      	mov	r2, r3
 8008696:	7cfb      	ldrb	r3, [r7, #19]
 8008698:	041b      	lsls	r3, r3, #16
 800869a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800869e:	4413      	add	r3, r2
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	029a      	lsls	r2, r3, #10
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	e028      	b.n	8008700 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80086ae:	7c7b      	ldrb	r3, [r7, #17]
 80086b0:	f003 030f 	and.w	r3, r3, #15
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	7dbb      	ldrb	r3, [r7, #22]
 80086b8:	09db      	lsrs	r3, r3, #7
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	4413      	add	r3, r2
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	7d7b      	ldrb	r3, [r7, #21]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 0306 	and.w	r3, r3, #6
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	3302      	adds	r3, #2
 80086d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80086d6:	7d3b      	ldrb	r3, [r7, #20]
 80086d8:	099b      	lsrs	r3, r3, #6
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	7cfb      	ldrb	r3, [r7, #19]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	441a      	add	r2, r3
 80086e4:	7cbb      	ldrb	r3, [r7, #18]
 80086e6:	029b      	lsls	r3, r3, #10
 80086e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086ec:	4413      	add	r3, r2
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80086f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086f6:	3b09      	subs	r3, #9
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	409a      	lsls	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008706:	e0ce      	b.n	80088a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008708:	4b71      	ldr	r3, [pc, #452]	; (80088d0 <USER_SPI_ioctl+0x2dc>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d031      	beq.n	8008778 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008714:	2100      	movs	r1, #0
 8008716:	208d      	movs	r0, #141	; 0x8d
 8008718:	f7ff fd19 	bl	800814e <send_cmd>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 80c3 	bne.w	80088aa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008724:	20ff      	movs	r0, #255	; 0xff
 8008726:	f7ff fc21 	bl	8007f6c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	2110      	movs	r1, #16
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fcb1 	bl	8008098 <rcvr_datablock>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 80b6 	beq.w	80088aa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800873e:	2330      	movs	r3, #48	; 0x30
 8008740:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008744:	e007      	b.n	8008756 <USER_SPI_ioctl+0x162>
 8008746:	20ff      	movs	r0, #255	; 0xff
 8008748:	f7ff fc10 	bl	8007f6c <xchg_spi>
 800874c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008750:	3b01      	subs	r3, #1
 8008752:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008756:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f3      	bne.n	8008746 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	b2db      	uxtb	r3, r3
 8008764:	461a      	mov	r2, r3
 8008766:	2310      	movs	r3, #16
 8008768:	fa03 f202 	lsl.w	r2, r3, r2
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008776:	e098      	b.n	80088aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008778:	2100      	movs	r1, #0
 800877a:	2009      	movs	r0, #9
 800877c:	f7ff fce7 	bl	800814e <send_cmd>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	f040 8091 	bne.w	80088aa <USER_SPI_ioctl+0x2b6>
 8008788:	f107 030c 	add.w	r3, r7, #12
 800878c:	2110      	movs	r1, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fc82 	bl	8008098 <rcvr_datablock>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8087 	beq.w	80088aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800879c:	4b4c      	ldr	r3, [pc, #304]	; (80088d0 <USER_SPI_ioctl+0x2dc>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d012      	beq.n	80087ce <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80087a8:	7dbb      	ldrb	r3, [r7, #22]
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80087b0:	7dfa      	ldrb	r2, [r7, #23]
 80087b2:	09d2      	lsrs	r2, r2, #7
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	4413      	add	r3, r2
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	7e7b      	ldrb	r3, [r7, #25]
 80087bc:	099b      	lsrs	r3, r3, #6
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e013      	b.n	80087f6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	109b      	asrs	r3, r3, #2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	3301      	adds	r3, #1
 80087da:	7dfa      	ldrb	r2, [r7, #23]
 80087dc:	00d2      	lsls	r2, r2, #3
 80087de:	f002 0218 	and.w	r2, r2, #24
 80087e2:	7df9      	ldrb	r1, [r7, #23]
 80087e4:	0949      	lsrs	r1, r1, #5
 80087e6:	b2c9      	uxtb	r1, r1
 80087e8:	440a      	add	r2, r1
 80087ea:	3201      	adds	r2, #1
 80087ec:	fb02 f303 	mul.w	r3, r2, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80087fc:	e055      	b.n	80088aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80087fe:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <USER_SPI_ioctl+0x2dc>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f003 0306 	and.w	r3, r3, #6
 8008806:	2b00      	cmp	r3, #0
 8008808:	d051      	beq.n	80088ae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800880a:	f107 020c 	add.w	r2, r7, #12
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	210b      	movs	r1, #11
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff feee 	bl	80085f4 <USER_SPI_ioctl>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d149      	bne.n	80088b2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800881e:	7b3b      	ldrb	r3, [r7, #12]
 8008820:	099b      	lsrs	r3, r3, #6
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <USER_SPI_ioctl+0x23e>
 8008828:	7dbb      	ldrb	r3, [r7, #22]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d041      	beq.n	80088b6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	623b      	str	r3, [r7, #32]
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008842:	4b23      	ldr	r3, [pc, #140]	; (80088d0 <USER_SPI_ioctl+0x2dc>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	025b      	lsls	r3, r3, #9
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	025b      	lsls	r3, r3, #9
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800885a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800885c:	2020      	movs	r0, #32
 800885e:	f7ff fc76 	bl	800814e <send_cmd>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d128      	bne.n	80088ba <USER_SPI_ioctl+0x2c6>
 8008868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800886a:	2021      	movs	r0, #33	; 0x21
 800886c:	f7ff fc6f 	bl	800814e <send_cmd>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d121      	bne.n	80088ba <USER_SPI_ioctl+0x2c6>
 8008876:	2100      	movs	r1, #0
 8008878:	2026      	movs	r0, #38	; 0x26
 800887a:	f7ff fc68 	bl	800814e <send_cmd>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d11a      	bne.n	80088ba <USER_SPI_ioctl+0x2c6>
 8008884:	f247 5030 	movw	r0, #30000	; 0x7530
 8008888:	f7ff fbb6 	bl	8007ff8 <wait_ready>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d013      	beq.n	80088ba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008892:	2300      	movs	r3, #0
 8008894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008898:	e00f      	b.n	80088ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800889a:	2304      	movs	r3, #4
 800889c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088a0:	e00c      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		break;
 80088a2:	bf00      	nop
 80088a4:	e00a      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		break;
 80088a6:	bf00      	nop
 80088a8:	e008      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		break;
 80088aa:	bf00      	nop
 80088ac:	e006      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80088ae:	bf00      	nop
 80088b0:	e004      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80088b2:	bf00      	nop
 80088b4:	e002      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80088b6:	bf00      	nop
 80088b8:	e000      	b.n	80088bc <USER_SPI_ioctl+0x2c8>
		break;
 80088ba:	bf00      	nop
	}

	despiselect();
 80088bc:	f7ff fbc0 	bl	8008040 <despiselect>

	return res;
 80088c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3730      	adds	r7, #48	; 0x30
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20000024 	.word	0x20000024
 80088d0:	20001eac 	.word	0x20001eac

080088d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4a08      	ldr	r2, [pc, #32]	; (8008904 <disk_status+0x30>)
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	79fa      	ldrb	r2, [r7, #7]
 80088ec:	4905      	ldr	r1, [pc, #20]	; (8008904 <disk_status+0x30>)
 80088ee:	440a      	add	r2, r1
 80088f0:	7a12      	ldrb	r2, [r2, #8]
 80088f2:	4610      	mov	r0, r2
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20001ee0 	.word	0x20001ee0

08008908 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	4a0d      	ldr	r2, [pc, #52]	; (8008950 <disk_initialize+0x48>)
 800891a:	5cd3      	ldrb	r3, [r2, r3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d111      	bne.n	8008944 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	4a0b      	ldr	r2, [pc, #44]	; (8008950 <disk_initialize+0x48>)
 8008924:	2101      	movs	r1, #1
 8008926:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008928:	79fb      	ldrb	r3, [r7, #7]
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <disk_initialize+0x48>)
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	79fa      	ldrb	r2, [r7, #7]
 8008936:	4906      	ldr	r1, [pc, #24]	; (8008950 <disk_initialize+0x48>)
 8008938:	440a      	add	r2, r1
 800893a:	7a12      	ldrb	r2, [r2, #8]
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20001ee0 	.word	0x20001ee0

08008954 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	603b      	str	r3, [r7, #0]
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <disk_read+0x3c>)
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	689c      	ldr	r4, [r3, #8]
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4a07      	ldr	r2, [pc, #28]	; (8008990 <disk_read+0x3c>)
 8008974:	4413      	add	r3, r2
 8008976:	7a18      	ldrb	r0, [r3, #8]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	47a0      	blx	r4
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]
  return res;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	bd90      	pop	{r4, r7, pc}
 800898e:	bf00      	nop
 8008990:	20001ee0 	.word	0x20001ee0

08008994 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	603b      	str	r3, [r7, #0]
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <disk_write+0x3c>)
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	68dc      	ldr	r4, [r3, #12]
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	4a07      	ldr	r2, [pc, #28]	; (80089d0 <disk_write+0x3c>)
 80089b4:	4413      	add	r3, r2
 80089b6:	7a18      	ldrb	r0, [r3, #8]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	47a0      	blx	r4
 80089c0:	4603      	mov	r3, r0
 80089c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd90      	pop	{r4, r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20001ee0 	.word	0x20001ee0

080089d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	603a      	str	r2, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
 80089e0:	460b      	mov	r3, r1
 80089e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <disk_ioctl+0x38>)
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	79fa      	ldrb	r2, [r7, #7]
 80089f2:	4906      	ldr	r1, [pc, #24]	; (8008a0c <disk_ioctl+0x38>)
 80089f4:	440a      	add	r2, r1
 80089f6:	7a10      	ldrb	r0, [r2, #8]
 80089f8:	79b9      	ldrb	r1, [r7, #6]
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4798      	blx	r3
 80089fe:	4603      	mov	r3, r0
 8008a00:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20001ee0 	.word	0x20001ee0

08008a10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a20:	89fb      	ldrh	r3, [r7, #14]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	b21a      	sxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b21b      	sxth	r3, r3
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	b21b      	sxth	r3, r3
 8008a30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a32:	89fb      	ldrh	r3, [r7, #14]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3303      	adds	r3, #3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	3202      	adds	r2, #2
 8008a58:	7812      	ldrb	r2, [r2, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	3201      	adds	r2, #1
 8008a66:	7812      	ldrb	r2, [r2, #0]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
	return rv;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	887a      	ldrh	r2, [r7, #2]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	607a      	str	r2, [r7, #4]
 8008aaa:	887a      	ldrh	r2, [r7, #2]
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	607a      	str	r2, [r7, #4]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	1c53      	adds	r3, r2, #1
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1c59      	adds	r1, r3, #1
 8008b38:	6179      	str	r1, [r7, #20]
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1f1      	bne.n	8008b2e <mem_cpy+0x1a>
	}
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b56:	b480      	push	{r7}
 8008b58:	b087      	sub	sp, #28
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	617a      	str	r2, [r7, #20]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	607b      	str	r3, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f3      	bne.n	8008b66 <mem_set+0x10>
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b8c:	b480      	push	{r7}
 8008b8e:	b089      	sub	sp, #36	; 0x24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	61fa      	str	r2, [r7, #28]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	61ba      	str	r2, [r7, #24]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	1acb      	subs	r3, r1, r3
 8008bb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <mem_cmp+0x40>
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0eb      	beq.n	8008ba4 <mem_cmp+0x18>

	return r;
 8008bcc:	697b      	ldr	r3, [r7, #20]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3724      	adds	r7, #36	; 0x24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008bda:	b480      	push	{r7}
 8008bdc:	b083      	sub	sp, #12
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008be4:	e002      	b.n	8008bec <chk_chr+0x12>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3301      	adds	r3, #1
 8008bea:	607b      	str	r3, [r7, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <chk_chr+0x26>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d1f2      	bne.n	8008be6 <chk_chr+0xc>
	return *str;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	781b      	ldrb	r3, [r3, #0]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d009      	beq.n	8008c32 <lock_fs+0x22>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f002 f87f 	bl	800ad26 <ff_req_grant>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <lock_fs+0x22>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <lock_fs+0x24>
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00d      	beq.n	8008c6a <unlock_fs+0x2e>
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2b0c      	cmp	r3, #12
 8008c52:	d00a      	beq.n	8008c6a <unlock_fs+0x2e>
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b0b      	cmp	r3, #11
 8008c58:	d007      	beq.n	8008c6a <unlock_fs+0x2e>
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	2b0f      	cmp	r3, #15
 8008c5e:	d004      	beq.n	8008c6a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 f873 	bl	800ad50 <ff_rel_grant>
	}
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	e029      	b.n	8008cdc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c88:	4a27      	ldr	r2, [pc, #156]	; (8008d28 <chk_lock+0xb4>)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	4413      	add	r3, r2
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01d      	beq.n	8008cd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c96:	4a24      	ldr	r2, [pc, #144]	; (8008d28 <chk_lock+0xb4>)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d116      	bne.n	8008cd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008ca8:	4a1f      	ldr	r2, [pc, #124]	; (8008d28 <chk_lock+0xb4>)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	4413      	add	r3, r2
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d10c      	bne.n	8008cd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008cbc:	4a1a      	ldr	r2, [pc, #104]	; (8008d28 <chk_lock+0xb4>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d102      	bne.n	8008cd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008cd0:	e007      	b.n	8008ce2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d9d2      	bls.n	8008c88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d109      	bne.n	8008cfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <chk_lock+0x80>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d101      	bne.n	8008cf8 <chk_lock+0x84>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e010      	b.n	8008d1a <chk_lock+0xa6>
 8008cf8:	2312      	movs	r3, #18
 8008cfa:	e00e      	b.n	8008d1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d108      	bne.n	8008d14 <chk_lock+0xa0>
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <chk_lock+0xb4>)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4413      	add	r3, r2
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d12:	d101      	bne.n	8008d18 <chk_lock+0xa4>
 8008d14:	2310      	movs	r3, #16
 8008d16:	e000      	b.n	8008d1a <chk_lock+0xa6>
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	20001ec0 	.word	0x20001ec0

08008d2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
 8008d36:	e002      	b.n	8008d3e <enq_lock+0x12>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	607b      	str	r3, [r7, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d806      	bhi.n	8008d52 <enq_lock+0x26>
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <enq_lock+0x40>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	4413      	add	r3, r2
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f2      	bne.n	8008d38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	bf14      	ite	ne
 8008d58:	2301      	movne	r3, #1
 8008d5a:	2300      	moveq	r3, #0
 8008d5c:	b2db      	uxtb	r3, r3
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20001ec0 	.word	0x20001ec0

08008d70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e01f      	b.n	8008dc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d80:	4a41      	ldr	r2, [pc, #260]	; (8008e88 <inc_lock+0x118>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d113      	bne.n	8008dba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d92:	4a3d      	ldr	r2, [pc, #244]	; (8008e88 <inc_lock+0x118>)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	4413      	add	r3, r2
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d109      	bne.n	8008dba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008da6:	4a38      	ldr	r2, [pc, #224]	; (8008e88 <inc_lock+0x118>)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	4413      	add	r3, r2
 8008dae:	3308      	adds	r3, #8
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d006      	beq.n	8008dc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d9dc      	bls.n	8008d80 <inc_lock+0x10>
 8008dc6:	e000      	b.n	8008dca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008dc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d132      	bne.n	8008e36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e002      	b.n	8008ddc <inc_lock+0x6c>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d806      	bhi.n	8008df0 <inc_lock+0x80>
 8008de2:	4a29      	ldr	r2, [pc, #164]	; (8008e88 <inc_lock+0x118>)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	4413      	add	r3, r2
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1f2      	bne.n	8008dd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d101      	bne.n	8008dfa <inc_lock+0x8a>
 8008df6:	2300      	movs	r3, #0
 8008df8:	e040      	b.n	8008e7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4922      	ldr	r1, [pc, #136]	; (8008e88 <inc_lock+0x118>)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	440b      	add	r3, r1
 8008e06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	491e      	ldr	r1, [pc, #120]	; (8008e88 <inc_lock+0x118>)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	440b      	add	r3, r1
 8008e14:	3304      	adds	r3, #4
 8008e16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	491a      	ldr	r1, [pc, #104]	; (8008e88 <inc_lock+0x118>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	440b      	add	r3, r1
 8008e24:	3308      	adds	r3, #8
 8008e26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <inc_lock+0x118>)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	4413      	add	r3, r2
 8008e30:	330c      	adds	r3, #12
 8008e32:	2200      	movs	r2, #0
 8008e34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d009      	beq.n	8008e50 <inc_lock+0xe0>
 8008e3c:	4a12      	ldr	r2, [pc, #72]	; (8008e88 <inc_lock+0x118>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	4413      	add	r3, r2
 8008e44:	330c      	adds	r3, #12
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <inc_lock+0xe0>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	e015      	b.n	8008e7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d108      	bne.n	8008e68 <inc_lock+0xf8>
 8008e56:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <inc_lock+0x118>)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	4413      	add	r3, r2
 8008e5e:	330c      	adds	r3, #12
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	e001      	b.n	8008e6c <inc_lock+0xfc>
 8008e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e6c:	4906      	ldr	r1, [pc, #24]	; (8008e88 <inc_lock+0x118>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	440b      	add	r3, r1
 8008e74:	330c      	adds	r3, #12
 8008e76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20001ec0 	.word	0x20001ec0

08008e8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e010      	b.n	8008ebc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e9a:	4a0d      	ldr	r2, [pc, #52]	; (8008ed0 <clear_lock+0x44>)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	4413      	add	r3, r2
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d105      	bne.n	8008eb6 <clear_lock+0x2a>
 8008eaa:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <clear_lock+0x44>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d9eb      	bls.n	8008e9a <clear_lock+0xe>
	}
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20001ec0 	.word	0x20001ec0

08008ed4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	78db      	ldrb	r3, [r3, #3]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d034      	beq.n	8008f52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7858      	ldrb	r0, [r3, #1]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ef8:	2301      	movs	r3, #1
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	f7ff fd4a 	bl	8008994 <disk_write>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	e022      	b.n	8008f52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d217      	bcs.n	8008f52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	789b      	ldrb	r3, [r3, #2]
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	e010      	b.n	8008f4c <sync_window+0x78>
					wsect += fs->fsize;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4413      	add	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7858      	ldrb	r0, [r3, #1]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f3e:	2301      	movs	r3, #1
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	f7ff fd27 	bl	8008994 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d8eb      	bhi.n	8008f2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d01b      	beq.n	8008fac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ffad 	bl	8008ed4 <sync_window>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d113      	bne.n	8008fac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7858      	ldrb	r0, [r3, #1]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f8e:	2301      	movs	r3, #1
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	f7ff fcdf 	bl	8008954 <disk_read>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff87 	bl	8008ed4 <sync_window>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d158      	bne.n	8009082 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d148      	bne.n	800906a <sync_fs+0xb2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d144      	bne.n	800906a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3334      	adds	r3, #52	; 0x34
 8008fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fdb3 	bl	8008b56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3334      	adds	r3, #52	; 0x34
 8008ff4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ff8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff fd42 	bl	8008a86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3334      	adds	r3, #52	; 0x34
 8009006:	4921      	ldr	r1, [pc, #132]	; (800908c <sync_fs+0xd4>)
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fd57 	bl	8008abc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3334      	adds	r3, #52	; 0x34
 8009012:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009016:	491e      	ldr	r1, [pc, #120]	; (8009090 <sync_fs+0xd8>)
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fd4f 	bl	8008abc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3334      	adds	r3, #52	; 0x34
 8009022:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	4619      	mov	r1, r3
 800902c:	4610      	mov	r0, r2
 800902e:	f7ff fd45 	bl	8008abc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3334      	adds	r3, #52	; 0x34
 8009036:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f7ff fd3b 	bl	8008abc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7858      	ldrb	r0, [r3, #1]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800905e:	2301      	movs	r3, #1
 8009060:	f7ff fc98 	bl	8008994 <disk_write>
			fs->fsi_flag = 0;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fcae 	bl	80089d4 <disk_ioctl>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <sync_fs+0xca>
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	41615252 	.word	0x41615252
 8009090:	61417272 	.word	0x61417272

08009094 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	3b02      	subs	r3, #2
 80090a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	3b02      	subs	r3, #2
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d301      	bcc.n	80090b4 <clust2sect+0x20>
 80090b0:	2300      	movs	r3, #0
 80090b2:	e008      	b.n	80090c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	895b      	ldrh	r3, [r3, #10]
 80090b8:	461a      	mov	r2, r3
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	fb03 f202 	mul.w	r2, r3, r2
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	4413      	add	r3, r2
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d904      	bls.n	80090f2 <get_fat+0x20>
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d302      	bcc.n	80090f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80090f2:	2301      	movs	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e08f      	b.n	8009218 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b03      	cmp	r3, #3
 8009104:	d062      	beq.n	80091cc <get_fat+0xfa>
 8009106:	2b03      	cmp	r3, #3
 8009108:	dc7c      	bgt.n	8009204 <get_fat+0x132>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d002      	beq.n	8009114 <get_fat+0x42>
 800910e:	2b02      	cmp	r3, #2
 8009110:	d042      	beq.n	8009198 <get_fat+0xc6>
 8009112:	e077      	b.n	8009204 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	0a5b      	lsrs	r3, r3, #9
 800912a:	4413      	add	r3, r2
 800912c:	4619      	mov	r1, r3
 800912e:	6938      	ldr	r0, [r7, #16]
 8009130:	f7ff ff14 	bl	8008f5c <move_window>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d167      	bne.n	800920a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	60fa      	str	r2, [r7, #12]
 8009140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4413      	add	r3, r2
 8009148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800914c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	0a5b      	lsrs	r3, r3, #9
 8009156:	4413      	add	r3, r2
 8009158:	4619      	mov	r1, r3
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f7ff fefe 	bl	8008f5c <move_window>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d153      	bne.n	800920e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	461a      	mov	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4313      	orrs	r3, r2
 800917c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <get_fat+0xbc>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	e002      	b.n	8009194 <get_fat+0xc2>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009194:	617b      	str	r3, [r7, #20]
			break;
 8009196:	e03f      	b.n	8009218 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	4413      	add	r3, r2
 80091a2:	4619      	mov	r1, r3
 80091a4:	6938      	ldr	r0, [r7, #16]
 80091a6:	f7ff fed9 	bl	8008f5c <move_window>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d130      	bne.n	8009212 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80091be:	4413      	add	r3, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fc25 	bl	8008a10 <ld_word>
 80091c6:	4603      	mov	r3, r0
 80091c8:	617b      	str	r3, [r7, #20]
			break;
 80091ca:	e025      	b.n	8009218 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	09db      	lsrs	r3, r3, #7
 80091d4:	4413      	add	r3, r2
 80091d6:	4619      	mov	r1, r3
 80091d8:	6938      	ldr	r0, [r7, #16]
 80091da:	f7ff febf 	bl	8008f5c <move_window>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d118      	bne.n	8009216 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80091f2:	4413      	add	r3, r2
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fc23 	bl	8008a40 <ld_dword>
 80091fa:	4603      	mov	r3, r0
 80091fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009200:	617b      	str	r3, [r7, #20]
			break;
 8009202:	e009      	b.n	8009218 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009204:	2301      	movs	r3, #1
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	e006      	b.n	8009218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800920a:	bf00      	nop
 800920c:	e004      	b.n	8009218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800920e:	bf00      	nop
 8009210:	e002      	b.n	8009218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009212:	bf00      	nop
 8009214:	e000      	b.n	8009218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009216:	bf00      	nop
		}
	}

	return val;
 8009218:	697b      	ldr	r3, [r7, #20]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009222:	b590      	push	{r4, r7, lr}
 8009224:	b089      	sub	sp, #36	; 0x24
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800922e:	2302      	movs	r3, #2
 8009230:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b01      	cmp	r3, #1
 8009236:	f240 80d9 	bls.w	80093ec <put_fat+0x1ca>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	429a      	cmp	r2, r3
 8009242:	f080 80d3 	bcs.w	80093ec <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b03      	cmp	r3, #3
 800924c:	f000 8096 	beq.w	800937c <put_fat+0x15a>
 8009250:	2b03      	cmp	r3, #3
 8009252:	f300 80cb 	bgt.w	80093ec <put_fat+0x1ca>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d002      	beq.n	8009260 <put_fat+0x3e>
 800925a:	2b02      	cmp	r3, #2
 800925c:	d06e      	beq.n	800933c <put_fat+0x11a>
 800925e:	e0c5      	b.n	80093ec <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	61bb      	str	r3, [r7, #24]
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	085b      	lsrs	r3, r3, #1
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	4413      	add	r3, r2
 800926c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	0a5b      	lsrs	r3, r3, #9
 8009276:	4413      	add	r3, r2
 8009278:	4619      	mov	r1, r3
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fe6e 	bl	8008f5c <move_window>
 8009280:	4603      	mov	r3, r0
 8009282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009284:	7ffb      	ldrb	r3, [r7, #31]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 80a9 	bne.w	80093de <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	61b9      	str	r1, [r7, #24]
 8009298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929c:	4413      	add	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00d      	beq.n	80092c6 <put_fat+0xa4>
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	b25b      	sxtb	r3, r3
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	b25a      	sxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	b25b      	sxtb	r3, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	b25b      	sxtb	r3, r3
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	e001      	b.n	80092ca <put_fat+0xa8>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	0a5b      	lsrs	r3, r3, #9
 80092dc:	4413      	add	r3, r2
 80092de:	4619      	mov	r1, r3
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fe3b 	bl	8008f5c <move_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092ea:	7ffb      	ldrb	r3, [r7, #31]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d178      	bne.n	80093e2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	4413      	add	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <put_fat+0xf0>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	b2db      	uxtb	r3, r3
 8009310:	e00e      	b.n	8009330 <put_fat+0x10e>
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b25b      	sxtb	r3, r3
 8009318:	f023 030f 	bic.w	r3, r3, #15
 800931c:	b25a      	sxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	b25b      	sxtb	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b25b      	sxtb	r3, r3
 800932e:	b2db      	uxtb	r3, r3
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	70da      	strb	r2, [r3, #3]
			break;
 800933a:	e057      	b.n	80093ec <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	4413      	add	r3, r2
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fe07 	bl	8008f5c <move_window>
 800934e:	4603      	mov	r3, r0
 8009350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009352:	7ffb      	ldrb	r3, [r7, #31]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d146      	bne.n	80093e6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009366:	4413      	add	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	b292      	uxth	r2, r2
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fb89 	bl	8008a86 <st_word>
			fs->wflag = 1;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2201      	movs	r2, #1
 8009378:	70da      	strb	r2, [r3, #3]
			break;
 800937a:	e037      	b.n	80093ec <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	09db      	lsrs	r3, r3, #7
 8009384:	4413      	add	r3, r2
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fde7 	bl	8008f5c <move_window>
 800938e:	4603      	mov	r3, r0
 8009390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009392:	7ffb      	ldrb	r3, [r7, #31]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d128      	bne.n	80093ea <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80093ac:	4413      	add	r3, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff fb46 	bl	8008a40 <ld_dword>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093ba:	4323      	orrs	r3, r4
 80093bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80093cc:	4413      	add	r3, r2
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff fb73 	bl	8008abc <st_dword>
			fs->wflag = 1;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	70da      	strb	r2, [r3, #3]
			break;
 80093dc:	e006      	b.n	80093ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093de:	bf00      	nop
 80093e0:	e004      	b.n	80093ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093e2:	bf00      	nop
 80093e4:	e002      	b.n	80093ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093e6:	bf00      	nop
 80093e8:	e000      	b.n	80093ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093ea:	bf00      	nop
		}
	}
	return res;
 80093ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3724      	adds	r7, #36	; 0x24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd90      	pop	{r4, r7, pc}

080093f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b088      	sub	sp, #32
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d904      	bls.n	800941c <remove_chain+0x26>
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	429a      	cmp	r2, r3
 800941a:	d301      	bcc.n	8009420 <remove_chain+0x2a>
 800941c:	2302      	movs	r3, #2
 800941e:	e04b      	b.n	80094b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00c      	beq.n	8009440 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	69b8      	ldr	r0, [r7, #24]
 800942e:	f7ff fef8 	bl	8009222 <put_fat>
 8009432:	4603      	mov	r3, r0
 8009434:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009436:	7ffb      	ldrb	r3, [r7, #31]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <remove_chain+0x4a>
 800943c:	7ffb      	ldrb	r3, [r7, #31]
 800943e:	e03b      	b.n	80094b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7ff fe45 	bl	80090d2 <get_fat>
 8009448:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d031      	beq.n	80094b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <remove_chain+0x64>
 8009456:	2302      	movs	r3, #2
 8009458:	e02e      	b.n	80094b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009460:	d101      	bne.n	8009466 <remove_chain+0x70>
 8009462:	2301      	movs	r3, #1
 8009464:	e028      	b.n	80094b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009466:	2200      	movs	r2, #0
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	69b8      	ldr	r0, [r7, #24]
 800946c:	f7ff fed9 	bl	8009222 <put_fat>
 8009470:	4603      	mov	r3, r0
 8009472:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009474:	7ffb      	ldrb	r3, [r7, #31]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <remove_chain+0x88>
 800947a:	7ffb      	ldrb	r3, [r7, #31]
 800947c:	e01c      	b.n	80094b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	3b02      	subs	r3, #2
 8009488:	429a      	cmp	r2, r3
 800948a:	d20b      	bcs.n	80094a4 <remove_chain+0xae>
			fs->free_clst++;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	791b      	ldrb	r3, [r3, #4]
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d3c6      	bcc.n	8009440 <remove_chain+0x4a>
 80094b2:	e000      	b.n	80094b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80094b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10d      	bne.n	80094f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <create_chain+0x2c>
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d31b      	bcc.n	8009524 <create_chain+0x64>
 80094ec:	2301      	movs	r3, #1
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	e018      	b.n	8009524 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fdec 	bl	80090d2 <get_fat>
 80094fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d801      	bhi.n	8009506 <create_chain+0x46>
 8009502:	2301      	movs	r3, #1
 8009504:	e070      	b.n	80095e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950c:	d101      	bne.n	8009512 <create_chain+0x52>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e06a      	b.n	80095e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	429a      	cmp	r2, r3
 800951a:	d201      	bcs.n	8009520 <create_chain+0x60>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	e063      	b.n	80095e8 <create_chain+0x128>
		scl = clst;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	3301      	adds	r3, #1
 800952c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	429a      	cmp	r2, r3
 8009536:	d307      	bcc.n	8009548 <create_chain+0x88>
				ncl = 2;
 8009538:	2302      	movs	r3, #2
 800953a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800953c:	69fa      	ldr	r2, [r7, #28]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d901      	bls.n	8009548 <create_chain+0x88>
 8009544:	2300      	movs	r3, #0
 8009546:	e04f      	b.n	80095e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009548:	69f9      	ldr	r1, [r7, #28]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fdc1 	bl	80090d2 <get_fat>
 8009550:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00e      	beq.n	8009576 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d003      	beq.n	8009566 <create_chain+0xa6>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009564:	d101      	bne.n	800956a <create_chain+0xaa>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	e03e      	b.n	80095e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	429a      	cmp	r2, r3
 8009570:	d1da      	bne.n	8009528 <create_chain+0x68>
 8009572:	2300      	movs	r3, #0
 8009574:	e038      	b.n	80095e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009576:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800957c:	69f9      	ldr	r1, [r7, #28]
 800957e:	6938      	ldr	r0, [r7, #16]
 8009580:	f7ff fe4f 	bl	8009222 <put_fat>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d109      	bne.n	80095a2 <create_chain+0xe2>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f7ff fe42 	bl	8009222 <put_fat>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d116      	bne.n	80095d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	695a      	ldr	r2, [r3, #20]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	3b02      	subs	r3, #2
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d804      	bhi.n	80095c6 <create_chain+0x106>
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	f043 0301 	orr.w	r3, r3, #1
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	711a      	strb	r2, [r3, #4]
 80095d4:	e007      	b.n	80095e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d102      	bne.n	80095e2 <create_chain+0x122>
 80095dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095e0:	e000      	b.n	80095e4 <create_chain+0x124>
 80095e2:	2301      	movs	r3, #1
 80095e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80095e6:	69fb      	ldr	r3, [r7, #28]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	3304      	adds	r3, #4
 8009606:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	0a5b      	lsrs	r3, r3, #9
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	8952      	ldrh	r2, [r2, #10]
 8009610:	fbb3 f3f2 	udiv	r3, r3, r2
 8009614:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	613a      	str	r2, [r7, #16]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <clmt_clust+0x3a>
 8009626:	2300      	movs	r3, #0
 8009628:	e010      	b.n	800964c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	d307      	bcc.n	8009642 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3304      	adds	r3, #4
 800963e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009640:	e7e9      	b.n	8009616 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009642:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	4413      	add	r3, r2
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800966e:	d204      	bcs.n	800967a <dir_sdi+0x22>
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	f003 031f 	and.w	r3, r3, #31
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <dir_sdi+0x26>
		return FR_INT_ERR;
 800967a:	2302      	movs	r3, #2
 800967c:	e063      	b.n	8009746 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <dir_sdi+0x46>
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d902      	bls.n	800969e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10c      	bne.n	80096be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	8912      	ldrh	r2, [r2, #8]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d301      	bcc.n	80096b4 <dir_sdi+0x5c>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e048      	b.n	8009746 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	61da      	str	r2, [r3, #28]
 80096bc:	e029      	b.n	8009712 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	895b      	ldrh	r3, [r3, #10]
 80096c2:	025b      	lsls	r3, r3, #9
 80096c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096c6:	e019      	b.n	80096fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6979      	ldr	r1, [r7, #20]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff fd00 	bl	80090d2 <get_fat>
 80096d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096da:	d101      	bne.n	80096e0 <dir_sdi+0x88>
 80096dc:	2301      	movs	r3, #1
 80096de:	e032      	b.n	8009746 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d904      	bls.n	80096f0 <dir_sdi+0x98>
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d301      	bcc.n	80096f4 <dir_sdi+0x9c>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e028      	b.n	8009746 <dir_sdi+0xee>
			ofs -= csz;
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	429a      	cmp	r2, r3
 8009702:	d2e1      	bcs.n	80096c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009704:	6979      	ldr	r1, [r7, #20]
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f7ff fcc4 	bl	8009094 <clust2sect>
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <dir_sdi+0xcc>
 8009720:	2302      	movs	r3, #2
 8009722:	e010      	b.n	8009746 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	69da      	ldr	r2, [r3, #28]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	441a      	add	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	441a      	add	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b086      	sub	sp, #24
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	3320      	adds	r3, #32
 8009764:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <dir_next+0x28>
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009774:	d301      	bcc.n	800977a <dir_next+0x2c>
 8009776:	2304      	movs	r3, #4
 8009778:	e0aa      	b.n	80098d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009780:	2b00      	cmp	r3, #0
 8009782:	f040 8098 	bne.w	80098b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	8912      	ldrh	r2, [r2, #8]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	f0c0 8088 	bcc.w	80098b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	61da      	str	r2, [r3, #28]
 80097ac:	2304      	movs	r3, #4
 80097ae:	e08f      	b.n	80098d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	0a5b      	lsrs	r3, r3, #9
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	8952      	ldrh	r2, [r2, #10]
 80097b8:	3a01      	subs	r2, #1
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d17a      	bne.n	80098b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	4619      	mov	r1, r3
 80097c8:	4610      	mov	r0, r2
 80097ca:	f7ff fc82 	bl	80090d2 <get_fat>
 80097ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d801      	bhi.n	80097da <dir_next+0x8c>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e07a      	b.n	80098d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e0:	d101      	bne.n	80097e6 <dir_next+0x98>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e074      	b.n	80098d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d358      	bcc.n	80098a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d104      	bne.n	8009800 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	61da      	str	r2, [r3, #28]
 80097fc:	2304      	movs	r3, #4
 80097fe:	e067      	b.n	80098d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7ff fe59 	bl	80094c0 <create_chain>
 800980e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <dir_next+0xcc>
 8009816:	2307      	movs	r3, #7
 8009818:	e05a      	b.n	80098d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <dir_next+0xd6>
 8009820:	2302      	movs	r3, #2
 8009822:	e055      	b.n	80098d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800982a:	d101      	bne.n	8009830 <dir_next+0xe2>
 800982c:	2301      	movs	r3, #1
 800982e:	e04f      	b.n	80098d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fb4f 	bl	8008ed4 <sync_window>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <dir_next+0xf2>
 800983c:	2301      	movs	r3, #1
 800983e:	e047      	b.n	80098d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3334      	adds	r3, #52	; 0x34
 8009844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff f983 	bl	8008b56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7ff fc1c 	bl	8009094 <clust2sect>
 800985c:	4602      	mov	r2, r0
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	631a      	str	r2, [r3, #48]	; 0x30
 8009862:	e012      	b.n	800988a <dir_next+0x13c>
						fs->wflag = 1;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff fb32 	bl	8008ed4 <sync_window>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <dir_next+0x12c>
 8009876:	2301      	movs	r3, #1
 8009878:	e02a      	b.n	80098d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	631a      	str	r2, [r3, #48]	; 0x30
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	895b      	ldrh	r3, [r3, #10]
 800988e:	461a      	mov	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	4293      	cmp	r3, r2
 8009894:	d3e6      	bcc.n	8009864 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1ad2      	subs	r2, r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80098a8:	6979      	ldr	r1, [r7, #20]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff fbf2 	bl	8009094 <clust2sect>
 80098b0:	4602      	mov	r2, r0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c8:	441a      	add	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80098e8:	2100      	movs	r1, #0
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff feb4 	bl	8009658 <dir_sdi>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d12b      	bne.n	8009952 <dir_alloc+0x7a>
		n = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	4619      	mov	r1, r3
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fb29 	bl	8008f5c <move_window>
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d11d      	bne.n	8009950 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2be5      	cmp	r3, #229	; 0xe5
 800991c:	d004      	beq.n	8009928 <dir_alloc+0x50>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d107      	bne.n	8009938 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3301      	adds	r3, #1
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d102      	bne.n	800993c <dir_alloc+0x64>
 8009936:	e00c      	b.n	8009952 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009938:	2300      	movs	r3, #0
 800993a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800993c:	2101      	movs	r1, #1
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff ff05 	bl	800974e <dir_next>
 8009944:	4603      	mov	r3, r0
 8009946:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0d7      	beq.n	80098fe <dir_alloc+0x26>
 800994e:	e000      	b.n	8009952 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009950:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	2b04      	cmp	r3, #4
 8009956:	d101      	bne.n	800995c <dir_alloc+0x84>
 8009958:	2307      	movs	r3, #7
 800995a:	75fb      	strb	r3, [r7, #23]
	return res;
 800995c:	7dfb      	ldrb	r3, [r7, #23]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	331a      	adds	r3, #26
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff f84b 	bl	8008a10 <ld_word>
 800997a:	4603      	mov	r3, r0
 800997c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b03      	cmp	r3, #3
 8009984:	d109      	bne.n	800999a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3314      	adds	r3, #20
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff f840 	bl	8008a10 <ld_word>
 8009990:	4603      	mov	r3, r0
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4313      	orrs	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	331a      	adds	r3, #26
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	b292      	uxth	r2, r2
 80099b8:	4611      	mov	r1, r2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f863 	bl	8008a86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d109      	bne.n	80099dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f103 0214 	add.w	r2, r3, #20
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	0c1b      	lsrs	r3, r3, #16
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7ff f855 	bl	8008a86 <st_word>
	}
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099f2:	2100      	movs	r1, #0
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fe2f 	bl	8009658 <dir_sdi>
 80099fa:	4603      	mov	r3, r0
 80099fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <dir_find+0x24>
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	e03e      	b.n	8009a86 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6938      	ldr	r0, [r7, #16]
 8009a10:	f7ff faa4 	bl	8008f5c <move_window>
 8009a14:	4603      	mov	r3, r0
 8009a16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d12f      	bne.n	8009a7e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <dir_find+0x4e>
 8009a2c:	2304      	movs	r3, #4
 8009a2e:	75fb      	strb	r3, [r7, #23]
 8009a30:	e028      	b.n	8009a84 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	330b      	adds	r3, #11
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	330b      	adds	r3, #11
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	f003 0308 	and.w	r3, r3, #8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <dir_find+0x86>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a18      	ldr	r0, [r3, #32]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	220b      	movs	r2, #11
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f7ff f894 	bl	8008b8c <mem_cmp>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00b      	beq.n	8009a82 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff fe6e 	bl	800974e <dir_next>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0c5      	beq.n	8009a08 <dir_find+0x24>
 8009a7c:	e002      	b.n	8009a84 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009a7e:	bf00      	nop
 8009a80:	e000      	b.n	8009a84 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a82:	bf00      	nop

	return res;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff ff1a 	bl	80098d8 <dir_alloc>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11c      	bne.n	8009ae8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	68b8      	ldr	r0, [r7, #8]
 8009ab6:	f7ff fa51 	bl	8008f5c <move_window>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d111      	bne.n	8009ae8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	2100      	movs	r1, #0
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff f842 	bl	8008b56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a18      	ldr	r0, [r3, #32]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3324      	adds	r3, #36	; 0x24
 8009ada:	220b      	movs	r2, #11
 8009adc:	4619      	mov	r1, r3
 8009ade:	f7ff f819 	bl	8008b14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3324      	adds	r3, #36	; 0x24
 8009b08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009b0a:	220b      	movs	r2, #11
 8009b0c:	2120      	movs	r1, #32
 8009b0e:	68b8      	ldr	r0, [r7, #8]
 8009b10:	f7ff f821 	bl	8008b56 <mem_set>
	si = i = 0; ni = 8;
 8009b14:	2300      	movs	r3, #0
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	61fb      	str	r3, [r7, #28]
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	61fa      	str	r2, [r7, #28]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b2e:	7efb      	ldrb	r3, [r7, #27]
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d94e      	bls.n	8009bd2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009b34:	7efb      	ldrb	r3, [r7, #27]
 8009b36:	2b2f      	cmp	r3, #47	; 0x2f
 8009b38:	d006      	beq.n	8009b48 <create_name+0x54>
 8009b3a:	7efb      	ldrb	r3, [r7, #27]
 8009b3c:	2b5c      	cmp	r3, #92	; 0x5c
 8009b3e:	d110      	bne.n	8009b62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b40:	e002      	b.n	8009b48 <create_name+0x54>
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	3301      	adds	r3, #1
 8009b46:	61fb      	str	r3, [r7, #28]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b2f      	cmp	r3, #47	; 0x2f
 8009b52:	d0f6      	beq.n	8009b42 <create_name+0x4e>
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b5c      	cmp	r3, #92	; 0x5c
 8009b5e:	d0f0      	beq.n	8009b42 <create_name+0x4e>
			break;
 8009b60:	e038      	b.n	8009bd4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009b62:	7efb      	ldrb	r3, [r7, #27]
 8009b64:	2b2e      	cmp	r3, #46	; 0x2e
 8009b66:	d003      	beq.n	8009b70 <create_name+0x7c>
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d30c      	bcc.n	8009b8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b0b      	cmp	r3, #11
 8009b74:	d002      	beq.n	8009b7c <create_name+0x88>
 8009b76:	7efb      	ldrb	r3, [r7, #27]
 8009b78:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7a:	d001      	beq.n	8009b80 <create_name+0x8c>
 8009b7c:	2306      	movs	r3, #6
 8009b7e:	e044      	b.n	8009c0a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b80:	2308      	movs	r3, #8
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	230b      	movs	r3, #11
 8009b86:	617b      	str	r3, [r7, #20]
			continue;
 8009b88:	e022      	b.n	8009bd0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da04      	bge.n	8009b9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b92:	7efb      	ldrb	r3, [r7, #27]
 8009b94:	3b80      	subs	r3, #128	; 0x80
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <create_name+0x120>)
 8009b98:	5cd3      	ldrb	r3, [r2, r3]
 8009b9a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b9c:	7efb      	ldrb	r3, [r7, #27]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	481d      	ldr	r0, [pc, #116]	; (8009c18 <create_name+0x124>)
 8009ba2:	f7ff f81a 	bl	8008bda <chk_chr>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <create_name+0xbc>
 8009bac:	2306      	movs	r3, #6
 8009bae:	e02c      	b.n	8009c0a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009bb0:	7efb      	ldrb	r3, [r7, #27]
 8009bb2:	2b60      	cmp	r3, #96	; 0x60
 8009bb4:	d905      	bls.n	8009bc2 <create_name+0xce>
 8009bb6:	7efb      	ldrb	r3, [r7, #27]
 8009bb8:	2b7a      	cmp	r3, #122	; 0x7a
 8009bba:	d802      	bhi.n	8009bc2 <create_name+0xce>
 8009bbc:	7efb      	ldrb	r3, [r7, #27]
 8009bbe:	3b20      	subs	r3, #32
 8009bc0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	613a      	str	r2, [r7, #16]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	4413      	add	r3, r2
 8009bcc:	7efa      	ldrb	r2, [r7, #27]
 8009bce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009bd0:	e7a6      	b.n	8009b20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009bd2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	441a      	add	r2, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <create_name+0xf4>
 8009be4:	2306      	movs	r3, #6
 8009be6:	e010      	b.n	8009c0a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2be5      	cmp	r3, #229	; 0xe5
 8009bee:	d102      	bne.n	8009bf6 <create_name+0x102>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2205      	movs	r2, #5
 8009bf4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009bf6:	7efb      	ldrb	r3, [r7, #27]
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d801      	bhi.n	8009c00 <create_name+0x10c>
 8009bfc:	2204      	movs	r2, #4
 8009bfe:	e000      	b.n	8009c02 <create_name+0x10e>
 8009c00:	2200      	movs	r2, #0
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	330b      	adds	r3, #11
 8009c06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009c08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	08011914 	.word	0x08011914
 8009c18:	0801189c 	.word	0x0801189c

08009c1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c30:	e002      	b.n	8009c38 <follow_path+0x1c>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8009c3e:	d0f8      	beq.n	8009c32 <follow_path+0x16>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b5c      	cmp	r3, #92	; 0x5c
 8009c46:	d0f4      	beq.n	8009c32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b1f      	cmp	r3, #31
 8009c54:	d80a      	bhi.n	8009c6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2280      	movs	r2, #128	; 0x80
 8009c5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fcf9 	bl	8009658 <dir_sdi>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
 8009c6a:	e043      	b.n	8009cf4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff ff3f 	bl	8009af4 <create_name>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d134      	bne.n	8009cea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff feaf 	bl	80099e4 <dir_find>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d127      	bne.n	8009cee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d122      	bne.n	8009cee <follow_path+0xd2>
 8009ca8:	2305      	movs	r3, #5
 8009caa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009cac:	e01f      	b.n	8009cee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11c      	bne.n	8009cf2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	799b      	ldrb	r3, [r3, #6]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009cc4:	2305      	movs	r3, #5
 8009cc6:	75fb      	strb	r3, [r7, #23]
 8009cc8:	e014      	b.n	8009cf4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd8:	4413      	add	r3, r2
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fe42 	bl	8009966 <ld_clust>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ce8:	e7c0      	b.n	8009c6c <follow_path+0x50>
			if (res != FR_OK) break;
 8009cea:	bf00      	nop
 8009cec:	e002      	b.n	8009cf4 <follow_path+0xd8>
				break;
 8009cee:	bf00      	nop
 8009cf0:	e000      	b.n	8009cf4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cf2:	bf00      	nop
			}
		}
	}

	return res;
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b087      	sub	sp, #28
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d031      	beq.n	8009d78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e002      	b.n	8009d22 <get_ldnumber+0x24>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	617b      	str	r3, [r7, #20]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d903      	bls.n	8009d32 <get_ldnumber+0x34>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b3a      	cmp	r3, #58	; 0x3a
 8009d30:	d1f4      	bne.n	8009d1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b3a      	cmp	r3, #58	; 0x3a
 8009d38:	d11c      	bne.n	8009d74 <get_ldnumber+0x76>
			tp = *path;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	60fa      	str	r2, [r7, #12]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	3b30      	subs	r3, #48	; 0x30
 8009d4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d80e      	bhi.n	8009d70 <get_ldnumber+0x72>
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d10a      	bne.n	8009d70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d107      	bne.n	8009d70 <get_ldnumber+0x72>
					vol = (int)i;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	3301      	adds	r3, #1
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	e002      	b.n	8009d7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d74:	2300      	movs	r3, #0
 8009d76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d78:	693b      	ldr	r3, [r7, #16]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	70da      	strb	r2, [r3, #3]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff f8da 	bl	8008f5c <move_window>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <check_fs+0x2a>
 8009dae:	2304      	movs	r3, #4
 8009db0:	e038      	b.n	8009e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3334      	adds	r3, #52	; 0x34
 8009db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fe28 	bl	8008a10 <ld_word>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d001      	beq.n	8009dd0 <check_fs+0x48>
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e029      	b.n	8009e24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dd6:	2be9      	cmp	r3, #233	; 0xe9
 8009dd8:	d009      	beq.n	8009dee <check_fs+0x66>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009de0:	2beb      	cmp	r3, #235	; 0xeb
 8009de2:	d11e      	bne.n	8009e22 <check_fs+0x9a>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009dea:	2b90      	cmp	r3, #144	; 0x90
 8009dec:	d119      	bne.n	8009e22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3334      	adds	r3, #52	; 0x34
 8009df2:	3336      	adds	r3, #54	; 0x36
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fe23 	bl	8008a40 <ld_dword>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <check_fs+0xa4>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d101      	bne.n	8009e0a <check_fs+0x82>
 8009e06:	2300      	movs	r3, #0
 8009e08:	e00c      	b.n	8009e24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3334      	adds	r3, #52	; 0x34
 8009e0e:	3352      	adds	r3, #82	; 0x52
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe fe15 	bl	8008a40 <ld_dword>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a05      	ldr	r2, [pc, #20]	; (8009e30 <check_fs+0xa8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d101      	bne.n	8009e22 <check_fs+0x9a>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e000      	b.n	8009e24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e22:	2302      	movs	r3, #2
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	00544146 	.word	0x00544146
 8009e30:	33544146 	.word	0x33544146

08009e34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b096      	sub	sp, #88	; 0x58
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff ff58 	bl	8009cfe <get_ldnumber>
 8009e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da01      	bge.n	8009e5a <find_volume+0x26>
 8009e56:	230b      	movs	r3, #11
 8009e58:	e235      	b.n	800a2c6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e5a:	4aa5      	ldr	r2, [pc, #660]	; (800a0f0 <find_volume+0x2bc>)
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <find_volume+0x3a>
 8009e6a:	230c      	movs	r3, #12
 8009e6c:	e22b      	b.n	800a2c6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009e6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e70:	f7fe fece 	bl	8008c10 <lock_fs>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <find_volume+0x4a>
 8009e7a:	230f      	movs	r3, #15
 8009e7c:	e223      	b.n	800a2c6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	f023 0301 	bic.w	r3, r3, #1
 8009e8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01a      	beq.n	8009eca <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fd1b 	bl	80088d4 <disk_status>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10c      	bne.n	8009eca <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <find_volume+0x92>
 8009eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	e1ff      	b.n	800a2c6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e1fd      	b.n	800a2c6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fd13 	bl	8008908 <disk_initialize>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e1e6      	b.n	800a2c6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <find_volume+0xda>
 8009efe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	e1db      	b.n	800a2c6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f16:	f7ff ff37 	bl	8009d88 <check_fs>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d149      	bne.n	8009fbc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f28:	2300      	movs	r3, #0
 8009f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f2c:	e01e      	b.n	8009f6c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009f3c:	4413      	add	r3, r2
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	3304      	adds	r3, #4
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d006      	beq.n	8009f58 <find_volume+0x124>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fd76 	bl	8008a40 <ld_dword>
 8009f54:	4602      	mov	r2, r0
 8009f56:	e000      	b.n	8009f5a <find_volume+0x126>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	3358      	adds	r3, #88	; 0x58
 8009f60:	443b      	add	r3, r7
 8009f62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f68:	3301      	adds	r3, #1
 8009f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d9dd      	bls.n	8009f2e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f72:	2300      	movs	r3, #0
 8009f74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <find_volume+0x14e>
 8009f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	3358      	adds	r3, #88	; 0x58
 8009f88:	443b      	add	r3, r7
 8009f8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d005      	beq.n	8009fa2 <find_volume+0x16e>
 8009f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f9a:	f7ff fef5 	bl	8009d88 <check_fs>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	e000      	b.n	8009fa4 <find_volume+0x170>
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d905      	bls.n	8009fbc <find_volume+0x188>
 8009fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d9e2      	bls.n	8009f82 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d101      	bne.n	8009fc8 <find_volume+0x194>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e17e      	b.n	800a2c6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d901      	bls.n	8009fd4 <find_volume+0x1a0>
 8009fd0:	230d      	movs	r3, #13
 8009fd2:	e178      	b.n	800a2c6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	3334      	adds	r3, #52	; 0x34
 8009fd8:	330b      	adds	r3, #11
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fd18 	bl	8008a10 <ld_word>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe6:	d001      	beq.n	8009fec <find_volume+0x1b8>
 8009fe8:	230d      	movs	r3, #13
 8009fea:	e16c      	b.n	800a2c6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	3334      	adds	r3, #52	; 0x34
 8009ff0:	3316      	adds	r3, #22
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fd0c 	bl	8008a10 <ld_word>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <find_volume+0x1dc>
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	3334      	adds	r3, #52	; 0x34
 800a006:	3324      	adds	r3, #36	; 0x24
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fe fd19 	bl	8008a40 <ld_dword>
 800a00e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a014:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d005      	beq.n	800a034 <find_volume+0x200>
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	789b      	ldrb	r3, [r3, #2]
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d001      	beq.n	800a034 <find_volume+0x200>
 800a030:	230d      	movs	r3, #13
 800a032:	e148      	b.n	800a2c6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	789b      	ldrb	r3, [r3, #2]
 800a038:	461a      	mov	r2, r3
 800a03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03c:	fb02 f303 	mul.w	r3, r2, r3
 800a040:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a048:	b29a      	uxth	r2, r3
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a050:	895b      	ldrh	r3, [r3, #10]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d008      	beq.n	800a068 <find_volume+0x234>
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	895b      	ldrh	r3, [r3, #10]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	895b      	ldrh	r3, [r3, #10]
 800a060:	3b01      	subs	r3, #1
 800a062:	4013      	ands	r3, r2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <find_volume+0x238>
 800a068:	230d      	movs	r3, #13
 800a06a:	e12c      	b.n	800a2c6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	3334      	adds	r3, #52	; 0x34
 800a070:	3311      	adds	r3, #17
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fccc 	bl	8008a10 <ld_word>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <find_volume+0x25e>
 800a08e:	230d      	movs	r3, #13
 800a090:	e119      	b.n	800a2c6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	3334      	adds	r3, #52	; 0x34
 800a096:	3313      	adds	r3, #19
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe fcb9 	bl	8008a10 <ld_word>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <find_volume+0x282>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	3334      	adds	r3, #52	; 0x34
 800a0ac:	3320      	adds	r3, #32
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fcc6 	bl	8008a40 <ld_dword>
 800a0b4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	3334      	adds	r3, #52	; 0x34
 800a0ba:	330e      	adds	r3, #14
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fca7 	bl	8008a10 <ld_word>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a0c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <find_volume+0x29c>
 800a0cc:	230d      	movs	r3, #13
 800a0ce:	e0fa      	b.n	800a2c6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d4:	4413      	add	r3, r2
 800a0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d8:	8912      	ldrh	r2, [r2, #8]
 800a0da:	0912      	lsrs	r2, r2, #4
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	4413      	add	r3, r2
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d204      	bcs.n	800a0f4 <find_volume+0x2c0>
 800a0ea:	230d      	movs	r3, #13
 800a0ec:	e0eb      	b.n	800a2c6 <find_volume+0x492>
 800a0ee:	bf00      	nop
 800a0f0:	20001eb8 	.word	0x20001eb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fc:	8952      	ldrh	r2, [r2, #10]
 800a0fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <find_volume+0x2da>
 800a10a:	230d      	movs	r3, #13
 800a10c:	e0db      	b.n	800a2c6 <find_volume+0x492>
		fmt = FS_FAT32;
 800a10e:	2303      	movs	r3, #3
 800a110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d802      	bhi.n	800a124 <find_volume+0x2f0>
 800a11e:	2302      	movs	r3, #2
 800a120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d802      	bhi.n	800a134 <find_volume+0x300>
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	1c9a      	adds	r2, r3, #2
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a140:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a142:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a146:	441a      	add	r2, r3
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a14c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	441a      	add	r2, r3
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d11e      	bne.n	800a19c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	3334      	adds	r3, #52	; 0x34
 800a162:	332a      	adds	r3, #42	; 0x2a
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fc53 	bl	8008a10 <ld_word>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <find_volume+0x340>
 800a170:	230d      	movs	r3, #13
 800a172:	e0a8      	b.n	800a2c6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <find_volume+0x34c>
 800a17c:	230d      	movs	r3, #13
 800a17e:	e0a2      	b.n	800a2c6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	3334      	adds	r3, #52	; 0x34
 800a184:	332c      	adds	r3, #44	; 0x2c
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fc5a 	bl	8008a40 <ld_dword>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	647b      	str	r3, [r7, #68]	; 0x44
 800a19a:	e01f      	b.n	800a1dc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	891b      	ldrh	r3, [r3, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <find_volume+0x374>
 800a1a4:	230d      	movs	r3, #13
 800a1a6:	e08e      	b.n	800a2c6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ae:	441a      	add	r2, r3
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d103      	bne.n	800a1c4 <find_volume+0x390>
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	e00a      	b.n	800a1da <find_volume+0x3a6>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	699a      	ldr	r2, [r3, #24]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	085a      	lsrs	r2, r3, #1
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a1e6:	0a5b      	lsrs	r3, r3, #9
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d201      	bcs.n	800a1f0 <find_volume+0x3bc>
 800a1ec:	230d      	movs	r3, #13
 800a1ee:	e06a      	b.n	800a2c6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1f6:	615a      	str	r2, [r3, #20]
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	2280      	movs	r2, #128	; 0x80
 800a204:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d149      	bne.n	800a2a2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	3334      	adds	r3, #52	; 0x34
 800a212:	3330      	adds	r3, #48	; 0x30
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fbfb 	bl	8008a10 <ld_word>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d140      	bne.n	800a2a2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a222:	3301      	adds	r3, #1
 800a224:	4619      	mov	r1, r3
 800a226:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a228:	f7fe fe98 	bl	8008f5c <move_window>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d137      	bne.n	800a2a2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	2200      	movs	r2, #0
 800a236:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	3334      	adds	r3, #52	; 0x34
 800a23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fbe5 	bl	8008a10 <ld_word>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a24e:	429a      	cmp	r2, r3
 800a250:	d127      	bne.n	800a2a2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	3334      	adds	r3, #52	; 0x34
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fbf2 	bl	8008a40 <ld_dword>
 800a25c:	4603      	mov	r3, r0
 800a25e:	4a1c      	ldr	r2, [pc, #112]	; (800a2d0 <find_volume+0x49c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d11e      	bne.n	800a2a2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	3334      	adds	r3, #52	; 0x34
 800a268:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fe fbe7 	bl	8008a40 <ld_dword>
 800a272:	4603      	mov	r3, r0
 800a274:	4a17      	ldr	r2, [pc, #92]	; (800a2d4 <find_volume+0x4a0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d113      	bne.n	800a2a2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	3334      	adds	r3, #52	; 0x34
 800a27e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fbdc 	bl	8008a40 <ld_dword>
 800a288:	4602      	mov	r2, r0
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	3334      	adds	r3, #52	; 0x34
 800a292:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fbd2 	bl	8008a40 <ld_dword>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a2a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <find_volume+0x4a4>)
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <find_volume+0x4a4>)
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <find_volume+0x4a4>)
 800a2b8:	881a      	ldrh	r2, [r3, #0]
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2c0:	f7fe fde4 	bl	8008e8c <clear_lock>
#endif
	return FR_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3758      	adds	r7, #88	; 0x58
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	41615252 	.word	0x41615252
 800a2d4:	61417272 	.word	0x61417272
 800a2d8:	20001ebc 	.word	0x20001ebc

0800a2dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2e6:	2309      	movs	r3, #9
 800a2e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d02e      	beq.n	800a34e <validate+0x72>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d02a      	beq.n	800a34e <validate+0x72>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d025      	beq.n	800a34e <validate+0x72>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	889a      	ldrh	r2, [r3, #4]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	88db      	ldrh	r3, [r3, #6]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d11e      	bne.n	800a34e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fc7b 	bl	8008c10 <lock_fs>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d014      	beq.n	800a34a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	785b      	ldrb	r3, [r3, #1]
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fad4 	bl	80088d4 <disk_status>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d102      	bne.n	800a33c <validate+0x60>
				res = FR_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
 800a33a:	e008      	b.n	800a34e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fc7a 	bl	8008c3c <unlock_fs>
 800a348:	e001      	b.n	800a34e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a34a:	230f      	movs	r3, #15
 800a34c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <validate+0x7e>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	e000      	b.n	800a35c <validate+0x80>
 800a35a:	2300      	movs	r3, #0
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	6013      	str	r3, [r2, #0]
	return res;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	4613      	mov	r3, r2
 800a378:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a37e:	f107 0310 	add.w	r3, r7, #16
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff fcbb 	bl	8009cfe <get_ldnumber>
 800a388:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da01      	bge.n	800a394 <f_mount+0x28>
 800a390:	230b      	movs	r3, #11
 800a392:	e048      	b.n	800a426 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a394:	4a26      	ldr	r2, [pc, #152]	; (800a430 <f_mount+0xc4>)
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a39c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00f      	beq.n	800a3c4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a3a4:	69b8      	ldr	r0, [r7, #24]
 800a3a6:	f7fe fd71 	bl	8008e8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fcad 	bl	800ad0e <ff_del_syncobj>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <f_mount+0x52>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e033      	b.n	800a426 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00f      	beq.n	800a3ea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	330c      	adds	r3, #12
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f000 fc77 	bl	800acce <ff_cre_syncobj>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <f_mount+0x7e>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e01d      	b.n	800a426 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4910      	ldr	r1, [pc, #64]	; (800a430 <f_mount+0xc4>)
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <f_mount+0x94>
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d001      	beq.n	800a404 <f_mount+0x98>
 800a400:	2300      	movs	r3, #0
 800a402:	e010      	b.n	800a426 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a404:	f107 010c 	add.w	r1, r7, #12
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	2200      	movs	r2, #0
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fd10 	bl	8009e34 <find_volume>
 800a414:	4603      	mov	r3, r0
 800a416:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	7dfa      	ldrb	r2, [r7, #23]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fc0c 	bl	8008c3c <unlock_fs>
 800a424:	7dfb      	ldrb	r3, [r7, #23]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20001eb8 	.word	0x20001eb8

0800a434 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b098      	sub	sp, #96	; 0x60
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <f_open+0x18>
 800a448:	2309      	movs	r3, #9
 800a44a:	e1b4      	b.n	800a7b6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a452:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a454:	79fa      	ldrb	r2, [r7, #7]
 800a456:	f107 0110 	add.w	r1, r7, #16
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fce8 	bl	8009e34 <find_volume>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a46a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 8191 	bne.w	800a796 <f_open+0x362>
		dj.obj.fs = fs;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	f107 0314 	add.w	r3, r7, #20
 800a47e:	4611      	mov	r1, r2
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fbcb 	bl	8009c1c <follow_path>
 800a486:	4603      	mov	r3, r0
 800a488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a48c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11a      	bne.n	800a4ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a494:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a498:	b25b      	sxtb	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	da03      	bge.n	800a4a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a49e:	2306      	movs	r3, #6
 800a4a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4a4:	e011      	b.n	800a4ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	bf14      	ite	ne
 800a4b0:	2301      	movne	r3, #1
 800a4b2:	2300      	moveq	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f107 0314 	add.w	r3, r7, #20
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fbd8 	bl	8008c74 <chk_lock>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	f003 031c 	and.w	r3, r3, #28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d07f      	beq.n	800a5d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a4d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d017      	beq.n	800a50c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d10e      	bne.n	800a502 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a4e4:	f7fe fc22 	bl	8008d2c <enq_lock>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <f_open+0xc8>
 800a4ee:	f107 0314 	add.w	r3, r7, #20
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff facb 	bl	8009a8e <dir_register>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e000      	b.n	800a4fe <f_open+0xca>
 800a4fc:	2312      	movs	r3, #18
 800a4fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	f043 0308 	orr.w	r3, r3, #8
 800a508:	71fb      	strb	r3, [r7, #7]
 800a50a:	e010      	b.n	800a52e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a50c:	7ebb      	ldrb	r3, [r7, #26]
 800a50e:	f003 0311 	and.w	r3, r3, #17
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <f_open+0xea>
					res = FR_DENIED;
 800a516:	2307      	movs	r3, #7
 800a518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a51c:	e007      	b.n	800a52e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <f_open+0xfa>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a532:	2b00      	cmp	r3, #0
 800a534:	d168      	bne.n	800a608 <f_open+0x1d4>
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	f003 0308 	and.w	r3, r3, #8
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d063      	beq.n	800a608 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a540:	f7fd fc8c 	bl	8007e5c <get_fattime>
 800a544:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a548:	330e      	adds	r3, #14
 800a54a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fab5 	bl	8008abc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	3316      	adds	r3, #22
 800a556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe faaf 	bl	8008abc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	330b      	adds	r3, #11
 800a562:	2220      	movs	r2, #32
 800a564:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff f9fa 	bl	8009966 <ld_clust>
 800a572:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a578:	2200      	movs	r2, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fa12 	bl	80099a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a582:	331c      	adds	r3, #28
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fa98 	bl	8008abc <st_dword>
					fs->wflag = 1;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2201      	movs	r2, #1
 800a590:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d037      	beq.n	800a608 <f_open+0x1d4>
						dw = fs->winsect;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe ff25 	bl	80093f6 <remove_chain>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d126      	bne.n	800a608 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe fccc 	bl	8008f5c <move_window>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5ce:	3a01      	subs	r2, #1
 800a5d0:	611a      	str	r2, [r3, #16]
 800a5d2:	e019      	b.n	800a608 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d115      	bne.n	800a608 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a5dc:	7ebb      	ldrb	r3, [r7, #26]
 800a5de:	f003 0310 	and.w	r3, r3, #16
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <f_open+0x1ba>
					res = FR_NO_FILE;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a5ec:	e00c      	b.n	800a608 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d007      	beq.n	800a608 <f_open+0x1d4>
 800a5f8:	7ebb      	ldrb	r3, [r7, #26]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <f_open+0x1d4>
						res = FR_DENIED;
 800a602:	2307      	movs	r3, #7
 800a604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d128      	bne.n	800a662 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a620:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	f023 0301 	bic.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	bf14      	ite	ne
 800a63a:	2301      	movne	r3, #1
 800a63c:	2300      	moveq	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	461a      	mov	r2, r3
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4611      	mov	r1, r2
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fb91 	bl	8008d70 <inc_lock>
 800a64e:	4602      	mov	r2, r0
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <f_open+0x22e>
 800a65c:	2302      	movs	r3, #2
 800a65e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 8095 	bne.w	800a796 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff f977 	bl	8009966 <ld_clust>
 800a678:	4602      	mov	r2, r0
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	331c      	adds	r3, #28
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f9dc 	bl	8008a40 <ld_dword>
 800a688:	4602      	mov	r2, r0
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	88da      	ldrh	r2, [r3, #6]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	79fa      	ldrb	r2, [r7, #7]
 800a6a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3330      	adds	r3, #48	; 0x30
 800a6be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe fa46 	bl	8008b56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a6ca:	79fb      	ldrb	r3, [r7, #7]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d060      	beq.n	800a796 <f_open+0x362>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d05c      	beq.n	800a796 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	895b      	ldrh	r3, [r3, #10]
 800a6e8:	025b      	lsls	r3, r3, #9
 800a6ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6f8:	e016      	b.n	800a728 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe fce7 	bl	80090d2 <get_fat>
 800a704:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d802      	bhi.n	800a712 <f_open+0x2de>
 800a70c:	2302      	movs	r3, #2
 800a70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a718:	d102      	bne.n	800a720 <f_open+0x2ec>
 800a71a:	2301      	movs	r3, #1
 800a71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	657b      	str	r3, [r7, #84]	; 0x54
 800a728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <f_open+0x304>
 800a730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a734:	429a      	cmp	r2, r3
 800a736:	d8e0      	bhi.n	800a6fa <f_open+0x2c6>
				}
				fp->clust = clst;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a73c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a73e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d127      	bne.n	800a796 <f_open+0x362>
 800a746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d022      	beq.n	800a796 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fc9d 	bl	8009094 <clust2sect>
 800a75a:	6478      	str	r0, [r7, #68]	; 0x44
 800a75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <f_open+0x336>
						res = FR_INT_ERR;
 800a762:	2302      	movs	r3, #2
 800a764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a768:	e015      	b.n	800a796 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a76c:	0a5a      	lsrs	r2, r3, #9
 800a76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a770:	441a      	add	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	7858      	ldrb	r0, [r3, #1]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6a1a      	ldr	r2, [r3, #32]
 800a784:	2301      	movs	r3, #1
 800a786:	f7fe f8e5 	bl	8008954 <disk_read>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <f_open+0x362>
 800a790:	2301      	movs	r3, #1
 800a792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <f_open+0x370>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe fa45 	bl	8008c3c <unlock_fs>
 800a7b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3760      	adds	r7, #96	; 0x60
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b08c      	sub	sp, #48	; 0x30
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
 800a7ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f107 0210 	add.w	r2, r7, #16
 800a7dc:	4611      	mov	r1, r2
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fd7c 	bl	800a2dc <validate>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d107      	bne.n	800a802 <f_write+0x44>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	7d5b      	ldrb	r3, [r3, #21]
 800a7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <f_write+0x58>
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a808:	4611      	mov	r1, r2
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fe fa16 	bl	8008c3c <unlock_fs>
 800a810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a814:	e173      	b.n	800aafe <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	7d1b      	ldrb	r3, [r3, #20]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d106      	bne.n	800a830 <f_write+0x72>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2107      	movs	r1, #7
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fa08 	bl	8008c3c <unlock_fs>
 800a82c:	2307      	movs	r3, #7
 800a82e:	e166      	b.n	800aafe <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	699a      	ldr	r2, [r3, #24]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	441a      	add	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	f080 814b 	bcs.w	800aad8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	43db      	mvns	r3, r3
 800a848:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a84a:	e145      	b.n	800aad8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 8101 	bne.w	800aa5c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	0a5b      	lsrs	r3, r3, #9
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	8952      	ldrh	r2, [r2, #10]
 800a864:	3a01      	subs	r2, #1
 800a866:	4013      	ands	r3, r2
 800a868:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d14d      	bne.n	800a90c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10c      	bne.n	800a892 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11a      	bne.n	800a8ba <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fe19 	bl	80094c0 <create_chain>
 800a88e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a890:	e013      	b.n	800a8ba <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d007      	beq.n	800a8aa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fe fea5 	bl	80095f0 <clmt_clust>
 800a8a6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8a8:	e007      	b.n	800a8ba <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f7fe fe04 	bl	80094c0 <create_chain>
 800a8b8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8110 	beq.w	800aae2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d109      	bne.n	800a8dc <f_write+0x11e>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	755a      	strb	r2, [r3, #21]
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2102      	movs	r1, #2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe f9b2 	bl	8008c3c <unlock_fs>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e110      	b.n	800aafe <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e2:	d109      	bne.n	800a8f8 <f_write+0x13a>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	755a      	strb	r2, [r3, #21]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe f9a4 	bl	8008c3c <unlock_fs>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e102      	b.n	800aafe <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <f_write+0x14e>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a90a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	7d1b      	ldrb	r3, [r3, #20]
 800a910:	b25b      	sxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	da1d      	bge.n	800a952 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	7858      	ldrb	r0, [r3, #1]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6a1a      	ldr	r2, [r3, #32]
 800a924:	2301      	movs	r3, #1
 800a926:	f7fe f835 	bl	8008994 <disk_write>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d009      	beq.n	800a944 <f_write+0x186>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	755a      	strb	r2, [r3, #21]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2101      	movs	r1, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe f97e 	bl	8008c3c <unlock_fs>
 800a940:	2301      	movs	r3, #1
 800a942:	e0dc      	b.n	800aafe <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	7d1b      	ldrb	r3, [r3, #20]
 800a948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	4619      	mov	r1, r3
 800a95a:	4610      	mov	r0, r2
 800a95c:	f7fe fb9a 	bl	8009094 <clust2sect>
 800a960:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d109      	bne.n	800a97c <f_write+0x1be>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2202      	movs	r2, #2
 800a96c:	755a      	strb	r2, [r3, #21]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2102      	movs	r1, #2
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe f962 	bl	8008c3c <unlock_fs>
 800a978:	2302      	movs	r3, #2
 800a97a:	e0c0      	b.n	800aafe <f_write+0x340>
			sect += csect;
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	4413      	add	r3, r2
 800a982:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	0a5b      	lsrs	r3, r3, #9
 800a988:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d041      	beq.n	800aa14 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a990:	69ba      	ldr	r2, [r7, #24]
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	4413      	add	r3, r2
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	8952      	ldrh	r2, [r2, #10]
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d905      	bls.n	800a9aa <f_write+0x1ec>
					cc = fs->csize - csect;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	895b      	ldrh	r3, [r3, #10]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	7858      	ldrb	r0, [r3, #1]
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	69f9      	ldr	r1, [r7, #28]
 800a9b4:	f7fd ffee 	bl	8008994 <disk_write>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d009      	beq.n	800a9d2 <f_write+0x214>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	755a      	strb	r2, [r3, #21]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe f937 	bl	8008c3c <unlock_fs>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e095      	b.n	800aafe <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a1a      	ldr	r2, [r3, #32]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	6a3a      	ldr	r2, [r7, #32]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d915      	bls.n	800aa0c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a1a      	ldr	r2, [r3, #32]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	025b      	lsls	r3, r3, #9
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f7fe f88b 	bl	8008b14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	7d1b      	ldrb	r3, [r3, #20]
 800aa02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	025b      	lsls	r3, r3, #9
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aa12:	e044      	b.n	800aa9e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d01b      	beq.n	800aa56 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	699a      	ldr	r2, [r3, #24]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d215      	bcs.n	800aa56 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	7858      	ldrb	r0, [r3, #1]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa34:	2301      	movs	r3, #1
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	f7fd ff8c 	bl	8008954 <disk_read>
 800aa3c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	755a      	strb	r2, [r3, #21]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe f8f5 	bl	8008c3c <unlock_fs>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e053      	b.n	800aafe <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d901      	bls.n	800aa76 <f_write+0x2b8>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa84:	4413      	add	r3, r2
 800aa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa88:	69f9      	ldr	r1, [r7, #28]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe f842 	bl	8008b14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	7d1b      	ldrb	r3, [r3, #20]
 800aa94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aa9e:	69fa      	ldr	r2, [r7, #28]
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	4413      	add	r3, r2
 800aaa4:	61fb      	str	r3, [r7, #28]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	699a      	ldr	r2, [r3, #24]
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	441a      	add	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	619a      	str	r2, [r3, #24]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	bf38      	it	cc
 800aabe:	461a      	movcc	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	60da      	str	r2, [r3, #12]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	441a      	add	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f47f aeb6 	bne.w	800a84c <f_write+0x8e>
 800aae0:	e000      	b.n	800aae4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aae2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	7d1b      	ldrb	r3, [r3, #20]
 800aae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe f8a0 	bl	8008c3c <unlock_fs>
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3730      	adds	r7, #48	; 0x30
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b086      	sub	sp, #24
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f107 0208 	add.w	r2, r7, #8
 800ab14:	4611      	mov	r1, r2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fbe0 	bl	800a2dc <validate>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d16d      	bne.n	800ac02 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7d1b      	ldrb	r3, [r3, #20]
 800ab2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d067      	beq.n	800ac02 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7d1b      	ldrb	r3, [r3, #20]
 800ab36:	b25b      	sxtb	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da1a      	bge.n	800ab72 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	7858      	ldrb	r0, [r3, #1]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1a      	ldr	r2, [r3, #32]
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	f7fd ff22 	bl	8008994 <disk_write>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d006      	beq.n	800ab64 <f_sync+0x5e>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2101      	movs	r1, #1
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe f86e 	bl	8008c3c <unlock_fs>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e055      	b.n	800ac10 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7d1b      	ldrb	r3, [r3, #20]
 800ab68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab72:	f7fd f973 	bl	8007e5c <get_fattime>
 800ab76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fe f9eb 	bl	8008f5c <move_window>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d138      	bne.n	800ac02 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	330b      	adds	r3, #11
 800ab9a:	781a      	ldrb	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	330b      	adds	r3, #11
 800aba0:	f042 0220 	orr.w	r2, r2, #32
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	461a      	mov	r2, r3
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	f7fe fef6 	bl	80099a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f103 021c 	add.w	r2, r3, #28
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	4619      	mov	r1, r3
 800abc4:	4610      	mov	r0, r2
 800abc6:	f7fd ff79 	bl	8008abc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3316      	adds	r3, #22
 800abce:	6939      	ldr	r1, [r7, #16]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fd ff73 	bl	8008abc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3312      	adds	r3, #18
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd ff52 	bl	8008a86 <st_word>
					fs->wflag = 1;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2201      	movs	r2, #1
 800abe6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe f9e4 	bl	8008fb8 <sync_fs>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7d1b      	ldrb	r3, [r3, #20]
 800abf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	7dfa      	ldrb	r2, [r7, #23]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe f817 	bl	8008c3c <unlock_fs>
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	4613      	mov	r3, r2
 800ac24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac26:	2301      	movs	r3, #1
 800ac28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac2e:	4b1f      	ldr	r3, [pc, #124]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac30:	7a5b      	ldrb	r3, [r3, #9]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d131      	bne.n	800ac9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac38:	4b1c      	ldr	r3, [pc, #112]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac3a:	7a5b      	ldrb	r3, [r3, #9]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4b1a      	ldr	r3, [pc, #104]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac42:	2100      	movs	r1, #0
 800ac44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac46:	4b19      	ldr	r3, [pc, #100]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac48:	7a5b      	ldrb	r3, [r3, #9]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	4a17      	ldr	r2, [pc, #92]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac56:	4b15      	ldr	r3, [pc, #84]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac58:	7a5b      	ldrb	r3, [r3, #9]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	4b13      	ldr	r3, [pc, #76]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac60:	4413      	add	r3, r2
 800ac62:	79fa      	ldrb	r2, [r7, #7]
 800ac64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac66:	4b11      	ldr	r3, [pc, #68]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	b2d1      	uxtb	r1, r2
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <FATFS_LinkDriverEx+0x94>)
 800ac72:	7251      	strb	r1, [r2, #9]
 800ac74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac76:	7dbb      	ldrb	r3, [r7, #22]
 800ac78:	3330      	adds	r3, #48	; 0x30
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	3301      	adds	r3, #1
 800ac84:	223a      	movs	r2, #58	; 0x3a
 800ac86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	3302      	adds	r3, #2
 800ac8c:	222f      	movs	r2, #47	; 0x2f
 800ac8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3303      	adds	r3, #3
 800ac94:	2200      	movs	r2, #0
 800ac96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20001ee0 	.word	0x20001ee0

0800acb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acba:	2200      	movs	r2, #0
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff ffaa 	bl	800ac18 <FATFS_LinkDriverEx>
 800acc4:	4603      	mov	r3, r0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b086      	sub	sp, #24
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	4603      	mov	r3, r0
 800acd6:	6039      	str	r1, [r7, #0]
 800acd8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ace2:	f107 030c 	add.w	r3, r7, #12
 800ace6:	2101      	movs	r1, #1
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f8cd 	bl	800ae88 <osSemaphoreCreate>
 800acee:	4602      	mov	r2, r0
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bf14      	ite	ne
 800acfc:	2301      	movne	r3, #1
 800acfe:	2300      	moveq	r3, #0
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	617b      	str	r3, [r7, #20]

    return ret;
 800ad04:	697b      	ldr	r3, [r7, #20]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f96c 	bl	800aff4 <osSemaphoreDelete>
#endif
    return 1;
 800ad1c:	2301      	movs	r3, #1
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b084      	sub	sp, #16
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ad32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f8d8 	bl	800aeec <osSemaphoreWait>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ad42:	2301      	movs	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f915 	bl	800af88 <osSemaphoreRelease>
#endif
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b085      	sub	sp, #20
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad78:	2b84      	cmp	r3, #132	; 0x84
 800ad7a:	d005      	beq.n	800ad88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ad7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	3303      	adds	r3, #3
 800ad86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ad88:	68fb      	ldr	r3, [r7, #12]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad9c:	f3ef 8305 	mrs	r3, IPSR
 800ada0:	607b      	str	r3, [r7, #4]
  return(result);
 800ada2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bf14      	ite	ne
 800ada8:	2301      	movne	r3, #1
 800adaa:	2300      	moveq	r3, #0
 800adac:	b2db      	uxtb	r3, r3
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800adbe:	f001 f987 	bl	800c0d0 <vTaskStartScheduler>
  
  return osOK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adca:	b089      	sub	sp, #36	; 0x24
 800adcc:	af04      	add	r7, sp, #16
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d020      	beq.n	800ae1c <osThreadCreate+0x54>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01c      	beq.n	800ae1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685c      	ldr	r4, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	691e      	ldr	r6, [r3, #16]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff ffb6 	bl	800ad66 <makeFreeRtosPriority>
 800adfa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae04:	9202      	str	r2, [sp, #8]
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	9100      	str	r1, [sp, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 ff7f 	bl	800bd14 <xTaskCreateStatic>
 800ae16:	4603      	mov	r3, r0
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e01c      	b.n	800ae56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685c      	ldr	r4, [r3, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae28:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ff98 	bl	800ad66 <makeFreeRtosPriority>
 800ae36:	4602      	mov	r2, r0
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	9200      	str	r2, [sp, #0]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	4632      	mov	r2, r6
 800ae44:	4629      	mov	r1, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 ffc1 	bl	800bdce <xTaskCreate>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d001      	beq.n	800ae56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e000      	b.n	800ae58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <osDelay+0x16>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	e000      	b.n	800ae78 <osDelay+0x18>
 800ae76:	2301      	movs	r3, #1
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 f8f5 	bl	800c068 <vTaskDelay>
  
  return osOK;
 800ae7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00f      	beq.n	800aeba <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d10a      	bne.n	800aeb6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2203      	movs	r2, #3
 800aea6:	9200      	str	r2, [sp, #0]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2100      	movs	r1, #0
 800aeac:	2001      	movs	r0, #1
 800aeae:	f000 f9d1 	bl	800b254 <xQueueGenericCreateStatic>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	e016      	b.n	800aee4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e014      	b.n	800aee4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d110      	bne.n	800aee2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800aec0:	2203      	movs	r2, #3
 800aec2:	2100      	movs	r1, #0
 800aec4:	2001      	movs	r0, #1
 800aec6:	f000 fa3d 	bl	800b344 <xQueueGenericCreate>
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <osSemaphoreCreate+0x56>
 800aed2:	2300      	movs	r3, #0
 800aed4:	2200      	movs	r2, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fa8d 	bl	800b3f8 <xQueueGenericSend>
      return sema;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	e000      	b.n	800aee4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800aee2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aef6:	2300      	movs	r3, #0
 800aef8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800af00:	2380      	movs	r3, #128	; 0x80
 800af02:	e03a      	b.n	800af7a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af0e:	d103      	bne.n	800af18 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800af10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	e009      	b.n	800af2c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <osSemaphoreWait+0x40>
      ticks = 1;
 800af28:	2301      	movs	r3, #1
 800af2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af2c:	f7ff ff33 	bl	800ad96 <inHandlerMode>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d017      	beq.n	800af66 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	461a      	mov	r2, r3
 800af3c:	2100      	movs	r1, #0
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fcf2 	bl	800b928 <xQueueReceiveFromISR>
 800af44:	4603      	mov	r3, r0
 800af46:	2b01      	cmp	r3, #1
 800af48:	d001      	beq.n	800af4e <osSemaphoreWait+0x62>
      return osErrorOS;
 800af4a:	23ff      	movs	r3, #255	; 0xff
 800af4c:	e015      	b.n	800af7a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d011      	beq.n	800af78 <osSemaphoreWait+0x8c>
 800af54:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <osSemaphoreWait+0x98>)
 800af56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5a:	601a      	str	r2, [r3, #0]
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	e008      	b.n	800af78 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fbd1 	bl	800b710 <xQueueSemaphoreTake>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b01      	cmp	r3, #1
 800af72:	d001      	beq.n	800af78 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800af74:	23ff      	movs	r3, #255	; 0xff
 800af76:	e000      	b.n	800af7a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800af98:	f7ff fefd 	bl	800ad96 <inHandlerMode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d016      	beq.n	800afd0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb23 	bl	800b5f4 <xQueueGiveFromISR>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d001      	beq.n	800afb8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800afb4:	23ff      	movs	r3, #255	; 0xff
 800afb6:	e017      	b.n	800afe8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d013      	beq.n	800afe6 <osSemaphoreRelease+0x5e>
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <osSemaphoreRelease+0x68>)
 800afc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	e00a      	b.n	800afe6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800afd0:	2300      	movs	r3, #0
 800afd2:	2200      	movs	r2, #0
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa0e 	bl	800b3f8 <xQueueGenericSend>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d001      	beq.n	800afe6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800afe2:	23ff      	movs	r3, #255	; 0xff
 800afe4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800afe6:	68fb      	ldr	r3, [r7, #12]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800affc:	f7ff fecb 	bl	800ad96 <inHandlerMode>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b006:	2382      	movs	r3, #130	; 0x82
 800b008:	e003      	b.n	800b012 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fd0c 	bl	800ba28 <vQueueDelete>

  return osOK; 
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f103 0208 	add.w	r2, r3, #8
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b032:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f103 0208 	add.w	r2, r3, #8
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f103 0208 	add.w	r2, r3, #8
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b04e:	bf00      	nop
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	689a      	ldr	r2, [r3, #8]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	601a      	str	r2, [r3, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0d2:	d103      	bne.n	800b0dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	e00c      	b.n	800b0f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3308      	adds	r3, #8
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e002      	b.n	800b0ea <vListInsert+0x2e>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	60fb      	str	r3, [r7, #12]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d2f6      	bcs.n	800b0e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b12e:	b480      	push	{r7}
 800b130:	b085      	sub	sp, #20
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	6892      	ldr	r2, [r2, #8]
 800b144:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6852      	ldr	r2, [r2, #4]
 800b14e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	429a      	cmp	r2, r3
 800b158:	d103      	bne.n	800b162 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	689a      	ldr	r2, [r3, #8]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
	...

0800b184 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b1aa:	bf00      	nop
 800b1ac:	e7fe      	b.n	800b1ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b1ae:	f001 fef1 	bl	800cf94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1be:	fb01 f303 	mul.w	r3, r1, r3
 800b1c2:	441a      	add	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	68f9      	ldr	r1, [r7, #12]
 800b1e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b1e4:	fb01 f303 	mul.w	r3, r1, r3
 800b1e8:	441a      	add	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	22ff      	movs	r2, #255	; 0xff
 800b1f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	22ff      	movs	r2, #255	; 0xff
 800b1fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d114      	bne.n	800b22e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01a      	beq.n	800b242 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	3310      	adds	r3, #16
 800b210:	4618      	mov	r0, r3
 800b212:	f001 f9af 	bl	800c574 <xTaskRemoveFromEventList>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d012      	beq.n	800b242 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b21c:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <xQueueGenericReset+0xcc>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	e009      	b.n	800b242 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3310      	adds	r3, #16
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fef1 	bl	800b01a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3324      	adds	r3, #36	; 0x24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff feec 	bl	800b01a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b242:	f001 fed7 	bl	800cff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b246:	2301      	movs	r3, #1
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b08e      	sub	sp, #56	; 0x38
 800b258:	af02      	add	r7, sp, #8
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10a      	bne.n	800b29a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b296:	bf00      	nop
 800b298:	e7fe      	b.n	800b298 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <xQueueGenericCreateStatic+0x52>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <xQueueGenericCreateStatic+0x56>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e000      	b.n	800b2ac <xQueueGenericCreateStatic+0x58>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	623b      	str	r3, [r7, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <xQueueGenericCreateStatic+0x7e>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <xQueueGenericCreateStatic+0x82>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <xQueueGenericCreateStatic+0x84>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	61fb      	str	r3, [r7, #28]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2f2:	2348      	movs	r3, #72	; 0x48
 800b2f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b48      	cmp	r3, #72	; 0x48
 800b2fa:	d00a      	beq.n	800b312 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b300:	f383 8811 	msr	BASEPRI, r3
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	61bb      	str	r3, [r7, #24]
}
 800b30e:	bf00      	nop
 800b310:	e7fe      	b.n	800b310 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b312:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00d      	beq.n	800b33a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2201      	movs	r2, #1
 800b322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b326:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	4613      	mov	r3, r2
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f83f 	bl	800b3b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3730      	adds	r7, #48	; 0x30
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b344:	b580      	push	{r7, lr}
 800b346:	b08a      	sub	sp, #40	; 0x28
 800b348:	af02      	add	r7, sp, #8
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	4613      	mov	r3, r2
 800b350:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
}
 800b36a:	bf00      	nop
 800b36c:	e7fe      	b.n	800b36c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	fb02 f303 	mul.w	r3, r2, r3
 800b376:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	3348      	adds	r3, #72	; 0x48
 800b37c:	4618      	mov	r0, r3
 800b37e:	f001 ff2b 	bl	800d1d8 <pvPortMalloc>
 800b382:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d011      	beq.n	800b3ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	3348      	adds	r3, #72	; 0x48
 800b392:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b39c:	79fa      	ldrb	r2, [r7, #7]
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 f805 	bl	800b3b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d103      	bne.n	800b3d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e002      	b.n	800b3da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	69b8      	ldr	r0, [r7, #24]
 800b3ea:	f7ff fecb 	bl	800b184 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
	...

0800b3f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08e      	sub	sp, #56	; 0x38
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b406:	2300      	movs	r3, #0
 800b408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10a      	bne.n	800b42a <xQueueGenericSend+0x32>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d103      	bne.n	800b438 <xQueueGenericSend+0x40>
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <xQueueGenericSend+0x44>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <xQueueGenericSend+0x46>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <xQueueGenericSend+0x60>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d103      	bne.n	800b466 <xQueueGenericSend+0x6e>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b462:	2b01      	cmp	r3, #1
 800b464:	d101      	bne.n	800b46a <xQueueGenericSend+0x72>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <xQueueGenericSend+0x74>
 800b46a:	2300      	movs	r3, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <xQueueGenericSend+0x8e>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	623b      	str	r3, [r7, #32]
}
 800b482:	bf00      	nop
 800b484:	e7fe      	b.n	800b484 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b486:	f001 fa35 	bl	800c8f4 <xTaskGetSchedulerState>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <xQueueGenericSend+0x9e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <xQueueGenericSend+0xa2>
 800b496:	2301      	movs	r3, #1
 800b498:	e000      	b.n	800b49c <xQueueGenericSend+0xa4>
 800b49a:	2300      	movs	r3, #0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	61fb      	str	r3, [r7, #28]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4b6:	f001 fd6d 	bl	800cf94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d302      	bcc.n	800b4cc <xQueueGenericSend+0xd4>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d129      	bne.n	800b520 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4d2:	f000 fae4 	bl	800ba9e <prvCopyDataToQueue>
 800b4d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d010      	beq.n	800b502 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	3324      	adds	r3, #36	; 0x24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 f845 	bl	800c574 <xTaskRemoveFromEventList>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d013      	beq.n	800b518 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4f0:	4b3f      	ldr	r3, [pc, #252]	; (800b5f0 <xQueueGenericSend+0x1f8>)
 800b4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	e00a      	b.n	800b518 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <xQueueGenericSend+0x1f8>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b518:	f001 fd6c 	bl	800cff4 <vPortExitCritical>
				return pdPASS;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e063      	b.n	800b5e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d103      	bne.n	800b52e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b526:	f001 fd65 	bl	800cff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e05c      	b.n	800b5e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 f87d 	bl	800c638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b542:	f001 fd57 	bl	800cff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b546:	f000 fe2d 	bl	800c1a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b54a:	f001 fd23 	bl	800cf94 <vPortEnterCritical>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b554:	b25b      	sxtb	r3, r3
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55a:	d103      	bne.n	800b564 <xQueueGenericSend+0x16c>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b570:	d103      	bne.n	800b57a <xQueueGenericSend+0x182>
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b57a:	f001 fd3b 	bl	800cff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57e:	1d3a      	adds	r2, r7, #4
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f001 f86c 	bl	800c664 <xTaskCheckForTimeOut>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d124      	bne.n	800b5dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b594:	f000 fb7b 	bl	800bc8e <prvIsQueueFull>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d018      	beq.n	800b5d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	3310      	adds	r3, #16
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 ffc0 	bl	800c52c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5ae:	f000 fb06 	bl	800bbbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5b2:	f000 fe05 	bl	800c1c0 <xTaskResumeAll>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f47f af7c 	bne.w	800b4b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <xQueueGenericSend+0x1f8>)
 800b5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	e772      	b.n	800b4b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5d2:	f000 faf4 	bl	800bbbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d6:	f000 fdf3 	bl	800c1c0 <xTaskResumeAll>
 800b5da:	e76c      	b.n	800b4b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5de:	f000 faee 	bl	800bbbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5e2:	f000 fded 	bl	800c1c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3738      	adds	r7, #56	; 0x38
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08e      	sub	sp, #56	; 0x38
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	623b      	str	r3, [r7, #32]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <xQueueGiveFromISR+0x48>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	61fb      	str	r3, [r7, #28]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d103      	bne.n	800b64c <xQueueGiveFromISR+0x58>
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <xQueueGiveFromISR+0x5c>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <xQueueGiveFromISR+0x5e>
 800b650:	2300      	movs	r3, #0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <xQueueGiveFromISR+0x78>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	61bb      	str	r3, [r7, #24]
}
 800b668:	bf00      	nop
 800b66a:	e7fe      	b.n	800b66a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b66c:	f001 fd74 	bl	800d158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b670:	f3ef 8211 	mrs	r2, BASEPRI
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	617a      	str	r2, [r7, #20]
 800b686:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b688:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b68a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b690:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b698:	429a      	cmp	r2, r3
 800b69a:	d22b      	bcs.n	800b6f4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6b6:	d112      	bne.n	800b6de <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d016      	beq.n	800b6ee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	3324      	adds	r3, #36	; 0x24
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f000 ff55 	bl	800c574 <xTaskRemoveFromEventList>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00e      	beq.n	800b6ee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	e007      	b.n	800b6ee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b6de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	b25a      	sxtb	r2, r3
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f2:	e001      	b.n	800b6f8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b702:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b706:	4618      	mov	r0, r3
 800b708:	3738      	adds	r7, #56	; 0x38
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b08e      	sub	sp, #56	; 0x38
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b722:	2300      	movs	r3, #0
 800b724:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	623b      	str	r3, [r7, #32]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	61fb      	str	r3, [r7, #28]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b760:	f001 f8c8 	bl	800c8f4 <xTaskGetSchedulerState>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d102      	bne.n	800b770 <xQueueSemaphoreTake+0x60>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <xQueueSemaphoreTake+0x64>
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <xQueueSemaphoreTake+0x66>
 800b774:	2300      	movs	r3, #0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	61bb      	str	r3, [r7, #24]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b790:	f001 fc00 	bl	800cf94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b798:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d024      	beq.n	800b7ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	1e5a      	subs	r2, r3, #1
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b7b0:	f001 fa48 	bl	800cc44 <pvTaskIncrementMutexHeldCount>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00f      	beq.n	800b7e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fed4 	bl	800c574 <xTaskRemoveFromEventList>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d007      	beq.n	800b7e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7d2:	4b54      	ldr	r3, [pc, #336]	; (800b924 <xQueueSemaphoreTake+0x214>)
 800b7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b7e2:	f001 fc07 	bl	800cff4 <vPortExitCritical>
				return pdPASS;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e097      	b.n	800b91a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d111      	bne.n	800b814 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00a      	beq.n	800b80c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	617b      	str	r3, [r7, #20]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b80c:	f001 fbf2 	bl	800cff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b810:	2300      	movs	r3, #0
 800b812:	e082      	b.n	800b91a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b81a:	f107 030c 	add.w	r3, r7, #12
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 ff0a 	bl	800c638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b828:	f001 fbe4 	bl	800cff4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b82c:	f000 fcba 	bl	800c1a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b830:	f001 fbb0 	bl	800cf94 <vPortEnterCritical>
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b83a:	b25b      	sxtb	r3, r3
 800b83c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b840:	d103      	bne.n	800b84a <xQueueSemaphoreTake+0x13a>
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b850:	b25b      	sxtb	r3, r3
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b856:	d103      	bne.n	800b860 <xQueueSemaphoreTake+0x150>
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b860:	f001 fbc8 	bl	800cff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b864:	463a      	mov	r2, r7
 800b866:	f107 030c 	add.w	r3, r7, #12
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fef9 	bl	800c664 <xTaskCheckForTimeOut>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d132      	bne.n	800b8de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87a:	f000 f9f2 	bl	800bc62 <prvIsQueueEmpty>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d026      	beq.n	800b8d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d109      	bne.n	800b8a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b88c:	f001 fb82 	bl	800cf94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	4618      	mov	r0, r3
 800b896:	f001 f84b 	bl	800c930 <xTaskPriorityInherit>
 800b89a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b89c:	f001 fbaa 	bl	800cff4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	3324      	adds	r3, #36	; 0x24
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 fe3f 	bl	800c52c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8b0:	f000 f985 	bl	800bbbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8b4:	f000 fc84 	bl	800c1c0 <xTaskResumeAll>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f47f af68 	bne.w	800b790 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b8c0:	4b18      	ldr	r3, [pc, #96]	; (800b924 <xQueueSemaphoreTake+0x214>)
 800b8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	e75e      	b.n	800b790 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8d4:	f000 f973 	bl	800bbbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8d8:	f000 fc72 	bl	800c1c0 <xTaskResumeAll>
 800b8dc:	e758      	b.n	800b790 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b8de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8e0:	f000 f96d 	bl	800bbbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8e4:	f000 fc6c 	bl	800c1c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8ea:	f000 f9ba 	bl	800bc62 <prvIsQueueEmpty>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f43f af4d 	beq.w	800b790 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00d      	beq.n	800b918 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b8fc:	f001 fb4a 	bl	800cf94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b902:	f000 f8b4 	bl	800ba6e <prvGetDisinheritPriorityAfterTimeout>
 800b906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b90e:	4618      	mov	r0, r3
 800b910:	f001 f90a 	bl	800cb28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b914:	f001 fb6e 	bl	800cff4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3738      	adds	r7, #56	; 0x38
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	e000ed04 	.word	0xe000ed04

0800b928 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08e      	sub	sp, #56	; 0x38
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	623b      	str	r3, [r7, #32]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <xQueueReceiveFromISR+0x3a>
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <xQueueReceiveFromISR+0x3e>
 800b962:	2301      	movs	r3, #1
 800b964:	e000      	b.n	800b968 <xQueueReceiveFromISR+0x40>
 800b966:	2300      	movs	r3, #0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	61fb      	str	r3, [r7, #28]
}
 800b97e:	bf00      	nop
 800b980:	e7fe      	b.n	800b980 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b982:	f001 fbe9 	bl	800d158 <vPortValidateInterruptPriority>
	__asm volatile
 800b986:	f3ef 8211 	mrs	r2, BASEPRI
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	61ba      	str	r2, [r7, #24]
 800b99c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b99e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d02f      	beq.n	800ba0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9bc:	f000 f8d9 	bl	800bb72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	1e5a      	subs	r2, r3, #1
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b9c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9d0:	d112      	bne.n	800b9f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d016      	beq.n	800ba08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	3310      	adds	r3, #16
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 fdc8 	bl	800c574 <xTaskRemoveFromEventList>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00e      	beq.n	800ba08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00b      	beq.n	800ba08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	e007      	b.n	800ba08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	b25a      	sxtb	r2, r3
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	e001      	b.n	800ba12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
 800ba12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f383 8811 	msr	BASEPRI, r3
}
 800ba1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3738      	adds	r7, #56	; 0x38
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <vQueueDelete+0x28>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60bb      	str	r3, [r7, #8]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f935 	bl	800bcc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d102      	bne.n	800ba66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f001 fc85 	bl	800d370 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ba66:	bf00      	nop
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d006      	beq.n	800ba8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f1c3 0307 	rsb	r3, r3, #7
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	e001      	b.n	800ba90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba90:	68fb      	ldr	r3, [r7, #12]
	}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10d      	bne.n	800bad8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d14d      	bne.n	800bb60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 ffa7 	bl	800ca1c <xTaskPriorityDisinherit>
 800bace:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	609a      	str	r2, [r3, #8]
 800bad6:	e043      	b.n	800bb60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d119      	bne.n	800bb12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6858      	ldr	r0, [r3, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae6:	461a      	mov	r2, r3
 800bae8:	68b9      	ldr	r1, [r7, #8]
 800baea:	f002 fc02 	bl	800e2f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	441a      	add	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d32b      	bcc.n	800bb60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	e026      	b.n	800bb60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68d8      	ldr	r0, [r3, #12]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	68b9      	ldr	r1, [r7, #8]
 800bb1e:	f002 fbe8 	bl	800e2f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	425b      	negs	r3, r3
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d207      	bcs.n	800bb4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	689a      	ldr	r2, [r3, #8]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	425b      	negs	r3, r3
 800bb48:	441a      	add	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d105      	bne.n	800bb60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb68:	697b      	ldr	r3, [r7, #20]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d018      	beq.n	800bbb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8c:	441a      	add	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68da      	ldr	r2, [r3, #12]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d303      	bcc.n	800bba6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68d9      	ldr	r1, [r3, #12]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbae:	461a      	mov	r2, r3
 800bbb0:	6838      	ldr	r0, [r7, #0]
 800bbb2:	f002 fb9e 	bl	800e2f2 <memcpy>
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b084      	sub	sp, #16
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbc6:	f001 f9e5 	bl	800cf94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbd2:	e011      	b.n	800bbf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d012      	beq.n	800bc02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3324      	adds	r3, #36	; 0x24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 fcc7 	bl	800c574 <xTaskRemoveFromEventList>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbec:	f000 fd9c 	bl	800c728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dce9      	bgt.n	800bbd4 <prvUnlockQueue+0x16>
 800bc00:	e000      	b.n	800bc04 <prvUnlockQueue+0x46>
					break;
 800bc02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	22ff      	movs	r2, #255	; 0xff
 800bc08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc0c:	f001 f9f2 	bl	800cff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc10:	f001 f9c0 	bl	800cf94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc1c:	e011      	b.n	800bc42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d012      	beq.n	800bc4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3310      	adds	r3, #16
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 fca2 	bl	800c574 <xTaskRemoveFromEventList>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc36:	f000 fd77 	bl	800c728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc3a:	7bbb      	ldrb	r3, [r7, #14]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dce9      	bgt.n	800bc1e <prvUnlockQueue+0x60>
 800bc4a:	e000      	b.n	800bc4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	22ff      	movs	r2, #255	; 0xff
 800bc52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc56:	f001 f9cd 	bl	800cff4 <vPortExitCritical>
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc6a:	f001 f993 	bl	800cf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d102      	bne.n	800bc7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc76:	2301      	movs	r3, #1
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	e001      	b.n	800bc80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc80:	f001 f9b8 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800bc84:	68fb      	ldr	r3, [r7, #12]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b084      	sub	sp, #16
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc96:	f001 f97d 	bl	800cf94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d102      	bne.n	800bcac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bca6:	2301      	movs	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e001      	b.n	800bcb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcb0:	f001 f9a0 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	e016      	b.n	800bcfc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bcce:	4a10      	ldr	r2, [pc, #64]	; (800bd10 <vQueueUnregisterQueue+0x50>)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d10b      	bne.n	800bcf6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bcde:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <vQueueUnregisterQueue+0x50>)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2100      	movs	r1, #0
 800bce4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bce8:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <vQueueUnregisterQueue+0x50>)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4413      	add	r3, r2
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	605a      	str	r2, [r3, #4]
				break;
 800bcf4:	e006      	b.n	800bd04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b07      	cmp	r3, #7
 800bd00:	d9e5      	bls.n	800bcce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	20001eec 	.word	0x20001eec

0800bd14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08e      	sub	sp, #56	; 0x38
 800bd18:	af04      	add	r7, sp, #16
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	623b      	str	r3, [r7, #32]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xTaskCreateStatic+0x46>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	61fb      	str	r3, [r7, #28]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd5a:	23a0      	movs	r3, #160	; 0xa0
 800bd5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2ba0      	cmp	r3, #160	; 0xa0
 800bd62:	d00a      	beq.n	800bd7a <xTaskCreateStatic+0x66>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	61bb      	str	r3, [r7, #24]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01e      	beq.n	800bdc0 <xTaskCreateStatic+0xac>
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01b      	beq.n	800bdc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	2202      	movs	r2, #2
 800bd96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9303      	str	r3, [sp, #12]
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	9302      	str	r3, [sp, #8]
 800bda2:	f107 0314 	add.w	r3, r7, #20
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	68b9      	ldr	r1, [r7, #8]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 f850 	bl	800be58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdba:	f000 f8eb 	bl	800bf94 <prvAddNewTaskToReadyList>
 800bdbe:	e001      	b.n	800bdc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bdc4:	697b      	ldr	r3, [r7, #20]
	}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3728      	adds	r7, #40	; 0x28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b08c      	sub	sp, #48	; 0x30
 800bdd2:	af04      	add	r7, sp, #16
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	603b      	str	r3, [r7, #0]
 800bdda:	4613      	mov	r3, r2
 800bddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f001 f9f8 	bl	800d1d8 <pvPortMalloc>
 800bde8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00e      	beq.n	800be0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdf0:	20a0      	movs	r0, #160	; 0xa0
 800bdf2:	f001 f9f1 	bl	800d1d8 <pvPortMalloc>
 800bdf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d003      	beq.n	800be06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	631a      	str	r2, [r3, #48]	; 0x30
 800be04:	e005      	b.n	800be12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be06:	6978      	ldr	r0, [r7, #20]
 800be08:	f001 fab2 	bl	800d370 <vPortFree>
 800be0c:	e001      	b.n	800be12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d017      	beq.n	800be48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be20:	88fa      	ldrh	r2, [r7, #6]
 800be22:	2300      	movs	r3, #0
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	9302      	str	r3, [sp, #8]
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 f80e 	bl	800be58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be3c:	69f8      	ldr	r0, [r7, #28]
 800be3e:	f000 f8a9 	bl	800bf94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be42:	2301      	movs	r3, #1
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e002      	b.n	800be4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be4e:	69bb      	ldr	r3, [r7, #24]
	}
 800be50:	4618      	mov	r0, r3
 800be52:	3720      	adds	r7, #32
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be70:	3b01      	subs	r3, #1
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	f023 0307 	bic.w	r3, r3, #7
 800be7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00a      	beq.n	800bea0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	617b      	str	r3, [r7, #20]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01f      	beq.n	800bee6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bea6:	2300      	movs	r3, #0
 800bea8:	61fb      	str	r3, [r7, #28]
 800beaa:	e012      	b.n	800bed2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	4413      	add	r3, r2
 800beb2:	7819      	ldrb	r1, [r3, #0]
 800beb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	3334      	adds	r3, #52	; 0x34
 800bebc:	460a      	mov	r2, r1
 800bebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	4413      	add	r3, r2
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d006      	beq.n	800beda <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	3301      	adds	r3, #1
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	2b0f      	cmp	r3, #15
 800bed6:	d9e9      	bls.n	800beac <prvInitialiseNewTask+0x54>
 800bed8:	e000      	b.n	800bedc <prvInitialiseNewTask+0x84>
			{
				break;
 800beda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bee4:	e003      	b.n	800beee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	2b06      	cmp	r3, #6
 800bef2:	d901      	bls.n	800bef8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bef4:	2306      	movs	r3, #6
 800bef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800befc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	2200      	movs	r2, #0
 800bf08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff f8a3 	bl	800b05a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	3318      	adds	r3, #24
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff f89e 	bl	800b05a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	f1c3 0207 	rsb	r2, r3, #7
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	2200      	movs	r2, #0
 800bf38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	334c      	adds	r3, #76	; 0x4c
 800bf48:	224c      	movs	r2, #76	; 0x4c
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f002 f8ec 	bl	800e12a <memset>
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	4a0c      	ldr	r2, [pc, #48]	; (800bf88 <prvInitialiseNewTask+0x130>)
 800bf56:	651a      	str	r2, [r3, #80]	; 0x50
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	4a0c      	ldr	r2, [pc, #48]	; (800bf8c <prvInitialiseNewTask+0x134>)
 800bf5c:	655a      	str	r2, [r3, #84]	; 0x54
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	4a0b      	ldr	r2, [pc, #44]	; (800bf90 <prvInitialiseNewTask+0x138>)
 800bf62:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	69b8      	ldr	r0, [r7, #24]
 800bf6a:	f000 fee5 	bl	800cd38 <pxPortInitialiseStack>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf80:	bf00      	nop
 800bf82:	3720      	adds	r7, #32
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	20005c80 	.word	0x20005c80
 800bf8c:	20005ce8 	.word	0x20005ce8
 800bf90:	20005d50 	.word	0x20005d50

0800bf94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf9c:	f000 fffa 	bl	800cf94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfa0:	4b2a      	ldr	r3, [pc, #168]	; (800c04c <prvAddNewTaskToReadyList+0xb8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	4a29      	ldr	r2, [pc, #164]	; (800c04c <prvAddNewTaskToReadyList+0xb8>)
 800bfa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfaa:	4b29      	ldr	r3, [pc, #164]	; (800c050 <prvAddNewTaskToReadyList+0xbc>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d109      	bne.n	800bfc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfb2:	4a27      	ldr	r2, [pc, #156]	; (800c050 <prvAddNewTaskToReadyList+0xbc>)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfb8:	4b24      	ldr	r3, [pc, #144]	; (800c04c <prvAddNewTaskToReadyList+0xb8>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d110      	bne.n	800bfe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfc0:	f000 fbd6 	bl	800c770 <prvInitialiseTaskLists>
 800bfc4:	e00d      	b.n	800bfe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfc6:	4b23      	ldr	r3, [pc, #140]	; (800c054 <prvAddNewTaskToReadyList+0xc0>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d109      	bne.n	800bfe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bfce:	4b20      	ldr	r3, [pc, #128]	; (800c050 <prvAddNewTaskToReadyList+0xbc>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d802      	bhi.n	800bfe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bfdc:	4a1c      	ldr	r2, [pc, #112]	; (800c050 <prvAddNewTaskToReadyList+0xbc>)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bfe2:	4b1d      	ldr	r3, [pc, #116]	; (800c058 <prvAddNewTaskToReadyList+0xc4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	4a1b      	ldr	r2, [pc, #108]	; (800c058 <prvAddNewTaskToReadyList+0xc4>)
 800bfea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff0:	2201      	movs	r2, #1
 800bff2:	409a      	lsls	r2, r3
 800bff4:	4b19      	ldr	r3, [pc, #100]	; (800c05c <prvAddNewTaskToReadyList+0xc8>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	4a18      	ldr	r2, [pc, #96]	; (800c05c <prvAddNewTaskToReadyList+0xc8>)
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c002:	4613      	mov	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4a15      	ldr	r2, [pc, #84]	; (800c060 <prvAddNewTaskToReadyList+0xcc>)
 800c00c:	441a      	add	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3304      	adds	r3, #4
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f7ff f82d 	bl	800b074 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c01a:	f000 ffeb 	bl	800cff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <prvAddNewTaskToReadyList+0xc0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c026:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <prvAddNewTaskToReadyList+0xbc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	429a      	cmp	r2, r3
 800c032:	d207      	bcs.n	800c044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c034:	4b0b      	ldr	r3, [pc, #44]	; (800c064 <prvAddNewTaskToReadyList+0xd0>)
 800c036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	2000202c 	.word	0x2000202c
 800c050:	20001f2c 	.word	0x20001f2c
 800c054:	20002038 	.word	0x20002038
 800c058:	20002048 	.word	0x20002048
 800c05c:	20002034 	.word	0x20002034
 800c060:	20001f30 	.word	0x20001f30
 800c064:	e000ed04 	.word	0xe000ed04

0800c068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d017      	beq.n	800c0aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c07a:	4b13      	ldr	r3, [pc, #76]	; (800c0c8 <vTaskDelay+0x60>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00a      	beq.n	800c098 <vTaskDelay+0x30>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c086:	f383 8811 	msr	BASEPRI, r3
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	f3bf 8f4f 	dsb	sy
 800c092:	60bb      	str	r3, [r7, #8]
}
 800c094:	bf00      	nop
 800c096:	e7fe      	b.n	800c096 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c098:	f000 f884 	bl	800c1a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c09c:	2100      	movs	r1, #0
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fde4 	bl	800cc6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0a4:	f000 f88c 	bl	800c1c0 <xTaskResumeAll>
 800c0a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d107      	bne.n	800c0c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <vTaskDelay+0x64>)
 800c0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0c0:	bf00      	nop
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	20002054 	.word	0x20002054
 800c0cc:	e000ed04 	.word	0xe000ed04

0800c0d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b08a      	sub	sp, #40	; 0x28
 800c0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0de:	463a      	mov	r2, r7
 800c0e0:	1d39      	adds	r1, r7, #4
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f5 fc9c 	bl	8001a24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	9202      	str	r2, [sp, #8]
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	460a      	mov	r2, r1
 800c0fe:	4921      	ldr	r1, [pc, #132]	; (800c184 <vTaskStartScheduler+0xb4>)
 800c100:	4821      	ldr	r0, [pc, #132]	; (800c188 <vTaskStartScheduler+0xb8>)
 800c102:	f7ff fe07 	bl	800bd14 <xTaskCreateStatic>
 800c106:	4603      	mov	r3, r0
 800c108:	4a20      	ldr	r2, [pc, #128]	; (800c18c <vTaskStartScheduler+0xbc>)
 800c10a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c10c:	4b1f      	ldr	r3, [pc, #124]	; (800c18c <vTaskStartScheduler+0xbc>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c114:	2301      	movs	r3, #1
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e001      	b.n	800c11e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d11b      	bne.n	800c15c <vTaskStartScheduler+0x8c>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	613b      	str	r3, [r7, #16]
}
 800c136:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c138:	4b15      	ldr	r3, [pc, #84]	; (800c190 <vTaskStartScheduler+0xc0>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	334c      	adds	r3, #76	; 0x4c
 800c13e:	4a15      	ldr	r2, [pc, #84]	; (800c194 <vTaskStartScheduler+0xc4>)
 800c140:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <vTaskStartScheduler+0xc8>)
 800c144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c148:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c14a:	4b14      	ldr	r3, [pc, #80]	; (800c19c <vTaskStartScheduler+0xcc>)
 800c14c:	2201      	movs	r2, #1
 800c14e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c150:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <vTaskStartScheduler+0xd0>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c156:	f000 fe7b 	bl	800ce50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c15a:	e00e      	b.n	800c17a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c162:	d10a      	bne.n	800c17a <vTaskStartScheduler+0xaa>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	60fb      	str	r3, [r7, #12]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <vTaskStartScheduler+0xa8>
}
 800c17a:	bf00      	nop
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	080118e0 	.word	0x080118e0
 800c188:	0800c741 	.word	0x0800c741
 800c18c:	20002050 	.word	0x20002050
 800c190:	20001f2c 	.word	0x20001f2c
 800c194:	20000084 	.word	0x20000084
 800c198:	2000204c 	.word	0x2000204c
 800c19c:	20002038 	.word	0x20002038
 800c1a0:	20002030 	.word	0x20002030

0800c1a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <vTaskSuspendAll+0x18>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	4a03      	ldr	r2, [pc, #12]	; (800c1bc <vTaskSuspendAll+0x18>)
 800c1b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1b2:	bf00      	nop
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	20002054 	.word	0x20002054

0800c1c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1ce:	4b41      	ldr	r3, [pc, #260]	; (800c2d4 <xTaskResumeAll+0x114>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10a      	bne.n	800c1ec <xTaskResumeAll+0x2c>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	603b      	str	r3, [r7, #0]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c1ec:	f000 fed2 	bl	800cf94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c1f0:	4b38      	ldr	r3, [pc, #224]	; (800c2d4 <xTaskResumeAll+0x114>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	4a37      	ldr	r2, [pc, #220]	; (800c2d4 <xTaskResumeAll+0x114>)
 800c1f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1fa:	4b36      	ldr	r3, [pc, #216]	; (800c2d4 <xTaskResumeAll+0x114>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d161      	bne.n	800c2c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c202:	4b35      	ldr	r3, [pc, #212]	; (800c2d8 <xTaskResumeAll+0x118>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d05d      	beq.n	800c2c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c20a:	e02e      	b.n	800c26a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20c:	4b33      	ldr	r3, [pc, #204]	; (800c2dc <xTaskResumeAll+0x11c>)
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3318      	adds	r3, #24
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fe ff88 	bl	800b12e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3304      	adds	r3, #4
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe ff83 	bl	800b12e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	2201      	movs	r2, #1
 800c22e:	409a      	lsls	r2, r3
 800c230:	4b2b      	ldr	r3, [pc, #172]	; (800c2e0 <xTaskResumeAll+0x120>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4313      	orrs	r3, r2
 800c236:	4a2a      	ldr	r2, [pc, #168]	; (800c2e0 <xTaskResumeAll+0x120>)
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4a27      	ldr	r2, [pc, #156]	; (800c2e4 <xTaskResumeAll+0x124>)
 800c248:	441a      	add	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4619      	mov	r1, r3
 800c250:	4610      	mov	r0, r2
 800c252:	f7fe ff0f 	bl	800b074 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25a:	4b23      	ldr	r3, [pc, #140]	; (800c2e8 <xTaskResumeAll+0x128>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	429a      	cmp	r2, r3
 800c262:	d302      	bcc.n	800c26a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c264:	4b21      	ldr	r3, [pc, #132]	; (800c2ec <xTaskResumeAll+0x12c>)
 800c266:	2201      	movs	r2, #1
 800c268:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c26a:	4b1c      	ldr	r3, [pc, #112]	; (800c2dc <xTaskResumeAll+0x11c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1cc      	bne.n	800c20c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c278:	f000 fb1c 	bl	800c8b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c27c:	4b1c      	ldr	r3, [pc, #112]	; (800c2f0 <xTaskResumeAll+0x130>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d010      	beq.n	800c2aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c288:	f000 f836 	bl	800c2f8 <xTaskIncrementTick>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c292:	4b16      	ldr	r3, [pc, #88]	; (800c2ec <xTaskResumeAll+0x12c>)
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1f1      	bne.n	800c288 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c2a4:	4b12      	ldr	r3, [pc, #72]	; (800c2f0 <xTaskResumeAll+0x130>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2aa:	4b10      	ldr	r3, [pc, #64]	; (800c2ec <xTaskResumeAll+0x12c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <xTaskResumeAll+0x134>)
 800c2b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2c6:	f000 fe95 	bl	800cff4 <vPortExitCritical>

	return xAlreadyYielded;
 800c2ca:	68bb      	ldr	r3, [r7, #8]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20002054 	.word	0x20002054
 800c2d8:	2000202c 	.word	0x2000202c
 800c2dc:	20001fec 	.word	0x20001fec
 800c2e0:	20002034 	.word	0x20002034
 800c2e4:	20001f30 	.word	0x20001f30
 800c2e8:	20001f2c 	.word	0x20001f2c
 800c2ec:	20002040 	.word	0x20002040
 800c2f0:	2000203c 	.word	0x2000203c
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c302:	4b4e      	ldr	r3, [pc, #312]	; (800c43c <xTaskIncrementTick+0x144>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 808e 	bne.w	800c428 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c30c:	4b4c      	ldr	r3, [pc, #304]	; (800c440 <xTaskIncrementTick+0x148>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c314:	4a4a      	ldr	r2, [pc, #296]	; (800c440 <xTaskIncrementTick+0x148>)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d120      	bne.n	800c362 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c320:	4b48      	ldr	r3, [pc, #288]	; (800c444 <xTaskIncrementTick+0x14c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <xTaskIncrementTick+0x48>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	603b      	str	r3, [r7, #0]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <xTaskIncrementTick+0x46>
 800c340:	4b40      	ldr	r3, [pc, #256]	; (800c444 <xTaskIncrementTick+0x14c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	4b40      	ldr	r3, [pc, #256]	; (800c448 <xTaskIncrementTick+0x150>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a3e      	ldr	r2, [pc, #248]	; (800c444 <xTaskIncrementTick+0x14c>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	4a3e      	ldr	r2, [pc, #248]	; (800c448 <xTaskIncrementTick+0x150>)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	4b3d      	ldr	r3, [pc, #244]	; (800c44c <xTaskIncrementTick+0x154>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3301      	adds	r3, #1
 800c35a:	4a3c      	ldr	r2, [pc, #240]	; (800c44c <xTaskIncrementTick+0x154>)
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	f000 faa9 	bl	800c8b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c362:	4b3b      	ldr	r3, [pc, #236]	; (800c450 <xTaskIncrementTick+0x158>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d348      	bcc.n	800c3fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c36c:	4b35      	ldr	r3, [pc, #212]	; (800c444 <xTaskIncrementTick+0x14c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d104      	bne.n	800c380 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c376:	4b36      	ldr	r3, [pc, #216]	; (800c450 <xTaskIncrementTick+0x158>)
 800c378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c37c:	601a      	str	r2, [r3, #0]
					break;
 800c37e:	e03e      	b.n	800c3fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c380:	4b30      	ldr	r3, [pc, #192]	; (800c444 <xTaskIncrementTick+0x14c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d203      	bcs.n	800c3a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c398:	4a2d      	ldr	r2, [pc, #180]	; (800c450 <xTaskIncrementTick+0x158>)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c39e:	e02e      	b.n	800c3fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fec2 	bl	800b12e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d004      	beq.n	800c3bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	3318      	adds	r3, #24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe feb9 	bl	800b12e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	409a      	lsls	r2, r3
 800c3c4:	4b23      	ldr	r3, [pc, #140]	; (800c454 <xTaskIncrementTick+0x15c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	4a22      	ldr	r2, [pc, #136]	; (800c454 <xTaskIncrementTick+0x15c>)
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4a1f      	ldr	r2, [pc, #124]	; (800c458 <xTaskIncrementTick+0x160>)
 800c3dc:	441a      	add	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fe fe45 	bl	800b074 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ee:	4b1b      	ldr	r3, [pc, #108]	; (800c45c <xTaskIncrementTick+0x164>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d3b9      	bcc.n	800c36c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3fc:	e7b6      	b.n	800c36c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c3fe:	4b17      	ldr	r3, [pc, #92]	; (800c45c <xTaskIncrementTick+0x164>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	4914      	ldr	r1, [pc, #80]	; (800c458 <xTaskIncrementTick+0x160>)
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	440b      	add	r3, r1
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d901      	bls.n	800c41a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c416:	2301      	movs	r3, #1
 800c418:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c41a:	4b11      	ldr	r3, [pc, #68]	; (800c460 <xTaskIncrementTick+0x168>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d007      	beq.n	800c432 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c422:	2301      	movs	r3, #1
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e004      	b.n	800c432 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c428:	4b0e      	ldr	r3, [pc, #56]	; (800c464 <xTaskIncrementTick+0x16c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3301      	adds	r3, #1
 800c42e:	4a0d      	ldr	r2, [pc, #52]	; (800c464 <xTaskIncrementTick+0x16c>)
 800c430:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c432:	697b      	ldr	r3, [r7, #20]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20002054 	.word	0x20002054
 800c440:	20002030 	.word	0x20002030
 800c444:	20001fe4 	.word	0x20001fe4
 800c448:	20001fe8 	.word	0x20001fe8
 800c44c:	20002044 	.word	0x20002044
 800c450:	2000204c 	.word	0x2000204c
 800c454:	20002034 	.word	0x20002034
 800c458:	20001f30 	.word	0x20001f30
 800c45c:	20001f2c 	.word	0x20001f2c
 800c460:	20002040 	.word	0x20002040
 800c464:	2000203c 	.word	0x2000203c

0800c468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c468:	b480      	push	{r7}
 800c46a:	b087      	sub	sp, #28
 800c46c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c46e:	4b29      	ldr	r3, [pc, #164]	; (800c514 <vTaskSwitchContext+0xac>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c476:	4b28      	ldr	r3, [pc, #160]	; (800c518 <vTaskSwitchContext+0xb0>)
 800c478:	2201      	movs	r2, #1
 800c47a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c47c:	e044      	b.n	800c508 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c47e:	4b26      	ldr	r3, [pc, #152]	; (800c518 <vTaskSwitchContext+0xb0>)
 800c480:	2200      	movs	r2, #0
 800c482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c484:	4b25      	ldr	r3, [pc, #148]	; (800c51c <vTaskSwitchContext+0xb4>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	fab3 f383 	clz	r3, r3
 800c490:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	f1c3 031f 	rsb	r3, r3, #31
 800c498:	617b      	str	r3, [r7, #20]
 800c49a:	4921      	ldr	r1, [pc, #132]	; (800c520 <vTaskSwitchContext+0xb8>)
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	607b      	str	r3, [r7, #4]
}
 800c4c0:	bf00      	nop
 800c4c2:	e7fe      	b.n	800c4c2 <vTaskSwitchContext+0x5a>
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4a14      	ldr	r2, [pc, #80]	; (800c520 <vTaskSwitchContext+0xb8>)
 800c4d0:	4413      	add	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	605a      	str	r2, [r3, #4]
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d104      	bne.n	800c4f4 <vTaskSwitchContext+0x8c>
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	605a      	str	r2, [r3, #4]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	4a0a      	ldr	r2, [pc, #40]	; (800c524 <vTaskSwitchContext+0xbc>)
 800c4fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4fe:	4b09      	ldr	r3, [pc, #36]	; (800c524 <vTaskSwitchContext+0xbc>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	334c      	adds	r3, #76	; 0x4c
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <vTaskSwitchContext+0xc0>)
 800c506:	6013      	str	r3, [r2, #0]
}
 800c508:	bf00      	nop
 800c50a:	371c      	adds	r7, #28
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20002054 	.word	0x20002054
 800c518:	20002040 	.word	0x20002040
 800c51c:	20002034 	.word	0x20002034
 800c520:	20001f30 	.word	0x20001f30
 800c524:	20001f2c 	.word	0x20001f2c
 800c528:	20000084 	.word	0x20000084

0800c52c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	60fb      	str	r3, [r7, #12]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c552:	4b07      	ldr	r3, [pc, #28]	; (800c570 <vTaskPlaceOnEventList+0x44>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3318      	adds	r3, #24
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7fe fdae 	bl	800b0bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c560:	2101      	movs	r1, #1
 800c562:	6838      	ldr	r0, [r7, #0]
 800c564:	f000 fb82 	bl	800cc6c <prvAddCurrentTaskToDelayedList>
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20001f2c 	.word	0x20001f2c

0800c574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10a      	bne.n	800c5a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	60fb      	str	r3, [r7, #12]
}
 800c59c:	bf00      	nop
 800c59e:	e7fe      	b.n	800c59e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	3318      	adds	r3, #24
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe fdc2 	bl	800b12e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5aa:	4b1d      	ldr	r3, [pc, #116]	; (800c620 <xTaskRemoveFromEventList+0xac>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d11c      	bne.n	800c5ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fdb9 	bl	800b12e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	409a      	lsls	r2, r3
 800c5c4:	4b17      	ldr	r3, [pc, #92]	; (800c624 <xTaskRemoveFromEventList+0xb0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	4a16      	ldr	r2, [pc, #88]	; (800c624 <xTaskRemoveFromEventList+0xb0>)
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4a13      	ldr	r2, [pc, #76]	; (800c628 <xTaskRemoveFromEventList+0xb4>)
 800c5dc:	441a      	add	r2, r3
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7fe fd45 	bl	800b074 <vListInsertEnd>
 800c5ea:	e005      	b.n	800c5f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	3318      	adds	r3, #24
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	480e      	ldr	r0, [pc, #56]	; (800c62c <xTaskRemoveFromEventList+0xb8>)
 800c5f4:	f7fe fd3e 	bl	800b074 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fc:	4b0c      	ldr	r3, [pc, #48]	; (800c630 <xTaskRemoveFromEventList+0xbc>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	429a      	cmp	r2, r3
 800c604:	d905      	bls.n	800c612 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c606:	2301      	movs	r3, #1
 800c608:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c60a:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <xTaskRemoveFromEventList+0xc0>)
 800c60c:	2201      	movs	r2, #1
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e001      	b.n	800c616 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c612:	2300      	movs	r3, #0
 800c614:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c616:	697b      	ldr	r3, [r7, #20]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	20002054 	.word	0x20002054
 800c624:	20002034 	.word	0x20002034
 800c628:	20001f30 	.word	0x20001f30
 800c62c:	20001fec 	.word	0x20001fec
 800c630:	20001f2c 	.word	0x20001f2c
 800c634:	20002040 	.word	0x20002040

0800c638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c640:	4b06      	ldr	r3, [pc, #24]	; (800c65c <vTaskInternalSetTimeOutState+0x24>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c648:	4b05      	ldr	r3, [pc, #20]	; (800c660 <vTaskInternalSetTimeOutState+0x28>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	605a      	str	r2, [r3, #4]
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	20002044 	.word	0x20002044
 800c660:	20002030 	.word	0x20002030

0800c664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10a      	bne.n	800c68a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	613b      	str	r3, [r7, #16]
}
 800c686:	bf00      	nop
 800c688:	e7fe      	b.n	800c688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10a      	bne.n	800c6a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60fb      	str	r3, [r7, #12]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c6a6:	f000 fc75 	bl	800cf94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c6aa:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <xTaskCheckForTimeOut+0xbc>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6c2:	d102      	bne.n	800c6ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61fb      	str	r3, [r7, #28]
 800c6c8:	e023      	b.n	800c712 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	4b15      	ldr	r3, [pc, #84]	; (800c724 <xTaskCheckForTimeOut+0xc0>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d007      	beq.n	800c6e6 <xTaskCheckForTimeOut+0x82>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d302      	bcc.n	800c6e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	61fb      	str	r3, [r7, #28]
 800c6e4:	e015      	b.n	800c712 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d20b      	bcs.n	800c708 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff ff9b 	bl	800c638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c702:	2300      	movs	r3, #0
 800c704:	61fb      	str	r3, [r7, #28]
 800c706:	e004      	b.n	800c712 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c70e:	2301      	movs	r3, #1
 800c710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c712:	f000 fc6f 	bl	800cff4 <vPortExitCritical>

	return xReturn;
 800c716:	69fb      	ldr	r3, [r7, #28]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20002030 	.word	0x20002030
 800c724:	20002044 	.word	0x20002044

0800c728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c728:	b480      	push	{r7}
 800c72a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c72c:	4b03      	ldr	r3, [pc, #12]	; (800c73c <vTaskMissedYield+0x14>)
 800c72e:	2201      	movs	r2, #1
 800c730:	601a      	str	r2, [r3, #0]
}
 800c732:	bf00      	nop
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20002040 	.word	0x20002040

0800c740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c748:	f000 f852 	bl	800c7f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <prvIdleTask+0x28>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d9f9      	bls.n	800c748 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <prvIdleTask+0x2c>)
 800c756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c764:	e7f0      	b.n	800c748 <prvIdleTask+0x8>
 800c766:	bf00      	nop
 800c768:	20001f30 	.word	0x20001f30
 800c76c:	e000ed04 	.word	0xe000ed04

0800c770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c776:	2300      	movs	r3, #0
 800c778:	607b      	str	r3, [r7, #4]
 800c77a:	e00c      	b.n	800c796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4613      	mov	r3, r2
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4a12      	ldr	r2, [pc, #72]	; (800c7d0 <prvInitialiseTaskLists+0x60>)
 800c788:	4413      	add	r3, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe fc45 	bl	800b01a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3301      	adds	r3, #1
 800c794:	607b      	str	r3, [r7, #4]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b06      	cmp	r3, #6
 800c79a:	d9ef      	bls.n	800c77c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c79c:	480d      	ldr	r0, [pc, #52]	; (800c7d4 <prvInitialiseTaskLists+0x64>)
 800c79e:	f7fe fc3c 	bl	800b01a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c7a2:	480d      	ldr	r0, [pc, #52]	; (800c7d8 <prvInitialiseTaskLists+0x68>)
 800c7a4:	f7fe fc39 	bl	800b01a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c7a8:	480c      	ldr	r0, [pc, #48]	; (800c7dc <prvInitialiseTaskLists+0x6c>)
 800c7aa:	f7fe fc36 	bl	800b01a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c7ae:	480c      	ldr	r0, [pc, #48]	; (800c7e0 <prvInitialiseTaskLists+0x70>)
 800c7b0:	f7fe fc33 	bl	800b01a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c7b4:	480b      	ldr	r0, [pc, #44]	; (800c7e4 <prvInitialiseTaskLists+0x74>)
 800c7b6:	f7fe fc30 	bl	800b01a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c7ba:	4b0b      	ldr	r3, [pc, #44]	; (800c7e8 <prvInitialiseTaskLists+0x78>)
 800c7bc:	4a05      	ldr	r2, [pc, #20]	; (800c7d4 <prvInitialiseTaskLists+0x64>)
 800c7be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c7c0:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <prvInitialiseTaskLists+0x7c>)
 800c7c2:	4a05      	ldr	r2, [pc, #20]	; (800c7d8 <prvInitialiseTaskLists+0x68>)
 800c7c4:	601a      	str	r2, [r3, #0]
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20001f30 	.word	0x20001f30
 800c7d4:	20001fbc 	.word	0x20001fbc
 800c7d8:	20001fd0 	.word	0x20001fd0
 800c7dc:	20001fec 	.word	0x20001fec
 800c7e0:	20002000 	.word	0x20002000
 800c7e4:	20002018 	.word	0x20002018
 800c7e8:	20001fe4 	.word	0x20001fe4
 800c7ec:	20001fe8 	.word	0x20001fe8

0800c7f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7f6:	e019      	b.n	800c82c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c7f8:	f000 fbcc 	bl	800cf94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7fc:	4b10      	ldr	r3, [pc, #64]	; (800c840 <prvCheckTasksWaitingTermination+0x50>)
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fe fc90 	bl	800b12e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c80e:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <prvCheckTasksWaitingTermination+0x54>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3b01      	subs	r3, #1
 800c814:	4a0b      	ldr	r2, [pc, #44]	; (800c844 <prvCheckTasksWaitingTermination+0x54>)
 800c816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c818:	4b0b      	ldr	r3, [pc, #44]	; (800c848 <prvCheckTasksWaitingTermination+0x58>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	4a0a      	ldr	r2, [pc, #40]	; (800c848 <prvCheckTasksWaitingTermination+0x58>)
 800c820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c822:	f000 fbe7 	bl	800cff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f810 	bl	800c84c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c82c:	4b06      	ldr	r3, [pc, #24]	; (800c848 <prvCheckTasksWaitingTermination+0x58>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1e1      	bne.n	800c7f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20002000 	.word	0x20002000
 800c844:	2000202c 	.word	0x2000202c
 800c848:	20002014 	.word	0x20002014

0800c84c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	334c      	adds	r3, #76	; 0x4c
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 fc91 	bl	800e180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c864:	2b00      	cmp	r3, #0
 800c866:	d108      	bne.n	800c87a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 fd7f 	bl	800d370 <vPortFree>
				vPortFree( pxTCB );
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fd7c 	bl	800d370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c878:	e018      	b.n	800c8ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c880:	2b01      	cmp	r3, #1
 800c882:	d103      	bne.n	800c88c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fd73 	bl	800d370 <vPortFree>
	}
 800c88a:	e00f      	b.n	800c8ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c892:	2b02      	cmp	r3, #2
 800c894:	d00a      	beq.n	800c8ac <prvDeleteTCB+0x60>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	60fb      	str	r3, [r7, #12]
}
 800c8a8:	bf00      	nop
 800c8aa:	e7fe      	b.n	800c8aa <prvDeleteTCB+0x5e>
	}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8ba:	4b0c      	ldr	r3, [pc, #48]	; (800c8ec <prvResetNextTaskUnblockTime+0x38>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d104      	bne.n	800c8ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c8c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c8cc:	e008      	b.n	800c8e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8ce:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <prvResetNextTaskUnblockTime+0x38>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	4a04      	ldr	r2, [pc, #16]	; (800c8f0 <prvResetNextTaskUnblockTime+0x3c>)
 800c8de:	6013      	str	r3, [r2, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	20001fe4 	.word	0x20001fe4
 800c8f0:	2000204c 	.word	0x2000204c

0800c8f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c8fa:	4b0b      	ldr	r3, [pc, #44]	; (800c928 <xTaskGetSchedulerState+0x34>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c902:	2301      	movs	r3, #1
 800c904:	607b      	str	r3, [r7, #4]
 800c906:	e008      	b.n	800c91a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c908:	4b08      	ldr	r3, [pc, #32]	; (800c92c <xTaskGetSchedulerState+0x38>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d102      	bne.n	800c916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c910:	2302      	movs	r3, #2
 800c912:	607b      	str	r3, [r7, #4]
 800c914:	e001      	b.n	800c91a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c916:	2300      	movs	r3, #0
 800c918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c91a:	687b      	ldr	r3, [r7, #4]
	}
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr
 800c928:	20002038 	.word	0x20002038
 800c92c:	20002054 	.word	0x20002054

0800c930 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d05e      	beq.n	800ca04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94a:	4b31      	ldr	r3, [pc, #196]	; (800ca10 <xTaskPriorityInherit+0xe0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	429a      	cmp	r2, r3
 800c952:	d24e      	bcs.n	800c9f2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	db06      	blt.n	800c96a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c95c:	4b2c      	ldr	r3, [pc, #176]	; (800ca10 <xTaskPriorityInherit+0xe0>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c962:	f1c3 0207 	rsb	r2, r3, #7
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	6959      	ldr	r1, [r3, #20]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4a26      	ldr	r2, [pc, #152]	; (800ca14 <xTaskPriorityInherit+0xe4>)
 800c97c:	4413      	add	r3, r2
 800c97e:	4299      	cmp	r1, r3
 800c980:	d12f      	bne.n	800c9e2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	3304      	adds	r3, #4
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe fbd1 	bl	800b12e <uxListRemove>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d10a      	bne.n	800c9a8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c996:	2201      	movs	r2, #1
 800c998:	fa02 f303 	lsl.w	r3, r2, r3
 800c99c:	43da      	mvns	r2, r3
 800c99e:	4b1e      	ldr	r3, [pc, #120]	; (800ca18 <xTaskPriorityInherit+0xe8>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	4a1c      	ldr	r2, [pc, #112]	; (800ca18 <xTaskPriorityInherit+0xe8>)
 800c9a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c9a8:	4b19      	ldr	r3, [pc, #100]	; (800ca10 <xTaskPriorityInherit+0xe0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	409a      	lsls	r2, r3
 800c9ba:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <xTaskPriorityInherit+0xe8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	4a15      	ldr	r2, [pc, #84]	; (800ca18 <xTaskPriorityInherit+0xe8>)
 800c9c2:	6013      	str	r3, [r2, #0]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4a10      	ldr	r2, [pc, #64]	; (800ca14 <xTaskPriorityInherit+0xe4>)
 800c9d2:	441a      	add	r2, r3
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7fe fb4a 	bl	800b074 <vListInsertEnd>
 800c9e0:	e004      	b.n	800c9ec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <xTaskPriorityInherit+0xe0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	60fb      	str	r3, [r7, #12]
 800c9f0:	e008      	b.n	800ca04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9f6:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <xTaskPriorityInherit+0xe0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d201      	bcs.n	800ca04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca04:	68fb      	ldr	r3, [r7, #12]
	}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20001f2c 	.word	0x20001f2c
 800ca14:	20001f30 	.word	0x20001f30
 800ca18:	20002034 	.word	0x20002034

0800ca1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d06e      	beq.n	800cb10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca32:	4b3a      	ldr	r3, [pc, #232]	; (800cb1c <xTaskPriorityDisinherit+0x100>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d00a      	beq.n	800ca52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	60fb      	str	r3, [r7, #12]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10a      	bne.n	800ca70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	60bb      	str	r3, [r7, #8]
}
 800ca6c:	bf00      	nop
 800ca6e:	e7fe      	b.n	800ca6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca74:	1e5a      	subs	r2, r3, #1
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d044      	beq.n	800cb10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d140      	bne.n	800cb10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	3304      	adds	r3, #4
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fb4b 	bl	800b12e <uxListRemove>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d115      	bne.n	800caca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa2:	491f      	ldr	r1, [pc, #124]	; (800cb20 <xTaskPriorityDisinherit+0x104>)
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	440b      	add	r3, r1
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10a      	bne.n	800caca <xTaskPriorityDisinherit+0xae>
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	2201      	movs	r2, #1
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	43da      	mvns	r2, r3
 800cac0:	4b18      	ldr	r3, [pc, #96]	; (800cb24 <xTaskPriorityDisinherit+0x108>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4013      	ands	r3, r2
 800cac6:	4a17      	ldr	r2, [pc, #92]	; (800cb24 <xTaskPriorityDisinherit+0x108>)
 800cac8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad6:	f1c3 0207 	rsb	r2, r3, #7
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae2:	2201      	movs	r2, #1
 800cae4:	409a      	lsls	r2, r3
 800cae6:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <xTaskPriorityDisinherit+0x108>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4313      	orrs	r3, r2
 800caec:	4a0d      	ldr	r2, [pc, #52]	; (800cb24 <xTaskPriorityDisinherit+0x108>)
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf4:	4613      	mov	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4a08      	ldr	r2, [pc, #32]	; (800cb20 <xTaskPriorityDisinherit+0x104>)
 800cafe:	441a      	add	r2, r3
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	3304      	adds	r3, #4
 800cb04:	4619      	mov	r1, r3
 800cb06:	4610      	mov	r0, r2
 800cb08:	f7fe fab4 	bl	800b074 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb10:	697b      	ldr	r3, [r7, #20]
	}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3718      	adds	r7, #24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20001f2c 	.word	0x20001f2c
 800cb20:	20001f30 	.word	0x20001f30
 800cb24:	20002034 	.word	0x20002034

0800cb28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cb36:	2301      	movs	r3, #1
 800cb38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d077      	beq.n	800cc30 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10a      	bne.n	800cb5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	60fb      	str	r3, [r7, #12]
}
 800cb5a:	bf00      	nop
 800cb5c:	e7fe      	b.n	800cb5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d902      	bls.n	800cb6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	e002      	b.n	800cb74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d058      	beq.n	800cc30 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d153      	bne.n	800cc30 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cb88:	4b2b      	ldr	r3, [pc, #172]	; (800cc38 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	69ba      	ldr	r2, [r7, #24]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d10a      	bne.n	800cba8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60bb      	str	r3, [r7, #8]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	69fa      	ldr	r2, [r7, #28]
 800cbb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	db04      	blt.n	800cbc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f1c3 0207 	rsb	r2, r3, #7
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	6959      	ldr	r1, [r3, #20]
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cbd6:	4413      	add	r3, r2
 800cbd8:	4299      	cmp	r1, r3
 800cbda:	d129      	bne.n	800cc30 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe faa4 	bl	800b12e <uxListRemove>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d10a      	bne.n	800cc02 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf6:	43da      	mvns	r2, r3
 800cbf8:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	4a10      	ldr	r2, [pc, #64]	; (800cc40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc00:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc06:	2201      	movs	r2, #1
 800cc08:	409a      	lsls	r2, r3
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	4a0b      	ldr	r2, [pc, #44]	; (800cc40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4a06      	ldr	r2, [pc, #24]	; (800cc3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cc22:	441a      	add	r2, r3
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	3304      	adds	r3, #4
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f7fe fa22 	bl	800b074 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc30:	bf00      	nop
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20001f2c 	.word	0x20001f2c
 800cc3c:	20001f30 	.word	0x20001f30
 800cc40:	20002034 	.word	0x20002034

0800cc44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cc44:	b480      	push	{r7}
 800cc46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cc48:	4b07      	ldr	r3, [pc, #28]	; (800cc68 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cc50:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc56:	3201      	adds	r2, #1
 800cc58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cc5a:	4b03      	ldr	r3, [pc, #12]	; (800cc68 <pvTaskIncrementMutexHeldCount+0x24>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
	}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	20001f2c 	.word	0x20001f2c

0800cc6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc76:	4b29      	ldr	r3, [pc, #164]	; (800cd1c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc7c:	4b28      	ldr	r3, [pc, #160]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fa53 	bl	800b12e <uxListRemove>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10b      	bne.n	800cca6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cc8e:	4b24      	ldr	r3, [pc, #144]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	2201      	movs	r2, #1
 800cc96:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9a:	43da      	mvns	r2, r3
 800cc9c:	4b21      	ldr	r3, [pc, #132]	; (800cd24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4013      	ands	r3, r2
 800cca2:	4a20      	ldr	r2, [pc, #128]	; (800cd24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cca4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccac:	d10a      	bne.n	800ccc4 <prvAddCurrentTaskToDelayedList+0x58>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d007      	beq.n	800ccc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3304      	adds	r3, #4
 800ccba:	4619      	mov	r1, r3
 800ccbc:	481a      	ldr	r0, [pc, #104]	; (800cd28 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ccbe:	f7fe f9d9 	bl	800b074 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccc2:	e026      	b.n	800cd12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4413      	add	r3, r2
 800ccca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cccc:	4b14      	ldr	r3, [pc, #80]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d209      	bcs.n	800ccf0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccdc:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	4b0f      	ldr	r3, [pc, #60]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3304      	adds	r3, #4
 800cce6:	4619      	mov	r1, r3
 800cce8:	4610      	mov	r0, r2
 800ccea:	f7fe f9e7 	bl	800b0bc <vListInsert>
}
 800ccee:	e010      	b.n	800cd12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccf0:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f7fe f9dd 	bl	800b0bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd02:	4b0c      	ldr	r3, [pc, #48]	; (800cd34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d202      	bcs.n	800cd12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cd0c:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	6013      	str	r3, [r2, #0]
}
 800cd12:	bf00      	nop
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20002030 	.word	0x20002030
 800cd20:	20001f2c 	.word	0x20001f2c
 800cd24:	20002034 	.word	0x20002034
 800cd28:	20002018 	.word	0x20002018
 800cd2c:	20001fe8 	.word	0x20001fe8
 800cd30:	20001fe4 	.word	0x20001fe4
 800cd34:	2000204c 	.word	0x2000204c

0800cd38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3b04      	subs	r3, #4
 800cd48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3b04      	subs	r3, #4
 800cd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f023 0201 	bic.w	r2, r3, #1
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3b04      	subs	r3, #4
 800cd66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd68:	4a0c      	ldr	r2, [pc, #48]	; (800cd9c <pxPortInitialiseStack+0x64>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	3b14      	subs	r3, #20
 800cd72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3b04      	subs	r3, #4
 800cd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f06f 0202 	mvn.w	r2, #2
 800cd86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3b20      	subs	r3, #32
 800cd8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	0800cda1 	.word	0x0800cda1

0800cda0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <prvTaskExitError+0x54>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdb2:	d00a      	beq.n	800cdca <prvTaskExitError+0x2a>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	60fb      	str	r3, [r7, #12]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <prvTaskExitError+0x28>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	60bb      	str	r3, [r7, #8]
}
 800cddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdde:	bf00      	nop
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0fc      	beq.n	800cde0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr
 800cdf4:	20000028 	.word	0x20000028
	...

0800ce00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <pxCurrentTCBConst2>)
 800ce02:	6819      	ldr	r1, [r3, #0]
 800ce04:	6808      	ldr	r0, [r1, #0]
 800ce06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	f380 8809 	msr	PSP, r0
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f04f 0000 	mov.w	r0, #0
 800ce16:	f380 8811 	msr	BASEPRI, r0
 800ce1a:	4770      	bx	lr
 800ce1c:	f3af 8000 	nop.w

0800ce20 <pxCurrentTCBConst2>:
 800ce20:	20001f2c 	.word	0x20001f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce24:	bf00      	nop
 800ce26:	bf00      	nop

0800ce28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce28:	4808      	ldr	r0, [pc, #32]	; (800ce4c <prvPortStartFirstTask+0x24>)
 800ce2a:	6800      	ldr	r0, [r0, #0]
 800ce2c:	6800      	ldr	r0, [r0, #0]
 800ce2e:	f380 8808 	msr	MSP, r0
 800ce32:	f04f 0000 	mov.w	r0, #0
 800ce36:	f380 8814 	msr	CONTROL, r0
 800ce3a:	b662      	cpsie	i
 800ce3c:	b661      	cpsie	f
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	df00      	svc	0
 800ce48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce4a:	bf00      	nop
 800ce4c:	e000ed08 	.word	0xe000ed08

0800ce50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce56:	4b46      	ldr	r3, [pc, #280]	; (800cf70 <xPortStartScheduler+0x120>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a46      	ldr	r2, [pc, #280]	; (800cf74 <xPortStartScheduler+0x124>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d10a      	bne.n	800ce76 <xPortStartScheduler+0x26>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	613b      	str	r3, [r7, #16]
}
 800ce72:	bf00      	nop
 800ce74:	e7fe      	b.n	800ce74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce76:	4b3e      	ldr	r3, [pc, #248]	; (800cf70 <xPortStartScheduler+0x120>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a3f      	ldr	r2, [pc, #252]	; (800cf78 <xPortStartScheduler+0x128>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d10a      	bne.n	800ce96 <xPortStartScheduler+0x46>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	60fb      	str	r3, [r7, #12]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <xPortStartScheduler+0x12c>)
 800ce98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	22ff      	movs	r2, #255	; 0xff
 800cea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4b31      	ldr	r3, [pc, #196]	; (800cf80 <xPortStartScheduler+0x130>)
 800cebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cebe:	4b31      	ldr	r3, [pc, #196]	; (800cf84 <xPortStartScheduler+0x134>)
 800cec0:	2207      	movs	r2, #7
 800cec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cec4:	e009      	b.n	800ceda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cec6:	4b2f      	ldr	r3, [pc, #188]	; (800cf84 <xPortStartScheduler+0x134>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	4a2d      	ldr	r2, [pc, #180]	; (800cf84 <xPortStartScheduler+0x134>)
 800cece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceda:	78fb      	ldrb	r3, [r7, #3]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee2:	2b80      	cmp	r3, #128	; 0x80
 800cee4:	d0ef      	beq.n	800cec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <xPortStartScheduler+0x134>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f1c3 0307 	rsb	r3, r3, #7
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d00a      	beq.n	800cf08 <xPortStartScheduler+0xb8>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	60bb      	str	r3, [r7, #8]
}
 800cf04:	bf00      	nop
 800cf06:	e7fe      	b.n	800cf06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf08:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	021b      	lsls	r3, r3, #8
 800cf0e:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf1a:	4a1a      	ldr	r2, [pc, #104]	; (800cf84 <xPortStartScheduler+0x134>)
 800cf1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf26:	4b18      	ldr	r3, [pc, #96]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a17      	ldr	r2, [pc, #92]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf32:	4b15      	ldr	r3, [pc, #84]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a14      	ldr	r2, [pc, #80]	; (800cf88 <xPortStartScheduler+0x138>)
 800cf38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf3e:	f000 f8dd 	bl	800d0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf42:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <xPortStartScheduler+0x13c>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf48:	f000 f8fc 	bl	800d144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf4c:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <xPortStartScheduler+0x140>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a0f      	ldr	r2, [pc, #60]	; (800cf90 <xPortStartScheduler+0x140>)
 800cf52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf58:	f7ff ff66 	bl	800ce28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf5c:	f7ff fa84 	bl	800c468 <vTaskSwitchContext>
	prvTaskExitError();
 800cf60:	f7ff ff1e 	bl	800cda0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	e000ed00 	.word	0xe000ed00
 800cf74:	410fc271 	.word	0x410fc271
 800cf78:	410fc270 	.word	0x410fc270
 800cf7c:	e000e400 	.word	0xe000e400
 800cf80:	20002058 	.word	0x20002058
 800cf84:	2000205c 	.word	0x2000205c
 800cf88:	e000ed20 	.word	0xe000ed20
 800cf8c:	20000028 	.word	0x20000028
 800cf90:	e000ef34 	.word	0xe000ef34

0800cf94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	607b      	str	r3, [r7, #4]
}
 800cfac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfae:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <vPortEnterCritical+0x58>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	4a0d      	ldr	r2, [pc, #52]	; (800cfec <vPortEnterCritical+0x58>)
 800cfb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfb8:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <vPortEnterCritical+0x58>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d10f      	bne.n	800cfe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfc0:	4b0b      	ldr	r3, [pc, #44]	; (800cff0 <vPortEnterCritical+0x5c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	603b      	str	r3, [r7, #0]
}
 800cfdc:	bf00      	nop
 800cfde:	e7fe      	b.n	800cfde <vPortEnterCritical+0x4a>
	}
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20000028 	.word	0x20000028
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cffa:	4b12      	ldr	r3, [pc, #72]	; (800d044 <vPortExitCritical+0x50>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <vPortExitCritical+0x24>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	607b      	str	r3, [r7, #4]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d018:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <vPortExitCritical+0x50>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4a09      	ldr	r2, [pc, #36]	; (800d044 <vPortExitCritical+0x50>)
 800d020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d022:	4b08      	ldr	r3, [pc, #32]	; (800d044 <vPortExitCritical+0x50>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <vPortExitCritical+0x42>
 800d02a:	2300      	movs	r3, #0
 800d02c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	f383 8811 	msr	BASEPRI, r3
}
 800d034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	20000028 	.word	0x20000028
	...

0800d050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d050:	f3ef 8009 	mrs	r0, PSP
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	4b15      	ldr	r3, [pc, #84]	; (800d0b0 <pxCurrentTCBConst>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	f01e 0f10 	tst.w	lr, #16
 800d060:	bf08      	it	eq
 800d062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06a:	6010      	str	r0, [r2, #0]
 800d06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d074:	f380 8811 	msr	BASEPRI, r0
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f7ff f9f2 	bl	800c468 <vTaskSwitchContext>
 800d084:	f04f 0000 	mov.w	r0, #0
 800d088:	f380 8811 	msr	BASEPRI, r0
 800d08c:	bc09      	pop	{r0, r3}
 800d08e:	6819      	ldr	r1, [r3, #0]
 800d090:	6808      	ldr	r0, [r1, #0]
 800d092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d096:	f01e 0f10 	tst.w	lr, #16
 800d09a:	bf08      	it	eq
 800d09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0a0:	f380 8809 	msr	PSP, r0
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	f3af 8000 	nop.w

0800d0b0 <pxCurrentTCBConst>:
 800d0b0:	20001f2c 	.word	0x20001f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop

0800d0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	607b      	str	r3, [r7, #4]
}
 800d0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0d2:	f7ff f911 	bl	800c2f8 <xTaskIncrementTick>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0dc:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <SysTick_Handler+0x40>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f383 8811 	msr	BASEPRI, r3
}
 800d0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <vPortSetupTimerInterrupt+0x34>)
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d106:	4b0b      	ldr	r3, [pc, #44]	; (800d134 <vPortSetupTimerInterrupt+0x38>)
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d10c:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <vPortSetupTimerInterrupt+0x3c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <vPortSetupTimerInterrupt+0x40>)
 800d112:	fba2 2303 	umull	r2, r3, r2, r3
 800d116:	099b      	lsrs	r3, r3, #6
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <vPortSetupTimerInterrupt+0x44>)
 800d11a:	3b01      	subs	r3, #1
 800d11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d11e:	4b04      	ldr	r3, [pc, #16]	; (800d130 <vPortSetupTimerInterrupt+0x34>)
 800d120:	2207      	movs	r2, #7
 800d122:	601a      	str	r2, [r3, #0]
}
 800d124:	bf00      	nop
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	e000e010 	.word	0xe000e010
 800d134:	e000e018 	.word	0xe000e018
 800d138:	20000004 	.word	0x20000004
 800d13c:	10624dd3 	.word	0x10624dd3
 800d140:	e000e014 	.word	0xe000e014

0800d144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d154 <vPortEnableVFP+0x10>
 800d148:	6801      	ldr	r1, [r0, #0]
 800d14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d14e:	6001      	str	r1, [r0, #0]
 800d150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d152:	bf00      	nop
 800d154:	e000ed88 	.word	0xe000ed88

0800d158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d15e:	f3ef 8305 	mrs	r3, IPSR
 800d162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b0f      	cmp	r3, #15
 800d168:	d914      	bls.n	800d194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d16a:	4a17      	ldr	r2, [pc, #92]	; (800d1c8 <vPortValidateInterruptPriority+0x70>)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4413      	add	r3, r2
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d174:	4b15      	ldr	r3, [pc, #84]	; (800d1cc <vPortValidateInterruptPriority+0x74>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	7afa      	ldrb	r2, [r7, #11]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d20a      	bcs.n	800d194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	607b      	str	r3, [r7, #4]
}
 800d190:	bf00      	nop
 800d192:	e7fe      	b.n	800d192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <vPortValidateInterruptPriority+0x78>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d19c:	4b0d      	ldr	r3, [pc, #52]	; (800d1d4 <vPortValidateInterruptPriority+0x7c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d90a      	bls.n	800d1ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	603b      	str	r3, [r7, #0]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <vPortValidateInterruptPriority+0x60>
	}
 800d1ba:	bf00      	nop
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	e000e3f0 	.word	0xe000e3f0
 800d1cc:	20002058 	.word	0x20002058
 800d1d0:	e000ed0c 	.word	0xe000ed0c
 800d1d4:	2000205c 	.word	0x2000205c

0800d1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	; 0x28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1e4:	f7fe ffde 	bl	800c1a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1e8:	4b5b      	ldr	r3, [pc, #364]	; (800d358 <pvPortMalloc+0x180>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1f0:	f000 f920 	bl	800d434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1f4:	4b59      	ldr	r3, [pc, #356]	; (800d35c <pvPortMalloc+0x184>)
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 8093 	bne.w	800d328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d01d      	beq.n	800d244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d208:	2208      	movs	r2, #8
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b00      	cmp	r3, #0
 800d218:	d014      	beq.n	800d244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f023 0307 	bic.w	r3, r3, #7
 800d220:	3308      	adds	r3, #8
 800d222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f003 0307 	and.w	r3, r3, #7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <pvPortMalloc+0x6c>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	617b      	str	r3, [r7, #20]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d06e      	beq.n	800d328 <pvPortMalloc+0x150>
 800d24a:	4b45      	ldr	r3, [pc, #276]	; (800d360 <pvPortMalloc+0x188>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d869      	bhi.n	800d328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d254:	4b43      	ldr	r3, [pc, #268]	; (800d364 <pvPortMalloc+0x18c>)
 800d256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d258:	4b42      	ldr	r3, [pc, #264]	; (800d364 <pvPortMalloc+0x18c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d25e:	e004      	b.n	800d26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d903      	bls.n	800d27c <pvPortMalloc+0xa4>
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1f1      	bne.n	800d260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d27c:	4b36      	ldr	r3, [pc, #216]	; (800d358 <pvPortMalloc+0x180>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d282:	429a      	cmp	r2, r3
 800d284:	d050      	beq.n	800d328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2208      	movs	r2, #8
 800d28c:	4413      	add	r3, r2
 800d28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d91f      	bls.n	800d2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	613b      	str	r3, [r7, #16]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	1ad2      	subs	r2, r2, r3
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2e2:	69b8      	ldr	r0, [r7, #24]
 800d2e4:	f000 f908 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <pvPortMalloc+0x188>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	4a1b      	ldr	r2, [pc, #108]	; (800d360 <pvPortMalloc+0x188>)
 800d2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2f6:	4b1a      	ldr	r3, [pc, #104]	; (800d360 <pvPortMalloc+0x188>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b1b      	ldr	r3, [pc, #108]	; (800d368 <pvPortMalloc+0x190>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d203      	bcs.n	800d30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <pvPortMalloc+0x188>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a18      	ldr	r2, [pc, #96]	; (800d368 <pvPortMalloc+0x190>)
 800d308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <pvPortMalloc+0x184>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	431a      	orrs	r2, r3
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <pvPortMalloc+0x194>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	4a11      	ldr	r2, [pc, #68]	; (800d36c <pvPortMalloc+0x194>)
 800d326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d328:	f7fe ff4a 	bl	800c1c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <pvPortMalloc+0x174>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	60fb      	str	r3, [r7, #12]
}
 800d348:	bf00      	nop
 800d34a:	e7fe      	b.n	800d34a <pvPortMalloc+0x172>
	return pvReturn;
 800d34c:	69fb      	ldr	r3, [r7, #28]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	; 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20005c68 	.word	0x20005c68
 800d35c:	20005c7c 	.word	0x20005c7c
 800d360:	20005c6c 	.word	0x20005c6c
 800d364:	20005c60 	.word	0x20005c60
 800d368:	20005c70 	.word	0x20005c70
 800d36c:	20005c74 	.word	0x20005c74

0800d370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d04d      	beq.n	800d41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d382:	2308      	movs	r3, #8
 800d384:	425b      	negs	r3, r3
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	4413      	add	r3, r2
 800d38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	4b24      	ldr	r3, [pc, #144]	; (800d428 <vPortFree+0xb8>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4013      	ands	r3, r2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <vPortFree+0x44>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	60fb      	str	r3, [r7, #12]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00a      	beq.n	800d3d2 <vPortFree+0x62>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	60bb      	str	r3, [r7, #8]
}
 800d3ce:	bf00      	nop
 800d3d0:	e7fe      	b.n	800d3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <vPortFree+0xb8>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4013      	ands	r3, r2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01e      	beq.n	800d41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d11a      	bne.n	800d41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <vPortFree+0xb8>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	43db      	mvns	r3, r3
 800d3f2:	401a      	ands	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3f8:	f7fe fed4 	bl	800c1a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vPortFree+0xbc>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4413      	add	r3, r2
 800d406:	4a09      	ldr	r2, [pc, #36]	; (800d42c <vPortFree+0xbc>)
 800d408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f000 f874 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d410:	4b07      	ldr	r3, [pc, #28]	; (800d430 <vPortFree+0xc0>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3301      	adds	r3, #1
 800d416:	4a06      	ldr	r2, [pc, #24]	; (800d430 <vPortFree+0xc0>)
 800d418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d41a:	f7fe fed1 	bl	800c1c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d41e:	bf00      	nop
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20005c7c 	.word	0x20005c7c
 800d42c:	20005c6c 	.word	0x20005c6c
 800d430:	20005c78 	.word	0x20005c78

0800d434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d43a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d440:	4b27      	ldr	r3, [pc, #156]	; (800d4e0 <prvHeapInit+0xac>)
 800d442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 0307 	and.w	r3, r3, #7
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00c      	beq.n	800d468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3307      	adds	r3, #7
 800d452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0307 	bic.w	r3, r3, #7
 800d45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	4a1f      	ldr	r2, [pc, #124]	; (800d4e0 <prvHeapInit+0xac>)
 800d464:	4413      	add	r3, r2
 800d466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d46c:	4a1d      	ldr	r2, [pc, #116]	; (800d4e4 <prvHeapInit+0xb0>)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d472:	4b1c      	ldr	r3, [pc, #112]	; (800d4e4 <prvHeapInit+0xb0>)
 800d474:	2200      	movs	r2, #0
 800d476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	4413      	add	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d480:	2208      	movs	r2, #8
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	1a9b      	subs	r3, r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f023 0307 	bic.w	r3, r3, #7
 800d48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <prvHeapInit+0xb4>)
 800d494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <prvHeapInit+0xb4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d49e:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	1ad2      	subs	r2, r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <prvHeapInit+0xb8>)
 800d4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <prvHeapInit+0xbc>)
 800d4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4cc:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <prvHeapInit+0xc0>)
 800d4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	20002060 	.word	0x20002060
 800d4e4:	20005c60 	.word	0x20005c60
 800d4e8:	20005c68 	.word	0x20005c68
 800d4ec:	20005c70 	.word	0x20005c70
 800d4f0:	20005c6c 	.word	0x20005c6c
 800d4f4:	20005c7c 	.word	0x20005c7c

0800d4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d500:	4b28      	ldr	r3, [pc, #160]	; (800d5a4 <prvInsertBlockIntoFreeList+0xac>)
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e002      	b.n	800d50c <prvInsertBlockIntoFreeList+0x14>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	d8f7      	bhi.n	800d506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	4413      	add	r3, r2
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d108      	bne.n	800d53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	441a      	add	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	441a      	add	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d118      	bne.n	800d580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d00d      	beq.n	800d576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	441a      	add	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	e008      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d576:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e003      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d002      	beq.n	800d596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d596:	bf00      	nop
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	20005c60 	.word	0x20005c60
 800d5a8:	20005c68 	.word	0x20005c68

0800d5ac <__cvt>:
 800d5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b0:	ec55 4b10 	vmov	r4, r5, d0
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	460e      	mov	r6, r1
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	bfbb      	ittet	lt
 800d5be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d5c2:	461d      	movlt	r5, r3
 800d5c4:	2300      	movge	r3, #0
 800d5c6:	232d      	movlt	r3, #45	; 0x2d
 800d5c8:	700b      	strb	r3, [r1, #0]
 800d5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d5d0:	4691      	mov	r9, r2
 800d5d2:	f023 0820 	bic.w	r8, r3, #32
 800d5d6:	bfbc      	itt	lt
 800d5d8:	4622      	movlt	r2, r4
 800d5da:	4614      	movlt	r4, r2
 800d5dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5e0:	d005      	beq.n	800d5ee <__cvt+0x42>
 800d5e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d5e6:	d100      	bne.n	800d5ea <__cvt+0x3e>
 800d5e8:	3601      	adds	r6, #1
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	e000      	b.n	800d5f0 <__cvt+0x44>
 800d5ee:	2103      	movs	r1, #3
 800d5f0:	ab03      	add	r3, sp, #12
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	ab02      	add	r3, sp, #8
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	ec45 4b10 	vmov	d0, r4, r5
 800d5fc:	4653      	mov	r3, sl
 800d5fe:	4632      	mov	r2, r6
 800d600:	f000 ff0e 	bl	800e420 <_dtoa_r>
 800d604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d608:	4607      	mov	r7, r0
 800d60a:	d102      	bne.n	800d612 <__cvt+0x66>
 800d60c:	f019 0f01 	tst.w	r9, #1
 800d610:	d022      	beq.n	800d658 <__cvt+0xac>
 800d612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d616:	eb07 0906 	add.w	r9, r7, r6
 800d61a:	d110      	bne.n	800d63e <__cvt+0x92>
 800d61c:	783b      	ldrb	r3, [r7, #0]
 800d61e:	2b30      	cmp	r3, #48	; 0x30
 800d620:	d10a      	bne.n	800d638 <__cvt+0x8c>
 800d622:	2200      	movs	r2, #0
 800d624:	2300      	movs	r3, #0
 800d626:	4620      	mov	r0, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	f7f3 fa6d 	bl	8000b08 <__aeabi_dcmpeq>
 800d62e:	b918      	cbnz	r0, 800d638 <__cvt+0x8c>
 800d630:	f1c6 0601 	rsb	r6, r6, #1
 800d634:	f8ca 6000 	str.w	r6, [sl]
 800d638:	f8da 3000 	ldr.w	r3, [sl]
 800d63c:	4499      	add	r9, r3
 800d63e:	2200      	movs	r2, #0
 800d640:	2300      	movs	r3, #0
 800d642:	4620      	mov	r0, r4
 800d644:	4629      	mov	r1, r5
 800d646:	f7f3 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800d64a:	b108      	cbz	r0, 800d650 <__cvt+0xa4>
 800d64c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d650:	2230      	movs	r2, #48	; 0x30
 800d652:	9b03      	ldr	r3, [sp, #12]
 800d654:	454b      	cmp	r3, r9
 800d656:	d307      	bcc.n	800d668 <__cvt+0xbc>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d65c:	1bdb      	subs	r3, r3, r7
 800d65e:	4638      	mov	r0, r7
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	b004      	add	sp, #16
 800d664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d668:	1c59      	adds	r1, r3, #1
 800d66a:	9103      	str	r1, [sp, #12]
 800d66c:	701a      	strb	r2, [r3, #0]
 800d66e:	e7f0      	b.n	800d652 <__cvt+0xa6>

0800d670 <__exponent>:
 800d670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d672:	4603      	mov	r3, r0
 800d674:	2900      	cmp	r1, #0
 800d676:	bfb8      	it	lt
 800d678:	4249      	neglt	r1, r1
 800d67a:	f803 2b02 	strb.w	r2, [r3], #2
 800d67e:	bfb4      	ite	lt
 800d680:	222d      	movlt	r2, #45	; 0x2d
 800d682:	222b      	movge	r2, #43	; 0x2b
 800d684:	2909      	cmp	r1, #9
 800d686:	7042      	strb	r2, [r0, #1]
 800d688:	dd2a      	ble.n	800d6e0 <__exponent+0x70>
 800d68a:	f10d 0207 	add.w	r2, sp, #7
 800d68e:	4617      	mov	r7, r2
 800d690:	260a      	movs	r6, #10
 800d692:	4694      	mov	ip, r2
 800d694:	fb91 f5f6 	sdiv	r5, r1, r6
 800d698:	fb06 1415 	mls	r4, r6, r5, r1
 800d69c:	3430      	adds	r4, #48	; 0x30
 800d69e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	2c63      	cmp	r4, #99	; 0x63
 800d6a6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	dcf1      	bgt.n	800d692 <__exponent+0x22>
 800d6ae:	3130      	adds	r1, #48	; 0x30
 800d6b0:	f1ac 0402 	sub.w	r4, ip, #2
 800d6b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d6b8:	1c41      	adds	r1, r0, #1
 800d6ba:	4622      	mov	r2, r4
 800d6bc:	42ba      	cmp	r2, r7
 800d6be:	d30a      	bcc.n	800d6d6 <__exponent+0x66>
 800d6c0:	f10d 0209 	add.w	r2, sp, #9
 800d6c4:	eba2 020c 	sub.w	r2, r2, ip
 800d6c8:	42bc      	cmp	r4, r7
 800d6ca:	bf88      	it	hi
 800d6cc:	2200      	movhi	r2, #0
 800d6ce:	4413      	add	r3, r2
 800d6d0:	1a18      	subs	r0, r3, r0
 800d6d2:	b003      	add	sp, #12
 800d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d6da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d6de:	e7ed      	b.n	800d6bc <__exponent+0x4c>
 800d6e0:	2330      	movs	r3, #48	; 0x30
 800d6e2:	3130      	adds	r1, #48	; 0x30
 800d6e4:	7083      	strb	r3, [r0, #2]
 800d6e6:	70c1      	strb	r1, [r0, #3]
 800d6e8:	1d03      	adds	r3, r0, #4
 800d6ea:	e7f1      	b.n	800d6d0 <__exponent+0x60>

0800d6ec <_printf_float>:
 800d6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f0:	ed2d 8b02 	vpush	{d8}
 800d6f4:	b08d      	sub	sp, #52	; 0x34
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d6fc:	4616      	mov	r6, r2
 800d6fe:	461f      	mov	r7, r3
 800d700:	4605      	mov	r5, r0
 800d702:	f000 fd29 	bl	800e158 <_localeconv_r>
 800d706:	f8d0 a000 	ldr.w	sl, [r0]
 800d70a:	4650      	mov	r0, sl
 800d70c:	f7f2 fdd0 	bl	80002b0 <strlen>
 800d710:	2300      	movs	r3, #0
 800d712:	930a      	str	r3, [sp, #40]	; 0x28
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	9305      	str	r3, [sp, #20]
 800d718:	f8d8 3000 	ldr.w	r3, [r8]
 800d71c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d720:	3307      	adds	r3, #7
 800d722:	f023 0307 	bic.w	r3, r3, #7
 800d726:	f103 0208 	add.w	r2, r3, #8
 800d72a:	f8c8 2000 	str.w	r2, [r8]
 800d72e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d732:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d736:	9307      	str	r3, [sp, #28]
 800d738:	f8cd 8018 	str.w	r8, [sp, #24]
 800d73c:	ee08 0a10 	vmov	s16, r0
 800d740:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d748:	4b9e      	ldr	r3, [pc, #632]	; (800d9c4 <_printf_float+0x2d8>)
 800d74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d74e:	f7f3 fa0d 	bl	8000b6c <__aeabi_dcmpun>
 800d752:	bb88      	cbnz	r0, 800d7b8 <_printf_float+0xcc>
 800d754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d758:	4b9a      	ldr	r3, [pc, #616]	; (800d9c4 <_printf_float+0x2d8>)
 800d75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d75e:	f7f3 f9e7 	bl	8000b30 <__aeabi_dcmple>
 800d762:	bb48      	cbnz	r0, 800d7b8 <_printf_float+0xcc>
 800d764:	2200      	movs	r2, #0
 800d766:	2300      	movs	r3, #0
 800d768:	4640      	mov	r0, r8
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f3 f9d6 	bl	8000b1c <__aeabi_dcmplt>
 800d770:	b110      	cbz	r0, 800d778 <_printf_float+0x8c>
 800d772:	232d      	movs	r3, #45	; 0x2d
 800d774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d778:	4a93      	ldr	r2, [pc, #588]	; (800d9c8 <_printf_float+0x2dc>)
 800d77a:	4b94      	ldr	r3, [pc, #592]	; (800d9cc <_printf_float+0x2e0>)
 800d77c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d780:	bf94      	ite	ls
 800d782:	4690      	movls	r8, r2
 800d784:	4698      	movhi	r8, r3
 800d786:	2303      	movs	r3, #3
 800d788:	6123      	str	r3, [r4, #16]
 800d78a:	9b05      	ldr	r3, [sp, #20]
 800d78c:	f023 0304 	bic.w	r3, r3, #4
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	f04f 0900 	mov.w	r9, #0
 800d796:	9700      	str	r7, [sp, #0]
 800d798:	4633      	mov	r3, r6
 800d79a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d79c:	4621      	mov	r1, r4
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f000 f9da 	bl	800db58 <_printf_common>
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	f040 8090 	bne.w	800d8ca <_printf_float+0x1de>
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7ae:	b00d      	add	sp, #52	; 0x34
 800d7b0:	ecbd 8b02 	vpop	{d8}
 800d7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b8:	4642      	mov	r2, r8
 800d7ba:	464b      	mov	r3, r9
 800d7bc:	4640      	mov	r0, r8
 800d7be:	4649      	mov	r1, r9
 800d7c0:	f7f3 f9d4 	bl	8000b6c <__aeabi_dcmpun>
 800d7c4:	b140      	cbz	r0, 800d7d8 <_printf_float+0xec>
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	bfbc      	itt	lt
 800d7cc:	232d      	movlt	r3, #45	; 0x2d
 800d7ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d7d2:	4a7f      	ldr	r2, [pc, #508]	; (800d9d0 <_printf_float+0x2e4>)
 800d7d4:	4b7f      	ldr	r3, [pc, #508]	; (800d9d4 <_printf_float+0x2e8>)
 800d7d6:	e7d1      	b.n	800d77c <_printf_float+0x90>
 800d7d8:	6863      	ldr	r3, [r4, #4]
 800d7da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d7de:	9206      	str	r2, [sp, #24]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	d13f      	bne.n	800d864 <_printf_float+0x178>
 800d7e4:	2306      	movs	r3, #6
 800d7e6:	6063      	str	r3, [r4, #4]
 800d7e8:	9b05      	ldr	r3, [sp, #20]
 800d7ea:	6861      	ldr	r1, [r4, #4]
 800d7ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	9303      	str	r3, [sp, #12]
 800d7f4:	ab0a      	add	r3, sp, #40	; 0x28
 800d7f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d7fa:	ab09      	add	r3, sp, #36	; 0x24
 800d7fc:	ec49 8b10 	vmov	d0, r8, r9
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	6022      	str	r2, [r4, #0]
 800d804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d808:	4628      	mov	r0, r5
 800d80a:	f7ff fecf 	bl	800d5ac <__cvt>
 800d80e:	9b06      	ldr	r3, [sp, #24]
 800d810:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d812:	2b47      	cmp	r3, #71	; 0x47
 800d814:	4680      	mov	r8, r0
 800d816:	d108      	bne.n	800d82a <_printf_float+0x13e>
 800d818:	1cc8      	adds	r0, r1, #3
 800d81a:	db02      	blt.n	800d822 <_printf_float+0x136>
 800d81c:	6863      	ldr	r3, [r4, #4]
 800d81e:	4299      	cmp	r1, r3
 800d820:	dd41      	ble.n	800d8a6 <_printf_float+0x1ba>
 800d822:	f1ab 0302 	sub.w	r3, fp, #2
 800d826:	fa5f fb83 	uxtb.w	fp, r3
 800d82a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d82e:	d820      	bhi.n	800d872 <_printf_float+0x186>
 800d830:	3901      	subs	r1, #1
 800d832:	465a      	mov	r2, fp
 800d834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d838:	9109      	str	r1, [sp, #36]	; 0x24
 800d83a:	f7ff ff19 	bl	800d670 <__exponent>
 800d83e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d840:	1813      	adds	r3, r2, r0
 800d842:	2a01      	cmp	r2, #1
 800d844:	4681      	mov	r9, r0
 800d846:	6123      	str	r3, [r4, #16]
 800d848:	dc02      	bgt.n	800d850 <_printf_float+0x164>
 800d84a:	6822      	ldr	r2, [r4, #0]
 800d84c:	07d2      	lsls	r2, r2, #31
 800d84e:	d501      	bpl.n	800d854 <_printf_float+0x168>
 800d850:	3301      	adds	r3, #1
 800d852:	6123      	str	r3, [r4, #16]
 800d854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d09c      	beq.n	800d796 <_printf_float+0xaa>
 800d85c:	232d      	movs	r3, #45	; 0x2d
 800d85e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d862:	e798      	b.n	800d796 <_printf_float+0xaa>
 800d864:	9a06      	ldr	r2, [sp, #24]
 800d866:	2a47      	cmp	r2, #71	; 0x47
 800d868:	d1be      	bne.n	800d7e8 <_printf_float+0xfc>
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1bc      	bne.n	800d7e8 <_printf_float+0xfc>
 800d86e:	2301      	movs	r3, #1
 800d870:	e7b9      	b.n	800d7e6 <_printf_float+0xfa>
 800d872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d876:	d118      	bne.n	800d8aa <_printf_float+0x1be>
 800d878:	2900      	cmp	r1, #0
 800d87a:	6863      	ldr	r3, [r4, #4]
 800d87c:	dd0b      	ble.n	800d896 <_printf_float+0x1aa>
 800d87e:	6121      	str	r1, [r4, #16]
 800d880:	b913      	cbnz	r3, 800d888 <_printf_float+0x19c>
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	07d0      	lsls	r0, r2, #31
 800d886:	d502      	bpl.n	800d88e <_printf_float+0x1a2>
 800d888:	3301      	adds	r3, #1
 800d88a:	440b      	add	r3, r1
 800d88c:	6123      	str	r3, [r4, #16]
 800d88e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d890:	f04f 0900 	mov.w	r9, #0
 800d894:	e7de      	b.n	800d854 <_printf_float+0x168>
 800d896:	b913      	cbnz	r3, 800d89e <_printf_float+0x1b2>
 800d898:	6822      	ldr	r2, [r4, #0]
 800d89a:	07d2      	lsls	r2, r2, #31
 800d89c:	d501      	bpl.n	800d8a2 <_printf_float+0x1b6>
 800d89e:	3302      	adds	r3, #2
 800d8a0:	e7f4      	b.n	800d88c <_printf_float+0x1a0>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e7f2      	b.n	800d88c <_printf_float+0x1a0>
 800d8a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8ac:	4299      	cmp	r1, r3
 800d8ae:	db05      	blt.n	800d8bc <_printf_float+0x1d0>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	6121      	str	r1, [r4, #16]
 800d8b4:	07d8      	lsls	r0, r3, #31
 800d8b6:	d5ea      	bpl.n	800d88e <_printf_float+0x1a2>
 800d8b8:	1c4b      	adds	r3, r1, #1
 800d8ba:	e7e7      	b.n	800d88c <_printf_float+0x1a0>
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	bfd4      	ite	le
 800d8c0:	f1c1 0202 	rsble	r2, r1, #2
 800d8c4:	2201      	movgt	r2, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	e7e0      	b.n	800d88c <_printf_float+0x1a0>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	055a      	lsls	r2, r3, #21
 800d8ce:	d407      	bmi.n	800d8e0 <_printf_float+0x1f4>
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	47b8      	blx	r7
 800d8da:	3001      	adds	r0, #1
 800d8dc:	d12c      	bne.n	800d938 <_printf_float+0x24c>
 800d8de:	e764      	b.n	800d7aa <_printf_float+0xbe>
 800d8e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8e4:	f240 80e0 	bls.w	800daa8 <_printf_float+0x3bc>
 800d8e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f7f3 f90a 	bl	8000b08 <__aeabi_dcmpeq>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d034      	beq.n	800d962 <_printf_float+0x276>
 800d8f8:	4a37      	ldr	r2, [pc, #220]	; (800d9d8 <_printf_float+0x2ec>)
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4628      	mov	r0, r5
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	f43f af51 	beq.w	800d7aa <_printf_float+0xbe>
 800d908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d90c:	429a      	cmp	r2, r3
 800d90e:	db02      	blt.n	800d916 <_printf_float+0x22a>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	07d8      	lsls	r0, r3, #31
 800d914:	d510      	bpl.n	800d938 <_printf_float+0x24c>
 800d916:	ee18 3a10 	vmov	r3, s16
 800d91a:	4652      	mov	r2, sl
 800d91c:	4631      	mov	r1, r6
 800d91e:	4628      	mov	r0, r5
 800d920:	47b8      	blx	r7
 800d922:	3001      	adds	r0, #1
 800d924:	f43f af41 	beq.w	800d7aa <_printf_float+0xbe>
 800d928:	f04f 0800 	mov.w	r8, #0
 800d92c:	f104 091a 	add.w	r9, r4, #26
 800d930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d932:	3b01      	subs	r3, #1
 800d934:	4543      	cmp	r3, r8
 800d936:	dc09      	bgt.n	800d94c <_printf_float+0x260>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	079b      	lsls	r3, r3, #30
 800d93c:	f100 8107 	bmi.w	800db4e <_printf_float+0x462>
 800d940:	68e0      	ldr	r0, [r4, #12]
 800d942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d944:	4298      	cmp	r0, r3
 800d946:	bfb8      	it	lt
 800d948:	4618      	movlt	r0, r3
 800d94a:	e730      	b.n	800d7ae <_printf_float+0xc2>
 800d94c:	2301      	movs	r3, #1
 800d94e:	464a      	mov	r2, r9
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f af27 	beq.w	800d7aa <_printf_float+0xbe>
 800d95c:	f108 0801 	add.w	r8, r8, #1
 800d960:	e7e6      	b.n	800d930 <_printf_float+0x244>
 800d962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	dc39      	bgt.n	800d9dc <_printf_float+0x2f0>
 800d968:	4a1b      	ldr	r2, [pc, #108]	; (800d9d8 <_printf_float+0x2ec>)
 800d96a:	2301      	movs	r3, #1
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	f43f af19 	beq.w	800d7aa <_printf_float+0xbe>
 800d978:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d97c:	4313      	orrs	r3, r2
 800d97e:	d102      	bne.n	800d986 <_printf_float+0x29a>
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	07d9      	lsls	r1, r3, #31
 800d984:	d5d8      	bpl.n	800d938 <_printf_float+0x24c>
 800d986:	ee18 3a10 	vmov	r3, s16
 800d98a:	4652      	mov	r2, sl
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f af09 	beq.w	800d7aa <_printf_float+0xbe>
 800d998:	f04f 0900 	mov.w	r9, #0
 800d99c:	f104 0a1a 	add.w	sl, r4, #26
 800d9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9a2:	425b      	negs	r3, r3
 800d9a4:	454b      	cmp	r3, r9
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x2c0>
 800d9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9aa:	e792      	b.n	800d8d2 <_printf_float+0x1e6>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4652      	mov	r2, sl
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f aef7 	beq.w	800d7aa <_printf_float+0xbe>
 800d9bc:	f109 0901 	add.w	r9, r9, #1
 800d9c0:	e7ee      	b.n	800d9a0 <_printf_float+0x2b4>
 800d9c2:	bf00      	nop
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	08011994 	.word	0x08011994
 800d9cc:	08011998 	.word	0x08011998
 800d9d0:	0801199c 	.word	0x0801199c
 800d9d4:	080119a0 	.word	0x080119a0
 800d9d8:	080119a4 	.word	0x080119a4
 800d9dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	bfa8      	it	ge
 800d9e4:	461a      	movge	r2, r3
 800d9e6:	2a00      	cmp	r2, #0
 800d9e8:	4691      	mov	r9, r2
 800d9ea:	dc37      	bgt.n	800da5c <_printf_float+0x370>
 800d9ec:	f04f 0b00 	mov.w	fp, #0
 800d9f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9f4:	f104 021a 	add.w	r2, r4, #26
 800d9f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9fa:	9305      	str	r3, [sp, #20]
 800d9fc:	eba3 0309 	sub.w	r3, r3, r9
 800da00:	455b      	cmp	r3, fp
 800da02:	dc33      	bgt.n	800da6c <_printf_float+0x380>
 800da04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da08:	429a      	cmp	r2, r3
 800da0a:	db3b      	blt.n	800da84 <_printf_float+0x398>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	07da      	lsls	r2, r3, #31
 800da10:	d438      	bmi.n	800da84 <_printf_float+0x398>
 800da12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da16:	eba2 0903 	sub.w	r9, r2, r3
 800da1a:	9b05      	ldr	r3, [sp, #20]
 800da1c:	1ad2      	subs	r2, r2, r3
 800da1e:	4591      	cmp	r9, r2
 800da20:	bfa8      	it	ge
 800da22:	4691      	movge	r9, r2
 800da24:	f1b9 0f00 	cmp.w	r9, #0
 800da28:	dc35      	bgt.n	800da96 <_printf_float+0x3aa>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da32:	f104 0a1a 	add.w	sl, r4, #26
 800da36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da3a:	1a9b      	subs	r3, r3, r2
 800da3c:	eba3 0309 	sub.w	r3, r3, r9
 800da40:	4543      	cmp	r3, r8
 800da42:	f77f af79 	ble.w	800d938 <_printf_float+0x24c>
 800da46:	2301      	movs	r3, #1
 800da48:	4652      	mov	r2, sl
 800da4a:	4631      	mov	r1, r6
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b8      	blx	r7
 800da50:	3001      	adds	r0, #1
 800da52:	f43f aeaa 	beq.w	800d7aa <_printf_float+0xbe>
 800da56:	f108 0801 	add.w	r8, r8, #1
 800da5a:	e7ec      	b.n	800da36 <_printf_float+0x34a>
 800da5c:	4613      	mov	r3, r2
 800da5e:	4631      	mov	r1, r6
 800da60:	4642      	mov	r2, r8
 800da62:	4628      	mov	r0, r5
 800da64:	47b8      	blx	r7
 800da66:	3001      	adds	r0, #1
 800da68:	d1c0      	bne.n	800d9ec <_printf_float+0x300>
 800da6a:	e69e      	b.n	800d7aa <_printf_float+0xbe>
 800da6c:	2301      	movs	r3, #1
 800da6e:	4631      	mov	r1, r6
 800da70:	4628      	mov	r0, r5
 800da72:	9205      	str	r2, [sp, #20]
 800da74:	47b8      	blx	r7
 800da76:	3001      	adds	r0, #1
 800da78:	f43f ae97 	beq.w	800d7aa <_printf_float+0xbe>
 800da7c:	9a05      	ldr	r2, [sp, #20]
 800da7e:	f10b 0b01 	add.w	fp, fp, #1
 800da82:	e7b9      	b.n	800d9f8 <_printf_float+0x30c>
 800da84:	ee18 3a10 	vmov	r3, s16
 800da88:	4652      	mov	r2, sl
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	d1be      	bne.n	800da12 <_printf_float+0x326>
 800da94:	e689      	b.n	800d7aa <_printf_float+0xbe>
 800da96:	9a05      	ldr	r2, [sp, #20]
 800da98:	464b      	mov	r3, r9
 800da9a:	4442      	add	r2, r8
 800da9c:	4631      	mov	r1, r6
 800da9e:	4628      	mov	r0, r5
 800daa0:	47b8      	blx	r7
 800daa2:	3001      	adds	r0, #1
 800daa4:	d1c1      	bne.n	800da2a <_printf_float+0x33e>
 800daa6:	e680      	b.n	800d7aa <_printf_float+0xbe>
 800daa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daaa:	2a01      	cmp	r2, #1
 800daac:	dc01      	bgt.n	800dab2 <_printf_float+0x3c6>
 800daae:	07db      	lsls	r3, r3, #31
 800dab0:	d53a      	bpl.n	800db28 <_printf_float+0x43c>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4642      	mov	r2, r8
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f ae74 	beq.w	800d7aa <_printf_float+0xbe>
 800dac2:	ee18 3a10 	vmov	r3, s16
 800dac6:	4652      	mov	r2, sl
 800dac8:	4631      	mov	r1, r6
 800daca:	4628      	mov	r0, r5
 800dacc:	47b8      	blx	r7
 800dace:	3001      	adds	r0, #1
 800dad0:	f43f ae6b 	beq.w	800d7aa <_printf_float+0xbe>
 800dad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dad8:	2200      	movs	r2, #0
 800dada:	2300      	movs	r3, #0
 800dadc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dae0:	f7f3 f812 	bl	8000b08 <__aeabi_dcmpeq>
 800dae4:	b9d8      	cbnz	r0, 800db1e <_printf_float+0x432>
 800dae6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800daea:	f108 0201 	add.w	r2, r8, #1
 800daee:	4631      	mov	r1, r6
 800daf0:	4628      	mov	r0, r5
 800daf2:	47b8      	blx	r7
 800daf4:	3001      	adds	r0, #1
 800daf6:	d10e      	bne.n	800db16 <_printf_float+0x42a>
 800daf8:	e657      	b.n	800d7aa <_printf_float+0xbe>
 800dafa:	2301      	movs	r3, #1
 800dafc:	4652      	mov	r2, sl
 800dafe:	4631      	mov	r1, r6
 800db00:	4628      	mov	r0, r5
 800db02:	47b8      	blx	r7
 800db04:	3001      	adds	r0, #1
 800db06:	f43f ae50 	beq.w	800d7aa <_printf_float+0xbe>
 800db0a:	f108 0801 	add.w	r8, r8, #1
 800db0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db10:	3b01      	subs	r3, #1
 800db12:	4543      	cmp	r3, r8
 800db14:	dcf1      	bgt.n	800dafa <_printf_float+0x40e>
 800db16:	464b      	mov	r3, r9
 800db18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db1c:	e6da      	b.n	800d8d4 <_printf_float+0x1e8>
 800db1e:	f04f 0800 	mov.w	r8, #0
 800db22:	f104 0a1a 	add.w	sl, r4, #26
 800db26:	e7f2      	b.n	800db0e <_printf_float+0x422>
 800db28:	2301      	movs	r3, #1
 800db2a:	4642      	mov	r2, r8
 800db2c:	e7df      	b.n	800daee <_printf_float+0x402>
 800db2e:	2301      	movs	r3, #1
 800db30:	464a      	mov	r2, r9
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	f43f ae36 	beq.w	800d7aa <_printf_float+0xbe>
 800db3e:	f108 0801 	add.w	r8, r8, #1
 800db42:	68e3      	ldr	r3, [r4, #12]
 800db44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db46:	1a5b      	subs	r3, r3, r1
 800db48:	4543      	cmp	r3, r8
 800db4a:	dcf0      	bgt.n	800db2e <_printf_float+0x442>
 800db4c:	e6f8      	b.n	800d940 <_printf_float+0x254>
 800db4e:	f04f 0800 	mov.w	r8, #0
 800db52:	f104 0919 	add.w	r9, r4, #25
 800db56:	e7f4      	b.n	800db42 <_printf_float+0x456>

0800db58 <_printf_common>:
 800db58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db5c:	4616      	mov	r6, r2
 800db5e:	4699      	mov	r9, r3
 800db60:	688a      	ldr	r2, [r1, #8]
 800db62:	690b      	ldr	r3, [r1, #16]
 800db64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db68:	4293      	cmp	r3, r2
 800db6a:	bfb8      	it	lt
 800db6c:	4613      	movlt	r3, r2
 800db6e:	6033      	str	r3, [r6, #0]
 800db70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db74:	4607      	mov	r7, r0
 800db76:	460c      	mov	r4, r1
 800db78:	b10a      	cbz	r2, 800db7e <_printf_common+0x26>
 800db7a:	3301      	adds	r3, #1
 800db7c:	6033      	str	r3, [r6, #0]
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	0699      	lsls	r1, r3, #26
 800db82:	bf42      	ittt	mi
 800db84:	6833      	ldrmi	r3, [r6, #0]
 800db86:	3302      	addmi	r3, #2
 800db88:	6033      	strmi	r3, [r6, #0]
 800db8a:	6825      	ldr	r5, [r4, #0]
 800db8c:	f015 0506 	ands.w	r5, r5, #6
 800db90:	d106      	bne.n	800dba0 <_printf_common+0x48>
 800db92:	f104 0a19 	add.w	sl, r4, #25
 800db96:	68e3      	ldr	r3, [r4, #12]
 800db98:	6832      	ldr	r2, [r6, #0]
 800db9a:	1a9b      	subs	r3, r3, r2
 800db9c:	42ab      	cmp	r3, r5
 800db9e:	dc26      	bgt.n	800dbee <_printf_common+0x96>
 800dba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dba4:	1e13      	subs	r3, r2, #0
 800dba6:	6822      	ldr	r2, [r4, #0]
 800dba8:	bf18      	it	ne
 800dbaa:	2301      	movne	r3, #1
 800dbac:	0692      	lsls	r2, r2, #26
 800dbae:	d42b      	bmi.n	800dc08 <_printf_common+0xb0>
 800dbb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	47c0      	blx	r8
 800dbba:	3001      	adds	r0, #1
 800dbbc:	d01e      	beq.n	800dbfc <_printf_common+0xa4>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	6922      	ldr	r2, [r4, #16]
 800dbc2:	f003 0306 	and.w	r3, r3, #6
 800dbc6:	2b04      	cmp	r3, #4
 800dbc8:	bf02      	ittt	eq
 800dbca:	68e5      	ldreq	r5, [r4, #12]
 800dbcc:	6833      	ldreq	r3, [r6, #0]
 800dbce:	1aed      	subeq	r5, r5, r3
 800dbd0:	68a3      	ldr	r3, [r4, #8]
 800dbd2:	bf0c      	ite	eq
 800dbd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbd8:	2500      	movne	r5, #0
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	bfc4      	itt	gt
 800dbde:	1a9b      	subgt	r3, r3, r2
 800dbe0:	18ed      	addgt	r5, r5, r3
 800dbe2:	2600      	movs	r6, #0
 800dbe4:	341a      	adds	r4, #26
 800dbe6:	42b5      	cmp	r5, r6
 800dbe8:	d11a      	bne.n	800dc20 <_printf_common+0xc8>
 800dbea:	2000      	movs	r0, #0
 800dbec:	e008      	b.n	800dc00 <_printf_common+0xa8>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	4652      	mov	r2, sl
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	47c0      	blx	r8
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	d103      	bne.n	800dc04 <_printf_common+0xac>
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc04:	3501      	adds	r5, #1
 800dc06:	e7c6      	b.n	800db96 <_printf_common+0x3e>
 800dc08:	18e1      	adds	r1, r4, r3
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	2030      	movs	r0, #48	; 0x30
 800dc0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc12:	4422      	add	r2, r4
 800dc14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc1c:	3302      	adds	r3, #2
 800dc1e:	e7c7      	b.n	800dbb0 <_printf_common+0x58>
 800dc20:	2301      	movs	r3, #1
 800dc22:	4622      	mov	r2, r4
 800dc24:	4649      	mov	r1, r9
 800dc26:	4638      	mov	r0, r7
 800dc28:	47c0      	blx	r8
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	d0e6      	beq.n	800dbfc <_printf_common+0xa4>
 800dc2e:	3601      	adds	r6, #1
 800dc30:	e7d9      	b.n	800dbe6 <_printf_common+0x8e>
	...

0800dc34 <_printf_i>:
 800dc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc38:	7e0f      	ldrb	r7, [r1, #24]
 800dc3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc3c:	2f78      	cmp	r7, #120	; 0x78
 800dc3e:	4691      	mov	r9, r2
 800dc40:	4680      	mov	r8, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	469a      	mov	sl, r3
 800dc46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc4a:	d807      	bhi.n	800dc5c <_printf_i+0x28>
 800dc4c:	2f62      	cmp	r7, #98	; 0x62
 800dc4e:	d80a      	bhi.n	800dc66 <_printf_i+0x32>
 800dc50:	2f00      	cmp	r7, #0
 800dc52:	f000 80d4 	beq.w	800ddfe <_printf_i+0x1ca>
 800dc56:	2f58      	cmp	r7, #88	; 0x58
 800dc58:	f000 80c0 	beq.w	800dddc <_printf_i+0x1a8>
 800dc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc64:	e03a      	b.n	800dcdc <_printf_i+0xa8>
 800dc66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc6a:	2b15      	cmp	r3, #21
 800dc6c:	d8f6      	bhi.n	800dc5c <_printf_i+0x28>
 800dc6e:	a101      	add	r1, pc, #4	; (adr r1, 800dc74 <_printf_i+0x40>)
 800dc70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc74:	0800dccd 	.word	0x0800dccd
 800dc78:	0800dce1 	.word	0x0800dce1
 800dc7c:	0800dc5d 	.word	0x0800dc5d
 800dc80:	0800dc5d 	.word	0x0800dc5d
 800dc84:	0800dc5d 	.word	0x0800dc5d
 800dc88:	0800dc5d 	.word	0x0800dc5d
 800dc8c:	0800dce1 	.word	0x0800dce1
 800dc90:	0800dc5d 	.word	0x0800dc5d
 800dc94:	0800dc5d 	.word	0x0800dc5d
 800dc98:	0800dc5d 	.word	0x0800dc5d
 800dc9c:	0800dc5d 	.word	0x0800dc5d
 800dca0:	0800dde5 	.word	0x0800dde5
 800dca4:	0800dd0d 	.word	0x0800dd0d
 800dca8:	0800dd9f 	.word	0x0800dd9f
 800dcac:	0800dc5d 	.word	0x0800dc5d
 800dcb0:	0800dc5d 	.word	0x0800dc5d
 800dcb4:	0800de07 	.word	0x0800de07
 800dcb8:	0800dc5d 	.word	0x0800dc5d
 800dcbc:	0800dd0d 	.word	0x0800dd0d
 800dcc0:	0800dc5d 	.word	0x0800dc5d
 800dcc4:	0800dc5d 	.word	0x0800dc5d
 800dcc8:	0800dda7 	.word	0x0800dda7
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	1d1a      	adds	r2, r3, #4
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	602a      	str	r2, [r5, #0]
 800dcd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e09f      	b.n	800de20 <_printf_i+0x1ec>
 800dce0:	6820      	ldr	r0, [r4, #0]
 800dce2:	682b      	ldr	r3, [r5, #0]
 800dce4:	0607      	lsls	r7, r0, #24
 800dce6:	f103 0104 	add.w	r1, r3, #4
 800dcea:	6029      	str	r1, [r5, #0]
 800dcec:	d501      	bpl.n	800dcf2 <_printf_i+0xbe>
 800dcee:	681e      	ldr	r6, [r3, #0]
 800dcf0:	e003      	b.n	800dcfa <_printf_i+0xc6>
 800dcf2:	0646      	lsls	r6, r0, #25
 800dcf4:	d5fb      	bpl.n	800dcee <_printf_i+0xba>
 800dcf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	da03      	bge.n	800dd06 <_printf_i+0xd2>
 800dcfe:	232d      	movs	r3, #45	; 0x2d
 800dd00:	4276      	negs	r6, r6
 800dd02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd06:	485a      	ldr	r0, [pc, #360]	; (800de70 <_printf_i+0x23c>)
 800dd08:	230a      	movs	r3, #10
 800dd0a:	e012      	b.n	800dd32 <_printf_i+0xfe>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	6820      	ldr	r0, [r4, #0]
 800dd10:	1d19      	adds	r1, r3, #4
 800dd12:	6029      	str	r1, [r5, #0]
 800dd14:	0605      	lsls	r5, r0, #24
 800dd16:	d501      	bpl.n	800dd1c <_printf_i+0xe8>
 800dd18:	681e      	ldr	r6, [r3, #0]
 800dd1a:	e002      	b.n	800dd22 <_printf_i+0xee>
 800dd1c:	0641      	lsls	r1, r0, #25
 800dd1e:	d5fb      	bpl.n	800dd18 <_printf_i+0xe4>
 800dd20:	881e      	ldrh	r6, [r3, #0]
 800dd22:	4853      	ldr	r0, [pc, #332]	; (800de70 <_printf_i+0x23c>)
 800dd24:	2f6f      	cmp	r7, #111	; 0x6f
 800dd26:	bf0c      	ite	eq
 800dd28:	2308      	moveq	r3, #8
 800dd2a:	230a      	movne	r3, #10
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd32:	6865      	ldr	r5, [r4, #4]
 800dd34:	60a5      	str	r5, [r4, #8]
 800dd36:	2d00      	cmp	r5, #0
 800dd38:	bfa2      	ittt	ge
 800dd3a:	6821      	ldrge	r1, [r4, #0]
 800dd3c:	f021 0104 	bicge.w	r1, r1, #4
 800dd40:	6021      	strge	r1, [r4, #0]
 800dd42:	b90e      	cbnz	r6, 800dd48 <_printf_i+0x114>
 800dd44:	2d00      	cmp	r5, #0
 800dd46:	d04b      	beq.n	800dde0 <_printf_i+0x1ac>
 800dd48:	4615      	mov	r5, r2
 800dd4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd4e:	fb03 6711 	mls	r7, r3, r1, r6
 800dd52:	5dc7      	ldrb	r7, [r0, r7]
 800dd54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd58:	4637      	mov	r7, r6
 800dd5a:	42bb      	cmp	r3, r7
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	d9f4      	bls.n	800dd4a <_printf_i+0x116>
 800dd60:	2b08      	cmp	r3, #8
 800dd62:	d10b      	bne.n	800dd7c <_printf_i+0x148>
 800dd64:	6823      	ldr	r3, [r4, #0]
 800dd66:	07de      	lsls	r6, r3, #31
 800dd68:	d508      	bpl.n	800dd7c <_printf_i+0x148>
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	6861      	ldr	r1, [r4, #4]
 800dd6e:	4299      	cmp	r1, r3
 800dd70:	bfde      	ittt	le
 800dd72:	2330      	movle	r3, #48	; 0x30
 800dd74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dd7c:	1b52      	subs	r2, r2, r5
 800dd7e:	6122      	str	r2, [r4, #16]
 800dd80:	f8cd a000 	str.w	sl, [sp]
 800dd84:	464b      	mov	r3, r9
 800dd86:	aa03      	add	r2, sp, #12
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	f7ff fee4 	bl	800db58 <_printf_common>
 800dd90:	3001      	adds	r0, #1
 800dd92:	d14a      	bne.n	800de2a <_printf_i+0x1f6>
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd98:	b004      	add	sp, #16
 800dd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	f043 0320 	orr.w	r3, r3, #32
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	4833      	ldr	r0, [pc, #204]	; (800de74 <_printf_i+0x240>)
 800dda8:	2778      	movs	r7, #120	; 0x78
 800ddaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	6829      	ldr	r1, [r5, #0]
 800ddb2:	061f      	lsls	r7, r3, #24
 800ddb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ddb8:	d402      	bmi.n	800ddc0 <_printf_i+0x18c>
 800ddba:	065f      	lsls	r7, r3, #25
 800ddbc:	bf48      	it	mi
 800ddbe:	b2b6      	uxthmi	r6, r6
 800ddc0:	07df      	lsls	r7, r3, #31
 800ddc2:	bf48      	it	mi
 800ddc4:	f043 0320 	orrmi.w	r3, r3, #32
 800ddc8:	6029      	str	r1, [r5, #0]
 800ddca:	bf48      	it	mi
 800ddcc:	6023      	strmi	r3, [r4, #0]
 800ddce:	b91e      	cbnz	r6, 800ddd8 <_printf_i+0x1a4>
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	f023 0320 	bic.w	r3, r3, #32
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	2310      	movs	r3, #16
 800ddda:	e7a7      	b.n	800dd2c <_printf_i+0xf8>
 800dddc:	4824      	ldr	r0, [pc, #144]	; (800de70 <_printf_i+0x23c>)
 800ddde:	e7e4      	b.n	800ddaa <_printf_i+0x176>
 800dde0:	4615      	mov	r5, r2
 800dde2:	e7bd      	b.n	800dd60 <_printf_i+0x12c>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	6826      	ldr	r6, [r4, #0]
 800dde8:	6961      	ldr	r1, [r4, #20]
 800ddea:	1d18      	adds	r0, r3, #4
 800ddec:	6028      	str	r0, [r5, #0]
 800ddee:	0635      	lsls	r5, r6, #24
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	d501      	bpl.n	800ddf8 <_printf_i+0x1c4>
 800ddf4:	6019      	str	r1, [r3, #0]
 800ddf6:	e002      	b.n	800ddfe <_printf_i+0x1ca>
 800ddf8:	0670      	lsls	r0, r6, #25
 800ddfa:	d5fb      	bpl.n	800ddf4 <_printf_i+0x1c0>
 800ddfc:	8019      	strh	r1, [r3, #0]
 800ddfe:	2300      	movs	r3, #0
 800de00:	6123      	str	r3, [r4, #16]
 800de02:	4615      	mov	r5, r2
 800de04:	e7bc      	b.n	800dd80 <_printf_i+0x14c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	1d1a      	adds	r2, r3, #4
 800de0a:	602a      	str	r2, [r5, #0]
 800de0c:	681d      	ldr	r5, [r3, #0]
 800de0e:	6862      	ldr	r2, [r4, #4]
 800de10:	2100      	movs	r1, #0
 800de12:	4628      	mov	r0, r5
 800de14:	f7f2 f9fc 	bl	8000210 <memchr>
 800de18:	b108      	cbz	r0, 800de1e <_printf_i+0x1ea>
 800de1a:	1b40      	subs	r0, r0, r5
 800de1c:	6060      	str	r0, [r4, #4]
 800de1e:	6863      	ldr	r3, [r4, #4]
 800de20:	6123      	str	r3, [r4, #16]
 800de22:	2300      	movs	r3, #0
 800de24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de28:	e7aa      	b.n	800dd80 <_printf_i+0x14c>
 800de2a:	6923      	ldr	r3, [r4, #16]
 800de2c:	462a      	mov	r2, r5
 800de2e:	4649      	mov	r1, r9
 800de30:	4640      	mov	r0, r8
 800de32:	47d0      	blx	sl
 800de34:	3001      	adds	r0, #1
 800de36:	d0ad      	beq.n	800dd94 <_printf_i+0x160>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	079b      	lsls	r3, r3, #30
 800de3c:	d413      	bmi.n	800de66 <_printf_i+0x232>
 800de3e:	68e0      	ldr	r0, [r4, #12]
 800de40:	9b03      	ldr	r3, [sp, #12]
 800de42:	4298      	cmp	r0, r3
 800de44:	bfb8      	it	lt
 800de46:	4618      	movlt	r0, r3
 800de48:	e7a6      	b.n	800dd98 <_printf_i+0x164>
 800de4a:	2301      	movs	r3, #1
 800de4c:	4632      	mov	r2, r6
 800de4e:	4649      	mov	r1, r9
 800de50:	4640      	mov	r0, r8
 800de52:	47d0      	blx	sl
 800de54:	3001      	adds	r0, #1
 800de56:	d09d      	beq.n	800dd94 <_printf_i+0x160>
 800de58:	3501      	adds	r5, #1
 800de5a:	68e3      	ldr	r3, [r4, #12]
 800de5c:	9903      	ldr	r1, [sp, #12]
 800de5e:	1a5b      	subs	r3, r3, r1
 800de60:	42ab      	cmp	r3, r5
 800de62:	dcf2      	bgt.n	800de4a <_printf_i+0x216>
 800de64:	e7eb      	b.n	800de3e <_printf_i+0x20a>
 800de66:	2500      	movs	r5, #0
 800de68:	f104 0619 	add.w	r6, r4, #25
 800de6c:	e7f5      	b.n	800de5a <_printf_i+0x226>
 800de6e:	bf00      	nop
 800de70:	080119a6 	.word	0x080119a6
 800de74:	080119b7 	.word	0x080119b7

0800de78 <std>:
 800de78:	2300      	movs	r3, #0
 800de7a:	b510      	push	{r4, lr}
 800de7c:	4604      	mov	r4, r0
 800de7e:	e9c0 3300 	strd	r3, r3, [r0]
 800de82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de86:	6083      	str	r3, [r0, #8]
 800de88:	8181      	strh	r1, [r0, #12]
 800de8a:	6643      	str	r3, [r0, #100]	; 0x64
 800de8c:	81c2      	strh	r2, [r0, #14]
 800de8e:	6183      	str	r3, [r0, #24]
 800de90:	4619      	mov	r1, r3
 800de92:	2208      	movs	r2, #8
 800de94:	305c      	adds	r0, #92	; 0x5c
 800de96:	f000 f948 	bl	800e12a <memset>
 800de9a:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <std+0x58>)
 800de9c:	6263      	str	r3, [r4, #36]	; 0x24
 800de9e:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <std+0x5c>)
 800dea0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dea2:	4b0d      	ldr	r3, [pc, #52]	; (800ded8 <std+0x60>)
 800dea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <std+0x64>)
 800dea8:	6323      	str	r3, [r4, #48]	; 0x30
 800deaa:	4b0d      	ldr	r3, [pc, #52]	; (800dee0 <std+0x68>)
 800deac:	6224      	str	r4, [r4, #32]
 800deae:	429c      	cmp	r4, r3
 800deb0:	d006      	beq.n	800dec0 <std+0x48>
 800deb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800deb6:	4294      	cmp	r4, r2
 800deb8:	d002      	beq.n	800dec0 <std+0x48>
 800deba:	33d0      	adds	r3, #208	; 0xd0
 800debc:	429c      	cmp	r4, r3
 800debe:	d105      	bne.n	800decc <std+0x54>
 800dec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dec8:	f000 ba10 	b.w	800e2ec <__retarget_lock_init_recursive>
 800decc:	bd10      	pop	{r4, pc}
 800dece:	bf00      	nop
 800ded0:	0800e0a5 	.word	0x0800e0a5
 800ded4:	0800e0c7 	.word	0x0800e0c7
 800ded8:	0800e0ff 	.word	0x0800e0ff
 800dedc:	0800e123 	.word	0x0800e123
 800dee0:	20005c80 	.word	0x20005c80

0800dee4 <stdio_exit_handler>:
 800dee4:	4a02      	ldr	r2, [pc, #8]	; (800def0 <stdio_exit_handler+0xc>)
 800dee6:	4903      	ldr	r1, [pc, #12]	; (800def4 <stdio_exit_handler+0x10>)
 800dee8:	4803      	ldr	r0, [pc, #12]	; (800def8 <stdio_exit_handler+0x14>)
 800deea:	f000 b869 	b.w	800dfc0 <_fwalk_sglue>
 800deee:	bf00      	nop
 800def0:	2000002c 	.word	0x2000002c
 800def4:	0800fcb9 	.word	0x0800fcb9
 800def8:	20000038 	.word	0x20000038

0800defc <cleanup_stdio>:
 800defc:	6841      	ldr	r1, [r0, #4]
 800defe:	4b0c      	ldr	r3, [pc, #48]	; (800df30 <cleanup_stdio+0x34>)
 800df00:	4299      	cmp	r1, r3
 800df02:	b510      	push	{r4, lr}
 800df04:	4604      	mov	r4, r0
 800df06:	d001      	beq.n	800df0c <cleanup_stdio+0x10>
 800df08:	f001 fed6 	bl	800fcb8 <_fflush_r>
 800df0c:	68a1      	ldr	r1, [r4, #8]
 800df0e:	4b09      	ldr	r3, [pc, #36]	; (800df34 <cleanup_stdio+0x38>)
 800df10:	4299      	cmp	r1, r3
 800df12:	d002      	beq.n	800df1a <cleanup_stdio+0x1e>
 800df14:	4620      	mov	r0, r4
 800df16:	f001 fecf 	bl	800fcb8 <_fflush_r>
 800df1a:	68e1      	ldr	r1, [r4, #12]
 800df1c:	4b06      	ldr	r3, [pc, #24]	; (800df38 <cleanup_stdio+0x3c>)
 800df1e:	4299      	cmp	r1, r3
 800df20:	d004      	beq.n	800df2c <cleanup_stdio+0x30>
 800df22:	4620      	mov	r0, r4
 800df24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df28:	f001 bec6 	b.w	800fcb8 <_fflush_r>
 800df2c:	bd10      	pop	{r4, pc}
 800df2e:	bf00      	nop
 800df30:	20005c80 	.word	0x20005c80
 800df34:	20005ce8 	.word	0x20005ce8
 800df38:	20005d50 	.word	0x20005d50

0800df3c <global_stdio_init.part.0>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <global_stdio_init.part.0+0x30>)
 800df40:	4c0b      	ldr	r4, [pc, #44]	; (800df70 <global_stdio_init.part.0+0x34>)
 800df42:	4a0c      	ldr	r2, [pc, #48]	; (800df74 <global_stdio_init.part.0+0x38>)
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	4620      	mov	r0, r4
 800df48:	2200      	movs	r2, #0
 800df4a:	2104      	movs	r1, #4
 800df4c:	f7ff ff94 	bl	800de78 <std>
 800df50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df54:	2201      	movs	r2, #1
 800df56:	2109      	movs	r1, #9
 800df58:	f7ff ff8e 	bl	800de78 <std>
 800df5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df60:	2202      	movs	r2, #2
 800df62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df66:	2112      	movs	r1, #18
 800df68:	f7ff bf86 	b.w	800de78 <std>
 800df6c:	20005db8 	.word	0x20005db8
 800df70:	20005c80 	.word	0x20005c80
 800df74:	0800dee5 	.word	0x0800dee5

0800df78 <__sfp_lock_acquire>:
 800df78:	4801      	ldr	r0, [pc, #4]	; (800df80 <__sfp_lock_acquire+0x8>)
 800df7a:	f000 b9b8 	b.w	800e2ee <__retarget_lock_acquire_recursive>
 800df7e:	bf00      	nop
 800df80:	20005dc1 	.word	0x20005dc1

0800df84 <__sfp_lock_release>:
 800df84:	4801      	ldr	r0, [pc, #4]	; (800df8c <__sfp_lock_release+0x8>)
 800df86:	f000 b9b3 	b.w	800e2f0 <__retarget_lock_release_recursive>
 800df8a:	bf00      	nop
 800df8c:	20005dc1 	.word	0x20005dc1

0800df90 <__sinit>:
 800df90:	b510      	push	{r4, lr}
 800df92:	4604      	mov	r4, r0
 800df94:	f7ff fff0 	bl	800df78 <__sfp_lock_acquire>
 800df98:	6a23      	ldr	r3, [r4, #32]
 800df9a:	b11b      	cbz	r3, 800dfa4 <__sinit+0x14>
 800df9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa0:	f7ff bff0 	b.w	800df84 <__sfp_lock_release>
 800dfa4:	4b04      	ldr	r3, [pc, #16]	; (800dfb8 <__sinit+0x28>)
 800dfa6:	6223      	str	r3, [r4, #32]
 800dfa8:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <__sinit+0x2c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1f5      	bne.n	800df9c <__sinit+0xc>
 800dfb0:	f7ff ffc4 	bl	800df3c <global_stdio_init.part.0>
 800dfb4:	e7f2      	b.n	800df9c <__sinit+0xc>
 800dfb6:	bf00      	nop
 800dfb8:	0800defd 	.word	0x0800defd
 800dfbc:	20005db8 	.word	0x20005db8

0800dfc0 <_fwalk_sglue>:
 800dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	4688      	mov	r8, r1
 800dfc8:	4614      	mov	r4, r2
 800dfca:	2600      	movs	r6, #0
 800dfcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfd0:	f1b9 0901 	subs.w	r9, r9, #1
 800dfd4:	d505      	bpl.n	800dfe2 <_fwalk_sglue+0x22>
 800dfd6:	6824      	ldr	r4, [r4, #0]
 800dfd8:	2c00      	cmp	r4, #0
 800dfda:	d1f7      	bne.n	800dfcc <_fwalk_sglue+0xc>
 800dfdc:	4630      	mov	r0, r6
 800dfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfe2:	89ab      	ldrh	r3, [r5, #12]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d907      	bls.n	800dff8 <_fwalk_sglue+0x38>
 800dfe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfec:	3301      	adds	r3, #1
 800dfee:	d003      	beq.n	800dff8 <_fwalk_sglue+0x38>
 800dff0:	4629      	mov	r1, r5
 800dff2:	4638      	mov	r0, r7
 800dff4:	47c0      	blx	r8
 800dff6:	4306      	orrs	r6, r0
 800dff8:	3568      	adds	r5, #104	; 0x68
 800dffa:	e7e9      	b.n	800dfd0 <_fwalk_sglue+0x10>

0800dffc <sniprintf>:
 800dffc:	b40c      	push	{r2, r3}
 800dffe:	b530      	push	{r4, r5, lr}
 800e000:	4b17      	ldr	r3, [pc, #92]	; (800e060 <sniprintf+0x64>)
 800e002:	1e0c      	subs	r4, r1, #0
 800e004:	681d      	ldr	r5, [r3, #0]
 800e006:	b09d      	sub	sp, #116	; 0x74
 800e008:	da08      	bge.n	800e01c <sniprintf+0x20>
 800e00a:	238b      	movs	r3, #139	; 0x8b
 800e00c:	602b      	str	r3, [r5, #0]
 800e00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e012:	b01d      	add	sp, #116	; 0x74
 800e014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e018:	b002      	add	sp, #8
 800e01a:	4770      	bx	lr
 800e01c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e020:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e024:	bf14      	ite	ne
 800e026:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e02a:	4623      	moveq	r3, r4
 800e02c:	9304      	str	r3, [sp, #16]
 800e02e:	9307      	str	r3, [sp, #28]
 800e030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e034:	9002      	str	r0, [sp, #8]
 800e036:	9006      	str	r0, [sp, #24]
 800e038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e03c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e03e:	ab21      	add	r3, sp, #132	; 0x84
 800e040:	a902      	add	r1, sp, #8
 800e042:	4628      	mov	r0, r5
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	f001 fcb3 	bl	800f9b0 <_svfiprintf_r>
 800e04a:	1c43      	adds	r3, r0, #1
 800e04c:	bfbc      	itt	lt
 800e04e:	238b      	movlt	r3, #139	; 0x8b
 800e050:	602b      	strlt	r3, [r5, #0]
 800e052:	2c00      	cmp	r4, #0
 800e054:	d0dd      	beq.n	800e012 <sniprintf+0x16>
 800e056:	9b02      	ldr	r3, [sp, #8]
 800e058:	2200      	movs	r2, #0
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	e7d9      	b.n	800e012 <sniprintf+0x16>
 800e05e:	bf00      	nop
 800e060:	20000084 	.word	0x20000084

0800e064 <siprintf>:
 800e064:	b40e      	push	{r1, r2, r3}
 800e066:	b500      	push	{lr}
 800e068:	b09c      	sub	sp, #112	; 0x70
 800e06a:	ab1d      	add	r3, sp, #116	; 0x74
 800e06c:	9002      	str	r0, [sp, #8]
 800e06e:	9006      	str	r0, [sp, #24]
 800e070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e074:	4809      	ldr	r0, [pc, #36]	; (800e09c <siprintf+0x38>)
 800e076:	9107      	str	r1, [sp, #28]
 800e078:	9104      	str	r1, [sp, #16]
 800e07a:	4909      	ldr	r1, [pc, #36]	; (800e0a0 <siprintf+0x3c>)
 800e07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e080:	9105      	str	r1, [sp, #20]
 800e082:	6800      	ldr	r0, [r0, #0]
 800e084:	9301      	str	r3, [sp, #4]
 800e086:	a902      	add	r1, sp, #8
 800e088:	f001 fc92 	bl	800f9b0 <_svfiprintf_r>
 800e08c:	9b02      	ldr	r3, [sp, #8]
 800e08e:	2200      	movs	r2, #0
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	b01c      	add	sp, #112	; 0x70
 800e094:	f85d eb04 	ldr.w	lr, [sp], #4
 800e098:	b003      	add	sp, #12
 800e09a:	4770      	bx	lr
 800e09c:	20000084 	.word	0x20000084
 800e0a0:	ffff0208 	.word	0xffff0208

0800e0a4 <__sread>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ac:	f000 f8d0 	bl	800e250 <_read_r>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	bfab      	itete	ge
 800e0b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e0b8:	181b      	addge	r3, r3, r0
 800e0ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0be:	bfac      	ite	ge
 800e0c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0c2:	81a3      	strhlt	r3, [r4, #12]
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <__swrite>:
 800e0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ca:	461f      	mov	r7, r3
 800e0cc:	898b      	ldrh	r3, [r1, #12]
 800e0ce:	05db      	lsls	r3, r3, #23
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	d505      	bpl.n	800e0e4 <__swrite+0x1e>
 800e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0dc:	2302      	movs	r3, #2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f000 f8a4 	bl	800e22c <_lseek_r>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fa:	f000 b8bb 	b.w	800e274 <_write_r>

0800e0fe <__sseek>:
 800e0fe:	b510      	push	{r4, lr}
 800e100:	460c      	mov	r4, r1
 800e102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e106:	f000 f891 	bl	800e22c <_lseek_r>
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	bf15      	itete	ne
 800e110:	6560      	strne	r0, [r4, #84]	; 0x54
 800e112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e11a:	81a3      	strheq	r3, [r4, #12]
 800e11c:	bf18      	it	ne
 800e11e:	81a3      	strhne	r3, [r4, #12]
 800e120:	bd10      	pop	{r4, pc}

0800e122 <__sclose>:
 800e122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e126:	f000 b81b 	b.w	800e160 <_close_r>

0800e12a <memset>:
 800e12a:	4402      	add	r2, r0
 800e12c:	4603      	mov	r3, r0
 800e12e:	4293      	cmp	r3, r2
 800e130:	d100      	bne.n	800e134 <memset+0xa>
 800e132:	4770      	bx	lr
 800e134:	f803 1b01 	strb.w	r1, [r3], #1
 800e138:	e7f9      	b.n	800e12e <memset+0x4>

0800e13a <strcat>:
 800e13a:	b510      	push	{r4, lr}
 800e13c:	4602      	mov	r2, r0
 800e13e:	7814      	ldrb	r4, [r2, #0]
 800e140:	4613      	mov	r3, r2
 800e142:	3201      	adds	r2, #1
 800e144:	2c00      	cmp	r4, #0
 800e146:	d1fa      	bne.n	800e13e <strcat+0x4>
 800e148:	3b01      	subs	r3, #1
 800e14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e152:	2a00      	cmp	r2, #0
 800e154:	d1f9      	bne.n	800e14a <strcat+0x10>
 800e156:	bd10      	pop	{r4, pc}

0800e158 <_localeconv_r>:
 800e158:	4800      	ldr	r0, [pc, #0]	; (800e15c <_localeconv_r+0x4>)
 800e15a:	4770      	bx	lr
 800e15c:	20000178 	.word	0x20000178

0800e160 <_close_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d06      	ldr	r5, [pc, #24]	; (800e17c <_close_r+0x1c>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	602b      	str	r3, [r5, #0]
 800e16c:	f7f4 fa09 	bl	8002582 <_close>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_close_r+0x1a>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_close_r+0x1a>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	20005dbc 	.word	0x20005dbc

0800e180 <_reclaim_reent>:
 800e180:	4b29      	ldr	r3, [pc, #164]	; (800e228 <_reclaim_reent+0xa8>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4283      	cmp	r3, r0
 800e186:	b570      	push	{r4, r5, r6, lr}
 800e188:	4604      	mov	r4, r0
 800e18a:	d04b      	beq.n	800e224 <_reclaim_reent+0xa4>
 800e18c:	69c3      	ldr	r3, [r0, #28]
 800e18e:	b143      	cbz	r3, 800e1a2 <_reclaim_reent+0x22>
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d144      	bne.n	800e220 <_reclaim_reent+0xa0>
 800e196:	69e3      	ldr	r3, [r4, #28]
 800e198:	6819      	ldr	r1, [r3, #0]
 800e19a:	b111      	cbz	r1, 800e1a2 <_reclaim_reent+0x22>
 800e19c:	4620      	mov	r0, r4
 800e19e:	f000 ff31 	bl	800f004 <_free_r>
 800e1a2:	6961      	ldr	r1, [r4, #20]
 800e1a4:	b111      	cbz	r1, 800e1ac <_reclaim_reent+0x2c>
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f000 ff2c 	bl	800f004 <_free_r>
 800e1ac:	69e1      	ldr	r1, [r4, #28]
 800e1ae:	b111      	cbz	r1, 800e1b6 <_reclaim_reent+0x36>
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 ff27 	bl	800f004 <_free_r>
 800e1b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e1b8:	b111      	cbz	r1, 800e1c0 <_reclaim_reent+0x40>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f000 ff22 	bl	800f004 <_free_r>
 800e1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1c2:	b111      	cbz	r1, 800e1ca <_reclaim_reent+0x4a>
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 ff1d 	bl	800f004 <_free_r>
 800e1ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e1cc:	b111      	cbz	r1, 800e1d4 <_reclaim_reent+0x54>
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f000 ff18 	bl	800f004 <_free_r>
 800e1d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e1d6:	b111      	cbz	r1, 800e1de <_reclaim_reent+0x5e>
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f000 ff13 	bl	800f004 <_free_r>
 800e1de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e1e0:	b111      	cbz	r1, 800e1e8 <_reclaim_reent+0x68>
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f000 ff0e 	bl	800f004 <_free_r>
 800e1e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e1ea:	b111      	cbz	r1, 800e1f2 <_reclaim_reent+0x72>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f000 ff09 	bl	800f004 <_free_r>
 800e1f2:	6a23      	ldr	r3, [r4, #32]
 800e1f4:	b1b3      	cbz	r3, 800e224 <_reclaim_reent+0xa4>
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1fc:	4718      	bx	r3
 800e1fe:	5949      	ldr	r1, [r1, r5]
 800e200:	b941      	cbnz	r1, 800e214 <_reclaim_reent+0x94>
 800e202:	3504      	adds	r5, #4
 800e204:	69e3      	ldr	r3, [r4, #28]
 800e206:	2d80      	cmp	r5, #128	; 0x80
 800e208:	68d9      	ldr	r1, [r3, #12]
 800e20a:	d1f8      	bne.n	800e1fe <_reclaim_reent+0x7e>
 800e20c:	4620      	mov	r0, r4
 800e20e:	f000 fef9 	bl	800f004 <_free_r>
 800e212:	e7c0      	b.n	800e196 <_reclaim_reent+0x16>
 800e214:	680e      	ldr	r6, [r1, #0]
 800e216:	4620      	mov	r0, r4
 800e218:	f000 fef4 	bl	800f004 <_free_r>
 800e21c:	4631      	mov	r1, r6
 800e21e:	e7ef      	b.n	800e200 <_reclaim_reent+0x80>
 800e220:	2500      	movs	r5, #0
 800e222:	e7ef      	b.n	800e204 <_reclaim_reent+0x84>
 800e224:	bd70      	pop	{r4, r5, r6, pc}
 800e226:	bf00      	nop
 800e228:	20000084 	.word	0x20000084

0800e22c <_lseek_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d07      	ldr	r5, [pc, #28]	; (800e24c <_lseek_r+0x20>)
 800e230:	4604      	mov	r4, r0
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	2200      	movs	r2, #0
 800e238:	602a      	str	r2, [r5, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	f7f4 f9c8 	bl	80025d0 <_lseek>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_lseek_r+0x1e>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_lseek_r+0x1e>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20005dbc 	.word	0x20005dbc

0800e250 <_read_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d07      	ldr	r5, [pc, #28]	; (800e270 <_read_r+0x20>)
 800e254:	4604      	mov	r4, r0
 800e256:	4608      	mov	r0, r1
 800e258:	4611      	mov	r1, r2
 800e25a:	2200      	movs	r2, #0
 800e25c:	602a      	str	r2, [r5, #0]
 800e25e:	461a      	mov	r2, r3
 800e260:	f7f4 f956 	bl	8002510 <_read>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_read_r+0x1e>
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_read_r+0x1e>
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20005dbc 	.word	0x20005dbc

0800e274 <_write_r>:
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4d07      	ldr	r5, [pc, #28]	; (800e294 <_write_r+0x20>)
 800e278:	4604      	mov	r4, r0
 800e27a:	4608      	mov	r0, r1
 800e27c:	4611      	mov	r1, r2
 800e27e:	2200      	movs	r2, #0
 800e280:	602a      	str	r2, [r5, #0]
 800e282:	461a      	mov	r2, r3
 800e284:	f7f4 f961 	bl	800254a <_write>
 800e288:	1c43      	adds	r3, r0, #1
 800e28a:	d102      	bne.n	800e292 <_write_r+0x1e>
 800e28c:	682b      	ldr	r3, [r5, #0]
 800e28e:	b103      	cbz	r3, 800e292 <_write_r+0x1e>
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	20005dbc 	.word	0x20005dbc

0800e298 <__errno>:
 800e298:	4b01      	ldr	r3, [pc, #4]	; (800e2a0 <__errno+0x8>)
 800e29a:	6818      	ldr	r0, [r3, #0]
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	20000084 	.word	0x20000084

0800e2a4 <__libc_init_array>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	4d0d      	ldr	r5, [pc, #52]	; (800e2dc <__libc_init_array+0x38>)
 800e2a8:	4c0d      	ldr	r4, [pc, #52]	; (800e2e0 <__libc_init_array+0x3c>)
 800e2aa:	1b64      	subs	r4, r4, r5
 800e2ac:	10a4      	asrs	r4, r4, #2
 800e2ae:	2600      	movs	r6, #0
 800e2b0:	42a6      	cmp	r6, r4
 800e2b2:	d109      	bne.n	800e2c8 <__libc_init_array+0x24>
 800e2b4:	4d0b      	ldr	r5, [pc, #44]	; (800e2e4 <__libc_init_array+0x40>)
 800e2b6:	4c0c      	ldr	r4, [pc, #48]	; (800e2e8 <__libc_init_array+0x44>)
 800e2b8:	f003 f9d2 	bl	8011660 <_init>
 800e2bc:	1b64      	subs	r4, r4, r5
 800e2be:	10a4      	asrs	r4, r4, #2
 800e2c0:	2600      	movs	r6, #0
 800e2c2:	42a6      	cmp	r6, r4
 800e2c4:	d105      	bne.n	800e2d2 <__libc_init_array+0x2e>
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2cc:	4798      	blx	r3
 800e2ce:	3601      	adds	r6, #1
 800e2d0:	e7ee      	b.n	800e2b0 <__libc_init_array+0xc>
 800e2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2d6:	4798      	blx	r3
 800e2d8:	3601      	adds	r6, #1
 800e2da:	e7f2      	b.n	800e2c2 <__libc_init_array+0x1e>
 800e2dc:	08011d40 	.word	0x08011d40
 800e2e0:	08011d40 	.word	0x08011d40
 800e2e4:	08011d40 	.word	0x08011d40
 800e2e8:	08011d44 	.word	0x08011d44

0800e2ec <__retarget_lock_init_recursive>:
 800e2ec:	4770      	bx	lr

0800e2ee <__retarget_lock_acquire_recursive>:
 800e2ee:	4770      	bx	lr

0800e2f0 <__retarget_lock_release_recursive>:
 800e2f0:	4770      	bx	lr

0800e2f2 <memcpy>:
 800e2f2:	440a      	add	r2, r1
 800e2f4:	4291      	cmp	r1, r2
 800e2f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e2fa:	d100      	bne.n	800e2fe <memcpy+0xc>
 800e2fc:	4770      	bx	lr
 800e2fe:	b510      	push	{r4, lr}
 800e300:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e304:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e308:	4291      	cmp	r1, r2
 800e30a:	d1f9      	bne.n	800e300 <memcpy+0xe>
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <quorem>:
 800e30e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e312:	6903      	ldr	r3, [r0, #16]
 800e314:	690c      	ldr	r4, [r1, #16]
 800e316:	42a3      	cmp	r3, r4
 800e318:	4607      	mov	r7, r0
 800e31a:	db7e      	blt.n	800e41a <quorem+0x10c>
 800e31c:	3c01      	subs	r4, #1
 800e31e:	f101 0814 	add.w	r8, r1, #20
 800e322:	f100 0514 	add.w	r5, r0, #20
 800e326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e32a:	9301      	str	r3, [sp, #4]
 800e32c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e334:	3301      	adds	r3, #1
 800e336:	429a      	cmp	r2, r3
 800e338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e33c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e340:	fbb2 f6f3 	udiv	r6, r2, r3
 800e344:	d331      	bcc.n	800e3aa <quorem+0x9c>
 800e346:	f04f 0e00 	mov.w	lr, #0
 800e34a:	4640      	mov	r0, r8
 800e34c:	46ac      	mov	ip, r5
 800e34e:	46f2      	mov	sl, lr
 800e350:	f850 2b04 	ldr.w	r2, [r0], #4
 800e354:	b293      	uxth	r3, r2
 800e356:	fb06 e303 	mla	r3, r6, r3, lr
 800e35a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e35e:	0c1a      	lsrs	r2, r3, #16
 800e360:	b29b      	uxth	r3, r3
 800e362:	ebaa 0303 	sub.w	r3, sl, r3
 800e366:	f8dc a000 	ldr.w	sl, [ip]
 800e36a:	fa13 f38a 	uxtah	r3, r3, sl
 800e36e:	fb06 220e 	mla	r2, r6, lr, r2
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e37a:	b292      	uxth	r2, r2
 800e37c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e384:	f8bd 3000 	ldrh.w	r3, [sp]
 800e388:	4581      	cmp	r9, r0
 800e38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e38e:	f84c 3b04 	str.w	r3, [ip], #4
 800e392:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e396:	d2db      	bcs.n	800e350 <quorem+0x42>
 800e398:	f855 300b 	ldr.w	r3, [r5, fp]
 800e39c:	b92b      	cbnz	r3, 800e3aa <quorem+0x9c>
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	3b04      	subs	r3, #4
 800e3a2:	429d      	cmp	r5, r3
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	d32c      	bcc.n	800e402 <quorem+0xf4>
 800e3a8:	613c      	str	r4, [r7, #16]
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	f001 f9a6 	bl	800f6fc <__mcmp>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	db22      	blt.n	800e3fa <quorem+0xec>
 800e3b4:	3601      	adds	r6, #1
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3be:	f8d1 c000 	ldr.w	ip, [r1]
 800e3c2:	b293      	uxth	r3, r2
 800e3c4:	1ac3      	subs	r3, r0, r3
 800e3c6:	0c12      	lsrs	r2, r2, #16
 800e3c8:	fa13 f38c 	uxtah	r3, r3, ip
 800e3cc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e3d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3da:	45c1      	cmp	r9, r8
 800e3dc:	f841 3b04 	str.w	r3, [r1], #4
 800e3e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3e4:	d2e9      	bcs.n	800e3ba <quorem+0xac>
 800e3e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3ee:	b922      	cbnz	r2, 800e3fa <quorem+0xec>
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	429d      	cmp	r5, r3
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	d30a      	bcc.n	800e40e <quorem+0x100>
 800e3f8:	613c      	str	r4, [r7, #16]
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	b003      	add	sp, #12
 800e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e402:	6812      	ldr	r2, [r2, #0]
 800e404:	3b04      	subs	r3, #4
 800e406:	2a00      	cmp	r2, #0
 800e408:	d1ce      	bne.n	800e3a8 <quorem+0x9a>
 800e40a:	3c01      	subs	r4, #1
 800e40c:	e7c9      	b.n	800e3a2 <quorem+0x94>
 800e40e:	6812      	ldr	r2, [r2, #0]
 800e410:	3b04      	subs	r3, #4
 800e412:	2a00      	cmp	r2, #0
 800e414:	d1f0      	bne.n	800e3f8 <quorem+0xea>
 800e416:	3c01      	subs	r4, #1
 800e418:	e7eb      	b.n	800e3f2 <quorem+0xe4>
 800e41a:	2000      	movs	r0, #0
 800e41c:	e7ee      	b.n	800e3fc <quorem+0xee>
	...

0800e420 <_dtoa_r>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	ed2d 8b04 	vpush	{d8-d9}
 800e428:	69c5      	ldr	r5, [r0, #28]
 800e42a:	b093      	sub	sp, #76	; 0x4c
 800e42c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e430:	ec57 6b10 	vmov	r6, r7, d0
 800e434:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e438:	9107      	str	r1, [sp, #28]
 800e43a:	4604      	mov	r4, r0
 800e43c:	920a      	str	r2, [sp, #40]	; 0x28
 800e43e:	930d      	str	r3, [sp, #52]	; 0x34
 800e440:	b975      	cbnz	r5, 800e460 <_dtoa_r+0x40>
 800e442:	2010      	movs	r0, #16
 800e444:	f000 fe2a 	bl	800f09c <malloc>
 800e448:	4602      	mov	r2, r0
 800e44a:	61e0      	str	r0, [r4, #28]
 800e44c:	b920      	cbnz	r0, 800e458 <_dtoa_r+0x38>
 800e44e:	4bae      	ldr	r3, [pc, #696]	; (800e708 <_dtoa_r+0x2e8>)
 800e450:	21ef      	movs	r1, #239	; 0xef
 800e452:	48ae      	ldr	r0, [pc, #696]	; (800e70c <_dtoa_r+0x2ec>)
 800e454:	f001 fc82 	bl	800fd5c <__assert_func>
 800e458:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e45c:	6005      	str	r5, [r0, #0]
 800e45e:	60c5      	str	r5, [r0, #12]
 800e460:	69e3      	ldr	r3, [r4, #28]
 800e462:	6819      	ldr	r1, [r3, #0]
 800e464:	b151      	cbz	r1, 800e47c <_dtoa_r+0x5c>
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	604a      	str	r2, [r1, #4]
 800e46a:	2301      	movs	r3, #1
 800e46c:	4093      	lsls	r3, r2
 800e46e:	608b      	str	r3, [r1, #8]
 800e470:	4620      	mov	r0, r4
 800e472:	f000 ff07 	bl	800f284 <_Bfree>
 800e476:	69e3      	ldr	r3, [r4, #28]
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
 800e47c:	1e3b      	subs	r3, r7, #0
 800e47e:	bfbb      	ittet	lt
 800e480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e484:	9303      	strlt	r3, [sp, #12]
 800e486:	2300      	movge	r3, #0
 800e488:	2201      	movlt	r2, #1
 800e48a:	bfac      	ite	ge
 800e48c:	f8c8 3000 	strge.w	r3, [r8]
 800e490:	f8c8 2000 	strlt.w	r2, [r8]
 800e494:	4b9e      	ldr	r3, [pc, #632]	; (800e710 <_dtoa_r+0x2f0>)
 800e496:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e49a:	ea33 0308 	bics.w	r3, r3, r8
 800e49e:	d11b      	bne.n	800e4d8 <_dtoa_r+0xb8>
 800e4a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e4ac:	4333      	orrs	r3, r6
 800e4ae:	f000 8593 	beq.w	800efd8 <_dtoa_r+0xbb8>
 800e4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4b4:	b963      	cbnz	r3, 800e4d0 <_dtoa_r+0xb0>
 800e4b6:	4b97      	ldr	r3, [pc, #604]	; (800e714 <_dtoa_r+0x2f4>)
 800e4b8:	e027      	b.n	800e50a <_dtoa_r+0xea>
 800e4ba:	4b97      	ldr	r3, [pc, #604]	; (800e718 <_dtoa_r+0x2f8>)
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	3308      	adds	r3, #8
 800e4c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	9800      	ldr	r0, [sp, #0]
 800e4c6:	b013      	add	sp, #76	; 0x4c
 800e4c8:	ecbd 8b04 	vpop	{d8-d9}
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	4b90      	ldr	r3, [pc, #576]	; (800e714 <_dtoa_r+0x2f4>)
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	3303      	adds	r3, #3
 800e4d6:	e7f3      	b.n	800e4c0 <_dtoa_r+0xa0>
 800e4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	ec51 0b17 	vmov	r0, r1, d7
 800e4e2:	eeb0 8a47 	vmov.f32	s16, s14
 800e4e6:	eef0 8a67 	vmov.f32	s17, s15
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f7f2 fb0c 	bl	8000b08 <__aeabi_dcmpeq>
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	b160      	cbz	r0, 800e50e <_dtoa_r+0xee>
 800e4f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 8568 	beq.w	800efd2 <_dtoa_r+0xbb2>
 800e502:	4b86      	ldr	r3, [pc, #536]	; (800e71c <_dtoa_r+0x2fc>)
 800e504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	3b01      	subs	r3, #1
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	e7da      	b.n	800e4c4 <_dtoa_r+0xa4>
 800e50e:	aa10      	add	r2, sp, #64	; 0x40
 800e510:	a911      	add	r1, sp, #68	; 0x44
 800e512:	4620      	mov	r0, r4
 800e514:	eeb0 0a48 	vmov.f32	s0, s16
 800e518:	eef0 0a68 	vmov.f32	s1, s17
 800e51c:	f001 f994 	bl	800f848 <__d2b>
 800e520:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e524:	4682      	mov	sl, r0
 800e526:	2d00      	cmp	r5, #0
 800e528:	d07f      	beq.n	800e62a <_dtoa_r+0x20a>
 800e52a:	ee18 3a90 	vmov	r3, s17
 800e52e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e532:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e536:	ec51 0b18 	vmov	r0, r1, d8
 800e53a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e542:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e546:	4619      	mov	r1, r3
 800e548:	2200      	movs	r2, #0
 800e54a:	4b75      	ldr	r3, [pc, #468]	; (800e720 <_dtoa_r+0x300>)
 800e54c:	f7f1 febc 	bl	80002c8 <__aeabi_dsub>
 800e550:	a367      	add	r3, pc, #412	; (adr r3, 800e6f0 <_dtoa_r+0x2d0>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	f7f2 f86f 	bl	8000638 <__aeabi_dmul>
 800e55a:	a367      	add	r3, pc, #412	; (adr r3, 800e6f8 <_dtoa_r+0x2d8>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f1 feb4 	bl	80002cc <__adddf3>
 800e564:	4606      	mov	r6, r0
 800e566:	4628      	mov	r0, r5
 800e568:	460f      	mov	r7, r1
 800e56a:	f7f1 fffb 	bl	8000564 <__aeabi_i2d>
 800e56e:	a364      	add	r3, pc, #400	; (adr r3, 800e700 <_dtoa_r+0x2e0>)
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	f7f2 f860 	bl	8000638 <__aeabi_dmul>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	4630      	mov	r0, r6
 800e57e:	4639      	mov	r1, r7
 800e580:	f7f1 fea4 	bl	80002cc <__adddf3>
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	f7f2 fb06 	bl	8000b98 <__aeabi_d2iz>
 800e58c:	2200      	movs	r2, #0
 800e58e:	4683      	mov	fp, r0
 800e590:	2300      	movs	r3, #0
 800e592:	4630      	mov	r0, r6
 800e594:	4639      	mov	r1, r7
 800e596:	f7f2 fac1 	bl	8000b1c <__aeabi_dcmplt>
 800e59a:	b148      	cbz	r0, 800e5b0 <_dtoa_r+0x190>
 800e59c:	4658      	mov	r0, fp
 800e59e:	f7f1 ffe1 	bl	8000564 <__aeabi_i2d>
 800e5a2:	4632      	mov	r2, r6
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	f7f2 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 800e5aa:	b908      	cbnz	r0, 800e5b0 <_dtoa_r+0x190>
 800e5ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5b0:	f1bb 0f16 	cmp.w	fp, #22
 800e5b4:	d857      	bhi.n	800e666 <_dtoa_r+0x246>
 800e5b6:	4b5b      	ldr	r3, [pc, #364]	; (800e724 <_dtoa_r+0x304>)
 800e5b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	ec51 0b18 	vmov	r0, r1, d8
 800e5c4:	f7f2 faaa 	bl	8000b1c <__aeabi_dcmplt>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d04e      	beq.n	800e66a <_dtoa_r+0x24a>
 800e5cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	930c      	str	r3, [sp, #48]	; 0x30
 800e5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5d6:	1b5b      	subs	r3, r3, r5
 800e5d8:	1e5a      	subs	r2, r3, #1
 800e5da:	bf45      	ittet	mi
 800e5dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800e5e0:	9305      	strmi	r3, [sp, #20]
 800e5e2:	2300      	movpl	r3, #0
 800e5e4:	2300      	movmi	r3, #0
 800e5e6:	9206      	str	r2, [sp, #24]
 800e5e8:	bf54      	ite	pl
 800e5ea:	9305      	strpl	r3, [sp, #20]
 800e5ec:	9306      	strmi	r3, [sp, #24]
 800e5ee:	f1bb 0f00 	cmp.w	fp, #0
 800e5f2:	db3c      	blt.n	800e66e <_dtoa_r+0x24e>
 800e5f4:	9b06      	ldr	r3, [sp, #24]
 800e5f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e5fa:	445b      	add	r3, fp
 800e5fc:	9306      	str	r3, [sp, #24]
 800e5fe:	2300      	movs	r3, #0
 800e600:	9308      	str	r3, [sp, #32]
 800e602:	9b07      	ldr	r3, [sp, #28]
 800e604:	2b09      	cmp	r3, #9
 800e606:	d868      	bhi.n	800e6da <_dtoa_r+0x2ba>
 800e608:	2b05      	cmp	r3, #5
 800e60a:	bfc4      	itt	gt
 800e60c:	3b04      	subgt	r3, #4
 800e60e:	9307      	strgt	r3, [sp, #28]
 800e610:	9b07      	ldr	r3, [sp, #28]
 800e612:	f1a3 0302 	sub.w	r3, r3, #2
 800e616:	bfcc      	ite	gt
 800e618:	2500      	movgt	r5, #0
 800e61a:	2501      	movle	r5, #1
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	f200 8085 	bhi.w	800e72c <_dtoa_r+0x30c>
 800e622:	e8df f003 	tbb	[pc, r3]
 800e626:	3b2e      	.short	0x3b2e
 800e628:	5839      	.short	0x5839
 800e62a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e62e:	441d      	add	r5, r3
 800e630:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e634:	2b20      	cmp	r3, #32
 800e636:	bfc1      	itttt	gt
 800e638:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e63c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e640:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e644:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e648:	bfd6      	itet	le
 800e64a:	f1c3 0320 	rsble	r3, r3, #32
 800e64e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e652:	fa06 f003 	lslle.w	r0, r6, r3
 800e656:	f7f1 ff75 	bl	8000544 <__aeabi_ui2d>
 800e65a:	2201      	movs	r2, #1
 800e65c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e660:	3d01      	subs	r5, #1
 800e662:	920e      	str	r2, [sp, #56]	; 0x38
 800e664:	e76f      	b.n	800e546 <_dtoa_r+0x126>
 800e666:	2301      	movs	r3, #1
 800e668:	e7b3      	b.n	800e5d2 <_dtoa_r+0x1b2>
 800e66a:	900c      	str	r0, [sp, #48]	; 0x30
 800e66c:	e7b2      	b.n	800e5d4 <_dtoa_r+0x1b4>
 800e66e:	9b05      	ldr	r3, [sp, #20]
 800e670:	eba3 030b 	sub.w	r3, r3, fp
 800e674:	9305      	str	r3, [sp, #20]
 800e676:	f1cb 0300 	rsb	r3, fp, #0
 800e67a:	9308      	str	r3, [sp, #32]
 800e67c:	2300      	movs	r3, #0
 800e67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e680:	e7bf      	b.n	800e602 <_dtoa_r+0x1e2>
 800e682:	2300      	movs	r3, #0
 800e684:	9309      	str	r3, [sp, #36]	; 0x24
 800e686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dc52      	bgt.n	800e732 <_dtoa_r+0x312>
 800e68c:	2301      	movs	r3, #1
 800e68e:	9301      	str	r3, [sp, #4]
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	461a      	mov	r2, r3
 800e694:	920a      	str	r2, [sp, #40]	; 0x28
 800e696:	e00b      	b.n	800e6b0 <_dtoa_r+0x290>
 800e698:	2301      	movs	r3, #1
 800e69a:	e7f3      	b.n	800e684 <_dtoa_r+0x264>
 800e69c:	2300      	movs	r3, #0
 800e69e:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a2:	445b      	add	r3, fp
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	9304      	str	r3, [sp, #16]
 800e6ac:	bfb8      	it	lt
 800e6ae:	2301      	movlt	r3, #1
 800e6b0:	69e0      	ldr	r0, [r4, #28]
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	2204      	movs	r2, #4
 800e6b6:	f102 0614 	add.w	r6, r2, #20
 800e6ba:	429e      	cmp	r6, r3
 800e6bc:	d93d      	bls.n	800e73a <_dtoa_r+0x31a>
 800e6be:	6041      	str	r1, [r0, #4]
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 fd9f 	bl	800f204 <_Balloc>
 800e6c6:	9000      	str	r0, [sp, #0]
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d139      	bne.n	800e740 <_dtoa_r+0x320>
 800e6cc:	4b16      	ldr	r3, [pc, #88]	; (800e728 <_dtoa_r+0x308>)
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	f240 11af 	movw	r1, #431	; 0x1af
 800e6d4:	e6bd      	b.n	800e452 <_dtoa_r+0x32>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e7e1      	b.n	800e69e <_dtoa_r+0x27e>
 800e6da:	2501      	movs	r5, #1
 800e6dc:	2300      	movs	r3, #0
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	9509      	str	r5, [sp, #36]	; 0x24
 800e6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6e6:	9301      	str	r3, [sp, #4]
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	2312      	movs	r3, #18
 800e6ee:	e7d1      	b.n	800e694 <_dtoa_r+0x274>
 800e6f0:	636f4361 	.word	0x636f4361
 800e6f4:	3fd287a7 	.word	0x3fd287a7
 800e6f8:	8b60c8b3 	.word	0x8b60c8b3
 800e6fc:	3fc68a28 	.word	0x3fc68a28
 800e700:	509f79fb 	.word	0x509f79fb
 800e704:	3fd34413 	.word	0x3fd34413
 800e708:	080119d5 	.word	0x080119d5
 800e70c:	080119ec 	.word	0x080119ec
 800e710:	7ff00000 	.word	0x7ff00000
 800e714:	080119d1 	.word	0x080119d1
 800e718:	080119c8 	.word	0x080119c8
 800e71c:	080119a5 	.word	0x080119a5
 800e720:	3ff80000 	.word	0x3ff80000
 800e724:	08011ad8 	.word	0x08011ad8
 800e728:	08011a44 	.word	0x08011a44
 800e72c:	2301      	movs	r3, #1
 800e72e:	9309      	str	r3, [sp, #36]	; 0x24
 800e730:	e7d7      	b.n	800e6e2 <_dtoa_r+0x2c2>
 800e732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	e7ba      	b.n	800e6b0 <_dtoa_r+0x290>
 800e73a:	3101      	adds	r1, #1
 800e73c:	0052      	lsls	r2, r2, #1
 800e73e:	e7ba      	b.n	800e6b6 <_dtoa_r+0x296>
 800e740:	69e3      	ldr	r3, [r4, #28]
 800e742:	9a00      	ldr	r2, [sp, #0]
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	9b04      	ldr	r3, [sp, #16]
 800e748:	2b0e      	cmp	r3, #14
 800e74a:	f200 80a8 	bhi.w	800e89e <_dtoa_r+0x47e>
 800e74e:	2d00      	cmp	r5, #0
 800e750:	f000 80a5 	beq.w	800e89e <_dtoa_r+0x47e>
 800e754:	f1bb 0f00 	cmp.w	fp, #0
 800e758:	dd38      	ble.n	800e7cc <_dtoa_r+0x3ac>
 800e75a:	4bc0      	ldr	r3, [pc, #768]	; (800ea5c <_dtoa_r+0x63c>)
 800e75c:	f00b 020f 	and.w	r2, fp, #15
 800e760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e764:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e768:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e76c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e770:	d019      	beq.n	800e7a6 <_dtoa_r+0x386>
 800e772:	4bbb      	ldr	r3, [pc, #748]	; (800ea60 <_dtoa_r+0x640>)
 800e774:	ec51 0b18 	vmov	r0, r1, d8
 800e778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e77c:	f7f2 f886 	bl	800088c <__aeabi_ddiv>
 800e780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e784:	f008 080f 	and.w	r8, r8, #15
 800e788:	2503      	movs	r5, #3
 800e78a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ea60 <_dtoa_r+0x640>
 800e78e:	f1b8 0f00 	cmp.w	r8, #0
 800e792:	d10a      	bne.n	800e7aa <_dtoa_r+0x38a>
 800e794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e798:	4632      	mov	r2, r6
 800e79a:	463b      	mov	r3, r7
 800e79c:	f7f2 f876 	bl	800088c <__aeabi_ddiv>
 800e7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7a4:	e02b      	b.n	800e7fe <_dtoa_r+0x3de>
 800e7a6:	2502      	movs	r5, #2
 800e7a8:	e7ef      	b.n	800e78a <_dtoa_r+0x36a>
 800e7aa:	f018 0f01 	tst.w	r8, #1
 800e7ae:	d008      	beq.n	800e7c2 <_dtoa_r+0x3a2>
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7b8:	f7f1 ff3e 	bl	8000638 <__aeabi_dmul>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7c6:	f109 0908 	add.w	r9, r9, #8
 800e7ca:	e7e0      	b.n	800e78e <_dtoa_r+0x36e>
 800e7cc:	f000 809f 	beq.w	800e90e <_dtoa_r+0x4ee>
 800e7d0:	f1cb 0600 	rsb	r6, fp, #0
 800e7d4:	4ba1      	ldr	r3, [pc, #644]	; (800ea5c <_dtoa_r+0x63c>)
 800e7d6:	4fa2      	ldr	r7, [pc, #648]	; (800ea60 <_dtoa_r+0x640>)
 800e7d8:	f006 020f 	and.w	r2, r6, #15
 800e7dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	ec51 0b18 	vmov	r0, r1, d8
 800e7e8:	f7f1 ff26 	bl	8000638 <__aeabi_dmul>
 800e7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7f0:	1136      	asrs	r6, r6, #4
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	2502      	movs	r5, #2
 800e7f6:	2e00      	cmp	r6, #0
 800e7f8:	d17e      	bne.n	800e8f8 <_dtoa_r+0x4d8>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1d0      	bne.n	800e7a0 <_dtoa_r+0x380>
 800e7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e800:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f000 8084 	beq.w	800e912 <_dtoa_r+0x4f2>
 800e80a:	4b96      	ldr	r3, [pc, #600]	; (800ea64 <_dtoa_r+0x644>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	4640      	mov	r0, r8
 800e810:	4649      	mov	r1, r9
 800e812:	f7f2 f983 	bl	8000b1c <__aeabi_dcmplt>
 800e816:	2800      	cmp	r0, #0
 800e818:	d07b      	beq.n	800e912 <_dtoa_r+0x4f2>
 800e81a:	9b04      	ldr	r3, [sp, #16]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d078      	beq.n	800e912 <_dtoa_r+0x4f2>
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	dd39      	ble.n	800e89a <_dtoa_r+0x47a>
 800e826:	4b90      	ldr	r3, [pc, #576]	; (800ea68 <_dtoa_r+0x648>)
 800e828:	2200      	movs	r2, #0
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f1 ff03 	bl	8000638 <__aeabi_dmul>
 800e832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e836:	9e01      	ldr	r6, [sp, #4]
 800e838:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e83c:	3501      	adds	r5, #1
 800e83e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e842:	4628      	mov	r0, r5
 800e844:	f7f1 fe8e 	bl	8000564 <__aeabi_i2d>
 800e848:	4642      	mov	r2, r8
 800e84a:	464b      	mov	r3, r9
 800e84c:	f7f1 fef4 	bl	8000638 <__aeabi_dmul>
 800e850:	4b86      	ldr	r3, [pc, #536]	; (800ea6c <_dtoa_r+0x64c>)
 800e852:	2200      	movs	r2, #0
 800e854:	f7f1 fd3a 	bl	80002cc <__adddf3>
 800e858:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e860:	9303      	str	r3, [sp, #12]
 800e862:	2e00      	cmp	r6, #0
 800e864:	d158      	bne.n	800e918 <_dtoa_r+0x4f8>
 800e866:	4b82      	ldr	r3, [pc, #520]	; (800ea70 <_dtoa_r+0x650>)
 800e868:	2200      	movs	r2, #0
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7f1 fd2b 	bl	80002c8 <__aeabi_dsub>
 800e872:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e876:	4680      	mov	r8, r0
 800e878:	4689      	mov	r9, r1
 800e87a:	f7f2 f96d 	bl	8000b58 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	f040 8296 	bne.w	800edb0 <_dtoa_r+0x990>
 800e884:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e888:	4640      	mov	r0, r8
 800e88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e88e:	4649      	mov	r1, r9
 800e890:	f7f2 f944 	bl	8000b1c <__aeabi_dcmplt>
 800e894:	2800      	cmp	r0, #0
 800e896:	f040 8289 	bne.w	800edac <_dtoa_r+0x98c>
 800e89a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f2c0 814e 	blt.w	800eb42 <_dtoa_r+0x722>
 800e8a6:	f1bb 0f0e 	cmp.w	fp, #14
 800e8aa:	f300 814a 	bgt.w	800eb42 <_dtoa_r+0x722>
 800e8ae:	4b6b      	ldr	r3, [pc, #428]	; (800ea5c <_dtoa_r+0x63c>)
 800e8b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f280 80dc 	bge.w	800ea78 <_dtoa_r+0x658>
 800e8c0:	9b04      	ldr	r3, [sp, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f300 80d8 	bgt.w	800ea78 <_dtoa_r+0x658>
 800e8c8:	f040 826f 	bne.w	800edaa <_dtoa_r+0x98a>
 800e8cc:	4b68      	ldr	r3, [pc, #416]	; (800ea70 <_dtoa_r+0x650>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	f7f1 feb0 	bl	8000638 <__aeabi_dmul>
 800e8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8dc:	f7f2 f932 	bl	8000b44 <__aeabi_dcmpge>
 800e8e0:	9e04      	ldr	r6, [sp, #16]
 800e8e2:	4637      	mov	r7, r6
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f040 8245 	bne.w	800ed74 <_dtoa_r+0x954>
 800e8ea:	9d00      	ldr	r5, [sp, #0]
 800e8ec:	2331      	movs	r3, #49	; 0x31
 800e8ee:	f805 3b01 	strb.w	r3, [r5], #1
 800e8f2:	f10b 0b01 	add.w	fp, fp, #1
 800e8f6:	e241      	b.n	800ed7c <_dtoa_r+0x95c>
 800e8f8:	07f2      	lsls	r2, r6, #31
 800e8fa:	d505      	bpl.n	800e908 <_dtoa_r+0x4e8>
 800e8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e900:	f7f1 fe9a 	bl	8000638 <__aeabi_dmul>
 800e904:	3501      	adds	r5, #1
 800e906:	2301      	movs	r3, #1
 800e908:	1076      	asrs	r6, r6, #1
 800e90a:	3708      	adds	r7, #8
 800e90c:	e773      	b.n	800e7f6 <_dtoa_r+0x3d6>
 800e90e:	2502      	movs	r5, #2
 800e910:	e775      	b.n	800e7fe <_dtoa_r+0x3de>
 800e912:	9e04      	ldr	r6, [sp, #16]
 800e914:	465f      	mov	r7, fp
 800e916:	e792      	b.n	800e83e <_dtoa_r+0x41e>
 800e918:	9900      	ldr	r1, [sp, #0]
 800e91a:	4b50      	ldr	r3, [pc, #320]	; (800ea5c <_dtoa_r+0x63c>)
 800e91c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e920:	4431      	add	r1, r6
 800e922:	9102      	str	r1, [sp, #8]
 800e924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e926:	eeb0 9a47 	vmov.f32	s18, s14
 800e92a:	eef0 9a67 	vmov.f32	s19, s15
 800e92e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e932:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e936:	2900      	cmp	r1, #0
 800e938:	d044      	beq.n	800e9c4 <_dtoa_r+0x5a4>
 800e93a:	494e      	ldr	r1, [pc, #312]	; (800ea74 <_dtoa_r+0x654>)
 800e93c:	2000      	movs	r0, #0
 800e93e:	f7f1 ffa5 	bl	800088c <__aeabi_ddiv>
 800e942:	ec53 2b19 	vmov	r2, r3, d9
 800e946:	f7f1 fcbf 	bl	80002c8 <__aeabi_dsub>
 800e94a:	9d00      	ldr	r5, [sp, #0]
 800e94c:	ec41 0b19 	vmov	d9, r0, r1
 800e950:	4649      	mov	r1, r9
 800e952:	4640      	mov	r0, r8
 800e954:	f7f2 f920 	bl	8000b98 <__aeabi_d2iz>
 800e958:	4606      	mov	r6, r0
 800e95a:	f7f1 fe03 	bl	8000564 <__aeabi_i2d>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4640      	mov	r0, r8
 800e964:	4649      	mov	r1, r9
 800e966:	f7f1 fcaf 	bl	80002c8 <__aeabi_dsub>
 800e96a:	3630      	adds	r6, #48	; 0x30
 800e96c:	f805 6b01 	strb.w	r6, [r5], #1
 800e970:	ec53 2b19 	vmov	r2, r3, d9
 800e974:	4680      	mov	r8, r0
 800e976:	4689      	mov	r9, r1
 800e978:	f7f2 f8d0 	bl	8000b1c <__aeabi_dcmplt>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d164      	bne.n	800ea4a <_dtoa_r+0x62a>
 800e980:	4642      	mov	r2, r8
 800e982:	464b      	mov	r3, r9
 800e984:	4937      	ldr	r1, [pc, #220]	; (800ea64 <_dtoa_r+0x644>)
 800e986:	2000      	movs	r0, #0
 800e988:	f7f1 fc9e 	bl	80002c8 <__aeabi_dsub>
 800e98c:	ec53 2b19 	vmov	r2, r3, d9
 800e990:	f7f2 f8c4 	bl	8000b1c <__aeabi_dcmplt>
 800e994:	2800      	cmp	r0, #0
 800e996:	f040 80b6 	bne.w	800eb06 <_dtoa_r+0x6e6>
 800e99a:	9b02      	ldr	r3, [sp, #8]
 800e99c:	429d      	cmp	r5, r3
 800e99e:	f43f af7c 	beq.w	800e89a <_dtoa_r+0x47a>
 800e9a2:	4b31      	ldr	r3, [pc, #196]	; (800ea68 <_dtoa_r+0x648>)
 800e9a4:	ec51 0b19 	vmov	r0, r1, d9
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f7f1 fe45 	bl	8000638 <__aeabi_dmul>
 800e9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ea68 <_dtoa_r+0x648>)
 800e9b0:	ec41 0b19 	vmov	d9, r0, r1
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f1 fe3d 	bl	8000638 <__aeabi_dmul>
 800e9be:	4680      	mov	r8, r0
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	e7c5      	b.n	800e950 <_dtoa_r+0x530>
 800e9c4:	ec51 0b17 	vmov	r0, r1, d7
 800e9c8:	f7f1 fe36 	bl	8000638 <__aeabi_dmul>
 800e9cc:	9b02      	ldr	r3, [sp, #8]
 800e9ce:	9d00      	ldr	r5, [sp, #0]
 800e9d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9d2:	ec41 0b19 	vmov	d9, r0, r1
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f7f2 f8dd 	bl	8000b98 <__aeabi_d2iz>
 800e9de:	4606      	mov	r6, r0
 800e9e0:	f7f1 fdc0 	bl	8000564 <__aeabi_i2d>
 800e9e4:	3630      	adds	r6, #48	; 0x30
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	f7f1 fc6b 	bl	80002c8 <__aeabi_dsub>
 800e9f2:	f805 6b01 	strb.w	r6, [r5], #1
 800e9f6:	9b02      	ldr	r3, [sp, #8]
 800e9f8:	429d      	cmp	r5, r3
 800e9fa:	4680      	mov	r8, r0
 800e9fc:	4689      	mov	r9, r1
 800e9fe:	f04f 0200 	mov.w	r2, #0
 800ea02:	d124      	bne.n	800ea4e <_dtoa_r+0x62e>
 800ea04:	4b1b      	ldr	r3, [pc, #108]	; (800ea74 <_dtoa_r+0x654>)
 800ea06:	ec51 0b19 	vmov	r0, r1, d9
 800ea0a:	f7f1 fc5f 	bl	80002cc <__adddf3>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	f7f2 f89f 	bl	8000b58 <__aeabi_dcmpgt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d173      	bne.n	800eb06 <_dtoa_r+0x6e6>
 800ea1e:	ec53 2b19 	vmov	r2, r3, d9
 800ea22:	4914      	ldr	r1, [pc, #80]	; (800ea74 <_dtoa_r+0x654>)
 800ea24:	2000      	movs	r0, #0
 800ea26:	f7f1 fc4f 	bl	80002c8 <__aeabi_dsub>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4640      	mov	r0, r8
 800ea30:	4649      	mov	r1, r9
 800ea32:	f7f2 f873 	bl	8000b1c <__aeabi_dcmplt>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	f43f af2f 	beq.w	800e89a <_dtoa_r+0x47a>
 800ea3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea3e:	1e6b      	subs	r3, r5, #1
 800ea40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea46:	2b30      	cmp	r3, #48	; 0x30
 800ea48:	d0f8      	beq.n	800ea3c <_dtoa_r+0x61c>
 800ea4a:	46bb      	mov	fp, r7
 800ea4c:	e04a      	b.n	800eae4 <_dtoa_r+0x6c4>
 800ea4e:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <_dtoa_r+0x648>)
 800ea50:	f7f1 fdf2 	bl	8000638 <__aeabi_dmul>
 800ea54:	4680      	mov	r8, r0
 800ea56:	4689      	mov	r9, r1
 800ea58:	e7bd      	b.n	800e9d6 <_dtoa_r+0x5b6>
 800ea5a:	bf00      	nop
 800ea5c:	08011ad8 	.word	0x08011ad8
 800ea60:	08011ab0 	.word	0x08011ab0
 800ea64:	3ff00000 	.word	0x3ff00000
 800ea68:	40240000 	.word	0x40240000
 800ea6c:	401c0000 	.word	0x401c0000
 800ea70:	40140000 	.word	0x40140000
 800ea74:	3fe00000 	.word	0x3fe00000
 800ea78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea7c:	9d00      	ldr	r5, [sp, #0]
 800ea7e:	4642      	mov	r2, r8
 800ea80:	464b      	mov	r3, r9
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f1 ff01 	bl	800088c <__aeabi_ddiv>
 800ea8a:	f7f2 f885 	bl	8000b98 <__aeabi_d2iz>
 800ea8e:	9001      	str	r0, [sp, #4]
 800ea90:	f7f1 fd68 	bl	8000564 <__aeabi_i2d>
 800ea94:	4642      	mov	r2, r8
 800ea96:	464b      	mov	r3, r9
 800ea98:	f7f1 fdce 	bl	8000638 <__aeabi_dmul>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fc10 	bl	80002c8 <__aeabi_dsub>
 800eaa8:	9e01      	ldr	r6, [sp, #4]
 800eaaa:	9f04      	ldr	r7, [sp, #16]
 800eaac:	3630      	adds	r6, #48	; 0x30
 800eaae:	f805 6b01 	strb.w	r6, [r5], #1
 800eab2:	9e00      	ldr	r6, [sp, #0]
 800eab4:	1bae      	subs	r6, r5, r6
 800eab6:	42b7      	cmp	r7, r6
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	d134      	bne.n	800eb28 <_dtoa_r+0x708>
 800eabe:	f7f1 fc05 	bl	80002cc <__adddf3>
 800eac2:	4642      	mov	r2, r8
 800eac4:	464b      	mov	r3, r9
 800eac6:	4606      	mov	r6, r0
 800eac8:	460f      	mov	r7, r1
 800eaca:	f7f2 f845 	bl	8000b58 <__aeabi_dcmpgt>
 800eace:	b9c8      	cbnz	r0, 800eb04 <_dtoa_r+0x6e4>
 800ead0:	4642      	mov	r2, r8
 800ead2:	464b      	mov	r3, r9
 800ead4:	4630      	mov	r0, r6
 800ead6:	4639      	mov	r1, r7
 800ead8:	f7f2 f816 	bl	8000b08 <__aeabi_dcmpeq>
 800eadc:	b110      	cbz	r0, 800eae4 <_dtoa_r+0x6c4>
 800eade:	9b01      	ldr	r3, [sp, #4]
 800eae0:	07db      	lsls	r3, r3, #31
 800eae2:	d40f      	bmi.n	800eb04 <_dtoa_r+0x6e4>
 800eae4:	4651      	mov	r1, sl
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 fbcc 	bl	800f284 <_Bfree>
 800eaec:	2300      	movs	r3, #0
 800eaee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eaf0:	702b      	strb	r3, [r5, #0]
 800eaf2:	f10b 0301 	add.w	r3, fp, #1
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f43f ace2 	beq.w	800e4c4 <_dtoa_r+0xa4>
 800eb00:	601d      	str	r5, [r3, #0]
 800eb02:	e4df      	b.n	800e4c4 <_dtoa_r+0xa4>
 800eb04:	465f      	mov	r7, fp
 800eb06:	462b      	mov	r3, r5
 800eb08:	461d      	mov	r5, r3
 800eb0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb0e:	2a39      	cmp	r2, #57	; 0x39
 800eb10:	d106      	bne.n	800eb20 <_dtoa_r+0x700>
 800eb12:	9a00      	ldr	r2, [sp, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d1f7      	bne.n	800eb08 <_dtoa_r+0x6e8>
 800eb18:	9900      	ldr	r1, [sp, #0]
 800eb1a:	2230      	movs	r2, #48	; 0x30
 800eb1c:	3701      	adds	r7, #1
 800eb1e:	700a      	strb	r2, [r1, #0]
 800eb20:	781a      	ldrb	r2, [r3, #0]
 800eb22:	3201      	adds	r2, #1
 800eb24:	701a      	strb	r2, [r3, #0]
 800eb26:	e790      	b.n	800ea4a <_dtoa_r+0x62a>
 800eb28:	4ba3      	ldr	r3, [pc, #652]	; (800edb8 <_dtoa_r+0x998>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f7f1 fd84 	bl	8000638 <__aeabi_dmul>
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	4606      	mov	r6, r0
 800eb36:	460f      	mov	r7, r1
 800eb38:	f7f1 ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d09e      	beq.n	800ea7e <_dtoa_r+0x65e>
 800eb40:	e7d0      	b.n	800eae4 <_dtoa_r+0x6c4>
 800eb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb44:	2a00      	cmp	r2, #0
 800eb46:	f000 80ca 	beq.w	800ecde <_dtoa_r+0x8be>
 800eb4a:	9a07      	ldr	r2, [sp, #28]
 800eb4c:	2a01      	cmp	r2, #1
 800eb4e:	f300 80ad 	bgt.w	800ecac <_dtoa_r+0x88c>
 800eb52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	f000 80a5 	beq.w	800eca4 <_dtoa_r+0x884>
 800eb5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb5e:	9e08      	ldr	r6, [sp, #32]
 800eb60:	9d05      	ldr	r5, [sp, #20]
 800eb62:	9a05      	ldr	r2, [sp, #20]
 800eb64:	441a      	add	r2, r3
 800eb66:	9205      	str	r2, [sp, #20]
 800eb68:	9a06      	ldr	r2, [sp, #24]
 800eb6a:	2101      	movs	r1, #1
 800eb6c:	441a      	add	r2, r3
 800eb6e:	4620      	mov	r0, r4
 800eb70:	9206      	str	r2, [sp, #24]
 800eb72:	f000 fc3d 	bl	800f3f0 <__i2b>
 800eb76:	4607      	mov	r7, r0
 800eb78:	b165      	cbz	r5, 800eb94 <_dtoa_r+0x774>
 800eb7a:	9b06      	ldr	r3, [sp, #24]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	dd09      	ble.n	800eb94 <_dtoa_r+0x774>
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	9a05      	ldr	r2, [sp, #20]
 800eb84:	bfa8      	it	ge
 800eb86:	462b      	movge	r3, r5
 800eb88:	1ad2      	subs	r2, r2, r3
 800eb8a:	9205      	str	r2, [sp, #20]
 800eb8c:	9a06      	ldr	r2, [sp, #24]
 800eb8e:	1aed      	subs	r5, r5, r3
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	9306      	str	r3, [sp, #24]
 800eb94:	9b08      	ldr	r3, [sp, #32]
 800eb96:	b1f3      	cbz	r3, 800ebd6 <_dtoa_r+0x7b6>
 800eb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f000 80a3 	beq.w	800ece6 <_dtoa_r+0x8c6>
 800eba0:	2e00      	cmp	r6, #0
 800eba2:	dd10      	ble.n	800ebc6 <_dtoa_r+0x7a6>
 800eba4:	4639      	mov	r1, r7
 800eba6:	4632      	mov	r2, r6
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f000 fce1 	bl	800f570 <__pow5mult>
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4601      	mov	r1, r0
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f000 fc31 	bl	800f41c <__multiply>
 800ebba:	4651      	mov	r1, sl
 800ebbc:	4680      	mov	r8, r0
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fb60 	bl	800f284 <_Bfree>
 800ebc4:	46c2      	mov	sl, r8
 800ebc6:	9b08      	ldr	r3, [sp, #32]
 800ebc8:	1b9a      	subs	r2, r3, r6
 800ebca:	d004      	beq.n	800ebd6 <_dtoa_r+0x7b6>
 800ebcc:	4651      	mov	r1, sl
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 fcce 	bl	800f570 <__pow5mult>
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	2101      	movs	r1, #1
 800ebd8:	4620      	mov	r0, r4
 800ebda:	f000 fc09 	bl	800f3f0 <__i2b>
 800ebde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	f340 8081 	ble.w	800ecea <_dtoa_r+0x8ca>
 800ebe8:	461a      	mov	r2, r3
 800ebea:	4601      	mov	r1, r0
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 fcbf 	bl	800f570 <__pow5mult>
 800ebf2:	9b07      	ldr	r3, [sp, #28]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	dd7a      	ble.n	800ecf0 <_dtoa_r+0x8d0>
 800ebfa:	f04f 0800 	mov.w	r8, #0
 800ebfe:	6933      	ldr	r3, [r6, #16]
 800ec00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec04:	6918      	ldr	r0, [r3, #16]
 800ec06:	f000 fba5 	bl	800f354 <__hi0bits>
 800ec0a:	f1c0 0020 	rsb	r0, r0, #32
 800ec0e:	9b06      	ldr	r3, [sp, #24]
 800ec10:	4418      	add	r0, r3
 800ec12:	f010 001f 	ands.w	r0, r0, #31
 800ec16:	f000 8094 	beq.w	800ed42 <_dtoa_r+0x922>
 800ec1a:	f1c0 0320 	rsb	r3, r0, #32
 800ec1e:	2b04      	cmp	r3, #4
 800ec20:	f340 8085 	ble.w	800ed2e <_dtoa_r+0x90e>
 800ec24:	9b05      	ldr	r3, [sp, #20]
 800ec26:	f1c0 001c 	rsb	r0, r0, #28
 800ec2a:	4403      	add	r3, r0
 800ec2c:	9305      	str	r3, [sp, #20]
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	4403      	add	r3, r0
 800ec32:	4405      	add	r5, r0
 800ec34:	9306      	str	r3, [sp, #24]
 800ec36:	9b05      	ldr	r3, [sp, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	dd05      	ble.n	800ec48 <_dtoa_r+0x828>
 800ec3c:	4651      	mov	r1, sl
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 fcef 	bl	800f624 <__lshift>
 800ec46:	4682      	mov	sl, r0
 800ec48:	9b06      	ldr	r3, [sp, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dd05      	ble.n	800ec5a <_dtoa_r+0x83a>
 800ec4e:	4631      	mov	r1, r6
 800ec50:	461a      	mov	r2, r3
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fce6 	bl	800f624 <__lshift>
 800ec58:	4606      	mov	r6, r0
 800ec5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d072      	beq.n	800ed46 <_dtoa_r+0x926>
 800ec60:	4631      	mov	r1, r6
 800ec62:	4650      	mov	r0, sl
 800ec64:	f000 fd4a 	bl	800f6fc <__mcmp>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	da6c      	bge.n	800ed46 <_dtoa_r+0x926>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4651      	mov	r1, sl
 800ec70:	220a      	movs	r2, #10
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 fb28 	bl	800f2c8 <__multadd>
 800ec78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ec7e:	4682      	mov	sl, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 81b0 	beq.w	800efe6 <_dtoa_r+0xbc6>
 800ec86:	2300      	movs	r3, #0
 800ec88:	4639      	mov	r1, r7
 800ec8a:	220a      	movs	r2, #10
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fb1b 	bl	800f2c8 <__multadd>
 800ec92:	9b01      	ldr	r3, [sp, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	4607      	mov	r7, r0
 800ec98:	f300 8096 	bgt.w	800edc8 <_dtoa_r+0x9a8>
 800ec9c:	9b07      	ldr	r3, [sp, #28]
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	dc59      	bgt.n	800ed56 <_dtoa_r+0x936>
 800eca2:	e091      	b.n	800edc8 <_dtoa_r+0x9a8>
 800eca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecaa:	e758      	b.n	800eb5e <_dtoa_r+0x73e>
 800ecac:	9b04      	ldr	r3, [sp, #16]
 800ecae:	1e5e      	subs	r6, r3, #1
 800ecb0:	9b08      	ldr	r3, [sp, #32]
 800ecb2:	42b3      	cmp	r3, r6
 800ecb4:	bfbf      	itttt	lt
 800ecb6:	9b08      	ldrlt	r3, [sp, #32]
 800ecb8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ecba:	9608      	strlt	r6, [sp, #32]
 800ecbc:	1af3      	sublt	r3, r6, r3
 800ecbe:	bfb4      	ite	lt
 800ecc0:	18d2      	addlt	r2, r2, r3
 800ecc2:	1b9e      	subge	r6, r3, r6
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	bfbc      	itt	lt
 800ecc8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ecca:	2600      	movlt	r6, #0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	bfb7      	itett	lt
 800ecd0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ecd4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ecd8:	1a9d      	sublt	r5, r3, r2
 800ecda:	2300      	movlt	r3, #0
 800ecdc:	e741      	b.n	800eb62 <_dtoa_r+0x742>
 800ecde:	9e08      	ldr	r6, [sp, #32]
 800ece0:	9d05      	ldr	r5, [sp, #20]
 800ece2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ece4:	e748      	b.n	800eb78 <_dtoa_r+0x758>
 800ece6:	9a08      	ldr	r2, [sp, #32]
 800ece8:	e770      	b.n	800ebcc <_dtoa_r+0x7ac>
 800ecea:	9b07      	ldr	r3, [sp, #28]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	dc19      	bgt.n	800ed24 <_dtoa_r+0x904>
 800ecf0:	9b02      	ldr	r3, [sp, #8]
 800ecf2:	b9bb      	cbnz	r3, 800ed24 <_dtoa_r+0x904>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecfa:	b99b      	cbnz	r3, 800ed24 <_dtoa_r+0x904>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	b183      	cbz	r3, 800ed2a <_dtoa_r+0x90a>
 800ed08:	9b05      	ldr	r3, [sp, #20]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	9305      	str	r3, [sp, #20]
 800ed0e:	9b06      	ldr	r3, [sp, #24]
 800ed10:	3301      	adds	r3, #1
 800ed12:	9306      	str	r3, [sp, #24]
 800ed14:	f04f 0801 	mov.w	r8, #1
 800ed18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f47f af6f 	bne.w	800ebfe <_dtoa_r+0x7de>
 800ed20:	2001      	movs	r0, #1
 800ed22:	e774      	b.n	800ec0e <_dtoa_r+0x7ee>
 800ed24:	f04f 0800 	mov.w	r8, #0
 800ed28:	e7f6      	b.n	800ed18 <_dtoa_r+0x8f8>
 800ed2a:	4698      	mov	r8, r3
 800ed2c:	e7f4      	b.n	800ed18 <_dtoa_r+0x8f8>
 800ed2e:	d082      	beq.n	800ec36 <_dtoa_r+0x816>
 800ed30:	9a05      	ldr	r2, [sp, #20]
 800ed32:	331c      	adds	r3, #28
 800ed34:	441a      	add	r2, r3
 800ed36:	9205      	str	r2, [sp, #20]
 800ed38:	9a06      	ldr	r2, [sp, #24]
 800ed3a:	441a      	add	r2, r3
 800ed3c:	441d      	add	r5, r3
 800ed3e:	9206      	str	r2, [sp, #24]
 800ed40:	e779      	b.n	800ec36 <_dtoa_r+0x816>
 800ed42:	4603      	mov	r3, r0
 800ed44:	e7f4      	b.n	800ed30 <_dtoa_r+0x910>
 800ed46:	9b04      	ldr	r3, [sp, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dc37      	bgt.n	800edbc <_dtoa_r+0x99c>
 800ed4c:	9b07      	ldr	r3, [sp, #28]
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	dd34      	ble.n	800edbc <_dtoa_r+0x99c>
 800ed52:	9b04      	ldr	r3, [sp, #16]
 800ed54:	9301      	str	r3, [sp, #4]
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	b963      	cbnz	r3, 800ed74 <_dtoa_r+0x954>
 800ed5a:	4631      	mov	r1, r6
 800ed5c:	2205      	movs	r2, #5
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 fab2 	bl	800f2c8 <__multadd>
 800ed64:	4601      	mov	r1, r0
 800ed66:	4606      	mov	r6, r0
 800ed68:	4650      	mov	r0, sl
 800ed6a:	f000 fcc7 	bl	800f6fc <__mcmp>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f73f adbb 	bgt.w	800e8ea <_dtoa_r+0x4ca>
 800ed74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed76:	9d00      	ldr	r5, [sp, #0]
 800ed78:	ea6f 0b03 	mvn.w	fp, r3
 800ed7c:	f04f 0800 	mov.w	r8, #0
 800ed80:	4631      	mov	r1, r6
 800ed82:	4620      	mov	r0, r4
 800ed84:	f000 fa7e 	bl	800f284 <_Bfree>
 800ed88:	2f00      	cmp	r7, #0
 800ed8a:	f43f aeab 	beq.w	800eae4 <_dtoa_r+0x6c4>
 800ed8e:	f1b8 0f00 	cmp.w	r8, #0
 800ed92:	d005      	beq.n	800eda0 <_dtoa_r+0x980>
 800ed94:	45b8      	cmp	r8, r7
 800ed96:	d003      	beq.n	800eda0 <_dtoa_r+0x980>
 800ed98:	4641      	mov	r1, r8
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fa72 	bl	800f284 <_Bfree>
 800eda0:	4639      	mov	r1, r7
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fa6e 	bl	800f284 <_Bfree>
 800eda8:	e69c      	b.n	800eae4 <_dtoa_r+0x6c4>
 800edaa:	2600      	movs	r6, #0
 800edac:	4637      	mov	r7, r6
 800edae:	e7e1      	b.n	800ed74 <_dtoa_r+0x954>
 800edb0:	46bb      	mov	fp, r7
 800edb2:	4637      	mov	r7, r6
 800edb4:	e599      	b.n	800e8ea <_dtoa_r+0x4ca>
 800edb6:	bf00      	nop
 800edb8:	40240000 	.word	0x40240000
 800edbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 80c8 	beq.w	800ef54 <_dtoa_r+0xb34>
 800edc4:	9b04      	ldr	r3, [sp, #16]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	2d00      	cmp	r5, #0
 800edca:	dd05      	ble.n	800edd8 <_dtoa_r+0x9b8>
 800edcc:	4639      	mov	r1, r7
 800edce:	462a      	mov	r2, r5
 800edd0:	4620      	mov	r0, r4
 800edd2:	f000 fc27 	bl	800f624 <__lshift>
 800edd6:	4607      	mov	r7, r0
 800edd8:	f1b8 0f00 	cmp.w	r8, #0
 800eddc:	d05b      	beq.n	800ee96 <_dtoa_r+0xa76>
 800edde:	6879      	ldr	r1, [r7, #4]
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fa0f 	bl	800f204 <_Balloc>
 800ede6:	4605      	mov	r5, r0
 800ede8:	b928      	cbnz	r0, 800edf6 <_dtoa_r+0x9d6>
 800edea:	4b83      	ldr	r3, [pc, #524]	; (800eff8 <_dtoa_r+0xbd8>)
 800edec:	4602      	mov	r2, r0
 800edee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800edf2:	f7ff bb2e 	b.w	800e452 <_dtoa_r+0x32>
 800edf6:	693a      	ldr	r2, [r7, #16]
 800edf8:	3202      	adds	r2, #2
 800edfa:	0092      	lsls	r2, r2, #2
 800edfc:	f107 010c 	add.w	r1, r7, #12
 800ee00:	300c      	adds	r0, #12
 800ee02:	f7ff fa76 	bl	800e2f2 <memcpy>
 800ee06:	2201      	movs	r2, #1
 800ee08:	4629      	mov	r1, r5
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 fc0a 	bl	800f624 <__lshift>
 800ee10:	9b00      	ldr	r3, [sp, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	9304      	str	r3, [sp, #16]
 800ee16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	9308      	str	r3, [sp, #32]
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	46b8      	mov	r8, r7
 800ee26:	9306      	str	r3, [sp, #24]
 800ee28:	4607      	mov	r7, r0
 800ee2a:	9b04      	ldr	r3, [sp, #16]
 800ee2c:	4631      	mov	r1, r6
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	4650      	mov	r0, sl
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	f7ff fa6b 	bl	800e30e <quorem>
 800ee38:	4641      	mov	r1, r8
 800ee3a:	9002      	str	r0, [sp, #8]
 800ee3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee40:	4650      	mov	r0, sl
 800ee42:	f000 fc5b 	bl	800f6fc <__mcmp>
 800ee46:	463a      	mov	r2, r7
 800ee48:	9005      	str	r0, [sp, #20]
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 fc71 	bl	800f734 <__mdiff>
 800ee52:	68c2      	ldr	r2, [r0, #12]
 800ee54:	4605      	mov	r5, r0
 800ee56:	bb02      	cbnz	r2, 800ee9a <_dtoa_r+0xa7a>
 800ee58:	4601      	mov	r1, r0
 800ee5a:	4650      	mov	r0, sl
 800ee5c:	f000 fc4e 	bl	800f6fc <__mcmp>
 800ee60:	4602      	mov	r2, r0
 800ee62:	4629      	mov	r1, r5
 800ee64:	4620      	mov	r0, r4
 800ee66:	9209      	str	r2, [sp, #36]	; 0x24
 800ee68:	f000 fa0c 	bl	800f284 <_Bfree>
 800ee6c:	9b07      	ldr	r3, [sp, #28]
 800ee6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee70:	9d04      	ldr	r5, [sp, #16]
 800ee72:	ea43 0102 	orr.w	r1, r3, r2
 800ee76:	9b06      	ldr	r3, [sp, #24]
 800ee78:	4319      	orrs	r1, r3
 800ee7a:	d110      	bne.n	800ee9e <_dtoa_r+0xa7e>
 800ee7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee80:	d029      	beq.n	800eed6 <_dtoa_r+0xab6>
 800ee82:	9b05      	ldr	r3, [sp, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dd02      	ble.n	800ee8e <_dtoa_r+0xa6e>
 800ee88:	9b02      	ldr	r3, [sp, #8]
 800ee8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	f883 9000 	strb.w	r9, [r3]
 800ee94:	e774      	b.n	800ed80 <_dtoa_r+0x960>
 800ee96:	4638      	mov	r0, r7
 800ee98:	e7ba      	b.n	800ee10 <_dtoa_r+0x9f0>
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	e7e1      	b.n	800ee62 <_dtoa_r+0xa42>
 800ee9e:	9b05      	ldr	r3, [sp, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	db04      	blt.n	800eeae <_dtoa_r+0xa8e>
 800eea4:	9907      	ldr	r1, [sp, #28]
 800eea6:	430b      	orrs	r3, r1
 800eea8:	9906      	ldr	r1, [sp, #24]
 800eeaa:	430b      	orrs	r3, r1
 800eeac:	d120      	bne.n	800eef0 <_dtoa_r+0xad0>
 800eeae:	2a00      	cmp	r2, #0
 800eeb0:	dded      	ble.n	800ee8e <_dtoa_r+0xa6e>
 800eeb2:	4651      	mov	r1, sl
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 fbb4 	bl	800f624 <__lshift>
 800eebc:	4631      	mov	r1, r6
 800eebe:	4682      	mov	sl, r0
 800eec0:	f000 fc1c 	bl	800f6fc <__mcmp>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	dc03      	bgt.n	800eed0 <_dtoa_r+0xab0>
 800eec8:	d1e1      	bne.n	800ee8e <_dtoa_r+0xa6e>
 800eeca:	f019 0f01 	tst.w	r9, #1
 800eece:	d0de      	beq.n	800ee8e <_dtoa_r+0xa6e>
 800eed0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eed4:	d1d8      	bne.n	800ee88 <_dtoa_r+0xa68>
 800eed6:	9a01      	ldr	r2, [sp, #4]
 800eed8:	2339      	movs	r3, #57	; 0x39
 800eeda:	7013      	strb	r3, [r2, #0]
 800eedc:	462b      	mov	r3, r5
 800eede:	461d      	mov	r5, r3
 800eee0:	3b01      	subs	r3, #1
 800eee2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eee6:	2a39      	cmp	r2, #57	; 0x39
 800eee8:	d06c      	beq.n	800efc4 <_dtoa_r+0xba4>
 800eeea:	3201      	adds	r2, #1
 800eeec:	701a      	strb	r2, [r3, #0]
 800eeee:	e747      	b.n	800ed80 <_dtoa_r+0x960>
 800eef0:	2a00      	cmp	r2, #0
 800eef2:	dd07      	ble.n	800ef04 <_dtoa_r+0xae4>
 800eef4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eef8:	d0ed      	beq.n	800eed6 <_dtoa_r+0xab6>
 800eefa:	9a01      	ldr	r2, [sp, #4]
 800eefc:	f109 0301 	add.w	r3, r9, #1
 800ef00:	7013      	strb	r3, [r2, #0]
 800ef02:	e73d      	b.n	800ed80 <_dtoa_r+0x960>
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	9a08      	ldr	r2, [sp, #32]
 800ef08:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d043      	beq.n	800ef98 <_dtoa_r+0xb78>
 800ef10:	4651      	mov	r1, sl
 800ef12:	2300      	movs	r3, #0
 800ef14:	220a      	movs	r2, #10
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 f9d6 	bl	800f2c8 <__multadd>
 800ef1c:	45b8      	cmp	r8, r7
 800ef1e:	4682      	mov	sl, r0
 800ef20:	f04f 0300 	mov.w	r3, #0
 800ef24:	f04f 020a 	mov.w	r2, #10
 800ef28:	4641      	mov	r1, r8
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	d107      	bne.n	800ef3e <_dtoa_r+0xb1e>
 800ef2e:	f000 f9cb 	bl	800f2c8 <__multadd>
 800ef32:	4680      	mov	r8, r0
 800ef34:	4607      	mov	r7, r0
 800ef36:	9b04      	ldr	r3, [sp, #16]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	9304      	str	r3, [sp, #16]
 800ef3c:	e775      	b.n	800ee2a <_dtoa_r+0xa0a>
 800ef3e:	f000 f9c3 	bl	800f2c8 <__multadd>
 800ef42:	4639      	mov	r1, r7
 800ef44:	4680      	mov	r8, r0
 800ef46:	2300      	movs	r3, #0
 800ef48:	220a      	movs	r2, #10
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 f9bc 	bl	800f2c8 <__multadd>
 800ef50:	4607      	mov	r7, r0
 800ef52:	e7f0      	b.n	800ef36 <_dtoa_r+0xb16>
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	9301      	str	r3, [sp, #4]
 800ef58:	9d00      	ldr	r5, [sp, #0]
 800ef5a:	4631      	mov	r1, r6
 800ef5c:	4650      	mov	r0, sl
 800ef5e:	f7ff f9d6 	bl	800e30e <quorem>
 800ef62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	f805 9b01 	strb.w	r9, [r5], #1
 800ef6c:	1aea      	subs	r2, r5, r3
 800ef6e:	9b01      	ldr	r3, [sp, #4]
 800ef70:	4293      	cmp	r3, r2
 800ef72:	dd07      	ble.n	800ef84 <_dtoa_r+0xb64>
 800ef74:	4651      	mov	r1, sl
 800ef76:	2300      	movs	r3, #0
 800ef78:	220a      	movs	r2, #10
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 f9a4 	bl	800f2c8 <__multadd>
 800ef80:	4682      	mov	sl, r0
 800ef82:	e7ea      	b.n	800ef5a <_dtoa_r+0xb3a>
 800ef84:	9b01      	ldr	r3, [sp, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	bfc8      	it	gt
 800ef8a:	461d      	movgt	r5, r3
 800ef8c:	9b00      	ldr	r3, [sp, #0]
 800ef8e:	bfd8      	it	le
 800ef90:	2501      	movle	r5, #1
 800ef92:	441d      	add	r5, r3
 800ef94:	f04f 0800 	mov.w	r8, #0
 800ef98:	4651      	mov	r1, sl
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 fb41 	bl	800f624 <__lshift>
 800efa2:	4631      	mov	r1, r6
 800efa4:	4682      	mov	sl, r0
 800efa6:	f000 fba9 	bl	800f6fc <__mcmp>
 800efaa:	2800      	cmp	r0, #0
 800efac:	dc96      	bgt.n	800eedc <_dtoa_r+0xabc>
 800efae:	d102      	bne.n	800efb6 <_dtoa_r+0xb96>
 800efb0:	f019 0f01 	tst.w	r9, #1
 800efb4:	d192      	bne.n	800eedc <_dtoa_r+0xabc>
 800efb6:	462b      	mov	r3, r5
 800efb8:	461d      	mov	r5, r3
 800efba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efbe:	2a30      	cmp	r2, #48	; 0x30
 800efc0:	d0fa      	beq.n	800efb8 <_dtoa_r+0xb98>
 800efc2:	e6dd      	b.n	800ed80 <_dtoa_r+0x960>
 800efc4:	9a00      	ldr	r2, [sp, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d189      	bne.n	800eede <_dtoa_r+0xabe>
 800efca:	f10b 0b01 	add.w	fp, fp, #1
 800efce:	2331      	movs	r3, #49	; 0x31
 800efd0:	e796      	b.n	800ef00 <_dtoa_r+0xae0>
 800efd2:	4b0a      	ldr	r3, [pc, #40]	; (800effc <_dtoa_r+0xbdc>)
 800efd4:	f7ff ba99 	b.w	800e50a <_dtoa_r+0xea>
 800efd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f47f aa6d 	bne.w	800e4ba <_dtoa_r+0x9a>
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <_dtoa_r+0xbe0>)
 800efe2:	f7ff ba92 	b.w	800e50a <_dtoa_r+0xea>
 800efe6:	9b01      	ldr	r3, [sp, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dcb5      	bgt.n	800ef58 <_dtoa_r+0xb38>
 800efec:	9b07      	ldr	r3, [sp, #28]
 800efee:	2b02      	cmp	r3, #2
 800eff0:	f73f aeb1 	bgt.w	800ed56 <_dtoa_r+0x936>
 800eff4:	e7b0      	b.n	800ef58 <_dtoa_r+0xb38>
 800eff6:	bf00      	nop
 800eff8:	08011a44 	.word	0x08011a44
 800effc:	080119a4 	.word	0x080119a4
 800f000:	080119c8 	.word	0x080119c8

0800f004 <_free_r>:
 800f004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f006:	2900      	cmp	r1, #0
 800f008:	d044      	beq.n	800f094 <_free_r+0x90>
 800f00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f00e:	9001      	str	r0, [sp, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	f1a1 0404 	sub.w	r4, r1, #4
 800f016:	bfb8      	it	lt
 800f018:	18e4      	addlt	r4, r4, r3
 800f01a:	f000 f8e7 	bl	800f1ec <__malloc_lock>
 800f01e:	4a1e      	ldr	r2, [pc, #120]	; (800f098 <_free_r+0x94>)
 800f020:	9801      	ldr	r0, [sp, #4]
 800f022:	6813      	ldr	r3, [r2, #0]
 800f024:	b933      	cbnz	r3, 800f034 <_free_r+0x30>
 800f026:	6063      	str	r3, [r4, #4]
 800f028:	6014      	str	r4, [r2, #0]
 800f02a:	b003      	add	sp, #12
 800f02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f030:	f000 b8e2 	b.w	800f1f8 <__malloc_unlock>
 800f034:	42a3      	cmp	r3, r4
 800f036:	d908      	bls.n	800f04a <_free_r+0x46>
 800f038:	6825      	ldr	r5, [r4, #0]
 800f03a:	1961      	adds	r1, r4, r5
 800f03c:	428b      	cmp	r3, r1
 800f03e:	bf01      	itttt	eq
 800f040:	6819      	ldreq	r1, [r3, #0]
 800f042:	685b      	ldreq	r3, [r3, #4]
 800f044:	1949      	addeq	r1, r1, r5
 800f046:	6021      	streq	r1, [r4, #0]
 800f048:	e7ed      	b.n	800f026 <_free_r+0x22>
 800f04a:	461a      	mov	r2, r3
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	b10b      	cbz	r3, 800f054 <_free_r+0x50>
 800f050:	42a3      	cmp	r3, r4
 800f052:	d9fa      	bls.n	800f04a <_free_r+0x46>
 800f054:	6811      	ldr	r1, [r2, #0]
 800f056:	1855      	adds	r5, r2, r1
 800f058:	42a5      	cmp	r5, r4
 800f05a:	d10b      	bne.n	800f074 <_free_r+0x70>
 800f05c:	6824      	ldr	r4, [r4, #0]
 800f05e:	4421      	add	r1, r4
 800f060:	1854      	adds	r4, r2, r1
 800f062:	42a3      	cmp	r3, r4
 800f064:	6011      	str	r1, [r2, #0]
 800f066:	d1e0      	bne.n	800f02a <_free_r+0x26>
 800f068:	681c      	ldr	r4, [r3, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	6053      	str	r3, [r2, #4]
 800f06e:	440c      	add	r4, r1
 800f070:	6014      	str	r4, [r2, #0]
 800f072:	e7da      	b.n	800f02a <_free_r+0x26>
 800f074:	d902      	bls.n	800f07c <_free_r+0x78>
 800f076:	230c      	movs	r3, #12
 800f078:	6003      	str	r3, [r0, #0]
 800f07a:	e7d6      	b.n	800f02a <_free_r+0x26>
 800f07c:	6825      	ldr	r5, [r4, #0]
 800f07e:	1961      	adds	r1, r4, r5
 800f080:	428b      	cmp	r3, r1
 800f082:	bf04      	itt	eq
 800f084:	6819      	ldreq	r1, [r3, #0]
 800f086:	685b      	ldreq	r3, [r3, #4]
 800f088:	6063      	str	r3, [r4, #4]
 800f08a:	bf04      	itt	eq
 800f08c:	1949      	addeq	r1, r1, r5
 800f08e:	6021      	streq	r1, [r4, #0]
 800f090:	6054      	str	r4, [r2, #4]
 800f092:	e7ca      	b.n	800f02a <_free_r+0x26>
 800f094:	b003      	add	sp, #12
 800f096:	bd30      	pop	{r4, r5, pc}
 800f098:	20005dc4 	.word	0x20005dc4

0800f09c <malloc>:
 800f09c:	4b02      	ldr	r3, [pc, #8]	; (800f0a8 <malloc+0xc>)
 800f09e:	4601      	mov	r1, r0
 800f0a0:	6818      	ldr	r0, [r3, #0]
 800f0a2:	f000 b823 	b.w	800f0ec <_malloc_r>
 800f0a6:	bf00      	nop
 800f0a8:	20000084 	.word	0x20000084

0800f0ac <sbrk_aligned>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	4e0e      	ldr	r6, [pc, #56]	; (800f0e8 <sbrk_aligned+0x3c>)
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	6831      	ldr	r1, [r6, #0]
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	b911      	cbnz	r1, 800f0be <sbrk_aligned+0x12>
 800f0b8:	f000 fe40 	bl	800fd3c <_sbrk_r>
 800f0bc:	6030      	str	r0, [r6, #0]
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	f000 fe3b 	bl	800fd3c <_sbrk_r>
 800f0c6:	1c43      	adds	r3, r0, #1
 800f0c8:	d00a      	beq.n	800f0e0 <sbrk_aligned+0x34>
 800f0ca:	1cc4      	adds	r4, r0, #3
 800f0cc:	f024 0403 	bic.w	r4, r4, #3
 800f0d0:	42a0      	cmp	r0, r4
 800f0d2:	d007      	beq.n	800f0e4 <sbrk_aligned+0x38>
 800f0d4:	1a21      	subs	r1, r4, r0
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f000 fe30 	bl	800fd3c <_sbrk_r>
 800f0dc:	3001      	adds	r0, #1
 800f0de:	d101      	bne.n	800f0e4 <sbrk_aligned+0x38>
 800f0e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	20005dc8 	.word	0x20005dc8

0800f0ec <_malloc_r>:
 800f0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0f0:	1ccd      	adds	r5, r1, #3
 800f0f2:	f025 0503 	bic.w	r5, r5, #3
 800f0f6:	3508      	adds	r5, #8
 800f0f8:	2d0c      	cmp	r5, #12
 800f0fa:	bf38      	it	cc
 800f0fc:	250c      	movcc	r5, #12
 800f0fe:	2d00      	cmp	r5, #0
 800f100:	4607      	mov	r7, r0
 800f102:	db01      	blt.n	800f108 <_malloc_r+0x1c>
 800f104:	42a9      	cmp	r1, r5
 800f106:	d905      	bls.n	800f114 <_malloc_r+0x28>
 800f108:	230c      	movs	r3, #12
 800f10a:	603b      	str	r3, [r7, #0]
 800f10c:	2600      	movs	r6, #0
 800f10e:	4630      	mov	r0, r6
 800f110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f114:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f1e8 <_malloc_r+0xfc>
 800f118:	f000 f868 	bl	800f1ec <__malloc_lock>
 800f11c:	f8d8 3000 	ldr.w	r3, [r8]
 800f120:	461c      	mov	r4, r3
 800f122:	bb5c      	cbnz	r4, 800f17c <_malloc_r+0x90>
 800f124:	4629      	mov	r1, r5
 800f126:	4638      	mov	r0, r7
 800f128:	f7ff ffc0 	bl	800f0ac <sbrk_aligned>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	4604      	mov	r4, r0
 800f130:	d155      	bne.n	800f1de <_malloc_r+0xf2>
 800f132:	f8d8 4000 	ldr.w	r4, [r8]
 800f136:	4626      	mov	r6, r4
 800f138:	2e00      	cmp	r6, #0
 800f13a:	d145      	bne.n	800f1c8 <_malloc_r+0xdc>
 800f13c:	2c00      	cmp	r4, #0
 800f13e:	d048      	beq.n	800f1d2 <_malloc_r+0xe6>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	4631      	mov	r1, r6
 800f144:	4638      	mov	r0, r7
 800f146:	eb04 0903 	add.w	r9, r4, r3
 800f14a:	f000 fdf7 	bl	800fd3c <_sbrk_r>
 800f14e:	4581      	cmp	r9, r0
 800f150:	d13f      	bne.n	800f1d2 <_malloc_r+0xe6>
 800f152:	6821      	ldr	r1, [r4, #0]
 800f154:	1a6d      	subs	r5, r5, r1
 800f156:	4629      	mov	r1, r5
 800f158:	4638      	mov	r0, r7
 800f15a:	f7ff ffa7 	bl	800f0ac <sbrk_aligned>
 800f15e:	3001      	adds	r0, #1
 800f160:	d037      	beq.n	800f1d2 <_malloc_r+0xe6>
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	442b      	add	r3, r5
 800f166:	6023      	str	r3, [r4, #0]
 800f168:	f8d8 3000 	ldr.w	r3, [r8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d038      	beq.n	800f1e2 <_malloc_r+0xf6>
 800f170:	685a      	ldr	r2, [r3, #4]
 800f172:	42a2      	cmp	r2, r4
 800f174:	d12b      	bne.n	800f1ce <_malloc_r+0xe2>
 800f176:	2200      	movs	r2, #0
 800f178:	605a      	str	r2, [r3, #4]
 800f17a:	e00f      	b.n	800f19c <_malloc_r+0xb0>
 800f17c:	6822      	ldr	r2, [r4, #0]
 800f17e:	1b52      	subs	r2, r2, r5
 800f180:	d41f      	bmi.n	800f1c2 <_malloc_r+0xd6>
 800f182:	2a0b      	cmp	r2, #11
 800f184:	d917      	bls.n	800f1b6 <_malloc_r+0xca>
 800f186:	1961      	adds	r1, r4, r5
 800f188:	42a3      	cmp	r3, r4
 800f18a:	6025      	str	r5, [r4, #0]
 800f18c:	bf18      	it	ne
 800f18e:	6059      	strne	r1, [r3, #4]
 800f190:	6863      	ldr	r3, [r4, #4]
 800f192:	bf08      	it	eq
 800f194:	f8c8 1000 	streq.w	r1, [r8]
 800f198:	5162      	str	r2, [r4, r5]
 800f19a:	604b      	str	r3, [r1, #4]
 800f19c:	4638      	mov	r0, r7
 800f19e:	f104 060b 	add.w	r6, r4, #11
 800f1a2:	f000 f829 	bl	800f1f8 <__malloc_unlock>
 800f1a6:	f026 0607 	bic.w	r6, r6, #7
 800f1aa:	1d23      	adds	r3, r4, #4
 800f1ac:	1af2      	subs	r2, r6, r3
 800f1ae:	d0ae      	beq.n	800f10e <_malloc_r+0x22>
 800f1b0:	1b9b      	subs	r3, r3, r6
 800f1b2:	50a3      	str	r3, [r4, r2]
 800f1b4:	e7ab      	b.n	800f10e <_malloc_r+0x22>
 800f1b6:	42a3      	cmp	r3, r4
 800f1b8:	6862      	ldr	r2, [r4, #4]
 800f1ba:	d1dd      	bne.n	800f178 <_malloc_r+0x8c>
 800f1bc:	f8c8 2000 	str.w	r2, [r8]
 800f1c0:	e7ec      	b.n	800f19c <_malloc_r+0xb0>
 800f1c2:	4623      	mov	r3, r4
 800f1c4:	6864      	ldr	r4, [r4, #4]
 800f1c6:	e7ac      	b.n	800f122 <_malloc_r+0x36>
 800f1c8:	4634      	mov	r4, r6
 800f1ca:	6876      	ldr	r6, [r6, #4]
 800f1cc:	e7b4      	b.n	800f138 <_malloc_r+0x4c>
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	e7cc      	b.n	800f16c <_malloc_r+0x80>
 800f1d2:	230c      	movs	r3, #12
 800f1d4:	603b      	str	r3, [r7, #0]
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	f000 f80e 	bl	800f1f8 <__malloc_unlock>
 800f1dc:	e797      	b.n	800f10e <_malloc_r+0x22>
 800f1de:	6025      	str	r5, [r4, #0]
 800f1e0:	e7dc      	b.n	800f19c <_malloc_r+0xb0>
 800f1e2:	605b      	str	r3, [r3, #4]
 800f1e4:	deff      	udf	#255	; 0xff
 800f1e6:	bf00      	nop
 800f1e8:	20005dc4 	.word	0x20005dc4

0800f1ec <__malloc_lock>:
 800f1ec:	4801      	ldr	r0, [pc, #4]	; (800f1f4 <__malloc_lock+0x8>)
 800f1ee:	f7ff b87e 	b.w	800e2ee <__retarget_lock_acquire_recursive>
 800f1f2:	bf00      	nop
 800f1f4:	20005dc0 	.word	0x20005dc0

0800f1f8 <__malloc_unlock>:
 800f1f8:	4801      	ldr	r0, [pc, #4]	; (800f200 <__malloc_unlock+0x8>)
 800f1fa:	f7ff b879 	b.w	800e2f0 <__retarget_lock_release_recursive>
 800f1fe:	bf00      	nop
 800f200:	20005dc0 	.word	0x20005dc0

0800f204 <_Balloc>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	69c6      	ldr	r6, [r0, #28]
 800f208:	4604      	mov	r4, r0
 800f20a:	460d      	mov	r5, r1
 800f20c:	b976      	cbnz	r6, 800f22c <_Balloc+0x28>
 800f20e:	2010      	movs	r0, #16
 800f210:	f7ff ff44 	bl	800f09c <malloc>
 800f214:	4602      	mov	r2, r0
 800f216:	61e0      	str	r0, [r4, #28]
 800f218:	b920      	cbnz	r0, 800f224 <_Balloc+0x20>
 800f21a:	4b18      	ldr	r3, [pc, #96]	; (800f27c <_Balloc+0x78>)
 800f21c:	4818      	ldr	r0, [pc, #96]	; (800f280 <_Balloc+0x7c>)
 800f21e:	216b      	movs	r1, #107	; 0x6b
 800f220:	f000 fd9c 	bl	800fd5c <__assert_func>
 800f224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f228:	6006      	str	r6, [r0, #0]
 800f22a:	60c6      	str	r6, [r0, #12]
 800f22c:	69e6      	ldr	r6, [r4, #28]
 800f22e:	68f3      	ldr	r3, [r6, #12]
 800f230:	b183      	cbz	r3, 800f254 <_Balloc+0x50>
 800f232:	69e3      	ldr	r3, [r4, #28]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f23a:	b9b8      	cbnz	r0, 800f26c <_Balloc+0x68>
 800f23c:	2101      	movs	r1, #1
 800f23e:	fa01 f605 	lsl.w	r6, r1, r5
 800f242:	1d72      	adds	r2, r6, #5
 800f244:	0092      	lsls	r2, r2, #2
 800f246:	4620      	mov	r0, r4
 800f248:	f000 fda6 	bl	800fd98 <_calloc_r>
 800f24c:	b160      	cbz	r0, 800f268 <_Balloc+0x64>
 800f24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f252:	e00e      	b.n	800f272 <_Balloc+0x6e>
 800f254:	2221      	movs	r2, #33	; 0x21
 800f256:	2104      	movs	r1, #4
 800f258:	4620      	mov	r0, r4
 800f25a:	f000 fd9d 	bl	800fd98 <_calloc_r>
 800f25e:	69e3      	ldr	r3, [r4, #28]
 800f260:	60f0      	str	r0, [r6, #12]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1e4      	bne.n	800f232 <_Balloc+0x2e>
 800f268:	2000      	movs	r0, #0
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	6802      	ldr	r2, [r0, #0]
 800f26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f272:	2300      	movs	r3, #0
 800f274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f278:	e7f7      	b.n	800f26a <_Balloc+0x66>
 800f27a:	bf00      	nop
 800f27c:	080119d5 	.word	0x080119d5
 800f280:	08011a55 	.word	0x08011a55

0800f284 <_Bfree>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	69c6      	ldr	r6, [r0, #28]
 800f288:	4605      	mov	r5, r0
 800f28a:	460c      	mov	r4, r1
 800f28c:	b976      	cbnz	r6, 800f2ac <_Bfree+0x28>
 800f28e:	2010      	movs	r0, #16
 800f290:	f7ff ff04 	bl	800f09c <malloc>
 800f294:	4602      	mov	r2, r0
 800f296:	61e8      	str	r0, [r5, #28]
 800f298:	b920      	cbnz	r0, 800f2a4 <_Bfree+0x20>
 800f29a:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <_Bfree+0x3c>)
 800f29c:	4809      	ldr	r0, [pc, #36]	; (800f2c4 <_Bfree+0x40>)
 800f29e:	218f      	movs	r1, #143	; 0x8f
 800f2a0:	f000 fd5c 	bl	800fd5c <__assert_func>
 800f2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2a8:	6006      	str	r6, [r0, #0]
 800f2aa:	60c6      	str	r6, [r0, #12]
 800f2ac:	b13c      	cbz	r4, 800f2be <_Bfree+0x3a>
 800f2ae:	69eb      	ldr	r3, [r5, #28]
 800f2b0:	6862      	ldr	r2, [r4, #4]
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2b8:	6021      	str	r1, [r4, #0]
 800f2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	080119d5 	.word	0x080119d5
 800f2c4:	08011a55 	.word	0x08011a55

0800f2c8 <__multadd>:
 800f2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	690d      	ldr	r5, [r1, #16]
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	461e      	mov	r6, r3
 800f2d4:	f101 0c14 	add.w	ip, r1, #20
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f8dc 3000 	ldr.w	r3, [ip]
 800f2de:	b299      	uxth	r1, r3
 800f2e0:	fb02 6101 	mla	r1, r2, r1, r6
 800f2e4:	0c1e      	lsrs	r6, r3, #16
 800f2e6:	0c0b      	lsrs	r3, r1, #16
 800f2e8:	fb02 3306 	mla	r3, r2, r6, r3
 800f2ec:	b289      	uxth	r1, r1
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2f4:	4285      	cmp	r5, r0
 800f2f6:	f84c 1b04 	str.w	r1, [ip], #4
 800f2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2fe:	dcec      	bgt.n	800f2da <__multadd+0x12>
 800f300:	b30e      	cbz	r6, 800f346 <__multadd+0x7e>
 800f302:	68a3      	ldr	r3, [r4, #8]
 800f304:	42ab      	cmp	r3, r5
 800f306:	dc19      	bgt.n	800f33c <__multadd+0x74>
 800f308:	6861      	ldr	r1, [r4, #4]
 800f30a:	4638      	mov	r0, r7
 800f30c:	3101      	adds	r1, #1
 800f30e:	f7ff ff79 	bl	800f204 <_Balloc>
 800f312:	4680      	mov	r8, r0
 800f314:	b928      	cbnz	r0, 800f322 <__multadd+0x5a>
 800f316:	4602      	mov	r2, r0
 800f318:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <__multadd+0x84>)
 800f31a:	480d      	ldr	r0, [pc, #52]	; (800f350 <__multadd+0x88>)
 800f31c:	21ba      	movs	r1, #186	; 0xba
 800f31e:	f000 fd1d 	bl	800fd5c <__assert_func>
 800f322:	6922      	ldr	r2, [r4, #16]
 800f324:	3202      	adds	r2, #2
 800f326:	f104 010c 	add.w	r1, r4, #12
 800f32a:	0092      	lsls	r2, r2, #2
 800f32c:	300c      	adds	r0, #12
 800f32e:	f7fe ffe0 	bl	800e2f2 <memcpy>
 800f332:	4621      	mov	r1, r4
 800f334:	4638      	mov	r0, r7
 800f336:	f7ff ffa5 	bl	800f284 <_Bfree>
 800f33a:	4644      	mov	r4, r8
 800f33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f340:	3501      	adds	r5, #1
 800f342:	615e      	str	r6, [r3, #20]
 800f344:	6125      	str	r5, [r4, #16]
 800f346:	4620      	mov	r0, r4
 800f348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f34c:	08011a44 	.word	0x08011a44
 800f350:	08011a55 	.word	0x08011a55

0800f354 <__hi0bits>:
 800f354:	0c03      	lsrs	r3, r0, #16
 800f356:	041b      	lsls	r3, r3, #16
 800f358:	b9d3      	cbnz	r3, 800f390 <__hi0bits+0x3c>
 800f35a:	0400      	lsls	r0, r0, #16
 800f35c:	2310      	movs	r3, #16
 800f35e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f362:	bf04      	itt	eq
 800f364:	0200      	lsleq	r0, r0, #8
 800f366:	3308      	addeq	r3, #8
 800f368:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f36c:	bf04      	itt	eq
 800f36e:	0100      	lsleq	r0, r0, #4
 800f370:	3304      	addeq	r3, #4
 800f372:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f376:	bf04      	itt	eq
 800f378:	0080      	lsleq	r0, r0, #2
 800f37a:	3302      	addeq	r3, #2
 800f37c:	2800      	cmp	r0, #0
 800f37e:	db05      	blt.n	800f38c <__hi0bits+0x38>
 800f380:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f384:	f103 0301 	add.w	r3, r3, #1
 800f388:	bf08      	it	eq
 800f38a:	2320      	moveq	r3, #32
 800f38c:	4618      	mov	r0, r3
 800f38e:	4770      	bx	lr
 800f390:	2300      	movs	r3, #0
 800f392:	e7e4      	b.n	800f35e <__hi0bits+0xa>

0800f394 <__lo0bits>:
 800f394:	6803      	ldr	r3, [r0, #0]
 800f396:	f013 0207 	ands.w	r2, r3, #7
 800f39a:	d00c      	beq.n	800f3b6 <__lo0bits+0x22>
 800f39c:	07d9      	lsls	r1, r3, #31
 800f39e:	d422      	bmi.n	800f3e6 <__lo0bits+0x52>
 800f3a0:	079a      	lsls	r2, r3, #30
 800f3a2:	bf49      	itett	mi
 800f3a4:	085b      	lsrmi	r3, r3, #1
 800f3a6:	089b      	lsrpl	r3, r3, #2
 800f3a8:	6003      	strmi	r3, [r0, #0]
 800f3aa:	2201      	movmi	r2, #1
 800f3ac:	bf5c      	itt	pl
 800f3ae:	6003      	strpl	r3, [r0, #0]
 800f3b0:	2202      	movpl	r2, #2
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	4770      	bx	lr
 800f3b6:	b299      	uxth	r1, r3
 800f3b8:	b909      	cbnz	r1, 800f3be <__lo0bits+0x2a>
 800f3ba:	0c1b      	lsrs	r3, r3, #16
 800f3bc:	2210      	movs	r2, #16
 800f3be:	b2d9      	uxtb	r1, r3
 800f3c0:	b909      	cbnz	r1, 800f3c6 <__lo0bits+0x32>
 800f3c2:	3208      	adds	r2, #8
 800f3c4:	0a1b      	lsrs	r3, r3, #8
 800f3c6:	0719      	lsls	r1, r3, #28
 800f3c8:	bf04      	itt	eq
 800f3ca:	091b      	lsreq	r3, r3, #4
 800f3cc:	3204      	addeq	r2, #4
 800f3ce:	0799      	lsls	r1, r3, #30
 800f3d0:	bf04      	itt	eq
 800f3d2:	089b      	lsreq	r3, r3, #2
 800f3d4:	3202      	addeq	r2, #2
 800f3d6:	07d9      	lsls	r1, r3, #31
 800f3d8:	d403      	bmi.n	800f3e2 <__lo0bits+0x4e>
 800f3da:	085b      	lsrs	r3, r3, #1
 800f3dc:	f102 0201 	add.w	r2, r2, #1
 800f3e0:	d003      	beq.n	800f3ea <__lo0bits+0x56>
 800f3e2:	6003      	str	r3, [r0, #0]
 800f3e4:	e7e5      	b.n	800f3b2 <__lo0bits+0x1e>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	e7e3      	b.n	800f3b2 <__lo0bits+0x1e>
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	e7e1      	b.n	800f3b2 <__lo0bits+0x1e>
	...

0800f3f0 <__i2b>:
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	f7ff ff05 	bl	800f204 <_Balloc>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	b928      	cbnz	r0, 800f40a <__i2b+0x1a>
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <__i2b+0x24>)
 800f400:	4805      	ldr	r0, [pc, #20]	; (800f418 <__i2b+0x28>)
 800f402:	f240 1145 	movw	r1, #325	; 0x145
 800f406:	f000 fca9 	bl	800fd5c <__assert_func>
 800f40a:	2301      	movs	r3, #1
 800f40c:	6144      	str	r4, [r0, #20]
 800f40e:	6103      	str	r3, [r0, #16]
 800f410:	bd10      	pop	{r4, pc}
 800f412:	bf00      	nop
 800f414:	08011a44 	.word	0x08011a44
 800f418:	08011a55 	.word	0x08011a55

0800f41c <__multiply>:
 800f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	4691      	mov	r9, r2
 800f422:	690a      	ldr	r2, [r1, #16]
 800f424:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f428:	429a      	cmp	r2, r3
 800f42a:	bfb8      	it	lt
 800f42c:	460b      	movlt	r3, r1
 800f42e:	460c      	mov	r4, r1
 800f430:	bfbc      	itt	lt
 800f432:	464c      	movlt	r4, r9
 800f434:	4699      	movlt	r9, r3
 800f436:	6927      	ldr	r7, [r4, #16]
 800f438:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f43c:	68a3      	ldr	r3, [r4, #8]
 800f43e:	6861      	ldr	r1, [r4, #4]
 800f440:	eb07 060a 	add.w	r6, r7, sl
 800f444:	42b3      	cmp	r3, r6
 800f446:	b085      	sub	sp, #20
 800f448:	bfb8      	it	lt
 800f44a:	3101      	addlt	r1, #1
 800f44c:	f7ff feda 	bl	800f204 <_Balloc>
 800f450:	b930      	cbnz	r0, 800f460 <__multiply+0x44>
 800f452:	4602      	mov	r2, r0
 800f454:	4b44      	ldr	r3, [pc, #272]	; (800f568 <__multiply+0x14c>)
 800f456:	4845      	ldr	r0, [pc, #276]	; (800f56c <__multiply+0x150>)
 800f458:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f45c:	f000 fc7e 	bl	800fd5c <__assert_func>
 800f460:	f100 0514 	add.w	r5, r0, #20
 800f464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f468:	462b      	mov	r3, r5
 800f46a:	2200      	movs	r2, #0
 800f46c:	4543      	cmp	r3, r8
 800f46e:	d321      	bcc.n	800f4b4 <__multiply+0x98>
 800f470:	f104 0314 	add.w	r3, r4, #20
 800f474:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f478:	f109 0314 	add.w	r3, r9, #20
 800f47c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f480:	9202      	str	r2, [sp, #8]
 800f482:	1b3a      	subs	r2, r7, r4
 800f484:	3a15      	subs	r2, #21
 800f486:	f022 0203 	bic.w	r2, r2, #3
 800f48a:	3204      	adds	r2, #4
 800f48c:	f104 0115 	add.w	r1, r4, #21
 800f490:	428f      	cmp	r7, r1
 800f492:	bf38      	it	cc
 800f494:	2204      	movcc	r2, #4
 800f496:	9201      	str	r2, [sp, #4]
 800f498:	9a02      	ldr	r2, [sp, #8]
 800f49a:	9303      	str	r3, [sp, #12]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d80c      	bhi.n	800f4ba <__multiply+0x9e>
 800f4a0:	2e00      	cmp	r6, #0
 800f4a2:	dd03      	ble.n	800f4ac <__multiply+0x90>
 800f4a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d05b      	beq.n	800f564 <__multiply+0x148>
 800f4ac:	6106      	str	r6, [r0, #16]
 800f4ae:	b005      	add	sp, #20
 800f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b4:	f843 2b04 	str.w	r2, [r3], #4
 800f4b8:	e7d8      	b.n	800f46c <__multiply+0x50>
 800f4ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4be:	f1ba 0f00 	cmp.w	sl, #0
 800f4c2:	d024      	beq.n	800f50e <__multiply+0xf2>
 800f4c4:	f104 0e14 	add.w	lr, r4, #20
 800f4c8:	46a9      	mov	r9, r5
 800f4ca:	f04f 0c00 	mov.w	ip, #0
 800f4ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f4d2:	f8d9 1000 	ldr.w	r1, [r9]
 800f4d6:	fa1f fb82 	uxth.w	fp, r2
 800f4da:	b289      	uxth	r1, r1
 800f4dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f4e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f4e8:	4461      	add	r1, ip
 800f4ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f4ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800f4f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f4f6:	b289      	uxth	r1, r1
 800f4f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f4fc:	4577      	cmp	r7, lr
 800f4fe:	f849 1b04 	str.w	r1, [r9], #4
 800f502:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f506:	d8e2      	bhi.n	800f4ce <__multiply+0xb2>
 800f508:	9a01      	ldr	r2, [sp, #4]
 800f50a:	f845 c002 	str.w	ip, [r5, r2]
 800f50e:	9a03      	ldr	r2, [sp, #12]
 800f510:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f514:	3304      	adds	r3, #4
 800f516:	f1b9 0f00 	cmp.w	r9, #0
 800f51a:	d021      	beq.n	800f560 <__multiply+0x144>
 800f51c:	6829      	ldr	r1, [r5, #0]
 800f51e:	f104 0c14 	add.w	ip, r4, #20
 800f522:	46ae      	mov	lr, r5
 800f524:	f04f 0a00 	mov.w	sl, #0
 800f528:	f8bc b000 	ldrh.w	fp, [ip]
 800f52c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f530:	fb09 220b 	mla	r2, r9, fp, r2
 800f534:	4452      	add	r2, sl
 800f536:	b289      	uxth	r1, r1
 800f538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f53c:	f84e 1b04 	str.w	r1, [lr], #4
 800f540:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f548:	f8be 1000 	ldrh.w	r1, [lr]
 800f54c:	fb09 110a 	mla	r1, r9, sl, r1
 800f550:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f554:	4567      	cmp	r7, ip
 800f556:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f55a:	d8e5      	bhi.n	800f528 <__multiply+0x10c>
 800f55c:	9a01      	ldr	r2, [sp, #4]
 800f55e:	50a9      	str	r1, [r5, r2]
 800f560:	3504      	adds	r5, #4
 800f562:	e799      	b.n	800f498 <__multiply+0x7c>
 800f564:	3e01      	subs	r6, #1
 800f566:	e79b      	b.n	800f4a0 <__multiply+0x84>
 800f568:	08011a44 	.word	0x08011a44
 800f56c:	08011a55 	.word	0x08011a55

0800f570 <__pow5mult>:
 800f570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f574:	4615      	mov	r5, r2
 800f576:	f012 0203 	ands.w	r2, r2, #3
 800f57a:	4606      	mov	r6, r0
 800f57c:	460f      	mov	r7, r1
 800f57e:	d007      	beq.n	800f590 <__pow5mult+0x20>
 800f580:	4c25      	ldr	r4, [pc, #148]	; (800f618 <__pow5mult+0xa8>)
 800f582:	3a01      	subs	r2, #1
 800f584:	2300      	movs	r3, #0
 800f586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f58a:	f7ff fe9d 	bl	800f2c8 <__multadd>
 800f58e:	4607      	mov	r7, r0
 800f590:	10ad      	asrs	r5, r5, #2
 800f592:	d03d      	beq.n	800f610 <__pow5mult+0xa0>
 800f594:	69f4      	ldr	r4, [r6, #28]
 800f596:	b97c      	cbnz	r4, 800f5b8 <__pow5mult+0x48>
 800f598:	2010      	movs	r0, #16
 800f59a:	f7ff fd7f 	bl	800f09c <malloc>
 800f59e:	4602      	mov	r2, r0
 800f5a0:	61f0      	str	r0, [r6, #28]
 800f5a2:	b928      	cbnz	r0, 800f5b0 <__pow5mult+0x40>
 800f5a4:	4b1d      	ldr	r3, [pc, #116]	; (800f61c <__pow5mult+0xac>)
 800f5a6:	481e      	ldr	r0, [pc, #120]	; (800f620 <__pow5mult+0xb0>)
 800f5a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5ac:	f000 fbd6 	bl	800fd5c <__assert_func>
 800f5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5b4:	6004      	str	r4, [r0, #0]
 800f5b6:	60c4      	str	r4, [r0, #12]
 800f5b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5c0:	b94c      	cbnz	r4, 800f5d6 <__pow5mult+0x66>
 800f5c2:	f240 2171 	movw	r1, #625	; 0x271
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7ff ff12 	bl	800f3f0 <__i2b>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	6003      	str	r3, [r0, #0]
 800f5d6:	f04f 0900 	mov.w	r9, #0
 800f5da:	07eb      	lsls	r3, r5, #31
 800f5dc:	d50a      	bpl.n	800f5f4 <__pow5mult+0x84>
 800f5de:	4639      	mov	r1, r7
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7ff ff1a 	bl	800f41c <__multiply>
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	4680      	mov	r8, r0
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff fe49 	bl	800f284 <_Bfree>
 800f5f2:	4647      	mov	r7, r8
 800f5f4:	106d      	asrs	r5, r5, #1
 800f5f6:	d00b      	beq.n	800f610 <__pow5mult+0xa0>
 800f5f8:	6820      	ldr	r0, [r4, #0]
 800f5fa:	b938      	cbnz	r0, 800f60c <__pow5mult+0x9c>
 800f5fc:	4622      	mov	r2, r4
 800f5fe:	4621      	mov	r1, r4
 800f600:	4630      	mov	r0, r6
 800f602:	f7ff ff0b 	bl	800f41c <__multiply>
 800f606:	6020      	str	r0, [r4, #0]
 800f608:	f8c0 9000 	str.w	r9, [r0]
 800f60c:	4604      	mov	r4, r0
 800f60e:	e7e4      	b.n	800f5da <__pow5mult+0x6a>
 800f610:	4638      	mov	r0, r7
 800f612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f616:	bf00      	nop
 800f618:	08011ba0 	.word	0x08011ba0
 800f61c:	080119d5 	.word	0x080119d5
 800f620:	08011a55 	.word	0x08011a55

0800f624 <__lshift>:
 800f624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f628:	460c      	mov	r4, r1
 800f62a:	6849      	ldr	r1, [r1, #4]
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	4607      	mov	r7, r0
 800f636:	4691      	mov	r9, r2
 800f638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f63c:	f108 0601 	add.w	r6, r8, #1
 800f640:	42b3      	cmp	r3, r6
 800f642:	db0b      	blt.n	800f65c <__lshift+0x38>
 800f644:	4638      	mov	r0, r7
 800f646:	f7ff fddd 	bl	800f204 <_Balloc>
 800f64a:	4605      	mov	r5, r0
 800f64c:	b948      	cbnz	r0, 800f662 <__lshift+0x3e>
 800f64e:	4602      	mov	r2, r0
 800f650:	4b28      	ldr	r3, [pc, #160]	; (800f6f4 <__lshift+0xd0>)
 800f652:	4829      	ldr	r0, [pc, #164]	; (800f6f8 <__lshift+0xd4>)
 800f654:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f658:	f000 fb80 	bl	800fd5c <__assert_func>
 800f65c:	3101      	adds	r1, #1
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	e7ee      	b.n	800f640 <__lshift+0x1c>
 800f662:	2300      	movs	r3, #0
 800f664:	f100 0114 	add.w	r1, r0, #20
 800f668:	f100 0210 	add.w	r2, r0, #16
 800f66c:	4618      	mov	r0, r3
 800f66e:	4553      	cmp	r3, sl
 800f670:	db33      	blt.n	800f6da <__lshift+0xb6>
 800f672:	6920      	ldr	r0, [r4, #16]
 800f674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f678:	f104 0314 	add.w	r3, r4, #20
 800f67c:	f019 091f 	ands.w	r9, r9, #31
 800f680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f688:	d02b      	beq.n	800f6e2 <__lshift+0xbe>
 800f68a:	f1c9 0e20 	rsb	lr, r9, #32
 800f68e:	468a      	mov	sl, r1
 800f690:	2200      	movs	r2, #0
 800f692:	6818      	ldr	r0, [r3, #0]
 800f694:	fa00 f009 	lsl.w	r0, r0, r9
 800f698:	4310      	orrs	r0, r2
 800f69a:	f84a 0b04 	str.w	r0, [sl], #4
 800f69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a2:	459c      	cmp	ip, r3
 800f6a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6a8:	d8f3      	bhi.n	800f692 <__lshift+0x6e>
 800f6aa:	ebac 0304 	sub.w	r3, ip, r4
 800f6ae:	3b15      	subs	r3, #21
 800f6b0:	f023 0303 	bic.w	r3, r3, #3
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	f104 0015 	add.w	r0, r4, #21
 800f6ba:	4584      	cmp	ip, r0
 800f6bc:	bf38      	it	cc
 800f6be:	2304      	movcc	r3, #4
 800f6c0:	50ca      	str	r2, [r1, r3]
 800f6c2:	b10a      	cbz	r2, 800f6c8 <__lshift+0xa4>
 800f6c4:	f108 0602 	add.w	r6, r8, #2
 800f6c8:	3e01      	subs	r6, #1
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	612e      	str	r6, [r5, #16]
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	f7ff fdd8 	bl	800f284 <_Bfree>
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6da:	f842 0f04 	str.w	r0, [r2, #4]!
 800f6de:	3301      	adds	r3, #1
 800f6e0:	e7c5      	b.n	800f66e <__lshift+0x4a>
 800f6e2:	3904      	subs	r1, #4
 800f6e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6ec:	459c      	cmp	ip, r3
 800f6ee:	d8f9      	bhi.n	800f6e4 <__lshift+0xc0>
 800f6f0:	e7ea      	b.n	800f6c8 <__lshift+0xa4>
 800f6f2:	bf00      	nop
 800f6f4:	08011a44 	.word	0x08011a44
 800f6f8:	08011a55 	.word	0x08011a55

0800f6fc <__mcmp>:
 800f6fc:	b530      	push	{r4, r5, lr}
 800f6fe:	6902      	ldr	r2, [r0, #16]
 800f700:	690c      	ldr	r4, [r1, #16]
 800f702:	1b12      	subs	r2, r2, r4
 800f704:	d10e      	bne.n	800f724 <__mcmp+0x28>
 800f706:	f100 0314 	add.w	r3, r0, #20
 800f70a:	3114      	adds	r1, #20
 800f70c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f71c:	42a5      	cmp	r5, r4
 800f71e:	d003      	beq.n	800f728 <__mcmp+0x2c>
 800f720:	d305      	bcc.n	800f72e <__mcmp+0x32>
 800f722:	2201      	movs	r2, #1
 800f724:	4610      	mov	r0, r2
 800f726:	bd30      	pop	{r4, r5, pc}
 800f728:	4283      	cmp	r3, r0
 800f72a:	d3f3      	bcc.n	800f714 <__mcmp+0x18>
 800f72c:	e7fa      	b.n	800f724 <__mcmp+0x28>
 800f72e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f732:	e7f7      	b.n	800f724 <__mcmp+0x28>

0800f734 <__mdiff>:
 800f734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	460c      	mov	r4, r1
 800f73a:	4606      	mov	r6, r0
 800f73c:	4611      	mov	r1, r2
 800f73e:	4620      	mov	r0, r4
 800f740:	4690      	mov	r8, r2
 800f742:	f7ff ffdb 	bl	800f6fc <__mcmp>
 800f746:	1e05      	subs	r5, r0, #0
 800f748:	d110      	bne.n	800f76c <__mdiff+0x38>
 800f74a:	4629      	mov	r1, r5
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff fd59 	bl	800f204 <_Balloc>
 800f752:	b930      	cbnz	r0, 800f762 <__mdiff+0x2e>
 800f754:	4b3a      	ldr	r3, [pc, #232]	; (800f840 <__mdiff+0x10c>)
 800f756:	4602      	mov	r2, r0
 800f758:	f240 2137 	movw	r1, #567	; 0x237
 800f75c:	4839      	ldr	r0, [pc, #228]	; (800f844 <__mdiff+0x110>)
 800f75e:	f000 fafd 	bl	800fd5c <__assert_func>
 800f762:	2301      	movs	r3, #1
 800f764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f76c:	bfa4      	itt	ge
 800f76e:	4643      	movge	r3, r8
 800f770:	46a0      	movge	r8, r4
 800f772:	4630      	mov	r0, r6
 800f774:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f778:	bfa6      	itte	ge
 800f77a:	461c      	movge	r4, r3
 800f77c:	2500      	movge	r5, #0
 800f77e:	2501      	movlt	r5, #1
 800f780:	f7ff fd40 	bl	800f204 <_Balloc>
 800f784:	b920      	cbnz	r0, 800f790 <__mdiff+0x5c>
 800f786:	4b2e      	ldr	r3, [pc, #184]	; (800f840 <__mdiff+0x10c>)
 800f788:	4602      	mov	r2, r0
 800f78a:	f240 2145 	movw	r1, #581	; 0x245
 800f78e:	e7e5      	b.n	800f75c <__mdiff+0x28>
 800f790:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f794:	6926      	ldr	r6, [r4, #16]
 800f796:	60c5      	str	r5, [r0, #12]
 800f798:	f104 0914 	add.w	r9, r4, #20
 800f79c:	f108 0514 	add.w	r5, r8, #20
 800f7a0:	f100 0e14 	add.w	lr, r0, #20
 800f7a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7ac:	f108 0210 	add.w	r2, r8, #16
 800f7b0:	46f2      	mov	sl, lr
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7bc:	fa11 f88b 	uxtah	r8, r1, fp
 800f7c0:	b299      	uxth	r1, r3
 800f7c2:	0c1b      	lsrs	r3, r3, #16
 800f7c4:	eba8 0801 	sub.w	r8, r8, r1
 800f7c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f7cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f7d0:	fa1f f888 	uxth.w	r8, r8
 800f7d4:	1419      	asrs	r1, r3, #16
 800f7d6:	454e      	cmp	r6, r9
 800f7d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f7dc:	f84a 3b04 	str.w	r3, [sl], #4
 800f7e0:	d8e8      	bhi.n	800f7b4 <__mdiff+0x80>
 800f7e2:	1b33      	subs	r3, r6, r4
 800f7e4:	3b15      	subs	r3, #21
 800f7e6:	f023 0303 	bic.w	r3, r3, #3
 800f7ea:	3304      	adds	r3, #4
 800f7ec:	3415      	adds	r4, #21
 800f7ee:	42a6      	cmp	r6, r4
 800f7f0:	bf38      	it	cc
 800f7f2:	2304      	movcc	r3, #4
 800f7f4:	441d      	add	r5, r3
 800f7f6:	4473      	add	r3, lr
 800f7f8:	469e      	mov	lr, r3
 800f7fa:	462e      	mov	r6, r5
 800f7fc:	4566      	cmp	r6, ip
 800f7fe:	d30e      	bcc.n	800f81e <__mdiff+0xea>
 800f800:	f10c 0203 	add.w	r2, ip, #3
 800f804:	1b52      	subs	r2, r2, r5
 800f806:	f022 0203 	bic.w	r2, r2, #3
 800f80a:	3d03      	subs	r5, #3
 800f80c:	45ac      	cmp	ip, r5
 800f80e:	bf38      	it	cc
 800f810:	2200      	movcc	r2, #0
 800f812:	4413      	add	r3, r2
 800f814:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f818:	b17a      	cbz	r2, 800f83a <__mdiff+0x106>
 800f81a:	6107      	str	r7, [r0, #16]
 800f81c:	e7a4      	b.n	800f768 <__mdiff+0x34>
 800f81e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f822:	fa11 f288 	uxtah	r2, r1, r8
 800f826:	1414      	asrs	r4, r2, #16
 800f828:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f82c:	b292      	uxth	r2, r2
 800f82e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f832:	f84e 2b04 	str.w	r2, [lr], #4
 800f836:	1421      	asrs	r1, r4, #16
 800f838:	e7e0      	b.n	800f7fc <__mdiff+0xc8>
 800f83a:	3f01      	subs	r7, #1
 800f83c:	e7ea      	b.n	800f814 <__mdiff+0xe0>
 800f83e:	bf00      	nop
 800f840:	08011a44 	.word	0x08011a44
 800f844:	08011a55 	.word	0x08011a55

0800f848 <__d2b>:
 800f848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f84c:	460f      	mov	r7, r1
 800f84e:	2101      	movs	r1, #1
 800f850:	ec59 8b10 	vmov	r8, r9, d0
 800f854:	4616      	mov	r6, r2
 800f856:	f7ff fcd5 	bl	800f204 <_Balloc>
 800f85a:	4604      	mov	r4, r0
 800f85c:	b930      	cbnz	r0, 800f86c <__d2b+0x24>
 800f85e:	4602      	mov	r2, r0
 800f860:	4b24      	ldr	r3, [pc, #144]	; (800f8f4 <__d2b+0xac>)
 800f862:	4825      	ldr	r0, [pc, #148]	; (800f8f8 <__d2b+0xb0>)
 800f864:	f240 310f 	movw	r1, #783	; 0x30f
 800f868:	f000 fa78 	bl	800fd5c <__assert_func>
 800f86c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f874:	bb2d      	cbnz	r5, 800f8c2 <__d2b+0x7a>
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	f1b8 0300 	subs.w	r3, r8, #0
 800f87c:	d026      	beq.n	800f8cc <__d2b+0x84>
 800f87e:	4668      	mov	r0, sp
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	f7ff fd87 	bl	800f394 <__lo0bits>
 800f886:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f88a:	b1e8      	cbz	r0, 800f8c8 <__d2b+0x80>
 800f88c:	f1c0 0320 	rsb	r3, r0, #32
 800f890:	fa02 f303 	lsl.w	r3, r2, r3
 800f894:	430b      	orrs	r3, r1
 800f896:	40c2      	lsrs	r2, r0
 800f898:	6163      	str	r3, [r4, #20]
 800f89a:	9201      	str	r2, [sp, #4]
 800f89c:	9b01      	ldr	r3, [sp, #4]
 800f89e:	61a3      	str	r3, [r4, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	bf14      	ite	ne
 800f8a4:	2202      	movne	r2, #2
 800f8a6:	2201      	moveq	r2, #1
 800f8a8:	6122      	str	r2, [r4, #16]
 800f8aa:	b1bd      	cbz	r5, 800f8dc <__d2b+0x94>
 800f8ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8b0:	4405      	add	r5, r0
 800f8b2:	603d      	str	r5, [r7, #0]
 800f8b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8b8:	6030      	str	r0, [r6, #0]
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	b003      	add	sp, #12
 800f8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8c6:	e7d6      	b.n	800f876 <__d2b+0x2e>
 800f8c8:	6161      	str	r1, [r4, #20]
 800f8ca:	e7e7      	b.n	800f89c <__d2b+0x54>
 800f8cc:	a801      	add	r0, sp, #4
 800f8ce:	f7ff fd61 	bl	800f394 <__lo0bits>
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	6163      	str	r3, [r4, #20]
 800f8d6:	3020      	adds	r0, #32
 800f8d8:	2201      	movs	r2, #1
 800f8da:	e7e5      	b.n	800f8a8 <__d2b+0x60>
 800f8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8e4:	6038      	str	r0, [r7, #0]
 800f8e6:	6918      	ldr	r0, [r3, #16]
 800f8e8:	f7ff fd34 	bl	800f354 <__hi0bits>
 800f8ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8f0:	e7e2      	b.n	800f8b8 <__d2b+0x70>
 800f8f2:	bf00      	nop
 800f8f4:	08011a44 	.word	0x08011a44
 800f8f8:	08011a55 	.word	0x08011a55

0800f8fc <__ssputs_r>:
 800f8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f900:	688e      	ldr	r6, [r1, #8]
 800f902:	461f      	mov	r7, r3
 800f904:	42be      	cmp	r6, r7
 800f906:	680b      	ldr	r3, [r1, #0]
 800f908:	4682      	mov	sl, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	4690      	mov	r8, r2
 800f90e:	d82c      	bhi.n	800f96a <__ssputs_r+0x6e>
 800f910:	898a      	ldrh	r2, [r1, #12]
 800f912:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f916:	d026      	beq.n	800f966 <__ssputs_r+0x6a>
 800f918:	6965      	ldr	r5, [r4, #20]
 800f91a:	6909      	ldr	r1, [r1, #16]
 800f91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f920:	eba3 0901 	sub.w	r9, r3, r1
 800f924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f928:	1c7b      	adds	r3, r7, #1
 800f92a:	444b      	add	r3, r9
 800f92c:	106d      	asrs	r5, r5, #1
 800f92e:	429d      	cmp	r5, r3
 800f930:	bf38      	it	cc
 800f932:	461d      	movcc	r5, r3
 800f934:	0553      	lsls	r3, r2, #21
 800f936:	d527      	bpl.n	800f988 <__ssputs_r+0x8c>
 800f938:	4629      	mov	r1, r5
 800f93a:	f7ff fbd7 	bl	800f0ec <_malloc_r>
 800f93e:	4606      	mov	r6, r0
 800f940:	b360      	cbz	r0, 800f99c <__ssputs_r+0xa0>
 800f942:	6921      	ldr	r1, [r4, #16]
 800f944:	464a      	mov	r2, r9
 800f946:	f7fe fcd4 	bl	800e2f2 <memcpy>
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f954:	81a3      	strh	r3, [r4, #12]
 800f956:	6126      	str	r6, [r4, #16]
 800f958:	6165      	str	r5, [r4, #20]
 800f95a:	444e      	add	r6, r9
 800f95c:	eba5 0509 	sub.w	r5, r5, r9
 800f960:	6026      	str	r6, [r4, #0]
 800f962:	60a5      	str	r5, [r4, #8]
 800f964:	463e      	mov	r6, r7
 800f966:	42be      	cmp	r6, r7
 800f968:	d900      	bls.n	800f96c <__ssputs_r+0x70>
 800f96a:	463e      	mov	r6, r7
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	4632      	mov	r2, r6
 800f970:	4641      	mov	r1, r8
 800f972:	f000 f9c9 	bl	800fd08 <memmove>
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	1b9b      	subs	r3, r3, r6
 800f97a:	60a3      	str	r3, [r4, #8]
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	4433      	add	r3, r6
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	2000      	movs	r0, #0
 800f984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f988:	462a      	mov	r2, r5
 800f98a:	f000 fa2d 	bl	800fde8 <_realloc_r>
 800f98e:	4606      	mov	r6, r0
 800f990:	2800      	cmp	r0, #0
 800f992:	d1e0      	bne.n	800f956 <__ssputs_r+0x5a>
 800f994:	6921      	ldr	r1, [r4, #16]
 800f996:	4650      	mov	r0, sl
 800f998:	f7ff fb34 	bl	800f004 <_free_r>
 800f99c:	230c      	movs	r3, #12
 800f99e:	f8ca 3000 	str.w	r3, [sl]
 800f9a2:	89a3      	ldrh	r3, [r4, #12]
 800f9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9ae:	e7e9      	b.n	800f984 <__ssputs_r+0x88>

0800f9b0 <_svfiprintf_r>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	4698      	mov	r8, r3
 800f9b6:	898b      	ldrh	r3, [r1, #12]
 800f9b8:	061b      	lsls	r3, r3, #24
 800f9ba:	b09d      	sub	sp, #116	; 0x74
 800f9bc:	4607      	mov	r7, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	d50e      	bpl.n	800f9e2 <_svfiprintf_r+0x32>
 800f9c4:	690b      	ldr	r3, [r1, #16]
 800f9c6:	b963      	cbnz	r3, 800f9e2 <_svfiprintf_r+0x32>
 800f9c8:	2140      	movs	r1, #64	; 0x40
 800f9ca:	f7ff fb8f 	bl	800f0ec <_malloc_r>
 800f9ce:	6028      	str	r0, [r5, #0]
 800f9d0:	6128      	str	r0, [r5, #16]
 800f9d2:	b920      	cbnz	r0, 800f9de <_svfiprintf_r+0x2e>
 800f9d4:	230c      	movs	r3, #12
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9dc:	e0d0      	b.n	800fb80 <_svfiprintf_r+0x1d0>
 800f9de:	2340      	movs	r3, #64	; 0x40
 800f9e0:	616b      	str	r3, [r5, #20]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e6:	2320      	movs	r3, #32
 800f9e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f0:	2330      	movs	r3, #48	; 0x30
 800f9f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb98 <_svfiprintf_r+0x1e8>
 800f9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9fa:	f04f 0901 	mov.w	r9, #1
 800f9fe:	4623      	mov	r3, r4
 800fa00:	469a      	mov	sl, r3
 800fa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa06:	b10a      	cbz	r2, 800fa0c <_svfiprintf_r+0x5c>
 800fa08:	2a25      	cmp	r2, #37	; 0x25
 800fa0a:	d1f9      	bne.n	800fa00 <_svfiprintf_r+0x50>
 800fa0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fa10:	d00b      	beq.n	800fa2a <_svfiprintf_r+0x7a>
 800fa12:	465b      	mov	r3, fp
 800fa14:	4622      	mov	r2, r4
 800fa16:	4629      	mov	r1, r5
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f7ff ff6f 	bl	800f8fc <__ssputs_r>
 800fa1e:	3001      	adds	r0, #1
 800fa20:	f000 80a9 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa26:	445a      	add	r2, fp
 800fa28:	9209      	str	r2, [sp, #36]	; 0x24
 800fa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 80a1 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa34:	2300      	movs	r3, #0
 800fa36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa3e:	f10a 0a01 	add.w	sl, sl, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa4a:	931a      	str	r3, [sp, #104]	; 0x68
 800fa4c:	4654      	mov	r4, sl
 800fa4e:	2205      	movs	r2, #5
 800fa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa54:	4850      	ldr	r0, [pc, #320]	; (800fb98 <_svfiprintf_r+0x1e8>)
 800fa56:	f7f0 fbdb 	bl	8000210 <memchr>
 800fa5a:	9a04      	ldr	r2, [sp, #16]
 800fa5c:	b9d8      	cbnz	r0, 800fa96 <_svfiprintf_r+0xe6>
 800fa5e:	06d0      	lsls	r0, r2, #27
 800fa60:	bf44      	itt	mi
 800fa62:	2320      	movmi	r3, #32
 800fa64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa68:	0711      	lsls	r1, r2, #28
 800fa6a:	bf44      	itt	mi
 800fa6c:	232b      	movmi	r3, #43	; 0x2b
 800fa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa72:	f89a 3000 	ldrb.w	r3, [sl]
 800fa76:	2b2a      	cmp	r3, #42	; 0x2a
 800fa78:	d015      	beq.n	800faa6 <_svfiprintf_r+0xf6>
 800fa7a:	9a07      	ldr	r2, [sp, #28]
 800fa7c:	4654      	mov	r4, sl
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f04f 0c0a 	mov.w	ip, #10
 800fa84:	4621      	mov	r1, r4
 800fa86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8a:	3b30      	subs	r3, #48	; 0x30
 800fa8c:	2b09      	cmp	r3, #9
 800fa8e:	d94d      	bls.n	800fb2c <_svfiprintf_r+0x17c>
 800fa90:	b1b0      	cbz	r0, 800fac0 <_svfiprintf_r+0x110>
 800fa92:	9207      	str	r2, [sp, #28]
 800fa94:	e014      	b.n	800fac0 <_svfiprintf_r+0x110>
 800fa96:	eba0 0308 	sub.w	r3, r0, r8
 800fa9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	9304      	str	r3, [sp, #16]
 800faa2:	46a2      	mov	sl, r4
 800faa4:	e7d2      	b.n	800fa4c <_svfiprintf_r+0x9c>
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	1d19      	adds	r1, r3, #4
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bfbb      	ittet	lt
 800fab2:	425b      	neglt	r3, r3
 800fab4:	f042 0202 	orrlt.w	r2, r2, #2
 800fab8:	9307      	strge	r3, [sp, #28]
 800faba:	9307      	strlt	r3, [sp, #28]
 800fabc:	bfb8      	it	lt
 800fabe:	9204      	strlt	r2, [sp, #16]
 800fac0:	7823      	ldrb	r3, [r4, #0]
 800fac2:	2b2e      	cmp	r3, #46	; 0x2e
 800fac4:	d10c      	bne.n	800fae0 <_svfiprintf_r+0x130>
 800fac6:	7863      	ldrb	r3, [r4, #1]
 800fac8:	2b2a      	cmp	r3, #42	; 0x2a
 800faca:	d134      	bne.n	800fb36 <_svfiprintf_r+0x186>
 800facc:	9b03      	ldr	r3, [sp, #12]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	9203      	str	r2, [sp, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	bfb8      	it	lt
 800fad8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fadc:	3402      	adds	r4, #2
 800fade:	9305      	str	r3, [sp, #20]
 800fae0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fba8 <_svfiprintf_r+0x1f8>
 800fae4:	7821      	ldrb	r1, [r4, #0]
 800fae6:	2203      	movs	r2, #3
 800fae8:	4650      	mov	r0, sl
 800faea:	f7f0 fb91 	bl	8000210 <memchr>
 800faee:	b138      	cbz	r0, 800fb00 <_svfiprintf_r+0x150>
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	eba0 000a 	sub.w	r0, r0, sl
 800faf6:	2240      	movs	r2, #64	; 0x40
 800faf8:	4082      	lsls	r2, r0
 800fafa:	4313      	orrs	r3, r2
 800fafc:	3401      	adds	r4, #1
 800fafe:	9304      	str	r3, [sp, #16]
 800fb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb04:	4825      	ldr	r0, [pc, #148]	; (800fb9c <_svfiprintf_r+0x1ec>)
 800fb06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb0a:	2206      	movs	r2, #6
 800fb0c:	f7f0 fb80 	bl	8000210 <memchr>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d038      	beq.n	800fb86 <_svfiprintf_r+0x1d6>
 800fb14:	4b22      	ldr	r3, [pc, #136]	; (800fba0 <_svfiprintf_r+0x1f0>)
 800fb16:	bb1b      	cbnz	r3, 800fb60 <_svfiprintf_r+0x1b0>
 800fb18:	9b03      	ldr	r3, [sp, #12]
 800fb1a:	3307      	adds	r3, #7
 800fb1c:	f023 0307 	bic.w	r3, r3, #7
 800fb20:	3308      	adds	r3, #8
 800fb22:	9303      	str	r3, [sp, #12]
 800fb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb26:	4433      	add	r3, r6
 800fb28:	9309      	str	r3, [sp, #36]	; 0x24
 800fb2a:	e768      	b.n	800f9fe <_svfiprintf_r+0x4e>
 800fb2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb30:	460c      	mov	r4, r1
 800fb32:	2001      	movs	r0, #1
 800fb34:	e7a6      	b.n	800fa84 <_svfiprintf_r+0xd4>
 800fb36:	2300      	movs	r3, #0
 800fb38:	3401      	adds	r4, #1
 800fb3a:	9305      	str	r3, [sp, #20]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	f04f 0c0a 	mov.w	ip, #10
 800fb42:	4620      	mov	r0, r4
 800fb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb48:	3a30      	subs	r2, #48	; 0x30
 800fb4a:	2a09      	cmp	r2, #9
 800fb4c:	d903      	bls.n	800fb56 <_svfiprintf_r+0x1a6>
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d0c6      	beq.n	800fae0 <_svfiprintf_r+0x130>
 800fb52:	9105      	str	r1, [sp, #20]
 800fb54:	e7c4      	b.n	800fae0 <_svfiprintf_r+0x130>
 800fb56:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e7f0      	b.n	800fb42 <_svfiprintf_r+0x192>
 800fb60:	ab03      	add	r3, sp, #12
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	462a      	mov	r2, r5
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <_svfiprintf_r+0x1f4>)
 800fb68:	a904      	add	r1, sp, #16
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f7fd fdbe 	bl	800d6ec <_printf_float>
 800fb70:	1c42      	adds	r2, r0, #1
 800fb72:	4606      	mov	r6, r0
 800fb74:	d1d6      	bne.n	800fb24 <_svfiprintf_r+0x174>
 800fb76:	89ab      	ldrh	r3, [r5, #12]
 800fb78:	065b      	lsls	r3, r3, #25
 800fb7a:	f53f af2d 	bmi.w	800f9d8 <_svfiprintf_r+0x28>
 800fb7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb80:	b01d      	add	sp, #116	; 0x74
 800fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb86:	ab03      	add	r3, sp, #12
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	462a      	mov	r2, r5
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <_svfiprintf_r+0x1f4>)
 800fb8e:	a904      	add	r1, sp, #16
 800fb90:	4638      	mov	r0, r7
 800fb92:	f7fe f84f 	bl	800dc34 <_printf_i>
 800fb96:	e7eb      	b.n	800fb70 <_svfiprintf_r+0x1c0>
 800fb98:	08011bac 	.word	0x08011bac
 800fb9c:	08011bb6 	.word	0x08011bb6
 800fba0:	0800d6ed 	.word	0x0800d6ed
 800fba4:	0800f8fd 	.word	0x0800f8fd
 800fba8:	08011bb2 	.word	0x08011bb2

0800fbac <__sflush_r>:
 800fbac:	898a      	ldrh	r2, [r1, #12]
 800fbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	0710      	lsls	r0, r2, #28
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	d458      	bmi.n	800fc6c <__sflush_r+0xc0>
 800fbba:	684b      	ldr	r3, [r1, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dc05      	bgt.n	800fbcc <__sflush_r+0x20>
 800fbc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dc02      	bgt.n	800fbcc <__sflush_r+0x20>
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	d0f9      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbd8:	682f      	ldr	r7, [r5, #0]
 800fbda:	6a21      	ldr	r1, [r4, #32]
 800fbdc:	602b      	str	r3, [r5, #0]
 800fbde:	d032      	beq.n	800fc46 <__sflush_r+0x9a>
 800fbe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbe2:	89a3      	ldrh	r3, [r4, #12]
 800fbe4:	075a      	lsls	r2, r3, #29
 800fbe6:	d505      	bpl.n	800fbf4 <__sflush_r+0x48>
 800fbe8:	6863      	ldr	r3, [r4, #4]
 800fbea:	1ac0      	subs	r0, r0, r3
 800fbec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbee:	b10b      	cbz	r3, 800fbf4 <__sflush_r+0x48>
 800fbf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbf2:	1ac0      	subs	r0, r0, r3
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbfa:	6a21      	ldr	r1, [r4, #32]
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	47b0      	blx	r6
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	89a3      	ldrh	r3, [r4, #12]
 800fc04:	d106      	bne.n	800fc14 <__sflush_r+0x68>
 800fc06:	6829      	ldr	r1, [r5, #0]
 800fc08:	291d      	cmp	r1, #29
 800fc0a:	d82b      	bhi.n	800fc64 <__sflush_r+0xb8>
 800fc0c:	4a29      	ldr	r2, [pc, #164]	; (800fcb4 <__sflush_r+0x108>)
 800fc0e:	410a      	asrs	r2, r1
 800fc10:	07d6      	lsls	r6, r2, #31
 800fc12:	d427      	bmi.n	800fc64 <__sflush_r+0xb8>
 800fc14:	2200      	movs	r2, #0
 800fc16:	6062      	str	r2, [r4, #4]
 800fc18:	04d9      	lsls	r1, r3, #19
 800fc1a:	6922      	ldr	r2, [r4, #16]
 800fc1c:	6022      	str	r2, [r4, #0]
 800fc1e:	d504      	bpl.n	800fc2a <__sflush_r+0x7e>
 800fc20:	1c42      	adds	r2, r0, #1
 800fc22:	d101      	bne.n	800fc28 <__sflush_r+0x7c>
 800fc24:	682b      	ldr	r3, [r5, #0]
 800fc26:	b903      	cbnz	r3, 800fc2a <__sflush_r+0x7e>
 800fc28:	6560      	str	r0, [r4, #84]	; 0x54
 800fc2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc2c:	602f      	str	r7, [r5, #0]
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	d0c9      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fc32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc36:	4299      	cmp	r1, r3
 800fc38:	d002      	beq.n	800fc40 <__sflush_r+0x94>
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f7ff f9e2 	bl	800f004 <_free_r>
 800fc40:	2000      	movs	r0, #0
 800fc42:	6360      	str	r0, [r4, #52]	; 0x34
 800fc44:	e7c0      	b.n	800fbc8 <__sflush_r+0x1c>
 800fc46:	2301      	movs	r3, #1
 800fc48:	4628      	mov	r0, r5
 800fc4a:	47b0      	blx	r6
 800fc4c:	1c41      	adds	r1, r0, #1
 800fc4e:	d1c8      	bne.n	800fbe2 <__sflush_r+0x36>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0c5      	beq.n	800fbe2 <__sflush_r+0x36>
 800fc56:	2b1d      	cmp	r3, #29
 800fc58:	d001      	beq.n	800fc5e <__sflush_r+0xb2>
 800fc5a:	2b16      	cmp	r3, #22
 800fc5c:	d101      	bne.n	800fc62 <__sflush_r+0xb6>
 800fc5e:	602f      	str	r7, [r5, #0]
 800fc60:	e7b1      	b.n	800fbc6 <__sflush_r+0x1a>
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	e7ad      	b.n	800fbc8 <__sflush_r+0x1c>
 800fc6c:	690f      	ldr	r7, [r1, #16]
 800fc6e:	2f00      	cmp	r7, #0
 800fc70:	d0a9      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fc72:	0793      	lsls	r3, r2, #30
 800fc74:	680e      	ldr	r6, [r1, #0]
 800fc76:	bf08      	it	eq
 800fc78:	694b      	ldreq	r3, [r1, #20]
 800fc7a:	600f      	str	r7, [r1, #0]
 800fc7c:	bf18      	it	ne
 800fc7e:	2300      	movne	r3, #0
 800fc80:	eba6 0807 	sub.w	r8, r6, r7
 800fc84:	608b      	str	r3, [r1, #8]
 800fc86:	f1b8 0f00 	cmp.w	r8, #0
 800fc8a:	dd9c      	ble.n	800fbc6 <__sflush_r+0x1a>
 800fc8c:	6a21      	ldr	r1, [r4, #32]
 800fc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc90:	4643      	mov	r3, r8
 800fc92:	463a      	mov	r2, r7
 800fc94:	4628      	mov	r0, r5
 800fc96:	47b0      	blx	r6
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	dc06      	bgt.n	800fcaa <__sflush_r+0xfe>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca2:	81a3      	strh	r3, [r4, #12]
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fca8:	e78e      	b.n	800fbc8 <__sflush_r+0x1c>
 800fcaa:	4407      	add	r7, r0
 800fcac:	eba8 0800 	sub.w	r8, r8, r0
 800fcb0:	e7e9      	b.n	800fc86 <__sflush_r+0xda>
 800fcb2:	bf00      	nop
 800fcb4:	dfbffffe 	.word	0xdfbffffe

0800fcb8 <_fflush_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	690b      	ldr	r3, [r1, #16]
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	b913      	cbnz	r3, 800fcc8 <_fflush_r+0x10>
 800fcc2:	2500      	movs	r5, #0
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	b118      	cbz	r0, 800fcd2 <_fflush_r+0x1a>
 800fcca:	6a03      	ldr	r3, [r0, #32]
 800fccc:	b90b      	cbnz	r3, 800fcd2 <_fflush_r+0x1a>
 800fcce:	f7fe f95f 	bl	800df90 <__sinit>
 800fcd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d0f3      	beq.n	800fcc2 <_fflush_r+0xa>
 800fcda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcdc:	07d0      	lsls	r0, r2, #31
 800fcde:	d404      	bmi.n	800fcea <_fflush_r+0x32>
 800fce0:	0599      	lsls	r1, r3, #22
 800fce2:	d402      	bmi.n	800fcea <_fflush_r+0x32>
 800fce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fce6:	f7fe fb02 	bl	800e2ee <__retarget_lock_acquire_recursive>
 800fcea:	4628      	mov	r0, r5
 800fcec:	4621      	mov	r1, r4
 800fcee:	f7ff ff5d 	bl	800fbac <__sflush_r>
 800fcf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcf4:	07da      	lsls	r2, r3, #31
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	d4e4      	bmi.n	800fcc4 <_fflush_r+0xc>
 800fcfa:	89a3      	ldrh	r3, [r4, #12]
 800fcfc:	059b      	lsls	r3, r3, #22
 800fcfe:	d4e1      	bmi.n	800fcc4 <_fflush_r+0xc>
 800fd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd02:	f7fe faf5 	bl	800e2f0 <__retarget_lock_release_recursive>
 800fd06:	e7dd      	b.n	800fcc4 <_fflush_r+0xc>

0800fd08 <memmove>:
 800fd08:	4288      	cmp	r0, r1
 800fd0a:	b510      	push	{r4, lr}
 800fd0c:	eb01 0402 	add.w	r4, r1, r2
 800fd10:	d902      	bls.n	800fd18 <memmove+0x10>
 800fd12:	4284      	cmp	r4, r0
 800fd14:	4623      	mov	r3, r4
 800fd16:	d807      	bhi.n	800fd28 <memmove+0x20>
 800fd18:	1e43      	subs	r3, r0, #1
 800fd1a:	42a1      	cmp	r1, r4
 800fd1c:	d008      	beq.n	800fd30 <memmove+0x28>
 800fd1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd26:	e7f8      	b.n	800fd1a <memmove+0x12>
 800fd28:	4402      	add	r2, r0
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	428a      	cmp	r2, r1
 800fd2e:	d100      	bne.n	800fd32 <memmove+0x2a>
 800fd30:	bd10      	pop	{r4, pc}
 800fd32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd3a:	e7f7      	b.n	800fd2c <memmove+0x24>

0800fd3c <_sbrk_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d06      	ldr	r5, [pc, #24]	; (800fd58 <_sbrk_r+0x1c>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f2 fc50 	bl	80025ec <_sbrk>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_sbrk_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_sbrk_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	20005dbc 	.word	0x20005dbc

0800fd5c <__assert_func>:
 800fd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5e:	4614      	mov	r4, r2
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b09      	ldr	r3, [pc, #36]	; (800fd88 <__assert_func+0x2c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4605      	mov	r5, r0
 800fd68:	68d8      	ldr	r0, [r3, #12]
 800fd6a:	b14c      	cbz	r4, 800fd80 <__assert_func+0x24>
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <__assert_func+0x30>)
 800fd6e:	9100      	str	r1, [sp, #0]
 800fd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd74:	4906      	ldr	r1, [pc, #24]	; (800fd90 <__assert_func+0x34>)
 800fd76:	462b      	mov	r3, r5
 800fd78:	f000 f872 	bl	800fe60 <fiprintf>
 800fd7c:	f000 f882 	bl	800fe84 <abort>
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <__assert_func+0x38>)
 800fd82:	461c      	mov	r4, r3
 800fd84:	e7f3      	b.n	800fd6e <__assert_func+0x12>
 800fd86:	bf00      	nop
 800fd88:	20000084 	.word	0x20000084
 800fd8c:	08011bc7 	.word	0x08011bc7
 800fd90:	08011bd4 	.word	0x08011bd4
 800fd94:	08011c02 	.word	0x08011c02

0800fd98 <_calloc_r>:
 800fd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd9a:	fba1 2402 	umull	r2, r4, r1, r2
 800fd9e:	b94c      	cbnz	r4, 800fdb4 <_calloc_r+0x1c>
 800fda0:	4611      	mov	r1, r2
 800fda2:	9201      	str	r2, [sp, #4]
 800fda4:	f7ff f9a2 	bl	800f0ec <_malloc_r>
 800fda8:	9a01      	ldr	r2, [sp, #4]
 800fdaa:	4605      	mov	r5, r0
 800fdac:	b930      	cbnz	r0, 800fdbc <_calloc_r+0x24>
 800fdae:	4628      	mov	r0, r5
 800fdb0:	b003      	add	sp, #12
 800fdb2:	bd30      	pop	{r4, r5, pc}
 800fdb4:	220c      	movs	r2, #12
 800fdb6:	6002      	str	r2, [r0, #0]
 800fdb8:	2500      	movs	r5, #0
 800fdba:	e7f8      	b.n	800fdae <_calloc_r+0x16>
 800fdbc:	4621      	mov	r1, r4
 800fdbe:	f7fe f9b4 	bl	800e12a <memset>
 800fdc2:	e7f4      	b.n	800fdae <_calloc_r+0x16>

0800fdc4 <__ascii_mbtowc>:
 800fdc4:	b082      	sub	sp, #8
 800fdc6:	b901      	cbnz	r1, 800fdca <__ascii_mbtowc+0x6>
 800fdc8:	a901      	add	r1, sp, #4
 800fdca:	b142      	cbz	r2, 800fdde <__ascii_mbtowc+0x1a>
 800fdcc:	b14b      	cbz	r3, 800fde2 <__ascii_mbtowc+0x1e>
 800fdce:	7813      	ldrb	r3, [r2, #0]
 800fdd0:	600b      	str	r3, [r1, #0]
 800fdd2:	7812      	ldrb	r2, [r2, #0]
 800fdd4:	1e10      	subs	r0, r2, #0
 800fdd6:	bf18      	it	ne
 800fdd8:	2001      	movne	r0, #1
 800fdda:	b002      	add	sp, #8
 800fddc:	4770      	bx	lr
 800fdde:	4610      	mov	r0, r2
 800fde0:	e7fb      	b.n	800fdda <__ascii_mbtowc+0x16>
 800fde2:	f06f 0001 	mvn.w	r0, #1
 800fde6:	e7f8      	b.n	800fdda <__ascii_mbtowc+0x16>

0800fde8 <_realloc_r>:
 800fde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdec:	4680      	mov	r8, r0
 800fdee:	4614      	mov	r4, r2
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	b921      	cbnz	r1, 800fdfe <_realloc_r+0x16>
 800fdf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	f7ff b977 	b.w	800f0ec <_malloc_r>
 800fdfe:	b92a      	cbnz	r2, 800fe0c <_realloc_r+0x24>
 800fe00:	f7ff f900 	bl	800f004 <_free_r>
 800fe04:	4625      	mov	r5, r4
 800fe06:	4628      	mov	r0, r5
 800fe08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe0c:	f000 f841 	bl	800fe92 <_malloc_usable_size_r>
 800fe10:	4284      	cmp	r4, r0
 800fe12:	4607      	mov	r7, r0
 800fe14:	d802      	bhi.n	800fe1c <_realloc_r+0x34>
 800fe16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe1a:	d812      	bhi.n	800fe42 <_realloc_r+0x5a>
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4640      	mov	r0, r8
 800fe20:	f7ff f964 	bl	800f0ec <_malloc_r>
 800fe24:	4605      	mov	r5, r0
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d0ed      	beq.n	800fe06 <_realloc_r+0x1e>
 800fe2a:	42bc      	cmp	r4, r7
 800fe2c:	4622      	mov	r2, r4
 800fe2e:	4631      	mov	r1, r6
 800fe30:	bf28      	it	cs
 800fe32:	463a      	movcs	r2, r7
 800fe34:	f7fe fa5d 	bl	800e2f2 <memcpy>
 800fe38:	4631      	mov	r1, r6
 800fe3a:	4640      	mov	r0, r8
 800fe3c:	f7ff f8e2 	bl	800f004 <_free_r>
 800fe40:	e7e1      	b.n	800fe06 <_realloc_r+0x1e>
 800fe42:	4635      	mov	r5, r6
 800fe44:	e7df      	b.n	800fe06 <_realloc_r+0x1e>

0800fe46 <__ascii_wctomb>:
 800fe46:	b149      	cbz	r1, 800fe5c <__ascii_wctomb+0x16>
 800fe48:	2aff      	cmp	r2, #255	; 0xff
 800fe4a:	bf85      	ittet	hi
 800fe4c:	238a      	movhi	r3, #138	; 0x8a
 800fe4e:	6003      	strhi	r3, [r0, #0]
 800fe50:	700a      	strbls	r2, [r1, #0]
 800fe52:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fe56:	bf98      	it	ls
 800fe58:	2001      	movls	r0, #1
 800fe5a:	4770      	bx	lr
 800fe5c:	4608      	mov	r0, r1
 800fe5e:	4770      	bx	lr

0800fe60 <fiprintf>:
 800fe60:	b40e      	push	{r1, r2, r3}
 800fe62:	b503      	push	{r0, r1, lr}
 800fe64:	4601      	mov	r1, r0
 800fe66:	ab03      	add	r3, sp, #12
 800fe68:	4805      	ldr	r0, [pc, #20]	; (800fe80 <fiprintf+0x20>)
 800fe6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe6e:	6800      	ldr	r0, [r0, #0]
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	f000 f83f 	bl	800fef4 <_vfiprintf_r>
 800fe76:	b002      	add	sp, #8
 800fe78:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe7c:	b003      	add	sp, #12
 800fe7e:	4770      	bx	lr
 800fe80:	20000084 	.word	0x20000084

0800fe84 <abort>:
 800fe84:	b508      	push	{r3, lr}
 800fe86:	2006      	movs	r0, #6
 800fe88:	f000 fa0c 	bl	80102a4 <raise>
 800fe8c:	2001      	movs	r0, #1
 800fe8e:	f7f2 fb35 	bl	80024fc <_exit>

0800fe92 <_malloc_usable_size_r>:
 800fe92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe96:	1f18      	subs	r0, r3, #4
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bfbc      	itt	lt
 800fe9c:	580b      	ldrlt	r3, [r1, r0]
 800fe9e:	18c0      	addlt	r0, r0, r3
 800fea0:	4770      	bx	lr

0800fea2 <__sfputc_r>:
 800fea2:	6893      	ldr	r3, [r2, #8]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	b410      	push	{r4}
 800feaa:	6093      	str	r3, [r2, #8]
 800feac:	da08      	bge.n	800fec0 <__sfputc_r+0x1e>
 800feae:	6994      	ldr	r4, [r2, #24]
 800feb0:	42a3      	cmp	r3, r4
 800feb2:	db01      	blt.n	800feb8 <__sfputc_r+0x16>
 800feb4:	290a      	cmp	r1, #10
 800feb6:	d103      	bne.n	800fec0 <__sfputc_r+0x1e>
 800feb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800febc:	f000 b934 	b.w	8010128 <__swbuf_r>
 800fec0:	6813      	ldr	r3, [r2, #0]
 800fec2:	1c58      	adds	r0, r3, #1
 800fec4:	6010      	str	r0, [r2, #0]
 800fec6:	7019      	strb	r1, [r3, #0]
 800fec8:	4608      	mov	r0, r1
 800feca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <__sfputs_r>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	4606      	mov	r6, r0
 800fed4:	460f      	mov	r7, r1
 800fed6:	4614      	mov	r4, r2
 800fed8:	18d5      	adds	r5, r2, r3
 800feda:	42ac      	cmp	r4, r5
 800fedc:	d101      	bne.n	800fee2 <__sfputs_r+0x12>
 800fede:	2000      	movs	r0, #0
 800fee0:	e007      	b.n	800fef2 <__sfputs_r+0x22>
 800fee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fee6:	463a      	mov	r2, r7
 800fee8:	4630      	mov	r0, r6
 800feea:	f7ff ffda 	bl	800fea2 <__sfputc_r>
 800feee:	1c43      	adds	r3, r0, #1
 800fef0:	d1f3      	bne.n	800feda <__sfputs_r+0xa>
 800fef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fef4 <_vfiprintf_r>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	460d      	mov	r5, r1
 800fefa:	b09d      	sub	sp, #116	; 0x74
 800fefc:	4614      	mov	r4, r2
 800fefe:	4698      	mov	r8, r3
 800ff00:	4606      	mov	r6, r0
 800ff02:	b118      	cbz	r0, 800ff0c <_vfiprintf_r+0x18>
 800ff04:	6a03      	ldr	r3, [r0, #32]
 800ff06:	b90b      	cbnz	r3, 800ff0c <_vfiprintf_r+0x18>
 800ff08:	f7fe f842 	bl	800df90 <__sinit>
 800ff0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff0e:	07d9      	lsls	r1, r3, #31
 800ff10:	d405      	bmi.n	800ff1e <_vfiprintf_r+0x2a>
 800ff12:	89ab      	ldrh	r3, [r5, #12]
 800ff14:	059a      	lsls	r2, r3, #22
 800ff16:	d402      	bmi.n	800ff1e <_vfiprintf_r+0x2a>
 800ff18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff1a:	f7fe f9e8 	bl	800e2ee <__retarget_lock_acquire_recursive>
 800ff1e:	89ab      	ldrh	r3, [r5, #12]
 800ff20:	071b      	lsls	r3, r3, #28
 800ff22:	d501      	bpl.n	800ff28 <_vfiprintf_r+0x34>
 800ff24:	692b      	ldr	r3, [r5, #16]
 800ff26:	b99b      	cbnz	r3, 800ff50 <_vfiprintf_r+0x5c>
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f000 f93a 	bl	80101a4 <__swsetup_r>
 800ff30:	b170      	cbz	r0, 800ff50 <_vfiprintf_r+0x5c>
 800ff32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff34:	07dc      	lsls	r4, r3, #31
 800ff36:	d504      	bpl.n	800ff42 <_vfiprintf_r+0x4e>
 800ff38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff3c:	b01d      	add	sp, #116	; 0x74
 800ff3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	0598      	lsls	r0, r3, #22
 800ff46:	d4f7      	bmi.n	800ff38 <_vfiprintf_r+0x44>
 800ff48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff4a:	f7fe f9d1 	bl	800e2f0 <__retarget_lock_release_recursive>
 800ff4e:	e7f3      	b.n	800ff38 <_vfiprintf_r+0x44>
 800ff50:	2300      	movs	r3, #0
 800ff52:	9309      	str	r3, [sp, #36]	; 0x24
 800ff54:	2320      	movs	r3, #32
 800ff56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff5e:	2330      	movs	r3, #48	; 0x30
 800ff60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010114 <_vfiprintf_r+0x220>
 800ff64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff68:	f04f 0901 	mov.w	r9, #1
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	469a      	mov	sl, r3
 800ff70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff74:	b10a      	cbz	r2, 800ff7a <_vfiprintf_r+0x86>
 800ff76:	2a25      	cmp	r2, #37	; 0x25
 800ff78:	d1f9      	bne.n	800ff6e <_vfiprintf_r+0x7a>
 800ff7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff7e:	d00b      	beq.n	800ff98 <_vfiprintf_r+0xa4>
 800ff80:	465b      	mov	r3, fp
 800ff82:	4622      	mov	r2, r4
 800ff84:	4629      	mov	r1, r5
 800ff86:	4630      	mov	r0, r6
 800ff88:	f7ff ffa2 	bl	800fed0 <__sfputs_r>
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	f000 80a9 	beq.w	80100e4 <_vfiprintf_r+0x1f0>
 800ff92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff94:	445a      	add	r2, fp
 800ff96:	9209      	str	r2, [sp, #36]	; 0x24
 800ff98:	f89a 3000 	ldrb.w	r3, [sl]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	f000 80a1 	beq.w	80100e4 <_vfiprintf_r+0x1f0>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ffa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffac:	f10a 0a01 	add.w	sl, sl, #1
 800ffb0:	9304      	str	r3, [sp, #16]
 800ffb2:	9307      	str	r3, [sp, #28]
 800ffb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffb8:	931a      	str	r3, [sp, #104]	; 0x68
 800ffba:	4654      	mov	r4, sl
 800ffbc:	2205      	movs	r2, #5
 800ffbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc2:	4854      	ldr	r0, [pc, #336]	; (8010114 <_vfiprintf_r+0x220>)
 800ffc4:	f7f0 f924 	bl	8000210 <memchr>
 800ffc8:	9a04      	ldr	r2, [sp, #16]
 800ffca:	b9d8      	cbnz	r0, 8010004 <_vfiprintf_r+0x110>
 800ffcc:	06d1      	lsls	r1, r2, #27
 800ffce:	bf44      	itt	mi
 800ffd0:	2320      	movmi	r3, #32
 800ffd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffd6:	0713      	lsls	r3, r2, #28
 800ffd8:	bf44      	itt	mi
 800ffda:	232b      	movmi	r3, #43	; 0x2b
 800ffdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffe0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe4:	2b2a      	cmp	r3, #42	; 0x2a
 800ffe6:	d015      	beq.n	8010014 <_vfiprintf_r+0x120>
 800ffe8:	9a07      	ldr	r2, [sp, #28]
 800ffea:	4654      	mov	r4, sl
 800ffec:	2000      	movs	r0, #0
 800ffee:	f04f 0c0a 	mov.w	ip, #10
 800fff2:	4621      	mov	r1, r4
 800fff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fff8:	3b30      	subs	r3, #48	; 0x30
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	d94d      	bls.n	801009a <_vfiprintf_r+0x1a6>
 800fffe:	b1b0      	cbz	r0, 801002e <_vfiprintf_r+0x13a>
 8010000:	9207      	str	r2, [sp, #28]
 8010002:	e014      	b.n	801002e <_vfiprintf_r+0x13a>
 8010004:	eba0 0308 	sub.w	r3, r0, r8
 8010008:	fa09 f303 	lsl.w	r3, r9, r3
 801000c:	4313      	orrs	r3, r2
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	46a2      	mov	sl, r4
 8010012:	e7d2      	b.n	800ffba <_vfiprintf_r+0xc6>
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	1d19      	adds	r1, r3, #4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	9103      	str	r1, [sp, #12]
 801001c:	2b00      	cmp	r3, #0
 801001e:	bfbb      	ittet	lt
 8010020:	425b      	neglt	r3, r3
 8010022:	f042 0202 	orrlt.w	r2, r2, #2
 8010026:	9307      	strge	r3, [sp, #28]
 8010028:	9307      	strlt	r3, [sp, #28]
 801002a:	bfb8      	it	lt
 801002c:	9204      	strlt	r2, [sp, #16]
 801002e:	7823      	ldrb	r3, [r4, #0]
 8010030:	2b2e      	cmp	r3, #46	; 0x2e
 8010032:	d10c      	bne.n	801004e <_vfiprintf_r+0x15a>
 8010034:	7863      	ldrb	r3, [r4, #1]
 8010036:	2b2a      	cmp	r3, #42	; 0x2a
 8010038:	d134      	bne.n	80100a4 <_vfiprintf_r+0x1b0>
 801003a:	9b03      	ldr	r3, [sp, #12]
 801003c:	1d1a      	adds	r2, r3, #4
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	9203      	str	r2, [sp, #12]
 8010042:	2b00      	cmp	r3, #0
 8010044:	bfb8      	it	lt
 8010046:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801004a:	3402      	adds	r4, #2
 801004c:	9305      	str	r3, [sp, #20]
 801004e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010124 <_vfiprintf_r+0x230>
 8010052:	7821      	ldrb	r1, [r4, #0]
 8010054:	2203      	movs	r2, #3
 8010056:	4650      	mov	r0, sl
 8010058:	f7f0 f8da 	bl	8000210 <memchr>
 801005c:	b138      	cbz	r0, 801006e <_vfiprintf_r+0x17a>
 801005e:	9b04      	ldr	r3, [sp, #16]
 8010060:	eba0 000a 	sub.w	r0, r0, sl
 8010064:	2240      	movs	r2, #64	; 0x40
 8010066:	4082      	lsls	r2, r0
 8010068:	4313      	orrs	r3, r2
 801006a:	3401      	adds	r4, #1
 801006c:	9304      	str	r3, [sp, #16]
 801006e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010072:	4829      	ldr	r0, [pc, #164]	; (8010118 <_vfiprintf_r+0x224>)
 8010074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010078:	2206      	movs	r2, #6
 801007a:	f7f0 f8c9 	bl	8000210 <memchr>
 801007e:	2800      	cmp	r0, #0
 8010080:	d03f      	beq.n	8010102 <_vfiprintf_r+0x20e>
 8010082:	4b26      	ldr	r3, [pc, #152]	; (801011c <_vfiprintf_r+0x228>)
 8010084:	bb1b      	cbnz	r3, 80100ce <_vfiprintf_r+0x1da>
 8010086:	9b03      	ldr	r3, [sp, #12]
 8010088:	3307      	adds	r3, #7
 801008a:	f023 0307 	bic.w	r3, r3, #7
 801008e:	3308      	adds	r3, #8
 8010090:	9303      	str	r3, [sp, #12]
 8010092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010094:	443b      	add	r3, r7
 8010096:	9309      	str	r3, [sp, #36]	; 0x24
 8010098:	e768      	b.n	800ff6c <_vfiprintf_r+0x78>
 801009a:	fb0c 3202 	mla	r2, ip, r2, r3
 801009e:	460c      	mov	r4, r1
 80100a0:	2001      	movs	r0, #1
 80100a2:	e7a6      	b.n	800fff2 <_vfiprintf_r+0xfe>
 80100a4:	2300      	movs	r3, #0
 80100a6:	3401      	adds	r4, #1
 80100a8:	9305      	str	r3, [sp, #20]
 80100aa:	4619      	mov	r1, r3
 80100ac:	f04f 0c0a 	mov.w	ip, #10
 80100b0:	4620      	mov	r0, r4
 80100b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100b6:	3a30      	subs	r2, #48	; 0x30
 80100b8:	2a09      	cmp	r2, #9
 80100ba:	d903      	bls.n	80100c4 <_vfiprintf_r+0x1d0>
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0c6      	beq.n	801004e <_vfiprintf_r+0x15a>
 80100c0:	9105      	str	r1, [sp, #20]
 80100c2:	e7c4      	b.n	801004e <_vfiprintf_r+0x15a>
 80100c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80100c8:	4604      	mov	r4, r0
 80100ca:	2301      	movs	r3, #1
 80100cc:	e7f0      	b.n	80100b0 <_vfiprintf_r+0x1bc>
 80100ce:	ab03      	add	r3, sp, #12
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	462a      	mov	r2, r5
 80100d4:	4b12      	ldr	r3, [pc, #72]	; (8010120 <_vfiprintf_r+0x22c>)
 80100d6:	a904      	add	r1, sp, #16
 80100d8:	4630      	mov	r0, r6
 80100da:	f7fd fb07 	bl	800d6ec <_printf_float>
 80100de:	4607      	mov	r7, r0
 80100e0:	1c78      	adds	r0, r7, #1
 80100e2:	d1d6      	bne.n	8010092 <_vfiprintf_r+0x19e>
 80100e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100e6:	07d9      	lsls	r1, r3, #31
 80100e8:	d405      	bmi.n	80100f6 <_vfiprintf_r+0x202>
 80100ea:	89ab      	ldrh	r3, [r5, #12]
 80100ec:	059a      	lsls	r2, r3, #22
 80100ee:	d402      	bmi.n	80100f6 <_vfiprintf_r+0x202>
 80100f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100f2:	f7fe f8fd 	bl	800e2f0 <__retarget_lock_release_recursive>
 80100f6:	89ab      	ldrh	r3, [r5, #12]
 80100f8:	065b      	lsls	r3, r3, #25
 80100fa:	f53f af1d 	bmi.w	800ff38 <_vfiprintf_r+0x44>
 80100fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010100:	e71c      	b.n	800ff3c <_vfiprintf_r+0x48>
 8010102:	ab03      	add	r3, sp, #12
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	462a      	mov	r2, r5
 8010108:	4b05      	ldr	r3, [pc, #20]	; (8010120 <_vfiprintf_r+0x22c>)
 801010a:	a904      	add	r1, sp, #16
 801010c:	4630      	mov	r0, r6
 801010e:	f7fd fd91 	bl	800dc34 <_printf_i>
 8010112:	e7e4      	b.n	80100de <_vfiprintf_r+0x1ea>
 8010114:	08011bac 	.word	0x08011bac
 8010118:	08011bb6 	.word	0x08011bb6
 801011c:	0800d6ed 	.word	0x0800d6ed
 8010120:	0800fed1 	.word	0x0800fed1
 8010124:	08011bb2 	.word	0x08011bb2

08010128 <__swbuf_r>:
 8010128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012a:	460e      	mov	r6, r1
 801012c:	4614      	mov	r4, r2
 801012e:	4605      	mov	r5, r0
 8010130:	b118      	cbz	r0, 801013a <__swbuf_r+0x12>
 8010132:	6a03      	ldr	r3, [r0, #32]
 8010134:	b90b      	cbnz	r3, 801013a <__swbuf_r+0x12>
 8010136:	f7fd ff2b 	bl	800df90 <__sinit>
 801013a:	69a3      	ldr	r3, [r4, #24]
 801013c:	60a3      	str	r3, [r4, #8]
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	071a      	lsls	r2, r3, #28
 8010142:	d525      	bpl.n	8010190 <__swbuf_r+0x68>
 8010144:	6923      	ldr	r3, [r4, #16]
 8010146:	b31b      	cbz	r3, 8010190 <__swbuf_r+0x68>
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	6922      	ldr	r2, [r4, #16]
 801014c:	1a98      	subs	r0, r3, r2
 801014e:	6963      	ldr	r3, [r4, #20]
 8010150:	b2f6      	uxtb	r6, r6
 8010152:	4283      	cmp	r3, r0
 8010154:	4637      	mov	r7, r6
 8010156:	dc04      	bgt.n	8010162 <__swbuf_r+0x3a>
 8010158:	4621      	mov	r1, r4
 801015a:	4628      	mov	r0, r5
 801015c:	f7ff fdac 	bl	800fcb8 <_fflush_r>
 8010160:	b9e0      	cbnz	r0, 801019c <__swbuf_r+0x74>
 8010162:	68a3      	ldr	r3, [r4, #8]
 8010164:	3b01      	subs	r3, #1
 8010166:	60a3      	str	r3, [r4, #8]
 8010168:	6823      	ldr	r3, [r4, #0]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	6022      	str	r2, [r4, #0]
 801016e:	701e      	strb	r6, [r3, #0]
 8010170:	6962      	ldr	r2, [r4, #20]
 8010172:	1c43      	adds	r3, r0, #1
 8010174:	429a      	cmp	r2, r3
 8010176:	d004      	beq.n	8010182 <__swbuf_r+0x5a>
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	07db      	lsls	r3, r3, #31
 801017c:	d506      	bpl.n	801018c <__swbuf_r+0x64>
 801017e:	2e0a      	cmp	r6, #10
 8010180:	d104      	bne.n	801018c <__swbuf_r+0x64>
 8010182:	4621      	mov	r1, r4
 8010184:	4628      	mov	r0, r5
 8010186:	f7ff fd97 	bl	800fcb8 <_fflush_r>
 801018a:	b938      	cbnz	r0, 801019c <__swbuf_r+0x74>
 801018c:	4638      	mov	r0, r7
 801018e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010190:	4621      	mov	r1, r4
 8010192:	4628      	mov	r0, r5
 8010194:	f000 f806 	bl	80101a4 <__swsetup_r>
 8010198:	2800      	cmp	r0, #0
 801019a:	d0d5      	beq.n	8010148 <__swbuf_r+0x20>
 801019c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80101a0:	e7f4      	b.n	801018c <__swbuf_r+0x64>
	...

080101a4 <__swsetup_r>:
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4b2a      	ldr	r3, [pc, #168]	; (8010250 <__swsetup_r+0xac>)
 80101a8:	4605      	mov	r5, r0
 80101aa:	6818      	ldr	r0, [r3, #0]
 80101ac:	460c      	mov	r4, r1
 80101ae:	b118      	cbz	r0, 80101b8 <__swsetup_r+0x14>
 80101b0:	6a03      	ldr	r3, [r0, #32]
 80101b2:	b90b      	cbnz	r3, 80101b8 <__swsetup_r+0x14>
 80101b4:	f7fd feec 	bl	800df90 <__sinit>
 80101b8:	89a3      	ldrh	r3, [r4, #12]
 80101ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101be:	0718      	lsls	r0, r3, #28
 80101c0:	d422      	bmi.n	8010208 <__swsetup_r+0x64>
 80101c2:	06d9      	lsls	r1, r3, #27
 80101c4:	d407      	bmi.n	80101d6 <__swsetup_r+0x32>
 80101c6:	2309      	movs	r3, #9
 80101c8:	602b      	str	r3, [r5, #0]
 80101ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101ce:	81a3      	strh	r3, [r4, #12]
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101d4:	e034      	b.n	8010240 <__swsetup_r+0x9c>
 80101d6:	0758      	lsls	r0, r3, #29
 80101d8:	d512      	bpl.n	8010200 <__swsetup_r+0x5c>
 80101da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101dc:	b141      	cbz	r1, 80101f0 <__swsetup_r+0x4c>
 80101de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101e2:	4299      	cmp	r1, r3
 80101e4:	d002      	beq.n	80101ec <__swsetup_r+0x48>
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7fe ff0c 	bl	800f004 <_free_r>
 80101ec:	2300      	movs	r3, #0
 80101ee:	6363      	str	r3, [r4, #52]	; 0x34
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101f6:	81a3      	strh	r3, [r4, #12]
 80101f8:	2300      	movs	r3, #0
 80101fa:	6063      	str	r3, [r4, #4]
 80101fc:	6923      	ldr	r3, [r4, #16]
 80101fe:	6023      	str	r3, [r4, #0]
 8010200:	89a3      	ldrh	r3, [r4, #12]
 8010202:	f043 0308 	orr.w	r3, r3, #8
 8010206:	81a3      	strh	r3, [r4, #12]
 8010208:	6923      	ldr	r3, [r4, #16]
 801020a:	b94b      	cbnz	r3, 8010220 <__swsetup_r+0x7c>
 801020c:	89a3      	ldrh	r3, [r4, #12]
 801020e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010216:	d003      	beq.n	8010220 <__swsetup_r+0x7c>
 8010218:	4621      	mov	r1, r4
 801021a:	4628      	mov	r0, r5
 801021c:	f000 f884 	bl	8010328 <__smakebuf_r>
 8010220:	89a0      	ldrh	r0, [r4, #12]
 8010222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010226:	f010 0301 	ands.w	r3, r0, #1
 801022a:	d00a      	beq.n	8010242 <__swsetup_r+0x9e>
 801022c:	2300      	movs	r3, #0
 801022e:	60a3      	str	r3, [r4, #8]
 8010230:	6963      	ldr	r3, [r4, #20]
 8010232:	425b      	negs	r3, r3
 8010234:	61a3      	str	r3, [r4, #24]
 8010236:	6923      	ldr	r3, [r4, #16]
 8010238:	b943      	cbnz	r3, 801024c <__swsetup_r+0xa8>
 801023a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801023e:	d1c4      	bne.n	80101ca <__swsetup_r+0x26>
 8010240:	bd38      	pop	{r3, r4, r5, pc}
 8010242:	0781      	lsls	r1, r0, #30
 8010244:	bf58      	it	pl
 8010246:	6963      	ldrpl	r3, [r4, #20]
 8010248:	60a3      	str	r3, [r4, #8]
 801024a:	e7f4      	b.n	8010236 <__swsetup_r+0x92>
 801024c:	2000      	movs	r0, #0
 801024e:	e7f7      	b.n	8010240 <__swsetup_r+0x9c>
 8010250:	20000084 	.word	0x20000084

08010254 <_raise_r>:
 8010254:	291f      	cmp	r1, #31
 8010256:	b538      	push	{r3, r4, r5, lr}
 8010258:	4604      	mov	r4, r0
 801025a:	460d      	mov	r5, r1
 801025c:	d904      	bls.n	8010268 <_raise_r+0x14>
 801025e:	2316      	movs	r3, #22
 8010260:	6003      	str	r3, [r0, #0]
 8010262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010266:	bd38      	pop	{r3, r4, r5, pc}
 8010268:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801026a:	b112      	cbz	r2, 8010272 <_raise_r+0x1e>
 801026c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010270:	b94b      	cbnz	r3, 8010286 <_raise_r+0x32>
 8010272:	4620      	mov	r0, r4
 8010274:	f000 f830 	bl	80102d8 <_getpid_r>
 8010278:	462a      	mov	r2, r5
 801027a:	4601      	mov	r1, r0
 801027c:	4620      	mov	r0, r4
 801027e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010282:	f000 b817 	b.w	80102b4 <_kill_r>
 8010286:	2b01      	cmp	r3, #1
 8010288:	d00a      	beq.n	80102a0 <_raise_r+0x4c>
 801028a:	1c59      	adds	r1, r3, #1
 801028c:	d103      	bne.n	8010296 <_raise_r+0x42>
 801028e:	2316      	movs	r3, #22
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	2001      	movs	r0, #1
 8010294:	e7e7      	b.n	8010266 <_raise_r+0x12>
 8010296:	2400      	movs	r4, #0
 8010298:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801029c:	4628      	mov	r0, r5
 801029e:	4798      	blx	r3
 80102a0:	2000      	movs	r0, #0
 80102a2:	e7e0      	b.n	8010266 <_raise_r+0x12>

080102a4 <raise>:
 80102a4:	4b02      	ldr	r3, [pc, #8]	; (80102b0 <raise+0xc>)
 80102a6:	4601      	mov	r1, r0
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	f7ff bfd3 	b.w	8010254 <_raise_r>
 80102ae:	bf00      	nop
 80102b0:	20000084 	.word	0x20000084

080102b4 <_kill_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d07      	ldr	r5, [pc, #28]	; (80102d4 <_kill_r+0x20>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	4611      	mov	r1, r2
 80102c0:	602b      	str	r3, [r5, #0]
 80102c2:	f7f2 f90b 	bl	80024dc <_kill>
 80102c6:	1c43      	adds	r3, r0, #1
 80102c8:	d102      	bne.n	80102d0 <_kill_r+0x1c>
 80102ca:	682b      	ldr	r3, [r5, #0]
 80102cc:	b103      	cbz	r3, 80102d0 <_kill_r+0x1c>
 80102ce:	6023      	str	r3, [r4, #0]
 80102d0:	bd38      	pop	{r3, r4, r5, pc}
 80102d2:	bf00      	nop
 80102d4:	20005dbc 	.word	0x20005dbc

080102d8 <_getpid_r>:
 80102d8:	f7f2 b8f8 	b.w	80024cc <_getpid>

080102dc <__swhatbuf_r>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	460c      	mov	r4, r1
 80102e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e4:	2900      	cmp	r1, #0
 80102e6:	b096      	sub	sp, #88	; 0x58
 80102e8:	4615      	mov	r5, r2
 80102ea:	461e      	mov	r6, r3
 80102ec:	da0d      	bge.n	801030a <__swhatbuf_r+0x2e>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80102f4:	f04f 0100 	mov.w	r1, #0
 80102f8:	bf0c      	ite	eq
 80102fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80102fe:	2340      	movne	r3, #64	; 0x40
 8010300:	2000      	movs	r0, #0
 8010302:	6031      	str	r1, [r6, #0]
 8010304:	602b      	str	r3, [r5, #0]
 8010306:	b016      	add	sp, #88	; 0x58
 8010308:	bd70      	pop	{r4, r5, r6, pc}
 801030a:	466a      	mov	r2, sp
 801030c:	f000 f848 	bl	80103a0 <_fstat_r>
 8010310:	2800      	cmp	r0, #0
 8010312:	dbec      	blt.n	80102ee <__swhatbuf_r+0x12>
 8010314:	9901      	ldr	r1, [sp, #4]
 8010316:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801031a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801031e:	4259      	negs	r1, r3
 8010320:	4159      	adcs	r1, r3
 8010322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010326:	e7eb      	b.n	8010300 <__swhatbuf_r+0x24>

08010328 <__smakebuf_r>:
 8010328:	898b      	ldrh	r3, [r1, #12]
 801032a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801032c:	079d      	lsls	r5, r3, #30
 801032e:	4606      	mov	r6, r0
 8010330:	460c      	mov	r4, r1
 8010332:	d507      	bpl.n	8010344 <__smakebuf_r+0x1c>
 8010334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	6123      	str	r3, [r4, #16]
 801033c:	2301      	movs	r3, #1
 801033e:	6163      	str	r3, [r4, #20]
 8010340:	b002      	add	sp, #8
 8010342:	bd70      	pop	{r4, r5, r6, pc}
 8010344:	ab01      	add	r3, sp, #4
 8010346:	466a      	mov	r2, sp
 8010348:	f7ff ffc8 	bl	80102dc <__swhatbuf_r>
 801034c:	9900      	ldr	r1, [sp, #0]
 801034e:	4605      	mov	r5, r0
 8010350:	4630      	mov	r0, r6
 8010352:	f7fe fecb 	bl	800f0ec <_malloc_r>
 8010356:	b948      	cbnz	r0, 801036c <__smakebuf_r+0x44>
 8010358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801035c:	059a      	lsls	r2, r3, #22
 801035e:	d4ef      	bmi.n	8010340 <__smakebuf_r+0x18>
 8010360:	f023 0303 	bic.w	r3, r3, #3
 8010364:	f043 0302 	orr.w	r3, r3, #2
 8010368:	81a3      	strh	r3, [r4, #12]
 801036a:	e7e3      	b.n	8010334 <__smakebuf_r+0xc>
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	6020      	str	r0, [r4, #0]
 8010370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010374:	81a3      	strh	r3, [r4, #12]
 8010376:	9b00      	ldr	r3, [sp, #0]
 8010378:	6163      	str	r3, [r4, #20]
 801037a:	9b01      	ldr	r3, [sp, #4]
 801037c:	6120      	str	r0, [r4, #16]
 801037e:	b15b      	cbz	r3, 8010398 <__smakebuf_r+0x70>
 8010380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010384:	4630      	mov	r0, r6
 8010386:	f000 f81d 	bl	80103c4 <_isatty_r>
 801038a:	b128      	cbz	r0, 8010398 <__smakebuf_r+0x70>
 801038c:	89a3      	ldrh	r3, [r4, #12]
 801038e:	f023 0303 	bic.w	r3, r3, #3
 8010392:	f043 0301 	orr.w	r3, r3, #1
 8010396:	81a3      	strh	r3, [r4, #12]
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	431d      	orrs	r5, r3
 801039c:	81a5      	strh	r5, [r4, #12]
 801039e:	e7cf      	b.n	8010340 <__smakebuf_r+0x18>

080103a0 <_fstat_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	4d07      	ldr	r5, [pc, #28]	; (80103c0 <_fstat_r+0x20>)
 80103a4:	2300      	movs	r3, #0
 80103a6:	4604      	mov	r4, r0
 80103a8:	4608      	mov	r0, r1
 80103aa:	4611      	mov	r1, r2
 80103ac:	602b      	str	r3, [r5, #0]
 80103ae:	f7f2 f8f4 	bl	800259a <_fstat>
 80103b2:	1c43      	adds	r3, r0, #1
 80103b4:	d102      	bne.n	80103bc <_fstat_r+0x1c>
 80103b6:	682b      	ldr	r3, [r5, #0]
 80103b8:	b103      	cbz	r3, 80103bc <_fstat_r+0x1c>
 80103ba:	6023      	str	r3, [r4, #0]
 80103bc:	bd38      	pop	{r3, r4, r5, pc}
 80103be:	bf00      	nop
 80103c0:	20005dbc 	.word	0x20005dbc

080103c4 <_isatty_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d06      	ldr	r5, [pc, #24]	; (80103e0 <_isatty_r+0x1c>)
 80103c8:	2300      	movs	r3, #0
 80103ca:	4604      	mov	r4, r0
 80103cc:	4608      	mov	r0, r1
 80103ce:	602b      	str	r3, [r5, #0]
 80103d0:	f7f2 f8f3 	bl	80025ba <_isatty>
 80103d4:	1c43      	adds	r3, r0, #1
 80103d6:	d102      	bne.n	80103de <_isatty_r+0x1a>
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	b103      	cbz	r3, 80103de <_isatty_r+0x1a>
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	bd38      	pop	{r3, r4, r5, pc}
 80103e0:	20005dbc 	.word	0x20005dbc
 80103e4:	00000000 	.word	0x00000000

080103e8 <log>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	ed2d 8b02 	vpush	{d8}
 80103ee:	ec55 4b10 	vmov	r4, r5, d0
 80103f2:	f000 f8bd 	bl	8010570 <__ieee754_log>
 80103f6:	4622      	mov	r2, r4
 80103f8:	462b      	mov	r3, r5
 80103fa:	4620      	mov	r0, r4
 80103fc:	4629      	mov	r1, r5
 80103fe:	eeb0 8a40 	vmov.f32	s16, s0
 8010402:	eef0 8a60 	vmov.f32	s17, s1
 8010406:	f7f0 fbb1 	bl	8000b6c <__aeabi_dcmpun>
 801040a:	b998      	cbnz	r0, 8010434 <log+0x4c>
 801040c:	2200      	movs	r2, #0
 801040e:	2300      	movs	r3, #0
 8010410:	4620      	mov	r0, r4
 8010412:	4629      	mov	r1, r5
 8010414:	f7f0 fba0 	bl	8000b58 <__aeabi_dcmpgt>
 8010418:	b960      	cbnz	r0, 8010434 <log+0x4c>
 801041a:	2200      	movs	r2, #0
 801041c:	2300      	movs	r3, #0
 801041e:	4620      	mov	r0, r4
 8010420:	4629      	mov	r1, r5
 8010422:	f7f0 fb71 	bl	8000b08 <__aeabi_dcmpeq>
 8010426:	b160      	cbz	r0, 8010442 <log+0x5a>
 8010428:	f7fd ff36 	bl	800e298 <__errno>
 801042c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8010458 <log+0x70>
 8010430:	2322      	movs	r3, #34	; 0x22
 8010432:	6003      	str	r3, [r0, #0]
 8010434:	eeb0 0a48 	vmov.f32	s0, s16
 8010438:	eef0 0a68 	vmov.f32	s1, s17
 801043c:	ecbd 8b02 	vpop	{d8}
 8010440:	bd38      	pop	{r3, r4, r5, pc}
 8010442:	f7fd ff29 	bl	800e298 <__errno>
 8010446:	ecbd 8b02 	vpop	{d8}
 801044a:	2321      	movs	r3, #33	; 0x21
 801044c:	6003      	str	r3, [r0, #0]
 801044e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010452:	4803      	ldr	r0, [pc, #12]	; (8010460 <log+0x78>)
 8010454:	f000 b884 	b.w	8010560 <nan>
 8010458:	00000000 	.word	0x00000000
 801045c:	fff00000 	.word	0xfff00000
 8010460:	08011c02 	.word	0x08011c02

08010464 <pow>:
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	ed2d 8b02 	vpush	{d8}
 801046a:	eeb0 8a40 	vmov.f32	s16, s0
 801046e:	eef0 8a60 	vmov.f32	s17, s1
 8010472:	ec55 4b11 	vmov	r4, r5, d1
 8010476:	f000 fa37 	bl	80108e8 <__ieee754_pow>
 801047a:	4622      	mov	r2, r4
 801047c:	462b      	mov	r3, r5
 801047e:	4620      	mov	r0, r4
 8010480:	4629      	mov	r1, r5
 8010482:	ec57 6b10 	vmov	r6, r7, d0
 8010486:	f7f0 fb71 	bl	8000b6c <__aeabi_dcmpun>
 801048a:	2800      	cmp	r0, #0
 801048c:	d13b      	bne.n	8010506 <pow+0xa2>
 801048e:	ec51 0b18 	vmov	r0, r1, d8
 8010492:	2200      	movs	r2, #0
 8010494:	2300      	movs	r3, #0
 8010496:	f7f0 fb37 	bl	8000b08 <__aeabi_dcmpeq>
 801049a:	b1b8      	cbz	r0, 80104cc <pow+0x68>
 801049c:	2200      	movs	r2, #0
 801049e:	2300      	movs	r3, #0
 80104a0:	4620      	mov	r0, r4
 80104a2:	4629      	mov	r1, r5
 80104a4:	f7f0 fb30 	bl	8000b08 <__aeabi_dcmpeq>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d146      	bne.n	801053a <pow+0xd6>
 80104ac:	ec45 4b10 	vmov	d0, r4, r5
 80104b0:	f000 f848 	bl	8010544 <finite>
 80104b4:	b338      	cbz	r0, 8010506 <pow+0xa2>
 80104b6:	2200      	movs	r2, #0
 80104b8:	2300      	movs	r3, #0
 80104ba:	4620      	mov	r0, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	f7f0 fb2d 	bl	8000b1c <__aeabi_dcmplt>
 80104c2:	b300      	cbz	r0, 8010506 <pow+0xa2>
 80104c4:	f7fd fee8 	bl	800e298 <__errno>
 80104c8:	2322      	movs	r3, #34	; 0x22
 80104ca:	e01b      	b.n	8010504 <pow+0xa0>
 80104cc:	ec47 6b10 	vmov	d0, r6, r7
 80104d0:	f000 f838 	bl	8010544 <finite>
 80104d4:	b9e0      	cbnz	r0, 8010510 <pow+0xac>
 80104d6:	eeb0 0a48 	vmov.f32	s0, s16
 80104da:	eef0 0a68 	vmov.f32	s1, s17
 80104de:	f000 f831 	bl	8010544 <finite>
 80104e2:	b1a8      	cbz	r0, 8010510 <pow+0xac>
 80104e4:	ec45 4b10 	vmov	d0, r4, r5
 80104e8:	f000 f82c 	bl	8010544 <finite>
 80104ec:	b180      	cbz	r0, 8010510 <pow+0xac>
 80104ee:	4632      	mov	r2, r6
 80104f0:	463b      	mov	r3, r7
 80104f2:	4630      	mov	r0, r6
 80104f4:	4639      	mov	r1, r7
 80104f6:	f7f0 fb39 	bl	8000b6c <__aeabi_dcmpun>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d0e2      	beq.n	80104c4 <pow+0x60>
 80104fe:	f7fd fecb 	bl	800e298 <__errno>
 8010502:	2321      	movs	r3, #33	; 0x21
 8010504:	6003      	str	r3, [r0, #0]
 8010506:	ecbd 8b02 	vpop	{d8}
 801050a:	ec47 6b10 	vmov	d0, r6, r7
 801050e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010510:	2200      	movs	r2, #0
 8010512:	2300      	movs	r3, #0
 8010514:	4630      	mov	r0, r6
 8010516:	4639      	mov	r1, r7
 8010518:	f7f0 faf6 	bl	8000b08 <__aeabi_dcmpeq>
 801051c:	2800      	cmp	r0, #0
 801051e:	d0f2      	beq.n	8010506 <pow+0xa2>
 8010520:	eeb0 0a48 	vmov.f32	s0, s16
 8010524:	eef0 0a68 	vmov.f32	s1, s17
 8010528:	f000 f80c 	bl	8010544 <finite>
 801052c:	2800      	cmp	r0, #0
 801052e:	d0ea      	beq.n	8010506 <pow+0xa2>
 8010530:	ec45 4b10 	vmov	d0, r4, r5
 8010534:	f000 f806 	bl	8010544 <finite>
 8010538:	e7c3      	b.n	80104c2 <pow+0x5e>
 801053a:	4f01      	ldr	r7, [pc, #4]	; (8010540 <pow+0xdc>)
 801053c:	2600      	movs	r6, #0
 801053e:	e7e2      	b.n	8010506 <pow+0xa2>
 8010540:	3ff00000 	.word	0x3ff00000

08010544 <finite>:
 8010544:	b082      	sub	sp, #8
 8010546:	ed8d 0b00 	vstr	d0, [sp]
 801054a:	9801      	ldr	r0, [sp, #4]
 801054c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010550:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010554:	0fc0      	lsrs	r0, r0, #31
 8010556:	b002      	add	sp, #8
 8010558:	4770      	bx	lr
 801055a:	0000      	movs	r0, r0
 801055c:	0000      	movs	r0, r0
	...

08010560 <nan>:
 8010560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010568 <nan+0x8>
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	00000000 	.word	0x00000000
 801056c:	7ff80000 	.word	0x7ff80000

08010570 <__ieee754_log>:
 8010570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010574:	ec51 0b10 	vmov	r0, r1, d0
 8010578:	ed2d 8b04 	vpush	{d8-d9}
 801057c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010580:	b083      	sub	sp, #12
 8010582:	460d      	mov	r5, r1
 8010584:	da29      	bge.n	80105da <__ieee754_log+0x6a>
 8010586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801058a:	4303      	orrs	r3, r0
 801058c:	ee10 2a10 	vmov	r2, s0
 8010590:	d10c      	bne.n	80105ac <__ieee754_log+0x3c>
 8010592:	49cf      	ldr	r1, [pc, #828]	; (80108d0 <__ieee754_log+0x360>)
 8010594:	2200      	movs	r2, #0
 8010596:	2300      	movs	r3, #0
 8010598:	2000      	movs	r0, #0
 801059a:	f7f0 f977 	bl	800088c <__aeabi_ddiv>
 801059e:	ec41 0b10 	vmov	d0, r0, r1
 80105a2:	b003      	add	sp, #12
 80105a4:	ecbd 8b04 	vpop	{d8-d9}
 80105a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ac:	2900      	cmp	r1, #0
 80105ae:	da05      	bge.n	80105bc <__ieee754_log+0x4c>
 80105b0:	460b      	mov	r3, r1
 80105b2:	f7ef fe89 	bl	80002c8 <__aeabi_dsub>
 80105b6:	2200      	movs	r2, #0
 80105b8:	2300      	movs	r3, #0
 80105ba:	e7ee      	b.n	801059a <__ieee754_log+0x2a>
 80105bc:	4bc5      	ldr	r3, [pc, #788]	; (80108d4 <__ieee754_log+0x364>)
 80105be:	2200      	movs	r2, #0
 80105c0:	f7f0 f83a 	bl	8000638 <__aeabi_dmul>
 80105c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80105c8:	460d      	mov	r5, r1
 80105ca:	4ac3      	ldr	r2, [pc, #780]	; (80108d8 <__ieee754_log+0x368>)
 80105cc:	4295      	cmp	r5, r2
 80105ce:	dd06      	ble.n	80105de <__ieee754_log+0x6e>
 80105d0:	4602      	mov	r2, r0
 80105d2:	460b      	mov	r3, r1
 80105d4:	f7ef fe7a 	bl	80002cc <__adddf3>
 80105d8:	e7e1      	b.n	801059e <__ieee754_log+0x2e>
 80105da:	2300      	movs	r3, #0
 80105dc:	e7f5      	b.n	80105ca <__ieee754_log+0x5a>
 80105de:	152c      	asrs	r4, r5, #20
 80105e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80105e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80105e8:	441c      	add	r4, r3
 80105ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80105ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80105f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80105fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80105fe:	ea42 0105 	orr.w	r1, r2, r5
 8010602:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010606:	2200      	movs	r2, #0
 8010608:	4bb4      	ldr	r3, [pc, #720]	; (80108dc <__ieee754_log+0x36c>)
 801060a:	f7ef fe5d 	bl	80002c8 <__aeabi_dsub>
 801060e:	1cab      	adds	r3, r5, #2
 8010610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010614:	2b02      	cmp	r3, #2
 8010616:	4682      	mov	sl, r0
 8010618:	468b      	mov	fp, r1
 801061a:	f04f 0200 	mov.w	r2, #0
 801061e:	dc53      	bgt.n	80106c8 <__ieee754_log+0x158>
 8010620:	2300      	movs	r3, #0
 8010622:	f7f0 fa71 	bl	8000b08 <__aeabi_dcmpeq>
 8010626:	b1d0      	cbz	r0, 801065e <__ieee754_log+0xee>
 8010628:	2c00      	cmp	r4, #0
 801062a:	f000 8122 	beq.w	8010872 <__ieee754_log+0x302>
 801062e:	4620      	mov	r0, r4
 8010630:	f7ef ff98 	bl	8000564 <__aeabi_i2d>
 8010634:	a390      	add	r3, pc, #576	; (adr r3, 8010878 <__ieee754_log+0x308>)
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	4606      	mov	r6, r0
 801063c:	460f      	mov	r7, r1
 801063e:	f7ef fffb 	bl	8000638 <__aeabi_dmul>
 8010642:	a38f      	add	r3, pc, #572	; (adr r3, 8010880 <__ieee754_log+0x310>)
 8010644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010648:	4604      	mov	r4, r0
 801064a:	460d      	mov	r5, r1
 801064c:	4630      	mov	r0, r6
 801064e:	4639      	mov	r1, r7
 8010650:	f7ef fff2 	bl	8000638 <__aeabi_dmul>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	4620      	mov	r0, r4
 801065a:	4629      	mov	r1, r5
 801065c:	e7ba      	b.n	80105d4 <__ieee754_log+0x64>
 801065e:	a38a      	add	r3, pc, #552	; (adr r3, 8010888 <__ieee754_log+0x318>)
 8010660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010664:	4650      	mov	r0, sl
 8010666:	4659      	mov	r1, fp
 8010668:	f7ef ffe6 	bl	8000638 <__aeabi_dmul>
 801066c:	4602      	mov	r2, r0
 801066e:	460b      	mov	r3, r1
 8010670:	2000      	movs	r0, #0
 8010672:	499b      	ldr	r1, [pc, #620]	; (80108e0 <__ieee754_log+0x370>)
 8010674:	f7ef fe28 	bl	80002c8 <__aeabi_dsub>
 8010678:	4652      	mov	r2, sl
 801067a:	4606      	mov	r6, r0
 801067c:	460f      	mov	r7, r1
 801067e:	465b      	mov	r3, fp
 8010680:	4650      	mov	r0, sl
 8010682:	4659      	mov	r1, fp
 8010684:	f7ef ffd8 	bl	8000638 <__aeabi_dmul>
 8010688:	4602      	mov	r2, r0
 801068a:	460b      	mov	r3, r1
 801068c:	4630      	mov	r0, r6
 801068e:	4639      	mov	r1, r7
 8010690:	f7ef ffd2 	bl	8000638 <__aeabi_dmul>
 8010694:	4606      	mov	r6, r0
 8010696:	460f      	mov	r7, r1
 8010698:	b914      	cbnz	r4, 80106a0 <__ieee754_log+0x130>
 801069a:	4632      	mov	r2, r6
 801069c:	463b      	mov	r3, r7
 801069e:	e0a2      	b.n	80107e6 <__ieee754_log+0x276>
 80106a0:	4620      	mov	r0, r4
 80106a2:	f7ef ff5f 	bl	8000564 <__aeabi_i2d>
 80106a6:	a374      	add	r3, pc, #464	; (adr r3, 8010878 <__ieee754_log+0x308>)
 80106a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ac:	4680      	mov	r8, r0
 80106ae:	4689      	mov	r9, r1
 80106b0:	f7ef ffc2 	bl	8000638 <__aeabi_dmul>
 80106b4:	a372      	add	r3, pc, #456	; (adr r3, 8010880 <__ieee754_log+0x310>)
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	4640      	mov	r0, r8
 80106c0:	4649      	mov	r1, r9
 80106c2:	f7ef ffb9 	bl	8000638 <__aeabi_dmul>
 80106c6:	e0a7      	b.n	8010818 <__ieee754_log+0x2a8>
 80106c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80106cc:	f7ef fdfe 	bl	80002cc <__adddf3>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4650      	mov	r0, sl
 80106d6:	4659      	mov	r1, fp
 80106d8:	f7f0 f8d8 	bl	800088c <__aeabi_ddiv>
 80106dc:	ec41 0b18 	vmov	d8, r0, r1
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7ef ff3f 	bl	8000564 <__aeabi_i2d>
 80106e6:	ec53 2b18 	vmov	r2, r3, d8
 80106ea:	ec41 0b19 	vmov	d9, r0, r1
 80106ee:	ec51 0b18 	vmov	r0, r1, d8
 80106f2:	f7ef ffa1 	bl	8000638 <__aeabi_dmul>
 80106f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80106fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	4602      	mov	r2, r0
 8010702:	460b      	mov	r3, r1
 8010704:	4680      	mov	r8, r0
 8010706:	4689      	mov	r9, r1
 8010708:	f7ef ff96 	bl	8000638 <__aeabi_dmul>
 801070c:	a360      	add	r3, pc, #384	; (adr r3, 8010890 <__ieee754_log+0x320>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	4606      	mov	r6, r0
 8010714:	460f      	mov	r7, r1
 8010716:	f7ef ff8f 	bl	8000638 <__aeabi_dmul>
 801071a:	a35f      	add	r3, pc, #380	; (adr r3, 8010898 <__ieee754_log+0x328>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef fdd4 	bl	80002cc <__adddf3>
 8010724:	4632      	mov	r2, r6
 8010726:	463b      	mov	r3, r7
 8010728:	f7ef ff86 	bl	8000638 <__aeabi_dmul>
 801072c:	a35c      	add	r3, pc, #368	; (adr r3, 80108a0 <__ieee754_log+0x330>)
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	f7ef fdcb 	bl	80002cc <__adddf3>
 8010736:	4632      	mov	r2, r6
 8010738:	463b      	mov	r3, r7
 801073a:	f7ef ff7d 	bl	8000638 <__aeabi_dmul>
 801073e:	a35a      	add	r3, pc, #360	; (adr r3, 80108a8 <__ieee754_log+0x338>)
 8010740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010744:	f7ef fdc2 	bl	80002cc <__adddf3>
 8010748:	4642      	mov	r2, r8
 801074a:	464b      	mov	r3, r9
 801074c:	f7ef ff74 	bl	8000638 <__aeabi_dmul>
 8010750:	a357      	add	r3, pc, #348	; (adr r3, 80108b0 <__ieee754_log+0x340>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	4680      	mov	r8, r0
 8010758:	4689      	mov	r9, r1
 801075a:	4630      	mov	r0, r6
 801075c:	4639      	mov	r1, r7
 801075e:	f7ef ff6b 	bl	8000638 <__aeabi_dmul>
 8010762:	a355      	add	r3, pc, #340	; (adr r3, 80108b8 <__ieee754_log+0x348>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f7ef fdb0 	bl	80002cc <__adddf3>
 801076c:	4632      	mov	r2, r6
 801076e:	463b      	mov	r3, r7
 8010770:	f7ef ff62 	bl	8000638 <__aeabi_dmul>
 8010774:	a352      	add	r3, pc, #328	; (adr r3, 80108c0 <__ieee754_log+0x350>)
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	f7ef fda7 	bl	80002cc <__adddf3>
 801077e:	4632      	mov	r2, r6
 8010780:	463b      	mov	r3, r7
 8010782:	f7ef ff59 	bl	8000638 <__aeabi_dmul>
 8010786:	460b      	mov	r3, r1
 8010788:	4602      	mov	r2, r0
 801078a:	4649      	mov	r1, r9
 801078c:	4640      	mov	r0, r8
 801078e:	f7ef fd9d 	bl	80002cc <__adddf3>
 8010792:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010796:	9b01      	ldr	r3, [sp, #4]
 8010798:	3551      	adds	r5, #81	; 0x51
 801079a:	431d      	orrs	r5, r3
 801079c:	2d00      	cmp	r5, #0
 801079e:	4680      	mov	r8, r0
 80107a0:	4689      	mov	r9, r1
 80107a2:	dd48      	ble.n	8010836 <__ieee754_log+0x2c6>
 80107a4:	4b4e      	ldr	r3, [pc, #312]	; (80108e0 <__ieee754_log+0x370>)
 80107a6:	2200      	movs	r2, #0
 80107a8:	4650      	mov	r0, sl
 80107aa:	4659      	mov	r1, fp
 80107ac:	f7ef ff44 	bl	8000638 <__aeabi_dmul>
 80107b0:	4652      	mov	r2, sl
 80107b2:	465b      	mov	r3, fp
 80107b4:	f7ef ff40 	bl	8000638 <__aeabi_dmul>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	4606      	mov	r6, r0
 80107be:	460f      	mov	r7, r1
 80107c0:	4640      	mov	r0, r8
 80107c2:	4649      	mov	r1, r9
 80107c4:	f7ef fd82 	bl	80002cc <__adddf3>
 80107c8:	ec53 2b18 	vmov	r2, r3, d8
 80107cc:	f7ef ff34 	bl	8000638 <__aeabi_dmul>
 80107d0:	4680      	mov	r8, r0
 80107d2:	4689      	mov	r9, r1
 80107d4:	b964      	cbnz	r4, 80107f0 <__ieee754_log+0x280>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	4630      	mov	r0, r6
 80107dc:	4639      	mov	r1, r7
 80107de:	f7ef fd73 	bl	80002c8 <__aeabi_dsub>
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	4650      	mov	r0, sl
 80107e8:	4659      	mov	r1, fp
 80107ea:	f7ef fd6d 	bl	80002c8 <__aeabi_dsub>
 80107ee:	e6d6      	b.n	801059e <__ieee754_log+0x2e>
 80107f0:	a321      	add	r3, pc, #132	; (adr r3, 8010878 <__ieee754_log+0x308>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	ec51 0b19 	vmov	r0, r1, d9
 80107fa:	f7ef ff1d 	bl	8000638 <__aeabi_dmul>
 80107fe:	a320      	add	r3, pc, #128	; (adr r3, 8010880 <__ieee754_log+0x310>)
 8010800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010804:	4604      	mov	r4, r0
 8010806:	460d      	mov	r5, r1
 8010808:	ec51 0b19 	vmov	r0, r1, d9
 801080c:	f7ef ff14 	bl	8000638 <__aeabi_dmul>
 8010810:	4642      	mov	r2, r8
 8010812:	464b      	mov	r3, r9
 8010814:	f7ef fd5a 	bl	80002cc <__adddf3>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	4630      	mov	r0, r6
 801081e:	4639      	mov	r1, r7
 8010820:	f7ef fd52 	bl	80002c8 <__aeabi_dsub>
 8010824:	4652      	mov	r2, sl
 8010826:	465b      	mov	r3, fp
 8010828:	f7ef fd4e 	bl	80002c8 <__aeabi_dsub>
 801082c:	4602      	mov	r2, r0
 801082e:	460b      	mov	r3, r1
 8010830:	4620      	mov	r0, r4
 8010832:	4629      	mov	r1, r5
 8010834:	e7d9      	b.n	80107ea <__ieee754_log+0x27a>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4650      	mov	r0, sl
 801083c:	4659      	mov	r1, fp
 801083e:	f7ef fd43 	bl	80002c8 <__aeabi_dsub>
 8010842:	ec53 2b18 	vmov	r2, r3, d8
 8010846:	f7ef fef7 	bl	8000638 <__aeabi_dmul>
 801084a:	4606      	mov	r6, r0
 801084c:	460f      	mov	r7, r1
 801084e:	2c00      	cmp	r4, #0
 8010850:	f43f af23 	beq.w	801069a <__ieee754_log+0x12a>
 8010854:	a308      	add	r3, pc, #32	; (adr r3, 8010878 <__ieee754_log+0x308>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	ec51 0b19 	vmov	r0, r1, d9
 801085e:	f7ef feeb 	bl	8000638 <__aeabi_dmul>
 8010862:	a307      	add	r3, pc, #28	; (adr r3, 8010880 <__ieee754_log+0x310>)
 8010864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010868:	4604      	mov	r4, r0
 801086a:	460d      	mov	r5, r1
 801086c:	ec51 0b19 	vmov	r0, r1, d9
 8010870:	e727      	b.n	80106c2 <__ieee754_log+0x152>
 8010872:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80108c8 <__ieee754_log+0x358>
 8010876:	e694      	b.n	80105a2 <__ieee754_log+0x32>
 8010878:	fee00000 	.word	0xfee00000
 801087c:	3fe62e42 	.word	0x3fe62e42
 8010880:	35793c76 	.word	0x35793c76
 8010884:	3dea39ef 	.word	0x3dea39ef
 8010888:	55555555 	.word	0x55555555
 801088c:	3fd55555 	.word	0x3fd55555
 8010890:	df3e5244 	.word	0xdf3e5244
 8010894:	3fc2f112 	.word	0x3fc2f112
 8010898:	96cb03de 	.word	0x96cb03de
 801089c:	3fc74664 	.word	0x3fc74664
 80108a0:	94229359 	.word	0x94229359
 80108a4:	3fd24924 	.word	0x3fd24924
 80108a8:	55555593 	.word	0x55555593
 80108ac:	3fe55555 	.word	0x3fe55555
 80108b0:	d078c69f 	.word	0xd078c69f
 80108b4:	3fc39a09 	.word	0x3fc39a09
 80108b8:	1d8e78af 	.word	0x1d8e78af
 80108bc:	3fcc71c5 	.word	0x3fcc71c5
 80108c0:	9997fa04 	.word	0x9997fa04
 80108c4:	3fd99999 	.word	0x3fd99999
	...
 80108d0:	c3500000 	.word	0xc3500000
 80108d4:	43500000 	.word	0x43500000
 80108d8:	7fefffff 	.word	0x7fefffff
 80108dc:	3ff00000 	.word	0x3ff00000
 80108e0:	3fe00000 	.word	0x3fe00000
 80108e4:	00000000 	.word	0x00000000

080108e8 <__ieee754_pow>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	ed2d 8b06 	vpush	{d8-d10}
 80108f0:	b089      	sub	sp, #36	; 0x24
 80108f2:	ed8d 1b00 	vstr	d1, [sp]
 80108f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80108fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80108fe:	ea58 0102 	orrs.w	r1, r8, r2
 8010902:	ec57 6b10 	vmov	r6, r7, d0
 8010906:	d115      	bne.n	8010934 <__ieee754_pow+0x4c>
 8010908:	19b3      	adds	r3, r6, r6
 801090a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801090e:	4152      	adcs	r2, r2
 8010910:	4299      	cmp	r1, r3
 8010912:	4b89      	ldr	r3, [pc, #548]	; (8010b38 <__ieee754_pow+0x250>)
 8010914:	4193      	sbcs	r3, r2
 8010916:	f080 84d1 	bcs.w	80112bc <__ieee754_pow+0x9d4>
 801091a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801091e:	4630      	mov	r0, r6
 8010920:	4639      	mov	r1, r7
 8010922:	f7ef fcd3 	bl	80002cc <__adddf3>
 8010926:	ec41 0b10 	vmov	d0, r0, r1
 801092a:	b009      	add	sp, #36	; 0x24
 801092c:	ecbd 8b06 	vpop	{d8-d10}
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	4b81      	ldr	r3, [pc, #516]	; (8010b3c <__ieee754_pow+0x254>)
 8010936:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801093a:	429c      	cmp	r4, r3
 801093c:	ee10 aa10 	vmov	sl, s0
 8010940:	463d      	mov	r5, r7
 8010942:	dc06      	bgt.n	8010952 <__ieee754_pow+0x6a>
 8010944:	d101      	bne.n	801094a <__ieee754_pow+0x62>
 8010946:	2e00      	cmp	r6, #0
 8010948:	d1e7      	bne.n	801091a <__ieee754_pow+0x32>
 801094a:	4598      	cmp	r8, r3
 801094c:	dc01      	bgt.n	8010952 <__ieee754_pow+0x6a>
 801094e:	d10f      	bne.n	8010970 <__ieee754_pow+0x88>
 8010950:	b172      	cbz	r2, 8010970 <__ieee754_pow+0x88>
 8010952:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010956:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801095a:	ea55 050a 	orrs.w	r5, r5, sl
 801095e:	d1dc      	bne.n	801091a <__ieee754_pow+0x32>
 8010960:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010964:	18db      	adds	r3, r3, r3
 8010966:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801096a:	4152      	adcs	r2, r2
 801096c:	429d      	cmp	r5, r3
 801096e:	e7d0      	b.n	8010912 <__ieee754_pow+0x2a>
 8010970:	2d00      	cmp	r5, #0
 8010972:	da3b      	bge.n	80109ec <__ieee754_pow+0x104>
 8010974:	4b72      	ldr	r3, [pc, #456]	; (8010b40 <__ieee754_pow+0x258>)
 8010976:	4598      	cmp	r8, r3
 8010978:	dc51      	bgt.n	8010a1e <__ieee754_pow+0x136>
 801097a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801097e:	4598      	cmp	r8, r3
 8010980:	f340 84ab 	ble.w	80112da <__ieee754_pow+0x9f2>
 8010984:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010988:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801098c:	2b14      	cmp	r3, #20
 801098e:	dd0f      	ble.n	80109b0 <__ieee754_pow+0xc8>
 8010990:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010994:	fa22 f103 	lsr.w	r1, r2, r3
 8010998:	fa01 f303 	lsl.w	r3, r1, r3
 801099c:	4293      	cmp	r3, r2
 801099e:	f040 849c 	bne.w	80112da <__ieee754_pow+0x9f2>
 80109a2:	f001 0101 	and.w	r1, r1, #1
 80109a6:	f1c1 0302 	rsb	r3, r1, #2
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	b182      	cbz	r2, 80109d0 <__ieee754_pow+0xe8>
 80109ae:	e05f      	b.n	8010a70 <__ieee754_pow+0x188>
 80109b0:	2a00      	cmp	r2, #0
 80109b2:	d15b      	bne.n	8010a6c <__ieee754_pow+0x184>
 80109b4:	f1c3 0314 	rsb	r3, r3, #20
 80109b8:	fa48 f103 	asr.w	r1, r8, r3
 80109bc:	fa01 f303 	lsl.w	r3, r1, r3
 80109c0:	4543      	cmp	r3, r8
 80109c2:	f040 8487 	bne.w	80112d4 <__ieee754_pow+0x9ec>
 80109c6:	f001 0101 	and.w	r1, r1, #1
 80109ca:	f1c1 0302 	rsb	r3, r1, #2
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	4b5c      	ldr	r3, [pc, #368]	; (8010b44 <__ieee754_pow+0x25c>)
 80109d2:	4598      	cmp	r8, r3
 80109d4:	d132      	bne.n	8010a3c <__ieee754_pow+0x154>
 80109d6:	f1b9 0f00 	cmp.w	r9, #0
 80109da:	f280 8477 	bge.w	80112cc <__ieee754_pow+0x9e4>
 80109de:	4959      	ldr	r1, [pc, #356]	; (8010b44 <__ieee754_pow+0x25c>)
 80109e0:	4632      	mov	r2, r6
 80109e2:	463b      	mov	r3, r7
 80109e4:	2000      	movs	r0, #0
 80109e6:	f7ef ff51 	bl	800088c <__aeabi_ddiv>
 80109ea:	e79c      	b.n	8010926 <__ieee754_pow+0x3e>
 80109ec:	2300      	movs	r3, #0
 80109ee:	9304      	str	r3, [sp, #16]
 80109f0:	2a00      	cmp	r2, #0
 80109f2:	d13d      	bne.n	8010a70 <__ieee754_pow+0x188>
 80109f4:	4b51      	ldr	r3, [pc, #324]	; (8010b3c <__ieee754_pow+0x254>)
 80109f6:	4598      	cmp	r8, r3
 80109f8:	d1ea      	bne.n	80109d0 <__ieee754_pow+0xe8>
 80109fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80109fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010a02:	ea53 030a 	orrs.w	r3, r3, sl
 8010a06:	f000 8459 	beq.w	80112bc <__ieee754_pow+0x9d4>
 8010a0a:	4b4f      	ldr	r3, [pc, #316]	; (8010b48 <__ieee754_pow+0x260>)
 8010a0c:	429c      	cmp	r4, r3
 8010a0e:	dd08      	ble.n	8010a22 <__ieee754_pow+0x13a>
 8010a10:	f1b9 0f00 	cmp.w	r9, #0
 8010a14:	f2c0 8456 	blt.w	80112c4 <__ieee754_pow+0x9dc>
 8010a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a1c:	e783      	b.n	8010926 <__ieee754_pow+0x3e>
 8010a1e:	2302      	movs	r3, #2
 8010a20:	e7e5      	b.n	80109ee <__ieee754_pow+0x106>
 8010a22:	f1b9 0f00 	cmp.w	r9, #0
 8010a26:	f04f 0000 	mov.w	r0, #0
 8010a2a:	f04f 0100 	mov.w	r1, #0
 8010a2e:	f6bf af7a 	bge.w	8010926 <__ieee754_pow+0x3e>
 8010a32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010a36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a3a:	e774      	b.n	8010926 <__ieee754_pow+0x3e>
 8010a3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010a40:	d106      	bne.n	8010a50 <__ieee754_pow+0x168>
 8010a42:	4632      	mov	r2, r6
 8010a44:	463b      	mov	r3, r7
 8010a46:	4630      	mov	r0, r6
 8010a48:	4639      	mov	r1, r7
 8010a4a:	f7ef fdf5 	bl	8000638 <__aeabi_dmul>
 8010a4e:	e76a      	b.n	8010926 <__ieee754_pow+0x3e>
 8010a50:	4b3e      	ldr	r3, [pc, #248]	; (8010b4c <__ieee754_pow+0x264>)
 8010a52:	4599      	cmp	r9, r3
 8010a54:	d10c      	bne.n	8010a70 <__ieee754_pow+0x188>
 8010a56:	2d00      	cmp	r5, #0
 8010a58:	db0a      	blt.n	8010a70 <__ieee754_pow+0x188>
 8010a5a:	ec47 6b10 	vmov	d0, r6, r7
 8010a5e:	b009      	add	sp, #36	; 0x24
 8010a60:	ecbd 8b06 	vpop	{d8-d10}
 8010a64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	f000 bd20 	b.w	80114ac <__ieee754_sqrt>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	9304      	str	r3, [sp, #16]
 8010a70:	ec47 6b10 	vmov	d0, r6, r7
 8010a74:	f000 fc62 	bl	801133c <fabs>
 8010a78:	ec51 0b10 	vmov	r0, r1, d0
 8010a7c:	f1ba 0f00 	cmp.w	sl, #0
 8010a80:	d129      	bne.n	8010ad6 <__ieee754_pow+0x1ee>
 8010a82:	b124      	cbz	r4, 8010a8e <__ieee754_pow+0x1a6>
 8010a84:	4b2f      	ldr	r3, [pc, #188]	; (8010b44 <__ieee754_pow+0x25c>)
 8010a86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d123      	bne.n	8010ad6 <__ieee754_pow+0x1ee>
 8010a8e:	f1b9 0f00 	cmp.w	r9, #0
 8010a92:	da05      	bge.n	8010aa0 <__ieee754_pow+0x1b8>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	2000      	movs	r0, #0
 8010a9a:	492a      	ldr	r1, [pc, #168]	; (8010b44 <__ieee754_pow+0x25c>)
 8010a9c:	f7ef fef6 	bl	800088c <__aeabi_ddiv>
 8010aa0:	2d00      	cmp	r5, #0
 8010aa2:	f6bf af40 	bge.w	8010926 <__ieee754_pow+0x3e>
 8010aa6:	9b04      	ldr	r3, [sp, #16]
 8010aa8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010aac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010ab0:	431c      	orrs	r4, r3
 8010ab2:	d108      	bne.n	8010ac6 <__ieee754_pow+0x1de>
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4610      	mov	r0, r2
 8010aba:	4619      	mov	r1, r3
 8010abc:	f7ef fc04 	bl	80002c8 <__aeabi_dsub>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	e78f      	b.n	80109e6 <__ieee754_pow+0xfe>
 8010ac6:	9b04      	ldr	r3, [sp, #16]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	f47f af2c 	bne.w	8010926 <__ieee754_pow+0x3e>
 8010ace:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	e727      	b.n	8010926 <__ieee754_pow+0x3e>
 8010ad6:	0feb      	lsrs	r3, r5, #31
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	9306      	str	r3, [sp, #24]
 8010adc:	9a06      	ldr	r2, [sp, #24]
 8010ade:	9b04      	ldr	r3, [sp, #16]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	d102      	bne.n	8010aea <__ieee754_pow+0x202>
 8010ae4:	4632      	mov	r2, r6
 8010ae6:	463b      	mov	r3, r7
 8010ae8:	e7e6      	b.n	8010ab8 <__ieee754_pow+0x1d0>
 8010aea:	4b19      	ldr	r3, [pc, #100]	; (8010b50 <__ieee754_pow+0x268>)
 8010aec:	4598      	cmp	r8, r3
 8010aee:	f340 80fb 	ble.w	8010ce8 <__ieee754_pow+0x400>
 8010af2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010af6:	4598      	cmp	r8, r3
 8010af8:	4b13      	ldr	r3, [pc, #76]	; (8010b48 <__ieee754_pow+0x260>)
 8010afa:	dd0c      	ble.n	8010b16 <__ieee754_pow+0x22e>
 8010afc:	429c      	cmp	r4, r3
 8010afe:	dc0f      	bgt.n	8010b20 <__ieee754_pow+0x238>
 8010b00:	f1b9 0f00 	cmp.w	r9, #0
 8010b04:	da0f      	bge.n	8010b26 <__ieee754_pow+0x23e>
 8010b06:	2000      	movs	r0, #0
 8010b08:	b009      	add	sp, #36	; 0x24
 8010b0a:	ecbd 8b06 	vpop	{d8-d10}
 8010b0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b12:	f000 bcc2 	b.w	801149a <__math_oflow>
 8010b16:	429c      	cmp	r4, r3
 8010b18:	dbf2      	blt.n	8010b00 <__ieee754_pow+0x218>
 8010b1a:	4b0a      	ldr	r3, [pc, #40]	; (8010b44 <__ieee754_pow+0x25c>)
 8010b1c:	429c      	cmp	r4, r3
 8010b1e:	dd19      	ble.n	8010b54 <__ieee754_pow+0x26c>
 8010b20:	f1b9 0f00 	cmp.w	r9, #0
 8010b24:	dcef      	bgt.n	8010b06 <__ieee754_pow+0x21e>
 8010b26:	2000      	movs	r0, #0
 8010b28:	b009      	add	sp, #36	; 0x24
 8010b2a:	ecbd 8b06 	vpop	{d8-d10}
 8010b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b32:	f000 bca9 	b.w	8011488 <__math_uflow>
 8010b36:	bf00      	nop
 8010b38:	fff00000 	.word	0xfff00000
 8010b3c:	7ff00000 	.word	0x7ff00000
 8010b40:	433fffff 	.word	0x433fffff
 8010b44:	3ff00000 	.word	0x3ff00000
 8010b48:	3fefffff 	.word	0x3fefffff
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	41e00000 	.word	0x41e00000
 8010b54:	4b60      	ldr	r3, [pc, #384]	; (8010cd8 <__ieee754_pow+0x3f0>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	f7ef fbb6 	bl	80002c8 <__aeabi_dsub>
 8010b5c:	a354      	add	r3, pc, #336	; (adr r3, 8010cb0 <__ieee754_pow+0x3c8>)
 8010b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b62:	4604      	mov	r4, r0
 8010b64:	460d      	mov	r5, r1
 8010b66:	f7ef fd67 	bl	8000638 <__aeabi_dmul>
 8010b6a:	a353      	add	r3, pc, #332	; (adr r3, 8010cb8 <__ieee754_pow+0x3d0>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	4606      	mov	r6, r0
 8010b72:	460f      	mov	r7, r1
 8010b74:	4620      	mov	r0, r4
 8010b76:	4629      	mov	r1, r5
 8010b78:	f7ef fd5e 	bl	8000638 <__aeabi_dmul>
 8010b7c:	4b57      	ldr	r3, [pc, #348]	; (8010cdc <__ieee754_pow+0x3f4>)
 8010b7e:	4682      	mov	sl, r0
 8010b80:	468b      	mov	fp, r1
 8010b82:	2200      	movs	r2, #0
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fd56 	bl	8000638 <__aeabi_dmul>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	460b      	mov	r3, r1
 8010b90:	a14b      	add	r1, pc, #300	; (adr r1, 8010cc0 <__ieee754_pow+0x3d8>)
 8010b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b96:	f7ef fb97 	bl	80002c8 <__aeabi_dsub>
 8010b9a:	4622      	mov	r2, r4
 8010b9c:	462b      	mov	r3, r5
 8010b9e:	f7ef fd4b 	bl	8000638 <__aeabi_dmul>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	494d      	ldr	r1, [pc, #308]	; (8010ce0 <__ieee754_pow+0x3f8>)
 8010baa:	f7ef fb8d 	bl	80002c8 <__aeabi_dsub>
 8010bae:	4622      	mov	r2, r4
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	4689      	mov	r9, r1
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	4629      	mov	r1, r5
 8010bba:	f7ef fd3d 	bl	8000638 <__aeabi_dmul>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	4649      	mov	r1, r9
 8010bc6:	f7ef fd37 	bl	8000638 <__aeabi_dmul>
 8010bca:	a33f      	add	r3, pc, #252	; (adr r3, 8010cc8 <__ieee754_pow+0x3e0>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef fd32 	bl	8000638 <__aeabi_dmul>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	4650      	mov	r0, sl
 8010bda:	4659      	mov	r1, fp
 8010bdc:	f7ef fb74 	bl	80002c8 <__aeabi_dsub>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	4680      	mov	r8, r0
 8010be6:	4689      	mov	r9, r1
 8010be8:	4630      	mov	r0, r6
 8010bea:	4639      	mov	r1, r7
 8010bec:	f7ef fb6e 	bl	80002cc <__adddf3>
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	4632      	mov	r2, r6
 8010bf4:	463b      	mov	r3, r7
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	460d      	mov	r5, r1
 8010bfa:	f7ef fb65 	bl	80002c8 <__aeabi_dsub>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	4640      	mov	r0, r8
 8010c04:	4649      	mov	r1, r9
 8010c06:	f7ef fb5f 	bl	80002c8 <__aeabi_dsub>
 8010c0a:	9b04      	ldr	r3, [sp, #16]
 8010c0c:	9a06      	ldr	r2, [sp, #24]
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	4313      	orrs	r3, r2
 8010c12:	4682      	mov	sl, r0
 8010c14:	468b      	mov	fp, r1
 8010c16:	f040 81e7 	bne.w	8010fe8 <__ieee754_pow+0x700>
 8010c1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010cd0 <__ieee754_pow+0x3e8>
 8010c1e:	eeb0 8a47 	vmov.f32	s16, s14
 8010c22:	eef0 8a67 	vmov.f32	s17, s15
 8010c26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010c2a:	2600      	movs	r6, #0
 8010c2c:	4632      	mov	r2, r6
 8010c2e:	463b      	mov	r3, r7
 8010c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c34:	f7ef fb48 	bl	80002c8 <__aeabi_dsub>
 8010c38:	4622      	mov	r2, r4
 8010c3a:	462b      	mov	r3, r5
 8010c3c:	f7ef fcfc 	bl	8000638 <__aeabi_dmul>
 8010c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c44:	4680      	mov	r8, r0
 8010c46:	4689      	mov	r9, r1
 8010c48:	4650      	mov	r0, sl
 8010c4a:	4659      	mov	r1, fp
 8010c4c:	f7ef fcf4 	bl	8000638 <__aeabi_dmul>
 8010c50:	4602      	mov	r2, r0
 8010c52:	460b      	mov	r3, r1
 8010c54:	4640      	mov	r0, r8
 8010c56:	4649      	mov	r1, r9
 8010c58:	f7ef fb38 	bl	80002cc <__adddf3>
 8010c5c:	4632      	mov	r2, r6
 8010c5e:	463b      	mov	r3, r7
 8010c60:	4680      	mov	r8, r0
 8010c62:	4689      	mov	r9, r1
 8010c64:	4620      	mov	r0, r4
 8010c66:	4629      	mov	r1, r5
 8010c68:	f7ef fce6 	bl	8000638 <__aeabi_dmul>
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4604      	mov	r4, r0
 8010c70:	460d      	mov	r5, r1
 8010c72:	4602      	mov	r2, r0
 8010c74:	4649      	mov	r1, r9
 8010c76:	4640      	mov	r0, r8
 8010c78:	f7ef fb28 	bl	80002cc <__adddf3>
 8010c7c:	4b19      	ldr	r3, [pc, #100]	; (8010ce4 <__ieee754_pow+0x3fc>)
 8010c7e:	4299      	cmp	r1, r3
 8010c80:	ec45 4b19 	vmov	d9, r4, r5
 8010c84:	4606      	mov	r6, r0
 8010c86:	460f      	mov	r7, r1
 8010c88:	468b      	mov	fp, r1
 8010c8a:	f340 82f0 	ble.w	801126e <__ieee754_pow+0x986>
 8010c8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010c92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010c96:	4303      	orrs	r3, r0
 8010c98:	f000 81e4 	beq.w	8011064 <__ieee754_pow+0x77c>
 8010c9c:	ec51 0b18 	vmov	r0, r1, d8
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f7ef ff3a 	bl	8000b1c <__aeabi_dcmplt>
 8010ca8:	3800      	subs	r0, #0
 8010caa:	bf18      	it	ne
 8010cac:	2001      	movne	r0, #1
 8010cae:	e72b      	b.n	8010b08 <__ieee754_pow+0x220>
 8010cb0:	60000000 	.word	0x60000000
 8010cb4:	3ff71547 	.word	0x3ff71547
 8010cb8:	f85ddf44 	.word	0xf85ddf44
 8010cbc:	3e54ae0b 	.word	0x3e54ae0b
 8010cc0:	55555555 	.word	0x55555555
 8010cc4:	3fd55555 	.word	0x3fd55555
 8010cc8:	652b82fe 	.word	0x652b82fe
 8010ccc:	3ff71547 	.word	0x3ff71547
 8010cd0:	00000000 	.word	0x00000000
 8010cd4:	bff00000 	.word	0xbff00000
 8010cd8:	3ff00000 	.word	0x3ff00000
 8010cdc:	3fd00000 	.word	0x3fd00000
 8010ce0:	3fe00000 	.word	0x3fe00000
 8010ce4:	408fffff 	.word	0x408fffff
 8010ce8:	4bd5      	ldr	r3, [pc, #852]	; (8011040 <__ieee754_pow+0x758>)
 8010cea:	402b      	ands	r3, r5
 8010cec:	2200      	movs	r2, #0
 8010cee:	b92b      	cbnz	r3, 8010cfc <__ieee754_pow+0x414>
 8010cf0:	4bd4      	ldr	r3, [pc, #848]	; (8011044 <__ieee754_pow+0x75c>)
 8010cf2:	f7ef fca1 	bl	8000638 <__aeabi_dmul>
 8010cf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	1523      	asrs	r3, r4, #20
 8010cfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010d02:	4413      	add	r3, r2
 8010d04:	9305      	str	r3, [sp, #20]
 8010d06:	4bd0      	ldr	r3, [pc, #832]	; (8011048 <__ieee754_pow+0x760>)
 8010d08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010d0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010d10:	429c      	cmp	r4, r3
 8010d12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010d16:	dd08      	ble.n	8010d2a <__ieee754_pow+0x442>
 8010d18:	4bcc      	ldr	r3, [pc, #816]	; (801104c <__ieee754_pow+0x764>)
 8010d1a:	429c      	cmp	r4, r3
 8010d1c:	f340 8162 	ble.w	8010fe4 <__ieee754_pow+0x6fc>
 8010d20:	9b05      	ldr	r3, [sp, #20]
 8010d22:	3301      	adds	r3, #1
 8010d24:	9305      	str	r3, [sp, #20]
 8010d26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010d2a:	2400      	movs	r4, #0
 8010d2c:	00e3      	lsls	r3, r4, #3
 8010d2e:	9307      	str	r3, [sp, #28]
 8010d30:	4bc7      	ldr	r3, [pc, #796]	; (8011050 <__ieee754_pow+0x768>)
 8010d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d36:	ed93 7b00 	vldr	d7, [r3]
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	ec53 2b17 	vmov	r2, r3, d7
 8010d40:	eeb0 9a47 	vmov.f32	s18, s14
 8010d44:	eef0 9a67 	vmov.f32	s19, s15
 8010d48:	4682      	mov	sl, r0
 8010d4a:	f7ef fabd 	bl	80002c8 <__aeabi_dsub>
 8010d4e:	4652      	mov	r2, sl
 8010d50:	4606      	mov	r6, r0
 8010d52:	460f      	mov	r7, r1
 8010d54:	462b      	mov	r3, r5
 8010d56:	ec51 0b19 	vmov	r0, r1, d9
 8010d5a:	f7ef fab7 	bl	80002cc <__adddf3>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	460b      	mov	r3, r1
 8010d62:	2000      	movs	r0, #0
 8010d64:	49bb      	ldr	r1, [pc, #748]	; (8011054 <__ieee754_pow+0x76c>)
 8010d66:	f7ef fd91 	bl	800088c <__aeabi_ddiv>
 8010d6a:	ec41 0b1a 	vmov	d10, r0, r1
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	4630      	mov	r0, r6
 8010d74:	4639      	mov	r1, r7
 8010d76:	f7ef fc5f 	bl	8000638 <__aeabi_dmul>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d80:	9302      	str	r3, [sp, #8]
 8010d82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010d86:	46ab      	mov	fp, r5
 8010d88:	106d      	asrs	r5, r5, #1
 8010d8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010d8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010d92:	ec41 0b18 	vmov	d8, r0, r1
 8010d96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	4640      	mov	r0, r8
 8010d9e:	4649      	mov	r1, r9
 8010da0:	4614      	mov	r4, r2
 8010da2:	461d      	mov	r5, r3
 8010da4:	f7ef fc48 	bl	8000638 <__aeabi_dmul>
 8010da8:	4602      	mov	r2, r0
 8010daa:	460b      	mov	r3, r1
 8010dac:	4630      	mov	r0, r6
 8010dae:	4639      	mov	r1, r7
 8010db0:	f7ef fa8a 	bl	80002c8 <__aeabi_dsub>
 8010db4:	ec53 2b19 	vmov	r2, r3, d9
 8010db8:	4606      	mov	r6, r0
 8010dba:	460f      	mov	r7, r1
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	f7ef fa82 	bl	80002c8 <__aeabi_dsub>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	4650      	mov	r0, sl
 8010dca:	4659      	mov	r1, fp
 8010dcc:	f7ef fa7c 	bl	80002c8 <__aeabi_dsub>
 8010dd0:	4642      	mov	r2, r8
 8010dd2:	464b      	mov	r3, r9
 8010dd4:	f7ef fc30 	bl	8000638 <__aeabi_dmul>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	4630      	mov	r0, r6
 8010dde:	4639      	mov	r1, r7
 8010de0:	f7ef fa72 	bl	80002c8 <__aeabi_dsub>
 8010de4:	ec53 2b1a 	vmov	r2, r3, d10
 8010de8:	f7ef fc26 	bl	8000638 <__aeabi_dmul>
 8010dec:	ec53 2b18 	vmov	r2, r3, d8
 8010df0:	ec41 0b19 	vmov	d9, r0, r1
 8010df4:	ec51 0b18 	vmov	r0, r1, d8
 8010df8:	f7ef fc1e 	bl	8000638 <__aeabi_dmul>
 8010dfc:	a37c      	add	r3, pc, #496	; (adr r3, 8010ff0 <__ieee754_pow+0x708>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	4604      	mov	r4, r0
 8010e04:	460d      	mov	r5, r1
 8010e06:	f7ef fc17 	bl	8000638 <__aeabi_dmul>
 8010e0a:	a37b      	add	r3, pc, #492	; (adr r3, 8010ff8 <__ieee754_pow+0x710>)
 8010e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e10:	f7ef fa5c 	bl	80002cc <__adddf3>
 8010e14:	4622      	mov	r2, r4
 8010e16:	462b      	mov	r3, r5
 8010e18:	f7ef fc0e 	bl	8000638 <__aeabi_dmul>
 8010e1c:	a378      	add	r3, pc, #480	; (adr r3, 8011000 <__ieee754_pow+0x718>)
 8010e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e22:	f7ef fa53 	bl	80002cc <__adddf3>
 8010e26:	4622      	mov	r2, r4
 8010e28:	462b      	mov	r3, r5
 8010e2a:	f7ef fc05 	bl	8000638 <__aeabi_dmul>
 8010e2e:	a376      	add	r3, pc, #472	; (adr r3, 8011008 <__ieee754_pow+0x720>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	f7ef fa4a 	bl	80002cc <__adddf3>
 8010e38:	4622      	mov	r2, r4
 8010e3a:	462b      	mov	r3, r5
 8010e3c:	f7ef fbfc 	bl	8000638 <__aeabi_dmul>
 8010e40:	a373      	add	r3, pc, #460	; (adr r3, 8011010 <__ieee754_pow+0x728>)
 8010e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e46:	f7ef fa41 	bl	80002cc <__adddf3>
 8010e4a:	4622      	mov	r2, r4
 8010e4c:	462b      	mov	r3, r5
 8010e4e:	f7ef fbf3 	bl	8000638 <__aeabi_dmul>
 8010e52:	a371      	add	r3, pc, #452	; (adr r3, 8011018 <__ieee754_pow+0x730>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f7ef fa38 	bl	80002cc <__adddf3>
 8010e5c:	4622      	mov	r2, r4
 8010e5e:	4606      	mov	r6, r0
 8010e60:	460f      	mov	r7, r1
 8010e62:	462b      	mov	r3, r5
 8010e64:	4620      	mov	r0, r4
 8010e66:	4629      	mov	r1, r5
 8010e68:	f7ef fbe6 	bl	8000638 <__aeabi_dmul>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4630      	mov	r0, r6
 8010e72:	4639      	mov	r1, r7
 8010e74:	f7ef fbe0 	bl	8000638 <__aeabi_dmul>
 8010e78:	4642      	mov	r2, r8
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	460d      	mov	r5, r1
 8010e7e:	464b      	mov	r3, r9
 8010e80:	ec51 0b18 	vmov	r0, r1, d8
 8010e84:	f7ef fa22 	bl	80002cc <__adddf3>
 8010e88:	ec53 2b19 	vmov	r2, r3, d9
 8010e8c:	f7ef fbd4 	bl	8000638 <__aeabi_dmul>
 8010e90:	4622      	mov	r2, r4
 8010e92:	462b      	mov	r3, r5
 8010e94:	f7ef fa1a 	bl	80002cc <__adddf3>
 8010e98:	4642      	mov	r2, r8
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	468b      	mov	fp, r1
 8010e9e:	464b      	mov	r3, r9
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	f7ef fbc8 	bl	8000638 <__aeabi_dmul>
 8010ea8:	4b6b      	ldr	r3, [pc, #428]	; (8011058 <__ieee754_pow+0x770>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	4606      	mov	r6, r0
 8010eae:	460f      	mov	r7, r1
 8010eb0:	f7ef fa0c 	bl	80002cc <__adddf3>
 8010eb4:	4652      	mov	r2, sl
 8010eb6:	465b      	mov	r3, fp
 8010eb8:	f7ef fa08 	bl	80002cc <__adddf3>
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	460d      	mov	r5, r1
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	4640      	mov	r0, r8
 8010ec8:	4649      	mov	r1, r9
 8010eca:	f7ef fbb5 	bl	8000638 <__aeabi_dmul>
 8010ece:	4b62      	ldr	r3, [pc, #392]	; (8011058 <__ieee754_pow+0x770>)
 8010ed0:	4680      	mov	r8, r0
 8010ed2:	4689      	mov	r9, r1
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef f9f5 	bl	80002c8 <__aeabi_dsub>
 8010ede:	4632      	mov	r2, r6
 8010ee0:	463b      	mov	r3, r7
 8010ee2:	f7ef f9f1 	bl	80002c8 <__aeabi_dsub>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	460b      	mov	r3, r1
 8010eea:	4650      	mov	r0, sl
 8010eec:	4659      	mov	r1, fp
 8010eee:	f7ef f9eb 	bl	80002c8 <__aeabi_dsub>
 8010ef2:	ec53 2b18 	vmov	r2, r3, d8
 8010ef6:	f7ef fb9f 	bl	8000638 <__aeabi_dmul>
 8010efa:	4622      	mov	r2, r4
 8010efc:	4606      	mov	r6, r0
 8010efe:	460f      	mov	r7, r1
 8010f00:	462b      	mov	r3, r5
 8010f02:	ec51 0b19 	vmov	r0, r1, d9
 8010f06:	f7ef fb97 	bl	8000638 <__aeabi_dmul>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	4630      	mov	r0, r6
 8010f10:	4639      	mov	r1, r7
 8010f12:	f7ef f9db 	bl	80002cc <__adddf3>
 8010f16:	4606      	mov	r6, r0
 8010f18:	460f      	mov	r7, r1
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	4640      	mov	r0, r8
 8010f20:	4649      	mov	r1, r9
 8010f22:	f7ef f9d3 	bl	80002cc <__adddf3>
 8010f26:	a33e      	add	r3, pc, #248	; (adr r3, 8011020 <__ieee754_pow+0x738>)
 8010f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	4604      	mov	r4, r0
 8010f30:	460d      	mov	r5, r1
 8010f32:	f7ef fb81 	bl	8000638 <__aeabi_dmul>
 8010f36:	4642      	mov	r2, r8
 8010f38:	ec41 0b18 	vmov	d8, r0, r1
 8010f3c:	464b      	mov	r3, r9
 8010f3e:	4620      	mov	r0, r4
 8010f40:	4629      	mov	r1, r5
 8010f42:	f7ef f9c1 	bl	80002c8 <__aeabi_dsub>
 8010f46:	4602      	mov	r2, r0
 8010f48:	460b      	mov	r3, r1
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ef f9bb 	bl	80002c8 <__aeabi_dsub>
 8010f52:	a335      	add	r3, pc, #212	; (adr r3, 8011028 <__ieee754_pow+0x740>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	f7ef fb6e 	bl	8000638 <__aeabi_dmul>
 8010f5c:	a334      	add	r3, pc, #208	; (adr r3, 8011030 <__ieee754_pow+0x748>)
 8010f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f62:	4606      	mov	r6, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef fb65 	bl	8000638 <__aeabi_dmul>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4630      	mov	r0, r6
 8010f74:	4639      	mov	r1, r7
 8010f76:	f7ef f9a9 	bl	80002cc <__adddf3>
 8010f7a:	9a07      	ldr	r2, [sp, #28]
 8010f7c:	4b37      	ldr	r3, [pc, #220]	; (801105c <__ieee754_pow+0x774>)
 8010f7e:	4413      	add	r3, r2
 8010f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f84:	f7ef f9a2 	bl	80002cc <__adddf3>
 8010f88:	4682      	mov	sl, r0
 8010f8a:	9805      	ldr	r0, [sp, #20]
 8010f8c:	468b      	mov	fp, r1
 8010f8e:	f7ef fae9 	bl	8000564 <__aeabi_i2d>
 8010f92:	9a07      	ldr	r2, [sp, #28]
 8010f94:	4b32      	ldr	r3, [pc, #200]	; (8011060 <__ieee754_pow+0x778>)
 8010f96:	4413      	add	r3, r2
 8010f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f9c:	4606      	mov	r6, r0
 8010f9e:	460f      	mov	r7, r1
 8010fa0:	4652      	mov	r2, sl
 8010fa2:	465b      	mov	r3, fp
 8010fa4:	ec51 0b18 	vmov	r0, r1, d8
 8010fa8:	f7ef f990 	bl	80002cc <__adddf3>
 8010fac:	4642      	mov	r2, r8
 8010fae:	464b      	mov	r3, r9
 8010fb0:	f7ef f98c 	bl	80002cc <__adddf3>
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	f7ef f988 	bl	80002cc <__adddf3>
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	4632      	mov	r2, r6
 8010fc0:	463b      	mov	r3, r7
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	f7ef f97f 	bl	80002c8 <__aeabi_dsub>
 8010fca:	4642      	mov	r2, r8
 8010fcc:	464b      	mov	r3, r9
 8010fce:	f7ef f97b 	bl	80002c8 <__aeabi_dsub>
 8010fd2:	ec53 2b18 	vmov	r2, r3, d8
 8010fd6:	f7ef f977 	bl	80002c8 <__aeabi_dsub>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	4650      	mov	r0, sl
 8010fe0:	4659      	mov	r1, fp
 8010fe2:	e610      	b.n	8010c06 <__ieee754_pow+0x31e>
 8010fe4:	2401      	movs	r4, #1
 8010fe6:	e6a1      	b.n	8010d2c <__ieee754_pow+0x444>
 8010fe8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011038 <__ieee754_pow+0x750>
 8010fec:	e617      	b.n	8010c1e <__ieee754_pow+0x336>
 8010fee:	bf00      	nop
 8010ff0:	4a454eef 	.word	0x4a454eef
 8010ff4:	3fca7e28 	.word	0x3fca7e28
 8010ff8:	93c9db65 	.word	0x93c9db65
 8010ffc:	3fcd864a 	.word	0x3fcd864a
 8011000:	a91d4101 	.word	0xa91d4101
 8011004:	3fd17460 	.word	0x3fd17460
 8011008:	518f264d 	.word	0x518f264d
 801100c:	3fd55555 	.word	0x3fd55555
 8011010:	db6fabff 	.word	0xdb6fabff
 8011014:	3fdb6db6 	.word	0x3fdb6db6
 8011018:	33333303 	.word	0x33333303
 801101c:	3fe33333 	.word	0x3fe33333
 8011020:	e0000000 	.word	0xe0000000
 8011024:	3feec709 	.word	0x3feec709
 8011028:	dc3a03fd 	.word	0xdc3a03fd
 801102c:	3feec709 	.word	0x3feec709
 8011030:	145b01f5 	.word	0x145b01f5
 8011034:	be3e2fe0 	.word	0xbe3e2fe0
 8011038:	00000000 	.word	0x00000000
 801103c:	3ff00000 	.word	0x3ff00000
 8011040:	7ff00000 	.word	0x7ff00000
 8011044:	43400000 	.word	0x43400000
 8011048:	0003988e 	.word	0x0003988e
 801104c:	000bb679 	.word	0x000bb679
 8011050:	08011d08 	.word	0x08011d08
 8011054:	3ff00000 	.word	0x3ff00000
 8011058:	40080000 	.word	0x40080000
 801105c:	08011d28 	.word	0x08011d28
 8011060:	08011d18 	.word	0x08011d18
 8011064:	a3b3      	add	r3, pc, #716	; (adr r3, 8011334 <__ieee754_pow+0xa4c>)
 8011066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106a:	4640      	mov	r0, r8
 801106c:	4649      	mov	r1, r9
 801106e:	f7ef f92d 	bl	80002cc <__adddf3>
 8011072:	4622      	mov	r2, r4
 8011074:	ec41 0b1a 	vmov	d10, r0, r1
 8011078:	462b      	mov	r3, r5
 801107a:	4630      	mov	r0, r6
 801107c:	4639      	mov	r1, r7
 801107e:	f7ef f923 	bl	80002c8 <__aeabi_dsub>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	ec51 0b1a 	vmov	r0, r1, d10
 801108a:	f7ef fd65 	bl	8000b58 <__aeabi_dcmpgt>
 801108e:	2800      	cmp	r0, #0
 8011090:	f47f ae04 	bne.w	8010c9c <__ieee754_pow+0x3b4>
 8011094:	4aa2      	ldr	r2, [pc, #648]	; (8011320 <__ieee754_pow+0xa38>)
 8011096:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801109a:	4293      	cmp	r3, r2
 801109c:	f340 8107 	ble.w	80112ae <__ieee754_pow+0x9c6>
 80110a0:	151b      	asrs	r3, r3, #20
 80110a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80110a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80110aa:	fa4a fa03 	asr.w	sl, sl, r3
 80110ae:	44da      	add	sl, fp
 80110b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80110b4:	489b      	ldr	r0, [pc, #620]	; (8011324 <__ieee754_pow+0xa3c>)
 80110b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80110ba:	4108      	asrs	r0, r1
 80110bc:	ea00 030a 	and.w	r3, r0, sl
 80110c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80110c4:	f1c1 0114 	rsb	r1, r1, #20
 80110c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80110cc:	fa4a fa01 	asr.w	sl, sl, r1
 80110d0:	f1bb 0f00 	cmp.w	fp, #0
 80110d4:	f04f 0200 	mov.w	r2, #0
 80110d8:	4620      	mov	r0, r4
 80110da:	4629      	mov	r1, r5
 80110dc:	bfb8      	it	lt
 80110de:	f1ca 0a00 	rsblt	sl, sl, #0
 80110e2:	f7ef f8f1 	bl	80002c8 <__aeabi_dsub>
 80110e6:	ec41 0b19 	vmov	d9, r0, r1
 80110ea:	4642      	mov	r2, r8
 80110ec:	464b      	mov	r3, r9
 80110ee:	ec51 0b19 	vmov	r0, r1, d9
 80110f2:	f7ef f8eb 	bl	80002cc <__adddf3>
 80110f6:	a37a      	add	r3, pc, #488	; (adr r3, 80112e0 <__ieee754_pow+0x9f8>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	2000      	movs	r0, #0
 80110fe:	4604      	mov	r4, r0
 8011100:	460d      	mov	r5, r1
 8011102:	f7ef fa99 	bl	8000638 <__aeabi_dmul>
 8011106:	ec53 2b19 	vmov	r2, r3, d9
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	4620      	mov	r0, r4
 8011110:	4629      	mov	r1, r5
 8011112:	f7ef f8d9 	bl	80002c8 <__aeabi_dsub>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4640      	mov	r0, r8
 801111c:	4649      	mov	r1, r9
 801111e:	f7ef f8d3 	bl	80002c8 <__aeabi_dsub>
 8011122:	a371      	add	r3, pc, #452	; (adr r3, 80112e8 <__ieee754_pow+0xa00>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7ef fa86 	bl	8000638 <__aeabi_dmul>
 801112c:	a370      	add	r3, pc, #448	; (adr r3, 80112f0 <__ieee754_pow+0xa08>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	4680      	mov	r8, r0
 8011134:	4689      	mov	r9, r1
 8011136:	4620      	mov	r0, r4
 8011138:	4629      	mov	r1, r5
 801113a:	f7ef fa7d 	bl	8000638 <__aeabi_dmul>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	f7ef f8c1 	bl	80002cc <__adddf3>
 801114a:	4604      	mov	r4, r0
 801114c:	460d      	mov	r5, r1
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4630      	mov	r0, r6
 8011154:	4639      	mov	r1, r7
 8011156:	f7ef f8b9 	bl	80002cc <__adddf3>
 801115a:	4632      	mov	r2, r6
 801115c:	463b      	mov	r3, r7
 801115e:	4680      	mov	r8, r0
 8011160:	4689      	mov	r9, r1
 8011162:	f7ef f8b1 	bl	80002c8 <__aeabi_dsub>
 8011166:	4602      	mov	r2, r0
 8011168:	460b      	mov	r3, r1
 801116a:	4620      	mov	r0, r4
 801116c:	4629      	mov	r1, r5
 801116e:	f7ef f8ab 	bl	80002c8 <__aeabi_dsub>
 8011172:	4642      	mov	r2, r8
 8011174:	4606      	mov	r6, r0
 8011176:	460f      	mov	r7, r1
 8011178:	464b      	mov	r3, r9
 801117a:	4640      	mov	r0, r8
 801117c:	4649      	mov	r1, r9
 801117e:	f7ef fa5b 	bl	8000638 <__aeabi_dmul>
 8011182:	a35d      	add	r3, pc, #372	; (adr r3, 80112f8 <__ieee754_pow+0xa10>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	4604      	mov	r4, r0
 801118a:	460d      	mov	r5, r1
 801118c:	f7ef fa54 	bl	8000638 <__aeabi_dmul>
 8011190:	a35b      	add	r3, pc, #364	; (adr r3, 8011300 <__ieee754_pow+0xa18>)
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	f7ef f897 	bl	80002c8 <__aeabi_dsub>
 801119a:	4622      	mov	r2, r4
 801119c:	462b      	mov	r3, r5
 801119e:	f7ef fa4b 	bl	8000638 <__aeabi_dmul>
 80111a2:	a359      	add	r3, pc, #356	; (adr r3, 8011308 <__ieee754_pow+0xa20>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	f7ef f890 	bl	80002cc <__adddf3>
 80111ac:	4622      	mov	r2, r4
 80111ae:	462b      	mov	r3, r5
 80111b0:	f7ef fa42 	bl	8000638 <__aeabi_dmul>
 80111b4:	a356      	add	r3, pc, #344	; (adr r3, 8011310 <__ieee754_pow+0xa28>)
 80111b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ba:	f7ef f885 	bl	80002c8 <__aeabi_dsub>
 80111be:	4622      	mov	r2, r4
 80111c0:	462b      	mov	r3, r5
 80111c2:	f7ef fa39 	bl	8000638 <__aeabi_dmul>
 80111c6:	a354      	add	r3, pc, #336	; (adr r3, 8011318 <__ieee754_pow+0xa30>)
 80111c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111cc:	f7ef f87e 	bl	80002cc <__adddf3>
 80111d0:	4622      	mov	r2, r4
 80111d2:	462b      	mov	r3, r5
 80111d4:	f7ef fa30 	bl	8000638 <__aeabi_dmul>
 80111d8:	4602      	mov	r2, r0
 80111da:	460b      	mov	r3, r1
 80111dc:	4640      	mov	r0, r8
 80111de:	4649      	mov	r1, r9
 80111e0:	f7ef f872 	bl	80002c8 <__aeabi_dsub>
 80111e4:	4604      	mov	r4, r0
 80111e6:	460d      	mov	r5, r1
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4640      	mov	r0, r8
 80111ee:	4649      	mov	r1, r9
 80111f0:	f7ef fa22 	bl	8000638 <__aeabi_dmul>
 80111f4:	2200      	movs	r2, #0
 80111f6:	ec41 0b19 	vmov	d9, r0, r1
 80111fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80111fe:	4620      	mov	r0, r4
 8011200:	4629      	mov	r1, r5
 8011202:	f7ef f861 	bl	80002c8 <__aeabi_dsub>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	ec51 0b19 	vmov	r0, r1, d9
 801120e:	f7ef fb3d 	bl	800088c <__aeabi_ddiv>
 8011212:	4632      	mov	r2, r6
 8011214:	4604      	mov	r4, r0
 8011216:	460d      	mov	r5, r1
 8011218:	463b      	mov	r3, r7
 801121a:	4640      	mov	r0, r8
 801121c:	4649      	mov	r1, r9
 801121e:	f7ef fa0b 	bl	8000638 <__aeabi_dmul>
 8011222:	4632      	mov	r2, r6
 8011224:	463b      	mov	r3, r7
 8011226:	f7ef f851 	bl	80002cc <__adddf3>
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	4620      	mov	r0, r4
 8011230:	4629      	mov	r1, r5
 8011232:	f7ef f849 	bl	80002c8 <__aeabi_dsub>
 8011236:	4642      	mov	r2, r8
 8011238:	464b      	mov	r3, r9
 801123a:	f7ef f845 	bl	80002c8 <__aeabi_dsub>
 801123e:	460b      	mov	r3, r1
 8011240:	4602      	mov	r2, r0
 8011242:	4939      	ldr	r1, [pc, #228]	; (8011328 <__ieee754_pow+0xa40>)
 8011244:	2000      	movs	r0, #0
 8011246:	f7ef f83f 	bl	80002c8 <__aeabi_dsub>
 801124a:	ec41 0b10 	vmov	d0, r0, r1
 801124e:	ee10 3a90 	vmov	r3, s1
 8011252:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801125a:	da2b      	bge.n	80112b4 <__ieee754_pow+0x9cc>
 801125c:	4650      	mov	r0, sl
 801125e:	f000 f877 	bl	8011350 <scalbn>
 8011262:	ec51 0b10 	vmov	r0, r1, d0
 8011266:	ec53 2b18 	vmov	r2, r3, d8
 801126a:	f7ff bbee 	b.w	8010a4a <__ieee754_pow+0x162>
 801126e:	4b2f      	ldr	r3, [pc, #188]	; (801132c <__ieee754_pow+0xa44>)
 8011270:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011274:	429e      	cmp	r6, r3
 8011276:	f77f af0d 	ble.w	8011094 <__ieee754_pow+0x7ac>
 801127a:	4b2d      	ldr	r3, [pc, #180]	; (8011330 <__ieee754_pow+0xa48>)
 801127c:	440b      	add	r3, r1
 801127e:	4303      	orrs	r3, r0
 8011280:	d009      	beq.n	8011296 <__ieee754_pow+0x9ae>
 8011282:	ec51 0b18 	vmov	r0, r1, d8
 8011286:	2200      	movs	r2, #0
 8011288:	2300      	movs	r3, #0
 801128a:	f7ef fc47 	bl	8000b1c <__aeabi_dcmplt>
 801128e:	3800      	subs	r0, #0
 8011290:	bf18      	it	ne
 8011292:	2001      	movne	r0, #1
 8011294:	e448      	b.n	8010b28 <__ieee754_pow+0x240>
 8011296:	4622      	mov	r2, r4
 8011298:	462b      	mov	r3, r5
 801129a:	f7ef f815 	bl	80002c8 <__aeabi_dsub>
 801129e:	4642      	mov	r2, r8
 80112a0:	464b      	mov	r3, r9
 80112a2:	f7ef fc4f 	bl	8000b44 <__aeabi_dcmpge>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	f43f aef4 	beq.w	8011094 <__ieee754_pow+0x7ac>
 80112ac:	e7e9      	b.n	8011282 <__ieee754_pow+0x99a>
 80112ae:	f04f 0a00 	mov.w	sl, #0
 80112b2:	e71a      	b.n	80110ea <__ieee754_pow+0x802>
 80112b4:	ec51 0b10 	vmov	r0, r1, d0
 80112b8:	4619      	mov	r1, r3
 80112ba:	e7d4      	b.n	8011266 <__ieee754_pow+0x97e>
 80112bc:	491a      	ldr	r1, [pc, #104]	; (8011328 <__ieee754_pow+0xa40>)
 80112be:	2000      	movs	r0, #0
 80112c0:	f7ff bb31 	b.w	8010926 <__ieee754_pow+0x3e>
 80112c4:	2000      	movs	r0, #0
 80112c6:	2100      	movs	r1, #0
 80112c8:	f7ff bb2d 	b.w	8010926 <__ieee754_pow+0x3e>
 80112cc:	4630      	mov	r0, r6
 80112ce:	4639      	mov	r1, r7
 80112d0:	f7ff bb29 	b.w	8010926 <__ieee754_pow+0x3e>
 80112d4:	9204      	str	r2, [sp, #16]
 80112d6:	f7ff bb7b 	b.w	80109d0 <__ieee754_pow+0xe8>
 80112da:	2300      	movs	r3, #0
 80112dc:	f7ff bb65 	b.w	80109aa <__ieee754_pow+0xc2>
 80112e0:	00000000 	.word	0x00000000
 80112e4:	3fe62e43 	.word	0x3fe62e43
 80112e8:	fefa39ef 	.word	0xfefa39ef
 80112ec:	3fe62e42 	.word	0x3fe62e42
 80112f0:	0ca86c39 	.word	0x0ca86c39
 80112f4:	be205c61 	.word	0xbe205c61
 80112f8:	72bea4d0 	.word	0x72bea4d0
 80112fc:	3e663769 	.word	0x3e663769
 8011300:	c5d26bf1 	.word	0xc5d26bf1
 8011304:	3ebbbd41 	.word	0x3ebbbd41
 8011308:	af25de2c 	.word	0xaf25de2c
 801130c:	3f11566a 	.word	0x3f11566a
 8011310:	16bebd93 	.word	0x16bebd93
 8011314:	3f66c16c 	.word	0x3f66c16c
 8011318:	5555553e 	.word	0x5555553e
 801131c:	3fc55555 	.word	0x3fc55555
 8011320:	3fe00000 	.word	0x3fe00000
 8011324:	fff00000 	.word	0xfff00000
 8011328:	3ff00000 	.word	0x3ff00000
 801132c:	4090cbff 	.word	0x4090cbff
 8011330:	3f6f3400 	.word	0x3f6f3400
 8011334:	652b82fe 	.word	0x652b82fe
 8011338:	3c971547 	.word	0x3c971547

0801133c <fabs>:
 801133c:	ec51 0b10 	vmov	r0, r1, d0
 8011340:	ee10 2a10 	vmov	r2, s0
 8011344:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011348:	ec43 2b10 	vmov	d0, r2, r3
 801134c:	4770      	bx	lr
	...

08011350 <scalbn>:
 8011350:	b570      	push	{r4, r5, r6, lr}
 8011352:	ec55 4b10 	vmov	r4, r5, d0
 8011356:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801135a:	4606      	mov	r6, r0
 801135c:	462b      	mov	r3, r5
 801135e:	b999      	cbnz	r1, 8011388 <scalbn+0x38>
 8011360:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011364:	4323      	orrs	r3, r4
 8011366:	d03f      	beq.n	80113e8 <scalbn+0x98>
 8011368:	4b35      	ldr	r3, [pc, #212]	; (8011440 <scalbn+0xf0>)
 801136a:	4629      	mov	r1, r5
 801136c:	ee10 0a10 	vmov	r0, s0
 8011370:	2200      	movs	r2, #0
 8011372:	f7ef f961 	bl	8000638 <__aeabi_dmul>
 8011376:	4b33      	ldr	r3, [pc, #204]	; (8011444 <scalbn+0xf4>)
 8011378:	429e      	cmp	r6, r3
 801137a:	4604      	mov	r4, r0
 801137c:	460d      	mov	r5, r1
 801137e:	da10      	bge.n	80113a2 <scalbn+0x52>
 8011380:	a327      	add	r3, pc, #156	; (adr r3, 8011420 <scalbn+0xd0>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	e01f      	b.n	80113c8 <scalbn+0x78>
 8011388:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801138c:	4291      	cmp	r1, r2
 801138e:	d10c      	bne.n	80113aa <scalbn+0x5a>
 8011390:	ee10 2a10 	vmov	r2, s0
 8011394:	4620      	mov	r0, r4
 8011396:	4629      	mov	r1, r5
 8011398:	f7ee ff98 	bl	80002cc <__adddf3>
 801139c:	4604      	mov	r4, r0
 801139e:	460d      	mov	r5, r1
 80113a0:	e022      	b.n	80113e8 <scalbn+0x98>
 80113a2:	460b      	mov	r3, r1
 80113a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80113a8:	3936      	subs	r1, #54	; 0x36
 80113aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80113ae:	4296      	cmp	r6, r2
 80113b0:	dd0d      	ble.n	80113ce <scalbn+0x7e>
 80113b2:	2d00      	cmp	r5, #0
 80113b4:	a11c      	add	r1, pc, #112	; (adr r1, 8011428 <scalbn+0xd8>)
 80113b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ba:	da02      	bge.n	80113c2 <scalbn+0x72>
 80113bc:	a11c      	add	r1, pc, #112	; (adr r1, 8011430 <scalbn+0xe0>)
 80113be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113c2:	a319      	add	r3, pc, #100	; (adr r3, 8011428 <scalbn+0xd8>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	f7ef f936 	bl	8000638 <__aeabi_dmul>
 80113cc:	e7e6      	b.n	801139c <scalbn+0x4c>
 80113ce:	1872      	adds	r2, r6, r1
 80113d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80113d4:	428a      	cmp	r2, r1
 80113d6:	dcec      	bgt.n	80113b2 <scalbn+0x62>
 80113d8:	2a00      	cmp	r2, #0
 80113da:	dd08      	ble.n	80113ee <scalbn+0x9e>
 80113dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80113e8:	ec45 4b10 	vmov	d0, r4, r5
 80113ec:	bd70      	pop	{r4, r5, r6, pc}
 80113ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80113f2:	da08      	bge.n	8011406 <scalbn+0xb6>
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	a10a      	add	r1, pc, #40	; (adr r1, 8011420 <scalbn+0xd0>)
 80113f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113fc:	dac0      	bge.n	8011380 <scalbn+0x30>
 80113fe:	a10e      	add	r1, pc, #56	; (adr r1, 8011438 <scalbn+0xe8>)
 8011400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011404:	e7bc      	b.n	8011380 <scalbn+0x30>
 8011406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801140a:	3236      	adds	r2, #54	; 0x36
 801140c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011414:	4620      	mov	r0, r4
 8011416:	4b0c      	ldr	r3, [pc, #48]	; (8011448 <scalbn+0xf8>)
 8011418:	2200      	movs	r2, #0
 801141a:	e7d5      	b.n	80113c8 <scalbn+0x78>
 801141c:	f3af 8000 	nop.w
 8011420:	c2f8f359 	.word	0xc2f8f359
 8011424:	01a56e1f 	.word	0x01a56e1f
 8011428:	8800759c 	.word	0x8800759c
 801142c:	7e37e43c 	.word	0x7e37e43c
 8011430:	8800759c 	.word	0x8800759c
 8011434:	fe37e43c 	.word	0xfe37e43c
 8011438:	c2f8f359 	.word	0xc2f8f359
 801143c:	81a56e1f 	.word	0x81a56e1f
 8011440:	43500000 	.word	0x43500000
 8011444:	ffff3cb0 	.word	0xffff3cb0
 8011448:	3c900000 	.word	0x3c900000

0801144c <with_errno>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	4604      	mov	r4, r0
 8011450:	460d      	mov	r5, r1
 8011452:	4616      	mov	r6, r2
 8011454:	f7fc ff20 	bl	800e298 <__errno>
 8011458:	4629      	mov	r1, r5
 801145a:	6006      	str	r6, [r0, #0]
 801145c:	4620      	mov	r0, r4
 801145e:	bd70      	pop	{r4, r5, r6, pc}

08011460 <xflow>:
 8011460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011462:	4614      	mov	r4, r2
 8011464:	461d      	mov	r5, r3
 8011466:	b108      	cbz	r0, 801146c <xflow+0xc>
 8011468:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801146c:	e9cd 2300 	strd	r2, r3, [sp]
 8011470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ef f8de 	bl	8000638 <__aeabi_dmul>
 801147c:	2222      	movs	r2, #34	; 0x22
 801147e:	b003      	add	sp, #12
 8011480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011484:	f7ff bfe2 	b.w	801144c <with_errno>

08011488 <__math_uflow>:
 8011488:	b508      	push	{r3, lr}
 801148a:	2200      	movs	r2, #0
 801148c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011490:	f7ff ffe6 	bl	8011460 <xflow>
 8011494:	ec41 0b10 	vmov	d0, r0, r1
 8011498:	bd08      	pop	{r3, pc}

0801149a <__math_oflow>:
 801149a:	b508      	push	{r3, lr}
 801149c:	2200      	movs	r2, #0
 801149e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80114a2:	f7ff ffdd 	bl	8011460 <xflow>
 80114a6:	ec41 0b10 	vmov	d0, r0, r1
 80114aa:	bd08      	pop	{r3, pc}

080114ac <__ieee754_sqrt>:
 80114ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b0:	ec55 4b10 	vmov	r4, r5, d0
 80114b4:	4e67      	ldr	r6, [pc, #412]	; (8011654 <__ieee754_sqrt+0x1a8>)
 80114b6:	43ae      	bics	r6, r5
 80114b8:	ee10 0a10 	vmov	r0, s0
 80114bc:	ee10 2a10 	vmov	r2, s0
 80114c0:	4629      	mov	r1, r5
 80114c2:	462b      	mov	r3, r5
 80114c4:	d10d      	bne.n	80114e2 <__ieee754_sqrt+0x36>
 80114c6:	f7ef f8b7 	bl	8000638 <__aeabi_dmul>
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	f7ee fefb 	bl	80002cc <__adddf3>
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	ec45 4b10 	vmov	d0, r4, r5
 80114de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e2:	2d00      	cmp	r5, #0
 80114e4:	dc0b      	bgt.n	80114fe <__ieee754_sqrt+0x52>
 80114e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80114ea:	4326      	orrs	r6, r4
 80114ec:	d0f5      	beq.n	80114da <__ieee754_sqrt+0x2e>
 80114ee:	b135      	cbz	r5, 80114fe <__ieee754_sqrt+0x52>
 80114f0:	f7ee feea 	bl	80002c8 <__aeabi_dsub>
 80114f4:	4602      	mov	r2, r0
 80114f6:	460b      	mov	r3, r1
 80114f8:	f7ef f9c8 	bl	800088c <__aeabi_ddiv>
 80114fc:	e7eb      	b.n	80114d6 <__ieee754_sqrt+0x2a>
 80114fe:	1509      	asrs	r1, r1, #20
 8011500:	f000 808d 	beq.w	801161e <__ieee754_sqrt+0x172>
 8011504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011508:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801150c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011510:	07c9      	lsls	r1, r1, #31
 8011512:	bf5c      	itt	pl
 8011514:	005b      	lslpl	r3, r3, #1
 8011516:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801151a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801151e:	bf58      	it	pl
 8011520:	0052      	lslpl	r2, r2, #1
 8011522:	2500      	movs	r5, #0
 8011524:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011528:	1076      	asrs	r6, r6, #1
 801152a:	0052      	lsls	r2, r2, #1
 801152c:	f04f 0e16 	mov.w	lr, #22
 8011530:	46ac      	mov	ip, r5
 8011532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011536:	eb0c 0001 	add.w	r0, ip, r1
 801153a:	4298      	cmp	r0, r3
 801153c:	bfde      	ittt	le
 801153e:	1a1b      	suble	r3, r3, r0
 8011540:	eb00 0c01 	addle.w	ip, r0, r1
 8011544:	186d      	addle	r5, r5, r1
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	f1be 0e01 	subs.w	lr, lr, #1
 801154c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011550:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011554:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011558:	d1ed      	bne.n	8011536 <__ieee754_sqrt+0x8a>
 801155a:	4674      	mov	r4, lr
 801155c:	2720      	movs	r7, #32
 801155e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011562:	4563      	cmp	r3, ip
 8011564:	eb01 000e 	add.w	r0, r1, lr
 8011568:	dc02      	bgt.n	8011570 <__ieee754_sqrt+0xc4>
 801156a:	d113      	bne.n	8011594 <__ieee754_sqrt+0xe8>
 801156c:	4290      	cmp	r0, r2
 801156e:	d811      	bhi.n	8011594 <__ieee754_sqrt+0xe8>
 8011570:	2800      	cmp	r0, #0
 8011572:	eb00 0e01 	add.w	lr, r0, r1
 8011576:	da57      	bge.n	8011628 <__ieee754_sqrt+0x17c>
 8011578:	f1be 0f00 	cmp.w	lr, #0
 801157c:	db54      	blt.n	8011628 <__ieee754_sqrt+0x17c>
 801157e:	f10c 0801 	add.w	r8, ip, #1
 8011582:	eba3 030c 	sub.w	r3, r3, ip
 8011586:	4290      	cmp	r0, r2
 8011588:	bf88      	it	hi
 801158a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801158e:	1a12      	subs	r2, r2, r0
 8011590:	440c      	add	r4, r1
 8011592:	46c4      	mov	ip, r8
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	3f01      	subs	r7, #1
 8011598:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801159c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80115a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80115a4:	d1dd      	bne.n	8011562 <__ieee754_sqrt+0xb6>
 80115a6:	4313      	orrs	r3, r2
 80115a8:	d01b      	beq.n	80115e2 <__ieee754_sqrt+0x136>
 80115aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011658 <__ieee754_sqrt+0x1ac>
 80115ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801165c <__ieee754_sqrt+0x1b0>
 80115b2:	e9da 0100 	ldrd	r0, r1, [sl]
 80115b6:	e9db 2300 	ldrd	r2, r3, [fp]
 80115ba:	f7ee fe85 	bl	80002c8 <__aeabi_dsub>
 80115be:	e9da 8900 	ldrd	r8, r9, [sl]
 80115c2:	4602      	mov	r2, r0
 80115c4:	460b      	mov	r3, r1
 80115c6:	4640      	mov	r0, r8
 80115c8:	4649      	mov	r1, r9
 80115ca:	f7ef fab1 	bl	8000b30 <__aeabi_dcmple>
 80115ce:	b140      	cbz	r0, 80115e2 <__ieee754_sqrt+0x136>
 80115d0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80115d4:	e9da 0100 	ldrd	r0, r1, [sl]
 80115d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80115dc:	d126      	bne.n	801162c <__ieee754_sqrt+0x180>
 80115de:	3501      	adds	r5, #1
 80115e0:	463c      	mov	r4, r7
 80115e2:	106a      	asrs	r2, r5, #1
 80115e4:	0863      	lsrs	r3, r4, #1
 80115e6:	07e9      	lsls	r1, r5, #31
 80115e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80115ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80115f0:	bf48      	it	mi
 80115f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80115f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80115fa:	461c      	mov	r4, r3
 80115fc:	e76d      	b.n	80114da <__ieee754_sqrt+0x2e>
 80115fe:	0ad3      	lsrs	r3, r2, #11
 8011600:	3815      	subs	r0, #21
 8011602:	0552      	lsls	r2, r2, #21
 8011604:	2b00      	cmp	r3, #0
 8011606:	d0fa      	beq.n	80115fe <__ieee754_sqrt+0x152>
 8011608:	02dc      	lsls	r4, r3, #11
 801160a:	d50a      	bpl.n	8011622 <__ieee754_sqrt+0x176>
 801160c:	f1c1 0420 	rsb	r4, r1, #32
 8011610:	fa22 f404 	lsr.w	r4, r2, r4
 8011614:	1e4d      	subs	r5, r1, #1
 8011616:	408a      	lsls	r2, r1
 8011618:	4323      	orrs	r3, r4
 801161a:	1b41      	subs	r1, r0, r5
 801161c:	e772      	b.n	8011504 <__ieee754_sqrt+0x58>
 801161e:	4608      	mov	r0, r1
 8011620:	e7f0      	b.n	8011604 <__ieee754_sqrt+0x158>
 8011622:	005b      	lsls	r3, r3, #1
 8011624:	3101      	adds	r1, #1
 8011626:	e7ef      	b.n	8011608 <__ieee754_sqrt+0x15c>
 8011628:	46e0      	mov	r8, ip
 801162a:	e7aa      	b.n	8011582 <__ieee754_sqrt+0xd6>
 801162c:	f7ee fe4e 	bl	80002cc <__adddf3>
 8011630:	e9da 8900 	ldrd	r8, r9, [sl]
 8011634:	4602      	mov	r2, r0
 8011636:	460b      	mov	r3, r1
 8011638:	4640      	mov	r0, r8
 801163a:	4649      	mov	r1, r9
 801163c:	f7ef fa6e 	bl	8000b1c <__aeabi_dcmplt>
 8011640:	b120      	cbz	r0, 801164c <__ieee754_sqrt+0x1a0>
 8011642:	1ca0      	adds	r0, r4, #2
 8011644:	bf08      	it	eq
 8011646:	3501      	addeq	r5, #1
 8011648:	3402      	adds	r4, #2
 801164a:	e7ca      	b.n	80115e2 <__ieee754_sqrt+0x136>
 801164c:	3401      	adds	r4, #1
 801164e:	f024 0401 	bic.w	r4, r4, #1
 8011652:	e7c6      	b.n	80115e2 <__ieee754_sqrt+0x136>
 8011654:	7ff00000 	.word	0x7ff00000
 8011658:	200001f8 	.word	0x200001f8
 801165c:	20000200 	.word	0x20000200

08011660 <_init>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	bf00      	nop
 8011664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011666:	bc08      	pop	{r3}
 8011668:	469e      	mov	lr, r3
 801166a:	4770      	bx	lr

0801166c <_fini>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	bf00      	nop
 8011670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011672:	bc08      	pop	{r3}
 8011674:	469e      	mov	lr, r3
 8011676:	4770      	bx	lr
